{
  !(function (e, t) {
    "object" == typeof exports && "object" == typeof module
      ? (module.exports = t())
      : "function" == typeof define && define.amd
      ? define([], t)
      : "object" == typeof exports
      ? (exports["redage-clientside"] = t())
      : (e["redage-clientside"] = t());
  })(global, function () {
    return (() => {
      var e = {
          2472: (e, t, a) => {
            a.g.flymode = !1;
            var o = null,
              i = 50,
              n = 0,
              s = 0,
              r = 0,
              l = 0,
              m = 0,
              c = 0,
              p = 0,
              g = 0,
              _ = 0,
              d = 0,
              h = 0,
              u = 0,
              y = 3,
              v = 3,
              f = 3,
              w = 3,
              S = 3,
              M = 3,
              b = 3,
              T = 3,
              C = 3,
              D = 3,
              P = 3,
              E = 3,
              F = 20;
            function I(e, t, a) {
              return e + (t - e) * a;
            }
            (a.g.toggleFlyCam = (e) => {
              try {
                if (e) {
                  var t = a.g.localplayer.position,
                    n = a.g.cameraManager.gameplayCam().getRot(2);
                  (o = mp.cameras.new(
                    "default",
                    new mp.Vector3(t.x, t.y, t.z),
                    new mp.Vector3(n.x, n.y, n.z),
                    i
                  )).setActive(!0),
                    mp.game.cam.renderScriptCams(!0, !1, 0, !0, !1),
                    (a.g.flymode = !0),
                    (mp.gui.cursor.visible = !1);
                } else
                  (a.g.flymode = !1),
                    o.destroy(),
                    mp.game.cam.renderScriptCams(!1, !1, 500, !0, !1),
                    (o = null),
                    mp.keys.isDown(a.g.Keys.VK_SPACE) ||
                      ((t = a.g.localplayer.position),
                      a.g.getSafeZCoords(t.x, t.y, t.z, (e) => {
                        a.g.localplayer.setCoordsNoOffset(
                          t.x,
                          t.y,
                          e,
                          !1,
                          !1,
                          !1
                        );
                      })),
                    mp.game.invoke("0x8183455E16C42E3A"),
                    mp.game.invoke("0x3E93E06DB8EF1F30");
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "admin/cinematiccamera",
                  "toggleFlyCam",
                  e.toString()
                );
              }
            }),
              mp.events.add("client.flycam", () => {
                try {
                  if (!a.g.loggedin) return;
                  a.g.flymode || a.g.menuCheck()
                    ? a.g.toggleFlyCam(!1)
                    : a.g.toggleFlyCam(!0),
                    mp.events.callRemote("invisible", a.g.flymode),
                    a.g.localplayer.setVisible(!a.g.flymode, !1),
                    a.g.localplayer.freezePosition(a.g.flymode);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "admin/cinematiccamera",
                    "client.flycam",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.flycam.time", (e) => {
                try {
                  if (!a.g.loggedin) return;
                  !a.g.flymode ||
                    null === o ||
                    mp.game.ui.isPauseMenuActive() ||
                    mp.gui.cursor.visible ||
                    (F = e);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "admin/cinematiccamera",
                    "client.flycam.time",
                    e.toString()
                  );
                }
              }),
              mp.events.add("render", () => {
                try {
                  if (
                    a.g.flymode &&
                    null !== o &&
                    !mp.game.ui.isPauseMenuActive() &&
                    !mp.gui.cursor.visible
                  ) {
                    var e,
                      t,
                      R = a.g.localplayer.position,
                      N = o.getRot(2),
                      V = o.getDirection();
                    mp.keys.isDown(a.g.Keys.VK_NUMPAD4) || 1 != C || (C = 2),
                      mp.keys.isDown(a.g.Keys.VK_NUMPAD6) || 1 != D || (D = 2),
                      mp.keys.isDown(a.g.Keys.VK_NUMPAD2) || 1 != v || (v = 2),
                      mp.keys.isDown(a.g.Keys.VK_NUMPAD8) || 1 != y || (y = 2),
                      mp.keys.isDown(a.g.Keys.VK_NUMPAD7) || 1 != P || (P = 2),
                      mp.keys.isDown(a.g.Keys.VK_NUMPAD9) || 1 != E || (E = 2),
                      mp.keys.isDown(a.g.Keys.VK_W) || 1 != b || (b = 2),
                      mp.keys.isDown(a.g.Keys.VK_S) || 1 != T || (T = 2),
                      mp.keys.isDown(a.g.Keys.VK_A) || 1 != S || (S = 2),
                      mp.keys.isDown(a.g.Keys.VK_D) || 1 != M || (M = 2),
                      mp.keys.isDown(a.g.Keys.VK_SPACE) || 1 != w || (w = 2),
                      mp.keys.isDown(a.g.Keys.VK_CONTROL) || 1 != f || (f = 2),
                      mp.keys.isDown(a.g.Keys.VK_NUMPAD4) && 3 == D && (C = 1),
                      mp.keys.isDown(a.g.Keys.VK_NUMPAD6) && 3 == C && (D = 1),
                      mp.keys.isDown(a.g.Keys.VK_NUMPAD2) && 3 == y && (v = 1),
                      mp.keys.isDown(a.g.Keys.VK_NUMPAD8) && 3 == v && (y = 1),
                      mp.keys.isDown(a.g.Keys.VK_NUMPAD7) && 3 == E && (P = 1),
                      mp.keys.isDown(a.g.Keys.VK_NUMPAD9) && 3 == P && (E = 1),
                      mp.keys.isDown(a.g.Keys.VK_S) && 3 == b && (T = 1),
                      mp.keys.isDown(a.g.Keys.VK_W) && 3 == T && (b = 1),
                      mp.keys.isDown(a.g.Keys.VK_A) && 3 == M && (S = 1),
                      mp.keys.isDown(a.g.Keys.VK_D) && 3 == S && (M = 1),
                      mp.keys.isDown(a.g.Keys.VK_CONTROL) && 3 == w && (f = 1),
                      mp.keys.isDown(a.g.Keys.VK_SPACE) && 3 == f && (w = 1),
                      mp.keys.isDown(a.g.Keys.VK_E) &&
                        !mp.keys.isDown(a.g.Keys.VK_Q) &&
                        (F += 0.5) >= 150 &&
                        (F = 100),
                      mp.keys.isDown(a.g.Keys.VK_Q) &&
                        !mp.keys.isDown(a.g.Keys.VK_E) &&
                        (F -= 0.5) <= 0 &&
                        (F = 0),
                      mp.keys.isDown(a.g.Keys.VK_OEM_PLUS) &&
                        (i += 0.1) >= 130 &&
                        (i = 130),
                      mp.keys.isDown(a.g.Keys.VK_OEM_MINUS) &&
                        (i -= 0.1) <= 0 &&
                        (i = 0),
                      (e = mp.game.controls.getDisabledControlNormal(0, 1)),
                      (t = mp.game.controls.getDisabledControlNormal(0, 2)),
                      0 != e && (N.z = N.z + 5.5 * -e),
                      0 != t &&
                        ((N.x = N.x + 5.5 * -t),
                        N.x <= -89 ? (N.x = -89) : N.x >= 89 && (N.x = 89));
                    var x = F;
                    if (
                      (mp.keys.isDown(a.g.Keys.VK_LBUTTON) && (x = 100),
                      mp.keys.isDown(a.g.Keys.VK_RBUTTON) && (x = 1.5),
                      1 == C)
                    ) {
                      var A = o.getRot(2);
                      (r += 0.005 * x) >= 1 && (r = 1),
                        (N.z = I(A.z, N.z + x, r));
                    } else
                      2 == C &&
                        ((A = o.getRot(2)),
                        (r -= 0.01 * x) <= 0 && ((r = 0), (C = 3)),
                        (N.z = I(A.z, N.z + x, r)));
                    1 == D
                      ? ((A = o.getRot(2)),
                        (l += 0.005 * x) >= 1 && (l = 1),
                        (N.z = I(A.z, N.z - x, l)))
                      : 2 == D &&
                        ((A = o.getRot(2)),
                        (l -= 0.01 * x) <= 0 && ((l = 0), (D = 3)),
                        (N.z = I(A.z, N.z - x, l))),
                      1 == y
                        ? ((A = o.getRot(2)),
                          (m += 0.005 * x) >= 1 && (m = 1),
                          (N.x = I(A.x, N.x + x, m)))
                        : 2 == y &&
                          ((A = o.getRot(2)),
                          (m -= 0.01 * x) <= 0 && ((m = 0), (y = 3)),
                          (N.x = I(A.x, N.x + x, m))),
                      1 == v
                        ? ((A = o.getRot(2)),
                          (c += 0.005 * x) >= 1 && (c = 1),
                          (N.x = I(A.x, N.x - x, c)))
                        : 2 == v &&
                          ((A = o.getRot(2)),
                          (c -= 0.01 * x) <= 0 && ((c = 0), (v = 3)),
                          (N.x = I(A.x, N.x - x, c))),
                      1 == E
                        ? ((A = o.getRot(2)),
                          (p += 0.005 * x) >= 1 && (p = 1),
                          (N.y = I(A.y, N.y + x, p)))
                        : 2 == E &&
                          ((A = o.getRot(2)),
                          (p -= 0.01 * x) <= 0 && ((p = 0), (E = 3)),
                          (N.y = I(A.y, N.y + x, p))),
                      1 == P
                        ? ((A = o.getRot(2)),
                          (g += 0.005 * x) >= 1 && (g = 1),
                          (N.y = I(A.y, N.y - x, g)))
                        : 2 == P &&
                          ((A = o.getRot(2)),
                          (g -= 0.01 * x) <= 0 && ((g = 0), (P = 3)),
                          (N.y = I(A.y, N.y - x, g))),
                      1 == b
                        ? ((h += 0.005 * x) >= 1 && (h = 1),
                          (R.x = I(R.x, R.x + V.x * (x / 10), h)),
                          (R.y = I(R.y, R.y + V.y * (x / 10), h)),
                          (R.z = I(R.z, R.z + V.z * (x / 10), h)))
                        : 2 == b &&
                          ((h -= 0.01 * x) <= 0 && ((h = 0), (b = 3)),
                          (R.x = I(R.x, R.x + V.x * (x / 10), h)),
                          (R.y = I(R.y, R.y + V.y * (x / 10), h)),
                          (R.z = I(R.z, R.z + V.z * (x / 10), h))),
                      1 == T
                        ? ((u += 0.005 * x) >= 1 && (u = 1),
                          (R.x = I(R.x, R.x - V.x * (x / 10), u)),
                          (R.y = I(R.y, R.y - V.y * (x / 10), u)),
                          (R.z = I(R.z, R.z - V.z * (x / 10), u)))
                        : 2 == T &&
                          ((u -= 0.01 * x) <= 0 && ((u = 0), (T = 3)),
                          (R.x = I(R.x, R.x - V.x * (x / 10), u)),
                          (R.y = I(R.y, R.y - V.y * (x / 10), u)),
                          (R.z = I(R.z, R.z - V.z * (x / 10), u))),
                      1 == S
                        ? ((_ += 0.005 * x) >= 1 && (_ = 1),
                          (R.x = I(R.x, R.x + -V.y * (x / 10), _)),
                          (R.y = I(R.y, R.y + V.x * (x / 10), _)))
                        : 2 == S &&
                          ((_ -= 0.01 * x) <= 0 && ((_ = 0), (S = 3)),
                          (R.x = I(R.x, R.x + -V.y * (x / 10), _)),
                          (R.y = I(R.y, R.y + V.x * (x / 10), _))),
                      1 == M
                        ? ((d += 0.005 * x) >= 1 && (d = 1),
                          (R.x = I(R.x, R.x - -V.y * (x / 10), d)),
                          (R.y = I(R.y, R.y - V.x * (x / 10), d)))
                        : 2 == M &&
                          ((d -= 0.01 * x) <= 0 && ((d = 0), (M = 3)),
                          (R.x = I(R.x, R.x - -V.y * (x / 10), d)),
                          (R.y = I(R.y, R.y - V.x * (x / 10), d))),
                      1 == w
                        ? ((s += 0.005 * x) >= 1 && (s = 1),
                          (R.z = I(R.z, R.z + x / 10, s)))
                        : 2 == w &&
                          ((s -= 0.005 * x) <= 0 && ((s = 0), (w = 3)),
                          (R.z = I(R.z, R.z + x / 10, s))),
                      1 == f
                        ? ((n += 0.005 * x) >= 1 && (n = 1),
                          (R.z = I(R.z, R.z - x / 10, n)))
                        : 2 == f &&
                          ((n -= 0.01 * x) <= 0 && ((n = 0), (f = 3)),
                          (R.z = I(R.z, R.z - x / 10, n))),
                      a.g.localplayer.setCoordsNoOffset(
                        R.x,
                        R.y,
                        R.z,
                        !1,
                        !1,
                        !1
                      ),
                      a.g.localplayer.setHeading(N.z),
                      mp.game.invoke("0x1279E861A329E73F", R.x, R.y),
                      mp.game.invoke(
                        "0x299FAEBB108AE05B",
                        parseInt((N.z + 360) % 360)
                      ),
                      o.setCoord(R.x, R.y, R.z),
                      o.setRot(N.x, N.y, N.z, 2),
                      o.setFov(i),
                      mp.game.controls.disableAllControlActions(0),
                      mp.game.controls.enableControlAction(0, 199, !0),
                      mp.game.controls.enableControlAction(0, 200, !0),
                      mp.game.controls.enableControlAction(0, 20, !0);
                  }
                } catch (e) {
                  if (
                    new Date().getTime() -
                      a.g.trycatchtime["admin/cinematiccamera"] <
                    6e4
                  )
                    return;
                  (a.g.trycatchtime["admin/cinematiccamera"] =
                    new Date().getTime()),
                    mp.events.callRemote(
                      "client_trycatch",
                      "admin/cinematiccamera",
                      "render",
                      e.toString()
                    );
                }
              });
          },
          8154: (e, t, a) => {
            (a.g.binderFunctions.esp = () => {
              try {
                if (!loggedin || a.g.chatActive || !0 !== a.g.isAdmin) return;
                4 == a.g.esptoggle ? (a.g.esptoggle = 0) : a.g.esptoggle++,
                  0 == a.g.esptoggle
                    ? mp.game.graphics.notify("ESP: ~r~Disabled")
                    : 1 == a.g.esptoggle
                    ? mp.game.graphics.notify("ESP: ~g~Only Players")
                    : 2 == a.g.esptoggle
                    ? mp.game.graphics.notify("ESP: ~g~Only Vehicles")
                    : 3 == a.g.esptoggle
                    ? mp.game.graphics.notify("ESP: ~g~Players & Vehicles")
                    : 4 == a.g.esptoggle &&
                      mp.game.graphics.notify("ESP: ~g~Furniture & Items"),
                  mp.events.callRemote("saveEspState", a.g.esptoggle);
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "admin/esp",
                  "binderFunctions",
                  e.toString()
                );
              }
            }),
              mp.events.add("setEspState", function (e) {
                try {
                  (a.g.esptoggle = e),
                    0 == e
                      ? mp.game.graphics.notify("ESP: ~r~Disabled")
                      : 1 == e
                      ? mp.game.graphics.notify("ESP: ~g~Only Players")
                      : 2 == e
                      ? mp.game.graphics.notify("ESP: ~g~Only Vehicles")
                      : 3 == e
                      ? mp.game.graphics.notify("ESP: ~g~Players & Vehicles")
                      : 4 == e &&
                        mp.game.graphics.notify("ESP: ~g~Furniture & Items");
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "admin/esp",
                    "setEspState",
                    e.toString()
                  );
                }
              }),
              mp.events.add("CheckMyVList", function (e) {
                try {
                  mp.gui.chat.push("=== VOICE LIST ==="),
                    mp.players.forEachInStreamRange((e) => {
                      e.isVoiceActive &&
                        mp.gui.chat.push("[" + e.remoteId + "] " + e.name);
                    }),
                    mp.gui.chat.push("=== VOICE LIST ===");
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "admin/esp",
                    "CheckMyVList",
                    e.toString()
                  );
                }
              }),
              mp.events.add("render", () => {
                try {
                  if (!loggedin || !0 !== a.g.isAdmin) return;
                  if (a.g.esptoggle >= 1)
                    try {
                      const e = a.g.localplayer.position;
                      let t;
                      (1 != a.g.esptoggle && 3 != a.g.esptoggle) ||
                        mp.players.forEachInStreamRange((o) => {
                          try {
                            if (0 !== o.handle && o !== a.g.localplayer) {
                              t = o.position;
                              let i = o.ALVL;
                              if (
                                (i || (i = 0),
                                9 == a.g.adminLVL || a.g.adminLVL >= Number(i))
                              ) {
                                o.isVoiceActive &&
                                  mp.game.graphics.drawText(
                                    "VOICE",
                                    [t.x, t.y, t.z + 1.8],
                                    {
                                      scale: [0.3, 0.3],
                                      outline: !0,
                                      color: [0, 255, 0, 255],
                                      font: 4,
                                    }
                                  );
                                let a = [255, 255, 255, 255];
                                const n = o.fraction;
                                i
                                  ? (a = [255, 0, 0, 255])
                                  : 1 == n
                                  ? (a = [34, 139, 34, 255])
                                  : 2 == n
                                  ? (a = [186, 85, 211, 255])
                                  : 3 == n
                                  ? (a = [240, 230, 140, 255])
                                  : 4 == n
                                  ? (a = [65, 105, 225, 255])
                                  : 5 == n
                                  ? (a = [255, 82, 82, 255])
                                  : 6 == n
                                  ? (a = [173, 255, 47, 255])
                                  : 7 == n
                                  ? (a = [0, 0, 255, 255])
                                  : 8 == n
                                  ? (a = [247, 69, 132, 255])
                                  : 9 == n
                                  ? (a = [0, 0, 255, 255])
                                  : 10 == n
                                  ? (a = [186, 155, 0, 255])
                                  : 11 == n
                                  ? (a = [10, 127, 140, 255])
                                  : 12 == n
                                  ? (a = [139, 0, 0, 255])
                                  : 13 == n
                                  ? (a = [169, 169, 169, 255])
                                  : 14 == n
                                  ? (a = [139, 69, 19, 255])
                                  : 15 == n
                                  ? (a = [255, 145, 0, 255])
                                  : 18 == n && (a = [0, 0, 255, 255]),
                                  mp.game.graphics.drawText(
                                    `${o.name} (${o.remoteId})\n${Math.round(
                                      mp.game.system.vdist(
                                        t.x,
                                        t.y,
                                        t.z,
                                        e.x,
                                        e.y,
                                        e.z
                                      )
                                    )} M | ${o.getHealth()} HP | ${o.getArmour()} AR`,
                                    [t.x, t.y, t.z + 1.5],
                                    {
                                      scale: [0.3, 0.3],
                                      outline: !0,
                                      color: a,
                                      font: 4,
                                    }
                                  );
                              } else
                                i ||
                                  mp.game.graphics.drawText(
                                    `${o.name} (${o.remoteId})\n${Math.round(
                                      mp.game.system.vdist(
                                        t.x,
                                        t.y,
                                        t.z,
                                        e.x,
                                        e.y,
                                        e.z
                                      )
                                    )} M | ${o.getHealth()} HP | ${o.getArmour()} AR`,
                                    [t.x, t.y, t.z + 1.5],
                                    {
                                      scale: [0.3, 0.3],
                                      outline: !0,
                                      color: [0, 255, 0, 255],
                                      font: 4,
                                    }
                                  );
                            }
                          } catch (e) {
                            mp.game.graphics.drawText(
                              `[ESP-ERROR] Cant render player ${o.name} (${o.remoteId})`,
                              [0.2, 0.75],
                              {
                                font: 0,
                                color: [255, 255, 255, 185],
                                scale: [0.35, 0.35],
                                outline: !0,
                              }
                            );
                          }
                        }),
                        (2 != a.g.esptoggle && 3 != a.g.esptoggle) ||
                          mp.vehicles.forEachInStreamRange((o) => {
                            if (
                              0 !== o.handle &&
                              o !== a.g.localplayer.vehicle
                            ) {
                              t = o.position;
                              try {
                                mp.game.graphics.drawText(
                                  `${mp.game.vehicle.getDisplayNameFromVehicleModel(
                                    o.model
                                  )} (${
                                    o.remoteId
                                  }) | ${Natives.GET_VEHICLE_NUMBER_PLATE_TEXT(
                                    o.handle
                                  )}\n${Math.round(
                                    mp.game.system.vdist(
                                      t.x,
                                      t.y,
                                      t.z,
                                      e.x,
                                      e.y,
                                      e.z
                                    )
                                  )} M | ${parseInt(
                                    o.getEngineHealth()
                                  )} HP | ${parseInt(3.6 * o.getSpeed())} KMH`,
                                  [t.x, t.y, t.z - 0.5],
                                  {
                                    scale: [0.3, 0.3],
                                    outline: !0,
                                    color: [255, 255, 255, 150],
                                    font: 4,
                                  }
                                );
                              } catch (a) {
                                mp.game.graphics.drawText(
                                  `${mp.game.vehicle.getDisplayNameFromVehicleModel(
                                    o.model
                                  )} (${
                                    o.remoteId
                                  }) | ${Natives.GET_VEHICLE_NUMBER_PLATE_TEXT(
                                    o.handle
                                  )}\n${Math.round(
                                    mp.game.system.vdist(
                                      t.x,
                                      t.y,
                                      t.z,
                                      e.x,
                                      e.y,
                                      e.z
                                    )
                                  )} M`,
                                  [t.x, t.y, t.z - 0.5],
                                  {
                                    scale: [0.3, 0.3],
                                    outline: !0,
                                    color: [255, 255, 255, 150],
                                    font: 4,
                                  }
                                );
                              }
                            }
                          }),
                        4 == a.g.esptoggle &&
                          mp.objects.forEachInStreamRangeItems((a) => {
                            if (
                              a &&
                              a.doesExist() &&
                              "object" == a.type &&
                              ((t = a.position),
                              mp.game.system.vdist(
                                t.x,
                                t.y,
                                t.z,
                                e.x,
                                e.y,
                                e.z
                              ) < 100)
                            )
                              try {
                                a.dropData
                                  ? mp.game.graphics.drawText(
                                      `Item (${a.remoteId})\n${
                                        a.model
                                      } | ${Math.round(
                                        mp.game.system.vdist(
                                          t.x,
                                          t.y,
                                          t.z,
                                          e.x,
                                          e.y,
                                          e.z
                                        )
                                      )} M`,
                                      [t.x, t.y, t.z - 0.1],
                                      {
                                        scale: [0.3, 0.3],
                                        outline: !0,
                                        color: [196, 196, 196, 255],
                                        font: 4,
                                      }
                                    )
                                  : a.getVariable("furniture") &&
                                    mp.game.graphics.drawText(
                                      `Furniture\n${a.model} | ${Math.round(
                                        mp.game.system.vdist(
                                          t.x,
                                          t.y,
                                          t.z,
                                          e.x,
                                          e.y,
                                          e.z
                                        )
                                      )} M`,
                                      [t.x, t.y, t.z - 0.1],
                                      {
                                        scale: [0.3, 0.3],
                                        outline: !0,
                                        color: [196, 196, 196, 255],
                                        font: 4,
                                      }
                                    );
                              } catch (e) {
                                mp.game.graphics.drawText(
                                  "[ESP-ERROR] Cant render object",
                                  [t.x, t.y, t.z - 0.1],
                                  {
                                    scale: [0.3, 0.3],
                                    outline: !0,
                                    color: [196, 196, 196, 255],
                                    font: 4,
                                  }
                                );
                              }
                          });
                    } catch (e) {
                      if (
                        new Date().getTime() - a.g.trycatchtime["admin/esp1"] <
                        5e3
                      )
                        return;
                      (a.g.trycatchtime["admin/esp1"] = new Date().getTime()),
                        mp.events.callRemote(
                          "client_trycatch",
                          "admin/esp",
                          "render#1",
                          e.toString()
                        );
                    }
                } catch (e) {
                  if (
                    new Date().getTime() - a.g.trycatchtime["admin/esp"] <
                    6e4
                  )
                    return;
                  (a.g.trycatchtime["admin/esp"] = new Date().getTime()),
                    mp.events.callRemote(
                      "client_trycatch",
                      "admin/esp",
                      "render",
                      e.toString()
                    );
                }
              });
          },
          231: (e, t, a) => {
            a.g.binderFunctions.markerteleport = () => {
              try {
                if (!a.g.loggedin || a.g.chatActive || !0 !== a.g.isAdmin)
                  return;
                let e = a.g.GetWaypointCoords();
                null !== e &&
                  a.g.getSafeZCoords(e.x, e.y, 0, (t) => {
                    a.g.localplayer.setCoordsNoOffset(e.x, e.y, t, !1, !1, !1);
                  });
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "admin/markerteleport",
                  "binderFunctions.markerteleport",
                  e.toString()
                );
              }
            };
          },
          8776: (e, t, a) => {
            a.g.fly = {
              flying: !1,
              f: 2,
              w: 2,
              h: 2,
              point_distance: 1e3,
              time: new Date().getTime(),
            };
            let o = null,
              i = null;
            mp.events.addDataHandler("INVISIBLE", (e, t, a) => {
              try {
                e &&
                  mp.players.exists(e) &&
                  "player" === e.type &&
                  0 !== e.handle &&
                  ((t = Boolean(t))
                    ? e.setVisible(!1, !1)
                    : e.setVisible(!0, !1));
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "synchronization/state",
                  "INVISIBLE",
                  e.toString()
                );
              }
            }),
              (a.g.fly.flying = !1),
              mp.events.add("SetINVISIBLE", (e) => {
                (a.g.fly.flying = e), n();
              });
            const n = () => {
              const e = mp.game.controls;
              (o = a.g.cameraManager.gameplayCam().getDirection()),
                (i = a.g.cameraManager.gameplayCam().getCoord()),
                (a.g.fly.time = new Date().getTime()),
                a.g.admingm || a.g.localplayer.setInvincible(a.g.fly.flying),
                a.g.localplayer.freezePosition(a.g.fly.flying),
                a.g.localplayer.setVisible(!a.g.fly.flying, !1),
                a.g.fly.flying ||
                  e.isControlPressed(0, 321) ||
                  a.g.setPlayerToGround(),
                !a.g.fly.flying &&
                  a.g.localplayer.REDNAME &&
                  setTimeout(() => {
                    a.g.localplayer.setAlpha(100);
                  }, 50);
            };
            (a.g.setPlayerToGround = (e = a.g.localplayer) => {
              if (e) {
                let t = e.position;
                (t.z = mp.game.gameplay.getGroundZFor3dCoord(
                  t.x,
                  t.y,
                  t.z,
                  0,
                  !1
                )),
                  e.setCoordsNoOffset(t.x, t.y, t.z, !1, !1, !1);
              }
            }),
              (a.g.binderFunctions.noclip = () => {
                try {
                  if (!a.g.loggedin || a.g.chatActive || !0 !== a.g.isAdmin)
                    return;
                  (a.g.fly.flying = !a.g.fly.flying),
                    mp.events.callRemote("invisible", a.g.fly.flying);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "admin/noclip",
                    "binderFunctions.noclip",
                    e.toString()
                  );
                }
              }),
              mp.events.add("render", () => {
                try {
                  if (fly.flying && new Date().getTime() - a.g.fly.time > 150) {
                    const t = mp.game.controls,
                      n = a.g.fly;
                    (o = a.g.cameraManager.gameplayCam().getDirection()),
                      (i = a.g.cameraManager.gameplayCam().getCoord());
                    let s = !1;
                    const r = a.g.localplayer.position;
                    var e;
                    (e = t.isControlPressed(0, 24)
                      ? 1
                      : t.isControlPressed(0, 25)
                      ? 0.02
                      : 0.2),
                      t.isControlPressed(0, 32)
                        ? (n.f < 8 && (n.f *= 1.025),
                          (r.x += o.x * n.f * e),
                          (r.y += o.y * n.f * e),
                          (r.z += o.z * n.f * e),
                          (s = !0))
                        : t.isControlPressed(0, 33)
                        ? (n.f < 8 && (n.f *= 1.025),
                          (r.x -= o.x * n.f * e),
                          (r.y -= o.y * n.f * e),
                          (r.z -= o.z * n.f * e),
                          (s = !0))
                        : (n.f = 2),
                      t.isControlPressed(0, 34)
                        ? (n.l < 8 && (n.l *= 1.025),
                          (r.x += -o.y * n.l * e),
                          (r.y += o.x * n.l * e),
                          (s = !0))
                        : t.isControlPressed(0, 35)
                        ? (n.l < 8 && (n.l *= 1.05),
                          (r.x -= -o.y * n.l * e),
                          (r.y -= o.x * n.l * e),
                          (s = !0))
                        : (n.l = 2),
                      t.isControlPressed(0, 321)
                        ? (n.h < 8 && (n.h *= 1.025),
                          (r.z += n.h * e),
                          (s = !0))
                        : t.isControlPressed(0, 326)
                        ? (n.h < 8 && (n.h *= 1.05), (r.z -= n.h * e), (s = !0))
                        : (n.h = 2),
                      a.g.localplayer.setCoordsNoOffset(
                        r.x,
                        r.y,
                        r.z,
                        !1,
                        !1,
                        !1
                      );
                  }
                } catch (e) {
                  if (
                    new Date().getTime() - a.g.trycatchtime["admin/noclip"] <
                    6e4
                  )
                    return;
                  (a.g.trycatchtime["admin/noclip"] = new Date().getTime()),
                    mp.events.callRemote(
                      "client_trycatch",
                      "admin/noclip",
                      "render",
                      e.toString()
                    );
                }
              });
          },
          8243: (e, t, a) => {
            let o = null;
            const i = new a.g.NativeMenu(
              "Spectate",
              "Spectate Menu",
              new Point(30, 500)
            );
            function n() {
              try {
                null !== o && o.destroy(),
                  mp.game.cam.renderScriptCams(!1, !1, 3e3, !0, !0),
                  (o = null);
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "admin/spectate",
                  "DestroySPCam",
                  e.toString()
                );
              }
            }
            i.Close(),
              i.AddItem(
                new a.g.UIMenuListItem(
                  "Spectate",
                  "Переключение игрока по ID",
                  new a.g.ItemsCollection(["Previous", "Next"])
                )
              ),
              i.AddItem(
                new a.g.UIMenuItem(
                  "Refresh",
                  "Обновить слежение за текущим игроком"
                )
              ),
              i.AddItem(
                new a.g.UIMenuItem("Unspectate", "Выключить режим наблюдателя")
              ),
              mp.events.add("render", () => {
                try {
                  if (!spectating || null == o) return;
                  var e,
                    t,
                    i = o.getRot(2);
                  (e = mp.game.controls.getDisabledControlNormal(0, 1)),
                    (t = mp.game.controls.getDisabledControlNormal(0, 2)),
                    0 != e && (i.z = i.z + 5.5 * -e),
                    0 != t &&
                      ((i.x = i.x + 5.5 * -t),
                      i.x <= -89 ? (i.x = -89) : i.x >= 89 && (i.x = 89)),
                    o.setRot(i.x, i.y, i.z, 2);
                } catch (e) {
                  if (
                    new Date().getTime() - a.g.trycatchtime["admin/spectate"] <
                    6e4
                  )
                    return;
                  (a.g.trycatchtime["admin/spectate"] = new Date().getTime()),
                    mp.events.callRemote(
                      "client_trycatch",
                      "admin/spectate",
                      "render",
                      e.toString()
                    );
                }
              }),
              mp.events.add("spmode", (e, t) => {
                try {
                  if (t)
                    if (e && mp.players.exists(e)) {
                      a.g.flymode,
                        1 == a.g.flymode && a.g.toggleFlyCam(!1),
                        a.g.localplayer.attachTo(
                          e.handle,
                          -1,
                          0,
                          0,
                          -6,
                          0,
                          0,
                          0,
                          !0,
                          !1,
                          !1,
                          !1,
                          0,
                          !1
                        ),
                        (a.g.sptarget = e),
                        (a.g.spectating = !0);
                      let t = a.g.cameraManager.gameplayCam().getRot(2);
                      null == o &&
                        (o = mp.cameras.new(
                          "default",
                          new mp.Vector3(
                            e.position.x,
                            e.position.y,
                            e.position.z
                          ),
                          new mp.Vector3(t.x, t.y, t.z),
                          50
                        )),
                        o.setActive(!0),
                        o.attachToPedBone(e.handle, 31086, -2, -6, 5, !1),
                        mp.game.cam.renderScriptCams(!0, !1, 0, !0, !1),
                        i.Open();
                    } else n(), mp.events.callRemote("UnSpectate");
                  else
                    n(),
                      (a.g.sptarget = null),
                      a.g.localplayer.detach(!0, !0),
                      (a.g.spectating = !1),
                      i.Close();
                  a.g.localplayer.freezePosition(t);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "admin/spectate",
                    "spmode",
                    e.toString()
                  );
                }
              }),
              i.ItemSelect.on((e) => {
                try {
                  e instanceof a.g.UIMenuListItem
                    ? "Spectate" == e.Text &&
                      (0 == e.Index
                        ? mp.events.callRemote("SpectateSelect", !1)
                        : mp.events.callRemote("SpectateSelect", !0))
                    : e instanceof a.g.UIMenuItem &&
                      ("Refresh" == e.Text
                        ? mp.events.call("spmode", sptarget, !0)
                        : "Unspectate" == e.Text &&
                          mp.events.callRemote("UnSpectate"));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "admin/spectate",
                    "spmenu.ItemSelect",
                    e.toString()
                  );
                }
              }),
              i.MenuClose.on(() => {
                try {
                  spectating && i.Open();
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "admin/spectate",
                    "spmenu.MenuClose",
                    e.toString()
                  );
                }
              });
          },
          5871: (e, t, a) => {
            const o = new Map();
            (a.g.CustomScenario = class {
              constructor(e) {
                (this.name = e), o.set(e, this);
              }
              isActive(e) {
                return e.cSen === this.name;
              }
              onStart(e) {}
              onStartForNew(e) {}
              onEnd(e) {}
            }),
              mp.events.add("playerStreamIn", function (e) {
                if (!e) return;
                const t = e.cSen;
                if (t) {
                  const a = o.get(t);
                  a && a.onStartForNew(e);
                }
              }),
              mp.events.addDataHandler("cSen", function (e, t) {
                if (e) {
                  if (e.cSen) {
                    if (0 !== e.handle) {
                      const t = o.get(e.cSen);
                      t && t.onEnd(e);
                    }
                    delete e.cSen;
                  }
                  if (null !== t) {
                    if (0 !== e.handle) {
                      const a = o.get(t);
                      a && a.onStart(e);
                    }
                    e.cSen = t;
                  }
                }
              });
          },
          311: (e, t, a) => {
            "use strict";
            a.r(t), a(5871);
          },
          861: (e, t, a) => {
            const o = "client.battlepass.",
              i = "rpc.battlepass.",
              n = "server.battlepass.",
              s = {
                awards: [],
                awardsPremium: [],
                lvl: 0,
                exp: 0,
                isPremium: !1,
                tasksDay: [],
                tasksWeek: [],
                tookReward: [],
                tookRewardPremium: [],
                missionsTask: [],
                missionDataTasks: [],
                missionDataSelect: 0,
              };
            mp.events.add(o + "open", () => {
              let e = s.awards.length > 0;
              mp.events.callRemote(n + "open", e);
            });
            let r = !1;
            mp.events.add(
              o + "show",
              (e, t, o, i, n, l, m, c, p, g, _, d, h) => {
                r ||
                  ((s.lvl = e),
                  (s.exp = t),
                  (s.isPremium = o),
                  (s.tasksDay = JSON.parse(i)),
                  (s.tasksWeek = JSON.parse(n)),
                  (s.tookReward = JSON.parse(l)),
                  (s.tookRewardPremium = JSON.parse(m)),
                  c && "string" == typeof c && (s.awards = JSON.parse(c)),
                  p &&
                    "string" == typeof p &&
                    (s.awardsPremium = JSON.parse(p)),
                  (s.time = g),
                  _ && "string" == typeof _ && (s.missionsTask = JSON.parse(_)),
                  (s.missionDataTasks = JSON.parse(d)),
                  (s.missionDataSelect = h),
                  mp.gui.emmit('window.router.setView("PlayerBattlePass");'),
                  mp.discord.update(
                    "Изучает боевой пропуск",
                    `на RedAge под ID ${a.g.localplayer.remoteId}`
                  ),
                  (r = !0),
                  a.g.menuOpen());
              }
            ),
              mp.events.add(o + "close", () => {
                r &&
                  (mp.gui.emmit("window.router.setHud();"),
                  a.g.menuClose(),
                  (r = !1));
              }),
              rpc.register(i + "getAwardsCount", () => s.awards.length),
              rpc.register(i + "getAwards", (e) =>
                JSON.stringify(
                  ((e) => {
                    const t = Array.from(s.awards),
                      a = Array.from(s.awardsPremium);
                    let o = [];
                    for (let i = 0; i < 6; i++) {
                      const n = 6 * e + i;
                      o.push({
                        index: n,
                        usual: { taked: s.tookReward.includes(n), ...t[n] },
                        premium: {
                          taked: s.tookRewardPremium.includes(n),
                          ...a[n],
                        },
                      });
                    }
                    return o;
                  })(e)
                )
              ),
              rpc.register(i + "isAllAwardsTaked", () =>
                (() => {
                  const e = Array.from(s.awards),
                    t = Array.from(s.awardsPremium);
                  let a = !1;
                  for (let o = 0; o < e.length; o++)
                    if (s.lvl > o) {
                      if (e[o].Type >= 0 && !s.tookReward.includes(o)) {
                        a = !0;
                        break;
                      }
                      if (
                        s.isPremium &&
                        t[o].Type >= 0 &&
                        !s.tookRewardPremium.includes(o)
                      ) {
                        a = !0;
                        break;
                      }
                    }
                  return a;
                })()
              ),
              rpc.register(i + "getLvl", () => s.lvl),
              rpc.register(i + "getExp", () => s.exp),
              rpc.register(i + "getMinutesAddExp", () => s.time),
              rpc.register(i + "getPremium", () => s.isPremium),
              rpc.register(i + "getTasksDay", () => JSON.stringify(s.tasksDay)),
              rpc.register(i + "getTasksWeek", () =>
                JSON.stringify(s.tasksWeek)
              ),
              mp.events.add(o + "takeAll", () => {
                mp.events.callRemote(n + "takeAll");
              }),
              mp.events.add(o + "take", (e, t) => {
                mp.events.callRemote(n + "take", e, t);
              }),
              mp.events.add(o + "takeSuccess", (e, t) => {
                (s.tookReward = JSON.parse(e)),
                  (s.tookRewardPremium = JSON.parse(t)),
                  mp.gui.emmit(
                    "window.listernEvent ('battlePassTakeSuccess');"
                  ),
                  mp.gui.emmit("window.listernEvent ('isAllAwardsTaked');");
              }),
              mp.events.add(o + "buyPremium", () => {
                mp.events.call("client.donatepack.open", 0);
              }),
              mp.events.add(o + "buyPremiumSuccess", () => {
                (s.isPremium = !0),
                  mp.gui.emmit(
                    "window.listernEvent ('battlePassBuyPremiumSuccess');"
                  );
              }),
              mp.events.add(o + "buyLvl", (e) => {
                mp.events.callRemote(n + "buyLvl", e);
              }),
              mp.events.add(o + "updateLvlAndExp", (e, t, a) => {
                (s.lvl = e),
                  (s.exp = t),
                  mp.gui.emmit(
                    "window.listernEvent ('battlePassUpdateLvlAndExp');"
                  ),
                  mp.gui.emmit("window.listernEvent ('isAllAwardsTaked');"),
                  a && ((s.tasksDay = []), (s.tasksWeek = []));
              });
            rpc.register(i + "getMissions", (e) =>
              JSON.stringify(
                ((e) => {
                  let t = {};
                  s.missionDataTasks.forEach((e) => {
                    t[e.Index] = e;
                  });
                  const a = Array.from(s.missionsTask);
                  let o = [];
                  for (let i = 0; i < 20; i++) {
                    const n = a[20 * e + i];
                    if ("object" == typeof n) {
                      const e = t[n.id];
                      let a = 0;
                      s.missionDataSelect === n.id
                        ? (a = 1)
                        : "object" == typeof e && e.IsReward && (a = 2),
                        o.push({
                          ...n,
                          isDone: "object" == typeof e && e.IsDone,
                          count: "object" == typeof e ? e.Count : 0,
                          status: a,
                        });
                    }
                  }
                  return o;
                })(e)
              )
            ),
              mp.events.add(o + "setMissions", (e) => {
                mp.events.callRemote(n + "setMissions", e);
              }),
              mp.events.add(o + "updateMissions", (e, t, a) => {
                (s.missionDataSelect = e),
                  (s.missionDataTasks = JSON.parse(t)),
                  a && "string" == typeof a && (s.missionsTask = JSON.parse(a)),
                  mp.gui.emmit("window.listernEvent ('updateMissions');");
              }),
              mp.events.add(o + "missionComplite", (e, t) => {
                mp.gui.emmit(
                  `window.missionComplite ('${e}', '${t}', 'Молодец, ты справился!', 'https://cloud.redage.net/cloud/inventoryItems/items/bp.png');`
                ),
                  mp.events.call(
                    "sounds.playInterface",
                    "cloud/sound/missionComplite.ogg",
                    0.005
                  );
              }),
              mp.events.add(o + "skip", () => {
                mp.events.callRemote(n + "skip");
              });
          },
          9728: (e, t, a) => {
            const o = "client.businessmanage.",
              i = "rpc.businessmanage.";
            let n = {},
              s = [],
              r = [],
              l = [],
              m = [];
            mp.events.add(o + "open", async (e, t, o) => {
              (n = JSON.parse(e)),
                (s = JSON.parse(t)),
                (r = JSON.parse(o)),
                await a.g.awaitMenuCheck(),
                a.g.menuOpen(),
                mp.gui.emmit('window.router.setView("BusinessManage")'),
                mp.discord.update(
                  "Управляет своим бизнесом",
                  `на RedAge под ID ${a.g.localplayer.remoteId}`
                );
            }),
              rpc.register(i + "getStats", () => JSON.stringify(n)),
              rpc.register(i + "getOrders", () => JSON.stringify(r)),
              rpc.register(i + "getStocks", () => JSON.stringify(s)),
              mp.events.add(o + "getHistory", () => {
                mp.events.callRemote("server.businessmanage.gethistory");
              }),
              mp.events.add(o + "setHistory", (e, t) => {
                (json = JSON.parse(json)),
                  json.forEach((e) => {
                    l.push({ name: e[4], price: e[5] }),
                      m.push({
                        uuid: e[3].toString(36),
                        name: e[4],
                        price: e[5],
                      });
                  }),
                  mp.gui.emmit("window.listernEvent.updateBusinessHistory ();");
              }),
              rpc.register(i + "getTopProd", () => JSON.stringify(l)),
              mp.events.add("client.businessmanage.cancelOrder", (e) => {
                try {
                  e &&
                    mp.events.callRemote(
                      "server.businessmanage.cancelOrder",
                      e
                    );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "fractions/businessmanage",
                    "client.businessmanage.cancelOrder",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.businessmanage.makeOrder", (e) => {
                try {
                  e &&
                    mp.events.callRemote("server.businessmanage.makeOrder", e);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "fractions/businessmanage",
                    "client.businessmanage.makeOrder",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.businessmanage.changePrice", (e, t) => {
                try {
                  e &&
                    mp.events.callRemote(
                      "server.businessmanage.changePrice",
                      e
                    );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "fractions/businessmanage",
                    "client.businessmanage.changePrice",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.businessmanage.fillStocks", (e) => {
                try {
                  e &&
                    mp.events.callRemote("server.businessmanage.fillStocks", e);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "fractions/businessmanage",
                    "client.businessmanage.fillStocks",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.businessmanage.sellBiz", () => {
                try {
                  id && mp.events.callRemote("server.businessmanage.sellBiz");
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "fractions/businessmanage",
                    "client.businessmanage.sellBiz",
                    e.toString()
                  );
                }
              });
          },
          9621: (e, t, a) => {
            var o = 0.1,
              i = "function" == typeof Float32Array;
            function n(e, t) {
              return 1 - 3 * t + 3 * e;
            }
            function s(e, t) {
              return 3 * t - 6 * e;
            }
            function r(e) {
              return 3 * e;
            }
            function l(e, t, a) {
              return ((n(t, a) * e + s(t, a)) * e + r(t)) * e;
            }
            function m(e, t, a) {
              return 3 * n(t, a) * e * e + 2 * s(t, a) * e + r(t);
            }
            function c(e) {
              return e;
            }
            a.g.BezierEasing = function (e, t, a, n) {
              if (!(0 <= e && e <= 1 && 0 <= a && a <= 1))
                throw new Error("bezier x values must be in [0, 1] range");
              if (e === t && a === n) return c;
              for (
                var s = i ? new Float32Array(11) : new Array(11), r = 0;
                r < 11;
                ++r
              )
                s[r] = l(r * o, e, a);
              return function (i) {
                return 0 === i
                  ? 0
                  : 1 === i
                  ? 1
                  : l(
                      (function (t) {
                        for (var i = 0, n = 1; 10 !== n && s[n] <= t; ++n)
                          i += o;
                        --n;
                        var r = i + ((t - s[n]) / (s[n + 1] - s[n])) * o,
                          c = m(r, e, a);
                        return c >= 0.001
                          ? (function (e, t, a, o) {
                              for (var i = 0; i < 4; ++i) {
                                var n = m(t, a, o);
                                if (0 === n) return t;
                                t -= (l(t, a, o) - e) / n;
                              }
                              return t;
                            })(t, r, e, a)
                          : 0 === c
                          ? r
                          : (function (e, t, a, o, i) {
                              var n,
                                s,
                                r = 0;
                              do {
                                (n = l((s = t + (a - t) / 2), o, i) - e) > 0
                                  ? (a = s)
                                  : (t = s);
                              } while (Math.abs(n) > 1e-7 && ++r < 10);
                              return s;
                            })(t, i, i + o, e, a);
                      })(i),
                      t,
                      n
                    );
              };
            };
          },
          3408: (e, t, a) => {
            (a.g.fixRotation = 180),
              (a.g.speedCamera = void 0),
              (a.g.createCamera = (e, t = null) => {
                try {
                  if ("char" === e) {
                    const e = a.g.cameraManager.getCamera("createCharacter");
                    a.g.cameraManager.setActiveCamera(e, !0),
                      (a.g.cameraInfo.polarAngleDeg = o(t.getHeading(), 90)),
                      (a.g.cameraInfo.azimutMax = 160 + a.g.fixRotation),
                      (a.g.cameraInfo.azimutMin = 80 + a.g.fixRotation),
                      (a.g.cameraInfo.azimuthAngleDeg = 90 + a.g.fixRotation),
                      (a.g.cameraInfo.lookZ = 0),
                      (a.g.cameraInfo.heightToggled = !0),
                      (a.g.cameraInfo.radius = -1.5),
                      (a.g.cameraInfo.radiusMax = -0.5),
                      (a.g.cameraInfo.radiusMin = -1.5),
                      (a.g.cameraInfo.overlayToggled = !0),
                      (a.g.cameraPosition.poistionPoint = t.getBoneCoords(
                        12844,
                        0,
                        0,
                        0
                      )),
                      (a.g.cameraInfo.activeMovementCamera = !0),
                      (a.g.cameraInfo.init = !0);
                  } else if ("autoshop" === e) {
                    const e = a.g.cameraManager.getCamera("autoshop");
                    a.g.cameraManager.setActiveCamera(e, !0),
                      (a.g.cameraInfo.polarAngleDeg = o(t.getHeading(), 200)),
                      (a.g.cameraInfo.azimutMax = 160 + a.g.fixRotation),
                      (a.g.cameraInfo.azimutMin = 90 + a.g.fixRotation),
                      (a.g.cameraInfo.azimuthAngleDeg = 100 + a.g.fixRotation),
                      (a.g.cameraInfo.lookZ = 0),
                      (a.g.cameraInfo.heightToggled = !0),
                      (a.g.cameraInfo.radius = -6.5),
                      (a.g.cameraInfo.radiusMax = -2.25),
                      (a.g.cameraInfo.radiusMin = -6.5),
                      (a.g.cameraInfo.overlayToggled = !0),
                      (a.g.cameraPosition.poistionPoint = t.position),
                      (a.g.cameraInfo.activeMovementCamera = !0),
                      (a.g.cameraInfo.init = !0);
                  } else if ("petshop" === e) {
                    const e = a.g.cameraManager.createCamera(
                      "petshop",
                      new mp.Vector3(-755.5227, 320.0132, 177.302),
                      new mp.Vector3(0, 0, 0),
                      50
                    );
                    a.g.cameraManager.setActiveCamera(e, !0),
                      (a.g.cameraInfo.activeMovementCamera = !1),
                      e.pointAtCoord(-758.2859, 320.9569, 175.7484);
                  } else if ("barbershop" === e) {
                    const e = a.g.cameraManager.createCamera(
                      "petshop",
                      new mp.Vector3(),
                      new mp.Vector3(),
                      47
                    );
                    a.g.cameraManager.setActiveCamera(e, !0),
                      (a.g.cameraInfo.azimutMax = 160 + a.g.fixRotation),
                      (a.g.cameraInfo.azimutMin = 80 + a.g.fixRotation),
                      (a.g.cameraInfo.azimuthAngleDeg = 100 + a.g.fixRotation),
                      (a.g.cameraInfo.lookZ = 0),
                      (a.g.cameraInfo.heightToggled = !0),
                      (a.g.cameraInfo.radius = -1.25),
                      (a.g.cameraInfo.radiusMax = -0.5),
                      (a.g.cameraInfo.radiusMin = -1.25),
                      (a.g.cameraInfo.overlayToggled = !0),
                      (a.g.cameraInfo.activeMovementCamera = !0),
                      (a.g.cameraInfo.init = !0);
                  } else if ("tattooshop" === e) {
                    const e = a.g.cameraManager.getCamera("createCharacter");
                    a.g.cameraManager.setActiveCamera(e, !0),
                      (a.g.cameraInfo.polarAngleDeg = o(t.getHeading(), 90)),
                      (a.g.cameraInfo.azimutMax = 160 + a.g.fixRotation),
                      (a.g.cameraInfo.azimutMin = 80 + a.g.fixRotation),
                      (a.g.cameraInfo.azimuthAngleDeg = 90 + a.g.fixRotation),
                      (a.g.cameraInfo.lookZ = 0),
                      (a.g.cameraInfo.heightToggled = !0),
                      (a.g.cameraInfo.radius = -1.5),
                      (a.g.cameraInfo.radiusMax = -0.5),
                      (a.g.cameraInfo.radiusMin = -1.5),
                      (a.g.cameraInfo.overlayToggled = !0),
                      (a.g.cameraPosition.poistionPoint = t.getBoneCoords(
                        11816,
                        -0.13,
                        0.13,
                        0
                      )),
                      (a.g.cameraInfo.activeMovementCamera = !0),
                      (a.g.cameraInfo.init = !0);
                  } else if ("spin" === e) {
                    const e = mp.game.object.getObjectOffsetFromCoords(
                        t.x,
                        t.y,
                        t.z,
                        t.rz,
                        0,
                        -0.87,
                        1
                      ),
                      o = mp.game.object.getObjectOffsetFromCoords(
                        t.x,
                        t.y,
                        t.z,
                        t.rz,
                        0,
                        -0.87,
                        1
                      ),
                      i = a.g.cameraManager.createCamera(
                        "spin",
                        new mp.Vector3(e.x, e.y, e.z),
                        new mp.Vector3(0, 0, t.rz),
                        40
                      );
                    a.g.cameraManager._setActiveCamera(i),
                      mp.game.cam.renderScriptCams(!0, !1, 3e3, !0, !1),
                      (a.g.cameraInfo.activeMovementCamera = !1),
                      i.pointAtCoord(o.x, o.y, o.z);
                  } else if ("peds" === e) {
                    const e = a.g.cameraManager.gameplayCam(),
                      o = t.getBoneCoords(0, 0, 0, 0);
                    let i = t.getOffsetFromGivenWorldCoords(o.x, o.y, o.z);
                    i = t.getOffsetFromInWorldCoords(i.x, i.y, i.z);
                    const n = t.position,
                      s = t.getHeading(),
                      r = mp.game.object.getObjectOffsetFromCoords(
                        n.x,
                        n.y,
                        n.z,
                        s,
                        0,
                        1.5,
                        0
                      ),
                      l = a.g.cameraManager.createCamera(
                        "peds",
                        new mp.Vector3(r.x, r.y, r.z + 0.75),
                        new mp.Vector3(),
                        40
                      );
                    l.pointAtCoord(i.x, i.y, i.z + 0.5),
                      l.setActiveWithInterp(
                        e.handle,
                        a.g.speedCamera ? a.g.speedCamera : 500,
                        1,
                        1
                      ),
                      mp.game.cam.renderScriptCams(
                        !0,
                        !0,
                        a.g.speedCamera ? a.g.speedCamera : 500,
                        !0,
                        !0
                      ),
                      a.g.cameraManager._setActiveCamera(l),
                      (a.g.cameraInfo.activeMovementCamera = !1);
                  } else if ("testanim" === e) {
                    const e = a.g.cameraManager.getCamera("createCharacter");
                    a.g.cameraManager.setActiveCamera(e, !0),
                      (a.g.cameraInfo.polarAngleDeg = o(t.getHeading(), 90)),
                      (a.g.cameraInfo.azimutMax = 160 + a.g.fixRotation),
                      (a.g.cameraInfo.azimutMin = 80 + a.g.fixRotation),
                      (a.g.cameraInfo.azimuthAngleDeg = 90 + a.g.fixRotation),
                      (a.g.cameraInfo.lookZ = 0),
                      (a.g.cameraInfo.heightToggled = !0),
                      (a.g.cameraInfo.radius = -3.5),
                      (a.g.cameraInfo.radiusMax = -0.5),
                      (a.g.cameraInfo.radiusMin = -3.5),
                      (a.g.cameraInfo.overlayToggled = !0),
                      (a.g.cameraPosition.poistionPoint = t.getBoneCoords(
                        11816,
                        -0.13,
                        0.13,
                        0
                      )),
                      (a.g.cameraInfo.activeMovementCamera = !0),
                      (a.g.cameraInfo.init = !0);
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "camera/create",
                    "createCamera",
                    e.toString()
                  );
                }
              });
            const o = (e, t) =>
              360 -
              (e = (e = ((e + 360) % 360) + 180) > 360 ? -360 + e : e) +
              t;
          },
          6975: (e, t, a) => {
            a(6270), a(3987), a(3408);
          },
          6270: (e, t, a) => {
            let o = {
              gameplayCamera: null,
              activeCamera: null,
              interpCamera: null,
              interpActive: !1,
              _events: new Map(),
              cameras: new Map([]),
            };
            mp.events.add("render", () => {
              try {
                o.interpCamera &&
                  cameraManager.doesExist(o.interpCamera) &&
                  o.activeCamera &&
                  !o.activeCamera.isInterpolating() &&
                  cameraManager.fireEvent("stopInterp", o.activeCamera);
              } catch (e) {
                if (
                  new Date().getTime() - a.g.trycatchtime["camera/manager"] <
                  6e4
                )
                  return;
                (a.g.trycatchtime["camera/manager"] = new Date().getTime()),
                  mp.events.callRemote(
                    "client_trycatch",
                    "camera/manager",
                    "render",
                    e.toString()
                  );
              }
            });
            const i = (e) => {
              try {
                (e.setActiveCamera = (t) => {
                  cameraManager.setActiveCamera(e, t);
                }),
                  (e.setActiveCameraWithInterp = (t, a, o, i, n) => {
                    cameraManager.setActiveCameraWithInterp(e, t, a, o, i, n);
                  });
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "camera/manager",
                  "cameraSerialize",
                  e.toString()
                );
              }
            };
            a.g.cameraManager = new (class {
              on(e, t) {
                try {
                  if (o._events.has(e)) {
                    const a = o._events.get(e);
                    a.has(t) || a.add(t);
                  } else o._events.set(e, new Set([t]));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "camera/manager",
                    "global.cameraManager.on",
                    e.toString()
                  );
                }
              }
              fireEvent(e, ...t) {
                try {
                  o._events.has(e) &&
                    o._events.get(e).forEach((e) => {
                      e(...t);
                    });
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "camera/manager",
                    "global.cameraManager.fireEvent",
                    e.toString()
                  );
                }
              }
              getCamera(e, t = !1) {
                let n = o.cameras.get(e);
                try {
                  t || this.hasCamera(e)
                    ? !t &&
                      this.hasCamera(e) &&
                      "function" != typeof n.setActiveCamera &&
                      ((a.g.cameraInfo.toggled = !0), i(n))
                    : ((a.g.cameraInfo.toggled = !0),
                      (n = this.createCamera(e)));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "camera/manager",
                    "global.cameraManager.getCamera",
                    e.toString()
                  );
                }
                return n;
              }
              setCamera(e, t) {
                o.cameras.set(e, t);
              }
              hasCamera(e) {
                return o.cameras.has(e);
              }
              deleteCamera(e, t = !1, a = 0) {
                try {
                  if (this.hasCamera(e)) {
                    const i = this.getCamera(e);
                    this.setActiveCamera(i, !1, t, a),
                      this.destroyCamera(i),
                      o.cameras.delete(e);
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "camera/manager",
                    "global.cameraManager.deleteCamera",
                    e.toString()
                  );
                }
              }
              destroyCamera(e) {
                try {
                  (a.g.speedCamera = void 0),
                    this.doesExist(e) &&
                      (e === this.activeCamera() &&
                        (o.activeCamera.setActive(!1), (o.activeCamera = null)),
                      e.destroy());
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "camera/manager",
                    "global.cameraManager.destroyCamera",
                    e.toString()
                  );
                }
              }
              stopCamera(e = !1, t = 0) {
                try {
                  null !== this.activeCamera() &&
                    ((a.g.cameraInfo.activeMovementCamera = !1),
                    this.setActiveCamera(this.activeCamera(), !1, e, t));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "camera/manager",
                    "global.cameraManager.stopCamera",
                    e.toString()
                  );
                }
              }
              createCamera(
                e,
                t = new mp.Vector3(0, 0, 100),
                n = new mp.Vector3(),
                s = 50
              ) {
                let r;
                try {
                  (a.g.cameraInfo.toggled = !0),
                    this.hasCamera(e)
                      ? ((r = o.cameras.get(e)),
                        "function" != typeof r.setActiveCamera && i(r))
                      : ((r = mp.cameras.new("default", t, n, s)),
                        i(r),
                        o.cameras.set(e, r));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "camera/manager",
                    "global.cameraManager.createCamera",
                    e.toString()
                  );
                }
                return r;
              }
              setActiveCamera(e, t, i = !1, n = 0) {
                try {
                  t
                    ? (this.doesExist(this.activeCamera()) &&
                        o.activeCamera.setActive(!1),
                      (o.activeCamera = e),
                      e.setActive(!0),
                      mp.game.cam.renderScriptCams(!0, i, n, !1, !1),
                      (a.g.cameraInfo.toggled = !0))
                    : (this.doesExist(o.activeCamera) &&
                        ((o.activeCamera = null),
                        e.setActive(!1),
                        mp.game.cam.renderScriptCams(!1, i, n, i, i)),
                      this.doesExist(this.activeCamera()) &&
                        (o.interpCamera.setActive(!1),
                        o.interpCamera.destroy(),
                        (o.interpCamera = null)));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "camera/manager",
                    "global.cameraManager.setActiveCamera",
                    e.toString()
                  );
                }
              }
              _setActiveCamera(e) {
                try {
                  this.doesExist(this.activeCamera()) &&
                    o.activeCamera.setActive(!1),
                    (o.activeCamera = e),
                    e.setActive(!0);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "camera/manager",
                    "global.cameraManager._setActiveCamera",
                    e.toString()
                  );
                }
              }
              setActiveCameraWithInterp(e, t, a, i, n, s) {
                try {
                  this.doesExist(this.activeCamera()) &&
                    o.activeCamera.setActive(!1),
                    this.doesExist(o.interpCamera) &&
                      (cameraManager.fireEvent("stopInterp", o.interpCamera),
                      o.interpCamera.setActive(!1),
                      o.interpCamera.destroy(),
                      (o.interpCamera = null));
                  const r = mp.cameras.new(
                    "default",
                    e.getCoord(),
                    e.getRot(2),
                    e.getFov()
                  );
                  e.setCoord(t.x, t.y, t.z),
                    e.setRot(a.x, a.y, a.z, 2),
                    e.stopPointing(),
                    (o.activeCamera = e),
                    (o.interpCamera = r),
                    e.setActiveWithInterp(r.handle, i, n, s),
                    mp.game.cam.renderScriptCams(!0, !1, 0, !1, !1),
                    cameraManager.fireEvent("startInterp", o.interpCamera);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "camera/manager",
                    "global.cameraManager.setActiveCameraWithInterp",
                    e.toString()
                  );
                }
              }
              doesExist(e) {
                return mp.cameras.exists(e) && e.doesExist();
              }
              activeCamera() {
                return o.activeCamera;
              }
              gameplayCam() {
                return (
                  o.gameplayCamera ||
                    (o.gameplayCamera = mp.cameras.new("gameplay")),
                  o.gameplayCamera
                );
              }
              normilizeHeading(e) {
                return e > 360 ? e - 360 : e < 0 ? e + 360 : e;
              }
            })();
          },
          3987: (e, t, a) => {
            (a.g.cameraInfo = {
              activeMovementCamera: !1,
              overlayToggled: !0,
              polarAngleDeg: 0,
              azimuthAngleDeg: 0,
              azimutMax: 0,
              azimutMin: 0,
              lookZ: 0,
              radius: 0,
              radiusMax: 0,
              radiusMin: 0,
              toggled: !1,
            }),
              (a.g.cameraPosition = {
                poistionPoint: new mp.Vector3(-816.306, -182.914, 37.8927),
              });
            let o = "hat";
            a.g.updateCameraToBone = (e, t = null, n = !1, s = 500) => {
              try {
                if (!n && o === e) return;
                t || (t = a.g.localplayer),
                  (o = e),
                  "hat" == e
                    ? i(t, 12844, new mp.Vector3(), 80, 160, s)
                    : "top" == e
                    ? i(t, 11816, new mp.Vector3(-0.13, 0.13, 0), 80, 160, s)
                    : "legs" == e
                    ? i(t, 11816, new mp.Vector3(0.5, 0.05, 0), 80, 120, s)
                    : "shoes" == e &&
                      i(t, 65245, new mp.Vector3(-0.168, 0, 0.1), 100, 130, s);
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "camera/other",
                  "global.updateCameraToBone",
                  e.toString()
                );
              }
            };
            const i = (e, t, o, i, s, r) => {
              try {
                const l = a.g.cameraManager.getCamera("createCharacter");
                let m = e.getBoneCoords(t, o.x, o.y, o.z);
                const c = cameraPosition.poistionPoint;
                (cameraPosition.poistionPoint = m),
                  (m = new mp.Vector3(m.x, m.y, m.z + cameraInfo.lookZ)),
                  (cameraInfo.azimutMin = i + fixRotation),
                  (cameraInfo.azimutMax = s + fixRotation),
                  (cameraInfo.azimuthAngleDeg = clamp(
                    cameraInfo.azimuthAngleDeg,
                    cameraInfo.azimutMin,
                    cameraInfo.azimutMax
                  ));
                const p = (cameraInfo.polarAngleDeg * Math.PI) / 180,
                  g = (cameraInfo.azimuthAngleDeg * Math.PI) / 180,
                  _ = new mp.Vector3(
                    m.x + cameraInfo.radius * (Math.sin(g) * Math.cos(p)),
                    m.y - cameraInfo.radius * (Math.sin(g) * Math.sin(p)),
                    m.z - cameraInfo.radius * Math.cos(g)
                  );
                a.g.cameraManager.setActiveCameraWithInterp(
                  l,
                  _,
                  l.getRot(2),
                  r,
                  0,
                  0
                ),
                  n(c, m, r),
                  (cameraInfo.activeMovementCamera = !1);
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "camera/other",
                  "calculateCameraParamsAndStartInterp",
                  e.toString()
                );
              }
            };
            (a.g.clamp = (e, t, a) => Math.max(t, Math.min(a, e))),
              (a.g.roundNumber = (e, t = 2) => {
                const a = Math.pow(10, t);
                return Math.round(e * a) / a;
              }),
              (a.g.midVector = (e, t) =>
                new mp.Vector3(
                  (e.x + t.x) / 2,
                  (e.y + t.y) / 2,
                  (e.z + t.z) / 2
                )),
              a.g.cameraManager.on("stopInterp", (e) => {
                try {
                  e === a.g.cameraManager.getCamera("createCharacter", !0) &&
                    (cameraInfo.activeMovementCamera = !0);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "camera/other",
                    "global.cameraManager.on",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.camera.toggled", (e) => {
                a.g.cameraInfo.toggled = e;
              }),
              mp.events.add("render", () => {
                try {
                  if (!a.g.cameraManager.activeCamera()) return;
                  if (!a.g.cameraInfo.toggled) return;
                  if (cameraInfo.activeMovementCamera) {
                    cameraInfo.overlayToggled &&
                      (mp.game.controls.enableControlAction(0, 241, !0),
                      mp.game.controls.isControlPressed(0, 241) &&
                        ((cameraInfo.radius = cameraInfo.radius + 0.2),
                        (cameraInfo.radius = clamp(
                          cameraInfo.radius,
                          a.g.cameraInfo.radiusMin,
                          a.g.cameraInfo.radiusMax
                        ))),
                      mp.game.controls.enableControlAction(0, 242, !0),
                      mp.game.controls.isControlPressed(0, 242) &&
                        ((cameraInfo.radius = cameraInfo.radius - 0.2),
                        (cameraInfo.radius = clamp(
                          cameraInfo.radius,
                          a.g.cameraInfo.radiusMin,
                          a.g.cameraInfo.radiusMax
                        ))));
                    const e = new mp.Vector3(
                      cameraPosition.poistionPoint.x,
                      cameraPosition.poistionPoint.y,
                      cameraPosition.poistionPoint.z + cameraInfo.lookZ
                    );
                    if (
                      (mp.game.controls.enableControlAction(0, 238, !0),
                      cameraInfo.heightToggled &&
                        mp.game.controls.isControlPressed(0, 238))
                    ) {
                      const e = mp.game.controls.getDisabledControlNormal(0, 2);
                      cameraInfo.lookZ = clamp(
                        cameraInfo.lookZ + 0.7 * e,
                        -0.35,
                        0.6
                      );
                    }
                    if (
                      (mp.game.controls.enableControlAction(0, 237, !0),
                      mp.game.controls.isControlPressed(0, 237) ||
                        cameraInfo.init)
                    ) {
                      cameraInfo.init = !1;
                      const e = mp.game.controls.getDisabledControlNormal(0, 1),
                        t = mp.game.controls.getDisabledControlNormal(0, 2);
                      (cameraInfo.polarAngleDeg =
                        cameraInfo.polarAngleDeg + 10 * e),
                        cameraInfo.polarAngleDeg >= 360 &&
                          (cameraInfo.polarAngleDeg = 0),
                        (cameraInfo.azimuthAngleDeg =
                          cameraInfo.azimuthAngleDeg + 10 * t),
                        cameraInfo.azimuthAngleDeg >= cameraInfo.azimutMax &&
                          (cameraInfo.azimuthAngleDeg = cameraInfo.azimutMax),
                        cameraInfo.azimuthAngleDeg <= cameraInfo.azimutMin &&
                          (cameraInfo.azimuthAngleDeg = cameraInfo.azimutMin);
                    }
                    const t = (cameraInfo.polarAngleDeg * Math.PI) / 180,
                      o = (cameraInfo.azimuthAngleDeg * Math.PI) / 180,
                      i = new mp.Vector3(
                        e.x + cameraInfo.radius * (Math.sin(o) * Math.cos(t)),
                        e.y - cameraInfo.radius * (Math.sin(o) * Math.sin(t)),
                        e.z - cameraInfo.radius * Math.cos(o)
                      ),
                      n = a.g.cameraManager.activeCamera();
                    n.setCoord(i.x, i.y, i.z), n.pointAtCoord(e.x, e.y, e.z);
                  }
                } catch (e) {
                  if (
                    new Date().getTime() - a.g.trycatchtime["camera/other"] <
                    6e4
                  )
                    return;
                  (a.g.trycatchtime["camera/other"] = new Date().getTime()),
                    mp.events.callRemote(
                      "client_trycatch",
                      "camera/other",
                      "render",
                      e.toString()
                    );
                }
              }),
              a(9621);
            const n = (e, t, o) => {
              try {
                const i = { percentage: 0 },
                  n = Date.now(),
                  s = a.g.cameraManager.getCamera("createCharacter"),
                  r = a.g.BezierEasing(0.42, 0.13, 0.06, 0.89);
                let l = null;
                l = setInterval(() => {
                  (i.percentage = (Date.now() - n) / o),
                    i.percentage > 1 && (clearInterval(l), (i.percentage = 1));
                  const a =
                    ((m = e),
                    (c = t),
                    (p = r(i.percentage)),
                    new mp.Vector3(
                      m.x + (c.x - m.x) * p,
                      m.y + (c.y - m.y) * p,
                      m.z + (c.z - m.z) * p
                    ));
                  var m, c, p;
                  s.pointAtCoord(a.x, a.y, a.z);
                }, 0);
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "camera/other",
                  "startInterpCameraPointing",
                  e.toString()
                );
              }
            };
            (a.g.FadeScreen = (e, t) => {
              mp.gui.emmit(`window.FadeScreen(${e}, ${t})`);
            }),
              (a.g.updateBoneToPos = (e) => {
                switch (e) {
                  case "tops":
                  case "undershirts":
                  case "torso":
                  case "watches":
                  case "leftarm":
                  case "bracelets":
                  case "rightarm":
                    a.g.updateCameraToBone("top");
                    break;
                  case "shoes":
                    a.g.updateCameraToBone("shoes");
                    break;
                  case "legs":
                  case "leftleg":
                  case "rightleg":
                    a.g.updateCameraToBone("legs");
                    break;
                  case "hair":
                  case "beard":
                  case "eyebrows":
                  case "lenses":
                  case "lipstick":
                  case "blush":
                  case "makeup":
                  case "head":
                  case "glasses":
                  case "ears":
                  case "masks":
                    a.g.updateCameraToBone("hat");
                }
              });
          },
          3979: (e, t, a) => {
            "use strict";
            a.r(t);
            var o = a(9777),
              i = a(1151);
            (a.g.blackjack = new (class {
              constructor() {
                (this.g_blackjackData = []),
                  (this.dimensionDiamondInterior = 0),
                  (this.nearestSeat = null),
                  (this.nearestTable = null),
                  (this.selectTable = null),
                  (this.selectSeat = null),
                  (this.hand = []),
                  (this.splitHand = []),
                  (this.btnDouble = 0),
                  (this.btnSplit = 0),
                  (this.game = !1),
                  (this.bet = !1),
                  (this.candouble = !0),
                  (this.epress = 0),
                  (this.invokeData = {
                    NETWORK_CREATE_SYNCHRONISED_SCENE: "0x7CD6BC4C2BBDD526",
                    NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE: "0x742A637471BCECD9",
                    NETWORK_START_SYNCHRONISED_SCENE: "0x9A1B3FCDB36C8697",
                    NETWORK_STOP_SYNCHRONISED_SCENE: "0xC254481A4574CB2F",
                    GET_ANIM_INITIAL_OFFSET_POSITION: "0xBE22B26DD764C040",
                    GET_ANIM_INITIAL_OFFSET_ROTATION: "0x4B805E6046EE9E47",
                    TASK_GO_STRAIGHT_TO_COORD: "0xD76B57B44F1E6F8B",
                    _SET_SYNCHRONIZED_SCENE_OCCLUSION_PORTAL:
                      "0x394B9CD12435C981",
                    _PLAY_AMBIENT_SPEECH1: "0x8E04FEDD28D42462",
                  }),
                  this.init(),
                  mp.keys.bind(69, !0, () => {
                    this.pressKeyE();
                  }),
                  mp.events.add("pedStreamIn", (e) => {
                    try {
                      this.onEntityStreamIn(e);
                    } catch (e) {
                      mp.events.callRemote(
                        "client_trycatch",
                        "casino/blackjack",
                        "pedStreamIn",
                        e.toString()
                      );
                    }
                  }),
                  mp.events.add("playerEnterColshape", (e) => {
                    try {
                      this.onPlayerEnterColshape(e);
                    } catch (e) {
                      mp.events.callRemote(
                        "client_trycatch",
                        "casino/blackjack",
                        "playerEnterColshape",
                        e.toString()
                      );
                    }
                  }),
                  mp.events.add("playerExitColshape", (e) => {
                    try {
                      this.onPlayerExitColshape(e);
                    } catch (e) {
                      mp.events.callRemote(
                        "client_trycatch",
                        "casino/blackjack",
                        "playerExitColshape",
                        e.toString()
                      );
                    }
                  }),
                  mp.events.add("render", (e) => {
                    try {
                      if (!a.g.loggedin) return;
                      this.onRender(e);
                    } catch (e) {
                      if (
                        new Date().getTime() -
                          a.g.trycatchtime["casino/blackjack"] <
                        6e4
                      )
                        return;
                      (a.g.trycatchtime["casino/blackjack"] =
                        new Date().getTime()),
                        mp.events.callRemote(
                          "client_trycatch",
                          "casino/blackjack",
                          "render",
                          e.toString()
                        );
                    }
                  });
              }
              DealerClothes(e, t) {
                try {
                  0 == e
                    ? (t.setDefaultComponentVariation(),
                      t.setComponentVariation(0, 3, 0, 0),
                      t.setComponentVariation(1, 1, 0, 0),
                      t.setComponentVariation(2, 3, 0, 0),
                      t.setComponentVariation(3, 1, 0, 0),
                      t.setComponentVariation(4, 0, 0, 0),
                      t.setComponentVariation(6, 1, 0, 0),
                      t.setComponentVariation(7, 2, 0, 0),
                      t.setComponentVariation(8, 3, 0, 0),
                      t.setComponentVariation(10, 1, 0, 0),
                      t.setComponentVariation(11, 1, 0, 0))
                    : 1 == e
                    ? (t.setDefaultComponentVariation(),
                      t.setComponentVariation(0, 2, 2, 0),
                      t.setComponentVariation(1, 1, 0, 0),
                      t.setComponentVariation(2, 4, 0, 0),
                      t.setComponentVariation(3, 0, 3, 0),
                      t.setComponentVariation(4, 0, 0, 0),
                      t.setComponentVariation(6, 1, 0, 0),
                      t.setComponentVariation(7, 2, 0, 0),
                      t.setComponentVariation(8, 1, 0, 0),
                      t.setComponentVariation(10, 1, 0, 0),
                      t.setComponentVariation(11, 1, 0, 0))
                    : 2 == e
                    ? (t.setDefaultComponentVariation(),
                      t.setComponentVariation(0, 2, 1, 0),
                      t.setComponentVariation(1, 1, 0, 0),
                      t.setComponentVariation(2, 2, 0, 0),
                      t.setComponentVariation(3, 0, 3, 0),
                      t.setComponentVariation(4, 0, 0, 0),
                      t.setComponentVariation(6, 1, 0, 0),
                      t.setComponentVariation(7, 2, 0, 0),
                      t.setComponentVariation(8, 1, 0, 0),
                      t.setComponentVariation(10, 1, 0, 0),
                      t.setComponentVariation(11, 1, 0, 0))
                    : 3 == e
                    ? (t.setDefaultComponentVariation(),
                      t.setComponentVariation(0, 2, 0, 0),
                      t.setComponentVariation(1, 1, 0, 0),
                      t.setComponentVariation(2, 3, 0, 0),
                      t.setComponentVariation(3, 1, 3, 0),
                      t.setComponentVariation(4, 0, 0, 0),
                      t.setComponentVariation(6, 1, 0, 0),
                      t.setComponentVariation(7, 2, 0, 0),
                      t.setComponentVariation(8, 3, 0, 0),
                      t.setComponentVariation(10, 1, 0, 0),
                      t.setComponentVariation(11, 1, 0, 0))
                    : 4 == e
                    ? (t.setDefaultComponentVariation(),
                      t.setComponentVariation(0, 4, 2, 0),
                      t.setComponentVariation(1, 1, 0, 0),
                      t.setComponentVariation(2, 3, 0, 0),
                      t.setComponentVariation(3, 0, 0, 0),
                      t.setComponentVariation(4, 0, 0, 0),
                      t.setComponentVariation(6, 1, 0, 0),
                      t.setComponentVariation(7, 2, 0, 0),
                      t.setComponentVariation(8, 1, 0, 0),
                      t.setComponentVariation(10, 1, 0, 0),
                      t.setComponentVariation(11, 1, 0, 0))
                    : 5 == e
                    ? (t.setDefaultComponentVariation(),
                      t.setComponentVariation(0, 4, 0, 0),
                      t.setComponentVariation(1, 1, 0, 0),
                      t.setComponentVariation(2, 0, 0, 0),
                      t.setComponentVariation(3, 0, 0, 0),
                      t.setComponentVariation(4, 0, 0, 0),
                      t.setComponentVariation(6, 1, 0, 0),
                      t.setComponentVariation(7, 2, 0, 0),
                      t.setComponentVariation(8, 1, 0, 0),
                      t.setComponentVariation(10, 1, 0, 0),
                      t.setComponentVariation(11, 1, 0, 0))
                    : 6 == e
                    ? (t.setDefaultComponentVariation(),
                      t.setComponentVariation(0, 4, 1, 0),
                      t.setComponentVariation(1, 1, 0, 0),
                      t.setComponentVariation(2, 4, 0, 0),
                      t.setComponentVariation(3, 1, 0, 0),
                      t.setComponentVariation(4, 0, 0, 0),
                      t.setComponentVariation(6, 1, 0, 0),
                      t.setComponentVariation(7, 2, 0, 0),
                      t.setComponentVariation(8, 3, 0, 0),
                      t.setComponentVariation(10, 1, 0, 0),
                      t.setComponentVariation(11, 1, 0, 0))
                    : 7 == e &&
                      (t.setDefaultComponentVariation(),
                      t.setComponentVariation(0, 1, 1, 0),
                      t.setComponentVariation(1, 0, 0, 0),
                      t.setComponentVariation(2, 1, 0, 0),
                      t.setComponentVariation(3, 0, 3, 0),
                      t.setComponentVariation(4, 0, 0, 0),
                      t.setComponentVariation(6, 0, 0, 0),
                      t.setComponentVariation(7, 0, 0, 0),
                      t.setComponentVariation(8, 0, 0, 0),
                      t.setComponentVariation(10, 0, 0, 0),
                      t.setComponentVariation(11, 0, 0, 0));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "casino/blackjack",
                    "DealerClothes",
                    e.toString()
                  );
                }
              }
              DealerPedVoiceGroup(e, t) {
                try {
                  0 == e
                    ? mp.game.invoke(
                        "0x7CDC8C3B89F661B3",
                        t.handle,
                        mp.game.joaat("S_M_Y_Casino_01_WHITE_01")
                      )
                    : 1 == e
                    ? mp.game.invoke(
                        "0x7CDC8C3B89F661B3",
                        t.handle,
                        mp.game.joaat("S_M_Y_Casino_01_ASIAN_01")
                      )
                    : 2 == e
                    ? mp.game.invoke(
                        "0x7CDC8C3B89F661B3",
                        t.handle,
                        mp.game.joaat("S_M_Y_Casino_01_ASIAN_02")
                      )
                    : 3 == e
                    ? mp.game.invoke(
                        "0x7CDC8C3B89F661B3",
                        t.handle,
                        mp.game.joaat("S_M_Y_Casino_01_ASIAN_01")
                      )
                    : 4 == e
                    ? mp.game.invoke(
                        "0x7CDC8C3B89F661B3",
                        t.handle,
                        mp.game.joaat("S_M_Y_Casino_01_WHITE_01")
                      )
                    : 5 == e
                    ? mp.game.invoke(
                        "0x7CDC8C3B89F661B3",
                        t.handle,
                        mp.game.joaat("S_M_Y_Casino_01_WHITE_02")
                      )
                    : 6 == e
                    ? mp.game.invoke(
                        "0x7CDC8C3B89F661B3",
                        t.handle,
                        mp.game.joaat("S_M_Y_Casino_01_WHITE_01")
                      )
                    : 7 == e &&
                      mp.game.invoke(
                        "0x7CDC8C3B89F661B3",
                        t.handle,
                        mp.game.joaat("S_F_Y_Casino_01_ASIAN_01")
                      );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "casino/blackjack",
                    "DealerPedVoiceGroup",
                    e.toString()
                  );
                }
              }
              randomInteger(e, t) {
                return Math.round(e + Math.random() * (t - e));
              }
              init() {
                try {
                  mp.game.entity.createModelHide(
                    1149.38,
                    269.19,
                    -52.02,
                    1,
                    mp.game.joaat("vw_prop_casino_blckjack_01"),
                    !0
                  ),
                    mp.game.entity.createModelHide(
                      1151.28,
                      267.33,
                      -51.84,
                      1,
                      mp.game.joaat("vw_prop_casino_blckjack_01"),
                      !0
                    ),
                    mp.game.entity.createModelHide(
                      1128.862,
                      261.795,
                      -51.0357,
                      1,
                      mp.game.joaat("vw_prop_casino_blckjack_01b"),
                      !0
                    ),
                    mp.game.entity.createModelHide(
                      1143.859,
                      246.783,
                      -51.035,
                      1,
                      mp.game.joaat("vw_prop_casino_blckjack_01b"),
                      !0
                    ),
                    mp.game.entity.createModelHide(
                      1146.329,
                      261.2543,
                      -52.84094,
                      1,
                      mp.game.joaat("vw_prop_casino_3cardpoker_01"),
                      !0
                    ),
                    mp.game.entity.createModelHide(
                      1143.338,
                      264.2453,
                      -52.84094,
                      1,
                      mp.game.joaat("vw_prop_casino_3cardpoker_01"),
                      !0
                    ),
                    mp.game.entity.createModelHide(
                      1133.74,
                      266.6947,
                      -52.04094,
                      1,
                      mp.game.joaat("vw_prop_casino_3cardpoker_01b"),
                      !0
                    ),
                    mp.game.entity.createModelHide(
                      1148.74,
                      251.6947,
                      -52.04094,
                      1,
                      mp.game.joaat("vw_prop_casino_3cardpoker_01b"),
                      !0
                    );
                  let e,
                    t = !1;
                  for (let a = 0; a < this.blackjackTables(); a++) {
                    let i = {};
                    (e = a),
                      (i.table = mp.objects.new(
                        mp.game.joaat(o.Hu[a][0]),
                        new mp.Vector3(o.Hu[a][1], o.Hu[a][2], o.Hu[a][3]),
                        { rotation: new mp.Vector3(0, 0, o.Hu[a][4]) }
                      )),
                      mp.game.invoke("0x971DA0055324D033", i.table.handle, 3);
                    const {
                      x: n,
                      y: s,
                      z: r,
                    } = mp.game.object.getObjectOffsetFromCoords(
                      o.Hu[a][1],
                      o.Hu[a][2],
                      o.Hu[a][3],
                      o.Hu[a][4],
                      0,
                      0.775,
                      1
                    );
                    (i.croupier = mp.peds.new(
                      mp.game.joaat(e < 7 ? o.D3[0] : o.D3[1]),
                      new mp.Vector3(n, s, r),
                      o.Hu[a][4] - 180,
                      this.dimensionDiamondInterior
                    )),
                      i.croupier.setLodDist(100),
                      this.DealerClothes(e, i.croupier),
                      this.DealerPedVoiceGroup(e, i.croupier),
                      (i.croupier.blackjack = !0),
                      (i.croupier.randomBlackShit = e);
                    for (let e = 1; e < 5; e++) {
                      const {
                          x: t,
                          y: i,
                          z: n,
                        } = mp.game.object.getObjectOffsetFromCoords(
                          o.Hu[a][1],
                          o.Hu[a][2],
                          o.Hu[a][3],
                          o.Hu[a][4],
                          o.Hx[e - 1][0],
                          o.Hx[e - 1][1],
                          o.Hx[e - 1][2]
                        ),
                        s = mp.colshapes.newSphere(t, i, n, 0.5);
                      (s.tableID = a), (s.seatID = e), (s.blackjack = !0);
                    }
                    (i.croupier.tableID = a),
                      (i.dealerHand = []),
                      (i.dealerHandObjs = []),
                      (i.handObjs = {}),
                      (i.chips = {}),
                      this.g_blackjackData.push(i),
                      (t = !t);
                  }
                  setTimeout(() => {
                    (0, i.A)("anim_casino_b@amb@casino@games@blackjack@dealer"),
                      (0, i.A)(
                        "anim_casino_b@amb@casino@games@blackjack@dealer_female"
                      ),
                      (0, i.A)("anim_casino_b@amb@casino@games@shared@dealer@"),
                      this.g_blackjackData.forEach((e) => {
                        const t =
                          e.croupier.model == mp.game.joaat("S_M_Y_Casino_01")
                            ? "anim_casino_b@amb@casino@games@roulette@dealer"
                            : "anim_casino_b@amb@casino@games@roulette@dealer_female";
                        e.croupier.taskPlayAnim(
                          t,
                          "idle",
                          8,
                          1,
                          -1,
                          1,
                          0,
                          !1,
                          !1,
                          !1
                        );
                      });
                  }, 2e3);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "casino/blackjack",
                    "init",
                    e.toString()
                  );
                }
              }
              blackjackTables() {
                return o.Hu.length;
              }
              onEntityStreamIn(e) {
                try {
                  e.blackjack &&
                    ((0, i.A)("anim_casino_b@amb@casino@games@roulette@dealer"),
                    (0, i.A)(
                      "anim_casino_b@amb@casino@games@roulette@dealer_female"
                    ),
                    (0, i.A)("anim_casino_b@amb@casino@games@roulette@table"),
                    e.model == mp.game.joaat("S_M_Y_Casino_01")
                      ? e.taskPlayAnim(
                          "anim_casino_b@amb@casino@games@roulette@dealer",
                          "idle",
                          8,
                          1,
                          -1,
                          1,
                          0,
                          !1,
                          !1,
                          !1
                        )
                      : e.taskPlayAnim(
                          "anim_casino_b@amb@casino@games@roulette@dealer_female",
                          "idle",
                          8,
                          1,
                          -1,
                          1,
                          0,
                          !1,
                          !1,
                          !1
                        ),
                    this.DealerClothes(e.randomBlackShit, e),
                    this.DealerPedVoiceGroup(e.randomBlackShit, e));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "casino/blackjack",
                    "onEntityStreamIn",
                    e.toString()
                  );
                }
              }
              onPlayerEnterColshape(e) {
                try {
                  e &&
                    e.blackjack &&
                    null != e.tableID &&
                    null != e.seatID &&
                    ((this.nearestSeat = e.seatID),
                    (this.nearestTable = e.tableID),
                    mp.game.audio.playSound(
                      -1,
                      "BACK",
                      "HUD_AMMO_SHOP_SOUNDSET",
                      !0,
                      0,
                      !0
                    ),
                    mp.game.graphics.notify("~g~E~s~ сесть за стол"));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "casino/blackjack",
                    "onPlayerEnterColshape",
                    e.toString()
                  );
                }
              }
              onPlayerExitColshape(e) {
                try {
                  e &&
                    e.blackjack &&
                    null != e.tableID &&
                    ((this.nearestSeat = null), (this.nearestTable = null));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "casino/blackjack",
                    "onPlayerExitColshape",
                    e.toString()
                  );
                }
              }
              onRender() {
                try {
                  null != this.selectTable &&
                    null != this.selectSeat &&
                    mp.game.graphics.drawText(
                      `У Вас [${this.handValue(this.hand)}]${
                        this.splitHand.length
                          ? " [" + this.handValue(this.splitHand) + "]"
                          : ""
                      }, у дилера [${this.handValue(
                        this.g_blackjackData[this.selectTable].dealerHand
                      )}]`,
                      [0.5, 0.8],
                      {
                        font: 0,
                        color: [255, 255, 255, 200],
                        scale: [0.35, 0.35],
                        outline: !0,
                      }
                    );
                } catch (e) {
                  if (
                    new Date().getTime() -
                      a.g.trycatchtime["casino/blackjack"] <
                    6e4
                  )
                    return;
                  (a.g.trycatchtime["casino/blackjack"] = new Date().getTime()),
                    mp.events.callRemote(
                      "client_trycatch",
                      "casino/blackjack",
                      "onRender",
                      e.toString()
                    );
                }
              }
              CardValue(e) {
                try {
                  if (!e) return 0;
                  let t = 10;
                  for (let a = 2; a <= 11; a++)
                    if (-1 != e.indexOf(`${a}`)) {
                      t = a;
                      break;
                    }
                  return -1 != e.indexOf("ace") && (t = 11), t;
                } catch (e) {
                  return (
                    mp.events.callRemote(
                      "client_trycatch",
                      "casino/blackjack",
                      "CardValue",
                      e.toString()
                    ),
                    0
                  );
                }
              }
              handValue(e) {
                try {
                  if (!e.length) return 0;
                  let t = 0,
                    a = 0;
                  if (
                    (e.forEach((e) => {
                      t += this.CardValue(e);
                    }),
                    e.forEach((e) => {
                      -1 != String(e).indexOf("ace") && a++;
                    }),
                    t > 21)
                  )
                    for (let e = 0; e < a; e++) t -= 10;
                  return t;
                } catch (e) {
                  return (
                    mp.events.callRemote(
                      "client_trycatch",
                      "casino/blackjack",
                      "handValue",
                      e.toString()
                    ),
                    0
                  );
                }
              }
              pressKeyE() {
                try {
                  if (a.g.localplayer.isDead() || mp.gui.cursor.visible)
                    return !1;
                  if (null != this.nearestSeat && null == this.selectTable) {
                    if (new Date().getTime() - this.epress < 5e3) return;
                    (this.epress = new Date().getTime()),
                      mp.game.audio.startAudioScene(
                        "DLC_VW_Casino_Table_Games"
                      );
                    const {
                      x: e,
                      y: t,
                      z: a,
                    } = mp.game.object.getObjectOffsetFromCoords(
                      o.Hu[this.nearestTable][1],
                      o.Hu[this.nearestTable][2],
                      o.Hu[this.nearestTable][3],
                      o.Hu[this.nearestTable][4],
                      o.Hx[this.nearestSeat - 1][0],
                      o.Hx[this.nearestSeat - 1][1],
                      o.Hx[this.nearestSeat - 1][2]
                    );
                    return void mp.events.callRemote(
                      "server.blackjack.character_occupy_place",
                      this.nearestTable,
                      this.nearestSeat,
                      e,
                      t,
                      a,
                      o.Hx[this.nearestSeat - 1][3] + o.Hu[this.nearestTable][4]
                    );
                  }
                  if (null != this.selectTable) {
                    if (new Date().getTime() - this.epress < 5e3) return;
                    return (
                      (this.epress = new Date().getTime()), void this.onLeave()
                    );
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "casino/blackjack",
                    "pressKeyE",
                    e.toString()
                  );
                }
              }
              async onSelectTable(e, t, i, n) {
                try {
                  if (a.g.menuCheck() || a.g.pvpStatus) return;
                  this.g_blackjackData[e].table.setCollision(!1, !1),
                    (this.bet = !0),
                    await a.g.wait(3500),
                    (this.selectTable = e),
                    (this.selectSeat = t),
                    (this.hand = []),
                    (this.splitHand = []),
                    (this.candouble = !0),
                    (this.bet = !1),
                    mp.discord.update(
                      "Играет в BlackJack",
                      `на RedAge под ID ${a.g.localplayer.remoteId}`
                    ),
                    mp.gui.emmit(
                      `window.router.setView("CasinoBlackjack", {betMax: ${
                        "vw_prop_casino_blckjack_01b" == o.Hu[e][0] ? 1e5 : 25e3
                      }, isBet: ${i}, isBtn: ${n}, btnDouble: false, btnSplit: false});`
                    ),
                    a.g.menuOpen();
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "casino/blackjack",
                    "onSelectTable",
                    e.toString()
                  );
                }
              }
              onLeave() {
                try {
                  if (!this.game && null != this.selectTable)
                    return void mp.events.callRemote(
                      "server.blackjack.character_leave_place"
                    );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "casino/blackjack",
                    "onLeave",
                    e.toString()
                  );
                }
              }
              onSuccessLeave() {
                try {
                  if (null != this.selectTable)
                    return (
                      mp.gui.emmit("window.router.setHud();"),
                      this.g_blackjackData[this.selectTable].table.setCollision(
                        !0,
                        !1
                      ),
                      a.g.menuClose(),
                      (this.bet = !0),
                      (this.game = !1),
                      void setTimeout(() => {
                        (this.selectTable = null),
                          (this.selectSeat = null),
                          (this.bet = !1),
                          (mp.gui.cursor.visible = !1);
                      }, 3500)
                    );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "casino/blackjack",
                    "onSuccessLeave",
                    e.toString()
                  );
                }
              }
              async GiveCard(e, t, i, n, s = !1, r = !1) {
                try {
                  if (
                    275201 !==
                    Natives.GET_INTERIOR_FROM_ENTITY(a.g.localplayer.handle)
                  )
                    return;
                  await a.g.wait(500),
                    mp.game.invoke("0x469F2ECDEC046337", !0),
                    mp.game.audio.startAudioScene(
                      "DLC_VW_Casino_Cards_Focus_Hand"
                    );
                  let l = `vw_prop_cas_card_${n}`;
                  s &&
                    ((this.g_blackjackData[e].realFlippedCard = n),
                    (l = "vw_prop_casino_cards_single"));
                  const m = this.g_blackjackData[e].croupier;
                  await a.g.loadModel(l);
                  const c = mp.objects.new(
                    mp.game.joaat(l),
                    new mp.Vector3(o.Hu[e][1], o.Hu[e][2], o.Hu[e][3])
                  );
                  if (
                    (await a.g.IsLoadEntity(c),
                    c.setCollision(!1, !1),
                    c.attachTo(
                      m.handle,
                      m.getBoneIndex(28422),
                      0,
                      0,
                      0,
                      0,
                      0,
                      0,
                      !1,
                      !1,
                      !1,
                      !1,
                      2,
                      !0
                    ),
                    t > 0
                      ? (this.g_blackjackData[e].handObjs[t] ||
                          (this.g_blackjackData[e].handObjs[t] = []),
                        this.g_blackjackData[e].handObjs[t].push(c))
                      : (this.g_blackjackData[e].dealerHandObjs ||
                          (this.g_blackjackData[e].dealerHandObjs = []),
                        this.g_blackjackData[e].dealerHandObjs.push(c)),
                    await a.g.wait(t ? 800 : 900),
                    !c || !mp.objects.exists(c))
                  )
                    return;
                  if ((c.detach(!1, !0), t))
                    if (r) {
                      const {
                        x: a,
                        y: n,
                        z: s,
                      } = mp.game.object.getObjectOffsetFromCoords(
                        o.Hu[e][1],
                        o.Hu[e][2],
                        o.Hu[e][3],
                        o.Hu[e][4],
                        o.wz[t][i].x,
                        o.wz[t][i].y,
                        o.wz[t][i].z
                      );
                      c.setCoordsNoOffset(a, n, s, !1, !1, !1),
                        c.setRotation(0, 0, o.Hu[e][4] + o.FN[t][i], 2, !0);
                    } else {
                      const {
                        x: a,
                        y: n,
                        z: s,
                      } = mp.game.object.getObjectOffsetFromCoords(
                        o.Hu[e][1],
                        o.Hu[e][2],
                        o.Hu[e][3],
                        o.Hu[e][4],
                        o.PD[t][i].x,
                        o.PD[t][i].y,
                        o.PD[t][i].z
                      );
                      c.setCoordsNoOffset(a, n, s, !1, !1, !1),
                        c.setRotation(0, 0, o.Hu[e][4] + o.Zc[t][i], 2, !0);
                    }
                  else {
                    const {
                      x: t,
                      y: a,
                      z: n,
                    } = mp.game.object.getObjectOffsetFromCoords(
                      o.Hu[e][1],
                      o.Hu[e][2],
                      o.Hu[e][3],
                      o.Hu[e][4],
                      o.Fr[i].x,
                      o.Fr[i].y,
                      o.Fr[i].z
                    );
                    c.setCoordsNoOffset(t, a, n, !1, !1, !1),
                      s
                        ? c.setRotation(180, 0, o.Hu[e][4] + o.Fr[i].z, 2, !0)
                        : c.setRotation(0, 0, o.Hu[e][4] + o.Fr[i].z, 2, !0);
                  }
                  t || s
                    ? this.selectSeat == t &&
                      this.selectTable == e &&
                      (r ? this.splitHand.push(n) : this.hand.push(n))
                    : this.g_blackjackData[e].dealerHand.push(n);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "casino/blackjack",
                    "GiveCard",
                    e.toString()
                  );
                }
              }
              async DealerTurnOverCard(e, t) {
                try {
                  if (
                    275201 !==
                    Natives.GET_INTERIOR_FROM_ENTITY(a.g.localplayer.handle)
                  )
                    return;
                  await a.g.wait(500);
                  const i = this.g_blackjackData[e].dealerHandObjs[0];
                  mp.objects.exists(i) && i.destroy();
                  const n = this.g_blackjackData[e].realFlippedCard,
                    s = this.g_blackjackData[e].croupier,
                    {
                      x: r,
                      y: l,
                      z: m,
                    } = mp.game.object.getObjectOffsetFromCoords(
                      o.Hu[e][1],
                      o.Hu[e][2],
                      o.Hu[e][3],
                      o.Hu[e][4],
                      o.Fr[0].x,
                      o.Fr[0].y,
                      o.Fr[0].z
                    );
                  await a.g.loadModel(
                    t ? `vw_prop_cas_card_${n}` : "vw_prop_casino_cards_single"
                  ),
                    (this.g_blackjackData[e].dealerHandObjs[0] = mp.objects.new(
                      mp.game.joaat(
                        t
                          ? `vw_prop_cas_card_${n}`
                          : "vw_prop_casino_cards_single"
                      ),
                      new mp.Vector3(r, l, m)
                    )),
                    await a.g.IsLoadEntity(
                      this.g_blackjackData[e].dealerHandObjs[0]
                    ),
                    mp.objects.exists(
                      this.g_blackjackData[e].dealerHandObjs[0]
                    ) &&
                      this.g_blackjackData[e].dealerHandObjs[0].attachTo(
                        s.handle,
                        s.getBoneIndex(28422),
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        !1,
                        !1,
                        !1,
                        !1,
                        2,
                        !0
                      ),
                    await a.g.wait(1500),
                    mp.objects.exists(this.g_blackjackData[e].dealerHandObjs[0])
                      ? (this.g_blackjackData[e].dealerHandObjs[0].detach(
                          !1,
                          !0
                        ),
                        this.g_blackjackData[
                          e
                        ].dealerHandObjs[0].setCoordsNoOffset(
                          r,
                          l,
                          m,
                          !1,
                          !1,
                          !1
                        ),
                        this.g_blackjackData[e].dealerHandObjs[0].setRotation(
                          t ? 0 : 180,
                          0,
                          o.Hu[e][4] + o.Fr[0].z,
                          2,
                          !0
                        ))
                      : await a.g.wait(1500),
                    t && this.g_blackjackData[e].dealerHand.push(n);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "casino/blackjack",
                    "DealerTurnOverCard",
                    e.toString()
                  );
                }
              }
              SplitHand(e, t, i) {
                try {
                  if (
                    275201 !==
                    Natives.GET_INTERIOR_FROM_ENTITY(a.g.localplayer.handle)
                  )
                    return;
                  const {
                      x: n,
                      y: s,
                      z: r,
                    } = mp.game.object.getObjectOffsetFromCoords(
                      o.Hu[e][1],
                      o.Hu[e][2],
                      o.Hu[e][3],
                      o.Hu[e][4],
                      o.wz[t][i].x,
                      o.wz[t][i].y,
                      o.wz[t][i].z
                    ),
                    l = this.g_blackjackData[e].handObjs;
                  l &&
                    l[t] &&
                    l[t][l[t].length - 1] &&
                    (l[t][l[t].length - 1].setCoordsNoOffset(
                      n,
                      s,
                      r,
                      !1,
                      !1,
                      !1
                    ),
                    l[t][l[t].length - 1].setRotation(
                      0,
                      0,
                      o.Hu[e][4] + o.FN[t][i],
                      2,
                      !0
                    )),
                    this.selectSeat == t &&
                      this.selectTable == e &&
                      (this.splitHand.push(this.hand[this.hand.length - 1]),
                      this.hand.splice(this.hand.length - 1, this.hand.length));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "casino/blackjack",
                    "SplitHand",
                    e.toString()
                  );
                }
              }
              RetrieveCards(e, t) {
                try {
                  if (
                    275201 !==
                    Natives.GET_INTERIOR_FROM_ENTITY(a.g.localplayer.handle)
                  )
                    return;
                  t
                    ? (this.g_blackjackData[e].handObjs &&
                        this.g_blackjackData[e].handObjs[t] &&
                        this.g_blackjackData[e].handObjs[t].length &&
                        (this.g_blackjackData[e].handObjs[t].forEach((e) => {
                          mp.objects.exists(e) && e.destroy();
                        }),
                        (this.g_blackjackData[e].handObjs[t] = [])),
                      this.g_blackjackData[e].chips &&
                        this.g_blackjackData[e].chips[t] &&
                        this.g_blackjackData[e].chips[t].length &&
                        (this.g_blackjackData[e].chips[t].forEach((e) => {
                          mp.objects.exists(e) && e.destroy();
                        }),
                        (this.g_blackjackData[e].chips[t] = [])),
                      ((this.selectSeat == t && this.selectTable == e) ||
                        (null == this.selectTable &&
                          null == this.selectSeat)) &&
                        ((this.hand = []),
                        (this.splitHand = []),
                        (this.candouble = !0)))
                    : (this.g_blackjackData[e].dealerHandObjs.forEach((e) => {
                        mp.objects.exists(e) && e.destroy();
                      }),
                      (this.g_blackjackData[e].dealerHandObjs = []),
                      (this.g_blackjackData[e].dealerHand = []));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "casino/blackjack",
                    "RetrieveCards",
                    e.toString()
                  );
                }
              }
              getChips(e) {
                try {
                  return e <= 2500
                    ? {
                        sound: "DLC_VW_CHIP_BET_SML_SINGLE",
                        prop: "vw_prop_chip_50dollar_st",
                      }
                    : e <= 1e4
                    ? {
                        sound: "DLC_VW_CHIP_BET_SML_SMALL",
                        prop: "vw_prop_chip_100dollar_st",
                      }
                    : e <= 25e3
                    ? {
                        sound: "DLC_VW_CHIP_BET_SML_SMALL",
                        prop: "vw_prop_chip_500dollar_st",
                      }
                    : e <= 5e4
                    ? {
                        sound: "DLC_VW_CHIP_BET_SML_MEDIUM",
                        prop: "vw_prop_chip_1kdollar_st",
                      }
                    : e <= 1e5
                    ? {
                        sound: "DLC_VW_CHIP_BET_SML_MEDIUM",
                        prop: "vw_prop_chip_5kdollar_st",
                      }
                    : e <= 15e4
                    ? {
                        sound: "DLC_VW_CHIP_BET_SML_LARGE",
                        prop: "vw_prop_chip_10kdollar_st",
                      }
                    : e <= 2e5
                    ? {
                        sound: "DLC_VW_CHIP_BET_SML_LARGE",
                        prop: "vw_prop_plaq_5kdollar_st",
                      }
                    : {
                        sound: "DLC_VW_CHIP_BET_SML_LARGE",
                        prop: "vw_prop_plaq_10kdollar_st",
                      };
                } catch (e) {
                  return (
                    mp.events.callRemote(
                      "client_trycatch",
                      "casino/blackjack",
                      "getChips",
                      e.toString()
                    ),
                    {
                      sound: "DLC_VW_CHIP_BET_SML_LARGE",
                      prop: "vw_prop_plaq_10kdollar_st",
                    }
                  );
                }
              }
              async PlaceBetChip(e, t, i, n, s) {
                try {
                  if (
                    275201 !==
                    Natives.GET_INTERIOR_FROM_ENTITY(a.g.localplayer.handle)
                  )
                    return;
                  this.selectSeat == t &&
                    this.selectTable == e &&
                    (mp.gui.emmit(
                      `window.events.callEvent("cef.blackjack.bet", ${i})`
                    ),
                    (this.bet = !0),
                    (1 != n && 1 != s) || (this.candouble = !1));
                  let r = this.getChips(i);
                  this.g_blackjackData[e].chips &&
                    this.g_blackjackData[e].chips[t] &&
                    this.g_blackjackData[e].chips[t].length &&
                    (this.g_blackjackData[e].chips[t].forEach((e) => {
                      mp.objects.exists(e) && e.destroy();
                    }),
                    (this.g_blackjackData[e].chips[t] = []));
                  let l = 0;
                  n && !s ? (l = 1) : !n && s ? (l = 2) : n && s && (l = 3);
                  const m = mp.objects.new(
                    mp.game.joaat(r.prop),
                    new mp.Vector3(o.Hu[e][1], o.Hu[e][2], o.Hu[e][3])
                  );
                  await a.g.IsLoadEntity(m),
                    m.setCollision(!1, !1),
                    mp.game.audio.playSoundFromEntity(
                      -1,
                      r.sound,
                      m.handle,
                      "dlc_vw_table_games_sounds",
                      !1,
                      0
                    );
                  const {
                    x: c,
                    y: p,
                    z: g,
                  } = mp.game.object.getObjectOffsetFromCoords(
                    o.Hu[e][1],
                    o.Hu[e][2],
                    o.Hu[e][3],
                    o.Hu[e][4],
                    o.Go[t][l].x,
                    o.Go[t][l].y,
                    0.896
                  );
                  m.setCoordsNoOffset(c, p, g, !1, !1, !1),
                    s
                      ? m.setRotation(0, 0, o.Hu[e][4] + o.yv[t], 2, !0)
                      : m.setRotation(0, 0, o.Hu[e][4] + o.jM[t], 2, !0),
                    this.g_blackjackData[e].chips[t] ||
                      (this.g_blackjackData[e].chips[t] = []),
                    this.g_blackjackData[e].chips[t].push(m);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "casino/blackjack",
                    "PlaceBetChip",
                    e.toString()
                  );
                }
              }
              PlayDealerAnim(e, t, a) {
                try {
                  mp.game.streaming.requestAnimDict(t);
                  const o = this.g_blackjackData[e].croupier;
                  o.model === mp.game.joaat("S_M_Y_Casino_01")
                    ? (o.taskPlayAnim(t, a, 4, -2, -1, 2, 0, !1, !1, !1),
                      o.playFacialAnim(a + "_facial", t))
                    : (o.taskPlayAnim(
                        t,
                        "female_" + a,
                        4,
                        -2,
                        -1,
                        2,
                        0,
                        !1,
                        !1,
                        !1
                      ),
                      o.playFacialAnim("female_" + a + "_facial", t));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "casino/blackjack",
                    "PlayDealerAnim",
                    e.toString()
                  );
                }
              }
              PlayDealerSpeech(e, t) {
                try {
                  const a = this.g_blackjackData[e].croupier;
                  mp.game.invoke(
                    this.invokeData._PLAY_AMBIENT_SPEECH1,
                    a.handle,
                    t,
                    "SPEECH_PARAMS_FORCE_NORMAL_CLEAR"
                  );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "casino/blackjack",
                    "PlayDealerSpeech",
                    e.toString()
                  );
                }
              }
              CanSplitHand() {
                try {
                  return !!(
                    this.hand &&
                    2 == this.hand.length &&
                    this.hand[0] &&
                    this.hand[1] &&
                    this.CardValue(this.hand[0]) == this.CardValue(this.hand[1])
                  );
                } catch (e) {
                  return (
                    mp.events.callRemote(
                      "client_trycatch",
                      "casino/blackjack",
                      "CanSplitHand",
                      e.toString()
                    ),
                    !1
                  );
                }
              }
              openBtn(e, t) {
                try {
                  (this.btnDouble = 0),
                    (this.btnSplit = 0),
                    this.hand &&
                      2 == this.hand.length &&
                      !this.splitHand.length &&
                      this.candouble &&
                      (this.btnDouble = 1),
                    !this.splitHand.length &&
                      this.CanSplitHand() &&
                      this.candouble &&
                      (this.btnSplit = 1),
                    mp.gui.emmit(
                      `window.events.callEvent("cef.blackjack.btn", ${e}, ${t}, ${this.btnDouble}, ${this.btnSplit})`
                    ),
                    (mp.gui.cursor.visible = !(!e && !t)),
                    mp.gui.emmit(
                      'window.events.callEvent("cef.blackjack.time", 0)'
                    );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "casino/blackjack",
                    "openBtn",
                    e.toString()
                  );
                }
              }
            })()),
              mp.events.add(
                "client.blackjack.GiveCard",
                async function (e, t, a, o, i = !1, n = !1) {
                  blackjack.GiveCard(e, t, a, o, i, n);
                }
              ),
              mp.events.add(
                "client.blackjack.DealerTurnOverCard",
                async function (e, t = !0) {
                  blackjack.DealerTurnOverCard(e, t);
                }
              ),
              mp.events.add(
                "client.blackjack.character_occupy_place",
                (e, t, a, o) => {
                  blackjack.onSelectTable(e, t, a, o);
                }
              ),
              mp.events.add("client.blackjack.SyncTimer", function (e) {
                mp.gui.emmit(
                  `window.events.callEvent("cef.blackjack.time",  ${e})`
                );
              }),
              mp.events.add("client.blackjack.ExitBtn", function (e) {
                mp.gui.emmit(
                  `window.events.callEvent("cef.blackjack.btnExit", ${e}, "server")`
                ),
                  e
                    ? ((blackjack.bet = !1), (blackjack.game = !1))
                    : (blackjack.game = !0);
              }),
              mp.events.add("client.blackjack.successLeave", function () {
                blackjack.onSuccessLeave();
              }),
              mp.events.add("client.blackjack.SplitHand", function (e, t, a) {
                blackjack.SplitHand(e, t, a);
              }),
              mp.events.add("client.blackjack.RetrieveCards", function (e, t) {
                blackjack.RetrieveCards(e, t);
              }),
              mp.events.add(
                "client.blackjack.PlayDealerSpeech",
                function (e, t) {
                  blackjack.PlayDealerSpeech(e, t);
                }
              ),
              mp.events.add(
                "client.blackjack.PlayDealerAnim",
                function (e, t, a) {
                  blackjack.PlayDealerAnim(e, t, a);
                }
              ),
              mp.events.add(
                "client.blackjack.PlaceBetChip",
                function (e, t, a, o = !1, i = !1) {
                  blackjack.PlaceBetChip(e, t, a, o, i);
                }
              ),
              mp.events.add("client.blackjack.setBet", function (e) {
                mp.events.callRemote("server.blackjack.setBet", a.g.pInt(e));
              }),
              (a.g.binderFunctions.blackjackExit = () => {
                blackjack.onLeave();
              }),
              mp.events.add("client.blackjack.exit", function (e) {
                blackjack.onLeave();
              }),
              mp.events.add("client.blackjack.btn", function (e) {
                mp.events.callRemote("server.blackjack.move", e);
              }),
              mp.events.add("client.blackjack.isBtn", function (e, t) {
                blackjack.openBtn(e, t);
              }),
              mp.events.add("client.blackjack.betWin", function (e) {
                mp.gui.emmit(
                  `window.events.callEvent("cef.blackjack.betWin", ${e})`
                );
              });
          },
          5948: (e, t, a) => {
            "use strict";
            a.r(t),
              a.d(t, {
                SCREEN_DIAMONDS: () => i,
                SCREEN_SKULLS: () => n,
                SCREEN_SNOW: () => s,
                SCREEN_WIN: () => r,
              });
            let o = null;
            const i = "CASINO_DIA_PL",
              n = "CASINO_HLW_PL",
              s = "CASINO_SNWFLK_PL",
              r = "CASINO_WIN_PL",
              l = "casinoscreen_01",
              m = mp.game.joaat("vw_vwint01_video_overlay"),
              c = "Prop_Screen_Vinewood";
            let p = !1;
            const g = () => {
              try {
                a.g.loadTextureDict(c).then(
                  (e) => {
                    e && mp.game.graphics.hasStreamedTextureDictLoaded(c)
                      ? (mp.game.ui.registerNamedRendertarget(l, !1),
                        mp.game.ui.linkNamedRendertarget(m),
                        ((e, t = 0, a = -100) => {
                          Natives.SET_TV_CHANNEL_PLAYLIST(0, e, !0),
                            mp.game.graphics.setTvAudioFrontend(!0),
                            mp.game.graphics.setTvVolume(a),
                            mp.game.graphics.setTvChannel(t);
                        })(s),
                        (o = mp.game.ui.getNamedRendertargetRenderId(l)))
                      : g();
                  },
                  (e) => {
                    g();
                  }
                );
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "casino/casinoscreen",
                  "setInterval",
                  e.toString()
                );
              }
            };
            mp.events.add("render", function () {
              try {
                if (!a.g.loggedin) return;
                p ||
                275201 !=
                  Natives.GET_INTERIOR_FROM_ENTITY(a.g.localplayer.handle)
                  ? p &&
                    275201 ==
                      Natives.GET_INTERIOR_FROM_ENTITY(
                        a.g.localplayer.handle
                      ) &&
                    mp.game.graphics.hasStreamedTextureDictLoaded(c) &&
                    null !== o &&
                    (mp.game.ui.setTextRenderId(o),
                    mp.game.graphics.set2dLayer(4),
                    Natives.SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU(!0),
                    Natives._DRAW_INTERACTIVE_SPRITE(
                      c,
                      "BG_Wall_Colour_4x4",
                      0.25,
                      0.5,
                      0.5,
                      1.0000001,
                      1e-7,
                      255,
                      255,
                      255,
                      255
                    ),
                    mp.game.graphics.drawTvChannel(
                      0.5,
                      0.5,
                      1.0000001,
                      1.0000001,
                      1e-7,
                      255,
                      255,
                      255,
                      255
                    ),
                    mp.game.ui.setTextRenderId(1))
                  : ((p = !0), g());
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "casino/casinoscreen",
                  "render",
                  e.toString()
                );
              }
            });
          },
          9777: (e, t, a) => {
            "use strict";
            a.d(t, {
              Hu: () => o,
              Hx: () => i,
              Fr: () => n,
              FN: () => s,
              wz: () => r,
              Zc: () => l,
              PD: () => m,
              yv: () => c,
              Go: () => p,
              jM: () => g,
              Py: () => _,
              D3: () => d,
              pR: () => h,
              tl: () => u,
              L_: () => y,
              sc: () => v,
              v3: () => f,
              uu: () => w,
              BH: () => S,
            });
            const o = [
                [
                  "vw_prop_casino_blckjack_01",
                  1148.837,
                  269.747,
                  -52.84094,
                  -134.69,
                ],
                [
                  "vw_prop_casino_blckjack_01",
                  1151.84,
                  266.747,
                  -52.84094,
                  45.31,
                ],
                [
                  "vw_prop_casino_blckjack_01b",
                  1129.406,
                  262.3578,
                  -52.041,
                  135.31,
                ],
                [
                  "vw_prop_casino_blckjack_01b",
                  1144.429,
                  247.3352,
                  -52.041,
                  135.31,
                ],
                [
                  "vw_prop_casino_blckjack_01",
                  1146.329,
                  261.2543,
                  -52.84094,
                  45.31,
                ],
                [
                  "vw_prop_casino_blckjack_01",
                  1143.338,
                  264.2453,
                  -52.84094,
                  -134.69,
                ],
                [
                  "vw_prop_casino_blckjack_01b",
                  1133.74,
                  266.6947,
                  -52.04094,
                  -45,
                ],
                [
                  "vw_prop_casino_blckjack_01b",
                  1148.74,
                  251.6947,
                  -52.04094,
                  -45,
                ],
              ],
              i = [
                [1.8, -0.25, 1, 67.5],
                [0.725, -1.3, 1, 22.5],
                [-0.725, -1.3, 1, -22.5],
                [-1.8, -0.25, 1, -67.5],
              ],
              n = [
                new mp.Vector3(0.0436, 0.21205, 0.948875),
                new mp.Vector3(-0.0636, 0.213825, 0.9496),
                new mp.Vector3(-0.0806, 0.2137, 0.950225),
                new mp.Vector3(-0.1006, 0.21125, 0.950875),
                new mp.Vector3(-0.1256, 0.21505, 0.951875),
                new mp.Vector3(-0.1416, 0.21305, 0.953),
                new mp.Vector3(-0.1656, 0.21205, 0.954025),
                new mp.Vector3(-0.1836, 0.21255, 0.95495),
                new mp.Vector3(-0.2076, 0.21105, 0.956025),
                new mp.Vector3(-0.2246, 0.21305, 0.957),
              ],
              s = {
                1: [68.57, 67.52, 67.76, 67.04, 68.84, 65.96, 67.76],
                2: [22.11, 22, 24.44, 21.08, 25.96, 26.16, 28.76],
                3: [-14.04, -15.48, -16.56, -15.84, -16.92, -14.4, -14.28],
                4: [-67.03, -67.6, -69.4, -69.04, -68.68, -66.16, -63.28],
              },
              r = {
                1: [
                  new mp.Vector3(0.6083, 0.3523, 0.94795),
                  new mp.Vector3(0.598475, 0.366475, 0.948925),
                  new mp.Vector3(0.589525, 0.3807, 0.94975),
                  new mp.Vector3(0.58045, 0.39435, 0.950375),
                  new mp.Vector3(0.571975, 0.4092, 0.951075),
                  new mp.Vector3(0.5614, 0.4237, 0.951775),
                  new mp.Vector3(0.554325, 0.4402, 0.952525),
                ],
                2: [
                  new mp.Vector3(0.3431, -0.0527, 0.94855),
                  new mp.Vector3(0.348575, -0.0348, 0.949425),
                  new mp.Vector3(0.35465, -0.018825, 0.9502),
                  new mp.Vector3(0.3581, -0.001625, 0.95115),
                  new mp.Vector3(0.36515, 0.015275, 0.952075),
                  new mp.Vector3(0.368525, 0.032475, 0.95335),
                  new mp.Vector3(0.373275, 0.0506, 0.9543),
                ],
                3: [
                  new mp.Vector3(-0.116, -0.1501, 0.947875),
                  new mp.Vector3(-0.102725, -0.13795, 0.948525),
                  new mp.Vector3(-0.08975, -0.12665, 0.949175),
                  new mp.Vector3(-0.075025, -0.1159, 0.949875),
                  new mp.Vector3(-0.0614, -0.104775, 0.9507),
                  new mp.Vector3(-0.046275, -0.095025, 0.9516),
                  new mp.Vector3(-0.031425, -0.0846, 0.952675),
                ],
                4: [
                  new mp.Vector3(-0.5205, 0.1122, 0.9478),
                  new mp.Vector3(-0.503175, 0.108525, 0.94865),
                  new mp.Vector3(-0.485125, 0.10475, 0.949175),
                  new mp.Vector3(-0.468275, 0.099175, 0.94995),
                  new mp.Vector3(-0.45155, 0.09435, 0.95085),
                  new mp.Vector3(-0.434475, 0.089725, 0.95145),
                  new mp.Vector3(-0.415875, 0.0846, 0.9523),
                ],
              },
              l = {
                1: [69.12, 67.8, 66.6, 70.44, 70.84, 67.88, 69.56],
                2: [22.11, 22.32, 20.8, 19.8, 19.44, 26.28, 22.68],
                3: [-21.43, -20.16, -16.92, -23.4, -21.24, -23.76, -19.44],
                4: [-67.03, -69.12, -64.44, -67.68, -63.72, -68.4, -64.44],
              },
              m = {
                1: [
                  new mp.Vector3(0.5737, 0.2376, 0.948025),
                  new mp.Vector3(0.562975, 0.2523, 0.94875),
                  new mp.Vector3(0.553875, 0.266325, 0.94955),
                  new mp.Vector3(0.5459, 0.282075, 0.9501),
                  new mp.Vector3(0.536125, 0.29645, 0.95085),
                  new mp.Vector3(0.524975, 0.30975, 0.9516),
                  new mp.Vector3(0.515775, 0.325325, 0.95235),
                ],
                2: [
                  new mp.Vector3(0.2325, -0.1082, 0.94805),
                  new mp.Vector3(0.23645, -0.0918, 0.949),
                  new mp.Vector3(0.2401, -0.074475, 0.950225),
                  new mp.Vector3(0.244625, -0.057675, 0.951125),
                  new mp.Vector3(0.249675, -0.041475, 0.95205),
                  new mp.Vector3(0.257575, -0.0256, 0.9532),
                  new mp.Vector3(0.2601, -0.008175, 0.954375),
                ],
                3: [
                  new mp.Vector3(-0.2359, -0.1091, 0.9483),
                  new mp.Vector3(-0.221025, -0.100675, 0.949),
                  new mp.Vector3(-0.20625, -0.092875, 0.949725),
                  new mp.Vector3(-0.193225, -0.07985, 0.950325),
                  new mp.Vector3(-0.1776, -0.072, 0.951025),
                  new mp.Vector3(-0.165, -0.060025, 0.951825),
                  new mp.Vector3(-0.14895, -0.05155, 0.95255),
                ],
                4: [
                  new mp.Vector3(-0.5765, 0.2229, 0.9482),
                  new mp.Vector3(-0.558925, 0.2197, 0.949175),
                  new mp.Vector3(-0.5425, 0.213025, 0.9499),
                  new mp.Vector3(-0.525925, 0.21105, 0.95095),
                  new mp.Vector3(-0.509475, 0.20535, 0.9519),
                  new mp.Vector3(-0.491775, 0.204075, 0.952825),
                  new mp.Vector3(-0.4752, 0.197525, 0.9543),
                ],
              },
              c =
                (new mp.Vector3(0.61, -0.02, 0),
                new mp.Vector3(0.73, 0.47, 0),
                new mp.Vector3(0.756775, 0.292775, 0),
                new mp.Vector3(0.701875, 0.3439, 0),
                new mp.Vector3(0.03, -0.29, 0),
                new mp.Vector3(0.05, -0.06, 0),
                new mp.Vector3(0.397775, -0.208525, 0),
                new mp.Vector3(0.39715, -0.1354, 0),
                new mp.Vector3(-0.48, -0.13, 0),
                new mp.Vector3(-0.35, 0.07, 0),
                new mp.Vector3(-0.186575, -0.2861, 0),
                new mp.Vector3(-0.141675, -0.237925, 0),
                new mp.Vector3(-0.7, 0.32, 0),
                new mp.Vector3(-0.7, 0.53, 0),
                new mp.Vector3(-0.6783, 0.0744, 0),
                new mp.Vector3(-0.604425, 0.082575, 0),
                new mp.Vector3(0, 0, 8.1),
                new mp.Vector3(0, 0, 229.49),
                new mp.Vector3(0, 0, 74.52),
                new mp.Vector3(0, 0, 72),
                new mp.Vector3(0, 0, 78.7),
                new mp.Vector3(0, 0, 4.6),
                new mp.Vector3(0, 0, 32.04),
                new mp.Vector3(0, 0, 32.04),
                new mp.Vector3(0, 0, 44.89),
                new mp.Vector3(0, 0, 144.49),
                new mp.Vector3(0, 0, -15.48),
                new mp.Vector3(0, 0, -18),
                new mp.Vector3(0, 0, 15.6),
                new mp.Vector3(0, 0, 15.6),
                new mp.Vector3(0, 0, -57.6),
                new mp.Vector3(0, 0, -64.8),
                new mp.Vector3(0.6931, 0.1952, 0),
                new mp.Vector3(0.724925, 0.26955, 0),
                new mp.Vector3(0.7374, 0.349625, 0),
                new mp.Vector3(0.76415, 0.419225, 0),
                new mp.Vector3(0.2827, -0.227825, 0),
                new mp.Vector3(0.3605, -0.1898, 0),
                new mp.Vector3(0.4309, -0.16365, 0),
                new mp.Vector3(0.49275, -0.111575, 0),
                new mp.Vector3(-0.279425, -0.2238, 0),
                new mp.Vector3(-0.200775, -0.25855, 0),
                new mp.Vector3(-0.125775, -0.26815, 0),
                new mp.Vector3(-0.05615, -0.29435, 0),
                new mp.Vector3(-0.685925, 0.173275, 0),
                new mp.Vector3(-0.6568, 0.092525, 0),
                new mp.Vector3(-0.612875, 0.033025, 0),
                new mp.Vector3(-0.58465, -0.0374, 0),
                { 1: -22.32, 2: -64.8, 3: -108.36, 4: -151.92 }),
              p = {
                1: [
                  new mp.Vector3(0.6931, 0.1952, 0),
                  new mp.Vector3(0.724925, 0.26955, 0),
                  new mp.Vector3(0.7374, 0.349625, 0),
                  new mp.Vector3(0.76415, 0.419225, 0),
                ],
                2: [
                  new mp.Vector3(0.2827, -0.227825, 0),
                  new mp.Vector3(0.3605, -0.1898, 0),
                  new mp.Vector3(0.4309, -0.16365, 0),
                  new mp.Vector3(0.49275, -0.111575, 0),
                ],
                3: [
                  new mp.Vector3(-0.279425, -0.2238, 0),
                  new mp.Vector3(-0.200775, -0.25855, 0),
                  new mp.Vector3(-0.125775, -0.26815, 0),
                  new mp.Vector3(-0.05615, -0.29435, 0),
                ],
                4: [
                  new mp.Vector3(-0.685925, 0.173275, 0),
                  new mp.Vector3(-0.6568, 0.092525, 0),
                  new mp.Vector3(-0.612875, 0.033025, 0),
                  new mp.Vector3(-0.58465, -0.0374, 0),
                ],
              },
              g = { 1: 74.52, 2: 32.04, 3: -15.48, 4: -57.6 },
              _ = [
                [
                  "vw_prop_casino_roulette_01",
                  1144.4254150390625,
                  269.3034973144531,
                  -52.840850830078125,
                ],
                [
                  "vw_prop_casino_roulette_01",
                  1151.2305908203125,
                  263.14093017578125,
                  -52.840850830078125,
                ],
                [
                  "vw_prop_casino_roulette_01b",
                  1148.9163818359375,
                  248.62892150878906,
                  -52.03075408935547,
                ],
                [
                  "vw_prop_casino_roulette_01b",
                  1143.677978515625,
                  251.36131286621094,
                  -52.0307502746582,
                ],
                [
                  "vw_prop_casino_roulette_01b",
                  1133.1802978515625,
                  262.3916320800781,
                  -52.03075408935547,
                ],
                [
                  "vw_prop_casino_roulette_01b",
                  1129.9976806640625,
                  266.93695068359375,
                  -52.0307502746582,
                ],
              ],
              d = ["S_M_Y_Casino_01", "S_F_Y_Casino_01"],
              h = [
                [1145.3682, 1144.2391, 269.4913, 268.9185],
                [1152.1837, 1151.0323, 263.323, 262.7231],
                [1149.8544, 1148.7292, 248.8137, 248.2219],
                [1144.627, 1143.488, 251.5547, 250.9482],
                [1134.1285, 1132.9796, 262.5696, 261.9859],
                [1130.9329, 1129.8094, 267.1243, 266.531],
              ],
              u = [
                [-0.7, -1.24, 1, 0],
                [0.29, -1.24, 1, 0],
                [1.74, -0.63, 1, 90],
                [1.27, 0.98, 1, 180],
              ],
              y = [
                [
                  -0.154541015625,
                  -0.150604248046875,
                  0.9449996948242188,
                  ["0"],
                ],
                [
                  -0.1561279296875,
                  0.11505126953125,
                  0.9449996948242188,
                  ["00"],
                ],
                [-0.059326171875, -0.18701171875, 0.9449996948242188, ["1"]],
                [
                  -0.058349609375,
                  -0.019378662109375,
                  0.9449996948242188,
                  ["2"],
                ],
                [
                  -0.0587158203125,
                  0.142059326171875,
                  0.9449996948242188,
                  ["3"],
                ],
                [0.02294921875, -0.1920166015625, 0.9449996948242188, ["4"]],
                [0.023193359375, -0.01947021484375, 0.9449996948242188, ["5"]],
                [0.024658203125, 0.147369384765625, 0.9449996948242188, ["6"]],
                [0.105224609375, -0.1876220703125, 0.9449996948242188, ["7"]],
                [
                  0.1055908203125,
                  -0.028472900390625,
                  0.9449996948242188,
                  ["8"],
                ],
                [0.10400390625, 0.147430419921875, 0.9449996948242188, ["9"]],
                [
                  0.187744140625,
                  -0.191802978515625,
                  0.9449996948242188,
                  ["10"],
                ],
                [
                  0.1866455078125,
                  -0.02667236328125,
                  0.9449996948242188,
                  ["11"],
                ],
                [
                  0.1842041015625,
                  0.145965576171875,
                  0.9449996948242188,
                  ["12"],
                ],
                [
                  0.2696533203125,
                  -0.182464599609375,
                  0.9449996948242188,
                  ["13"],
                ],
                [
                  0.265869140625,
                  -0.027862548828125,
                  0.9449996948242188,
                  ["14"],
                ],
                [
                  0.2667236328125,
                  0.138946533203125,
                  0.9449996948242188,
                  ["15"],
                ],
                [0.35009765625, -0.186126708984375, 0.9449996948242188, ["16"]],
                [
                  0.348876953125,
                  -0.027740478515625,
                  0.9449996948242188,
                  ["17"],
                ],
                [0.3497314453125, 0.14715576171875, 0.9449996948242188, ["18"]],
                [0.43212890625, -0.17864990234375, 0.9449996948242188, ["19"]],
                [
                  0.4337158203125,
                  -0.02508544921875,
                  0.9449996948242188,
                  ["20"],
                ],
                [0.430419921875, 0.138336181640625, 0.9449996948242188, ["21"]],
                [0.51416015625, -0.18603515625, 0.9449996948242188, ["22"]],
                [
                  0.5135498046875,
                  -0.02301025390625,
                  0.9449996948242188,
                  ["23"],
                ],
                [0.5146484375, 0.14239501953125, 0.9449996948242188, ["24"]],
                [0.59130859375, -0.192413330078125, 0.9449996948242188, ["25"]],
                [0.596923828125, -0.022216796875, 0.9449996948242188, ["26"]],
                [0.5924072265625, 0.14385986328125, 0.9449996948242188, ["27"]],
                [
                  0.6749267578125,
                  -0.187286376953125,
                  0.9449996948242188,
                  ["28"],
                ],
                [0.67431640625, -0.0262451171875, 0.9449996948242188, ["29"]],
                [
                  0.6756591796875,
                  0.140594482421875,
                  0.9449996948242188,
                  ["30"],
                ],
                [
                  0.7542724609375,
                  -0.19415283203125,
                  0.9449996948242188,
                  ["31"],
                ],
                [
                  0.7542724609375,
                  -0.01898193359375,
                  0.9449996948242188,
                  ["32"],
                ],
                [0.75439453125, 0.1448974609375, 0.9449996948242188, ["33"]],
                [
                  0.8392333984375,
                  -0.18951416015625,
                  0.9449996948242188,
                  ["34"],
                ],
                [
                  0.837646484375,
                  -0.023468017578125,
                  0.9449996948242188,
                  ["35"],
                ],
                [0.8380126953125, 0.14227294921875, 0.9449996948242188, ["36"]],
                [
                  -0.1368408203125,
                  -0.02099609375,
                  0.9449996948242188,
                  ["0", "00"],
                ],
                [
                  -0.055419921875,
                  -0.105804443359375,
                  0.9449996948242188,
                  ["1", "2"],
                ],
                [
                  -0.0567626953125,
                  0.058624267578125,
                  0.9449996948242188,
                  ["2", "3"],
                ],
                [0.02587890625, -0.10498046875, 0.9449996948242188, ["4", "5"]],
                [0.0244140625, 0.058837890625, 0.9449996948242188, ["5", "6"]],
                [
                  0.100341796875,
                  -0.10382080078125,
                  0.9449996948242188,
                  ["7", "8"],
                ],
                [
                  0.1064453125,
                  0.06011962890625,
                  0.9449996948242188,
                  ["8", "9"],
                ],
                [
                  0.19189453125,
                  -0.1060791015625,
                  0.9449996948242188,
                  ["10", "11"],
                ],
                [
                  0.1856689453125,
                  0.05438232421875,
                  0.9449996948242188,
                  ["11", "12"],
                ],
                [
                  0.27099609375,
                  -0.10870361328125,
                  0.9449996948242188,
                  ["13", "14"],
                ],
                [
                  0.2667236328125,
                  0.058502197265625,
                  0.9449996948242188,
                  ["14", "15"],
                ],
                [
                  0.3463134765625,
                  -0.107696533203125,
                  0.9449996948242188,
                  ["16", "17"],
                ],
                [0.34814453125, 0.0556640625, 0.9449996948242188, ["17", "18"]],
                [
                  0.42822265625,
                  -0.109130859375,
                  0.9449996948242188,
                  ["19", "20"],
                ],
                [
                  0.4302978515625,
                  0.0550537109375,
                  0.9449996948242188,
                  ["20", "21"],
                ],
                [
                  0.511474609375,
                  -0.107421875,
                  0.9449996948242188,
                  ["22", "23"],
                ],
                [
                  0.512451171875,
                  0.0614013671875,
                  0.9449996948242188,
                  ["23", "24"],
                ],
                [
                  0.5980224609375,
                  -0.107147216796875,
                  0.9449996948242188,
                  ["25", "26"],
                ],
                [
                  0.596435546875,
                  0.0574951171875,
                  0.9449996948242188,
                  ["26", "27"],
                ],
                [
                  0.673828125,
                  -0.106903076171875,
                  0.9449996948242188,
                  ["28", "29"],
                ],
                [
                  0.6751708984375,
                  0.058685302734375,
                  0.9449996948242188,
                  ["29", "30"],
                ],
                [
                  0.7532958984375,
                  -0.1102294921875,
                  0.9449996948242188,
                  ["31", "32"],
                ],
                [
                  0.750244140625,
                  0.06103515625,
                  0.9449996948242188,
                  ["32", "33"],
                ],
                [
                  0.834716796875,
                  -0.108978271484375,
                  0.9449996948242188,
                  ["34", "35"],
                ],
                [
                  0.836181640625,
                  0.05828857421875,
                  0.9449996948242188,
                  ["35", "36"],
                ],
                [
                  -0.0167236328125,
                  -0.187042236328125,
                  0.9449996948242188,
                  ["1", "4"],
                ],
                [
                  -0.0167236328125,
                  -0.02154541015625,
                  0.9449996948242188,
                  ["2", "5"],
                ],
                [
                  -0.0164794921875,
                  0.140350341796875,
                  0.9449996948242188,
                  ["3", "6"],
                ],
                [0.064453125, -0.1865234375, 0.9449996948242188, ["4", "7"]],
                [
                  0.06494140625,
                  -0.01727294921875,
                  0.9449996948242188,
                  ["5", "8"],
                ],
                [
                  0.068603515625,
                  0.13873291015625,
                  0.9449996948242188,
                  ["6", "9"],
                ],
                [
                  0.144287109375,
                  -0.184173583984375,
                  0.9449996948242188,
                  ["7", "10"],
                ],
                [
                  0.14501953125,
                  -0.024139404296875,
                  0.9449996948242188,
                  ["8", "11"],
                ],
                [
                  0.14501953125,
                  0.136993408203125,
                  0.9449996948242188,
                  ["9", "12"],
                ],
                [
                  0.2291259765625,
                  -0.18670654296875,
                  0.9449996948242188,
                  ["10", "13"],
                ],
                [
                  0.227783203125,
                  -0.0242919921875,
                  0.9449996948242188,
                  ["11", "14"],
                ],
                [
                  0.2286376953125,
                  0.14398193359375,
                  0.9449996948242188,
                  ["12", "15"],
                ],
                [
                  0.308349609375,
                  -0.18792724609375,
                  0.9449996948242188,
                  ["13", "16"],
                ],
                [
                  0.308837890625,
                  -0.02374267578125,
                  0.9449996948242188,
                  ["14", "17"],
                ],
                [
                  0.3099365234375,
                  0.14410400390625,
                  0.9449996948242188,
                  ["15", "18"],
                ],
                [
                  0.39111328125,
                  -0.192230224609375,
                  0.9449996948242188,
                  ["16", "19"],
                ],
                [
                  0.390869140625,
                  -0.0189208984375,
                  0.9449996948242188,
                  ["17", "20"],
                ],
                [
                  0.39111328125,
                  0.146514892578125,
                  0.9449996948242188,
                  ["18", "21"],
                ],
                [
                  0.470947265625,
                  -0.188690185546875,
                  0.9449996948242188,
                  ["19", "22"],
                ],
                [
                  0.4705810546875,
                  -0.0205078125,
                  0.9449996948242188,
                  ["20", "23"],
                ],
                [
                  0.4725341796875,
                  0.140167236328125,
                  0.9449996948242188,
                  ["21", "24"],
                ],
                [
                  0.5491943359375,
                  -0.189666748046875,
                  0.9449996948242188,
                  ["22", "25"],
                ],
                [
                  0.548095703125,
                  -0.022552490234375,
                  0.9449996948242188,
                  ["23", "26"],
                ],
                [
                  0.553955078125,
                  0.1446533203125,
                  0.9449996948242188,
                  ["24", "27"],
                ],
                [
                  0.6324462890625,
                  -0.191131591796875,
                  0.9449996948242188,
                  ["25", "28"],
                ],
                [
                  0.635498046875,
                  -0.0224609375,
                  0.9449996948242188,
                  ["26", "29"],
                ],
                [
                  0.6392822265625,
                  0.139190673828125,
                  0.9449996948242188,
                  ["27", "30"],
                ],
                [
                  0.71533203125,
                  -0.187042236328125,
                  0.9449996948242188,
                  ["28", "31"],
                ],
                [
                  0.7181396484375,
                  -0.02447509765625,
                  0.9449996948242188,
                  ["29", "32"],
                ],
                [
                  0.7152099609375,
                  0.138153076171875,
                  0.9449996948242188,
                  ["30", "33"],
                ],
                [
                  0.7969970703125,
                  -0.1904296875,
                  0.9449996948242188,
                  ["31", "34"],
                ],
                [
                  0.7955322265625,
                  -0.024871826171875,
                  0.9449996948242188,
                  ["32", "35"],
                ],
                [
                  0.7960205078125,
                  0.137664794921875,
                  0.9449996948242188,
                  ["33", "36"],
                ],
                [
                  -0.0560302734375,
                  -0.271240234375,
                  0.9449996948242188,
                  ["1", "2", "3"],
                ],
                [
                  0.024658203125,
                  -0.271392822265625,
                  0.9449996948242188,
                  ["4", "5", "6"],
                ],
                [
                  0.1051025390625,
                  -0.272125244140625,
                  0.9449996948242188,
                  ["7", "8", "9"],
                ],
                [
                  0.1898193359375,
                  -0.27001953125,
                  0.9449996948242188,
                  ["10", "11", "12"],
                ],
                [
                  0.2696533203125,
                  -0.271697998046875,
                  0.9449996948242188,
                  ["13", "14", "15"],
                ],
                [
                  0.351318359375,
                  -0.268096923828125,
                  0.9449996948242188,
                  ["16", "17", "18"],
                ],
                [
                  0.4287109375,
                  -0.269561767578125,
                  0.9449996948242188,
                  ["19", "20", "21"],
                ],
                [
                  0.5098876953125,
                  -0.2716064453125,
                  0.9449996948242188,
                  ["22", "23", "24"],
                ],
                [
                  0.5960693359375,
                  -0.271148681640625,
                  0.9449996948242188,
                  ["25", "26", "27"],
                ],
                [
                  0.67724609375,
                  -0.268524169921875,
                  0.9449996948242188,
                  ["28", "29", "30"],
                ],
                [
                  0.7523193359375,
                  -0.27227783203125,
                  0.9449996948242188,
                  ["31", "32", "33"],
                ],
                [
                  0.8382568359375,
                  -0.272125244140625,
                  0.9449996948242188,
                  ["34", "35", "36"],
                ],
                [
                  -0.017333984375,
                  -0.106170654296875,
                  0.9449996948242188,
                  ["1", "2", "4", "5"],
                ],
                [
                  -0.0162353515625,
                  0.060882568359375,
                  0.9449996948242188,
                  ["2", "3", "5", "6"],
                ],
                [
                  0.06591796875,
                  -0.110107421875,
                  0.9449996948242188,
                  ["4", "5", "7", "8"],
                ],
                [
                  0.0653076171875,
                  0.060028076171875,
                  0.9449996948242188,
                  ["5", "6", "8", "9"],
                ],
                [
                  0.146484375,
                  -0.10888671875,
                  0.9449996948242188,
                  ["7", "8", "10", "11"],
                ],
                [
                  0.1451416015625,
                  0.057159423828125,
                  0.9449996948242188,
                  ["8", "9", "11", "12"],
                ],
                [
                  0.22705078125,
                  -0.1092529296875,
                  0.9449996948242188,
                  ["10", "11", "13", "14"],
                ],
                [
                  0.22802734375,
                  0.059356689453125,
                  0.9449996948242188,
                  ["11", "12", "14", "15"],
                ],
                [
                  0.307373046875,
                  -0.1043701171875,
                  0.9449996948242188,
                  ["13", "14", "16", "17"],
                ],
                [
                  0.309814453125,
                  0.05584716796875,
                  0.9449996948242188,
                  ["14", "15", "17", "18"],
                ],
                [
                  0.3919677734375,
                  -0.111083984375,
                  0.9449996948242188,
                  ["16", "17", "19", "20"],
                ],
                [
                  0.3924560546875,
                  0.0596923828125,
                  0.9449996948242188,
                  ["17", "18", "20", "21"],
                ],
                [
                  0.471923828125,
                  -0.1044921875,
                  0.9449996948242188,
                  ["19", "20", "22", "23"],
                ],
                [
                  0.4698486328125,
                  0.060028076171875,
                  0.9449996948242188,
                  ["20", "21", "23", "24"],
                ],
                [
                  0.5531005859375,
                  -0.106170654296875,
                  0.9449996948242188,
                  ["22", "23", "25", "26"],
                ],
                [
                  0.5546875,
                  0.059417724609375,
                  0.9449996948242188,
                  ["23", "24", "26", "27"],
                ],
                [
                  0.633544921875,
                  -0.101531982421875,
                  0.9449996948242188,
                  ["25", "26", "28", "29"],
                ],
                [
                  0.6337890625,
                  0.0579833984375,
                  0.9449996948242188,
                  ["26", "27", "29", "30"],
                ],
                [
                  0.7156982421875,
                  -0.106292724609375,
                  0.9449996948242188,
                  ["28", "29", "31", "32"],
                ],
                [
                  0.7158203125,
                  0.0604248046875,
                  0.9449996948242188,
                  ["29", "30", "32", "33"],
                ],
                [
                  0.7947998046875,
                  -0.108642578125,
                  0.9449996948242188,
                  ["31", "32", "34", "35"],
                ],
                [
                  0.7952880859375,
                  0.059051513671875,
                  0.9449996948242188,
                  ["32", "33", "35", "36"],
                ],
                [
                  -0.099609375,
                  -0.2711181640625,
                  0.9449996948242188,
                  ["0", "00", "1", "2", "3"],
                ],
                [
                  -0.0147705078125,
                  -0.27154541015625,
                  0.9449996948242188,
                  ["1", "2", "3", "4", "5", "6"],
                ],
                [
                  0.064697265625,
                  -0.270263671875,
                  0.9449996948242188,
                  ["4", "5", "6", "7", "8", "9"],
                ],
                [
                  0.144775390625,
                  -0.271209716796875,
                  0.9449996948242188,
                  ["7", "8", "9", "10", "11", "12"],
                ],
                [
                  0.226806640625,
                  -0.27142333984375,
                  0.9449996948242188,
                  ["10", "11", "12", "13", "14", "15"],
                ],
                [
                  0.306396484375,
                  -0.27142333984375,
                  0.9449996948242188,
                  ["13", "14", "15", "16", "17", "18"],
                ],
                [
                  0.3895263671875,
                  -0.27099609375,
                  0.9449996948242188,
                  ["16", "17", "18", "19", "20", "21"],
                ],
                [
                  0.468017578125,
                  -0.275238037109375,
                  0.9449996948242188,
                  ["19", "20", "21", "22", "23", "24"],
                ],
                [
                  0.5509033203125,
                  -0.2738037109375,
                  0.9449996948242188,
                  ["22", "23", "24", "25", "26", "27"],
                ],
                [
                  0.6336669921875,
                  -0.27386474609375,
                  0.9449996948242188,
                  ["25", "26", "27", "28", "29", "30"],
                ],
                [
                  0.7144775390625,
                  -0.272186279296875,
                  0.9449996948242188,
                  ["28", "29", "30", "31", "32", "33"],
                ],
                [
                  0.7935791015625,
                  -0.272918701171875,
                  0.9449996948242188,
                  ["31", "32", "33", "34", "35", "36"],
                ],
                [
                  0.0643310546875,
                  -0.304718017578125,
                  0.9449996948242188,
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                  ],
                ],
                [
                  0.392822265625,
                  -0.304779052734375,
                  0.9449996948242188,
                  [
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24",
                  ],
                ],
                [
                  0.712158203125,
                  -0.30303955078125,
                  0.9449996948242188,
                  [
                    "25",
                    "26",
                    "27",
                    "28",
                    "29",
                    "30",
                    "31",
                    "32",
                    "33",
                    "34",
                    "35",
                    "36",
                  ],
                ],
                [
                  0.9222412109375,
                  -0.185882568359375,
                  0.9449996948242188,
                  [
                    "1",
                    "4",
                    "7",
                    "10",
                    "13",
                    "16",
                    "19",
                    "22",
                    "25",
                    "28",
                    "31",
                    "34",
                  ],
                ],
                [
                  0.9229736328125,
                  -0.0181884765625,
                  0.9449996948242188,
                  [
                    "2",
                    "5",
                    "8",
                    "11",
                    "14",
                    "17",
                    "20",
                    "23",
                    "26",
                    "29",
                    "32",
                    "35",
                  ],
                ],
                [
                  0.9248046875,
                  0.14849853515625,
                  0.9449996948242188,
                  [
                    "3",
                    "6",
                    "9",
                    "12",
                    "15",
                    "18",
                    "21",
                    "24",
                    "27",
                    "30",
                    "33",
                    "36",
                  ],
                ],
                [
                  -0.011474609375,
                  -0.378875732421875,
                  0.9449996948242188,
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                  ],
                ],
                [
                  0.142822265625,
                  -0.375732421875,
                  0.9449996948242188,
                  [
                    "2",
                    "4",
                    "6",
                    "8",
                    "10",
                    "12",
                    "14",
                    "16",
                    "18",
                    "20",
                    "22",
                    "24",
                    "26",
                    "28",
                    "30",
                    "32",
                    "34",
                    "36",
                  ],
                ],
                [
                  0.308349609375,
                  -0.37542724609375,
                  0.9449996948242188,
                  [
                    "1",
                    "3",
                    "5",
                    "7",
                    "9",
                    "12",
                    "14",
                    "16",
                    "18",
                    "19",
                    "21",
                    "23",
                    "25",
                    "27",
                    "30",
                    "32",
                    "34",
                    "36",
                  ],
                ],
                [
                  0.4713134765625,
                  -0.376861572265625,
                  0.9449996948242188,
                  [
                    "2",
                    "4",
                    "6",
                    "8",
                    "10",
                    "11",
                    "13",
                    "15",
                    "17",
                    "20",
                    "22",
                    "24",
                    "26",
                    "28",
                    "29",
                    "31",
                    "33",
                    "35",
                  ],
                ],
                [
                  0.6341552734375,
                  -0.376495361328125,
                  0.9449996948242188,
                  [
                    "1",
                    "3",
                    "5",
                    "7",
                    "9",
                    "11",
                    "13",
                    "15",
                    "17",
                    "19",
                    "21",
                    "23",
                    "25",
                    "27",
                    "29",
                    "31",
                    "33",
                    "35",
                  ],
                ],
                [
                  0.7926025390625,
                  -0.382232666015625,
                  0.9449996948242188,
                  [
                    "19",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24",
                    "25",
                    "26",
                    "27",
                    "28",
                    "29",
                    "30",
                    "31",
                    "32",
                    "33",
                    "34",
                    "35",
                    "36",
                  ],
                ],
              ],
              v = {
                0: [-0.137451171875, -0.146942138671875, 0.9449996948242188],
                "00": [-0.1387939453125, 0.10546875, 0.9449996948242188],
                1: [-0.0560302734375, -0.1898193359375, 0.9449996948242188],
                2: [-0.0567626953125, -0.024017333984375, 0.9449996948242188],
                3: [-0.056884765625, 0.141632080078125, 0.9449996948242188],
                4: [0.02392578125, -0.187347412109375, 0.9449996948242188],
                5: [0.0240478515625, -0.02471923828125, 0.9449996948242188],
                6: [0.02392578125, 0.1422119140625, 0.9449996948242188],
                7: [0.1038818359375, -0.18902587890625, 0.9449996948242188],
                8: [0.1044921875, -0.023834228515625, 0.9449996948242188],
                9: [0.10546875, 0.1419677734375, 0.9449996948242188],
                10: [0.18701171875, -0.188385009765625, 0.9449996948242188],
                11: [0.18603515625, -0.0238037109375, 0.9449996948242188],
                12: [0.1851806640625, 0.143157958984375, 0.9449996948242188],
                13: [0.2677001953125, -0.18780517578125, 0.9449996948242188],
                14: [0.26806640625, -0.02301025390625, 0.9449996948242188],
                15: [0.26611328125, 0.143310546875, 0.9449996948242188],
                16: [0.3497314453125, -0.18829345703125, 0.9449996948242188],
                17: [0.349609375, -0.023101806640625, 0.9449996948242188],
                18: [0.3497314453125, 0.142242431640625, 0.9449996948242188],
                19: [0.4307861328125, -0.18829345703125, 0.9449996948242188],
                20: [0.4312744140625, -0.02392578125, 0.9449996948242188],
                21: [0.431884765625, 0.1416015625, 0.9449996948242188],
                22: [0.51220703125, -0.188873291015625, 0.9449996948242188],
                23: [0.5123291015625, -0.023773193359375, 0.9449996948242188],
                24: [0.511962890625, 0.14215087890625, 0.9449996948242188],
                25: [0.5931396484375, -0.18890380859375, 0.9449996948242188],
                26: [0.59375, -0.023651123046875, 0.9449996948242188],
                27: [0.59375, 0.14080810546875, 0.9449996948242188],
                28: [0.67529296875, -0.189849853515625, 0.9449996948242188],
                29: [0.6751708984375, -0.02337646484375, 0.9449996948242188],
                30: [0.674560546875, 0.141845703125, 0.9449996948242188],
                31: [0.756591796875, -0.18798828125, 0.9449996948242188],
                32: [0.7547607421875, -0.0234375, 0.9449996948242188],
                33: [0.7554931640625, 0.14263916015625, 0.9449996948242188],
                34: [0.836669921875, -0.188323974609375, 0.9449996948242188],
                35: [0.8365478515625, -0.0244140625, 0.9449996948242188],
                36: [0.8359375, 0.14276123046875, 0.9449996948242188],
              },
              f = [
                "Angel and the Knight",
                "Impotent RAGE",
                "Republican Space Rangers",
                "Fame or Shame",
                "Deity of the Sun",
                "Twilight Knife",
                "Diamond Miner",
                "Evacuator",
              ],
              w = [
                {
                  type: 1,
                  x: 1135.1024169921875,
                  y: 256.709716796875,
                  z: -52.03075408935547,
                  rz: 101.998046875,
                },
                {
                  type: 1,
                  x: 1120.8575439453125,
                  y: 233.18858337402344,
                  z: -50.84077453613281,
                  rz: -104.99775695800781,
                },
                {
                  type: 1,
                  x: 1108.9188232421875,
                  y: 239.50234985351562,
                  z: -50.84078598022461,
                  rz: -44.99958038330078,
                },
                {
                  type: 1,
                  x: 1105.031982421875,
                  y: 230.81637573242188,
                  z: -50.84077072143555,
                  rz: -177.001220703125,
                },
                {
                  type: 1,
                  x: 1114.0848388671875,
                  y: 235.03343200683594,
                  z: -50.84077453613281,
                  rz: -179.00137329101562,
                },
                {
                  type: 2,
                  x: 1134.7552490234375,
                  y: 255.9905242919922,
                  z: -52.03075408935547,
                  rz: 30.999441146850586,
                },
                {
                  type: 2,
                  x: 1132.4876708984375,
                  y: 247.59466552734375,
                  z: -52.03075408935547,
                  rz: 88.49937438964844,
                },
                {
                  type: 2,
                  x: 1109.5211181640625,
                  y: 239.04225158691406,
                  z: -50.84078598022461,
                  rz: -29.499794006347656,
                },
                {
                  type: 2,
                  x: 1105.7384033203125,
                  y: 230.33175659179688,
                  z: -50.84077072143555,
                  rz: 107.99896240234375,
                },
                {
                  type: 2,
                  x: 1120.756103515625,
                  y: 232.42312622070312,
                  z: -50.84077453613281,
                  rz: -90.49939727783203,
                },
                {
                  type: 2,
                  x: 1114.8876953125,
                  y: 234.52394104003906,
                  z: -50.84077453613281,
                  rz: 108.99903869628906,
                },
                {
                  type: 3,
                  x: 1133.948974609375,
                  y: 256.10711669921875,
                  z: -52.0307502746582,
                  rz: -46.99979782104492,
                },
                {
                  type: 3,
                  x: 1132.41357421875,
                  y: 248.33412170410156,
                  z: -52.03075408935547,
                  rz: 105.99855041503906,
                },
                {
                  type: 3,
                  x: 1105.5439453125,
                  y: 229.40882873535156,
                  z: -50.84077072143555,
                  rz: 38.49977111816406,
                },
                {
                  type: 3,
                  x: 1110.232666015625,
                  y: 238.7513427734375,
                  z: -50.84078598022461,
                  rz: -12.999954223632812,
                },
                {
                  type: 3,
                  x: 1114.5487060546875,
                  y: 233.68020629882812,
                  z: -50.84077453613281,
                  rz: 33.99979019165039,
                },
                {
                  type: 3,
                  x: 1120.85302734375,
                  y: 231.6873779296875,
                  z: -50.84077072143555,
                  rz: -73.99937438964844,
                },
                {
                  type: 4,
                  x: 1139.37109375,
                  y: 252.4561767578125,
                  z: -52.03075408935547,
                  rz: 97.49907684326172,
                },
                {
                  type: 4,
                  x: 1132.109130859375,
                  y: 249.05078125,
                  z: -52.03075408935547,
                  rz: 118.9986801147461,
                },
                {
                  type: 4,
                  x: 1133.8514404296875,
                  y: 256.8948669433594,
                  z: -52.0307502746582,
                  rz: -115.99858856201172,
                },
                {
                  type: 4,
                  x: 1110.988037109375,
                  y: 238.6630401611328,
                  z: -50.84078598022461,
                  rz: 0,
                },
                {
                  type: 4,
                  x: 1100.46630859375,
                  y: 230.39248657226562,
                  z: -50.84077072143555,
                  rz: 44.49960708618164,
                },
                {
                  type: 4,
                  x: 1104.66650390625,
                  y: 229.47808837890625,
                  z: -50.84077453613281,
                  rz: -30.99989128112793,
                },
                {
                  type: 4,
                  x: 1108.446533203125,
                  y: 235.39356994628906,
                  z: -50.84077453613281,
                  rz: -179.0015106201172,
                },
                {
                  type: 4,
                  x: 1113.65576171875,
                  y: 233.69044494628906,
                  z: -50.84077453613281,
                  rz: -34.49992752075195,
                },
                {
                  type: 4,
                  x: 1117.1199951171875,
                  y: 230.25537109375,
                  z: -50.84077453613281,
                  rz: -176.5015106201172,
                },
                {
                  type: 4,
                  x: 1121.1380615234375,
                  y: 230.99908447265625,
                  z: -50.84077453613281,
                  rz: -58.999629974365234,
                },
                {
                  type: 5,
                  x: 1134.55615234375,
                  y: 257.2640075683594,
                  z: -52.03075408935547,
                  rz: 170.9969940185547,
                },
                {
                  type: 5,
                  x: 1138.998046875,
                  y: 251.7522430419922,
                  z: -52.03075408935547,
                  rz: 29.49958610534668,
                },
                {
                  type: 5,
                  x: 1131.660400390625,
                  y: 249.63453674316406,
                  z: -52.03075408935547,
                  rz: 135.99819946289062,
                },
                {
                  type: 5,
                  x: 1100.9368896484375,
                  y: 230.99258422851562,
                  z: -50.84077453613281,
                  rz: 59.49959945678711,
                },
                {
                  type: 5,
                  x: 1111.7265625,
                  y: 238.75173950195312,
                  z: -50.84078598022461,
                  rz: 12.99996566772461,
                },
                {
                  type: 5,
                  x: 1104.3472900390625,
                  y: 230.33616638183594,
                  z: -50.84077453613281,
                  rz: -106.99888610839844,
                },
                {
                  type: 5,
                  x: 1109.1422119140625,
                  y: 234.78053283691406,
                  z: -50.84077453613281,
                  rz: 106.9991455078125,
                },
                {
                  type: 5,
                  x: 1113.37841796875,
                  y: 234.48037719726562,
                  z: -50.84077072143555,
                  rz: -104.99906158447266,
                },
                {
                  type: 5,
                  x: 1117.8211669921875,
                  y: 229.77664184570312,
                  z: -50.84077072143555,
                  rz: 111.9986801147461,
                },
                {
                  type: 6,
                  x: 1138.1981201171875,
                  y: 251.86956787109375,
                  z: -52.03075408935547,
                  rz: -45.4997444152832,
                },
                {
                  type: 6,
                  x: 1131.0672607421875,
                  y: 250.08070373535156,
                  z: -52.03075408935547,
                  rz: 149.9978790283203,
                },
                {
                  type: 6,
                  x: 1112.40869140625,
                  y: 239.02345275878906,
                  z: -50.84078598022461,
                  rz: 30.4997615814209,
                },
                {
                  type: 6,
                  x: 1121.614501953125,
                  y: 230.38429260253906,
                  z: -50.84077453613281,
                  rz: -45.499813079833984,
                },
                {
                  type: 6,
                  x: 1117.5740966796875,
                  y: 228.9528045654297,
                  z: -50.84077072143555,
                  rz: 34.49982452392578,
                },
                {
                  type: 6,
                  x: 1108.875244140625,
                  y: 233.94735717773438,
                  z: -50.84077453613281,
                  rz: 33.99979019165039,
                },
                {
                  type: 6,
                  x: 1101.227783203125,
                  y: 231.69332885742188,
                  z: -50.84077453613281,
                  rz: 75.49949645996094,
                },
                {
                  type: 7,
                  x: 1138.080810546875,
                  y: 252.67027282714844,
                  z: -52.03075408935547,
                  rz: -118.99893951416016,
                },
                {
                  type: 7,
                  x: 1130.3834228515625,
                  y: 250.3516082763672,
                  z: -52.03075408935547,
                  rz: 165.49742126464844,
                },
                {
                  type: 7,
                  x: 1101.32080078125,
                  y: 232.4326629638672,
                  z: -50.84077453613281,
                  rz: 90.99922943115234,
                },
                {
                  type: 7,
                  x: 1108.02001953125,
                  y: 233.9359130859375,
                  z: -50.84077072143555,
                  rz: -35.499839782714844,
                },
                {
                  type: 7,
                  x: 1116.7257080078125,
                  y: 228.941162109375,
                  z: -50.84077453613281,
                  rz: -33.499881744384766,
                },
                {
                  type: 8,
                  x: 1138.8004150390625,
                  y: 253.02676391601562,
                  z: -52.03075408935547,
                  rz: 170.9975128173828,
                },
                {
                  type: 8,
                  x: 1129.5975341796875,
                  y: 250.44863891601562,
                  z: -52.03075408935547,
                  rz: 179.49769592285156,
                },
                {
                  type: 8,
                  x: 1113.0006103515625,
                  y: 239.52088928222656,
                  z: -50.840789794921875,
                  rz: 46.499603271484375,
                },
                {
                  type: 8,
                  x: 1107.7371826171875,
                  y: 234.7730712890625,
                  z: -50.84077453613281,
                  rz: -106.99908447265625,
                },
                {
                  type: 8,
                  x: 1116.4288330078125,
                  y: 229.7194061279297,
                  z: -50.84077453613281,
                  rz: -102.49913024902344,
                },
                {
                  type: 8,
                  x: 1101.1824951171875,
                  y: 233.19720458984375,
                  z: -50.84077453613281,
                  rz: -50.84077453613281,
                },
              ],
              S = [
                [-0.115, 0.047, 1.106],
                [0.005, 0.047, 1.106],
                [0.125, 0.047, 1.106],
              ];
          },
          1151: (e, t, a) => {
            "use strict";
            a.d(t, { O: () => o, A: () => i });
            const o = function (e, t) {
                return Math.abs(
                  Math.sqrt(
                    Math.pow(t.x - e.x, 2) +
                      Math.pow(t.y - e.y, 2) +
                      Math.pow(t.z - e.z, 2)
                  )
                );
              },
              i = function (e) {
                new Promise((t, a) => {
                  const o = setInterval(() => {
                    mp.game.streaming.hasAnimDictLoaded(e)
                      ? (clearInterval(o), t())
                      : mp.game.streaming.requestAnimDict(e);
                  }, 300);
                });
              };
          },
          6400: (e, t, a) => {
            a(862);
            let o = [
                {
                  id: 1,
                  name: "Sokolyansky",
                  primaryColour: 15553363,
                  secondaryColour: 5474797,
                  horseColour: 9858144,
                  maneColour: 4671302,
                  rate: "x 3",
                },
                {
                  id: 2,
                  name: "Deluxe",
                  primaryColour: 16724530,
                  secondaryColour: 3684408,
                  horseColour: 14807026,
                  maneColour: 16777215,
                  rate: "x 3",
                },
                {
                  id: 3,
                  name: "Evolad",
                  primaryColour: 13560920,
                  secondaryColour: 15582764,
                  horseColour: 16770746,
                  maneColour: 7500402,
                  rate: "x 3",
                },
                {
                  id: 4,
                  name: "Thorbjorn",
                  primaryColour: 16558591,
                  secondaryColour: 5090807,
                  horseColour: 10446437,
                  maneColour: 7493977,
                  rate: "x 3",
                },
                {
                  id: 5,
                  name: "Tommy",
                  primaryColour: 5090807,
                  secondaryColour: 16558591,
                  horseColour: 3815994,
                  maneColour: 9393493,
                  rate: "x 3",
                },
                {
                  id: 6,
                  name: "Zak",
                  primaryColour: 16269415,
                  secondaryColour: 16767010,
                  horseColour: 10329501,
                  maneColour: 16777215,
                  rate: "x 3",
                },
              ],
              i = [
                { x: 1099.582, y: 265.6582, z: -52.2409, r: 45, side: 2 },
                { x: 1098.928, y: 265.0042, z: -52.24094, r: 45, side: 1 },
                { x: 1096.506, y: 262.6327, z: -52.24094, r: 45, side: 2 },
                { x: 1095.852, y: 261.9783, z: -52.24094, r: 45, side: 1 },
                { x: 1095.127, y: 261.2535, z: -52.24094, r: 45, side: 2 },
                { x: 1094.473, y: 260.5995, z: -52.24094, r: 45, side: 1 },
                { x: 1092.098, y: 258.1739, z: -52.24094, r: 45, side: 2 },
                { x: 1091.443, y: 257.5198, z: -52.24094, r: 45, side: 1 },
                { x: 1101.915, y: 264.1026, z: -52.24094, r: 45, side: 2 },
                { x: 1101.261, y: 263.4485, z: -52.24094, r: 45, side: 1 },
                { x: 1098.451, y: 260.6878, z: -52.24094, r: 45, side: 2 },
                { x: 1097.797, y: 260.0338, z: -52.24094, r: 45, side: 1 },
                { x: 1097.072, y: 259.309, z: -52.24094, r: 45, side: 2 },
                { x: 1096.417, y: 258.6552, z: -52.24114, r: 45, side: 1 },
                { x: 1093.653, y: 255.8405, z: -52.24094, r: 45, side: 2 },
                { x: 1092.999, y: 255.1864, z: -52.24094, r: 45, side: 1 },
              ];
            const n = a.g.localplayer;
            n.freezePosition(!1);
            let s,
              r = new a.g.ScaleFormRacing("HORSE_RACING_WALL"),
              l = !1;
            for (let e = 0; e < i.length; e++)
              mp.colshapes.newSphere(
                i[e].x,
                i[e].y,
                i[e].z,
                1.2
              ).slotHoursRacing = e;
            a.g.horsesplaying = !1;
            class m {
              constructor() {
                (this.timeRacing = 15e3),
                  (this.countdown = 5),
                  this.renderEvent,
                  (this.camera = null),
                  this.timer,
                  (this.bets = []),
                  (this.gamertags = []),
                  (this.inGame = !0);
              }
              static showHourseScreen(e, t, a) {
                try {
                  (this.gamertags = e), (this.bets = a);
                  for (let o = 0; o < e.length; o++)
                    mp.game.graphics.pushScaleformMovieFunction(
                      r._handle,
                      "ADD_PLAYER"
                    ),
                      mp.game.invoke("0x77FE3402004CD1B0", e[o]),
                      mp.game.graphics.pushScaleformMovieFunctionParameterInt(
                        parseInt(t)
                      ),
                      mp.game.graphics.pushScaleformMovieFunctionParameterInt(
                        parseInt(a[o])
                      ),
                      mp.game.graphics.popScaleformMovieFunctionVoid();
                  r.callFunction("SHOW_SCREEN", 0),
                    r.callFunction("SET_DETAIL_HORSE", t),
                    r.callFunction("SHOW_SCREEN", 1);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "horses/index",
                    "showHourseScreen",
                    e.toString()
                  );
                }
              }
              static clearAllPlayers() {
                r.callFunction("CLEAR_ALL_PLAYERS");
              }
              static setCountdown(e) {
                r.callFunction("SET_COUNTDOWN", e), (this.countdown = e);
              }
              static setHour(e, t, a, o, i, n, s) {
                r.callFunction("SET_HORSE", e, t, a, o, i, n, s);
              }
              static playSound(e) {
                try {
                  let t = mp.game.invoke("0x430386FE9BF80B45");
                  mp.game.audio.stopSound(t),
                    mp.game.audio.releaseSoundId(t),
                    mp.game.audio.playSoundFromCoord(
                      t,
                      e,
                      1093.907,
                      263.1436,
                      -49.49115,
                      "dlc_vw_casino_inside_track_betting_main_event_sounds",
                      !1,
                      0,
                      !1
                    ),
                    mp.game.audio.isAudioSceneActive(
                      "dlc_vw_casino_inside_track_live_race"
                    ) &&
                      mp.game.audio.stopAudioScene(
                        "dlc_vw_casino_inside_track_live_race"
                      );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "horses/index",
                    "playSound",
                    e.toString()
                  );
                }
              }
              static showHorseResults(e, t) {
                try {
                  (e = JSON.parse(e)), (t = JSON.parse(t));
                  for (let a = 0; a < e.length; a++)
                    r.callFunction("SET_PLAYER_RESULT", e[a], t[a]),
                      mp.game.invoke("0x77FE3402004CD1B0", e[a]),
                      mp.game.graphics.pushScaleformMovieFunctionParameterInt(
                        parseInt(t[a])
                      ),
                      mp.game.graphics.popScaleformMovieFunctionVoid();
                  r.callFunction("SHOW_SCREEN", 4);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "horses/index",
                    "showHorseResults",
                    e.toString()
                  );
                }
              }
              static startHorseRacing(
                e = 1,
                t = 0,
                a = 1,
                o = 2,
                i = 3,
                n = 4,
                s = 6,
                l = !0
              ) {
                try {
                  (this.inGame = !0),
                    r.callFunction(
                      "START_RACE",
                      15e3,
                      e,
                      t,
                      a,
                      o,
                      i,
                      n,
                      s,
                      1,
                      l
                    ),
                    mp.game.graphics.popScaleformMovieFunctionVoid(),
                    this.playSound("race_loop"),
                    setTimeout(
                      function () {
                        this.playSound("race_finish");
                      }.bind(this),
                      14e3
                    );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "horses/index",
                    "startHorseRacing",
                    e.toString()
                  );
                }
              }
            }
            r.callFunction("SHOW_SCREEN", 5),
              mp.events.add({
                playerEnterColshape: (e) => {
                  try {
                    void 0 !== e.slotHoursRacing &&
                      0 == a.g.horsesplaying &&
                      null == s &&
                      ((s = e.slotHoursRacing),
                      mp.game.audio.playSound(
                        -1,
                        "BACK",
                        "HUD_AMMO_SHOP_SOUNDSET",
                        !0,
                        0,
                        !0
                      ),
                      mp.game.graphics.notify("~g~E~s~ сесть за стол"));
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "horses/index",
                      "playerEnterColshape",
                      e.toString()
                    );
                  }
                },
                render: () => {
                  try {
                    if (!a.g.loggedin) return;
                    l ||
                    275201 !=
                      Natives.GET_INTERIOR_FROM_ENTITY(a.g.localplayer.handle)
                      ? l &&
                        275201 ==
                          Natives.GET_INTERIOR_FROM_ENTITY(
                            a.g.localplayer.handle
                          ) &&
                        r &&
                        r.isLoaded &&
                        r.renderTarget(
                          "casinoscreen_02",
                          "vw_vwint01_betting_screen",
                          0.5,
                          0.5,
                          1.001,
                          1.001
                        )
                      : ((l = !0),
                        mp.game.graphics.hasStreamedTextureDictLoaded(
                          "Prop_Screen_VW_InsideTrack"
                        ) ||
                          mp.game.graphics.requestStreamedTextureDict(
                            "Prop_Screen_VW_InsideTrack",
                            !1
                          ),
                        r
                          .callbackLoad()
                          .then(() => {
                            mp.game.invoke("0xE6A9F00D4240B519", r._handle, !0),
                              o.forEach((e) => {
                                m.setHour(
                                  e.id,
                                  e.name,
                                  e.rate,
                                  e.primaryColour,
                                  e.secondaryColour,
                                  e.horseColour,
                                  e.maneColour
                                );
                              });
                          })
                          .catch((e) => {
                            mp.game.graphics.notify(e);
                          }));
                  } catch (e) {
                    if (
                      new Date().getTime() - a.g.trycatchtime["horses/index"] <
                      6e4
                    )
                      return;
                    (a.g.trycatchtime["horses/index"] = new Date().getTime()),
                      mp.events.callRemote(
                        "client_trycatch",
                        "horses/index",
                        "render",
                        e.toString()
                      );
                  }
                },
                playerExitColshape: (e) => {
                  try {
                    void 0 !== e.slotHoursRacing && (s = void 0);
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "horses/index",
                      "playerExitColshape",
                      e.toString()
                    );
                  }
                },
                "client.horse.SLOT": async (e) => {
                  try {
                    if (
                      275201 !==
                      Natives.GET_INTERIOR_FROM_ENTITY(a.g.localplayer.handle)
                    )
                      return;
                    (m.inGame = e),
                      (a.g.horsesplaying = !0),
                      (s = void 0),
                      n.freezePosition(!0),
                      mp.gui.emmit('window.router.setView("CasinoHorse");'),
                      mp.discord.update(
                        "Делает ставку на лошадь",
                        `на RedAge под ID ${a.g.localplayer.remoteId}`
                      ),
                      a.g.menuOpen();
                    const t = mp.game.object.getObjectOffsetFromCoords(
                        1098.337,
                        258.476,
                        -50.12178,
                        45,
                        0,
                        -0.87,
                        1
                      ),
                      o = mp.game.object.getObjectOffsetFromCoords(
                        1098.337,
                        258.476,
                        -50.12178,
                        45,
                        0,
                        -0.87,
                        1
                      );
                    (m.camera = mp.cameras.new(
                      "default",
                      new mp.Vector3(t.x, t.y, t.z),
                      new mp.Vector3(0, 0, 45),
                      50
                    )),
                      m.camera.pointAtCoord(o.x, o.y, o.z),
                      m.camera.setActive(!0),
                      mp.game.cam.renderScriptCams(!0, !1, 2e3, !0, !1);
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "horses/index",
                      "client.horse.SLOT",
                      e.toString()
                    );
                  }
                },
                "client.horse.START_TIMER": (e) => {
                  try {
                    if (
                      275201 !==
                      Natives.GET_INTERIOR_FROM_ENTITY(a.g.localplayer.handle)
                    )
                      return;
                    m.setCountdown(e),
                      (m.timer = setInterval(() => {
                        m.countdown > 0
                          ? m.setCountdown(m.countdown - 1)
                          : clearInterval(m.timer);
                      }, 1e3));
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "horses/index",
                      "client.horse.START_TIMER",
                      e.toString()
                    );
                  }
                },
                "client.horse.START_RACING": (
                  e = 1,
                  t = 0,
                  o = 1,
                  i = 2,
                  n = 3,
                  s = 4,
                  r = 5
                ) => {
                  try {
                    if (
                      275201 !==
                      Natives.GET_INTERIOR_FROM_ENTITY(a.g.localplayer.handle)
                    )
                      return;
                    0 != a.g.horsesplaying &&
                      mp.gui.emmit(
                        'window.events.callEvent("cef.horse.isBtn", 0)'
                      ),
                      m.startHorseRacing(e, t, o, i, n, s, r);
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "horses/index",
                      "client.horse.START_RACING",
                      e.toString()
                    );
                  }
                },
                "client.horse.SHOW_RESULTS": (e, t) => {
                  try {
                    if (
                      275201 !==
                      Natives.GET_INTERIOR_FROM_ENTITY(a.g.localplayer.handle)
                    )
                      return;
                    0 != a.g.horsesplaying &&
                      mp.gui.emmit(
                        'window.events.callEvent("cef.horse.isBtn", 1)'
                      ),
                      m.showHorseResults(e, t);
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "horses/index",
                      "client.horse.SHOW_RESULTS",
                      e.toString()
                    );
                  }
                },
                "client.horse.SHOW_HORSE": (e, t, o) => {
                  try {
                    if (
                      275201 !==
                      Natives.GET_INTERIOR_FROM_ENTITY(a.g.localplayer.handle)
                    )
                      return;
                    if (m.inGame) return;
                    m.clearAllPlayers(),
                      m.showHourseScreen(JSON.parse(e), t, JSON.parse(o));
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "horses/index",
                      "client.horse.SHOW_HORSE",
                      e.toString()
                    );
                  }
                },
                "client.horse.GET_HORSE": (e) => {
                  try {
                    if (
                      275201 !==
                      Natives.GET_INTERIOR_FROM_ENTITY(a.g.localplayer.handle)
                    )
                      return;
                    if (m.inGame) return;
                    r.callFunction("SHOW_SCREEN", 0),
                      r.callFunction("SET_DETAIL_HORSE", e),
                      r.callFunction("SHOW_SCREEN", 1);
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "horses/index",
                      "client.horse.GET_HORSE",
                      e.toString()
                    );
                  }
                },
                "client.horse.setBet": (e, t) => {
                  try {
                    if (
                      275201 !==
                      Natives.GET_INTERIOR_FROM_ENTITY(a.g.localplayer.handle)
                    )
                      return;
                    if (0 == a.g.horsesplaying) return;
                    if (m.inGame) return;
                    mp.events.callRemote("server.horse.setBet", e, t);
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "horses/index",
                      "client.horse.setBet",
                      e.toString()
                    );
                  }
                },
                "client.horse.COUNTDOWN_SCREEN": () => {
                  try {
                    if (
                      275201 !==
                      Natives.GET_INTERIOR_FROM_ENTITY(a.g.localplayer.handle)
                    )
                      return;
                    m.clearAllPlayers(),
                      o.forEach((e, t) => {
                        m.setHour(
                          e.id,
                          e.name,
                          "x 3",
                          e.primaryColour,
                          e.secondaryColour,
                          e.horseColour,
                          e.maneColour
                        );
                      }),
                      r.callFunction("SHOW_SCREEN", 0),
                      (m.inGame = !1);
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "horses/index",
                      "client.horse.COUNTDOWN_SCREEN",
                      e.toString()
                    );
                  }
                },
                "client.horse.TEARS_SLOT": () => {
                  try {
                    if (
                      275201 !==
                      Natives.GET_INTERIOR_FROM_ENTITY(a.g.localplayer.handle)
                    )
                      return;
                    if (0 == a.g.horsesplaying) return;
                    (a.g.horsesplaying = !1),
                      n.freezePosition(!1),
                      a.g.menuClose(),
                      mp.gui.emmit("window.router.setHud();"),
                      null !== m.camera &&
                        (m.camera.destroy(),
                        (m.camera = null),
                        mp.game.cam.renderScriptCams(!1, !1, 3e3, !0, !0));
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "horses/index",
                      "client.horse.TEARS_SLOT",
                      e.toString()
                    );
                  }
                },
                "client.horse.exit": () => {
                  a.g.binderFunctions.horseExit();
                },
              }),
              mp.keys.bind(69, !0, function () {
                if (a.g.localplayer.isDead() || mp.gui.cursor.visible)
                  return !1;
                null != s
                  ? mp.events.callRemote("server.horse.SIT_SLOT")
                  : a.g.binderFunctions.horseExit();
              }),
              (a.g.binderFunctions.horseExit = () => {
                1 == a.g.horsesplaying &&
                  mp.events.callRemote("server.horse.TEARS_SLOT");
              });
          },
          862: (e, t, a) => {
            (a.g.ScaleFormRacing = class {
              constructor(e) {
                (this._handle = mp.game.graphics.requestScaleformMovie(e)),
                  (this.queueCallFunction = new Map()),
                  (this.renderTargetId = void 0);
              }
              get isLoaded() {
                try {
                  return mp.game.graphics.hasScaleformMovieLoaded(this._handle);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "horses/scaleform",
                    "isLoaded",
                    e.toString()
                  );
                }
              }
              get isValid() {
                return 0 !== this._handle;
              }
              get handle() {
                return this._handle;
              }
              callbackLoad() {
                return new Promise(
                  function (e, t) {
                    let a = 0;
                    const o = setInterval(() => {
                      if (a > 100)
                        return e("Ошибка загрузки"), void clearInterval(o);
                      this.isValid &&
                        this.isLoaded &&
                        (clearInterval(o), a++, e());
                    }, 10);
                  }.bind(this)
                );
              }
              callFunction(e, ...t) {
                try {
                  if (this.isLoaded && this.isValid) {
                    const a = mp.game.graphics;
                    a.pushScaleformMovieFunction(this._handle, e),
                      t.forEach((e) => {
                        switch (typeof e) {
                          case "string":
                            a.pushScaleformMovieFunctionParameterString(e);
                            break;
                          case "boolean":
                            a.pushScaleformMovieFunctionParameterBool(e);
                            break;
                          case "number":
                            Number(e) === e && e % 1 != 0
                              ? a.pushScaleformMovieFunctionParameterFloat(e)
                              : a.pushScaleformMovieFunctionParameterInt(e);
                        }
                      }),
                      a.popScaleformMovieFunctionVoid();
                  } else this.queueCallFunction.set(e, t);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "horses/scaleform",
                    "callFunction",
                    e.toString()
                  );
                }
              }
              onUpdate() {
                try {
                  this.isLoaded &&
                    this.isValid &&
                    this.queueCallFunction.forEach((e, t) => {
                      this.callFunction(t, ...e),
                        this.queueCallFunction.delete(t);
                    });
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "horses/scaleform",
                    "onUpdate",
                    e.toString()
                  );
                }
              }
              renderFullscreen() {
                try {
                  this.onUpdate(),
                    this.isLoaded &&
                      this.isValid &&
                      mp.game.graphics.drawScaleformMovieFullscreen(
                        this._handle,
                        255,
                        255,
                        255,
                        255,
                        !1
                      );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "horses/scaleform",
                    "renderFullscreen",
                    e.toString()
                  );
                }
              }
              render2D(e, t, a, o) {
                try {
                  this.onUpdate(),
                    this.isLoaded &&
                      this.isValid &&
                      (void 0 !== e &&
                      void 0 !== t &&
                      void 0 !== a &&
                      void 0 !== o
                        ? mp.game.graphics.drawScaleformMovie(
                            this._handle,
                            e,
                            t,
                            a,
                            o,
                            255,
                            255,
                            255,
                            255,
                            0
                          )
                        : mp.game.graphics.drawScaleformMovieFullscreen(
                            this._handle,
                            255,
                            255,
                            255,
                            255,
                            !1
                          ));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "horses/scaleform",
                    "render2D",
                    e.toString()
                  );
                }
              }
              render3D(e, t, a) {
                try {
                  this.onUpdate(),
                    this.isLoaded &&
                      this.isValid &&
                      mp.game.graphics.drawScaleformMovie3dNonAdditive(
                        this._handle,
                        e.x,
                        e.y,
                        e.z,
                        t.x,
                        t.y,
                        t.z,
                        2,
                        2,
                        1,
                        a.x,
                        a.y,
                        a.z,
                        2
                      );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "horses/scaleform",
                    "render3D",
                    e.toString()
                  );
                }
              }
              render3DAdditive(e, t, a) {
                try {
                  this.onUpdate(),
                    this.isLoaded &&
                      this.isValid &&
                      mp.game.graphics.drawScaleformMovie3d(
                        this._handle,
                        e.x,
                        e.y,
                        e.z,
                        t.x,
                        t.y,
                        t.z,
                        2,
                        2,
                        1,
                        a.x,
                        a.y,
                        a.z,
                        2
                      );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "horses/scaleform",
                    "render3DAdditive",
                    e.toString()
                  );
                }
              }
              createRenderTarget(e, t) {
                try {
                  return (
                    mp.game.ui.isNamedRendertargetRegistered(e) ||
                      mp.game.ui.registerNamedRendertarget(e, !1),
                    mp.game.ui.isNamedRendertargetLinked(mp.game.joaat(t)) ||
                      mp.game.ui.linkNamedRendertarget(mp.game.joaat(t)),
                    mp.game.ui.isNamedRendertargetRegistered(e)
                      ? mp.game.ui.getNamedRendertargetRenderId(e)
                      : -1
                  );
                } catch (e) {
                  return (
                    mp.events.callRemote(
                      "client_trycatch",
                      "horses/scaleform",
                      "createRenderTarget",
                      e.toString()
                    ),
                    -1
                  );
                }
              }
              renderTarget(e, t, a, o, i, n) {
                try {
                  if ((this.onUpdate(), this.isLoaded && this.isValid)) {
                    if (
                      (this.renderTargetId ||
                        (this.renderTargetId = this.createRenderTarget(e, t)),
                      -1 == this.renderTargetId)
                    )
                      return mp.gui.chat.push(
                        "Could not create render target."
                      );
                    mp.game.ui.setTextRenderId(this.renderTargetId),
                      mp.game.graphics.set2dLayer(4),
                      mp.game.graphics.drawScaleformMovie(
                        this._handle,
                        a,
                        o,
                        i,
                        n,
                        255,
                        255,
                        255,
                        255,
                        0
                      ),
                      mp.game.ui.setTextRenderId(1);
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "horses/scaleform",
                    "renderTarget",
                    e.toString()
                  );
                }
              }
              dispose() {
                mp.game.graphics.setScaleformMovieAsNoLongerNeeded(
                  this._handle
                );
              }
            }),
              (a.g.requestScaleformMovie = (e) =>
                new Promise(async (t, o) => {
                  try {
                    const o = mp.game.graphics.requestScaleformMovie(e);
                    if (mp.game.graphics.hasScaleformMovieLoaded(o))
                      return t(!0);
                    let i = 0;
                    for (; !mp.game.graphics.hasScaleformMovieLoaded(o); ) {
                      if (i > 5e3)
                        return t("Ошибка requestScaleformMovie. Texture: " + e);
                      i++, await a.g.wait(0);
                    }
                    return t(!0);
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "casino/horses",
                      "requestScaleformMovie",
                      e.toString()
                    ),
                      t();
                  }
                }));
          },
          1725: (e, t, a) => {
            "use strict";
            a.r(t);
            var o = a(9777),
              i = a(1151);
            (a.g.rouletteplay = !1),
              new (class {
                constructor() {
                  (this.g_rouletteData = []),
                    (this.g_rouletteBallObjectID = 87196104),
                    (this.g_rouletteBallCorrectionPosX = 0.734742),
                    (this.g_rouletteBallCorrectionPosY = 0.16617),
                    (this.g_rouletteCroupierCorrectionPosY = 0.7),
                    (this.g_rouletteCroupierCorrectionPosZ = 1),
                    (this.dimensionDiamondInterior = 0),
                    (this.casinoCamera = null),
                    (this.selectTable = null),
                    (this.nearestSeat = null),
                    (this.nearestTable = null),
                    (this.rouletteBetObject = null),
                    (this.betState = !0),
                    (this.tableMarkers = []),
                    (this.tableBet1Vector = null),
                    (this.tableBet2Vector = null),
                    (this.tableBet3Vector = null),
                    (this.tableBetsMarkers = []),
                    (this.closestChipSpot = null),
                    (this.gameStep = 0),
                    (this.bet = 500),
                    (this.isSeat = !1),
                    this.init(),
                    mp.keys.bind(69, !0, () => {
                      this.pressKeyE();
                    }),
                    mp.keys.bind(72, !0, () => {
                      this.pressKeyH();
                    }),
                    mp.keys.bind(a.g.Keys.VK_LEFT, !0, () => {
                      try {
                        if (null == this.selectTable) return;
                        if (!this.betState) return;
                        this.bet = Math.round(this.bet / 2);
                        const e =
                          "vw_prop_casino_roulette_01" ==
                          o.Py[this.selectTable][0]
                            ? 50
                            : 7500;
                        e > this.bet && (this.bet = e),
                          mp.gui.emmit(
                            `window.events.callEvent("cef.roullete.bet", ${this.bet})`
                          );
                      } catch (e) {
                        mp.events.callRemote(
                          "client_trycatch",
                          "casino/roulette",
                          "VK_LEFT",
                          e.toString()
                        );
                      }
                    }),
                    mp.keys.bind(a.g.Keys.VK_RIGHT, !0, () => {
                      try {
                        if (null == this.selectTable) return;
                        if (!this.betState) return;
                        this.bet *= 2;
                        const e =
                          "vw_prop_casino_roulette_01" ==
                          o.Py[this.selectTable][0]
                            ? 25e3
                            : 1e5;
                        e < this.bet && (this.bet = e),
                          mp.gui.emmit(
                            `window.events.callEvent("cef.roullete.bet", ${this.bet})`
                          );
                      } catch (e) {
                        mp.events.callRemote(
                          "client_trycatch",
                          "casino/roulette",
                          "VK_RIGHT",
                          e.toString()
                        );
                      }
                    }),
                    mp.events.add("client.roullete.TOGGLE_BET", (e) => {
                      try {
                        if (null == this.selectTable) return;
                        (this.betState = !0),
                          e > 0 &&
                            mp.gui.emmit(
                              `window.events.callEvent("cef.roullete.betWin", ${e})`
                            ),
                          this.g_rouletteData[this.selectTable] &&
                            this.g_rouletteData[this.selectTable].ball &&
                            mp.objects.exists(
                              this.g_rouletteData[this.selectTable].ball
                            ) &&
                            this.g_rouletteData[
                              this.selectTable
                            ].ball.destroy();
                      } catch (e) {
                        mp.events.callRemote(
                          "client_trycatch",
                          "casino/roulette",
                          "client.roullete.TOGGLE_BET",
                          e.toString()
                        );
                      }
                    }),
                    mp.events.add("client.roullete.START_GAME", (e) => {
                      try {
                        if (
                          null == this.selectTable ||
                          !this.g_rouletteData[this.selectTable] ||
                          !this.g_rouletteData[this.selectTable].croupier
                        )
                          return;
                        (this.betState = !1),
                          mp.gui.emmit(
                            'window.events.callEvent("cef.roullete.time", 0)'
                          ),
                          (a.g.rouletteplay = !0);
                        const t =
                          this.g_rouletteData[this.selectTable].croupier
                            .model == mp.game.joaat("S_M_Y_Casino_01")
                            ? "anim_casino_b@amb@casino@games@roulette@dealer"
                            : "anim_casino_b@amb@casino@games@roulette@dealer_female";
                        this.g_rouletteData[
                          this.selectTable
                        ].croupier.taskPlayAnim(
                          t,
                          "no_more_bets",
                          8,
                          1,
                          -1,
                          1,
                          0,
                          !1,
                          !1,
                          !1
                        ),
                          setTimeout(() => {
                            this.g_rouletteData[
                              this.selectTable
                            ].croupier.taskPlayAnim(
                              t,
                              "idle",
                              8,
                              1,
                              -1,
                              1,
                              0,
                              !1,
                              !1,
                              !1
                            );
                          }, 4e3),
                          setTimeout(() => {
                            this.startRouletteWheel(e);
                          }, 5e3);
                      } catch (e) {
                        mp.events.callRemote(
                          "client_trycatch",
                          "casino/roulette",
                          "client.roullete.START_GAME",
                          e.toString()
                        );
                      }
                    }),
                    mp.events.add(
                      "client.roullete.CHARACTER_OCCUPY_PLACE",
                      async (e, t, i) => {
                        try {
                          (this.selectTable = e),
                            (this.betState = i),
                            (this.isSeat = !1),
                            this.clearMyBetsTableMarkers(),
                            this.g_rouletteData[e].table.setCollision(!1, !1),
                            (a.g.localplayer.position = new mp.Vector3(
                              o.Py[e][1] + o.tl[t][0],
                              o.Py[e][2] + o.tl[t][1],
                              o.Py[e][3] + o.tl[t][2]
                            )),
                            a.g.localplayer.setHeading(o.tl[t][3]),
                            await a.g.wait(4e3),
                            (a.g.rouletteplay = !1),
                            mp.discord.update(
                              "Играет в рулетку",
                              `на RedAge под ID ${a.g.localplayer.remoteId}`
                            ),
                            mp.gui.emmit(
                              `window.router.setView("CasinoRoullete", ${this.bet});`
                            ),
                            (a.g.menuOpened = !0),
                            (this.isSeat = !0);
                        } catch (e) {
                          mp.events.callRemote(
                            "client_trycatch",
                            "casino/roulette",
                            "client.roullete.CHARACTER_OCCUPY_PLACE",
                            e.toString()
                          );
                        }
                      }
                    ),
                    mp.events.add(
                      "client.roullete.CHARACTER_LEAVE_PLACE",
                      () => {
                        try {
                          mp.gui.emmit("window.router.setHud();"),
                            a.g.menuClose(),
                            this.isCreateCroupierAndTable() &&
                              this.g_rouletteData[
                                this.selectTable
                              ].table.setCollision(!0, !1),
                            this.clearCamera(),
                            this.clearBetObject(),
                            this.clearTableMarkers(),
                            this.clearMyBetsTableMarkers(),
                            (this.selectTable = null),
                            (this.isSeat = !1);
                        } catch (e) {
                          mp.events.callRemote(
                            "client_trycatch",
                            "casino/roulette",
                            "client.roullete.CHARACTER_LEAVE_PLACE",
                            e.toString()
                          );
                        }
                      }
                    ),
                    mp.events.add("client.roullete.timer", (e) => {
                      try {
                        mp.gui.emmit(
                          `window.events.callEvent("cef.roullete.time", ${e})`
                        );
                      } catch (e) {
                        mp.events.callRemote(
                          "client_trycatch",
                          "casino/roulette",
                          "client.roullete.timer",
                          e.toString()
                        );
                      }
                    }),
                    mp.events.add("render", () => {
                      try {
                        if (!a.g.loggedin) return;
                        this.renderRoulette();
                      } catch (e) {
                        if (
                          new Date().getTime() -
                            a.g.trycatchtime["casino/roulette"] <
                          6e4
                        )
                          return;
                        (a.g.trycatchtime["casino/roulette"] =
                          new Date().getTime()),
                          mp.events.callRemote(
                            "client_trycatch",
                            "casino/roulette",
                            "render",
                            e.toString()
                          );
                      }
                    }),
                    mp.events.add("pedStreamIn", (e) => {
                      try {
                        this.onEntityStreamIn(e);
                      } catch (e) {
                        mp.events.callRemote(
                          "client_trycatch",
                          "casino/roulette",
                          "pedStreamIn",
                          e.toString()
                        );
                      }
                    }),
                    mp.events.add("playerEnterColshape", (e) => {
                      try {
                        this.onPlayerEnterColshape(e);
                      } catch (e) {
                        mp.events.callRemote(
                          "client_trycatch",
                          "casino/roulette",
                          "playerEnterColshape",
                          e.toString()
                        );
                      }
                    }),
                    mp.events.add("playerExitColshape", (e) => {
                      try {
                        this.onPlayerExitColshape(e);
                      } catch (e) {
                        mp.events.callRemote(
                          "client_trycatch",
                          "casino/roulette",
                          "playerExitColshape",
                          e.toString()
                        );
                      }
                    }),
                    mp.events.add("playerDeath", (e) => {
                      try {
                        if (!a.g.loggedin) return;
                        this.onPlayerDeath(e);
                      } catch (e) {
                        mp.events.callRemote(
                          "client_trycatch",
                          "casino/roulette",
                          "playerDeath",
                          e.toString()
                        );
                      }
                    }),
                    (a.g.binderFunctions.rouletteExit = () => {
                      try {
                        null != this.selectTable &&
                          this.isSeat &&
                          mp.events.callRemote(
                            "server.roullete.CHARACTER_LEAVE_PLACE"
                          );
                      } catch (e) {
                        mp.events.callRemote(
                          "client_trycatch",
                          "casino/roulette",
                          "global.binderFunctions.rouletteExit",
                          e.toString()
                        );
                      }
                    });
                }
                isCreateCroupierAndTable() {
                  return !!(
                    null != this.selectTable &&
                    this.g_rouletteData[this.selectTable] &&
                    this.g_rouletteData[this.selectTable].croupier &&
                    this.g_rouletteData[this.selectTable].table &&
                    mp.objects.exists(
                      this.g_rouletteData[this.selectTable].table
                    ) &&
                    0 !== this.g_rouletteData[this.selectTable].table.handle
                  );
                }
                isBall() {
                  return (
                    null != this.selectTable &&
                    !!this.g_rouletteData[this.selectTable] &&
                    !!this.g_rouletteData[this.selectTable].ball &&
                    !!mp.objects.exists(
                      this.g_rouletteData[this.selectTable].ball
                    ) &&
                    0 !== this.g_rouletteData[this.selectTable].ball.handle
                  );
                }
                async startRouletteWheel(e) {
                  try {
                    if (!this.isCreateCroupierAndTable()) return;
                    const t =
                      this.g_rouletteData[this.selectTable].croupier.model ==
                      mp.game.joaat("S_M_Y_Casino_01")
                        ? "anim_casino_b@amb@casino@games@roulette@dealer"
                        : "anim_casino_b@amb@casino@games@roulette@dealer_female";
                    if (
                      (this.g_rouletteData[
                        this.selectTable
                      ].croupier.taskPlayAnim(
                        t,
                        "spin_wheel",
                        8,
                        1,
                        -1,
                        2,
                        0,
                        !1,
                        !1,
                        !1
                      ),
                      await a.g.wait(1500),
                      !this.isCreateCroupierAndTable())
                    )
                      return;
                    this.g_rouletteData[this.selectTable].table.playAnim(
                      "loop_wheel",
                      "anim_casino_b@amb@casino@games@roulette@table",
                      1e3,
                      !1,
                      !0,
                      !0,
                      0,
                      1
                    ),
                      await a.g.wait(1500),
                      await a.g.loadModel(this.g_rouletteBallObjectID),
                      (this.g_rouletteData[this.selectTable].ball =
                        mp.objects.new(
                          this.g_rouletteBallObjectID,
                          new mp.Vector3(
                            o.Py[this.selectTable][1] - 0.56,
                            o.Py[this.selectTable][2] + 0.1,
                            o.Py[this.selectTable][3] + 1.0715
                          )
                        )),
                      (this.g_rouletteData[this.selectTable].ball.rotation =
                        new mp.Vector3(0, 0, 0)),
                      this.g_rouletteData[this.selectTable].ball.playAnim(
                        "loop_ball",
                        "anim_casino_b@amb@casino@games@roulette@table",
                        1e3,
                        !1,
                        !0,
                        !1,
                        0,
                        1e3
                      );
                    const i = setInterval(async () => {
                      this.isBall() &&
                        this.g_rouletteData[this.selectTable].ball.playAnim(
                          "loop_ball",
                          "anim_casino_b@amb@casino@games@roulette@table",
                          1e3,
                          !1,
                          !0,
                          !1,
                          0,
                          1e3
                        );
                    }, 1e3);
                    if (
                      (await a.g.wait(1e4),
                      clearInterval(i),
                      !this.isCreateCroupierAndTable())
                    )
                      return;
                    if (
                      (this.g_rouletteData[this.selectTable].table.playAnim(
                        e + "wheel",
                        "anim_casino_b@amb@casino@games@roulette@table",
                        1e3,
                        !1,
                        !0,
                        !1,
                        0,
                        100
                      ),
                      !this.isBall())
                    )
                      return;
                    if (
                      ((this.g_rouletteData[this.selectTable].ball.position =
                        new mp.Vector3(
                          o.Py[this.selectTable][1] - 0.56,
                          o.Py[this.selectTable][2] + 0.1,
                          o.Py[this.selectTable][3] + 1.0715
                        )),
                      (this.g_rouletteData[this.selectTable].ball.rotation =
                        new mp.Vector3(0, 0, 0)),
                      this.g_rouletteData[this.selectTable].ball.playAnim(
                        e + "ball",
                        "anim_casino_b@amb@casino@games@roulette@table",
                        1e3,
                        !1,
                        !0,
                        !1,
                        0,
                        1e3
                      ),
                      await a.g.wait(1e4),
                      mp.events.callRemote("server.roullete.CLEAR_TABLE"),
                      !this.isCreateCroupierAndTable())
                    )
                      return;
                    if (
                      (this.clearMyBetsTableMarkers(),
                      this.g_rouletteData[
                        this.selectTable
                      ].croupier.taskPlayAnim(
                        t,
                        "clear_chips_zone2",
                        8,
                        1,
                        -1,
                        2,
                        0,
                        !1,
                        !1,
                        !1
                      ),
                      await a.g.wait(2e3),
                      !this.isCreateCroupierAndTable())
                    )
                      return;
                    if (
                      (this.g_rouletteData[
                        this.selectTable
                      ].croupier.taskPlayAnim(
                        t,
                        "idle",
                        8,
                        1,
                        -1,
                        2,
                        0,
                        !1,
                        !1,
                        !1
                      ),
                      await a.g.wait(8e3),
                      !this.isCreateCroupierAndTable())
                    )
                      return;
                    this.g_rouletteData[this.selectTable].croupier.taskPlayAnim(
                      t,
                      "idle",
                      8,
                      1,
                      -1,
                      2,
                      0,
                      !1,
                      !1,
                      !1
                    );
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "casino/roulette",
                      "startRouletteWheel",
                      e.toString()
                    );
                  }
                }
                DealerClothes(e, t) {
                  try {
                    0 == e
                      ? (t.setDefaultComponentVariation(),
                        t.setComponentVariation(0, 1, 1, 0),
                        t.setComponentVariation(1, 0, 0, 0),
                        t.setComponentVariation(2, 1, 1, 0),
                        t.setComponentVariation(3, 1, 3, 0),
                        t.setComponentVariation(4, 0, 0, 0),
                        t.setComponentVariation(6, 0, 0, 0),
                        t.setComponentVariation(7, 2, 0, 0),
                        t.setComponentVariation(8, 1, 0, 0),
                        t.setComponentVariation(10, 0, 0, 0),
                        t.setComponentVariation(11, 0, 0, 0))
                      : 1 == e
                      ? (t.setDefaultComponentVariation(),
                        t.setComponentVariation(0, 2, 0, 0),
                        t.setComponentVariation(1, 0, 0, 0),
                        t.setComponentVariation(2, 2, 0, 0),
                        t.setComponentVariation(3, 2, 3, 0),
                        t.setComponentVariation(4, 0, 0, 0),
                        t.setComponentVariation(6, 0, 0, 0),
                        t.setComponentVariation(7, 0, 0, 0),
                        t.setComponentVariation(8, 2, 0, 0),
                        t.setComponentVariation(10, 0, 0, 0),
                        t.setComponentVariation(11, 0, 0, 0))
                      : 2 == e
                      ? (t.setDefaultComponentVariation(),
                        t.setComponentVariation(0, 2, 1, 0),
                        t.setComponentVariation(1, 0, 0, 0),
                        t.setComponentVariation(2, 2, 1, 0),
                        t.setComponentVariation(3, 3, 3, 0),
                        t.setComponentVariation(4, 1, 0, 0),
                        t.setComponentVariation(6, 1, 0, 0),
                        t.setComponentVariation(7, 2, 0, 0),
                        t.setComponentVariation(8, 3, 0, 0),
                        t.setComponentVariation(10, 0, 0, 0),
                        t.setComponentVariation(11, 0, 0, 0))
                      : 3 == e
                      ? (t.setDefaultComponentVariation(),
                        t.setComponentVariation(0, 3, 0, 0),
                        t.setComponentVariation(1, 0, 0, 0),
                        t.setComponentVariation(2, 3, 0, 0),
                        t.setComponentVariation(3, 0, 1, 0),
                        t.setComponentVariation(4, 1, 0, 0),
                        t.setComponentVariation(6, 1, 0, 0),
                        t.setComponentVariation(7, 1, 0, 0),
                        t.setComponentVariation(8, 0, 0, 0),
                        t.setComponentVariation(10, 0, 0, 0),
                        t.setComponentVariation(11, 0, 0, 0),
                        t.setPropIndex(1, 0, 0, !1))
                      : 4 == e
                      ? (t.setDefaultComponentVariation(),
                        t.setComponentVariation(0, 3, 1, 0),
                        t.setComponentVariation(1, 0, 0, 0),
                        t.setComponentVariation(2, 3, 1, 0),
                        t.setComponentVariation(3, 1, 1, 0),
                        t.setComponentVariation(4, 1, 0, 0),
                        t.setComponentVariation(6, 1, 0, 0),
                        t.setComponentVariation(7, 2, 0, 0),
                        t.setComponentVariation(8, 1, 0, 0),
                        t.setComponentVariation(10, 0, 0, 0),
                        t.setComponentVariation(11, 0, 0, 0))
                      : 5 == e &&
                        (t.setDefaultComponentVariation(),
                        t.setComponentVariation(0, 4, 0, 0),
                        t.setComponentVariation(1, 0, 0, 0),
                        t.setComponentVariation(2, 4, 0, 0),
                        t.setComponentVariation(3, 2, 1, 0),
                        t.setComponentVariation(4, 1, 0, 0),
                        t.setComponentVariation(6, 1, 0, 0),
                        t.setComponentVariation(7, 1, 0, 0),
                        t.setComponentVariation(8, 2, 0, 0),
                        t.setComponentVariation(10, 0, 0, 0),
                        t.setComponentVariation(11, 0, 0, 0),
                        t.setPropIndex(1, 0, 0, !1));
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "casino/roulette",
                      "DealerClothes",
                      e.toString()
                    );
                  }
                }
                DealerPedVoiceGroup(e, t) {
                  try {
                    0 == e
                      ? mp.game.invoke(
                          "0x7CDC8C3B89F661B3",
                          t.handle,
                          mp.game.joaat("S_F_Y_Casino_01_ASIAN_02")
                        )
                      : 1 == e
                      ? mp.game.invoke(
                          "0x7CDC8C3B89F661B3",
                          t.handle,
                          mp.game.joaat("S_F_Y_Casino_01_ASIAN_01")
                        )
                      : 2 == e
                      ? mp.game.invoke(
                          "0x7CDC8C3B89F661B3",
                          t.handle,
                          mp.game.joaat("S_F_Y_Casino_01_ASIAN_02")
                        )
                      : 3 == e
                      ? mp.game.invoke(
                          "0x7CDC8C3B89F661B3",
                          t.handle,
                          mp.game.joaat("S_F_Y_Casino_01_LATINA_01")
                        )
                      : 4 == e
                      ? mp.game.invoke(
                          "0x7CDC8C3B89F661B3",
                          t.handle,
                          mp.game.joaat("S_F_Y_Casino_01_LATINA_02")
                        )
                      : 5 == e &&
                        mp.game.invoke(
                          "0x7CDC8C3B89F661B3",
                          t.handle,
                          mp.game.joaat("S_F_Y_Casino_01_LATINA_01")
                        );
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "casino/roulette",
                      "DealerPedVoiceGroup",
                      e.toString()
                    );
                  }
                }
                init() {
                  try {
                    this.betState = !0;
                    for (let e = 0; e < this.countRouletteTables(); e++) {
                      (this.g_rouletteData[e] = {
                        table: null,
                        ball: null,
                        croupier: { tableID: null },
                      }),
                        (this.g_rouletteData[e].table = mp.objects.new(
                          mp.game.joaat(o.Py[e][0]),
                          new mp.Vector3(o.Py[e][1], o.Py[e][2], o.Py[e][3])
                        )),
                        (this.g_rouletteData[e].ball = mp.objects.new(
                          this.g_rouletteBallObjectID,
                          new mp.Vector3(
                            o.Py[e][1] - this.g_rouletteBallCorrectionPosX,
                            o.Py[e][2] - this.g_rouletteBallCorrectionPosY,
                            o.Py[e][3]
                          )
                        )),
                        (this.g_rouletteData[e].croupier = mp.peds.new(
                          mp.game.joaat(o.D3[1]),
                          new mp.Vector3(
                            o.Py[e][1],
                            o.Py[e][2] + this.g_rouletteCroupierCorrectionPosY,
                            o.Py[e][3] + this.g_rouletteCroupierCorrectionPosZ
                          ),
                          180,
                          this.dimensionDiamondInterior
                        )),
                        this.g_rouletteData[e].croupier.setLodDist(100),
                        this.DealerClothes(e, this.g_rouletteData[e].croupier),
                        this.DealerPedVoiceGroup(
                          e,
                          this.g_rouletteData[e].croupier
                        );
                      for (let t = 0; t < o.tl.length; t++) {
                        const a = mp.colshapes.newSphere(
                          o.Py[e][1] + o.tl[t][0],
                          o.Py[e][2] + o.tl[t][1],
                          o.Py[e][3] + o.tl[t][2],
                          0.5
                        );
                        (a.tableID = e), (a.seatID = t), (a.roulette = !0);
                      }
                      (this.g_rouletteData[e].croupier.tableID = e),
                        (this.g_rouletteData[e].croupier.roulette = !0);
                    }
                    setTimeout(() => {
                      (0, i.A)(
                        "anim_casino_b@amb@casino@games@roulette@dealer"
                      ),
                        (0, i.A)(
                          "anim_casino_b@amb@casino@games@roulette@dealer_female"
                        ),
                        (0, i.A)(
                          "anim_casino_b@amb@casino@games@roulette@table"
                        ),
                        this.g_rouletteData.forEach((e) => {
                          if (!e.croupier) return;
                          const t =
                            e.croupier.model == mp.game.joaat("S_M_Y_Casino_01")
                              ? "anim_casino_b@amb@casino@games@roulette@dealer"
                              : "anim_casino_b@amb@casino@games@roulette@dealer_female";
                          e.croupier.taskPlayAnim(
                            t,
                            "idle",
                            8,
                            1,
                            -1,
                            1,
                            0,
                            !1,
                            !1,
                            !1
                          );
                        });
                    }, 2e3);
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "casino/roulette",
                      "init",
                      e.toString()
                    );
                  }
                }
                pressKeyE() {
                  try {
                    if (a.g.localplayer.isDead()) return !1;
                    if (null != this.nearestSeat && null == this.selectTable)
                      return void mp.events.callRemote(
                        "server.roullete.CHARACTER_OCCUPY_PLACE",
                        this.nearestTable,
                        this.nearestSeat
                      );
                    if (null != this.selectTable)
                      return void a.g.binderFunctions.rouletteExit();
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "casino/roulette",
                      "pressKeyE",
                      e.toString()
                    );
                  }
                }
                pressKeyH() {
                  try {
                    null != this.selectTable &&
                      (null == this.casinoCamera
                        ? ((this.casinoCamera = mp.cameras.new(
                            "default",
                            new mp.Vector3(
                              o.Py[this.selectTable][1],
                              o.Py[this.selectTable][2] - 0.47,
                              o.Py[this.selectTable][3] + 2.85
                            ),
                            new mp.Vector3(0, 0, 0),
                            45
                          )),
                          this.casinoCamera.setRot(-75, 0, 0, 2),
                          this.casinoCamera.setActive(!0),
                          mp.game.cam.renderScriptCams(!0, !1, 500, !0, !1))
                        : (this.clearCamera(),
                          this.clearBetObject(),
                          this.clearTableMarkers(),
                          this.clearMyBetsTableMarkers()));
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "casino/roulette",
                      "pressKeyH",
                      e.toString()
                    );
                  }
                }
                renderRoulette() {
                  try {
                    if (
                      (null == this.rouletteBetObject &&
                        this.casinoCamera &&
                        null != this.selectTable &&
                        this.betState &&
                        ((this.rouletteBetObject = mp.objects.new(
                          mp.game.joaat("vw_prop_chip_100dollar_x1"),
                          new mp.Vector3(
                            o.Py[this.selectTable][1],
                            o.Py[this.selectTable][2],
                            o.Py[this.selectTable][3]
                          )
                        )),
                        this.rouletteBetObject.setCollision(!1, !1)),
                      !this.betState &&
                        this.rouletteBetObject &&
                        (this.clearBetObject(),
                        this.getChipsSpots(),
                        this.clearTableMarkers()),
                      this.betState &&
                        this.casinoCamera &&
                        null != this.selectTable &&
                        null != this.rouletteBetObject)
                    ) {
                      const e = this.getCameraHitCoord();
                      null != e &&
                        ((e.position.z = o.Py[this.selectTable][3] + 0.95),
                        e.position.x > o.pR[this.selectTable][0] &&
                          (e.position.x = o.pR[this.selectTable][0]),
                        e.position.x < o.pR[this.selectTable][1] &&
                          (e.position.x = o.pR[this.selectTable][1]),
                        e.position.y > o.pR[this.selectTable][2] &&
                          (e.position.y = o.pR[this.selectTable][2]),
                        e.position.y < o.pR[this.selectTable][3] &&
                          (e.position.y = o.pR[this.selectTable][3]),
                        this.rouletteBetObject.setCoordsNoOffset(
                          e.position.x,
                          e.position.y,
                          e.position.z,
                          !1,
                          !1,
                          !1
                        ),
                        this.getClosestChipSpot(
                          new mp.Vector3(
                            e.position.x,
                            e.position.y,
                            e.position.z
                          )
                        )),
                        mp.game.controls.isDisabledControlJustReleased(0, 24) &&
                          !mp.gui.cursor.visible &&
                          null != this.closestChipSpot &&
                          this.betState &&
                          (mp.events.callRemote(
                            "server.roullete.CREATE_BET",
                            this.bet,
                            this.closestChipSpot,
                            e.position.x,
                            e.position.y,
                            o.Py[this.selectTable][3] + 0.95
                          ),
                          null == this.tableBet1Vector
                            ? (this.tableBet1Vector = new mp.Vector3(
                                e.position.x,
                                e.position.y,
                                e.position.z
                              ))
                            : null == this.tableBet2Vector
                            ? (this.tableBet2Vector = new mp.Vector3(
                                e.position.x,
                                e.position.y,
                                e.position.z
                              ))
                            : null == this.tableBet3Vector &&
                              (this.tableBet3Vector = new mp.Vector3(
                                e.position.x,
                                e.position.y,
                                e.position.z
                              ))),
                        mp.game.controls.isDisabledControlJustReleased(0, 25) &&
                          !mp.gui.cursor.visible &&
                          this.betState &&
                          null != this.closestChipSpot &&
                          (null != this.tableBet3Vector
                            ? (this.tableBet3Vector = null)
                            : null != this.tableBet2Vector
                            ? (this.tableBet2Vector = null)
                            : null != this.tableBet1Vector &&
                              (this.tableBet1Vector = null),
                          mp.events.callRemote(
                            "server.roullete.DESTROY_LAST_BET"
                          )),
                        a.g.clearScript(e);
                    }
                    if (null != this.casinoCamera && !this.gameStep) {
                      let e = mp.game.controls.getDisabledControlNormal(0, 220),
                        t = mp.game.controls.getDisabledControlNormal(0, 221),
                        a = 0,
                        o = 0,
                        i =
                          (this.casinoCamera.getCoord(),
                          this.casinoCamera.getDirection()),
                        n = new mp.Vector3(0, 0, 0);
                      (n.x = i.x * o), (n.y = i.y * o), (n.z = i.z * o);
                      let s = new mp.Vector3(0, 0, 1),
                        r = this.getCrossProduct(
                          this.getNormalizedVector(i),
                          this.getNormalizedVector(s)
                        );
                      (r.x *= 0.5 * a), (r.y *= 0.5 * a), (r.z *= 0.5 * a);
                      let l = this.casinoCamera.getRot(2),
                        m = l.x + -5 * t;
                      m > 89 && (m = 89),
                        m < -89 && (m = -89),
                        this.casinoCamera.setRot(m, 0, l.z + -5 * e, 2);
                    }
                  } catch (e) {
                    if (
                      new Date().getTime() -
                        a.g.trycatchtime["casino/roulette"] <
                      6e4
                    )
                      return;
                    (a.g.trycatchtime["casino/roulette"] =
                      new Date().getTime()),
                      mp.events.callRemote(
                        "client_trycatch",
                        "casino/roulette",
                        "render",
                        e.toString()
                      );
                  }
                }
                onPlayerEnterColshape(e) {
                  try {
                    e &&
                      e.roulette &&
                      null != e.tableID &&
                      null != e.seatID &&
                      ((this.nearestSeat = e.seatID),
                      (this.nearestTable = e.tableID),
                      mp.game.audio.playSound(
                        -1,
                        "BACK",
                        "HUD_AMMO_SHOP_SOUNDSET",
                        !0,
                        0,
                        !0
                      ),
                      mp.game.graphics.notify("~g~E~s~ сесть за стол"));
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "casino/roulette",
                      "onPlayerEnterColshape",
                      e.toString()
                    );
                  }
                }
                onEntityStreamIn(e) {
                  try {
                    if (e && 0 != e.handle && e.roulette) {
                      (0, i.A)(
                        "anim_casino_b@amb@casino@games@roulette@dealer"
                      ),
                        (0, i.A)(
                          "anim_casino_b@amb@casino@games@roulette@dealer_female"
                        ),
                        (0, i.A)(
                          "anim_casino_b@amb@casino@games@roulette@table"
                        ),
                        e.model == mp.game.joaat("S_M_Y_Casino_01")
                          ? e.taskPlayAnim(
                              "anim_casino_b@amb@casino@games@roulette@dealer",
                              "idle",
                              8,
                              1,
                              -1,
                              1,
                              0,
                              !1,
                              !1,
                              !1
                            )
                          : e.taskPlayAnim(
                              "anim_casino_b@amb@casino@games@roulette@dealer_female",
                              "idle",
                              8,
                              1,
                              -1,
                              1,
                              0,
                              !1,
                              !1,
                              !1
                            );
                      const t = e.tableID;
                      this.g_rouletteData &&
                        this.g_rouletteData[t] &&
                        this.g_rouletteData[t].ball &&
                        0 != this.g_rouletteData[t].ball.handle &&
                        (this.g_rouletteData[t].ball.position = new mp.Vector3(
                          o.Py[t][1] - this.g_rouletteBallCorrectionPosX,
                          o.Py[t][2] - this.g_rouletteBallCorrectionPosY,
                          o.Py[t][3]
                        )),
                        this.DealerClothes(t, e),
                        this.DealerPedVoiceGroup(t, e);
                    }
                  } catch (e) {}
                }
                onPlayerExitColshape(e) {
                  try {
                    null != e.tableID &&
                      ((this.nearestSeat = null), (this.nearestTable = null));
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "casino/roulette",
                      "onPlayerExitColshape",
                      e.toString()
                    );
                  }
                }
                onPlayerDeath(e) {
                  try {
                    e == a.g.localplayer &&
                      (null != this.nearestSeat && (this.nearestSeat = null),
                      null != this.selectTable && (this.selectTable = null),
                      this.clearCamera());
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "casino/roulette",
                      "onPlayerDeath",
                      e.toString()
                    );
                  }
                }
                clearBetObject() {
                  try {
                    this.rouletteBetObject &&
                      (this.rouletteBetObject.destroy(),
                      (this.rouletteBetObject = null));
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "casino/roulette",
                      "clearBetObject",
                      e.toString()
                    );
                  }
                }
                clearCamera() {
                  try {
                    null != this.casinoCamera &&
                      (this.casinoCamera.destroy(!0),
                      (this.casinoCamera = null),
                      mp.game.cam.renderScriptCams(!1, !1, 0, !0, !1));
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "casino/roulette",
                      "clearCamera",
                      e.toString()
                    );
                  }
                }
                countRouletteTables() {
                  return o.Py.length;
                }
                getClosestChipSpot(e) {
                  try {
                    let t = null,
                      a = 0.05,
                      n = null;
                    for (let s = 0; s < o.L_.length; s++)
                      (n = (0, i.O)(
                        e,
                        new mp.Vector3(
                          o.Py[this.selectTable][1] + o.L_[s][0],
                          o.Py[this.selectTable][2] + o.L_[s][1],
                          o.Py[this.selectTable][3] + o.L_[s][2]
                        )
                      )),
                        n <= a && ((t = s), (a = n));
                    if (
                      t != this.closestChipSpot &&
                      ((this.closestChipSpot = t),
                      this.clearTableMarkers(),
                      null != t)
                    ) {
                      let e = null,
                        a = null;
                      for (let i = 0; i < o.L_[t][3].length; i++)
                        (e = o.L_[t][3][i]),
                          "00" == e || "0" == e
                            ? ((a = mp.objects.new(
                                269022546,
                                new mp.Vector3(
                                  o.Py[this.selectTable][1] + o.sc[e][0],
                                  o.Py[this.selectTable][2] + o.sc[e][1],
                                  o.Py[this.selectTable][3] + o.sc[e][2]
                                )
                              )),
                              a.setCollision(!1, !1),
                              this.tableMarkers.push(a))
                            : this.tableMarkers.push(
                                mp.objects.new(
                                  3267450776,
                                  new mp.Vector3(
                                    o.Py[this.selectTable][1] + o.sc[e][0],
                                    o.Py[this.selectTable][2] + o.sc[e][1],
                                    o.Py[this.selectTable][3] + o.sc[e][2]
                                  )
                                )
                              );
                    }
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "casino/roulette",
                      "getClosestChipSpot",
                      e.toString()
                    );
                  }
                }
                async getChipsSpots() {
                  try {
                    let e = null,
                      t = null,
                      n = null,
                      s = 0.05,
                      r = null;
                    if (null != this.tableBet1Vector) {
                      (e = null), (r = null), (s = 0.05);
                      for (let t = 0; t < o.L_.length; t++)
                        (r = (0, i.O)(
                          this.tableBet1Vector,
                          new mp.Vector3(
                            o.Py[this.selectTable][1] + o.L_[t][0],
                            o.Py[this.selectTable][2] + o.L_[t][1],
                            o.Py[this.selectTable][3] + o.L_[t][2]
                          )
                        )),
                          r <= s && ((e = t), (s = r));
                      for (let i = 0; i < o.L_[e][3].length; i++)
                        (t = o.L_[e][3][i]),
                          "00" == t || "0" == t
                            ? (await a.g.loadModel(269022546),
                              (n = mp.objects.new(
                                269022546,
                                new mp.Vector3(
                                  o.Py[this.selectTable][1] + o.sc[t][0],
                                  o.Py[this.selectTable][2] + o.sc[t][1],
                                  o.Py[this.selectTable][3] + o.sc[t][2]
                                )
                              )),
                              n.setCollision(!1, !1),
                              this.tableBetsMarkers.push(n))
                            : (await a.g.loadModel(3267450776),
                              this.tableBetsMarkers.push(
                                mp.objects.new(
                                  3267450776,
                                  new mp.Vector3(
                                    o.Py[this.selectTable][1] + o.sc[t][0],
                                    o.Py[this.selectTable][2] + o.sc[t][1],
                                    o.Py[this.selectTable][3] + o.sc[t][2]
                                  )
                                )
                              ));
                    }
                    if (null != this.tableBet2Vector) {
                      (e = null), (r = null), (s = 0.05);
                      for (let t = 0; t < o.L_.length; t++)
                        (r = (0, i.O)(
                          this.tableBet2Vector,
                          new mp.Vector3(
                            o.Py[this.selectTable][1] + o.L_[t][0],
                            o.Py[this.selectTable][2] + o.L_[t][1],
                            o.Py[this.selectTable][3] + o.L_[t][2]
                          )
                        )),
                          r <= s && ((e = t), (s = r));
                      for (let i = 0; i < o.L_[e][3].length; i++)
                        (t = o.L_[e][3][i]),
                          "00" == t || "0" == t
                            ? (await a.g.loadModel(269022546),
                              (n = mp.objects.new(
                                269022546,
                                new mp.Vector3(
                                  o.Py[this.selectTable][1] + o.sc[t][0],
                                  o.Py[this.selectTable][2] + o.sc[t][1],
                                  o.Py[this.selectTable][3] + o.sc[t][2]
                                )
                              )),
                              n.setCollision(!1, !1),
                              this.tableBetsMarkers.push(n))
                            : (await a.g.loadModel(3267450776),
                              this.tableBetsMarkers.push(
                                mp.objects.new(
                                  3267450776,
                                  new mp.Vector3(
                                    o.Py[this.selectTable][1] + o.sc[t][0],
                                    o.Py[this.selectTable][2] + o.sc[t][1],
                                    o.Py[this.selectTable][3] + o.sc[t][2]
                                  )
                                )
                              ));
                    }
                    if (null != this.tableBet3Vector) {
                      (e = null), (r = null), (s = 0.05);
                      for (let t = 0; t < o.L_.length; t++)
                        (r = (0, i.O)(
                          this.tableBet3Vector,
                          new mp.Vector3(
                            o.Py[this.selectTable][1] + o.L_[t][0],
                            o.Py[this.selectTable][2] + o.L_[t][1],
                            o.Py[this.selectTable][3] + o.L_[t][2]
                          )
                        )),
                          r <= s && ((e = t), (s = r));
                      for (let i = 0; i < o.L_[e][3].length; i++)
                        (t = o.L_[e][3][i]),
                          "00" == t || "0" == t
                            ? (await a.g.loadModel(269022546),
                              (n = mp.objects.new(
                                269022546,
                                new mp.Vector3(
                                  o.Py[this.selectTable][1] + o.sc[t][0],
                                  o.Py[this.selectTable][2] + o.sc[t][1],
                                  o.Py[this.selectTable][3] + o.sc[t][2]
                                )
                              )),
                              n.setCollision(!1, !1),
                              this.tableBetsMarkers.push(n))
                            : (await a.g.loadModel(3267450776),
                              this.tableBetsMarkers.push(
                                mp.objects.new(
                                  3267450776,
                                  new mp.Vector3(
                                    o.Py[this.selectTable][1] + o.sc[t][0],
                                    o.Py[this.selectTable][2] + o.sc[t][1],
                                    o.Py[this.selectTable][3] + o.sc[t][2]
                                  )
                                )
                              ));
                    }
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "casino/roulette",
                      "getChipsSpots",
                      e.toString()
                    );
                  }
                }
                clearTableMarkers() {
                  try {
                    this.tableMarkers.forEach((e) => {
                      e.destroy();
                    }),
                      (this.tableMarkers = []);
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "casino/roulette",
                      "clearTableMarkers",
                      e.toString()
                    );
                  }
                }
                clearMyBetsTableMarkers() {
                  try {
                    (this.tableBet1Vector = null),
                      (this.tableBet2Vector = null),
                      (this.tableBet3Vector = null),
                      this.tableBetsMarkers.forEach((e) => {
                        e.destroy();
                      }),
                      (this.tableBetsMarkers = []);
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "casino/roulette",
                      "clearMyBetsTableMarkers",
                      e.toString()
                    );
                  }
                }
                getCameraHitCoord() {
                  try {
                    const e = this.casinoCamera.getCoord(),
                      t = this.casinoCamera.getDirection(),
                      o = new mp.Vector3(
                        150 * t.x + e.x,
                        150 * t.y + e.y,
                        150 * t.z + e.z
                      ),
                      i = mp.raycasting.testPointToPoint(e, o, a.g.localplayer);
                    return null != i ? i : null;
                  } catch (e) {
                    return (
                      mp.events.callRemote(
                        "client_trycatch",
                        "casino/roulette",
                        "getCameraHitCoord",
                        e.toString()
                      ),
                      null
                    );
                  }
                }
                getNormalizedVector(e) {
                  const t = Math.sqrt(e.x * e.x + e.y * e.y + e.z * e.z);
                  return (e.x = e.x / t), (e.y = e.y / t), (e.z = e.z / t), e;
                }
                getCrossProduct(e, t) {
                  let a = new mp.Vector3(0, 0, 0);
                  return (
                    (a.x = e.y * t.z - e.z * t.y),
                    (a.y = e.z * t.x - e.x * t.z),
                    (a.z = e.x * t.y - e.y * t.x),
                    a
                  );
                }
              })();
            const n = [3, 5, 7, 8, 9, 10, 11];
            new (class {
              constructor() {
                (this.g_slots = []),
                  (this.select_spin = null),
                  (this.bet = 0),
                  (this.nearest_spin = null),
                  (this.can_bet = !1),
                  (this.render_cam = !1),
                  (this.freeze_player = !1),
                  (this.isSeat = !1),
                  this.init(),
                  (this.removedClothing = []),
                  mp.events.add("playerEnterColshape", (e) => {
                    this.on_enter_colshape(e);
                  }),
                  mp.events.add("playerExitColshape", (e) => {
                    this.on_leave_colshape(e);
                  }),
                  mp.keys.bind(69, !0, () => {
                    this.press_key_e();
                  }),
                  mp.events.add("render", () => {
                    try {
                      if (!a.g.loggedin) return;
                      this.render();
                    } catch (e) {
                      if (
                        new Date().getTime() - a.g.trycatchtime["casino/spin"] <
                        6e4
                      )
                        return;
                      (a.g.trycatchtime["casino/spin"] = new Date().getTime()),
                        mp.events.callRemote(
                          "client_trycatch",
                          "casino/spin",
                          "render",
                          e.toString()
                        );
                    }
                  }),
                  (a.g.binderFunctions.spinExit = () => {
                    try {
                      if (null == this.select_spin) return;
                      if (!this.can_bet || !this.isSeat || this.bet) return;
                      if (0 !== this.removedClothing.length) {
                        for (const e of this.removedClothing)
                          a.g.localplayer.setComponentVariation(
                            e._componentId,
                            e.drawable,
                            e.texture,
                            e.palette
                          );
                        this.removedClothing = [];
                      }
                      a.g.cameraManager.stopCamera(!0, 3e3),
                        (this.render_cam = !1),
                        a.g.menuClose(),
                        mp.gui.emmit("window.router.setHud();"),
                        mp.events.callRemote("server.spin.LEAVE_SLOT"),
                        mp.game.cam.setFollowPedCamViewMode(2),
                        (this.isSeat = !1);
                    } catch (e) {
                      mp.events.callRemote(
                        "client_trycatch",
                        "casino/spin",
                        "global.binderFunctions.spinExit",
                        e.toString()
                      );
                    }
                  }),
                  mp.events.add("client.spin.OCCUPY_SLOT", async (e) => {
                    try {
                      if (((this.select_spin = e), null == this.select_spin))
                        return;
                      (this.bet = 0),
                        this.g_slots[this.select_spin].slot.setCollision(
                          !1,
                          !1
                        ),
                        (this.isSeat = !1),
                        await a.g.wait(3e3),
                        mp.discord.update(
                          "Играет в казино",
                          `на RedAge под ID ${a.g.localplayer.remoteId}`
                        ),
                        mp.gui.emmit('window.router.setView("CasinoJacpot");'),
                        a.g.menuOpen(),
                        a.g.createCamera("spin", o.uu[this.select_spin]);
                      const t = a.g.GetGender(a.g.localplayer) ? 1 : 0;
                      this.removedClothing = [];
                      for (const e of n) {
                        const o = a.g.localplayer.getDrawableVariation(e),
                          i = a.g.localplayer.getTextureVariation(e),
                          n = a.g.localplayer.getPaletteVariation(e);
                        this.removedClothing.push({
                          _componentId: e,
                          drawable: o,
                          texture: i,
                          palette: n,
                        }),
                          a.g.localplayer.setComponentVariation(
                            e,
                            void 0 !== clothesEmpty[t][e]
                              ? clothesEmpty[t][e]
                              : 0,
                            0,
                            0
                          );
                      }
                      mp.game.audio.playSoundFromCoord(
                        mp.game.invoke("0x430386FE9BF80B45"),
                        "welcome_stinger",
                        o.uu[this.select_spin].x,
                        o.uu[this.select_spin].y,
                        o.uu[this.select_spin].z,
                        "dlc_vw_casino_slot_machine_ds_npc_sounds",
                        !1,
                        20,
                        !1
                      ),
                        (this.can_bet = !0),
                        (this.render_cam = !0),
                        mp.game.cam.setFollowPedCamViewMode(4),
                        (this.isSeat = !0);
                    } catch (e) {
                      mp.events.callRemote(
                        "client_trycatch",
                        "casino/spin",
                        "client.spin.OCCUPY_SLOT",
                        e.toString()
                      );
                    }
                  }),
                  mp.events.add("client.spin.exit", () => {
                    try {
                      a.g.binderFunctions.spinExit();
                    } catch (e) {
                      mp.events.callRemote(
                        "client_trycatch",
                        "casino/spin",
                        "client.spin.exit",
                        e.toString()
                      );
                    }
                  }),
                  mp.events.add("client.spin.LEAVE_SLOT", (e) => {
                    try {
                      this.g_slots[e].slot.setCollision(!0, !1),
                        this.clear_player_data(),
                        (this.nearest_spin = e);
                    } catch (e) {
                      mp.events.callRemote(
                        "client_trycatch",
                        "casino/spin",
                        "client.spin.LEAVE_SLOT",
                        e.toString()
                      );
                    }
                  }),
                  mp.events.add("client.spin.SPIN", (e, t, a) => {
                    try {
                      this.spin(e, t, a);
                    } catch (e) {
                      mp.events.callRemote(
                        "client_trycatch",
                        "casino/spin",
                        "client.spin.SPIN",
                        e.toString()
                      );
                    }
                  }),
                  mp.events.add("client.spin.CLEAR_SPIN", () => {
                    try {
                      if (null == this.select_spin) return;
                      (this.can_bet = !0),
                        (this.bet = 0),
                        mp.gui.emmit(
                          'window.events.callEvent("cef.spin.btnExit", 1)'
                        );
                    } catch (e) {
                      mp.events.callRemote(
                        "client_trycatch",
                        "casino/spin",
                        "client.spin.CLEAR_SPIN",
                        e.toString()
                      );
                    }
                  }),
                  mp.events.add("client.spin.setBet", (e) => {
                    try {
                      if (!this.can_bet) return;
                      (this.bet = e),
                        mp.events.callRemote("server.spin.bet", this.bet);
                    } catch (e) {
                      mp.events.callRemote(
                        "client_trycatch",
                        "casino/spin",
                        "client.spin.setBet",
                        e.toString()
                      );
                    }
                  });
              }
              getSounds(e) {
                try {
                  switch (e) {
                    case 1:
                      return "dlc_vw_casino_slot_machine_ak_player_sounds";
                    case 2:
                      return "dlc_vw_casino_slot_machine_ir_player_sounds";
                    case 3:
                      return "dlc_vw_casino_slot_machine_rsr_player_sounds";
                    case 4:
                      return "dlc_vw_casino_slot_machine_fs_player_sounds";
                    case 5:
                      return "dlc_vw_casino_slot_machine_ds_player_sounds";
                    case 6:
                      return "dlc_vw_casino_slot_machine_kd_player_sounds";
                    case 7:
                      return "dlc_vw_casino_slot_machine_td_player_sounds";
                    case 8:
                      return "dlc_vw_casino_slot_machine_hz_player_sounds";
                  }
                  return "";
                } catch (e) {
                  return (
                    mp.events.callRemote(
                      "client_trycatch",
                      "casino/spin",
                      "getSounds",
                      e.toString()
                    ),
                    ""
                  );
                }
              }
              async spin(e, t, i) {
                try {
                  if (this.can_bet) {
                    mp.gui.emmit(
                      'window.events.callEvent("cef.spin.btnExit", 0)'
                    ),
                      (this.can_bet = !1),
                      mp.game.audio.playSoundFromCoord(
                        mp.game.invoke("0x430386FE9BF80B45"),
                        "attract_loop",
                        o.uu[this.select_spin].x,
                        o.uu[this.select_spin].y,
                        o.uu[this.select_spin].z,
                        this.getSounds(o.uu[this.select_spin].type),
                        !1,
                        0,
                        !1
                      );
                    let n = null;
                    for (let e = 0; e < 3; e++)
                      this.g_slots[this.select_spin].reels[e].destroy(),
                        (n = mp.game.object.getObjectOffsetFromCoords(
                          o.uu[this.select_spin].x,
                          o.uu[this.select_spin].y,
                          o.uu[this.select_spin].z,
                          o.uu[this.select_spin].rz,
                          o.BH[e][0],
                          o.BH[e][1],
                          o.BH[e][2]
                        )),
                        (this.g_slots[this.select_spin].reels[e] =
                          mp.objects.new(
                            mp.game.joaat(
                              "vw_prop_casino_slot_0" +
                                o.uu[this.select_spin].type +
                                "b_reels"
                            ),
                            new mp.Vector3(n.x, n.y, n.z),
                            {
                              rotation: new mp.Vector3(
                                2.3,
                                0,
                                o.uu[this.select_spin].rz
                              ),
                            }
                          )),
                        (this.g_slots[this.select_spin].spinning[e] = !0);
                    await a.g.wait(3e3),
                      (this.g_slots[this.select_spin].spinning[0] = null),
                      this.g_slots[this.select_spin].reels[0].destroy();
                    let s = mp.game.object.getObjectOffsetFromCoords(
                      o.uu[this.select_spin].x,
                      o.uu[this.select_spin].y,
                      o.uu[this.select_spin].z,
                      o.uu[this.select_spin].rz,
                      o.BH[0][0],
                      o.BH[0][1],
                      o.BH[0][2]
                    );
                    (this.g_slots[this.select_spin].reels[0] = mp.objects.new(
                      mp.game.joaat(
                        "vw_prop_casino_slot_0" +
                          o.uu[this.select_spin].type +
                          "a_reels"
                      ),
                      new mp.Vector3(s.x, s.y, s.z),
                      {
                        rotation: new mp.Vector3(
                          e,
                          0,
                          o.uu[this.select_spin].rz
                        ),
                      }
                    )),
                      await a.g.wait(3e3),
                      (this.g_slots[this.select_spin].spinning[1] = null),
                      this.g_slots[this.select_spin].reels[1].destroy(),
                      (s = mp.game.object.getObjectOffsetFromCoords(
                        o.uu[this.select_spin].x,
                        o.uu[this.select_spin].y,
                        o.uu[this.select_spin].z,
                        o.uu[this.select_spin].rz,
                        o.BH[1][0],
                        o.BH[1][1],
                        o.BH[1][2]
                      )),
                      (this.g_slots[this.select_spin].reels[1] = mp.objects.new(
                        mp.game.joaat(
                          "vw_prop_casino_slot_0" +
                            o.uu[this.select_spin].type +
                            "a_reels"
                        ),
                        new mp.Vector3(s.x, s.y, s.z),
                        {
                          rotation: new mp.Vector3(
                            t,
                            0,
                            o.uu[this.select_spin].rz
                          ),
                        }
                      )),
                      await a.g.wait(3e3),
                      (this.g_slots[this.select_spin].spinning[2] = null),
                      this.g_slots[this.select_spin].reels[2].destroy(),
                      (s = mp.game.object.getObjectOffsetFromCoords(
                        o.uu[this.select_spin].x,
                        o.uu[this.select_spin].y,
                        o.uu[this.select_spin].z,
                        o.uu[this.select_spin].rz,
                        o.BH[2][0],
                        o.BH[2][1],
                        o.BH[2][2]
                      )),
                      (this.g_slots[this.select_spin].reels[2] = mp.objects.new(
                        mp.game.joaat(
                          "vw_prop_casino_slot_0" +
                            o.uu[this.select_spin].type +
                            "a_reels"
                        ),
                        new mp.Vector3(s.x, s.y, s.z),
                        {
                          rotation: new mp.Vector3(
                            i + 0.28,
                            0,
                            o.uu[this.select_spin].rz
                          ),
                        }
                      ));
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "casino/spin",
                    "spin",
                    e.toString()
                  );
                }
              }
              render() {
                try {
                  if (null != this.select_spin && !this.can_bet) {
                    let e = null;
                    for (let t = 0; t < 3; t++)
                      this.g_slots[this.select_spin].spinning[t] &&
                        ((e = this.g_slots[this.select_spin].reels[t].rotation),
                        (this.g_slots[this.select_spin].reels[t].rotation =
                          new mp.Vector3(e.x + 7, 0, e.z)));
                  }
                  if (this.freeze_player)
                    for (let e = 6; e <= 16; e++)
                      mp.game.controls.disableAllControlActions(e);
                } catch (e) {
                  if (
                    new Date().getTime() - a.g.trycatchtime["casino/spin"] <
                    6e4
                  )
                    return;
                  (a.g.trycatchtime["casino/spin"] = new Date().getTime()),
                    mp.events.callRemote(
                      "client_trycatch",
                      "casino/spin",
                      "render",
                      e.toString()
                    );
                }
              }
              clear_player_data() {
                (this.select_spin = null),
                  (this.nearest_spin = null),
                  (this.can_bet = !1),
                  (this.render_cam = !1),
                  (this.freeze_player = !1);
              }
              press_key_e() {
                try {
                  if (a.g.localplayer.isDead() || mp.gui.cursor.visible)
                    return !1;
                  if (null != this.select_spin)
                    return void a.g.binderFunctions.spinExit();
                  if (null == this.select_spin && null != this.nearest_spin) {
                    (this.freeze_player = !0),
                      (this.select_spin = this.nearest_spin),
                      setTimeout(() => {
                        this.freeze_player = !1;
                      }, 200);
                    const e = mp.game.object.getObjectOffsetFromCoords(
                      o.uu[this.nearest_spin].x,
                      o.uu[this.nearest_spin].y,
                      o.uu[this.nearest_spin].z,
                      o.uu[this.nearest_spin].rz,
                      -0.48,
                      -1.1,
                      1
                    );
                    return void mp.events.callRemote(
                      "server.spin.OCCUPY_SLOT",
                      this.nearest_spin,
                      e.x,
                      e.y,
                      e.z,
                      o.uu[this.nearest_spin].rz
                    );
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "casino/spin",
                    "press_key_e",
                    e.toString()
                  );
                }
              }
              on_enter_colshape(e) {
                try {
                  null != e.casino_slot_id &&
                    null == this.select_spin &&
                    ((this.nearest_spin = e.casino_slot_id),
                    mp.game.audio.playSound(
                      -1,
                      "BACK",
                      "HUD_AMMO_SHOP_SOUNDSET",
                      !0,
                      0,
                      !0
                    ),
                    mp.game.graphics.notify(
                      `~g~E~s~ сыграть в ${
                        o.v3[o.uu[this.nearest_spin].type - 1]
                      }`
                    ));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "casino/spin",
                    "on_enter_colshape",
                    e.toString()
                  );
                }
              }
              on_leave_colshape(e) {
                try {
                  null != e.casino_slot_id && (this.nearest_spin = null);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "casino/spin",
                    "on_leave_colshape",
                    e.toString()
                  );
                }
              }
              init() {
                try {
                  for (let e = 1; e <= 8; e++)
                    mp.game.entity.createModelHideExcludingScriptObjects(
                      1140.42,
                      244.32,
                      -51.04,
                      300,
                      mp.game.joaat("vw_prop_casino_slot_0" + e + "a"),
                      !0
                    );
                  for (let e = 1; e <= 8; e++)
                    mp.game.entity.createModelHideExcludingScriptObjects(
                      1127.1312255859375,
                      254.82090759277344,
                      -50.4407958984375,
                      300,
                      mp.game.joaat(`vw_prop_casino_slot_0${e}a`),
                      !0
                    );
                  for (let t = 0; t < o.uu.length; t++) {
                    (this.g_slots[t] = { spinning: [] }),
                      (this.g_slots[t].slot = mp.objects.new(
                        mp.game.joaat(`vw_prop_casino_slot_0${o.uu[t].type}a`),
                        new mp.Vector3(o.uu[t].x, o.uu[t].y, o.uu[t].z),
                        { rotation: new mp.Vector3(0, 0, o.uu[t].rz) }
                      )),
                      (this.g_slots[t].reels = []);
                    let a = mp.game.object.getObjectOffsetFromCoords(
                      o.uu[t].x,
                      o.uu[t].y,
                      o.uu[t].z,
                      o.uu[t].rz,
                      0,
                      -1.5,
                      1
                    );
                    mp.colshapes.newSphere(a.x, a.y, a.z, 0.5).casino_slot_id =
                      t;
                    for (var e = 0; e < 3; e++)
                      (a = mp.game.object.getObjectOffsetFromCoords(
                        o.uu[t].x,
                        o.uu[t].y,
                        o.uu[t].z,
                        o.uu[t].rz,
                        o.BH[e][0],
                        o.BH[e][1],
                        o.BH[e][2]
                      )),
                        (this.g_slots[t].reels[e] = mp.objects.new(
                          mp.game.joaat(
                            `vw_prop_casino_slot_0${o.uu[t].type}a_reels`
                          ),
                          new mp.Vector3(a.x, a.y, a.z),
                          { rotation: new mp.Vector3(0, 0, o.uu[t].rz) }
                        ));
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "casino/spin",
                    "init",
                    e.toString()
                  );
                }
              }
            })(),
              a(6400),
              a(3979),
              a(5948);
          },
          4608: (e, t, a) => {
            a.g.barberPrices = JSON.parse(
              '{"hair":[4000,3500,3500,4500,4500,6000,4500,11000,4500,6000,6000,4000,3500,15000,7500,10000,4500,6000,6000,4000,3500,20000,7500,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,15000,10000,10000,10000,15000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000],"beard":[1200,1200,1200,1200,1200,1600,1600,1600,1200,1200,2400,2400,1200,1200,2400,2000,1200,1600,3800,3600,3600,1800,1800,2600,1200,1200,2400,2000,1200,1600,3800,3600,3600,1800,1800,2600,1200,1800,1800],"eyebrows":[1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,100],"chesthair":[1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000],"lenses":[2000,4000,4000,2000,2000,4000,2000,4000,10000,1000],"lipstick":[2000,4000,4000,2000,2000,4000,2000,4000,10000,3000],"blush":[2000,4000,4000,2000,2000,4000,2000],"makeup":[1200,1200,1200,1200,1200,1600,1600,1600,1200,1200,2400,2400,1200,1200,2400,2000,1200,1600,3800,3600,3600,1800,1800,2600,1200,1200,2400,2000,1200,1600,3800,3600,3600,1800,1800,2600,1200,1800,1800]}'
            );
          },
          3031: (e, t, a) => {
            (a.g.GTA_VER = 10),
              (a.g.getNative = function (e) {
                return o[e][GTA_VER];
              });
            const o = {
              SET_BLIP_SPRITE: {
                10: "0xDF735600A4696DAF",
                0: "0x3B815A6E8530D3A5",
                1: "0xDC0EBFC7730AA226",
                2: "0x4B4040A0EC7DBA81",
              },
              SET_BLIP_ALPHA: {
                10: "0x45FF974EEE1C8734",
                0: "0x18EC814D577B92CE",
                1: "0x1DB03C7D3DC49006",
                2: "0xF20857E4CB32A2B7",
              },
              SET_BLIP_COLOUR: {
                10: "0x03D7FB09E75D6B7E",
                0: "0xEB934A06DDA5027D",
                1: "0x71925FF3194E84CE",
                2: "0x0C71C8E276E3EC54",
              },
              SET_BLIP_FLASH_TIMER: {
                10: "0xD3CD6FD297AE87CC",
                0: "0x82F6662608C79359",
                1: "0xDAA61FC3AADFAE1D",
                2: "0xAA75C45BC4449A40",
              },
              SET_BLIP_FLASHES: {
                10: "0xB14552383D39CE3E",
                0: "0xB989C497205DF6E8",
                1: "0xC3BBD8D349129F55",
                2: "0x0A8FD2D5529E1737",
              },
              SET_BLIP_ROTATION: {
                10: "0xF87683CDF73C3F6E",
                0: "0x890D3D8F19A923CC",
                1: "0xFA3D22639F5AA493",
                2: "0xE83839908A240D2E",
              },
              REQUEST_ADDITIONAL_COLLISION_AT_COORD: {
                10: "0xC9156DC11411A9EA",
                0: "0xF48163C4935062E5",
                1: "0x199640F55E0F7596",
                2: "0x566B32CA90C28D2C",
              },
              SET_FOLLOW_PED_CAM_VIEW_MODE: {
                10: "0x5A4F9EDF1673F704",
                0: "0xBD5C3A8C424D692F",
                1: "0xA20353DB1D2AF820",
                2: "0x0B51676846D7C57B",
              },
              SET_PED_AMMO: {
                10: "0x14E56BC5B5DB6A19",
                0: "0x02B78A67FD396A42",
                1: "0xC8207C41C6D1E3CF",
                2: "0xF28A81E331A3F337",
              },
              SET_AMMO_IN_CLIP: { 10: "0xDCD2A934D65CB497" },
              GET_SELECTED_PED_WEAPON: {
                10: "0x0A6DB4965674D243",
                0: "0x58A62DEC84D1FB6F",
                1: "0x6678C142FAC881BA",
                2: "0x4D008FF908B623E2",
              },
              GIVE_WEAPON_TO_PED: {
                10: "0xBF0FD6E56C964FCB",
                0: "0xD5D9B48EB10FA2C0",
                1: "0x7D154B840BD03D00",
                2: "0x9E058151726E58DE",
              },
              REMOVE_WEAPON_FROM_PED: {
                10: "0x4899CB088EDF59B8",
                0: "0x9E47A83BAB72D2C4",
                1: "0xA48F593CC7A71FCC",
                2: "0xABBEF2EAC74A02EB",
              },
              IS_CUTSCENE_ACTIVE: {
                10: "0x991251AFC3981F84",
                0: "0x9063DC17918D346A",
                1: "0x61F9977B378C43BF",
                2: "0x6C97EEC6339FB45C",
              },
              STOP_CUTSCENE_IMMEDIATELY: {
                10: "0xD220BDD222AC4A1E",
                0: "0xF51CB58D4AD94B4C",
                1: "0xCDA9878BAC5C6D68",
                2: "0xCFA828389A0C5B6B",
              },
              GET_RANDOM_EVENT_FLAG: {
                10: "0xD2D57F1D764117B1",
                0: "0x86EEE9A2AEF6EC88",
                1: "0xD436A6CEB14BAC66",
                2: "0x17E356AF4F930A2C",
              },
              SET_RANDOM_EVENT_FLAG: {
                10: "0x971927086CFD2158",
                0: "0x4FA59397643FB016",
                1: "0xD42F50467E7AD46D",
                2: "0x980C42B833D07BB4",
              },
              GET_MISSION_FLAG: {
                10: "0xA33CDCCDA663159E",
                0: "0xD532AAF71376B5E8",
                1: "0xEFD3E4A202A0D9DA",
                2: "0x5A0744D504CC705F",
              },
              SET_MISSION_FLAG: {
                10: "0xC4301E5121A0ED73",
                0: "0xB5533C0C8A2B9BF2",
                1: "0x955FF17089AF6072",
                2: "0xBC03901A15107317",
              },
              REMOVE_ALL_PED_WEAPONS: {
                10: "0xF25DF915FA38C5F3",
                0: "0xD129A4C59BEB39B8",
                1: "0x5FF97B71C576EF53",
                2: "0x7346A36E01E18FEC",
              },
              GET_AMMO_IN_PED_WEAPON: {
                10: "0x015A522136D7F951",
                0: "0x63D43044461F40BD",
                1: "0x2406A9C8DA99D3F4",
                2: "0x5088CF774DF6D935",
              },
              SET_PED_ENABLE_WEAPON_BLOCKING: {
                10: "0x97A790315D3831FD",
                0: "0x24DF497566EDB1F0",
                1: "0xBE2214915742A0E8",
                2: "0x368E58752384E0B4",
              },
              SET_PED_CAN_SWITCH_WEAPON: {
                10: "0xED7F7EFE9FABF340",
                0: "0x00663E123FCB5041",
                1: "0xC6F259731E10AFA1",
                2: "0xA65C9B02EE3596FE",
              },
              MAKE_PED_RELOAD: {
                10: "0x20AE33F3AC9C0033",
                0: "0xB984E4455645D862",
                1: "0x480C8F4C533B9748",
                2: "0x3B920C528B54FB5F",
              },
              _SET_VEHICLE_ENGINE_POWER_MULTIPLIER: {
                10: "0x93A3996368C94158",
                0: "0x5F850CC79999947A",
                1: "0xF1E9E4CBA77681D3",
                2: "0x28C3B4214877233A",
              },
              _SET_VEHICLE_ENGINE_TORQUE_MULTIPLIER: {
                10: "0xB59E4BD37AE292DB",
                0: "0x3CFE09CFEB536C3D",
                1: "0x33C9D0B39210B35E",
                2: "0xF4A0FCE96487A10B",
              },
              GET_PLAYER_RADIO_STATION_INDEX: { 10: "0xE8AF77C4C06ADC93" },
              SET_FRONTEND_RADIO_ACTIVE: { 10: "0xF7F26C6E9CC9EBB8" },
              SET_RADIO_TO_STATION_INDEX: { 10: "0xA619B168B8A8570F" },
              REMOVE_BLIP: { 10: "0x86A652570E5F25DD" },
            };
          },
          4945: (e, t, a) => {
            a.g.tattoos = {
              torso: [
                {
                  Slots: [0, 1, 2],
                  Name: "Devil",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_000_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_000_F",
                  Price: 15e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Indian",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_001_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_001_F",
                  Price: 15e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Tiger",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_003_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_003_F",
                  Price: 15e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Eye of Providence",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_004_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_004_F",
                  Price: 15e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Owl",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_005_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_005_F",
                  Price: 15e3,
                },
                {
                  Slots: [0, 1, 2],
                  Name: "Always Ready",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_006_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_006_F",
                  Price: 15e3,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "OverWolf",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_007_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_007_F",
                  Price: 15e3,
                },
                {
                  Slots: [0, 1],
                  Name: "S.O.V.A",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_008_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_008_F",
                  Price: 15e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Filipin",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_009_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_009_F",
                  Price: 15e3,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Redskin",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_010_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_010_F",
                  Price: 15e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Dead Flowers",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_011_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_011_F",
                  Price: 15e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Deadly Rose",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_012_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_012_F",
                  Price: 15e3,
                },
                {
                  Slots: [0, 1, 2],
                  Name: "Hades",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_013_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_013_F",
                  Price: 15e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Royal",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_014_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_014_F",
                  Price: 15e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Croco",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_015_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_015_F",
                  Price: 15e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Puggy",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_016_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_016_F",
                  Price: 15e3,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Skull & Snake",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_017_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_017_F",
                  Price: 15e3,
                },
                {
                  Slots: [0, 1],
                  Name: "Dragon Lore",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_018_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_018_F",
                  Price: 15e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Flower",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_019_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_019_F",
                  Price: 15e3,
                },
                {
                  Slots: [0, 1],
                  Name: "Legion Commander",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_020_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_020_F",
                  Price: 15e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Kisa",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_021_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_021_F",
                  Price: 15e3,
                },
                {
                  Slots: [5, 6],
                  Name: "PVP",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_022_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_022_F",
                  Price: 15e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Horse",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_023_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_023_F",
                  Price: 15e3,
                },
                {
                  Slots: [0, 1],
                  Name: "Birds",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_024_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_024_F",
                  Price: 15e3,
                },
                {
                  Slots: [0, 1],
                  Name: "Dead Legion Commander",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_025_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_025_F",
                  Price: 15e3,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Demorgan",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_026_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_026_F",
                  Price: 15e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Sun Eye",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_027_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_027_F",
                  Price: 15e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Samurai",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_028_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_028_F",
                  Price: 15e3,
                },
                {
                  Slots: [0, 1, 2],
                  Name: "Warrior",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_029_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_029_F",
                  Price: 15e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Triforce",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_030_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_030_F",
                  Price: 15e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Magic Animal",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_031_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_031_F",
                  Price: 15e3,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Elephant",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_032_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_032_F",
                  Price: 15e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Lynx",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_033_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_033_F",
                  Price: 15e3,
                },
                {
                  Slots: [8],
                  Name: "Feather of the Phoenix",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_040_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_040_F",
                  Price: 15e3,
                },
                {
                  Slots: [0, 1],
                  Name: "Bloods Gang",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_041_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_041_F",
                  Price: 15e3,
                },
                {
                  Slots: [0, 1],
                  Name: "Brokers",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_042_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_042_F",
                  Price: 15e3,
                },
                {
                  Slots: [0, 1],
                  Name: "Crips Gang",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_043_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_043_F",
                  Price: 15e3,
                },
                {
                  Slots: [0, 1],
                  Name: "KJEZ",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_044_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_044_F",
                  Price: 15e3,
                },
                {
                  Slots: [0, 1],
                  Name: "Ballas Gang",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_045_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_045_F",
                  Price: 15e3,
                },
                {
                  Slots: [0, 1],
                  Name: "SF",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_046_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_046_F",
                  Price: 15e3,
                },
                {
                  Slots: [0, 1],
                  Name: "LostMC",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_047_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_047_F",
                  Price: 15e3,
                },
                {
                  Slots: [0, 1],
                  Name: "ECF",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_048_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_048_F",
                  Price: 15e3,
                },
                {
                  Slots: [0, 1],
                  Name: "719",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_049_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_049_F",
                  Price: 15e3,
                },
                {
                  Slots: [0, 1],
                  Name: "ACF",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_050_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_050_F",
                  Price: 15e3,
                },
                {
                  Slots: [3, 4],
                  Name: "Pandora",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_051_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_051_F",
                  Price: 15e3,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Fairy Wings",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_053_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_053_F",
                  Price: 15e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Mad Tiger",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_054_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_054_F",
                  Price: 15e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Motorcycle",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_055_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_055_F",
                  Price: 15e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Biker Forever",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_056_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_056_F",
                  Price: 15e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Spartan",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_057_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_057_F",
                  Price: 15e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Fast and Loud",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_058_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_058_F",
                  Price: 15e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Bang4Life",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_059_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_059_F",
                  Price: 15e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Cyber Animal",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_060_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_060_F",
                  Price: 15e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Mister Capture",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_061_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_061_F",
                  Price: 15e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Asterix",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_062_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_062_F",
                  Price: 15e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Obelix",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_063_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_063_F",
                  Price: 15e3,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Bandit",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_064_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_064_F",
                  Price: 15e3,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Miss Capture",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_065_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_065_F",
                  Price: 15e3,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Bad to the Bones",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_066_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_066_F",
                  Price: 15e3,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Bigfoot",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_023_M",
                  FemaleHash: "mpHeist3_Tat_023_F",
                  Price: 15e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Mount Chiliad",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_024_M",
                  FemaleHash: "mpHeist3_Tat_024_F",
                  Price: 15e3,
                },
                {
                  Slots: [0, 1],
                  Name: "Davis",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_025_M",
                  FemaleHash: "mpHeist3_Tat_025_F",
                  Price: 2e4,
                },
                {
                  Slots: [0, 1],
                  Name: "Dignity",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_026_M",
                  FemaleHash: "mpHeist3_Tat_026_F",
                  Price: 16e3,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Epsilon",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_027_M",
                  FemaleHash: "mpHeist3_Tat_027_F",
                  Price: 18e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Bananas Gone Bad",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_028_M",
                  FemaleHash: "mpHeist3_Tat_028_F",
                  Price: 2e4,
                },
                {
                  Slots: [2],
                  Name: "Fatal Incursion",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_029_M",
                  FemaleHash: "mpHeist3_Tat_029_F",
                  Price: 2e4,
                },
                {
                  Slots: [5, 6],
                  Name: "Howitzer",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_030_M",
                  FemaleHash: "mpHeist3_Tat_030_F",
                  Price: 15e3,
                },
                {
                  Slots: [0],
                  Name: "LS City",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_033_M",
                  FemaleHash: "mpHeist3_Tat_033_F",
                  Price: 6e3,
                },
                {
                  Slots: [1],
                  Name: "LS Panic",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_035_M",
                  FemaleHash: "mpHeist3_Tat_035_F",
                  Price: 6200,
                },
                {
                  Slots: [5, 6],
                  Name: "LS Shield",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_036_M",
                  FemaleHash: "mpHeist3_Tat_036_F",
                  Price: 2e4,
                },
                {
                  Slots: [2],
                  Name: "Ladybug",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_037_M",
                  FemaleHash: "mpHeist3_Tat_037_F",
                  Price: 6400,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Robot Bubblegum",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_038_M",
                  FemaleHash: "mpHeist3_Tat_038_F",
                  Price: 18600,
                },
                {
                  Slots: [5, 6],
                  Name: "Space Rangers",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_039_M",
                  FemaleHash: "mpHeist3_Tat_039_F",
                  Price: 18400,
                },
                {
                  Slots: [0, 1],
                  Name: "In the Pocket",
                  Dictionary: "mpvinewood_overlays",
                  MaleHash: "MP_Vinewood_Tat_000_M",
                  FemaleHash: "MP_Vinewood_Tat_000_F",
                  Price: 3e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Jackpot",
                  Dictionary: "mpvinewood_overlays",
                  MaleHash: "MP_Vinewood_Tat_001_M",
                  FemaleHash: "MP_Vinewood_Tat_001_F",
                  Price: 3350,
                },
                {
                  Slots: [0],
                  Name: "Royal Flush",
                  Dictionary: "mpvinewood_overlays",
                  MaleHash: "MP_Vinewood_Tat_003_M",
                  FemaleHash: "MP_Vinewood_Tat_003_F",
                  Price: 3700,
                },
                {
                  Slots: [5, 6],
                  Name: "Wheel of Suits",
                  Dictionary: "mpvinewood_overlays",
                  MaleHash: "MP_Vinewood_Tat_006_M",
                  FemaleHash: "MP_Vinewood_Tat_006_F",
                  Price: 4750,
                },
                {
                  Slots: [5, 6],
                  Name: "777",
                  Dictionary: "mpvinewood_overlays",
                  MaleHash: "MP_Vinewood_Tat_007_M",
                  FemaleHash: "MP_Vinewood_Tat_007_F",
                  Price: 17777,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Snake Eyes",
                  Dictionary: "mpvinewood_overlays",
                  MaleHash: "MP_Vinewood_Tat_008_M",
                  FemaleHash: "MP_Vinewood_Tat_008_F",
                  Price: 5500,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Till Death Do Us Part",
                  Dictionary: "mpvinewood_overlays",
                  MaleHash: "MP_Vinewood_Tat_009_M",
                  FemaleHash: "MP_Vinewood_Tat_009_F",
                  Price: 4e3,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Photo Finish",
                  Dictionary: "mpvinewood_overlays",
                  MaleHash: "MP_Vinewood_Tat_010_M",
                  FemaleHash: "MP_Vinewood_Tat_010_F",
                  Price: 5500,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Life's a Gamble",
                  Dictionary: "mpvinewood_overlays",
                  MaleHash: "MP_Vinewood_Tat_011_M",
                  FemaleHash: "MP_Vinewood_Tat_011_F",
                  Price: 8500,
                },
                {
                  Slots: [2],
                  Name: "Skull of Suits",
                  Dictionary: "mpvinewood_overlays",
                  MaleHash: "MP_Vinewood_Tat_012_M",
                  FemaleHash: "MP_Vinewood_Tat_012_F",
                  Price: 4750,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "The Jolly Joker",
                  Dictionary: "mpvinewood_overlays",
                  MaleHash: "MP_Vinewood_Tat_015_M",
                  FemaleHash: "MP_Vinewood_Tat_015_F",
                  Price: 4e3,
                },
                {
                  Slots: [2],
                  Name: "Rose & Aces",
                  Dictionary: "mpvinewood_overlays",
                  MaleHash: "MP_Vinewood_Tat_016_M",
                  FemaleHash: "MP_Vinewood_Tat_016_F",
                  Price: 6e3,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Roll the Dice",
                  Dictionary: "mpvinewood_overlays",
                  MaleHash: "MP_Vinewood_Tat_017_M",
                  FemaleHash: "MP_Vinewood_Tat_017_F",
                  Price: 3550,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Show Your Hand",
                  Dictionary: "mpvinewood_overlays",
                  MaleHash: "MP_Vinewood_Tat_021_M",
                  FemaleHash: "MP_Vinewood_Tat_021_F",
                  Price: 3750,
                },
                {
                  Slots: [1],
                  Name: "Blood Money",
                  Dictionary: "mpvinewood_overlays",
                  MaleHash: "MP_Vinewood_Tat_022_M",
                  FemaleHash: "MP_Vinewood_Tat_022_F",
                  Price: 5550,
                },
                {
                  Slots: [0, 1],
                  Name: "Lucky 7s",
                  Dictionary: "mpvinewood_overlays",
                  MaleHash: "MP_Vinewood_Tat_023_M",
                  FemaleHash: "MP_Vinewood_Tat_023_F",
                  Price: 6550,
                },
                {
                  Slots: [2],
                  Name: "Cash Mouth",
                  Dictionary: "mpvinewood_overlays",
                  MaleHash: "MP_Vinewood_Tat_024_M",
                  FemaleHash: "MP_Vinewood_Tat_024_F",
                  Price: 1e4,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "The Table",
                  Dictionary: "mpvinewood_overlays",
                  MaleHash: "MP_Vinewood_Tat_029_M",
                  FemaleHash: "MP_Vinewood_Tat_029_F",
                  Price: 6550,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "The Royals",
                  Dictionary: "mpvinewood_overlays",
                  MaleHash: "MP_Vinewood_Tat_030_M",
                  FemaleHash: "MP_Vinewood_Tat_030_F",
                  Price: 4550,
                },
                {
                  Slots: [2],
                  Name: "Gambling Royalty",
                  Dictionary: "mpvinewood_overlays",
                  MaleHash: "MP_Vinewood_Tat_031_M",
                  FemaleHash: "MP_Vinewood_Tat_031_F",
                  Price: 8750,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Play Your Ace",
                  Dictionary: "mpvinewood_overlays",
                  MaleHash: "MP_Vinewood_Tat_032_M",
                  FemaleHash: "MP_Vinewood_Tat_032_F",
                  Price: 12e3,
                },
                {
                  Slots: [2],
                  Name: "Refined Hustler",
                  Dictionary: "mpbusiness_overlays",
                  MaleHash: "MP_Buis_M_Stomach_000",
                  FemaleHash: "",
                  Price: 6e3,
                },
                {
                  Slots: [1],
                  Name: "Rich",
                  Dictionary: "mpbusiness_overlays",
                  MaleHash: "MP_Buis_M_Chest_000",
                  FemaleHash: "",
                  Price: 3750,
                },
                {
                  Slots: [0],
                  Name: "$$$",
                  Dictionary: "mpbusiness_overlays",
                  MaleHash: "MP_Buis_M_Chest_001",
                  FemaleHash: "",
                  Price: 3750,
                },
                {
                  Slots: [3, 4],
                  Name: "Makin' Paper",
                  Dictionary: "mpbusiness_overlays",
                  MaleHash: "MP_Buis_M_Back_000",
                  FemaleHash: "",
                  Price: 4e3,
                },
                {
                  Slots: [0, 1],
                  Name: "High Roller",
                  Dictionary: "mpbusiness_overlays",
                  MaleHash: "",
                  FemaleHash: "MP_Buis_F_Chest_000",
                  Price: 3750,
                },
                {
                  Slots: [0, 1],
                  Name: "Makin' Money",
                  Dictionary: "mpbusiness_overlays",
                  MaleHash: "",
                  FemaleHash: "MP_Buis_F_Chest_001",
                  Price: 4500,
                },
                {
                  Slots: [1],
                  Name: "Love Money",
                  Dictionary: "mpbusiness_overlays",
                  MaleHash: "",
                  FemaleHash: "MP_Buis_F_Chest_002",
                  Price: 3750,
                },
                {
                  Slots: [2],
                  Name: "Diamond Back",
                  Dictionary: "mpbusiness_overlays",
                  MaleHash: "",
                  FemaleHash: "MP_Buis_F_Stom_000",
                  Price: 6e3,
                },
                {
                  Slots: [8],
                  Name: "Santo Capra Logo",
                  Dictionary: "mpbusiness_overlays",
                  MaleHash: "",
                  FemaleHash: "MP_Buis_F_Stom_001",
                  Price: 4e3,
                },
                {
                  Slots: [8],
                  Name: "Money Bag",
                  Dictionary: "mpbusiness_overlays",
                  MaleHash: "",
                  FemaleHash: "MP_Buis_F_Stom_002",
                  Price: 4e3,
                },
                {
                  Slots: [3, 4],
                  Name: "Respect",
                  Dictionary: "mpbusiness_overlays",
                  MaleHash: "",
                  FemaleHash: "MP_Buis_F_Back_000",
                  Price: 4e3,
                },
                {
                  Slots: [3, 4],
                  Name: "Gold Digger",
                  Dictionary: "mpbusiness_overlays",
                  MaleHash: "",
                  FemaleHash: "MP_Buis_F_Back_001",
                  Price: 5e3,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Carp Outline",
                  Dictionary: "mpchristmas2_overlays",
                  MaleHash: "MP_Xmas2_M_Tat_005",
                  FemaleHash: "MP_Xmas2_F_Tat_005",
                  Price: 12500,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Carp Shaded",
                  Dictionary: "mpchristmas2_overlays",
                  MaleHash: "MP_Xmas2_M_Tat_006",
                  FemaleHash: "MP_Xmas2_F_Tat_006",
                  Price: 12500,
                },
                {
                  Slots: [1],
                  Name: "Time To Die",
                  Dictionary: "mpchristmas2_overlays",
                  MaleHash: "MP_Xmas2_M_Tat_009",
                  FemaleHash: "MP_Xmas2_F_Tat_009",
                  Price: 2250,
                },
                {
                  Slots: [5, 6],
                  Name: "Roaring Tiger",
                  Dictionary: "mpchristmas2_overlays",
                  MaleHash: "MP_Xmas2_M_Tat_011",
                  FemaleHash: "MP_Xmas2_F_Tat_011",
                  Price: 4250,
                },
                {
                  Slots: [7],
                  Name: "Lizard",
                  Dictionary: "mpchristmas2_overlays",
                  MaleHash: "MP_Xmas2_M_Tat_013",
                  FemaleHash: "MP_Xmas2_F_Tat_013",
                  Price: 4e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Japanese Warrior",
                  Dictionary: "mpchristmas2_overlays",
                  MaleHash: "MP_Xmas2_M_Tat_015",
                  FemaleHash: "MP_Xmas2_F_Tat_015",
                  Price: 4100,
                },
                {
                  Slots: [0],
                  Name: "Loose Lips Outline",
                  Dictionary: "mpchristmas2_overlays",
                  MaleHash: "MP_Xmas2_M_Tat_016",
                  FemaleHash: "MP_Xmas2_F_Tat_016",
                  Price: 4750,
                },
                {
                  Slots: [0],
                  Name: "Loose Lips Color",
                  Dictionary: "mpchristmas2_overlays",
                  MaleHash: "MP_Xmas2_M_Tat_017",
                  FemaleHash: "MP_Xmas2_F_Tat_017",
                  Price: 4750,
                },
                {
                  Slots: [0, 1],
                  Name: "Royal Dagger Outline",
                  Dictionary: "mpchristmas2_overlays",
                  MaleHash: "MP_Xmas2_M_Tat_018",
                  FemaleHash: "MP_Xmas2_F_Tat_018",
                  Price: 5e3,
                },
                {
                  Slots: [0, 1],
                  Name: "Royal Dagger Color",
                  Dictionary: "mpchristmas2_overlays",
                  MaleHash: "MP_Xmas2_M_Tat_019",
                  FemaleHash: "MP_Xmas2_F_Tat_019",
                  Price: 5e3,
                },
                {
                  Slots: [2, 8],
                  Name: "Executioner",
                  Dictionary: "mpchristmas2_overlays",
                  MaleHash: "MP_Xmas2_M_Tat_028",
                  FemaleHash: "MP_Xmas2_F_Tat_028",
                  Price: 4e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Bullet Proof",
                  Dictionary: "mpgunrunning_overlays",
                  MaleHash: "MP_Gunrunning_Tattoo_000_M",
                  FemaleHash: "MP_Gunrunning_Tattoo_000_F",
                  Price: 4e3,
                },
                {
                  Slots: [3, 4],
                  Name: "Crossed Weapons",
                  Dictionary: "mpgunrunning_overlays",
                  MaleHash: "MP_Gunrunning_Tattoo_001_M",
                  FemaleHash: "MP_Gunrunning_Tattoo_001_F",
                  Price: 4e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Butterfly Knife",
                  Dictionary: "mpgunrunning_overlays",
                  MaleHash: "MP_Gunrunning_Tattoo_009_M",
                  FemaleHash: "MP_Gunrunning_Tattoo_009_F",
                  Price: 4250,
                },
                {
                  Slots: [2],
                  Name: "Cash Money",
                  Dictionary: "mpgunrunning_overlays",
                  MaleHash: "MP_Gunrunning_Tattoo_010_M",
                  FemaleHash: "MP_Gunrunning_Tattoo_010_F",
                  Price: 6e3,
                },
                {
                  Slots: [1],
                  Name: "Dollar Daggers",
                  Dictionary: "mpgunrunning_overlays",
                  MaleHash: "MP_Gunrunning_Tattoo_012_M",
                  FemaleHash: "MP_Gunrunning_Tattoo_012_F",
                  Price: 3750,
                },
                {
                  Slots: [5, 6],
                  Name: "Wolf Insignia",
                  Dictionary: "mpgunrunning_overlays",
                  MaleHash: "MP_Gunrunning_Tattoo_013_M",
                  FemaleHash: "MP_Gunrunning_Tattoo_013_F",
                  Price: 4250,
                },
                {
                  Slots: [5, 6],
                  Name: "Backstabber",
                  Dictionary: "mpgunrunning_overlays",
                  MaleHash: "MP_Gunrunning_Tattoo_014_M",
                  FemaleHash: "MP_Gunrunning_Tattoo_014_F",
                  Price: 4250,
                },
                {
                  Slots: [0, 1],
                  Name: "Dog Tags",
                  Dictionary: "mpgunrunning_overlays",
                  MaleHash: "MP_Gunrunning_Tattoo_017_M",
                  FemaleHash: "MP_Gunrunning_Tattoo_017_F",
                  Price: 5e3,
                },
                {
                  Slots: [3, 4],
                  Name: "Dual Wield Skull",
                  Dictionary: "mpgunrunning_overlays",
                  MaleHash: "MP_Gunrunning_Tattoo_018_M",
                  FemaleHash: "MP_Gunrunning_Tattoo_018_F",
                  Price: 4250,
                },
                {
                  Slots: [5, 6],
                  Name: "Pistol Wings",
                  Dictionary: "mpgunrunning_overlays",
                  MaleHash: "MP_Gunrunning_Tattoo_019_M",
                  FemaleHash: "MP_Gunrunning_Tattoo_019_F",
                  Price: 4250,
                },
                {
                  Slots: [0, 1],
                  Name: "Crowned Weapons",
                  Dictionary: "mpgunrunning_overlays",
                  MaleHash: "MP_Gunrunning_Tattoo_020_M",
                  FemaleHash: "MP_Gunrunning_Tattoo_020_F",
                  Price: 5e3,
                },
                {
                  Slots: [5],
                  Name: "Explosive Heart",
                  Dictionary: "mpgunrunning_overlays",
                  MaleHash: "MP_Gunrunning_Tattoo_022_M",
                  FemaleHash: "MP_Gunrunning_Tattoo_022_F",
                  Price: 3750,
                },
                {
                  Slots: [0, 1],
                  Name: "Micro SMG Chain",
                  Dictionary: "mpgunrunning_overlays",
                  MaleHash: "MP_Gunrunning_Tattoo_028_M",
                  FemaleHash: "MP_Gunrunning_Tattoo_028_F",
                  Price: 4500,
                },
                {
                  Slots: [2],
                  Name: "Win Some Lose Some",
                  Dictionary: "mpgunrunning_overlays",
                  MaleHash: "MP_Gunrunning_Tattoo_029_M",
                  FemaleHash: "MP_Gunrunning_Tattoo_029_F",
                  Price: 6e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Crossed Arrows",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_000",
                  FemaleHash: "FM_Hip_F_Tat_000",
                  Price: 4250,
                },
                {
                  Slots: [1],
                  Name: "Chemistry",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_002",
                  FemaleHash: "FM_Hip_F_Tat_002",
                  Price: 3750,
                },
                {
                  Slots: [7],
                  Name: "Feather Birds",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_006",
                  FemaleHash: "FM_Hip_F_Tat_006",
                  Price: 2e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Infinity",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_011",
                  FemaleHash: "FM_Hip_F_Tat_011",
                  Price: 4250,
                },
                {
                  Slots: [5, 6],
                  Name: "Antlers",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_012",
                  FemaleHash: "FM_Hip_F_Tat_012",
                  Price: 4250,
                },
                {
                  Slots: [0, 1],
                  Name: "Boombox",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_013",
                  FemaleHash: "FM_Hip_F_Tat_013",
                  Price: 5e3,
                },
                {
                  Slots: [6],
                  Name: "Pyramid",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_024",
                  FemaleHash: "FM_Hip_F_Tat_024",
                  Price: 3750,
                },
                {
                  Slots: [5],
                  Name: "Watch Your Step",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_025",
                  FemaleHash: "FM_Hip_F_Tat_025",
                  Price: 3750,
                },
                {
                  Slots: [2, 8],
                  Name: "Sad",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_029",
                  FemaleHash: "FM_Hip_F_Tat_029",
                  Price: 6750,
                },
                {
                  Slots: [3, 4],
                  Name: "Shark Fin",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_030",
                  FemaleHash: "FM_Hip_F_Tat_030",
                  Price: 4250,
                },
                {
                  Slots: [5, 6],
                  Name: "Skateboard",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_031",
                  FemaleHash: "FM_Hip_F_Tat_031",
                  Price: 4250,
                },
                {
                  Slots: [6],
                  Name: "Paper Plane",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_032",
                  FemaleHash: "FM_Hip_F_Tat_032",
                  Price: 3750,
                },
                {
                  Slots: [0, 1],
                  Name: "Stag",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_033",
                  FemaleHash: "FM_Hip_F_Tat_033",
                  Price: 5e3,
                },
                {
                  Slots: [2, 8],
                  Name: "Sewn Heart",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_035",
                  FemaleHash: "FM_Hip_F_Tat_035",
                  Price: 6750,
                },
                {
                  Slots: [3],
                  Name: "Tooth",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_041",
                  FemaleHash: "FM_Hip_F_Tat_041",
                  Price: 4e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Triangles",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_046",
                  FemaleHash: "FM_Hip_F_Tat_046",
                  Price: 4250,
                },
                {
                  Slots: [1],
                  Name: "Cassette",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_047",
                  FemaleHash: "FM_Hip_F_Tat_047",
                  Price: 3750,
                },
                {
                  Slots: [5, 6],
                  Name: "Block Back",
                  Dictionary: "mpimportexport_overlays",
                  MaleHash: "MP_MP_ImportExport_Tat_000_M",
                  FemaleHash: "MP_MP_ImportExport_Tat_000_F",
                  Price: 4250,
                },
                {
                  Slots: [5, 6],
                  Name: "Power Plant",
                  Dictionary: "mpimportexport_overlays",
                  MaleHash: "MP_MP_ImportExport_Tat_001_M",
                  FemaleHash: "MP_MP_ImportExport_Tat_001_F",
                  Price: 4250,
                },
                {
                  Slots: [5, 6],
                  Name: "Tuned to Death",
                  Dictionary: "mpimportexport_overlays",
                  MaleHash: "MP_MP_ImportExport_Tat_002_M",
                  FemaleHash: "MP_MP_ImportExport_Tat_002_F",
                  Price: 4250,
                },
                {
                  Slots: [5, 6],
                  Name: "Serpents of Destruction",
                  Dictionary: "mpimportexport_overlays",
                  MaleHash: "MP_MP_ImportExport_Tat_009_M",
                  FemaleHash: "MP_MP_ImportExport_Tat_009_F",
                  Price: 4250,
                },
                {
                  Slots: [5, 6],
                  Name: "Take the Wheel",
                  Dictionary: "mpimportexport_overlays",
                  MaleHash: "MP_MP_ImportExport_Tat_010_M",
                  FemaleHash: "MP_MP_ImportExport_Tat_010_F",
                  Price: 4250,
                },
                {
                  Slots: [5, 6],
                  Name: "Talk Shit Get Hit",
                  Dictionary: "mpimportexport_overlays",
                  MaleHash: "MP_MP_ImportExport_Tat_011_M",
                  FemaleHash: "MP_MP_ImportExport_Tat_011_F",
                  Price: 4250,
                },
                {
                  Slots: [0],
                  Name: "King Fight",
                  Dictionary: "mplowrider_overlays",
                  MaleHash: "MP_LR_Tat_001_M",
                  FemaleHash: "MP_LR_Tat_001_F",
                  Price: 3750,
                },
                {
                  Slots: [0, 1],
                  Name: "Holy Mary",
                  Dictionary: "mplowrider_overlays",
                  MaleHash: "MP_LR_Tat_002_M",
                  FemaleHash: "MP_LR_Tat_002_F",
                  Price: 5e3,
                },
                {
                  Slots: [7],
                  Name: "Gun Mic",
                  Dictionary: "mplowrider_overlays",
                  MaleHash: "MP_LR_Tat_004_M",
                  FemaleHash: "MP_LR_Tat_004_F",
                  Price: 4e3,
                },
                {
                  Slots: [6],
                  Name: "Amazon",
                  Dictionary: "mplowrider_overlays",
                  MaleHash: "MP_LR_Tat_009_M",
                  FemaleHash: "MP_LR_Tat_009_F",
                  Price: 3750,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Bad Angel",
                  Dictionary: "mplowrider_overlays",
                  MaleHash: "MP_LR_Tat_010_M",
                  FemaleHash: "MP_LR_Tat_010_F",
                  Price: 12e3,
                },
                {
                  Slots: [1],
                  Name: "Love Gamble",
                  Dictionary: "mplowrider_overlays",
                  MaleHash: "MP_LR_Tat_013_M",
                  FemaleHash: "MP_LR_Tat_013_F",
                  Price: 3750,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Love is Blind",
                  Dictionary: "mplowrider_overlays",
                  MaleHash: "MP_LR_Tat_014_M",
                  FemaleHash: "MP_LR_Tat_014_F",
                  Price: 2250,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Sad Angel",
                  Dictionary: "mplowrider_overlays",
                  MaleHash: "MP_LR_Tat_021_M",
                  FemaleHash: "MP_LR_Tat_021_F",
                  Price: 11e3,
                },
                {
                  Slots: [1],
                  Name: "Royal Takeover",
                  Dictionary: "mplowrider_overlays",
                  MaleHash: "MP_LR_Tat_026_M",
                  FemaleHash: "MP_LR_Tat_026_F",
                  Price: 3750,
                },
                {
                  Slots: [1],
                  Name: "Turbulence",
                  Dictionary: "mpairraces_overlays",
                  MaleHash: "MP_Airraces_Tattoo_000_M",
                  FemaleHash: "MP_Airraces_Tattoo_000_F",
                  Price: 3750,
                },
                {
                  Slots: [5, 6],
                  Name: "Pilot Skull",
                  Dictionary: "mpairraces_overlays",
                  MaleHash: "MP_Airraces_Tattoo_001_M",
                  FemaleHash: "MP_Airraces_Tattoo_001_F",
                  Price: 4250,
                },
                {
                  Slots: [5, 6],
                  Name: "Winged Bombshell",
                  Dictionary: "mpairraces_overlays",
                  MaleHash: "MP_Airraces_Tattoo_002_M",
                  FemaleHash: "MP_Airraces_Tattoo_002_F",
                  Price: 4250,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Balloon Pioneer",
                  Dictionary: "mpairraces_overlays",
                  MaleHash: "MP_Airraces_Tattoo_004_M",
                  FemaleHash: "MP_Airraces_Tattoo_004_F",
                  Price: 1e4,
                },
                {
                  Slots: [5, 6],
                  Name: "Parachute Belle",
                  Dictionary: "mpairraces_overlays",
                  MaleHash: "MP_Airraces_Tattoo_005_M",
                  FemaleHash: "MP_Airraces_Tattoo_005_F",
                  Price: 4250,
                },
                {
                  Slots: [2],
                  Name: "Bombs Away",
                  Dictionary: "mpairraces_overlays",
                  MaleHash: "MP_Airraces_Tattoo_006_M",
                  FemaleHash: "MP_Airraces_Tattoo_006_F",
                  Price: 6e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Eagle Eyes",
                  Dictionary: "mpairraces_overlays",
                  MaleHash: "MP_Airraces_Tattoo_007_M",
                  FemaleHash: "MP_Airraces_Tattoo_007_F",
                  Price: 4250,
                },
                {
                  Slots: [0],
                  Name: "Demon Rider",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_000_M",
                  FemaleHash: "MP_MP_Biker_Tat_000_F",
                  Price: 3750,
                },
                {
                  Slots: [0, 1],
                  Name: "Both Barrels",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_001_M",
                  FemaleHash: "MP_MP_Biker_Tat_001_F",
                  Price: 5e3,
                },
                {
                  Slots: [2],
                  Name: "Web Rider",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_003_M",
                  FemaleHash: "MP_MP_Biker_Tat_003_F",
                  Price: 6e3,
                },
                {
                  Slots: [0, 1],
                  Name: "Made In America",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_005_M",
                  FemaleHash: "MP_MP_Biker_Tat_005_F",
                  Price: 5e3,
                },
                {
                  Slots: [3, 4],
                  Name: "Chopper Freedom",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_006_M",
                  FemaleHash: "MP_MP_Biker_Tat_006_F",
                  Price: 4e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Freedom Wheels",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_008_M",
                  FemaleHash: "MP_MP_Biker_Tat_008_F",
                  Price: 4250,
                },
                {
                  Slots: [2],
                  Name: "Skull Of Taurus",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_010_M",
                  FemaleHash: "MP_MP_Biker_Tat_010_F",
                  Price: 6250,
                },
                {
                  Slots: [5, 6],
                  Name: "R.I.P. My Brothers",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_011_M",
                  FemaleHash: "MP_MP_Biker_Tat_011_F",
                  Price: 4250,
                },
                {
                  Slots: [0, 1],
                  Name: "Demon Crossbones",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_013_M",
                  FemaleHash: "MP_MP_Biker_Tat_013_F",
                  Price: 6e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Clawed Beast",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_017_M",
                  FemaleHash: "MP_MP_Biker_Tat_017_F",
                  Price: 4250,
                },
                {
                  Slots: [1],
                  Name: "Skeletal Chopper",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_018_M",
                  FemaleHash: "MP_MP_Biker_Tat_018_F",
                  Price: 3800,
                },
                {
                  Slots: [0, 1],
                  Name: "Gruesome Talons",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_019_M",
                  FemaleHash: "MP_MP_Biker_Tat_019_F",
                  Price: 4750,
                },
                {
                  Slots: [5, 6],
                  Name: "Flaming Reaper",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_021_M",
                  FemaleHash: "MP_MP_Biker_Tat_021_F",
                  Price: 4250,
                },
                {
                  Slots: [0, 1],
                  Name: "Western MC",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_023_M",
                  FemaleHash: "MP_MP_Biker_Tat_023_F",
                  Price: 4750,
                },
                {
                  Slots: [0, 1],
                  Name: "American Dream",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_026_M",
                  FemaleHash: "MP_MP_Biker_Tat_026_F",
                  Price: 4650,
                },
                {
                  Slots: [0],
                  Name: "Bone Wrench",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_029_M",
                  FemaleHash: "MP_MP_Biker_Tat_029_F",
                  Price: 3650,
                },
                {
                  Slots: [5, 6],
                  Name: "Brothers For Life",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_030_M",
                  FemaleHash: "MP_MP_Biker_Tat_030_F",
                  Price: 4300,
                },
                {
                  Slots: [2],
                  Name: "Gear Head",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_031_M",
                  FemaleHash: "MP_MP_Biker_Tat_031_F",
                  Price: 6e3,
                },
                {
                  Slots: [0],
                  Name: "Western Eagle",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_032_M",
                  FemaleHash: "MP_MP_Biker_Tat_032_F",
                  Price: 3800,
                },
                {
                  Slots: [1],
                  Name: "Brotherhood of Bikes",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_034_M",
                  FemaleHash: "MP_MP_Biker_Tat_034_F",
                  Price: 3850,
                },
                {
                  Slots: [2],
                  Name: "Gas Guzzler",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_039_M",
                  FemaleHash: "MP_MP_Biker_Tat_039_F",
                  Price: 4850,
                },
                {
                  Slots: [0, 1],
                  Name: "No Regrets",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_041_M",
                  FemaleHash: "MP_MP_Biker_Tat_041_F",
                  Price: 5e3,
                },
                {
                  Slots: [3, 4],
                  Name: "Ride Forever",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_043_M",
                  FemaleHash: "MP_MP_Biker_Tat_043_F",
                  Price: 4100,
                },
                {
                  Slots: [0, 1],
                  Name: "Unforgiven",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_050_M",
                  FemaleHash: "MP_MP_Biker_Tat_050_F",
                  Price: 6e3,
                },
                {
                  Slots: [2],
                  Name: "Biker Mount",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_052_M",
                  FemaleHash: "MP_MP_Biker_Tat_052_F",
                  Price: 5e3,
                },
                {
                  Slots: [1],
                  Name: "Reaper Vulture",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_058_M",
                  FemaleHash: "MP_MP_Biker_Tat_058_F",
                  Price: 3750,
                },
                {
                  Slots: [1],
                  Name: "Faggio",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_059_M",
                  FemaleHash: "MP_MP_Biker_Tat_059_F",
                  Price: 3750,
                },
                {
                  Slots: [0],
                  Name: "We Are The Mods!",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_060_M",
                  FemaleHash: "MP_MP_Biker_Tat_060_F",
                  Price: 3850,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "SA Assault",
                  Dictionary: "mplowrider2_overlays",
                  MaleHash: "MP_LR_Tat_000_M",
                  FemaleHash: "MP_LR_Tat_000_F",
                  Price: 11e3,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Love the Game",
                  Dictionary: "mplowrider2_overlays",
                  MaleHash: "MP_LR_Tat_008_M",
                  FemaleHash: "MP_LR_Tat_008_F",
                  Price: 11250,
                },
                {
                  Slots: [7],
                  Name: "Lady Liberty",
                  Dictionary: "mplowrider2_overlays",
                  MaleHash: "MP_LR_Tat_011_M",
                  FemaleHash: "MP_LR_Tat_011_F",
                  Price: 4100,
                },
                {
                  Slots: [0],
                  Name: "Royal Kiss",
                  Dictionary: "mplowrider2_overlays",
                  MaleHash: "MP_LR_Tat_012_M",
                  FemaleHash: "MP_LR_Tat_012_F",
                  Price: 3750,
                },
                {
                  Slots: [2],
                  Name: "Two Face",
                  Dictionary: "mplowrider2_overlays",
                  MaleHash: "MP_LR_Tat_016_M",
                  FemaleHash: "MP_LR_Tat_016_F",
                  Price: 6100,
                },
                {
                  Slots: [1],
                  Name: "Death Behind",
                  Dictionary: "mplowrider2_overlays",
                  MaleHash: "MP_LR_Tat_019_M",
                  FemaleHash: "MP_LR_Tat_019_F",
                  Price: 3750,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Dead Pretty",
                  Dictionary: "mplowrider2_overlays",
                  MaleHash: "MP_LR_Tat_031_M",
                  FemaleHash: "MP_LR_Tat_031_F",
                  Price: 11250,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Reign Over",
                  Dictionary: "mplowrider2_overlays",
                  MaleHash: "MP_LR_Tat_032_M",
                  FemaleHash: "MP_LR_Tat_032_F",
                  Price: 11600,
                },
                {
                  Slots: [2],
                  Name: "Abstract Skull",
                  Dictionary: "mpluxe_overlays",
                  MaleHash: "MP_LUXE_TAT_003_M",
                  FemaleHash: "MP_LUXE_TAT_003_F",
                  Price: 4750,
                },
                {
                  Slots: [1],
                  Name: "Eye of the Griffin",
                  Dictionary: "mpluxe_overlays",
                  MaleHash: "MP_LUXE_TAT_007_M",
                  FemaleHash: "MP_LUXE_TAT_007_F",
                  Price: 3850,
                },
                {
                  Slots: [1],
                  Name: "Flying Eye",
                  Dictionary: "mpluxe_overlays",
                  MaleHash: "MP_LUXE_TAT_008_M",
                  FemaleHash: "MP_LUXE_TAT_008_F",
                  Price: 3800,
                },
                {
                  Slots: [0, 1],
                  Name: "Ancient Queen",
                  Dictionary: "mpluxe_overlays",
                  MaleHash: "MP_LUXE_TAT_014_M",
                  FemaleHash: "MP_LUXE_TAT_014_F",
                  Price: 4600,
                },
                {
                  Slots: [0],
                  Name: "Smoking Sisters",
                  Dictionary: "mpluxe_overlays",
                  MaleHash: "MP_LUXE_TAT_015_M",
                  FemaleHash: "MP_LUXE_TAT_015_F",
                  Price: 3750,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Feather Mural",
                  Dictionary: "mpluxe_overlays",
                  MaleHash: "MP_LUXE_TAT_024_M",
                  FemaleHash: "MP_LUXE_TAT_024_F",
                  Price: 12250,
                },
                {
                  Slots: [0],
                  Name: "The Howler",
                  Dictionary: "mpluxe2_overlays",
                  MaleHash: "MP_LUXE_TAT_002_M",
                  FemaleHash: "MP_LUXE_TAT_002_F",
                  Price: 3750,
                },
                {
                  Slots: [0, 1, 2, 8],
                  Name: "Geometric Galaxy",
                  Dictionary: "mpluxe2_overlays",
                  MaleHash: "MP_LUXE_TAT_012_M",
                  FemaleHash: "MP_LUXE_TAT_012_F",
                  Price: 14e3,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Cloaked Angel",
                  Dictionary: "mpluxe2_overlays",
                  MaleHash: "MP_LUXE_TAT_022_M",
                  FemaleHash: "MP_LUXE_TAT_022_F",
                  Price: 12e3,
                },
                {
                  Slots: [0],
                  Name: "Reaper Sway",
                  Dictionary: "mpluxe2_overlays",
                  MaleHash: "MP_LUXE_TAT_025_M",
                  FemaleHash: "MP_LUXE_TAT_025_F",
                  Price: 3750,
                },
                {
                  Slots: [1],
                  Name: "Cobra Dawn",
                  Dictionary: "mpluxe2_overlays",
                  MaleHash: "MP_LUXE_TAT_027_M",
                  FemaleHash: "MP_LUXE_TAT_027_F",
                  Price: 3800,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Geometric Design T",
                  Dictionary: "mpluxe2_overlays",
                  MaleHash: "MP_LUXE_TAT_029_M",
                  FemaleHash: "MP_LUXE_TAT_029_F",
                  Price: 11500,
                },
                {
                  Slots: [1],
                  Name: "Bless The Dead",
                  Dictionary: "mpsmuggler_overlays",
                  MaleHash: "MP_Smuggler_Tattoo_000_M",
                  FemaleHash: "MP_Smuggler_Tattoo_000_F",
                  Price: 3e3,
                },
                {
                  Slots: [2],
                  Name: "Dead Lies",
                  Dictionary: "mpsmuggler_overlays",
                  MaleHash: "MP_Smuggler_Tattoo_002_M",
                  FemaleHash: "MP_Smuggler_Tattoo_002_F",
                  Price: 6e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Give Nothing Back",
                  Dictionary: "mpsmuggler_overlays",
                  MaleHash: "MP_Smuggler_Tattoo_003_M",
                  FemaleHash: "MP_Smuggler_Tattoo_003_F",
                  Price: 4e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Never Surrender",
                  Dictionary: "mpsmuggler_overlays",
                  MaleHash: "MP_Smuggler_Tattoo_006_M",
                  FemaleHash: "MP_Smuggler_Tattoo_006_F",
                  Price: 4100,
                },
                {
                  Slots: [0, 1],
                  Name: "No Honor",
                  Dictionary: "mpsmuggler_overlays",
                  MaleHash: "MP_Smuggler_Tattoo_007_M",
                  FemaleHash: "MP_Smuggler_Tattoo_007_F",
                  Price: 4500,
                },
                {
                  Slots: [5, 6],
                  Name: "Tall Ship Conflict",
                  Dictionary: "mpsmuggler_overlays",
                  MaleHash: "MP_Smuggler_Tattoo_009_M",
                  FemaleHash: "MP_Smuggler_Tattoo_009_F",
                  Price: 4e3,
                },
                {
                  Slots: [2],
                  Name: "See You In Hell",
                  Dictionary: "mpsmuggler_overlays",
                  MaleHash: "MP_Smuggler_Tattoo_010_M",
                  FemaleHash: "MP_Smuggler_Tattoo_010_F",
                  Price: 6e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Torn Wings",
                  Dictionary: "mpsmuggler_overlays",
                  MaleHash: "MP_Smuggler_Tattoo_013_M",
                  FemaleHash: "MP_Smuggler_Tattoo_013_F",
                  Price: 4100,
                },
                {
                  Slots: [2],
                  Name: "Jolly Roger",
                  Dictionary: "mpsmuggler_overlays",
                  MaleHash: "MP_Smuggler_Tattoo_015_M",
                  FemaleHash: "MP_Smuggler_Tattoo_015_F",
                  Price: 6e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Skull Compass",
                  Dictionary: "mpsmuggler_overlays",
                  MaleHash: "MP_Smuggler_Tattoo_016_M",
                  FemaleHash: "MP_Smuggler_Tattoo_016_F",
                  Price: 4e3,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Framed Tall Ship",
                  Dictionary: "mpsmuggler_overlays",
                  MaleHash: "MP_Smuggler_Tattoo_017_M",
                  FemaleHash: "MP_Smuggler_Tattoo_017_F",
                  Price: 11500,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Finders Keepers",
                  Dictionary: "mpsmuggler_overlays",
                  MaleHash: "MP_Smuggler_Tattoo_018_M",
                  FemaleHash: "MP_Smuggler_Tattoo_018_F",
                  Price: 12e3,
                },
                {
                  Slots: [0],
                  Name: "Lost At Sea",
                  Dictionary: "mpsmuggler_overlays",
                  MaleHash: "MP_Smuggler_Tattoo_019_M",
                  FemaleHash: "MP_Smuggler_Tattoo_019_F",
                  Price: 3750,
                },
                {
                  Slots: [0, 1],
                  Name: "Dead Tales",
                  Dictionary: "mpsmuggler_overlays",
                  MaleHash: "MP_Smuggler_Tattoo_021_M",
                  FemaleHash: "MP_Smuggler_Tattoo_021_F",
                  Price: 4e3,
                },
                {
                  Slots: [5],
                  Name: "X Marks The Spot",
                  Dictionary: "mpsmuggler_overlays",
                  MaleHash: "MP_Smuggler_Tattoo_022_M",
                  FemaleHash: "MP_Smuggler_Tattoo_022_F",
                  Price: 3750,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Pirate Captain",
                  Dictionary: "mpsmuggler_overlays",
                  MaleHash: "MP_Smuggler_Tattoo_024_M",
                  FemaleHash: "MP_Smuggler_Tattoo_024_F",
                  Price: 11500,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Claimed By The Beast",
                  Dictionary: "mpsmuggler_overlays",
                  MaleHash: "MP_Smuggler_Tattoo_025_M",
                  FemaleHash: "MP_Smuggler_Tattoo_025_F",
                  Price: 11500,
                },
                {
                  Slots: [0, 1],
                  Name: "Wheels of Death",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_011_M",
                  FemaleHash: "MP_MP_Stunt_Tat_011_F",
                  Price: 4e3,
                },
                {
                  Slots: [7],
                  Name: "Punk Biker",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_012_M",
                  FemaleHash: "MP_MP_Stunt_Tat_012_F",
                  Price: 4e3,
                },
                {
                  Slots: [2],
                  Name: "Bat Cat of Spades",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_014_M",
                  FemaleHash: "MP_MP_Stunt_Tat_014_F",
                  Price: 6100,
                },
                {
                  Slots: [0],
                  Name: "Vintage Bully",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_018_M",
                  FemaleHash: "MP_MP_Stunt_Tat_018_F",
                  Price: 3750,
                },
                {
                  Slots: [1],
                  Name: "Engine Heart",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_019_M",
                  FemaleHash: "MP_MP_Stunt_Tat_019_F",
                  Price: 3750,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Road Kill",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_024_M",
                  FemaleHash: "MP_MP_Stunt_Tat_024_F",
                  Price: 1e4,
                },
                {
                  Slots: [5, 6],
                  Name: "Winged Wheel",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_026_M",
                  FemaleHash: "MP_MP_Stunt_Tat_026_F",
                  Price: 4e3,
                },
                {
                  Slots: [0],
                  Name: "Punk Road Hog",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_027_M",
                  FemaleHash: "MP_MP_Stunt_Tat_027_F",
                  Price: 3750,
                },
                {
                  Slots: [3, 4],
                  Name: "Majestic Finish",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_029_M",
                  FemaleHash: "MP_MP_Stunt_Tat_029_F",
                  Price: 4e3,
                },
                {
                  Slots: [6],
                  Name: "Man's Ruin",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_030_M",
                  FemaleHash: "MP_MP_Stunt_Tat_030_F",
                  Price: 4100,
                },
                {
                  Slots: [1],
                  Name: "Sugar Skull Trucker",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_033_M",
                  FemaleHash: "MP_MP_Stunt_Tat_033_F",
                  Price: 3750,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Feather Road Kill",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_034_M",
                  FemaleHash: "MP_MP_Stunt_Tat_034_F",
                  Price: 3250,
                },
                {
                  Slots: [5],
                  Name: "Big Grills",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_037_M",
                  FemaleHash: "MP_MP_Stunt_Tat_037_F",
                  Price: 3750,
                },
                {
                  Slots: [5, 6],
                  Name: "Monkey Chopper",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_040_M",
                  FemaleHash: "MP_MP_Stunt_Tat_040_F",
                  Price: 4e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Brapp",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_041_M",
                  FemaleHash: "MP_MP_Stunt_Tat_041_F",
                  Price: 4e3,
                },
                {
                  Slots: [0, 1],
                  Name: "Ram Skull",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_044_M",
                  FemaleHash: "MP_MP_Stunt_Tat_044_F",
                  Price: 4e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Full Throttle",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_046_M",
                  FemaleHash: "MP_MP_Stunt_Tat_046_F",
                  Price: 4100,
                },
                {
                  Slots: [5, 6],
                  Name: "Racing Doll",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_048_M",
                  FemaleHash: "MP_MP_Stunt_Tat_048_F",
                  Price: 4100,
                },
                {
                  Slots: [0],
                  Name: "Blackjack",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_Award_M_003",
                  FemaleHash: "FM_Tat_Award_F_003",
                  Price: 3800,
                },
                {
                  Slots: [2],
                  Name: "Hustler",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_Award_M_004",
                  FemaleHash: "FM_Tat_Award_F_004",
                  Price: 6250,
                },
                {
                  Slots: [5, 6],
                  Name: "Angel",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_Award_M_005",
                  FemaleHash: "FM_Tat_Award_F_005",
                  Price: 4100,
                },
                {
                  Slots: [3, 4],
                  Name: "Los Santos Customs",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_Award_M_008",
                  FemaleHash: "FM_Tat_Award_F_008",
                  Price: 16400,
                },
                {
                  Slots: [1],
                  Name: "Blank Scroll",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_Award_M_011",
                  FemaleHash: "FM_Tat_Award_F_011",
                  Price: 3800,
                },
                {
                  Slots: [1],
                  Name: "Embellished Scroll",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_Award_M_012",
                  FemaleHash: "FM_Tat_Award_F_012",
                  Price: 3800,
                },
                {
                  Slots: [1],
                  Name: "Seven Deadly Sins",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_Award_M_013",
                  FemaleHash: "FM_Tat_Award_F_013",
                  Price: 3800,
                },
                {
                  Slots: [3, 4],
                  Name: "Trust No One",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_Award_M_014",
                  FemaleHash: "FM_Tat_Award_F_014",
                  Price: 4100,
                },
                {
                  Slots: [5, 6],
                  Name: "Clown",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_Award_M_016",
                  FemaleHash: "FM_Tat_Award_F_016",
                  Price: 4e3,
                },
                {
                  Slots: [5, 6],
                  Name: "Clown and Gun",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_Award_M_017",
                  FemaleHash: "FM_Tat_Award_F_017",
                  Price: 4100,
                },
                {
                  Slots: [5, 6],
                  Name: "Clown Dual Wield",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_Award_M_018",
                  FemaleHash: "FM_Tat_Award_F_018",
                  Price: 4e3,
                },
                {
                  Slots: [6, 6],
                  Name: "Clown Dual Wield Dollars",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_Award_M_019",
                  FemaleHash: "FM_Tat_Award_F_019",
                  Price: 4100,
                },
                {
                  Slots: [2],
                  Name: "Faith T",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_004",
                  FemaleHash: "FM_Tat_F_004",
                  Price: 6100,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Skull on the Cross",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_009",
                  FemaleHash: "FM_Tat_F_009",
                  Price: 12e3,
                },
                {
                  Slots: [1],
                  Name: "LS Flames",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_010",
                  FemaleHash: "FM_Tat_F_010",
                  Price: 3800,
                },
                {
                  Slots: [5],
                  Name: "LS Script",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_011",
                  FemaleHash: "FM_Tat_F_011",
                  Price: 4100,
                },
                {
                  Slots: [2],
                  Name: "Los Santos Bills",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_012",
                  FemaleHash: "FM_Tat_F_012",
                  Price: 6e3,
                },
                {
                  Slots: [6],
                  Name: "Eagle and Serpent",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_013",
                  FemaleHash: "FM_Tat_F_013",
                  Price: 4100,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Evil Clown",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_016",
                  FemaleHash: "FM_Tat_F_016",
                  Price: 10750,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "The Wages of Sin",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_019",
                  FemaleHash: "FM_Tat_F_019",
                  Price: 10500,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Dragon T",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_020",
                  FemaleHash: "FM_Tat_F_020",
                  Price: 1e4,
                },
                {
                  Slots: [0, 1, 2, 8],
                  Name: "Flaming Cross",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_024",
                  FemaleHash: "FM_Tat_F_024",
                  Price: 12750,
                },
                {
                  Slots: [0],
                  Name: "LS Bold",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_025",
                  FemaleHash: "FM_Tat_F_025",
                  Price: 3800,
                },
                {
                  Slots: [2, 8],
                  Name: "Trinity Knot",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_029",
                  FemaleHash: "FM_Tat_F_029",
                  Price: 8100,
                },
                {
                  Slots: [5, 6],
                  Name: "Lucky Celtic Dogs",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_030",
                  FemaleHash: "FM_Tat_F_030",
                  Price: 4100,
                },
                {
                  Slots: [1],
                  Name: "Flaming Shamrock",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_034",
                  FemaleHash: "FM_Tat_F_034",
                  Price: 3700,
                },
                {
                  Slots: [2],
                  Name: "Way of the Gun",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_036",
                  FemaleHash: "FM_Tat_F_036",
                  Price: 6e3,
                },
                {
                  Slots: [0, 1],
                  Name: "Stone Cross",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_044",
                  FemaleHash: "FM_Tat_F_044",
                  Price: 4100,
                },
                {
                  Slots: [3, 4, 5, 6],
                  Name: "Skulls and Rose",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_045",
                  FemaleHash: "FM_Tat_F_045",
                  Price: 10500,
                },
              ],
              head: [
                {
                  Slots: [10],
                  Name: "Leo Skin 1",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_035_M",
                  FemaleHash: "",
                  Price: 15e3,
                },
                {
                  Slots: [11],
                  Name: "Leo Skin 2",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_036_M",
                  FemaleHash: "",
                  Price: 15e3,
                },
                {
                  Slots: [2],
                  Name: "Dragon Lore",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_038_M",
                  FemaleHash: "",
                  Price: 15e3,
                },
                {
                  Slots: [3],
                  Name: "Feather of the Phoenix",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_039_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_039_F",
                  Price: 15e3,
                },
                {
                  Slots: [6],
                  Name: "Five Stars",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_000_M",
                  FemaleHash: "mpHeist3_Tat_000_F",
                  Price: 2e3,
                },
                {
                  Slots: [5],
                  Name: "Ace of Spades",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_001_M",
                  FemaleHash: "mpHeist3_Tat_001_F",
                  Price: 2e3,
                },
                {
                  Slots: [0],
                  Name: "Animal",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_002_M",
                  FemaleHash: "mpHeist3_Tat_002_F",
                  Price: 5e3,
                },
                {
                  Slots: [6],
                  Name: "Assault Rifle",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_003_M",
                  FemaleHash: "mpHeist3_Tat_003_F",
                  Price: 4e3,
                },
                {
                  Slots: [7],
                  Name: "Bandage",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_004_M",
                  FemaleHash: "mpHeist3_Tat_004_F",
                  Price: 3500,
                },
                {
                  Slots: [5],
                  Name: "Spades",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_005_M",
                  FemaleHash: "mpHeist3_Tat_005_F",
                  Price: 2800,
                },
                {
                  Slots: [8],
                  Name: "Crowned",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_006_M",
                  FemaleHash: "mpHeist3_Tat_006_F",
                  Price: 3500,
                },
                {
                  Slots: [7, 8],
                  Name: "Two Horns",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_007_M",
                  FemaleHash: "mpHeist3_Tat_007_F",
                  Price: 4500,
                },
                {
                  Slots: [2],
                  Name: "Ice Cream",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_008_M",
                  FemaleHash: "mpHeist3_Tat_008_F",
                  Price: 4500,
                },
                {
                  Slots: [4],
                  Name: "Knifed",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_009_M",
                  FemaleHash: "mpHeist3_Tat_009_F",
                  Price: 4500,
                },
                {
                  Slots: [4],
                  Name: "Green Leaf",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_010_M",
                  FemaleHash: "mpHeist3_Tat_010_F",
                  Price: 3500,
                },
                {
                  Slots: [4],
                  Name: "Lipstick Kiss",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_011_M",
                  FemaleHash: "mpHeist3_Tat_011_F",
                  Price: 4500,
                },
                {
                  Slots: [4],
                  Name: "Razor Pop",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_012_M",
                  FemaleHash: "mpHeist3_Tat_012_F",
                  Price: 4500,
                },
                {
                  Slots: [7],
                  Name: "LS Star",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_013_M",
                  FemaleHash: "mpHeist3_Tat_013_F",
                  Price: 3500,
                },
                {
                  Slots: [0],
                  Name: "LS Wings",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_014_M",
                  FemaleHash: "mpHeist3_Tat_014_F",
                  Price: 4500,
                },
                {
                  Slots: [7],
                  Name: "On/Off",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_015_M",
                  FemaleHash: "mpHeist3_Tat_015_F",
                  Price: 2800,
                },
                {
                  Slots: [6],
                  Name: "Sleepy",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_016_M",
                  FemaleHash: "mpHeist3_Tat_016_F",
                  Price: 4500,
                },
                {
                  Slots: [1],
                  Name: "Space Monkey",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_017_M",
                  FemaleHash: "mpHeist3_Tat_017_F",
                  Price: 4e3,
                },
                {
                  Slots: [9],
                  Name: "Stitches",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_018_M",
                  FemaleHash: "mpHeist3_Tat_018_F",
                  Price: 4e3,
                },
                {
                  Slots: [2],
                  Name: "Teddy Bear",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_019_M",
                  FemaleHash: "mpHeist3_Tat_019_F",
                  Price: 4e3,
                },
                {
                  Slots: [4],
                  Name: "UFO",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_020_M",
                  FemaleHash: "mpHeist3_Tat_020_F",
                  Price: 4e3,
                },
                {
                  Slots: [7],
                  Name: "Wanted",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_021_M",
                  FemaleHash: "mpHeist3_Tat_021_F",
                  Price: 4e3,
                },
                {
                  Slots: [6],
                  Name: "Thog's Sword",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_022_M",
                  FemaleHash: "mpHeist3_Tat_022_F",
                  Price: 4e3,
                },
                {
                  Slots: [4],
                  Name: "Hearts",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_042_M",
                  FemaleHash: "mpHeist3_Tat_042_F",
                  Price: 3500,
                },
                {
                  Slots: [4],
                  Name: "Diamonds",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_043_M",
                  FemaleHash: "mpHeist3_Tat_043_F",
                  Price: 3500,
                },
                {
                  Slots: [4],
                  Name: "Clubs",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_044_M",
                  FemaleHash: "mpHeist3_Tat_044_F",
                  Price: 3500,
                },
                {
                  Slots: [0],
                  Name: "Cash is King",
                  Dictionary: "mpbusiness_overlays",
                  MaleHash: "MP_Buis_M_Neck_000",
                  FemaleHash: "",
                  Price: 3750,
                },
                {
                  Slots: [1],
                  Name: "Bold Dollar Sign",
                  Dictionary: "mpbusiness_overlays",
                  MaleHash: "MP_Buis_M_Neck_001",
                  FemaleHash: "",
                  Price: 3750,
                },
                {
                  Slots: [2],
                  Name: "Script Dollar Sign",
                  Dictionary: "mpbusiness_overlays",
                  MaleHash: "MP_Buis_M_Neck_002",
                  FemaleHash: "",
                  Price: 3750,
                },
                {
                  Slots: [3],
                  Name: "$100",
                  Dictionary: "mpbusiness_overlays",
                  MaleHash: "MP_Buis_M_Neck_003",
                  FemaleHash: "",
                  Price: 3750,
                },
                {
                  Slots: [1],
                  Name: "Val-de-Grace Logo",
                  Dictionary: "mpbusiness_overlays",
                  MaleHash: "",
                  FemaleHash: "MP_Buis_F_Neck_000",
                  Price: 3750,
                },
                {
                  Slots: [2],
                  Name: "Money Rose",
                  Dictionary: "mpbusiness_overlays",
                  MaleHash: "",
                  FemaleHash: "MP_Buis_F_Neck_001",
                  Price: 3750,
                },
                {
                  Slots: [2],
                  Name: "Los Muertos",
                  Dictionary: "mpchristmas2_overlays",
                  MaleHash: "MP_Xmas2_M_Tat_007",
                  FemaleHash: "MP_Xmas2_F_Tat_007",
                  Price: 3750,
                },
                {
                  Slots: [1],
                  Name: "Snake Head Outline",
                  Dictionary: "mpchristmas2_overlays",
                  MaleHash: "MP_Xmas2_M_Tat_024",
                  FemaleHash: "MP_Xmas2_F_Tat_024",
                  Price: 3750,
                },
                {
                  Slots: [1],
                  Name: "Snake Head Color",
                  Dictionary: "mpchristmas2_overlays",
                  MaleHash: "MP_Xmas2_M_Tat_025",
                  FemaleHash: "MP_Xmas2_F_Tat_025",
                  Price: 3750,
                },
                {
                  Slots: [2],
                  Name: "Beautiful Death",
                  Dictionary: "mpchristmas2_overlays",
                  MaleHash: "MP_Xmas2_M_Tat_029",
                  FemaleHash: "MP_Xmas2_F_Tat_029",
                  Price: 3750,
                },
                {
                  Slots: [1],
                  Name: "Lock & Load",
                  Dictionary: "mpgunrunning_overlays",
                  MaleHash: "MP_Gunrunning_Tattoo_003_M",
                  FemaleHash: "MP_Gunrunning_Tattoo_003_F",
                  Price: 3750,
                },
                {
                  Slots: [2],
                  Name: "Beautiful Eye",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_005",
                  FemaleHash: "FM_Hip_F_Tat_005",
                  Price: 3750,
                },
                {
                  Slots: [1],
                  Name: "Geo Fox",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_021",
                  FemaleHash: "FM_Hip_F_Tat_021",
                  Price: 3750,
                },
                {
                  Slots: [5],
                  Name: "Morbid Arachnid",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_009_M",
                  FemaleHash: "MP_MP_Biker_Tat_009_F",
                  Price: 3750,
                },
                {
                  Slots: [2],
                  Name: "FTW",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_038_M",
                  FemaleHash: "MP_MP_Biker_Tat_038_F",
                  Price: 3750,
                },
                {
                  Slots: [1],
                  Name: "Western Stylized",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_051_M",
                  FemaleHash: "MP_MP_Biker_Tat_051_F",
                  Price: 3750,
                },
                {
                  Slots: [1],
                  Name: "Sinner",
                  Dictionary: "mpsmuggler_overlays",
                  MaleHash: "MP_Smuggler_Tattoo_011_M",
                  FemaleHash: "MP_Smuggler_Tattoo_011_F",
                  Price: 3750,
                },
                {
                  Slots: [2],
                  Name: "Thief",
                  Dictionary: "mpsmuggler_overlays",
                  MaleHash: "MP_Smuggler_Tattoo_012_M",
                  FemaleHash: "MP_Smuggler_Tattoo_012_F",
                  Price: 3750,
                },
                {
                  Slots: [1],
                  Name: "Stunt Skull",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_000_M",
                  FemaleHash: "MP_MP_Stunt_Tat_000_F",
                  Price: 3750,
                },
                {
                  Slots: [5],
                  Name: "Scorpion",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_004_M",
                  FemaleHash: "MP_MP_Stunt_Tat_004_F",
                  Price: 2200,
                },
                {
                  Slots: [2],
                  Name: "Toxic Spider",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_006_M",
                  FemaleHash: "MP_MP_Stunt_Tat_006_F",
                  Price: 2200,
                },
                {
                  Slots: [2],
                  Name: "Bat Wheel",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_017_M",
                  FemaleHash: "MP_MP_Stunt_Tat_017_F",
                  Price: 2200,
                },
                {
                  Slots: [2],
                  Name: "Flaming Quad",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_042_M",
                  FemaleHash: "MP_MP_Stunt_Tat_042_F",
                  Price: 3750,
                },
              ],
              leftarm: [
                {
                  Slots: [2],
                  Name: "Deamon",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_002_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_002_F",
                  Price: 15e3,
                },
                {
                  Slots: [2],
                  Name: "Sea Horse",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_034_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_034_F",
                  Price: 15e3,
                },
                {
                  Slots: [2],
                  Name: "CUP4EVER",
                  Dictionary: "hstattoos_overlays",
                  MaleHash: "MP_Hstattoos_Tattoo_052_M",
                  FemaleHash: "MP_Hstattoos_Tattoo_052_F",
                  Price: 15e3,
                },
                {
                  Slots: [2],
                  Name: "Tiger Heart",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_040_M",
                  FemaleHash: "mpHeist3_Tat_040_F",
                  Price: 5e3,
                },
                {
                  Slots: [1, 2],
                  Name: "Mighty Thog",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_041_M",
                  FemaleHash: "mpHeist3_Tat_041_F",
                  Price: 27500,
                },
                {
                  Slots: [1, 2],
                  Name: "Suits",
                  Dictionary: "mpvinewood_overlays",
                  MaleHash: "MP_Vinewood_Tat_002_M",
                  FemaleHash: "MP_Vinewood_Tat_002_F",
                  Price: 5e3,
                },
                {
                  Slots: [1, 2],
                  Name: "Get Lucky",
                  Dictionary: "mpvinewood_overlays",
                  MaleHash: "MP_Vinewood_Tat_005_M",
                  FemaleHash: "MP_Vinewood_Tat_005_F",
                  Price: 6e3,
                },
                {
                  Slots: [1],
                  Name: "Vice",
                  Dictionary: "mpvinewood_overlays",
                  MaleHash: "MP_Vinewood_Tat_014_M",
                  FemaleHash: "MP_Vinewood_Tat_014_F",
                  Price: 3800,
                },
                {
                  Slots: [1, 2],
                  Name: "Can't Win Them All",
                  Dictionary: "mpvinewood_overlays",
                  MaleHash: "MP_Vinewood_Tat_019_M",
                  FemaleHash: "MP_Vinewood_Tat_019_F",
                  Price: 8e3,
                },
                {
                  Slots: [1, 2],
                  Name: "Banknote Rose",
                  Dictionary: "mpvinewood_overlays",
                  MaleHash: "MP_Vinewood_Tat_026_M",
                  FemaleHash: "MP_Vinewood_Tat_026_F",
                  Price: 6500,
                },
                {
                  Slots: [1],
                  Name: "$100 Bill",
                  Dictionary: "mpbusiness_overlays",
                  MaleHash: "MP_Buis_M_LeftArm_000",
                  FemaleHash: "",
                  Price: 3850,
                },
                {
                  Slots: [1, 2],
                  Name: "All-Seeing Eye",
                  Dictionary: "mpbusiness_overlays",
                  MaleHash: "MP_Buis_M_LeftArm_001",
                  FemaleHash: "",
                  Price: 2780,
                },
                {
                  Slots: [1],
                  Name: "Greed is Good",
                  Dictionary: "mpbusiness_overlays",
                  MaleHash: "",
                  FemaleHash: "MP_Buis_F_LArm_000",
                  Price: 3800,
                },
                {
                  Slots: [1],
                  Name: "Skull Rider",
                  Dictionary: "mpchristmas2_overlays",
                  MaleHash: "MP_Xmas2_M_Tat_000",
                  FemaleHash: "MP_Xmas2_F_Tat_000",
                  Price: 3850,
                },
                {
                  Slots: [1],
                  Name: "Electric Snake",
                  Dictionary: "mpchristmas2_overlays",
                  MaleHash: "MP_Xmas2_M_Tat_010",
                  FemaleHash: "MP_Xmas2_F_Tat_010",
                  Price: 3800,
                },
                {
                  Slots: [2],
                  Name: "8 Ball Skull",
                  Dictionary: "mpchristmas2_overlays",
                  MaleHash: "MP_Xmas2_M_Tat_012",
                  FemaleHash: "MP_Xmas2_F_Tat_012",
                  Price: 3900,
                },
                {
                  Slots: [0],
                  Name: "Time's Up Outline",
                  Dictionary: "mpchristmas2_overlays",
                  MaleHash: "MP_Xmas2_M_Tat_020",
                  FemaleHash: "MP_Xmas2_F_Tat_020",
                  Price: 3300,
                },
                {
                  Slots: [0],
                  Name: "Time's Up Color",
                  Dictionary: "mpchristmas2_overlays",
                  MaleHash: "MP_Xmas2_M_Tat_021",
                  FemaleHash: "MP_Xmas2_F_Tat_021",
                  Price: 3300,
                },
                {
                  Slots: [0],
                  Name: "Sidearm",
                  Dictionary: "mpgunrunning_overlays",
                  MaleHash: "MP_Gunrunning_Tattoo_004_M",
                  FemaleHash: "MP_Gunrunning_Tattoo_004_F",
                  Price: 3350,
                },
                {
                  Slots: [2],
                  Name: "Bandolier",
                  Dictionary: "mpgunrunning_overlays",
                  MaleHash: "MP_Gunrunning_Tattoo_008_M",
                  FemaleHash: "MP_Gunrunning_Tattoo_008_F",
                  Price: 3780,
                },
                {
                  Slots: [1, 2],
                  Name: "Spiked Skull",
                  Dictionary: "mpgunrunning_overlays",
                  MaleHash: "MP_Gunrunning_Tattoo_015_M",
                  FemaleHash: "MP_Gunrunning_Tattoo_015_F",
                  Price: 6800,
                },
                {
                  Slots: [2],
                  Name: "Blood Money",
                  Dictionary: "mpgunrunning_overlays",
                  MaleHash: "MP_Gunrunning_Tattoo_016_M",
                  FemaleHash: "MP_Gunrunning_Tattoo_016_F",
                  Price: 3800,
                },
                {
                  Slots: [1],
                  Name: "Praying Skull",
                  Dictionary: "mpgunrunning_overlays",
                  MaleHash: "MP_Gunrunning_Tattoo_025_M",
                  FemaleHash: "MP_Gunrunning_Tattoo_025_F",
                  Price: 3800,
                },
                {
                  Slots: [2],
                  Name: "Serpent Revolver",
                  Dictionary: "mpgunrunning_overlays",
                  MaleHash: "MP_Gunrunning_Tattoo_027_M",
                  FemaleHash: "MP_Gunrunning_Tattoo_027_F",
                  Price: 3850,
                },
                {
                  Slots: [1],
                  Name: "Diamond Sparkle",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_003",
                  FemaleHash: "FM_Hip_F_Tat_003",
                  Price: 3800,
                },
                {
                  Slots: [0],
                  Name: "Bricks",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_007",
                  FemaleHash: "FM_Hip_F_Tat_007",
                  Price: 3300,
                },
                {
                  Slots: [2],
                  Name: "Mustache",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_015",
                  FemaleHash: "FM_Hip_F_Tat_015",
                  Price: 3800,
                },
                {
                  Slots: [1],
                  Name: "Lightning Bolt",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_016",
                  FemaleHash: "FM_Hip_F_Tat_016",
                  Price: 3800,
                },
                {
                  Slots: [2],
                  Name: "Pizza",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_026",
                  FemaleHash: "FM_Hip_F_Tat_026",
                  Price: 3800,
                },
                {
                  Slots: [1],
                  Name: "Padlock",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_027",
                  FemaleHash: "FM_Hip_F_Tat_027",
                  Price: 4e3,
                },
                {
                  Slots: [1],
                  Name: "Thorny Rose",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_028",
                  FemaleHash: "FM_Hip_F_Tat_028",
                  Price: 4e3,
                },
                {
                  Slots: [0],
                  Name: "Stop",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_034",
                  FemaleHash: "FM_Hip_F_Tat_034",
                  Price: 3250,
                },
                {
                  Slots: [2],
                  Name: "Sunrise",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_037",
                  FemaleHash: "FM_Hip_F_Tat_037",
                  Price: 3850,
                },
                {
                  Slots: [1, 2],
                  Name: "Sleeve",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_039",
                  FemaleHash: "FM_Hip_F_Tat_039",
                  Price: 8500,
                },
                {
                  Slots: [2],
                  Name: "Triangle White",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_043",
                  FemaleHash: "FM_Hip_F_Tat_043",
                  Price: 3850,
                },
                {
                  Slots: [0],
                  Name: "Peace",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_048",
                  FemaleHash: "FM_Hip_F_Tat_048",
                  Price: 3300,
                },
                {
                  Slots: [1, 2],
                  Name: "Piston Sleeve",
                  Dictionary: "mpimportexport_overlays",
                  MaleHash: "MP_MP_ImportExport_Tat_004_M",
                  FemaleHash: "MP_MP_ImportExport_Tat_004_F",
                  Price: 6800,
                },
                {
                  Slots: [1, 2],
                  Name: "Scarlett",
                  Dictionary: "mpimportexport_overlays",
                  MaleHash: "MP_MP_ImportExport_Tat_008_M",
                  FemaleHash: "MP_MP_ImportExport_Tat_008_F",
                  Price: 6750,
                },
                {
                  Slots: [1],
                  Name: "No Evil",
                  Dictionary: "mplowrider_overlays",
                  MaleHash: "MP_LR_Tat_005_M",
                  FemaleHash: "MP_LR_Tat_005_F",
                  Price: 3780,
                },
                {
                  Slots: [2],
                  Name: "Los Santos Life",
                  Dictionary: "mplowrider_overlays",
                  MaleHash: "MP_LR_Tat_027_M",
                  FemaleHash: "MP_LR_Tat_027_F",
                  Price: 3800,
                },
                {
                  Slots: [1, 2],
                  Name: "City Sorrow",
                  Dictionary: "mplowrider_overlays",
                  MaleHash: "MP_LR_Tat_033_M",
                  FemaleHash: "MP_LR_Tat_033_F",
                  Price: 6800,
                },
                {
                  Slots: [1, 2],
                  Name: "Toxic Trails",
                  Dictionary: "mpairraces_overlays",
                  MaleHash: "MP_Airraces_Tattoo_003_M",
                  FemaleHash: "MP_Airraces_Tattoo_003_F",
                  Price: 25700,
                },
                {
                  Slots: [1],
                  Name: "Urban Stunter",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_012_M",
                  FemaleHash: "MP_MP_Biker_Tat_012_F",
                  Price: 3850,
                },
                {
                  Slots: [2],
                  Name: "Macabre Tree",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_016_M",
                  FemaleHash: "MP_MP_Biker_Tat_016_F",
                  Price: 4e3,
                },
                {
                  Slots: [2],
                  Name: "Cranial Rose",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_020_M",
                  FemaleHash: "MP_MP_Biker_Tat_020_F",
                  Price: 3800,
                },
                {
                  Slots: [1, 2],
                  Name: "Live to Ride",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_024_M",
                  FemaleHash: "MP_MP_Biker_Tat_024_F",
                  Price: 6800,
                },
                {
                  Slots: [2],
                  Name: "Good Luck",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_025_M",
                  FemaleHash: "MP_MP_Biker_Tat_025_F",
                  Price: 3100,
                },
                {
                  Slots: [2],
                  Name: "Chain Fist",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_035_M",
                  FemaleHash: "MP_MP_Biker_Tat_035_F",
                  Price: 3600,
                },
                {
                  Slots: [2],
                  Name: "Ride Hard Die Fast",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_045_M",
                  FemaleHash: "MP_MP_Biker_Tat_045_F",
                  Price: 3800,
                },
                {
                  Slots: [1],
                  Name: "Muffler Helmet",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_053_M",
                  FemaleHash: "MP_MP_Biker_Tat_053_F",
                  Price: 3850,
                },
                {
                  Slots: [2],
                  Name: "Poison Scorpion",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_055_M",
                  FemaleHash: "MP_MP_Biker_Tat_055_F",
                  Price: 3800,
                },
                {
                  Slots: [2],
                  Name: "Love Hustle",
                  Dictionary: "mplowrider2_overlays",
                  MaleHash: "MP_LR_Tat_006_M",
                  FemaleHash: "MP_LR_Tat_006_F",
                  Price: 3800,
                },
                {
                  Slots: [1, 2],
                  Name: "Skeleton Party",
                  Dictionary: "mplowrider2_overlays",
                  MaleHash: "MP_LR_Tat_018_M",
                  FemaleHash: "MP_LR_Tat_018_F",
                  Price: 6700,
                },
                {
                  Slots: [1],
                  Name: "My Crazy Life",
                  Dictionary: "mplowrider2_overlays",
                  MaleHash: "MP_LR_Tat_022_M",
                  FemaleHash: "MP_LR_Tat_022_F",
                  Price: 3850,
                },
                {
                  Slots: [2],
                  Name: "Archangel & Mary",
                  Dictionary: "mpluxe_overlays",
                  MaleHash: "MP_LUXE_TAT_020_M",
                  FemaleHash: "MP_LUXE_TAT_020_F",
                  Price: 3800,
                },
                {
                  Slots: [1],
                  Name: "Gabriel",
                  Dictionary: "mpluxe_overlays",
                  MaleHash: "MP_LUXE_TAT_021_M",
                  FemaleHash: "MP_LUXE_TAT_021_F",
                  Price: 3800,
                },
                {
                  Slots: [1],
                  Name: "Fatal Dagger",
                  Dictionary: "mpluxe2_overlays",
                  MaleHash: "MP_LUXE_TAT_005_M",
                  FemaleHash: "MP_LUXE_TAT_005_F",
                  Price: 3800,
                },
                {
                  Slots: [1],
                  Name: "Egyptian Mural",
                  Dictionary: "mpluxe2_overlays",
                  MaleHash: "MP_LUXE_TAT_016_M",
                  FemaleHash: "MP_LUXE_TAT_016_F",
                  Price: 3780,
                },
                {
                  Slots: [2],
                  Name: "Divine Goddess",
                  Dictionary: "mpluxe2_overlays",
                  MaleHash: "MP_LUXE_TAT_018_M",
                  FemaleHash: "MP_LUXE_TAT_018_F",
                  Price: 3780,
                },
                {
                  Slots: [1],
                  Name: "Python Skull",
                  Dictionary: "mpluxe2_overlays",
                  MaleHash: "MP_LUXE_TAT_028_M",
                  FemaleHash: "MP_LUXE_TAT_028_F",
                  Price: 3850,
                },
                {
                  Slots: [1, 2],
                  Name: "Geometric Design LA",
                  Dictionary: "mpluxe2_overlays",
                  MaleHash: "MP_LUXE_TAT_031_M",
                  FemaleHash: "MP_LUXE_TAT_031_F",
                  Price: 6800,
                },
                {
                  Slots: [1],
                  Name: "Honor",
                  Dictionary: "mpsmuggler_overlays",
                  MaleHash: "MP_Smuggler_Tattoo_004_M",
                  FemaleHash: "MP_Smuggler_Tattoo_004_F",
                  Price: 3800,
                },
                {
                  Slots: [1],
                  Name: "Horrors Of The Deep",
                  Dictionary: "mpsmuggler_overlays",
                  MaleHash: "MP_Smuggler_Tattoo_008_M",
                  FemaleHash: "MP_Smuggler_Tattoo_008_F",
                  Price: 3850,
                },
                {
                  Slots: [1, 2],
                  Name: "Mermaid's Curse",
                  Dictionary: "mpsmuggler_overlays",
                  MaleHash: "MP_Smuggler_Tattoo_014_M",
                  FemaleHash: "MP_Smuggler_Tattoo_014_F",
                  Price: 6800,
                },
                {
                  Slots: [2],
                  Name: "8 Eyed Skull",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_001_M",
                  FemaleHash: "MP_MP_Stunt_Tat_001_F",
                  Price: 3750,
                },
                {
                  Slots: [0],
                  Name: "Big Cat",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_002_M",
                  FemaleHash: "MP_MP_Stunt_Tat_002_F",
                  Price: 3250,
                },
                {
                  Slots: [2],
                  Name: "Moonlight Ride",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_008_M",
                  FemaleHash: "MP_MP_Stunt_Tat_008_F",
                  Price: 3800,
                },
                {
                  Slots: [1],
                  Name: "Piston Head",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_022_M",
                  FemaleHash: "MP_MP_Stunt_Tat_022_F",
                  Price: 3800,
                },
                {
                  Slots: [1, 2],
                  Name: "Tanked",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_023_M",
                  FemaleHash: "MP_MP_Stunt_Tat_023_F",
                  Price: 6750,
                },
                {
                  Slots: [1],
                  Name: "Stuntman's End",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_035_M",
                  FemaleHash: "MP_MP_Stunt_Tat_035_F",
                  Price: 3800,
                },
                {
                  Slots: [2],
                  Name: "Kaboom",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_039_M",
                  FemaleHash: "MP_MP_Stunt_Tat_039_F",
                  Price: 3850,
                },
                {
                  Slots: [2],
                  Name: "Engine Arm",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_043_M",
                  FemaleHash: "MP_MP_Stunt_Tat_043_F",
                  Price: 3800,
                },
                {
                  Slots: [1],
                  Name: "Burning Heart",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_Award_M_001",
                  FemaleHash: "FM_Tat_Award_F_001",
                  Price: 3850,
                },
                {
                  Slots: [2],
                  Name: "Racing Blonde",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_Award_M_007",
                  FemaleHash: "FM_Tat_Award_F_007",
                  Price: 3850,
                },
                {
                  Slots: [2],
                  Name: "Racing Brunette",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_Award_M_015",
                  FemaleHash: "FM_Tat_Award_F_015",
                  Price: 3850,
                },
                {
                  Slots: [1, 2],
                  Name: "Serpents",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_005",
                  FemaleHash: "FM_Tat_F_005",
                  Price: 3780,
                },
                {
                  Slots: [1, 2],
                  Name: "Oriental Mural",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_006",
                  FemaleHash: "FM_Tat_F_006",
                  Price: 6800,
                },
                {
                  Slots: [2],
                  Name: "Zodiac Skull",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_015",
                  FemaleHash: "FM_Tat_F_015",
                  Price: 3800,
                },
                {
                  Slots: [2],
                  Name: "Lady M",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_031",
                  FemaleHash: "FM_Tat_F_031",
                  Price: 3850,
                },
                {
                  Slots: [2],
                  Name: "Dope Skull",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_041",
                  FemaleHash: "FM_Tat_F_041",
                  Price: 3800,
                },
              ],
              rightarm: [
                {
                  Slots: [0],
                  Name: "LS Monogram",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_034_M",
                  FemaleHash: "mpHeist3_Tat_034_F",
                  Price: 5e3,
                },
                {
                  Slots: [1, 2],
                  Name: "Lady Luck",
                  Dictionary: "mpvinewood_overlays",
                  MaleHash: "MP_Vinewood_Tat_004_M",
                  FemaleHash: "MP_Vinewood_Tat_004_F",
                  Price: 3800,
                },
                {
                  Slots: [1, 2],
                  Name: "The Gambler's Life",
                  Dictionary: "mpvinewood_overlays",
                  MaleHash: "MP_Vinewood_Tat_018_M",
                  FemaleHash: "MP_Vinewood_Tat_018_F",
                  Price: 3800,
                },
                {
                  Slots: [1],
                  Name: "Queen of Roses",
                  Dictionary: "mpvinewood_overlays",
                  MaleHash: "MP_Vinewood_Tat_025_M",
                  FemaleHash: "MP_Vinewood_Tat_025_F",
                  Price: 2e3,
                },
                {
                  Slots: [2],
                  Name: "Skull & Aces",
                  Dictionary: "mpvinewood_overlays",
                  MaleHash: "MP_Vinewood_Tat_028_M",
                  FemaleHash: "MP_Vinewood_Tat_028_F",
                  Price: 4e3,
                },
                {
                  Slots: [2],
                  Name: "Dollar Skull",
                  Dictionary: "mpbusiness_overlays",
                  MaleHash: "MP_Buis_M_RightArm_000",
                  FemaleHash: "",
                  Price: 3780,
                },
                {
                  Slots: [1],
                  Name: "Green",
                  Dictionary: "mpbusiness_overlays",
                  MaleHash: "MP_Buis_M_RightArm_001",
                  FemaleHash: "",
                  Price: 3780,
                },
                {
                  Slots: [1],
                  Name: "Dollar Sign",
                  Dictionary: "mpbusiness_overlays",
                  MaleHash: "",
                  FemaleHash: "MP_Buis_F_RArm_000",
                  Price: 3800,
                },
                {
                  Slots: [2],
                  Name: "Snake Outline",
                  Dictionary: "mpchristmas2_overlays",
                  MaleHash: "MP_Xmas2_M_Tat_003",
                  FemaleHash: "MP_Xmas2_F_Tat_003",
                  Price: 3780,
                },
                {
                  Slots: [2],
                  Name: "Snake Shaded",
                  Dictionary: "mpchristmas2_overlays",
                  MaleHash: "MP_Xmas2_M_Tat_004",
                  FemaleHash: "MP_Xmas2_F_Tat_004",
                  Price: 3850,
                },
                {
                  Slots: [1],
                  Name: "Death Before Dishonor",
                  Dictionary: "mpchristmas2_overlays",
                  MaleHash: "MP_Xmas2_M_Tat_008",
                  FemaleHash: "MP_Xmas2_F_Tat_008",
                  Price: 3800,
                },
                {
                  Slots: [1],
                  Name: "You're Next Outline",
                  Dictionary: "mpchristmas2_overlays",
                  MaleHash: "MP_Xmas2_M_Tat_022",
                  FemaleHash: "MP_Xmas2_F_Tat_022",
                  Price: 2850,
                },
                {
                  Slots: [1],
                  Name: "You're Next Color",
                  Dictionary: "mpchristmas2_overlays",
                  MaleHash: "MP_Xmas2_M_Tat_023",
                  FemaleHash: "MP_Xmas2_F_Tat_023",
                  Price: 3800,
                },
                {
                  Slots: [0],
                  Name: "Fuck Luck Outline",
                  Dictionary: "mpchristmas2_overlays",
                  MaleHash: "MP_Xmas2_M_Tat_026",
                  FemaleHash: "MP_Xmas2_F_Tat_026",
                  Price: 3250,
                },
                {
                  Slots: [0],
                  Name: "Fuck Luck Color",
                  Dictionary: "mpchristmas2_overlays",
                  MaleHash: "MP_Xmas2_M_Tat_027",
                  FemaleHash: "MP_Xmas2_F_Tat_027",
                  Price: 3250,
                },
                {
                  Slots: [0],
                  Name: "Grenade",
                  Dictionary: "mpgunrunning_overlays",
                  MaleHash: "MP_Gunrunning_Tattoo_002_M",
                  FemaleHash: "MP_Gunrunning_Tattoo_002_F",
                  Price: 3250,
                },
                {
                  Slots: [2],
                  Name: "Have a Nice Day",
                  Dictionary: "mpgunrunning_overlays",
                  MaleHash: "MP_Gunrunning_Tattoo_021_M",
                  FemaleHash: "MP_Gunrunning_Tattoo_021_F",
                  Price: 3780,
                },
                {
                  Slots: [1],
                  Name: "Combat Reaper",
                  Dictionary: "mpgunrunning_overlays",
                  MaleHash: "MP_Gunrunning_Tattoo_024_M",
                  FemaleHash: "MP_Gunrunning_Tattoo_024_F",
                  Price: 3850,
                },
                {
                  Slots: [2],
                  Name: "Single Arrow",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_001",
                  FemaleHash: "FM_Hip_F_Tat_001",
                  Price: 3800,
                },
                {
                  Slots: [1],
                  Name: "Bone",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_004",
                  FemaleHash: "FM_Hip_F_Tat_004",
                  Price: 3800,
                },
                {
                  Slots: [2],
                  Name: "Cube",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_008",
                  FemaleHash: "FM_Hip_F_Tat_008",
                  Price: 3800,
                },
                {
                  Slots: [0],
                  Name: "Horseshoe",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_010",
                  FemaleHash: "FM_Hip_F_Tat_010",
                  Price: 3250,
                },
                {
                  Slots: [1],
                  Name: "Spray Can",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_014",
                  FemaleHash: "FM_Hip_F_Tat_014",
                  Price: 3800,
                },
                {
                  Slots: [1],
                  Name: "Eye Triangle",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_017",
                  FemaleHash: "FM_Hip_F_Tat_017",
                  Price: 3850,
                },
                {
                  Slots: [1],
                  Name: "Origami",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_018",
                  FemaleHash: "FM_Hip_F_Tat_018",
                  Price: 3800,
                },
                {
                  Slots: [1, 2],
                  Name: "Geo Pattern",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_020",
                  FemaleHash: "FM_Hip_F_Tat_020",
                  Price: 6800,
                },
                {
                  Slots: [1],
                  Name: "Pencil",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_022",
                  FemaleHash: "FM_Hip_F_Tat_022",
                  Price: 3800,
                },
                {
                  Slots: [0],
                  Name: "Smiley",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_023",
                  FemaleHash: "FM_Hip_F_Tat_023",
                  Price: 3300,
                },
                {
                  Slots: [2],
                  Name: "Shapes",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_036",
                  FemaleHash: "FM_Hip_F_Tat_036",
                  Price: 3800,
                },
                {
                  Slots: [2],
                  Name: "Triangle Black",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_044",
                  FemaleHash: "FM_Hip_F_Tat_044",
                  Price: 3800,
                },
                {
                  Slots: [1],
                  Name: "Mesh Band",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_045",
                  FemaleHash: "FM_Hip_F_Tat_045",
                  Price: 3850,
                },
                {
                  Slots: [1, 2],
                  Name: "Mechanical Sleeve",
                  Dictionary: "mpimportexport_overlays",
                  MaleHash: "MP_MP_ImportExport_Tat_003_M",
                  FemaleHash: "MP_MP_ImportExport_Tat_003_F",
                  Price: 6800,
                },
                {
                  Slots: [1, 2],
                  Name: "Dialed In",
                  Dictionary: "mpimportexport_overlays",
                  MaleHash: "MP_MP_ImportExport_Tat_005_M",
                  FemaleHash: "MP_MP_ImportExport_Tat_005_F",
                  Price: 6850,
                },
                {
                  Slots: [1, 2],
                  Name: "Engulfed Block",
                  Dictionary: "mpimportexport_overlays",
                  MaleHash: "MP_MP_ImportExport_Tat_006_M",
                  FemaleHash: "MP_MP_ImportExport_Tat_006_F",
                  Price: 6800,
                },
                {
                  Slots: [1, 2],
                  Name: "Drive Forever",
                  Dictionary: "mpimportexport_overlays",
                  MaleHash: "MP_MP_ImportExport_Tat_007_M",
                  FemaleHash: "MP_MP_ImportExport_Tat_007_F",
                  Price: 6800,
                },
                {
                  Slots: [1],
                  Name: "Seductress",
                  Dictionary: "mplowrider_overlays",
                  MaleHash: "MP_LR_Tat_015_M",
                  FemaleHash: "MP_LR_Tat_015_F",
                  Price: 3980,
                },
                {
                  Slots: [2],
                  Name: "Swooping Eagle",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_007_M",
                  FemaleHash: "MP_MP_Biker_Tat_007_F",
                  Price: 3800,
                },
                {
                  Slots: [2],
                  Name: "Lady Mortality",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_014_M",
                  FemaleHash: "MP_MP_Biker_Tat_014_F",
                  Price: 3850,
                },
                {
                  Slots: [2],
                  Name: "Eagle Emblem",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_033_M",
                  FemaleHash: "MP_MP_Biker_Tat_033_F",
                  Price: 3980,
                },
                {
                  Slots: [1],
                  Name: "Grim Rider",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_042_M",
                  FemaleHash: "MP_MP_Biker_Tat_042_F",
                  Price: 3850,
                },
                {
                  Slots: [2],
                  Name: "Skull Chain",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_046_M",
                  FemaleHash: "MP_MP_Biker_Tat_046_F",
                  Price: 3800,
                },
                {
                  Slots: [1, 2],
                  Name: "Snake Bike",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_047_M",
                  FemaleHash: "MP_MP_Biker_Tat_047_F",
                  Price: 6800,
                },
                {
                  Slots: [2],
                  Name: "These Colors Don't Run",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_049_M",
                  FemaleHash: "MP_MP_Biker_Tat_049_F",
                  Price: 3800,
                },
                {
                  Slots: [2],
                  Name: "Mum",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_054_M",
                  FemaleHash: "MP_MP_Biker_Tat_054_F",
                  Price: 3850,
                },
                {
                  Slots: [1],
                  Name: "Lady Vamp",
                  Dictionary: "mplowrider2_overlays",
                  MaleHash: "MP_LR_Tat_003_M",
                  FemaleHash: "MP_LR_Tat_003_F",
                  Price: 3780,
                },
                {
                  Slots: [2],
                  Name: "Loving Los Muertos",
                  Dictionary: "mplowrider2_overlays",
                  MaleHash: "MP_LR_Tat_028_M",
                  FemaleHash: "MP_LR_Tat_028_F",
                  Price: 3850,
                },
                {
                  Slots: [1],
                  Name: "Black Tears",
                  Dictionary: "mplowrider2_overlays",
                  MaleHash: "MP_LR_Tat_035_M",
                  FemaleHash: "MP_LR_Tat_035_F",
                  Price: 3850,
                },
                {
                  Slots: [1],
                  Name: "Floral Raven",
                  Dictionary: "mpluxe_overlays",
                  MaleHash: "MP_LUXE_TAT_004_M",
                  FemaleHash: "MP_LUXE_TAT_004_F",
                  Price: 3800,
                },
                {
                  Slots: [1, 2],
                  Name: "Mermaid Harpist",
                  Dictionary: "mpluxe_overlays",
                  MaleHash: "MP_LUXE_TAT_013_M",
                  FemaleHash: "MP_LUXE_TAT_013_F",
                  Price: 6800,
                },
                {
                  Slots: [2],
                  Name: "Geisha Bloom",
                  Dictionary: "mpluxe_overlays",
                  MaleHash: "MP_LUXE_TAT_019_M",
                  FemaleHash: "MP_LUXE_TAT_019_F",
                  Price: 3780,
                },
                {
                  Slots: [1],
                  Name: "Intrometric",
                  Dictionary: "mpluxe2_overlays",
                  MaleHash: "MP_LUXE_TAT_010_M",
                  FemaleHash: "MP_LUXE_TAT_010_F",
                  Price: 3780,
                },
                {
                  Slots: [2],
                  Name: "Heavenly Deity",
                  Dictionary: "mpluxe2_overlays",
                  MaleHash: "MP_LUXE_TAT_017_M",
                  FemaleHash: "MP_LUXE_TAT_017_F",
                  Price: 3750,
                },
                {
                  Slots: [2],
                  Name: "Floral Print",
                  Dictionary: "mpluxe2_overlays",
                  MaleHash: "MP_LUXE_TAT_026_M",
                  FemaleHash: "MP_LUXE_TAT_026_F",
                  Price: 3800,
                },
                {
                  Slots: [1, 2],
                  Name: "Geometric Design RA",
                  Dictionary: "mpluxe2_overlays",
                  MaleHash: "MP_LUXE_TAT_030_M",
                  FemaleHash: "MP_LUXE_TAT_030_F",
                  Price: 6800,
                },
                {
                  Slots: [1],
                  Name: "Crackshot",
                  Dictionary: "mpsmuggler_overlays",
                  MaleHash: "MP_Smuggler_Tattoo_001_M",
                  FemaleHash: "MP_Smuggler_Tattoo_001_F",
                  Price: 3800,
                },
                {
                  Slots: [2],
                  Name: "Mutiny",
                  Dictionary: "mpsmuggler_overlays",
                  MaleHash: "MP_Smuggler_Tattoo_005_M",
                  FemaleHash: "MP_Smuggler_Tattoo_005_F",
                  Price: 3980,
                },
                {
                  Slots: [1, 2],
                  Name: "Stylized Kraken",
                  Dictionary: "mpsmuggler_overlays",
                  MaleHash: "MP_Smuggler_Tattoo_023_M",
                  FemaleHash: "MP_Smuggler_Tattoo_023_F",
                  Price: 6800,
                },
                {
                  Slots: [1],
                  Name: "Poison Wrench",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_003_M",
                  FemaleHash: "MP_MP_Stunt_Tat_003_F",
                  Price: 3750,
                },
                {
                  Slots: [2],
                  Name: "Arachnid of Death",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_009_M",
                  FemaleHash: "MP_MP_Stunt_Tat_009_F",
                  Price: 3850,
                },
                {
                  Slots: [2],
                  Name: "Grave Vulture",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_010_M",
                  FemaleHash: "MP_MP_Stunt_Tat_010_F",
                  Price: 3780,
                },
                {
                  Slots: [1, 2],
                  Name: "Coffin Racer",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_016_M",
                  FemaleHash: "MP_MP_Stunt_Tat_016_F",
                  Price: 6800,
                },
                {
                  Slots: [0],
                  Name: "Biker Stallion",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_036_M",
                  FemaleHash: "MP_MP_Stunt_Tat_036_F",
                  Price: 3250,
                },
                {
                  Slots: [1],
                  Name: "One Down Five Up",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_038_M",
                  FemaleHash: "MP_MP_Stunt_Tat_038_F",
                  Price: 3850,
                },
                {
                  Slots: [1, 2],
                  Name: "Seductive Mechanic",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_049_M",
                  FemaleHash: "MP_MP_Stunt_Tat_049_F",
                  Price: 6800,
                },
                {
                  Slots: [2],
                  Name: "Grim Reaper Smoking Gun",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_Award_M_002",
                  FemaleHash: "FM_Tat_Award_F_002",
                  Price: 3850,
                },
                {
                  Slots: [1],
                  Name: "Ride or Die RA",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_Award_M_010",
                  FemaleHash: "FM_Tat_Award_F_010",
                  Price: 3800,
                },
                {
                  Slots: [1, 2],
                  Name: "Brotherhood",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_000",
                  FemaleHash: "FM_Tat_F_000",
                  Price: 6800,
                },
                {
                  Slots: [1, 2],
                  Name: "Dragons",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_001",
                  FemaleHash: "FM_Tat_F_001",
                  Price: 6800,
                },
                {
                  Slots: [2],
                  Name: "Dragons and Skull",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_003",
                  FemaleHash: "FM_Tat_F_003",
                  Price: 3850,
                },
                {
                  Slots: [1, 2],
                  Name: "Flower Mural",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_014",
                  FemaleHash: "FM_Tat_F_014",
                  Price: 6800,
                },
                {
                  Slots: [1, 2, 0],
                  Name: "Serpent Skull RA",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_018",
                  FemaleHash: "FM_Tat_F_018",
                  Price: 8500,
                },
                {
                  Slots: [2],
                  Name: "Virgin Mary",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_027",
                  FemaleHash: "FM_Tat_F_027",
                  Price: 3850,
                },
                {
                  Slots: [1],
                  Name: "Mermaid",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_028",
                  FemaleHash: "FM_Tat_F_028",
                  Price: 3850,
                },
                {
                  Slots: [1],
                  Name: "Dagger",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_038",
                  FemaleHash: "FM_Tat_F_038",
                  Price: 3800,
                },
                {
                  Slots: [2],
                  Name: "Lion",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_047",
                  FemaleHash: "FM_Tat_F_047",
                  Price: 3800,
                },
              ],
              leftleg: [
                {
                  Slots: [0, 1],
                  Name: "Love Fist",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_032_M",
                  FemaleHash: "mpHeist3_Tat_032_F",
                  Price: 27500,
                },
                {
                  Slots: [0],
                  Name: "One-armed Bandit",
                  Dictionary: "mpvinewood_overlays",
                  MaleHash: "MP_Vinewood_Tat_013_M",
                  FemaleHash: "MP_Vinewood_Tat_013_F",
                  Price: 3850,
                },
                {
                  Slots: [0],
                  Name: "8-Ball Rose",
                  Dictionary: "mpvinewood_overlays",
                  MaleHash: "MP_Vinewood_Tat_027_M",
                  FemaleHash: "MP_Vinewood_Tat_027_F",
                  Price: 4500,
                },
                {
                  Slots: [0],
                  Name: "Single",
                  Dictionary: "mpbusiness_overlays",
                  MaleHash: "",
                  FemaleHash: "MP_Buis_F_LLeg_000",
                  Price: 3850,
                },
                {
                  Slots: [0],
                  Name: "Spider Outline",
                  Dictionary: "mpchristmas2_overlays",
                  MaleHash: "MP_Xmas2_M_Tat_001",
                  FemaleHash: "MP_Xmas2_F_Tat_001",
                  Price: 3850,
                },
                {
                  Slots: [0],
                  Name: "Spider Color",
                  Dictionary: "mpchristmas2_overlays",
                  MaleHash: "MP_Xmas2_M_Tat_002",
                  FemaleHash: "MP_Xmas2_F_Tat_002",
                  Price: 3850,
                },
                {
                  Slots: [0],
                  Name: "Patriot Skull",
                  Dictionary: "mpgunrunning_overlays",
                  MaleHash: "MP_Gunrunning_Tattoo_005_M",
                  FemaleHash: "MP_Gunrunning_Tattoo_005_F",
                  Price: 3850,
                },
                {
                  Slots: [1],
                  Name: "Stylized Tiger",
                  Dictionary: "mpgunrunning_overlays",
                  MaleHash: "MP_Gunrunning_Tattoo_007_M",
                  FemaleHash: "MP_Gunrunning_Tattoo_007_F",
                  Price: 3800,
                },
                {
                  Slots: [0, 1],
                  Name: "Death Skull",
                  Dictionary: "mpgunrunning_overlays",
                  MaleHash: "MP_Gunrunning_Tattoo_011_M",
                  FemaleHash: "MP_Gunrunning_Tattoo_011_F",
                  Price: 6500,
                },
                {
                  Slots: [1],
                  Name: "Rose Revolver",
                  Dictionary: "mpgunrunning_overlays",
                  MaleHash: "MP_Gunrunning_Tattoo_023_M",
                  FemaleHash: "MP_Gunrunning_Tattoo_023_F",
                  Price: 3850,
                },
                {
                  Slots: [0],
                  Name: "Squares",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_009",
                  FemaleHash: "FM_Hip_F_Tat_009",
                  Price: 3800,
                },
                {
                  Slots: [0],
                  Name: "Charm",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_019",
                  FemaleHash: "FM_Hip_F_Tat_019",
                  Price: 3850,
                },
                {
                  Slots: [0],
                  Name: "Black Anchor",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_040",
                  FemaleHash: "FM_Hip_F_Tat_040",
                  Price: 3800,
                },
                {
                  Slots: [0],
                  Name: "LS Serpent",
                  Dictionary: "mplowrider_overlays",
                  MaleHash: "MP_LR_Tat_007_M",
                  FemaleHash: "MP_LR_Tat_007_F",
                  Price: 3850,
                },
                {
                  Slots: [0],
                  Name: "Presidents",
                  Dictionary: "mplowrider_overlays",
                  MaleHash: "MP_LR_Tat_020_M",
                  FemaleHash: "MP_LR_Tat_020_F",
                  Price: 3800,
                },
                {
                  Slots: [0],
                  Name: "Rose Tribute",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_002_M",
                  FemaleHash: "MP_MP_Biker_Tat_002_F",
                  Price: 3850,
                },
                {
                  Slots: [0],
                  Name: "Ride or Die LL",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_015_M",
                  FemaleHash: "MP_MP_Biker_Tat_015_F",
                  Price: 3800,
                },
                {
                  Slots: [0],
                  Name: "Bad Luck",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_027_M",
                  FemaleHash: "MP_MP_Biker_Tat_027_F",
                  Price: 3850,
                },
                {
                  Slots: [0],
                  Name: "Engulfed Skull",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_036_M",
                  FemaleHash: "MP_MP_Biker_Tat_036_F",
                  Price: 3850,
                },
                {
                  Slots: [1],
                  Name: "Scorched Soul",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_037_M",
                  FemaleHash: "MP_MP_Biker_Tat_037_F",
                  Price: 3850,
                },
                {
                  Slots: [1],
                  Name: "Ride Free",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_044_M",
                  FemaleHash: "MP_MP_Biker_Tat_044_F",
                  Price: 3850,
                },
                {
                  Slots: [1],
                  Name: "Bone Cruiser",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_056_M",
                  FemaleHash: "MP_MP_Biker_Tat_056_F",
                  Price: 3850,
                },
                {
                  Slots: [0, 1],
                  Name: "Laughing Skull",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_057_M",
                  FemaleHash: "MP_MP_Biker_Tat_057_F",
                  Price: 6500,
                },
                {
                  Slots: [0],
                  Name: "Death Us Do Part",
                  Dictionary: "mplowrider2_overlays",
                  MaleHash: "MP_LR_Tat_029_M",
                  FemaleHash: "MP_LR_Tat_029_F",
                  Price: 3850,
                },
                {
                  Slots: [0],
                  Name: "Serpent of Death",
                  Dictionary: "mpluxe_overlays",
                  MaleHash: "MP_LUXE_TAT_000_M",
                  FemaleHash: "MP_LUXE_TAT_000_F",
                  Price: 3850,
                },
                {
                  Slots: [0],
                  Name: "Cross of Roses",
                  Dictionary: "mpluxe2_overlays",
                  MaleHash: "MP_LUXE_TAT_011_M",
                  FemaleHash: "MP_LUXE_TAT_011_F",
                  Price: 3850,
                },
                {
                  Slots: [0],
                  Name: "Dagger Devil",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_007_M",
                  FemaleHash: "MP_MP_Stunt_Tat_007_F",
                  Price: 3780,
                },
                {
                  Slots: [1],
                  Name: "Dirt Track Hero",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_013_M",
                  FemaleHash: "MP_MP_Stunt_Tat_013_F",
                  Price: 3800,
                },
                {
                  Slots: [0, 1],
                  Name: "Golden Cobra",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_021_M",
                  FemaleHash: "MP_MP_Stunt_Tat_021_F",
                  Price: 6500,
                },
                {
                  Slots: [0],
                  Name: "Quad Goblin",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_028_M",
                  FemaleHash: "MP_MP_Stunt_Tat_028_F",
                  Price: 3800,
                },
                {
                  Slots: [0],
                  Name: "Stunt Jesus",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_031_M",
                  FemaleHash: "MP_MP_Stunt_Tat_031_F",
                  Price: 3850,
                },
                {
                  Slots: [0],
                  Name: "Dragon and Dagger",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_Award_M_009",
                  FemaleHash: "FM_Tat_Award_F_009",
                  Price: 3850,
                },
                {
                  Slots: [0],
                  Name: "Melting Skull",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_002",
                  FemaleHash: "FM_Tat_F_002",
                  Price: 3850,
                },
                {
                  Slots: [0],
                  Name: "Dragon Mural",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_008",
                  FemaleHash: "FM_Tat_F_008",
                  Price: 3850,
                },
                {
                  Slots: [0],
                  Name: "Serpent Skull LL",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_021",
                  FemaleHash: "FM_Tat_F_021",
                  Price: 3850,
                },
                {
                  Slots: [0],
                  Name: "Hottie",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_023",
                  FemaleHash: "FM_Tat_F_023",
                  Price: 3850,
                },
                {
                  Slots: [0],
                  Name: "Smoking Dagger",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_026",
                  FemaleHash: "FM_Tat_F_026",
                  Price: 3850,
                },
                {
                  Slots: [0],
                  Name: "Faith LL",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_032",
                  FemaleHash: "FM_Tat_F_032",
                  Price: 3850,
                },
                {
                  Slots: [0, 1],
                  Name: "Chinese Dragon",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_033",
                  FemaleHash: "FM_Tat_F_033",
                  Price: 6500,
                },
                {
                  Slots: [0],
                  Name: "Dragon LL",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_035",
                  FemaleHash: "FM_Tat_F_035",
                  Price: 3800,
                },
                {
                  Slots: [0],
                  Name: "Grim Reaper",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_037",
                  FemaleHash: "FM_Tat_F_037",
                  Price: 3850,
                },
              ],
              rightleg: [
                {
                  Slots: [0, 1],
                  Name: "Kifflom",
                  Dictionary: "mpheist3_overlays",
                  MaleHash: "mpHeist3_Tat_031_M",
                  FemaleHash: "mpHeist3_Tat_031_F",
                  Price: 15e3,
                },
                {
                  Slots: [0],
                  Name: "Cash is King",
                  Dictionary: "mpvinewood_overlays",
                  MaleHash: "MP_Vinewood_Tat_020_M",
                  FemaleHash: "MP_Vinewood_Tat_020_F",
                  Price: 5e3,
                },
                {
                  Slots: [0],
                  Name: "Diamond Crown",
                  Dictionary: "mpbusiness_overlays",
                  MaleHash: "",
                  FemaleHash: "MP_Buis_F_RLeg_000",
                  Price: 3800,
                },
                {
                  Slots: [0],
                  Name: "Floral Dagger",
                  Dictionary: "mpchristmas2_overlays",
                  MaleHash: "MP_Xmas2_M_Tat_014",
                  FemaleHash: "MP_Xmas2_F_Tat_014",
                  Price: 3750,
                },
                {
                  Slots: [0],
                  Name: "Combat Skull",
                  Dictionary: "mpgunrunning_overlays",
                  MaleHash: "MP_Gunrunning_Tattoo_006_M",
                  FemaleHash: "MP_Gunrunning_Tattoo_006_F",
                  Price: 3800,
                },
                {
                  Slots: [0],
                  Name: "Restless Skull",
                  Dictionary: "mpgunrunning_overlays",
                  MaleHash: "MP_Gunrunning_Tattoo_026_M",
                  FemaleHash: "MP_Gunrunning_Tattoo_026_F",
                  Price: 3850,
                },
                {
                  Slots: [1],
                  Name: "Pistol Ace",
                  Dictionary: "mpgunrunning_overlays",
                  MaleHash: "MP_Gunrunning_Tattoo_030_M",
                  FemaleHash: "MP_Gunrunning_Tattoo_030_F",
                  Price: 26850,
                },
                {
                  Slots: [0],
                  Name: "Grub",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_038",
                  FemaleHash: "FM_Hip_F_Tat_038",
                  Price: 3800,
                },
                {
                  Slots: [0],
                  Name: "Sparkplug",
                  Dictionary: "mphipster_overlays",
                  MaleHash: "FM_Hip_M_Tat_042",
                  FemaleHash: "FM_Hip_F_Tat_042",
                  Price: 3800,
                },
                {
                  Slots: [0],
                  Name: "Ink Me",
                  Dictionary: "mplowrider_overlays",
                  MaleHash: "MP_LR_Tat_017_M",
                  FemaleHash: "MP_LR_Tat_017_F",
                  Price: 3800,
                },
                {
                  Slots: [0],
                  Name: "Dance of Hearts",
                  Dictionary: "mplowrider_overlays",
                  MaleHash: "MP_LR_Tat_023_M",
                  FemaleHash: "MP_LR_Tat_023_F",
                  Price: 3850,
                },
                {
                  Slots: [0, 1],
                  Name: "Dragon's Fury",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_004_M",
                  FemaleHash: "MP_MP_Biker_Tat_004_F",
                  Price: 6500,
                },
                {
                  Slots: [0],
                  Name: "Western Insignia",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_022_M",
                  FemaleHash: "MP_MP_Biker_Tat_022_F",
                  Price: 3800,
                },
                {
                  Slots: [1],
                  Name: "Dusk Rider",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_028_M",
                  FemaleHash: "MP_MP_Biker_Tat_028_F",
                  Price: 3800,
                },
                {
                  Slots: [1],
                  Name: "American Made",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_040_M",
                  FemaleHash: "MP_MP_Biker_Tat_040_F",
                  Price: 3850,
                },
                {
                  Slots: [0],
                  Name: "STFU",
                  Dictionary: "mpbiker_overlays",
                  MaleHash: "MP_MP_Biker_Tat_048_M",
                  FemaleHash: "MP_MP_Biker_Tat_048_F",
                  Price: 3800,
                },
                {
                  Slots: [0],
                  Name: "San Andreas Prayer",
                  Dictionary: "mplowrider2_overlays",
                  MaleHash: "MP_LR_Tat_030_M",
                  FemaleHash: "MP_LR_Tat_030_F",
                  Price: 3850,
                },
                {
                  Slots: [0],
                  Name: "Elaborate Los Muertos",
                  Dictionary: "mpluxe_overlays",
                  MaleHash: "MP_LUXE_TAT_001_M",
                  FemaleHash: "MP_LUXE_TAT_001_F",
                  Price: 3850,
                },
                {
                  Slots: [0],
                  Name: "Starmetric",
                  Dictionary: "mpluxe2_overlays",
                  MaleHash: "MP_LUXE_TAT_023_M",
                  FemaleHash: "MP_LUXE_TAT_023_F",
                  Price: 3750,
                },
                {
                  Slots: [0, 1],
                  Name: "Homeward Bound",
                  Dictionary: "mpsmuggler_overlays",
                  MaleHash: "MP_Smuggler_Tattoo_020_M",
                  FemaleHash: "MP_Smuggler_Tattoo_020_F",
                  Price: 6500,
                },
                {
                  Slots: [0],
                  Name: "Demon Spark Plug",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_005_M",
                  FemaleHash: "MP_MP_Stunt_Tat_005_F",
                  Price: 3850,
                },
                {
                  Slots: [1],
                  Name: "Praying Gloves",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_015_M",
                  FemaleHash: "MP_MP_Stunt_Tat_015_F",
                  Price: 3850,
                },
                {
                  Slots: [0],
                  Name: "Piston Angel",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_020_M",
                  FemaleHash: "MP_MP_Stunt_Tat_020_F",
                  Price: 3850,
                },
                {
                  Slots: [1],
                  Name: "Speed Freak",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_025_M",
                  FemaleHash: "MP_MP_Stunt_Tat_025_F",
                  Price: 3800,
                },
                {
                  Slots: [0],
                  Name: "Wheelie Mouse",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_032_M",
                  FemaleHash: "MP_MP_Stunt_Tat_032_F",
                  Price: 3750,
                },
                {
                  Slots: [0, 1],
                  Name: "Severed Hand",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_045_M",
                  FemaleHash: "MP_MP_Stunt_Tat_045_F",
                  Price: 3500,
                },
                {
                  Slots: [0],
                  Name: "Brake Knife",
                  Dictionary: "mpstunt_overlays",
                  MaleHash: "MP_MP_Stunt_Tat_047_M",
                  FemaleHash: "MP_MP_Stunt_Tat_047_F",
                  Price: 3750,
                },
                {
                  Slots: [0],
                  Name: "Skull and Sword",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_Award_M_006",
                  FemaleHash: "FM_Tat_Award_F_006",
                  Price: 3850,
                },
                {
                  Slots: [0],
                  Name: "The Warrior",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_007",
                  FemaleHash: "FM_Tat_F_007",
                  Price: 3850,
                },
                {
                  Slots: [0],
                  Name: "Tribal",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_017",
                  FemaleHash: "FM_Tat_F_017",
                  Price: 3800,
                },
                {
                  Slots: [0],
                  Name: "Fiery Dragon",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_022",
                  FemaleHash: "FM_Tat_F_022",
                  Price: 3850,
                },
                {
                  Slots: [0],
                  Name: "Broken Skull",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_039",
                  FemaleHash: "FM_Tat_F_039",
                  Price: 3850,
                },
                {
                  Slots: [0, 1],
                  Name: "Flaming Skull",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_040",
                  FemaleHash: "FM_Tat_F_040",
                  Price: 6400,
                },
                {
                  Slots: [0],
                  Name: "Flaming Scorpion",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_042",
                  FemaleHash: "FM_Tat_F_042",
                  Price: 3850,
                },
                {
                  Slots: [0],
                  Name: "Indian Ram",
                  Dictionary: "multiplayer_overlays",
                  MaleHash: "FM_Tat_M_043",
                  FemaleHash: "FM_Tat_F_043",
                  Price: 3850,
                },
              ],
            };
          },
          6794: (e, t, a) => {
            a.g.Inputs = {
              NEXT_CAMERA: 0,
              LOOK_LR: 1,
              LOOK_UD: 2,
              LOOK_UP_ONLY: 3,
              LOOK_DOWN_ONLY: 4,
              LOOK_LEFT_ONLY: 5,
              LOOK_RIGHT_ONLY: 6,
              CINEMATIC_SLOWMO: 7,
              SCRIPTED_FLY_UD: 8,
              SCRIPTED_FLY_LR: 9,
              SCRIPTED_FLY_ZUP: 10,
              SCRIPTED_FLY_ZDOWN: 11,
              WEAPON_WHEEL_UD: 12,
              WEAPON_WHEEL_LR: 13,
              WEAPON_WHEEL_NEXT: 14,
              WEAPON_WHEEL_PREV: 15,
              SELECT_NEXT_WEAPON: 16,
              SELECT_PREV_WEAPON: 17,
              SKIP_CUTSCENE: 18,
              CHARACTER_WHEEL: 19,
              MULTIPLAYER_INFO: 20,
              SPRINT: 21,
              JUMP: 22,
              ENTER: 23,
              ATTACK: 24,
              AIM: 25,
              LOOK_BEHIND: 26,
              PHONE: 27,
              SPECIAL_ABILITY: 28,
              SPECIAL_ABILITY_SECONDARY: 29,
              MOVE_LR: 30,
              MOVE_UD: 31,
              MOVE_UP_ONLY: 32,
              MOVE_DOWN_ONLY: 33,
              MOVE_LEFT_ONLY: 34,
              MOVE_RIGHT_ONLY: 35,
              DUCK: 36,
              SELECT_WEAPON: 37,
              PICKUP: 38,
              SNIPER_ZOOM: 39,
              SNIPER_ZOOM_IN_ONLY: 40,
              SNIPER_ZOOM_OUT_ONLY: 41,
              SNIPER_ZOOM_IN_SECONDARY: 42,
              SNIPER_ZOOM_OUT_SECONDARY: 43,
              COVER: 44,
              RELOAD: 45,
              TALK: 46,
              DETONATE: 47,
              HUD_SPECIAL: 48,
              ARREST: 49,
              ACCURATE_AIM: 50,
              CONTEXT: 51,
              CONTEXT_SECONDARY: 52,
              WEAPON_SPECIAL: 53,
              WEAPON_SPECIAL_TWO: 54,
              DIVE: 55,
              DROP_WEAPON: 56,
              DROP_AMMO: 57,
              THROW_GRENADE: 58,
              VEH_MOVE_LR: 59,
              VEH_MOVE_UD: 60,
              VEH_MOVE_UP_ONLY: 61,
              VEH_MOVE_DOWN_ONLY: 62,
              VEH_MOVE_LEFT_ONLY: 63,
              VEH_MOVE_RIGHT_ONLY: 64,
              VEH_SPECIAL: 65,
              VEH_GUN_LR: 66,
              VEH_GUN_UD: 67,
              VEH_AIM: 68,
              VEH_ATTACK: 69,
              VEH_ATTACK2: 70,
              VEH_ACCELERATE: 71,
              VEH_BRAKE: 72,
              VEH_DUCK: 73,
              VEH_HEADLIGHT: 74,
              VEH_EXIT: 75,
              VEH_HANDBRAKE: 76,
              VEH_HOTWIRE_LEFT: 77,
              VEH_HOTWIRE_RIGHT: 78,
              VEH_LOOK_BEHIND: 79,
              VEH_CIN_CAM: 80,
              VEH_NEXT_RADIO: 81,
              VEH_PREV_RADIO: 82,
              VEH_NEXT_RADIO_TRACK: 83,
              VEH_PREV_RADIO_TRACK: 84,
              VEH_RADIO_WHEEL: 85,
              VEH_HORN: 86,
              VEH_FLY_THROTTLE_UP: 87,
              VEH_FLY_THROTTLE_DOWN: 88,
              VEH_FLY_YAW_LEFT: 89,
              VEH_FLY_YAW_RIGHT: 90,
              VEH_PASSENGER_AIM: 91,
              VEH_PASSENGER_ATTACK: 92,
              VEH_SPECIAL_ABILITY_FRANKLIN: 93,
              VEH_STUNT_UD: 94,
              VEH_CINEMATIC_UD: 95,
              VEH_CINEMATIC_UP_ONLY: 96,
              VEH_CINEMATIC_DOWN_ONLY: 97,
              VEH_CINEMATIC_LR: 98,
              VEH_SELECT_NEXT_WEAPON: 99,
              VEH_SELECT_PREV_WEAPON: 100,
              VEH_ROOF: 101,
              VEH_JUMP: 102,
              VEH_GRAPPLING_HOOK: 103,
              VEH_SHUFFLE: 104,
              VEH_DROP_PROJECTILE: 105,
              VEH_MOUSE_CONTROL_OVERRIDE: 106,
              VEH_FLY_ROLL_LR: 107,
              VEH_FLY_ROLL_LEFT_ONLY: 108,
              VEH_FLY_ROLL_RIGHT_ONLY: 109,
              VEH_FLY_PITCH_UD: 110,
              VEH_FLY_PITCH_UP_ONLY: 111,
              VEH_FLY_PITCH_DOWN_ONLY: 112,
              VEH_FLY_UNDERCARRIAGE: 113,
              VEH_FLY_ATTACK: 114,
              VEH_FLY_SELECT_NEXT_WEAPON: 115,
              VEH_FLY_SELECT_PREV_WEAPON: 116,
              VEH_FLY_SELECT_TARGET_LEFT: 117,
              VEH_FLY_SELECT_TARGET_RIGHT: 118,
              VEH_FLY_VERTICAL_FLIGHT_MODE: 119,
              VEH_FLY_DUCK: 120,
              VEH_FLY_ATTACK_CAMERA: 121,
              VEH_FLY_MOUSE_CONTROL_OVERRIDE: 122,
              VEH_SUB_TURN_LR: 123,
              VEH_SUB_TURN_LEFT_ONLY: 124,
              VEH_SUB_TURN_RIGHT_ONLY: 125,
              VEH_SUB_PITCH_UD: 126,
              VEH_SUB_PITCH_UP_ONLY: 127,
              VEH_SUB_PITCH_DOWN_ONLY: 128,
              VEH_SUB_THROTTLE_UP: 129,
              VEH_SUB_THROTTLE_DOWN: 130,
              VEH_SUB_ASCEND: 131,
              VEH_SUB_DESCEND: 132,
              VEH_SUB_TURN_HARD_LEFT: 133,
              VEH_SUB_TURN_HARD_RIGHT: 134,
              VEH_SUB_MOUSE_CONTROL_OVERRIDE: 135,
              VEH_PUSHBIKE_PEDAL: 136,
              VEH_PUSHBIKE_SPRINT: 137,
              VEH_PUSHBIKE_FRONT_BRAKE: 138,
              VEH_PUSHBIKE_REAR_BRAKE: 139,
              MELEE_ATTACK_LIGHT: 140,
              MELEE_ATTACK_HEAVY: 141,
              MELEE_ATTACK_ALTERNATE: 142,
              MELEE_BLOCK: 143,
              PARACHUTE_DEPLOY: 144,
              PARACHUTE_DETACH: 145,
              PARACHUTE_TURN_LR: 146,
              PARACHUTE_TURN_LEFT_ONLY: 147,
              PARACHUTE_TURN_RIGHT_ONLY: 148,
              PARACHUTE_PITCH_UD: 149,
              PARACHUTE_PITCH_UP_ONLY: 150,
              PARACHUTE_PITCH_DOWN_ONLY: 151,
              PARACHUTE_BRAKE_LEFT: 152,
              PARACHUTE_BRAKE_RIGHT: 153,
              PARACHUTE_SMOKE: 154,
              PARACHUTE_PRECISION_LANDING: 155,
              MAP: 156,
              SELECT_WEAPON_UNARMED: 157,
              SELECT_WEAPON_MELEE: 158,
              SELECT_WEAPON_HANDGUN: 159,
              SELECT_WEAPON_SHOTGUN: 160,
              SELECT_WEAPON_SMG: 161,
              SELECT_WEAPON_AUTO_RIFLE: 162,
              SELECT_WEAPON_SNIPER: 163,
              SELECT_WEAPON_HEAVY: 164,
              SELECT_WEAPON_SPECIAL: 165,
              SELECT_CHARACTER_MICHAEL: 166,
              SELECT_CHARACTER_FRANKLIN: 167,
              SELECT_CHARACTER_TREVOR: 168,
              SELECT_CHARACTER_MULTIPLAYER: 169,
              SAVE_REPLAY_CLIP: 170,
              SPECIAL_ABILITY_PC: 171,
              CELLPHONE_UP: 172,
              CELLPHONE_DOWN: 173,
              CELLPHONE_LEFT: 174,
              CELLPHONE_RIGHT: 175,
              CELLPHONE_SELECT: 176,
              CELLPHONE_CANCEL: 177,
              CELLPHONE_OPTION: 178,
              CELLPHONE_EXTRA_OPTION: 179,
              CELLPHONE_SCROLL_FORWARD: 180,
              CELLPHONE_SCROLL_BACKWARD: 181,
              CELLPHONE_CAMERA_FOCUS_LOCK: 182,
              CELLPHONE_CAMERA_GRID: 183,
              CELLPHONE_CAMERA_SELFIE: 184,
              CELLPHONE_CAMERA_DOF: 185,
              CELLPHONE_CAMERA_EXPRESSION: 186,
              FRONTEND_DOWN: 187,
              FRONTEND_UP: 188,
              FRONTEND_LEFT: 189,
              FRONTEND_RIGHT: 190,
              FRONTEND_RDOWN: 191,
              FRONTEND_RUP: 192,
              FRONTEND_RLEFT: 193,
              FRONTEND_RRIGHT: 194,
              FRONTEND_AXIS_X: 195,
              FRONTEND_AXIS_Y: 196,
              FRONTEND_RIGHT_AXIS_X: 197,
              FRONTEND_RIGHT_AXIS_Y: 198,
              FRONTEND_PAUSE: 199,
              FRONTEND_PAUSE_ALTERNATE: 200,
              FRONTEND_ACCEPT: 201,
              FRONTEND_CANCEL: 202,
              FRONTEND_X: 203,
              FRONTEND_Y: 204,
              FRONTEND_LB: 205,
              FRONTEND_RB: 206,
              FRONTEND_LT: 207,
              FRONTEND_RT: 208,
              FRONTEND_LS: 209,
              FRONTEND_RS: 210,
              FRONTEND_LEADERBOARD: 211,
              FRONTEND_SOCIAL_CLUB: 212,
              FRONTEND_SOCIAL_CLUB_SECONDARY: 213,
              FRONTEND_DELETE: 214,
              FRONTEND_ENDSCREEN_ACCEPT: 215,
              FRONTEND_ENDSCREEN_EXPAND: 216,
              FRONTEND_SELECT: 217,
              SCRIPT_LEFT_AXIS_X: 218,
              SCRIPT_LEFT_AXIS_Y: 219,
              SCRIPT_RIGHT_AXIS_X: 220,
              SCRIPT_RIGHT_AXIS_Y: 221,
              SCRIPT_RUP: 222,
              SCRIPT_RDOWN: 223,
              SCRIPT_RLEFT: 224,
              SCRIPT_RRIGHT: 225,
              SCRIPT_LB: 226,
              SCRIPT_RB: 227,
              SCRIPT_LT: 228,
              SCRIPT_RT: 229,
              SCRIPT_LS: 230,
              SCRIPT_RS: 231,
              SCRIPT_PAD_UP: 232,
              SCRIPT_PAD_DOWN: 233,
              SCRIPT_PAD_LEFT: 234,
              SCRIPT_PAD_RIGHT: 235,
              SCRIPT_SELECT: 236,
              CURSOR_ACCEPT: 237,
              CURSOR_CANCEL: 238,
              CURSOR_X: 239,
              CURSOR_Y: 240,
              CURSOR_SCROLL_UP: 241,
              CURSOR_SCROLL_DOWN: 242,
              ENTER_CHEAT_CODE: 243,
              INTERACTION_MENU: 244,
              MP_TEXT_CHAT_ALL: 245,
              MP_TEXT_CHAT_TEAM: 246,
              MP_TEXT_CHAT_FRIENDS: 247,
              MP_TEXT_CHAT_CREW: 248,
              PUSH_TO_TALK: 249,
              CREATOR_LS: 250,
              CREATOR_RS: 251,
              CREATOR_LT: 252,
              CREATOR_RT: 253,
              CREATOR_MENU_TOGGLE: 254,
              CREATOR_ACCEPT: 255,
              CREATOR_DELETE: 256,
              ATTACK2: 257,
              RAPPEL_JUMP: 258,
              RAPPEL_LONG_JUMP: 259,
              RAPPEL_SMASH_WINDOW: 260,
              PREV_WEAPON: 261,
              NEXT_WEAPON: 262,
              MELEE_ATTACK1: 263,
              MELEE_ATTACK2: 264,
              WHISTLE: 265,
              MOVE_LEFT: 266,
              MOVE_RIGHT: 267,
              MOVE_UP: 268,
              MOVE_DOWN: 269,
              LOOK_LEFT: 270,
              LOOK_RIGHT: 271,
              LOOK_UP: 272,
              LOOK_DOWN: 273,
              SNIPER_ZOOM_IN: 274,
              SNIPER_ZOOM_OUT: 275,
              SNIPER_ZOOM_IN_ALTERNATE: 276,
              SNIPER_ZOOM_OUT_ALTERNATE: 277,
              VEH_MOVE_LEFT: 278,
              VEH_MOVE_RIGHT: 279,
              VEH_MOVE_UP: 280,
              VEH_MOVE_DOWN: 281,
              VEH_GUN_LEFT: 282,
              VEH_GUN_RIGHT: 283,
              VEH_GUN_UP: 284,
              VEH_GUN_DOWN: 285,
              VEH_LOOK_LEFT: 286,
              VEH_LOOK_RIGHT: 287,
              REPLAY_START_STOP_RECORDING: 288,
              REPLAY_START_STOP_RECORDING_SECONDARY: 289,
              SCALED_LOOK_LR: 290,
              SCALED_LOOK_UD: 291,
              SCALED_LOOK_UP_ONLY: 292,
              SCALED_LOOK_DOWN_ONLY: 293,
              SCALED_LOOK_LEFT_ONLY: 294,
              SCALED_LOOK_RIGHT_ONLY: 295,
              REPLAY_MARKER_DELETE: 296,
              REPLAY_CLIP_DELETE: 297,
              REPLAY_PAUSE: 298,
              REPLAY_REWIND: 299,
              REPLAY_FFWD: 300,
              REPLAY_NEWMARKER: 301,
              REPLAY_RECORD: 302,
              REPLAY_SCREENSHOT: 303,
              REPLAY_HIDEHUD: 304,
              REPLAY_STARTPOINT: 305,
              REPLAY_ENDPOINT: 306,
              REPLAY_ADVANCE: 307,
              REPLAY_BACK: 308,
              REPLAY_TOOLS: 309,
              REPLAY_RESTART: 310,
              REPLAY_SHOWHOTKEY: 311,
              REPLAY_CYCLEMARKERLEFT: 312,
              REPLAY_CYCLEMARKERRIGHT: 313,
              REPLAY_FOVINCREASE: 314,
              REPLAY_FOVDECREASE: 315,
              REPLAY_CAMERAUP: 316,
              REPLAY_CAMERADOWN: 317,
              REPLAY_SAVE: 318,
              REPLAY_TOGGLETIME: 319,
              REPLAY_TOGGLETIPS: 320,
              REPLAY_PREVIEW: 321,
              REPLAY_TOGGLE_TIMELINE: 322,
              REPLAY_TIMELINE_PICKUP_CLIP: 323,
              REPLAY_TIMELINE_DUPLICATE_CLIP: 324,
              REPLAY_TIMELINE_PLACE_CLIP: 325,
              REPLAY_CTRL: 326,
              REPLAY_TIMELINE_SAVE: 327,
              REPLAY_PREVIEW_AUDIO: 328,
              VEH_DRIVE_LOOK: 329,
              VEH_DRIVE_LOOK2: 330,
              VEH_FLY_ATTACK2: 331,
              RADIO_WHEEL_UD: 332,
              RADIO_WHEEL_LR: 333,
              VEH_SLOWMO_UD: 334,
              VEH_SLOWMO_UP_ONLY: 335,
              VEH_SLOWMO_DOWN_ONLY: 336,
              VEH_HYDRAULICS_CONTROL_TOGGLE: 337,
              VEH_HYDRAULICS_CONTROL_LEFT: 338,
              VEH_HYDRAULICS_CONTROL_RIGHT: 339,
              VEH_HYDRAULICS_CONTROL_UP: 340,
              VEH_HYDRAULICS_CONTROL_DOWN: 341,
              VEH_HYDRAULICS_CONTROL_LR: 342,
              VEH_HYDRAULICS_CONTROL_UD: 343,
              SWITCH_VISOR: 344,
              VEH_MELEE_HOLD: 345,
              VEH_MELEE_LEFT: 346,
              VEH_MELEE_RIGHT: 347,
              MAP_POI: 348,
              REPLAY_SNAPMATIC_PHOTO: 349,
              VEH_CAR_JUMP: 350,
              VEH_ROCKET_BOOST: 351,
              VEH_FLY_BOOST: 352,
              VEH_PARACHUTE: 353,
              VEH_BIKE_WINGS: 354,
              VEH_FLY_BOMB_BAY: 355,
              VEH_FLY_COUNTER: 356,
              VEH_TRANSFORM: 357,
            };
          },
          7068: (e, t, a) => {
            a.g.Keys = {
              0: "Нет",
              1: "ЛКМ",
              2: "ПКМ",
              3: "Break",
              4: "Нет",
              5: "Нет",
              6: "Нет",
              8: "Backspace",
              9: "Tab",
              12: "Clear",
              13: "Enter",
              16: "Shift",
              17: "Control",
              18: "Alt",
              19: "Pause/Break",
              20: "CapsLock",
              21: "Hangul",
              23: "Нет",
              24: "Нет",
              25: "Hanja",
              27: "Escape",
              28: "Conversion",
              29: "Non-conversion",
              30: "Нет",
              31: "Нет",
              32: "Пробел",
              33: "PageUp",
              34: "PageDown",
              35: "End",
              36: "Home",
              37: "Стрелка влево",
              38: "Стрелка вверх",
              39: "Стрелка вправо",
              40: "Стрелка вниз",
              41: "Select",
              42: "Print",
              43: "Execute",
              44: "PrintScreen",
              45: "Insert",
              46: "Delete",
              47: "Help",
              48: "0",
              49: "1",
              50: "2",
              51: "3",
              52: "4",
              53: "5",
              54: "6",
              55: "7",
              56: "8",
              57: "9",
              65: "A",
              66: "B",
              67: "C",
              68: "D",
              69: "E",
              70: "F",
              71: "G",
              72: "H",
              73: "I",
              74: "J",
              75: "K",
              76: "L",
              77: "M",
              78: "N",
              79: "O",
              80: "P",
              81: "Q",
              82: "R",
              83: "S",
              84: "T",
              85: "U",
              86: "V",
              87: "W",
              88: "X",
              89: "Y",
              90: "Z",
              91: "Win(Л)",
              92: "Win(Пр)",
              93: "Windows Menu",
              95: "sleep",
              96: "Доп(0)",
              97: "Доп(1)",
              98: "Доп(2)",
              99: "Доп(3)",
              100: "Доп(4)",
              101: "Доп(5)",
              102: "Доп(6)",
              103: "Доп(7)",
              104: "Доп(8)",
              105: "Доп(9)",
              106: "Доп(*)",
              107: "Доп(+)",
              108: "Нет",
              109: "Доп(-)",
              110: "Доп(,)",
              111: "Доп(/)",
              112: "F1",
              113: "F2",
              114: "F3",
              115: "F4",
              116: "F5",
              117: "F6",
              118: "F7",
              119: "F8",
              120: "F9",
              121: "F10",
              122: "F11",
              123: "F12",
              124: "F13",
              125: "F14",
              126: "F15",
              127: "F16",
              128: "F17",
              129: "F18",
              130: "F19",
              131: "F20",
              132: "F21",
              133: "F22",
              134: "F23",
              135: "F24",
              144: "Numlock",
              145: "Scrolllock",
              160: "Левый Shift",
              161: "Правый Shift",
              162: "Левый Ctrl",
              163: "Правый Ctrl",
              164: "Левый Alt",
              165: "Правый Alt",
              166: "Browser Back",
              167: "Browser Forward",
              168: "Browser Refresh",
              169: "Browser Stop",
              170: "Browser Search",
              171: "Browser Favorites",
              172: "Browser Home",
              173: "Volume Mute",
              174: "Volume Down",
              175: "Volume Up",
              176: "Next Track",
              177: "Previous Track",
              178: "Stop Media",
              179: "Play/Pause",
              180: "Start Mail",
              181: "Select Media",
              182: "Start App 1",
              183: "Start App 2",
              186: ";",
              187: "=",
              188: ",",
              189: "-",
              190: ".",
              191: "/",
              192: "Нет",
              219: "[",
              220: "Нет",
              221: "]",
              222: "Нет",
              223: "`",
              226: "Нет",
              229: "Нет",
              231: "Нет",
              246: "Нет",
              247: "Нет",
              248: "Нет",
              249: "Нет",
              250: "Нет",
              251: "Нет",
              252: "Нет",
              253: "Нет",
              254: "Нет",
              VK_LBUTTON: 1,
              VK_RBUTTON: 2,
              VK_CANCEL: 3,
              VK_MBUTTON: 4,
              VK_XBUTTON1: 5,
              VK_XBUTTON2: 6,
              VK_BACK: 8,
              VK_TAB: 9,
              VK_CLEAR: 12,
              VK_RETURN: 13,
              VK_SHIFT: 16,
              VK_CONTROL: 17,
              VK_MENU: 18,
              VK_ALT: 18,
              VK_PAUSE: 19,
              VK_CAPITAL: 20,
              VK_KANA: 21,
              VK_JUNJA: 23,
              VK_FINAL: 24,
              VK_HANJA: 25,
              VK_ESCAPE: 27,
              VK_CONVERT: 28,
              VK_NONCONVERT: 29,
              VK_ACCEPT: 30,
              VK_MODECHANGE: 31,
              VK_SPACE: 32,
              VK_PRIOR: 33,
              VK_NEXT: 34,
              VK_END: 35,
              VK_HOME: 36,
              VK_LEFT: 37,
              VK_UP: 38,
              VK_RIGHT: 39,
              VK_DOWN: 40,
              VK_SELECT: 41,
              VK_PRINT: 42,
              VK_EXECUTE: 43,
              VK_SNAPSHOT: 44,
              VK_INSERT: 45,
              VK_DELETE: 46,
              VK_HELP: 47,
              VK_0: 48,
              VK_1: 49,
              VK_2: 50,
              VK_3: 51,
              VK_4: 52,
              VK_5: 53,
              VK_6: 54,
              VK_7: 55,
              VK_8: 56,
              VK_9: 57,
              VK_A: 65,
              VK_B: 66,
              VK_C: 67,
              VK_D: 68,
              VK_E: 69,
              VK_F: 70,
              VK_G: 71,
              VK_H: 72,
              VK_I: 73,
              VK_J: 74,
              VK_K: 75,
              VK_L: 76,
              VK_M: 77,
              VK_N: 78,
              VK_O: 79,
              VK_P: 80,
              VK_Q: 81,
              VK_R: 82,
              VK_S: 83,
              VK_T: 84,
              VK_U: 85,
              VK_V: 86,
              VK_W: 87,
              VK_X: 88,
              VK_Y: 89,
              VK_Z: 90,
              VK_LWIN: 91,
              VK_RWIN: 92,
              VK_APPS: 93,
              VK_SLEEP: 95,
              VK_NUMPAD0: 96,
              VK_NUMPAD1: 97,
              VK_NUMPAD2: 98,
              VK_NUMPAD3: 99,
              VK_NUMPAD4: 100,
              VK_NUMPAD5: 101,
              VK_NUMPAD6: 102,
              VK_NUMPAD7: 103,
              VK_NUMPAD8: 104,
              VK_NUMPAD9: 105,
              VK_MULTIPLY: 106,
              VK_ADD: 107,
              VK_SEPARATOR: 108,
              VK_SUBTRACT: 109,
              VK_DECIMAL: 110,
              VK_DIVIDE: 111,
              VK_F1: 112,
              VK_F2: 113,
              VK_F3: 114,
              VK_F4: 115,
              VK_F5: 116,
              VK_F6: 117,
              VK_F7: 118,
              VK_F8: 119,
              VK_F9: 120,
              VK_F10: 121,
              VK_F11: 122,
              VK_F12: 123,
              VK_F13: 124,
              VK_F14: 125,
              VK_F15: 126,
              VK_F16: 127,
              VK_F17: 128,
              VK_F18: 129,
              VK_F19: 130,
              VK_F20: 131,
              VK_F21: 132,
              VK_F22: 133,
              VK_F23: 134,
              VK_F24: 135,
              VK_NUMLOCK: 144,
              VK_SCROLL: 145,
              VK_LSHIFT: 160,
              VK_RSHIFT: 161,
              VK_LCONTROL: 162,
              VK_RCONTROL: 163,
              VK_LMENU: 164,
              VK_RMENU: 165,
              VK_BROWSER_BACK: 166,
              VK_BROWSER_FORWARD: 167,
              VK_BROWSER_REFRESH: 168,
              VK_BROWSER_STOP: 169,
              VK_BROWSER_SEARCH: 170,
              VK_BROWSER_FAVORITES: 171,
              VK_BROWSER_HOME: 172,
              VK_VOLUME_MUTE: 173,
              VK_VOLUME_DOWN: 174,
              VK_VOLUME_UP: 175,
              VK_MEDIA_NEXT_TRACK: 176,
              VK_MEDIA_PREV_TRACK: 177,
              VK_MEDIA_STOP: 178,
              VK_MEDIA_PLAY_PAUSE: 179,
              VK_LAUNCH_MAIL: 180,
              VK_LAUNCH_MEDIA_SELECT: 181,
              VK_LAUNCH_APP1: 182,
              VK_LAUNCH_APP2: 183,
              VK_OEM_1: 186,
              VK_OEM_PLUS: 187,
              VK_OEM_COMMA: 188,
              VK_OEM_MINUS: 189,
              VK_OEM_PERIOD: 190,
              VK_OEM_2: 191,
              VK_OEM_3: 192,
              VK_OEM_4: 219,
              VK_OEM_5: 220,
              VK_OEM_6: 221,
              VK_OEM_7: 222,
              VK_OEM_8: 223,
              VK_OEM_102: 226,
              VK_PROCESSKEY: 229,
              VK_PACKET: 231,
              VK_ATTN: 246,
              VK_CRSEL: 247,
              VK_EXSEL: 248,
              VK_EREOF: 249,
              VK_PLAY: 250,
              VK_ZOOM: 251,
              VK_NONAME: 252,
              VK_PA1: 253,
              VK_OEM_CLEAR: 254,
            };
          },
          4059: (e, t, a) => {
            const o = [
                "ex_prop_adv_case_sm",
                "ex_prop_adv_case_sm_02",
                "ex_prop_adv_case_sm_03",
                "ex_prop_adv_case_sm_flash",
                "ex_prop_adv_case_sm_flash",
              ],
              i = "p_cargo_chute_s";
            let n = {};
            mp.events.add("client.fight.create", async (e, t, s, r) => {
              try {
                mp.events.call("client.fight.dell", e),
                  await a.g.loadModel(o[t]),
                  await a.g.loadModel(i);
                const l = {},
                  m = -0.19;
                (l.object = mp.game.object.createObject(
                  mp.game.joaat(o[t]),
                  s.x,
                  s.y,
                  s.z + 27.5 * r,
                  !0,
                  !0,
                  !0
                )),
                  Natives.SET_ENTITY_LOD_DIST(l.object, 1e3),
                  Natives.ACTIVATE_PHYSICS(l.object),
                  Natives.SET_DAMPING(l.object, 2, 3063 - 3062.1),
                  Natives.SET_ENTITY_VELOCITY(l.object, 0, 0, m),
                  Natives.SET_ENTITY_INVINCIBLE(l.object, !0),
                  Natives.SET_ENTITY_PROOFS(
                    l.object,
                    !0,
                    !0,
                    !0,
                    !0,
                    !0,
                    !0,
                    !0,
                    !0,
                    !0
                  ),
                  (l.parachute = mp.game.object.createObject(
                    mp.game.joaat(i),
                    s.x,
                    s.y,
                    s.z + 27.5 * r,
                    !0,
                    !0,
                    !0
                  )),
                  Natives.SET_ENTITY_LOD_DIST(l.parachute, 1e3),
                  Natives.SET_ENTITY_VELOCITY(l.parachute, 0, 0, m),
                  (l.sound = Natives.GET_SOUND_ID()),
                  mp.game.audio.playSoundFromEntity(
                    l.sound,
                    "Crate_Beeps",
                    l.object,
                    "MP_CRATE_DROP_SOUNDS",
                    !0,
                    0
                  ),
                  Natives.ATTACH_ENTITY_TO_ENTITY(
                    l.parachute,
                    l.object,
                    0,
                    0,
                    0,
                    3860.35 - 3860,
                    0,
                    0,
                    0,
                    !1,
                    !1,
                    !1,
                    !1,
                    2,
                    !0
                  ),
                  Natives.FREEZE_ENTITY_POSITION(l.object, !1),
                  (n[e] = l),
                  setTimeout(() => {
                    const t = n[e];
                    if (t) {
                      t.parachute &&
                        Natives.DOES_ENTITY_EXIST(t.parachute) &&
                        (mp.game.object.deleteObject(t.parachute),
                        (t.parachute = null));
                      const a = mp.colshapes.newSphere(s.x, s.y, s.z, 2.5, 100);
                      (a.FightId = e),
                        (n[e].share = a),
                        (s.z -= 0.3),
                        mp.events.call(
                          "client.particleEffect",
                          "core",
                          "exp_grd_flare",
                          s,
                          3e4
                        );
                    }
                  }, 8.33 * r * 1e3);
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "events/airdrop",
                  "client.fight.create",
                  e.toString()
                );
              }
            }),
              mp.events.add("client.fight.dell", (e) => {
                try {
                  const t = n[e];
                  t &&
                    (t.object &&
                      Natives.DOES_ENTITY_EXIST(t.object) &&
                      mp.game.object.deleteObject(t.object),
                    t.parachute &&
                      Natives.DOES_ENTITY_EXIST(t.parachute) &&
                      mp.game.object.deleteObject(t.parachute),
                    t.sound &&
                      (mp.game.audio.stopSound(t.sound),
                      mp.game.audio.releaseSoundId(t.sound)),
                    t.share && t.share.destroy(),
                    delete n[e]);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "events/airdrop",
                    "client.fight.dell",
                    e.toString()
                  );
                }
              }),
              mp.events.add("airdrop.updateTeamsInfo", (e) => {
                try {
                  let t = [
                    {
                      name: (e = JSON.parse(e))[0]
                        ? `${e[0].Key} (${e[0].Value.TeammatesInZone})`
                        : "Нет",
                      score: e[0] ? e[0].Value.TeamFrags : 0,
                    },
                    {
                      name: e[1]
                        ? `${e[1].Key} (${e[1].Value.TeammatesInZone})`
                        : "Нет",
                      score: e[1] ? e[1].Value.TeamFrags : 0,
                    },
                    {
                      name: e[2]
                        ? `${e[2].Key} (${e[2].Value.TeammatesInZone})`
                        : "Нет",
                      score: e[2] ? e[2].Value.TeamFrags : 0,
                    },
                  ];
                  mp.gui.emmit(
                    `window.airsoftFunctions(4, '${JSON.stringify(t)}');`
                  );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "events/airdrop",
                    "airdrop.updateTeamsInfo",
                    e.toString()
                  );
                }
              }),
              (a.g.selectFightId = -1),
              mp.events.add("playerEnterColshape", (e) => {
                try {
                  e &&
                    void 0 !== e.FightId &&
                    -1 === a.g.selectFightId &&
                    (mp.events.call("hud.oEnter", 1),
                    (a.g.selectFightId = e.FightId),
                    (a.g.canHackAirdrop = !1),
                    mp.events.callRemote(
                      "CheckAirdropLockStatus",
                      a.g.selectFightId
                    ));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "events/halloween",
                    "playerEnterColshape",
                    e.toString()
                  );
                }
              }),
              mp.events.add("playerExitColshape", (e) => {
                try {
                  e &&
                    void 0 !== e.FightId &&
                    -1 !== a.g.selectFightId &&
                    e.FightId === a.g.selectFightId &&
                    (mp.events.call("hud.cEnter"),
                    (a.g.selectFightId = -1),
                    (a.g.canHackAirdrop = !1));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "events/halloween",
                    "playerExitColshape",
                    e.toString()
                  );
                }
              });
            const s = { interval: void 0, health: 100 };
            mp.events.add("client.updateAirdropHackStatus", (e, t) => {
              try {
                (a.g.canHackAirdrop = e), (s.health = t);
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "events/airdrop",
                  "client.updateAirdropHackStatus",
                  e.toString()
                );
              }
            }),
              mp.events.add("airdrop_hackStatus", (e) => {
                1 == e
                  ? (a.g.localplayer.freezePosition(!0),
                    void 0 !== s.interval &&
                      (clearInterval(s.interval), (s.interval = void 0)),
                    (s.interval = setInterval(() => {
                      (s.health -= 1),
                        s.health <= 0 &&
                          ((s.health = 0),
                          void 0 !== s.interval &&
                            (clearInterval(s.interval), (s.interval = void 0)),
                          (a.g.canHackAirdrop = !1),
                          a.g.localplayer.freezePosition(!1),
                          mp.events.callRemote(
                            "AirdropChangeLockStatus",
                            a.g.selectFightId,
                            s.health
                          ));
                    }, 1e3)))
                  : 2 == e &&
                    (void 0 !== s.interval &&
                      (clearInterval(s.interval), (s.interval = void 0)),
                    a.g.localplayer.freezePosition(!1),
                    mp.events.callRemote(
                      "AirdropChangeLockStatus",
                      a.g.selectFightId,
                      s.health
                    ));
              }),
              mp.events.add("render", () => {
                -1 !== a.g.selectFightId &&
                  !0 === a.g.canHackAirdrop &&
                  mp.game.controls.isControlJustPressed(0, 38) &&
                  mp.events.callRemote(
                    "server.fight.player.start.hack",
                    a.g.selectFightId
                  ),
                  !0 === a.g.canHackAirdrop &&
                    mp.game.controls.isControlJustReleased(0, 38) &&
                    mp.events.call("airdrop_hackStatus", 2);
              });
            const r = { zone_marker: void 0, zone_shape: void 0, blipId: !1 };
            mp.events.add("client.airdropZone.create", (e, t, a, o) => {
              try {
                r.zone_marker ||
                  (r.zone_marker = mp.markers.new(
                    28,
                    new mp.Vector3(
                      parseFloat(e.x),
                      parseFloat(e.y),
                      parseFloat(e.z) - 1.25
                    ),
                    125,
                    { visible: !0, color: [255, 0, 0, 90], dimension: -1 }
                  )),
                  r.zone_shape ||
                    (r.zone_shape = mp.colshapes.newSphere(
                      parseFloat(e.x),
                      parseFloat(e.y),
                      parseFloat(e.z),
                      125,
                      -1
                    )),
                  r.blipId ||
                    ((r.blipId = mp.game.ui.addBlipForRadius(
                      parseFloat(e.x),
                      parseFloat(e.y),
                      parseFloat(e.z),
                      parseFloat(t)
                    )),
                    mp.game.invoke(getNative("SET_BLIP_SPRITE"), r.blipId, 9),
                    mp.game.invoke(getNative("SET_BLIP_ALPHA"), r.blipId, 100),
                    mp.game.invoke(getNative("SET_BLIP_COLOUR"), r.blipId, a)),
                  mp.gui.emmit(
                    `window.events.callEvent("cef.hud.airdrop.open", ${o})`
                  );
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "events/airdrop",
                  "client.airdropZone.create",
                  e.toString()
                );
              }
            }),
              mp.events.add("client.blipZone.remove", () => {
                try {
                  void 0 !== r.zone_marker &&
                    (r.zone_marker.destroy(), (r.zone_marker = void 0)),
                    void 0 !== r.zone_shape &&
                      (r.zone_shape.destroy(), (r.zone_shape = void 0)),
                    r.blipId &&
                      (mp.game.ui.removeBlip(r.blipId), (r.blipId = !1)),
                    !0 === a.g.inAirdropZoneShape &&
                      100 === a.g.dimension &&
                      ((a.g.inAirdropZoneShape = !1),
                      mp.events.callRemote("AirdropChangePlayerDimension", 2)),
                    mp.gui.emmit("window.airsoftFunctions(0);"),
                    r.blipId &&
                      (mp.game.ui.removeBlip(r.blipId), (r.blipId = !1));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "events/airdrop",
                    "client.blipZone.remove",
                    e.toString()
                  );
                }
              }),
              mp.events.add("playerEnterColshape", (e) => {
                e === r.zone_shape &&
                  ((a.g.inAirdropZoneShape = !0),
                  mp.events.callRemote("AirdropChangePlayerDimension", 1));
              }),
              mp.events.add("playerExitColshape", (e) => {
                e === r.zone_shape &&
                  ((a.g.inAirdropZoneShape = !1),
                  mp.events.callRemote("AirdropChangePlayerDimension", 2));
              });
          },
          1203: (e, t, a) => {
            const o = {
              joinLobbyIndex: -1,
              local_seconds: 600,
              local_interval: void 0,
              zone_marker: void 0,
              zone_shape: void 0,
              zone_leave_interval: void 0,
              zone_return_seconds: 15,
              zone_return_show_message: void 0,
            };
            mp.events.add("playerEnterColshape", (e) => {
              try {
                e === o.zone_shape &&
                  (void 0 !== o.zone_leave_interval &&
                    (clearInterval(o.zone_leave_interval),
                    (o.zone_leave_interval = void 0)),
                  (o.zone_return_show_message = void 0));
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "events/airsoft",
                  "playerEnterColshape",
                  e.toString()
                );
              }
            }),
              mp.events.add("playerExitColshape", (e) => {
                try {
                  e === o.zone_shape &&
                    void 0 !== a.g.inAirsoftLobby &&
                    a.g.inAirsoftLobby >= 0 &&
                    (void 0 !== o.zone_leave_interval &&
                      (clearInterval(o.zone_leave_interval),
                      (o.zone_leave_interval = void 0)),
                    (o.zone_return_seconds = 15),
                    (o.zone_leave_interval = setInterval(() => {
                      o.zone_return_seconds--,
                        o.zone_return_seconds >= 1
                          ? (o.zone_return_show_message = `~w~У вас есть ~r~${o.zone_return_seconds} ~w~секунд,\nчтобы вернуться в зону.`)
                          : ((o.zone_return_show_message = void 0),
                            mp.events.callRemote("airsoft_respawnPlayer"),
                            clearInterval(o.zone_leave_interval),
                            (o.zone_leave_interval = void 0));
                    }, 1e3)));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "events/airsoft",
                    "playerExitColshape",
                    e.toString()
                  );
                }
              }),
              mp.events.add(
                "airsoft_lobbyMenuHandler",
                (e, t, o = "airsoft", i = 120) => {
                  try {
                    if (1 != e || a.g.lobbyMenuActive)
                      2 == e
                        ? (a.g.menuClose(),
                          mp.gui.emmit("window.router.setHud();"),
                          (a.g.lobbyMenuActive = !1),
                          mp.events.callRemote(
                            "UpdateServerPlayersInLobbyMenuList",
                            2
                          ),
                          mp.events.callRemote(
                            "MafiaUpdateServerPlayersInLobbyMenuList",
                            2
                          ),
                          mp.events.callRemote(
                            "TanksUpdateServerPlayersInLobbyMenuList",
                            2
                          ))
                        : 3 == e
                        ? (a.g.lobbyMenuActive
                            ? mp.gui.emmit(
                                `window.events.callEvent("cef.lobby.updatePopupInfo", true, '${t}', ${i})`
                              )
                            : (mp.gui.emmit(
                                `window.router.setView("GamesOtherLobby", ['[]', '${o}', true, '${t}', ${i}])`
                              ),
                              a.g.menuOpen(),
                              (a.g.lobbyMenuActive = !0)),
                          mp.events.callRemote(
                            "UpdateServerPlayersInLobbyMenuList",
                            2
                          ),
                          mp.events.callRemote(
                            "MafiaUpdateServerPlayersInLobbyMenuList",
                            2
                          ),
                          mp.events.callRemote(
                            "TanksUpdateServerPlayersInLobbyMenuList",
                            2
                          ))
                        : 4 == e
                        ? (a.g.menuClose(),
                          mp.gui.emmit("window.router.setHud();"),
                          (a.g.lobbyMenuActive = !1),
                          mp.events.callRemote(
                            "UpdateServerPlayersInLobbyMenuList",
                            2
                          ),
                          mp.events.callRemote(
                            "MafiaUpdateServerPlayersInLobbyMenuList",
                            2
                          ),
                          mp.events.callRemote(
                            "TanksUpdateServerPlayersInLobbyMenuList",
                            2
                          ))
                        : 5 == e &&
                          (a.g.lobbyMenuActive &&
                            mp.gui.emmit(
                              `window.events.callEvent("cef.lobby.updatePopupInfo", true, '${t}')`
                            ),
                          mp.events.callRemote(
                            "UpdateServerPlayersInLobbyMenuList",
                            2
                          ),
                          mp.events.callRemote(
                            "MafiaUpdateServerPlayersInLobbyMenuList",
                            2
                          ),
                          mp.events.callRemote(
                            "TanksUpdateServerPlayersInLobbyMenuList",
                            2
                          ));
                    else {
                      let e = [];
                      t = JSON.parse(t);
                      for (let a in t)
                        e.push({
                          lobby_number: t[a].LobbyIndex,
                          join_password: t[a].LobbyPassword,
                          title: t[a].LobbyName,
                          price: t[a].LobbyPrice,
                          mode: t[a].LobbyMode,
                          close: 0 != t[a].LobbyPassword,
                          class: o,
                        });
                      mp.gui.emmit(
                        `window.router.setView("GamesOtherLobby", ['${JSON.stringify(
                          e
                        )}', '${o}', false, '[0, 0, 0]', ${i}])`
                      ),
                        mp.discord.update(
                          "В лобби на Арене",
                          `на RedAge под ID ${a.g.localplayer.remoteId}`
                        ),
                        a.g.menuOpen(),
                        (a.g.lobbyMenuActive = !0),
                        "airsoft" == o
                          ? mp.events.callRemote(
                              "UpdateServerPlayersInLobbyMenuList",
                              1
                            )
                          : "mafia" == o
                          ? mp.events.callRemote(
                              "MafiaUpdateServerPlayersInLobbyMenuList",
                              1
                            )
                          : "tanks" == o &&
                            mp.events.callRemote(
                              "TanksUpdateServerPlayersInLobbyMenuList",
                              1
                            );
                    }
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "events/airsoft",
                      "airsoft_lobbyMenuHandler",
                      e.toString()
                    );
                  }
                }
              ),
              mp.events.add(
                "airsoft_createLobby_client",
                (e, t, a, o, i, n) => {
                  mp.events.callRemote(
                    "airsoft_createLobby_server",
                    e,
                    t,
                    a,
                    o,
                    i,
                    n
                  );
                }
              ),
              mp.events.add("airsoft_joinLobby_client", (e) => {
                mp.events.callRemote("airsoft_joinLobby_server", e, 0);
              }),
              mp.events.add("airsoft_joinPrivateLobby_client", (e, t) => {
                try {
                  1 == e
                    ? ((o.joinLobbyIndex = t),
                      a.g.menuClose(),
                      mp.gui.emmit("window.router.setHud();"),
                      (a.g.lobbyMenuActive = !1),
                      a.g.input.set(
                        "Пароль для входа в лобби",
                        "Введите пароль",
                        4,
                        "join_private_lobby"
                      ))
                    : 2 == e &&
                      mp.events.callRemote(
                        "airsoft_joinLobby_server",
                        o.joinLobbyIndex,
                        t
                      );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "events/airsoft",
                    "airsoft_joinPrivateLobby_client",
                    e.toString()
                  );
                }
              }),
              mp.events.add(
                "airsoft_updateLobbyList_client",
                (e, t = "airsoft") => {
                  try {
                    let a = [];
                    e = JSON.parse(e);
                    for (let o in e)
                      a.push({
                        lobby_number: e[o].LobbyIndex,
                        join_password: e[o].LobbyPassword,
                        title: e[o].LobbyName,
                        price: e[o].LobbyPrice,
                        mode: e[o].LobbyMode,
                        close: 0 != e[o].LobbyPassword,
                        class: t,
                      });
                    mp.gui.emmit(
                      `window.events.callEvent("cef.lobby.updateLobbyList", '${JSON.stringify(
                        a
                      )}')`
                    );
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "events/airsoft",
                      "airsoft_updateLobbyList_client",
                      e.toString()
                    );
                  }
                }
              );
            let i = null;
            mp.events.add("airsoft_updateStats_client", async (e, t, n) => {
              try {
                if (0 == e)
                  void 0 !== o.local_interval &&
                    (clearInterval(o.local_interval),
                    (o.local_interval = void 0)),
                    mp.gui.emmit("window.airsoftFunctions(0);"),
                    mp.events.call("hud.kill.clear");
                else if (1 == e) {
                  let e = [{ name: "СЧЕТ", score: `${t} : ${n}` }];
                  mp.gui.emmit(
                    `window.airsoftFunctions(1, '${JSON.stringify(e)}');`
                  );
                } else if (2 == e) {
                  let e = mp.players
                    .toArray()
                    .filter((e) => e.hasVariable("killsWeapon"));
                  e.sort(
                    (e, t) =>
                      t.getVariable("killsWeapon") -
                      e.getVariable("killsWeapon")
                  ),
                    (e = e.slice(0, 3)),
                    mp.discord.update(
                      "Играет в GunGame",
                      `на RedAge под ID ${a.g.localplayer.remoteId}`
                    );
                  let t = [
                    {
                      name: e[0] ? e[0].name : "Нет",
                      score: e[0] ? e[0].getVariable("killsWeapon") : 0,
                    },
                    {
                      name: e[1] ? e[1].name : "Нет",
                      score: e[1] ? e[1].getVariable("killsWeapon") : 0,
                    },
                    {
                      name: e[2] ? e[2].name : "Нет",
                      score: e[2] ? e[2].getVariable("killsWeapon") : 0,
                    },
                    {
                      name: "Уровень",
                      score:
                        (a.g.localplayer.getVariable("weaponLevel") || 0) + 1,
                    },
                  ];
                  mp.gui.emmit(
                    `window.airsoftFunctions(2, '${JSON.stringify(t)}');`
                  );
                } else if (3 == e) {
                  (o.local_seconds = t),
                    mp.gui.emmit(
                      `window.airsoftFunctions(3, ${o.local_seconds});`
                    ),
                    mp.events.call("freeze", !0);
                  let e = 5;
                  mp.gui.emmit(
                    `window.updateGameTime (${e}, "Матч", "Цель: убить как можно больше противников");`
                  ),
                    i && clearInterval(i),
                    (i = setInterval(() => {
                      (e -= 1),
                        mp.gui.emmit(
                          `window.updateGameTime (${e}, "Матч", "Цель: убить как можно больше противников");`
                        ),
                        e <= 0 &&
                          (clearInterval(i),
                          (i = null),
                          (e = 0),
                          mp.events.call("freeze", !1));
                    }, 1e3)),
                    await a.g.wait(5e3),
                    (o.local_interval = setInterval(() => {
                      (o.local_seconds -= 1),
                        o.local_seconds <= 0 &&
                          (clearInterval(o.local_interval),
                          (o.local_interval = void 0)),
                        mp.gui.emmit(
                          `window.airsoftFunctions(3, ${o.local_seconds});`
                        );
                    }, 1e3));
                }
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "events/airsoft",
                  "airsoft_updateStats_client",
                  e.toString()
                );
              }
            }),
              mp.events.add("airsoft_updateAreaLimit", (e, t, a) => {
                try {
                  0 == e
                    ? (void 0 !== o.zone_marker &&
                        (o.zone_marker.destroy(), (o.zone_marker = void 0)),
                      void 0 !== o.zone_shape &&
                        (o.zone_shape.destroy(), (o.zone_shape = void 0)),
                      void 0 !== o.zone_leave_interval &&
                        (clearInterval(o.zone_leave_interval),
                        (o.zone_leave_interval = void 0)),
                      (o.zone_return_show_message = void 0))
                    : 1 == e &&
                      ((o.zone_marker = mp.markers.new(
                        28,
                        new mp.Vector3(t.x, t.y, t.z - 1.25),
                        a,
                        { visible: !0, color: [255, 0, 0, 90], dimension: -1 }
                      )),
                      (o.zone_shape = mp.colshapes.newSphere(
                        t.x,
                        t.y,
                        t.z,
                        a,
                        -1
                      )));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "events/airsoft",
                    "airsoft_updateAreaLimit",
                    e.toString()
                  );
                }
              }),
              mp.events.add("airsoft_updateAirsoftLobbyValue", (e) => {
                try {
                  a.g.inAirsoftLobby = e;
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "events/airsoft",
                    "airsoft_updateAirsoftLobbyValue",
                    e.toString()
                  );
                }
              }),
              mp.events.add("render", () => {
                a.g.loggedin &&
                  void 0 !== o.zone_return_show_message &&
                  mp.game.graphics.drawText(
                    o.zone_return_show_message,
                    [0.5, 0.5],
                    {
                      font: 0,
                      color: [255, 255, 255, 185],
                      scale: [1, 1],
                      outline: !0,
                    }
                  );
              });
          },
          2931: (e, t, a) => {
            let o = !1;
            mp.events.add("client.everydayawards", async (e, t, i, n, s) => {
              try {
                if (a.g.menuCheck() && !a.g.gamemenu) return;
                (o = e),
                  mp.gui.emmit('window.gameMenuView ("EverydayReward");'),
                  mp.discord.update(
                    "Изучает ежедневные награды",
                    `на RedAge под ID ${a.g.localplayer.remoteId}`
                  ),
                  await a.g.wait(50),
                  mp.gui.emmit(
                    `window.events.callEvent("cef.everydayreward.init", ${t}, '${i}', ${n}, ${s})`
                  ),
                  a.g.gamemenu || a.g.binderFunctions.GameMenuOpen();
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "events/award",
                  "client.everydayawards",
                  e.toString()
                );
              }
            }),
              mp.events.add("client.everydayawards.close", () => {
                try {
                  o && mp.events.callRemote("IsCompensation"), (o = !1);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "events/award",
                    "client.everydayawards.close",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.everydayawards.take", () => {
                mp.events.callRemote("server.everydayaward.take"),
                  a.g.binderFunctions.GameMenuClose();
              }),
              mp.events.add("client.everydayawards.checkbox", () => {
                mp.events.callRemote("server.everydayaward.checkbox");
              }),
              mp.events.add("client.everydayawards.open", () => {
                mp.events.callRemote("server.everydayaward.open", !1);
              });
          },
          7413: (e, t, a) => {
            mp.events.add("eventsMenuShow", () => {
              try {
                if (a.g.menuCheck() || a.g.eventsMenuActive) return;
                mp.gui.emmit('window.router.setView("GamesOtherMain")'),
                  a.g.menuOpen(),
                  (a.g.eventsMenuActive = !0);
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "events/eventsMenu",
                  "eventsMenuShow",
                  e.toString()
                );
              }
            }),
              mp.events.add("eventsMenuHide", () => {
                try {
                  if (!a.g.eventsMenuActive) return;
                  mp.gui.emmit("window.router.setHud();"),
                    a.g.menuClose(),
                    (a.g.eventsMenuActive = !1);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "events/eventsMenu",
                    "eventsMenuHide",
                    e.toString()
                  );
                }
              }),
              mp.events.add("selectEventClient", (e) => {
                mp.events.call("eventsMenuHide"),
                  mp.events.callRemote("selectEventServer", e);
              });
          },
          1239: (e, t, a) => {
            let o = {};
            mp.events.add("client.events.open", (e) => {
              try {
                mp.gui.emmit("window.serverStore.isEvent (true)"),
                  (e = JSON.parse(e)).forEach((e, t) => {
                    o[t] || (o[t] = {}),
                      (o[t].Position = e.Position),
                      (o[t].object = mp.objects.new(
                        mp.game.joaat("surfing"),
                        new mp.Vector3(
                          e.Position.x,
                          e.Position.y,
                          e.Position.z
                        ),
                        {
                          rotation: new mp.Vector3(0, 0, e.Rotation.z),
                          dimension: 0,
                        }
                      )),
                      (o[t].shape = mp.colshapes.newSphere(
                        e.Position.x,
                        e.Position.y,
                        e.Position.z,
                        1.5
                      )),
                      (o[t].shape.festive = !0),
                      (o[t].shape.fId = e.Id),
                      (o[t].shape.fIndex = t),
                      (o[t].shapeMusic = mp.colshapes.newSphere(
                        e.Position.x,
                        e.Position.y,
                        e.Position.z,
                        10
                      )),
                      (o[t].shapeMusic.eventMusicID = t),
                      (o[t].shapeMusic.eventMusic = !0);
                  });
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "events/festive",
                  "client.events.open",
                  e.toString()
                );
              }
            }),
              mp.events.add("pedStreamIn", (e) => {
                try {
                  if (!a.g.loggedin) return;
                  if (e.eIndex) {
                    const t = PedsData[e.eIndex - 1];
                    a.g.requestAnimDict(t.animDictionary).then(() => {
                      e.taskPlayAnim(
                        t.animDictionary,
                        t.animationName,
                        8,
                        1,
                        -1,
                        Number(t.type),
                        0,
                        !1,
                        !1,
                        !1
                      );
                    });
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "events/festive",
                    "pedStreamIn",
                    e.toString()
                  );
                }
              }),
              (a.g.selectFestive = -1);
            let i = -1;
            a.g.getRandomInt = (e, t) =>
              Math.floor(Math.random() * (t - e + 1)) + e;
            const n = { blips: {}, colshapes: {}, countToDelete: {} };
            mp.events.add("createMPWaypoint", (e, t, o, i) => {
              try {
                void 0 !== n.blips[e] &&
                  (n.blips[e].setRoute(!1),
                  n.blips[e].destroy(),
                  (n.blips[e] = void 0)),
                  void 0 !== n.colshapes[e] &&
                    (n.colshapes[e].destroy(), (n.colshapes[e] = void 0)),
                  (n.blips[e] = mp.blips.new(545, new mp.Vector3(t, o), {
                    alpha: 255,
                    color: 1,
                    name: "Метка МП",
                    dimension: i,
                  })),
                  n.blips[e].setRoute(!0),
                  n.blips[e].setRouteColour(1),
                  (n.colshapes[e] = mp.colshapes.newCircle(t, o, 10, i)),
                  (n.colshapes[e].indexMP = e),
                  a.g.localplayer.remoteId == e
                    ? (n.countToDelete[e] = 1)
                    : (n.countToDelete[e] = 0);
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "events/festive",
                  "createMPWaypoint",
                  e.toString()
                );
              }
            }),
              mp.events.add("playerEnterColshape", (e) => {
                try {
                  if (e && void 0 !== e.indexMP) {
                    var t = e.indexMP;
                    t >= 0 &&
                      (!n.countToDelete[t] || n.countToDelete[t] - 1 <= 0) &&
                      ((n.countToDelete[t] = 0),
                      void 0 !== n.blips[t] &&
                        (n.blips[t].setRoute(!1),
                        n.blips[t].destroy(),
                        (n.blips[t] = void 0)),
                      void 0 !== n.colshapes[t] &&
                        (n.colshapes[t].destroy(), (n.colshapes[t] = void 0)));
                  }
                  e &&
                  void 0 !== e.festive &&
                  void 0 !== e.fId &&
                  -1 == a.g.selectFestive
                    ? (mp.events.call("hud.oEnter", 1),
                      (a.g.selectFestive = { fId: e.fId, fIndex: e.fIndex }))
                    : e &&
                      e.eventMusic &&
                      -1 == i &&
                      (getRandomInt(1, 10) > 8 &&
                        mp.events.call(
                          "client.particleEffect",
                          "scr_indep_fireworks",
                          "scr_indep_firework_shotburst",
                          o[e.eventMusicID].Position,
                          5e3
                        ),
                      mp.events.call(
                        "sounds.playInterface",
                        "festive/put",
                        0.02
                      ),
                      (i = e.eventMusicID));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "events/festive",
                    "playerEnterColshape",
                    e.toString()
                  );
                }
              }),
              mp.events.add("playerExitColshape", (e) => {
                try {
                  e &&
                  void 0 !== e.festive &&
                  void 0 !== e.fId &&
                  -1 !== a.g.selectFestive &&
                  a.g.selectFestive.fId === e.fId
                    ? (mp.events.call("hud.cEnter"), (a.g.selectFestive = -1))
                    : e &&
                      e.eventMusic &&
                      i == e.eventMusicID &&
                      (a.g.StopSound("festive/put"), (i = -1));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "events/festive",
                    "playerExitColshape",
                    e.toString()
                  );
                }
              }),
              (a.g.lastCheckKeyToEvents = 0),
              mp.events.add("client.events.confirming", async (e, t, n) => {
                try {
                  a.g.lastCheckKeyToEvents = new Date().getTime();
                  let s = "";
                  if (
                    (2 === e || 3 === e || 4 === e
                      ? (s = "а")
                      : e > 4 && (s = "ов"),
                    mp.gui.chat.push(
                      `!{#FFA500}Вы собрали ${t} подарков из ${n} возможных. Вы на верном пути!`
                    ),
                    mp.events.call(
                      "notify",
                      4,
                      9,
                      `Вы собрали секретный подарок и получили ${e} коин${s}!`,
                      1e4
                    ),
                    t !== n
                      ? mp.events.call(
                          "notify",
                          4,
                          9,
                          `Отлично! Вам осталось собрать ${
                            n - t
                          } подарков. Поспешите, и заберите лучшие предметы, ведь время ограничено!`,
                          1e4
                        )
                      : mp.events.call(
                          "notify",
                          4,
                          9,
                          "Поздравляем, вы собрали абсолютно все существующие подарки на карте. Вы действительно чемпион с сильными нервами!",
                          1e4
                        ),
                    a.g.StopSound("festive/put"),
                    mp.events.call(
                      "sounds.playInterface",
                      "festive/bring",
                      0.05
                    ),
                    -1 !== a.g.selectFestive)
                  ) {
                    const e = o[a.g.selectFestive.fIndex];
                    e &&
                      (mp.events.call(
                        "client.particleEffect",
                        "scr_indep_fireworks",
                        "scr_indep_firework_fountain",
                        e.Position,
                        7500
                      ),
                      e.shape && e.shape.destroy(),
                      e.object &&
                        mp.objects.exists(e.object) &&
                        e.object.destroy(),
                      delete o[a.g.selectFestive.fIndex]);
                  }
                  mp.events.call("hud.cEnter"),
                    (a.g.selectFestive = -1),
                    (i = -1);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "events/festive",
                    "client.events.confirming",
                    e.toString()
                  );
                }
              });
            let s = new Date().getTime();
            mp.events.add("client.events.buyItem", (e) => {
              try {
                if (new Date().getTime() - s < 1e3)
                  return void mp.events.call(
                    "notify",
                    4,
                    9,
                    "Слишком быстро",
                    3e3
                  );
                (s = new Date().getTime()),
                  mp.events.callRemote("sever.events.buyItem", e);
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "events/festive",
                  "client.events.buyItem",
                  e.toString()
                );
              }
            }),
              mp.events.add("EndEvent", () => {
                try {
                  mp.gui.emmit("window.serverStore.isEvent (false)");
                  for (let e in o) {
                    const t = o[e];
                    t &&
                      (t.shape && t.shape.destroy(),
                      t.object &&
                        mp.objects.exists(t.object) &&
                        t.object.destroy());
                  }
                  o = {};
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "events/festive",
                    "client.events.buyItem",
                    e.toString()
                  );
                }
              });
          },
          1818: (e, t, a) => {
            const o = {
              standbyStatus: !1,
              currentSoundId: "",
              wasVoiceVolume: 100,
              joinLobbyIndex: -1,
            };
            mp.events.add("mafia_startGameStatusUpdate", () => {
              (a.g.menuOpened = !0), (a.g.startedMafiaGame = !0);
            }),
              mp.events.add("updateClientMafiaStandbyStatus", (e) => {
                (o.standbyStatus = e),
                  1 == e &&
                    a.g.mafiaMenuActive &&
                    (a.g.menuClose(),
                    mp.gui.emmit("window.router.setHud();"),
                    (a.g.mafiaMenuActive = !1),
                    (a.g.menuOpened = !0));
              }),
              mp.events.add("mafia_updateMicroStatus", (e) => {
                (a.g.mafiaGameProcess = e),
                  (a.g.MaxVoiceVolume = 1 == e ? 0 : o.wasVoiceVolume);
              }),
              mp.events.add("showMafiaGameMenu", (e, t, i, n, s, r) => {
                try {
                  let t = [];
                  e = JSON.parse(e);
                  for (let o in e)
                    t.push({
                      id: e[o].PlayerId,
                      name:
                        (1 == a.g.localplayer.getVariable("mafiaGameRole") &&
                          1 == e[o].PlayerRole) ||
                        !e[o].PlayerLife ||
                        e[o].PlayerId == a.g.localplayer.remoteId
                          ? e[o].PlayerName
                          : "Неизвестно",
                      role:
                        (1 == a.g.localplayer.getVariable("mafiaGameRole") &&
                          1 == e[o].PlayerRole) ||
                        e[o].PlayerId == a.g.localplayer.remoteId
                          ? e[o].PlayerRole - 1
                          : 4,
                      mute: e[o].PlayerMute,
                      life: e[o].PlayerLife,
                    });
                  a.g.mafiaMenuActive
                    ? mp.gui.emmit(
                        `window.events.callEvent("cef.mafiaGame.updateGameWindow", '${JSON.stringify(
                          t
                        )}', ${i}, ${n}, '${s}', '${r}', false)`
                      )
                    : (mp.gui.emmit(
                        `window.router.setView("GamesOtherMafia", ['${JSON.stringify(
                          t
                        )}', ${i}, ${n}, '${s}', '${r}', false, ${
                          a.g.localplayer.getVariable("mafiaGameRole") - 1
                        }])`
                      ),
                      mp.discord.update(
                        "Играет в Мафию",
                        `на RedAge под ID ${a.g.localplayer.remoteId}`
                      ),
                      a.g.menuOpen(),
                      (a.g.mafiaMenuActive = !0)),
                    (o.standbyStatus = !1);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "events/mafia_game",
                    "showMafiaGameMenu",
                    e.toString()
                  );
                }
              }),
              mp.events.add("mafia_closeGameMenu", () => {
                try {
                  a.g.mafiaMenuActive &&
                    (a.g.menuClose(),
                    mp.gui.emmit("window.router.setHud();"),
                    (a.g.mafiaMenuActive = !1),
                    (a.g.menuOpened = !0)),
                    (o.standbyStatus = !0);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "events/mafia_game",
                    "mafiaLobbyFunctions_client",
                    e.toString()
                  );
                }
              }),
              mp.events.add("updateVoteStatusMafiaGame", (e) => {
                mp.gui.emmit(
                  `window.events.callEvent("cef.mafiaGame.updateVoteStatus", ${e})`
                );
              }),
              mp.events.add("voteMafiaGame_client", (e) => {
                mp.events.callRemote("voteMafiaGame", e);
              }),
              mp.events.add("openMafiaHelpStartPage", (e) => {
                try {
                  a.g.mafiaMenuActive
                    ? mp.gui.emmit(
                        `window.events.callEvent("cef.mafiaGame.updateStandbyScreenStatus", true, ${e})`
                      )
                    : (mp.gui.emmit(
                        `window.router.setView("GamesOtherMafia", ['[]', false, false, '', '', true, 0, ${e}])`
                      ),
                      setTimeout(() => {
                        mp.gui.emmit(
                          `window.events.callEvent("cef.mafiaGame.updateStandbyScreenStatus", true, ${e})`
                        );
                      }, 100),
                      a.g.menuOpen(),
                      (a.g.mafiaMenuActive = !0),
                      (o.standbyStatus = !1),
                      mp.events.call(
                        "sounds.playInterface",
                        "mafia/start",
                        0.03
                      ),
                      (o.currentSoundId = "mafia/start"));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "events/mafia_game",
                    "openMafiaHelpStartPage",
                    e.toString()
                  );
                }
              }),
              mp.events.add("mafia_startSoundSpeech", (e) => {
                mp.events.call("sounds.stop", o.currentSoundId),
                  mp.events.call("sounds.playInterface", `mafia/${e}`, 0.07),
                  (o.currentSoundId = `mafia/${e}`);
              }),
              mp.events.add("mafia_clearGameInfo", () => {
                try {
                  a.g.menuClose(),
                    (a.g.mafiaGameProcess = 0),
                    (a.g.startedMafiaGame = !1),
                    (a.g.MaxVoiceVolume = o.wasVoiceVolume),
                    (o.standbyStatus = !1),
                    a.g.mafiaMenuActive &&
                      (mp.gui.emmit("window.router.setHud();"),
                      (a.g.mafiaMenuActive = !1)),
                    a.g.lobbyMenuActive &&
                      (mp.gui.emmit("window.router.setHud();"),
                      (a.g.lobbyMenuActive = !1)),
                    "mafia/peaceful_win" != o.currentSoundId &&
                      "mafia/mafia_win" != o.currentSoundId &&
                      mp.events.call("sounds.stop", o.currentSoundId);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "events/mafia_game",
                    "mafiaLobbyFunctions_client",
                    e.toString()
                  );
                }
              }),
              mp.events.add("mafia_createLobby_client", (e, t, a, o) => {
                mp.events.callRemote("mafia_createLobby_server", e, t, a, o);
              }),
              mp.events.add("mafia_joinLobby_client", (e) => {
                mp.events.callRemote("mafia_joinLobby_server", e, 0);
              }),
              mp.events.add("mafia_joinPrivateLobby_client", (e, t) => {
                try {
                  1 == e
                    ? ((o.joinLobbyIndex = t),
                      a.g.menuClose(),
                      mp.gui.emmit("window.router.setHud();"),
                      (a.g.lobbyMenuActive = !1),
                      a.g.input.set(
                        "Пароль для входа в лобби",
                        "Введите пароль",
                        4,
                        "mafia_join_private_lobby"
                      ))
                    : 2 == e &&
                      mp.events.callRemote(
                        "mafia_joinLobby_server",
                        o.joinLobbyIndex,
                        t
                      );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "events/mafia_game",
                    "mafia_joinPrivateLobby_client",
                    e.toString()
                  );
                }
              }),
              mp.events.add("render", () => {
                try {
                  0 != o.standbyStatus &&
                    mp.game.graphics.drawText(
                      "Вы ожидаете свою очередь...",
                      [0.5, 0.9],
                      {
                        font: 4,
                        color: [255, 255, 255, 255],
                        scale: [0.75, 0.75],
                        centre: !0,
                      }
                    ),
                    !0 === a.g.startedMafiaGame &&
                      (mp.game.controls.disableControlAction(0, 85, !0),
                      mp.game.controls.disableControlAction(0, 8, !0),
                      mp.game.controls.disableControlAction(0, 9, !0),
                      mp.game.controls.disableControlAction(0, 30, !0),
                      mp.game.controls.disableControlAction(0, 31, !0),
                      mp.game.controls.disableControlAction(0, 32, !0),
                      mp.game.controls.disableControlAction(0, 33, !0),
                      mp.game.controls.disableControlAction(0, 34, !0),
                      mp.game.controls.disableControlAction(0, 35, !0),
                      mp.game.controls.disableControlAction(0, 36, !0),
                      mp.game.controls.disableControlAction(0, 63, !0),
                      mp.game.controls.disableControlAction(0, 64, !0),
                      mp.game.controls.disableControlAction(0, 71, !0),
                      mp.game.controls.disableControlAction(0, 72, !0),
                      mp.game.controls.disableControlAction(0, 77, !0),
                      mp.game.controls.disableControlAction(0, 78, !0),
                      mp.game.controls.disableControlAction(0, 78, !0),
                      mp.game.controls.disableControlAction(0, 87, !0),
                      mp.game.controls.disableControlAction(0, 88, !0),
                      mp.game.controls.disableControlAction(0, 89, !0),
                      mp.game.controls.disableControlAction(0, 90, !0),
                      mp.game.controls.disableControlAction(0, 129, !0),
                      mp.game.controls.disableControlAction(0, 130, !0),
                      mp.game.controls.disableControlAction(0, 133, !0),
                      mp.game.controls.disableControlAction(0, 134, !0),
                      mp.game.controls.disableControlAction(0, 136, !0),
                      mp.game.controls.disableControlAction(0, 139, !0),
                      mp.game.controls.disableControlAction(0, 146, !0),
                      mp.game.controls.disableControlAction(0, 147, !0),
                      mp.game.controls.disableControlAction(0, 148, !0),
                      mp.game.controls.disableControlAction(0, 149, !0),
                      mp.game.controls.disableControlAction(0, 150, !0),
                      mp.game.controls.disableControlAction(0, 151, !0),
                      mp.game.controls.disableControlAction(0, 232, !0),
                      mp.game.controls.disableControlAction(0, 266, !0),
                      mp.game.controls.disableControlAction(0, 267, !0),
                      mp.game.controls.disableControlAction(0, 268, !0),
                      mp.game.controls.disableControlAction(0, 269, !0),
                      mp.game.controls.disableControlAction(0, 278, !0),
                      mp.game.controls.disableControlAction(0, 279, !0),
                      mp.game.controls.disableControlAction(0, 338, !0),
                      mp.game.controls.disableControlAction(0, 339, !0),
                      mp.game.controls.disableControlAction(0, 44, !0),
                      mp.game.controls.disableControlAction(0, 20, !0),
                      mp.game.controls.disableControlAction(0, 22, !0),
                      mp.game.controls.disableControlAction(0, 47, !0));
                } catch (e) {
                  if (
                    new Date().getTime() -
                      a.g.trycatchtime["events/mafia_game"] <
                    6e4
                  )
                    return;
                  (a.g.trycatchtime["events/mafia_game"] =
                    new Date().getTime()),
                    mp.events.callRemote(
                      "client_trycatch",
                      "events/mafia_game",
                      "render",
                      e.toString()
                    );
                }
              });
          },
          3785: (e, t, a) => {
            const o = [
                "ex_prop_adv_case_sm",
                "ex_prop_adv_case_sm_02",
                "ex_prop_adv_case_sm_03",
                "ex_prop_adv_case_sm_flash",
                "ex_prop_adv_case_sm_flash",
              ],
              i = "p_cargo_chute_s";
            let n = {};
            mp.events.add("client.matwar.fight.create", async (e, t, s, r) => {
              try {
                mp.events.call("client.matwar.fight.dell", e),
                  await a.g.loadModel(o[t]),
                  await a.g.loadModel(i);
                const l = {},
                  m = -0.19;
                (l.object = mp.game.object.createObject(
                  mp.game.joaat(o[t]),
                  s.x,
                  s.y,
                  s.z + 27.5 * r,
                  !0,
                  !0,
                  !0
                )),
                  Natives.SET_ENTITY_LOD_DIST(l.object, 1e3),
                  Natives.ACTIVATE_PHYSICS(l.object),
                  Natives.SET_DAMPING(l.object, 2, 3063 - 3062.1),
                  Natives.SET_ENTITY_VELOCITY(l.object, 0, 0, m),
                  Natives.SET_ENTITY_INVINCIBLE(l.object, !0),
                  Natives.SET_ENTITY_PROOFS(
                    l.object,
                    !0,
                    !0,
                    !0,
                    !0,
                    !0,
                    !0,
                    !0,
                    !0,
                    !0
                  ),
                  (l.parachute = mp.game.object.createObject(
                    mp.game.joaat(i),
                    s.x,
                    s.y,
                    s.z + 27.5 * r,
                    !0,
                    !0,
                    !0
                  )),
                  Natives.SET_ENTITY_LOD_DIST(l.parachute, 1e3),
                  Natives.SET_ENTITY_VELOCITY(l.parachute, 0, 0, m),
                  (l.sound = Natives.GET_SOUND_ID()),
                  mp.game.audio.playSoundFromEntity(
                    l.sound,
                    "Crate_Beeps",
                    l.object,
                    "MP_CRATE_DROP_SOUNDS",
                    !0,
                    0
                  ),
                  Natives.ATTACH_ENTITY_TO_ENTITY(
                    l.parachute,
                    l.object,
                    0,
                    0,
                    0,
                    3860.35 - 3860,
                    0,
                    0,
                    0,
                    !1,
                    !1,
                    !1,
                    !1,
                    2,
                    !0
                  ),
                  Natives.FREEZE_ENTITY_POSITION(l.object, !1),
                  (n[e] = l),
                  setTimeout(() => {
                    const t = n[e];
                    if (t) {
                      t.parachute &&
                        Natives.DOES_ENTITY_EXIST(t.parachute) &&
                        (mp.game.object.deleteObject(t.parachute),
                        (t.parachute = null));
                      const a = mp.colshapes.newSphere(s.x, s.y, s.z, 2.5, 0);
                      (a.MatWarFightId = e),
                        (n[e].share = a),
                        (s.z -= 0.3),
                        mp.events.call(
                          "client.particleEffect",
                          "core",
                          "exp_grd_flare",
                          s,
                          3e4
                        );
                    }
                  }, 8.33 * r * 1e3);
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "events/matwar",
                  "client.matwar.fight.create",
                  e.toString()
                );
              }
            }),
              mp.events.add("client.matwar.fight.dell", (e) => {
                try {
                  const t = n[e];
                  t &&
                    (t.object &&
                      Natives.DOES_ENTITY_EXIST(t.object) &&
                      mp.game.object.deleteObject(t.object),
                    t.parachute &&
                      Natives.DOES_ENTITY_EXIST(t.parachute) &&
                      mp.game.object.deleteObject(t.parachute),
                    t.sound &&
                      (mp.game.audio.stopSound(t.sound),
                      mp.game.audio.releaseSoundId(t.sound)),
                    t.share && t.share.destroy(),
                    delete n[e]);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "events/matwar",
                    "client.matwar.fight.dell",
                    e.toString()
                  );
                }
              }),
              (a.g.selectMatwarFightId = -1),
              mp.events.add("playerEnterColshape", (e) => {
                try {
                  e &&
                    void 0 !== e.MatWarFightId &&
                    -1 === a.g.selectMatwarFightId &&
                    (mp.events.call("hud.oEnter", 1),
                    (a.g.selectMatwarFightId = e.MatWarFightId),
                    (a.g.canHackMatWarDrop = !1),
                    mp.events.callRemote(
                      "CheckMatWarDropLockStatus",
                      a.g.selectMatwarFightId
                    ),
                    mp.discord.update(
                      "Играет MatWar",
                      `на RedAge под ID ${a.g.localplayer.remoteId}`
                    ));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "events/matwar",
                    "playerEnterColshape",
                    e.toString()
                  );
                }
              }),
              mp.events.add("playerExitColshape", (e) => {
                try {
                  e &&
                    void 0 !== e.MatWarFightId &&
                    -1 !== a.g.selectMatwarFightId &&
                    e.MatWarFightId === a.g.selectMatwarFightId &&
                    (mp.events.call("hud.cEnter"),
                    (a.g.selectMatwarFightId = -1),
                    (a.g.canHackMatWarDrop = !1));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "events/matwar",
                    "playerExitColshape",
                    e.toString()
                  );
                }
              });
            const s = { interval: void 0, health: 100 };
            mp.events.add("client.updateMatWarHackStatus", (e, t) => {
              try {
                (a.g.canHackMatWarDrop = e), (s.health = t);
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "events/matwar",
                  "client.updateMatWarHackStatus",
                  e.toString()
                );
              }
            }),
              mp.events.add("matWarDrop_hackStatus", (e) => {
                1 == e
                  ? (a.g.localplayer.freezePosition(!0),
                    void 0 !== s.interval &&
                      (clearInterval(s.interval), (s.interval = void 0)),
                    (s.interval = setInterval(() => {
                      (s.health -= 1),
                        s.health <= 0 &&
                          ((s.health = 0),
                          void 0 !== s.interval &&
                            (clearInterval(s.interval), (s.interval = void 0)),
                          (a.g.canHackMatWarDrop = !1),
                          a.g.localplayer.freezePosition(!1),
                          mp.events.callRemote(
                            "MatWarDropChangeLockStatus",
                            a.g.selectMatwarFightId,
                            s.health
                          ));
                    }, 1e3)))
                  : 2 == e &&
                    (void 0 !== s.interval &&
                      (clearInterval(s.interval), (s.interval = void 0)),
                    a.g.localplayer.freezePosition(!1),
                    mp.events.callRemote(
                      "MatWarDropChangeLockStatus",
                      a.g.selectMatwarFightId,
                      s.health
                    ));
              }),
              mp.events.add("render", () => {
                -1 !== a.g.selectMatwarFightId &&
                  !0 === a.g.canHackMatWarDrop &&
                  mp.game.controls.isControlJustPressed(0, 38) &&
                  mp.events.callRemote(
                    "server.matWar.fight.player.start.hack",
                    a.g.selectMatwarFightId
                  ),
                  !0 === a.g.canHackMatWarDrop &&
                    mp.game.controls.isControlJustReleased(0, 38) &&
                    mp.events.call("matWarDrop_hackStatus", 2);
              });
          },
          6210: (e, t, a) => {
            let o = -1;
            mp.events.add("tanks_createLobby_client", (e, t, a, o) => {
              mp.events.callRemote("tanks_createLobby_server", e, t, a, o);
            }),
              mp.events.add("tanks_joinLobby_client", (e) => {
                mp.events.callRemote("tanks_joinLobby_server", e, 0);
              }),
              mp.events.add("tanks_joinPrivateLobby_client", (e, t) => {
                try {
                  1 == e
                    ? ((o = t),
                      a.g.menuClose(),
                      mp.gui.emmit("window.router.setHud();"),
                      (a.g.lobbyMenuActive = !1),
                      a.g.input.set(
                        "Пароль для входа в лобби",
                        "Введите пароль",
                        4,
                        "tanks_join_private_lobby"
                      ))
                    : 2 == e &&
                      mp.events.callRemote("tanks_joinLobby_server", o, t);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "events/tanksRoyale",
                    "tanks_joinPrivateLobby_client",
                    e.toString()
                  );
                }
              });
          },
          7335: (e, t, a) => {
            const o = "client.advert.",
              i = "rpc.advert.",
              n = "server.advert.";
            let s = [],
              r = null,
              l = !1;
            mp.events.add(o + "open", async () => {
              await a.g.awaitMenuCheck(),
                a.g.menuOpen(),
                mp.gui.emmit('window.router.setView("FractionsWeazelNews")'),
                mp.discord.update(
                  "Изучает фракционный планшет",
                  `на RedAge под ID ${a.g.localplayer.remoteId}`
                ),
                (l = !0);
            }),
              mp.events.add(o + "close", async () => {
                l &&
                  (mp.gui.emmit("window.router.setHud();"),
                  a.g.menuClose(),
                  (l = !1));
              });
            let m = !1;
            mp.events.add(o + "isList", (e) => (m = e)),
              mp.events.add(o + "init", (e) => {
                s = JSON.parse(e);
              }),
              rpc.register(
                i + "getAdsList",
                () => (
                  null != r && mp.events.callRemote(n + "take", r),
                  (r = null),
                  JSON.stringify(s)
                )
              ),
              rpc.register(i + "getAdsCount", () => s.length),
              rpc.register(i + "getSelected", () => null != r && r),
              rpc.register(i + "getAddByID", (e) => {
                const t = s.find((t) => t.ID == e);
                return (
                  !!t &&
                  (!t.Editor ||
                    !t.Editor.length ||
                    t.Editor === a.g.localplayer.name) &&
                  (mp.events.callRemote(n + "take", e),
                  (r = e),
                  JSON.stringify(t))
                );
              }),
              rpc.register(i + "isAddByID", (e) => {
                const t = s.find((t) => t.ID == e);
                return !(
                  !t ||
                  (t.Editor &&
                    t.Editor.length &&
                    t.Editor !== a.g.localplayer.name)
                );
              }),
              mp.events.add(o + "add", (e) => {
                mp.events.call("notify", 0, 2, "Пришло новое объявление!", 3e3),
                  (e = JSON.parse(e)),
                  s.unshift(e),
                  m &&
                    mp.gui.emmit("window.listernEvent ('updateListAdverts');");
              }),
              mp.events.add(o + "update", (e, t) => {
                const a = s.findIndex((t) => t.ID === e);
                s[a] &&
                  ((s[a].Editor = t),
                  m &&
                    mp.gui.emmit("window.listernEvent ('updateListAdverts');"));
              }),
              mp.events.add(o + "remove", (e) => {
                const t = s.findIndex((t) => t.ID == e);
                s[t] &&
                  (s.splice(t, 1),
                  m &&
                    mp.gui.emmit("window.listernEvent ('updateListAdverts');"));
              }),
              (a.g.advertsactive = !1),
              mp.events.add(o + "delete", (e, t) => {
                try {
                  if (new Date().getTime() - a.g.lastCheck < 50) return;
                  (a.g.lastCheck = new Date().getTime()),
                    mp.events.callRemote(n + "delete", e, t);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "fractions/advert",
                    "client.advert.delete",
                    e.toString()
                  );
                }
              }),
              mp.events.add(o + "send", (e, t) => {
                try {
                  if (new Date().getTime() - a.g.lastCheck < 50) return;
                  (a.g.lastCheck = new Date().getTime()),
                    mp.events.callRemote(n + "send", e, t);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "fractions/advert",
                    "client.advert.send",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.advert.logs", (e) => {
                mp.gui.emmit(
                  `window.events.callEvent("cef.advert.logs", '${e}')`
                );
              }),
              mp.events.add("client.advert.phone", (e) => {
                try {
                  if (new Date().getTime() - a.g.lastCheck < 50) return;
                  (a.g.lastCheck = new Date().getTime()),
                    mp.events.callRemote("server.advert.phone", e);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "fractions/advert",
                    "client.advert.phone",
                    e.toString()
                  );
                }
              });
          },
          1089: (e, t, a) => {
            mp.events.add("matsOpen", (e, t) => {
              try {
                if (a.g.menuCheck()) return;
                a.g.menuOpen(),
                  mp.gui.emmit(
                    `window.router.setView("FractionsMats", {isArmy: ${e}, isMed: ${t}})`
                  );
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "fractions/mats",
                  "matsOpen",
                  e.toString()
                );
              }
            }),
              mp.events.add("matsL", (e) => {
                try {
                  switch (
                    (a.g.menuClose(), mp.gui.emmit("window.router.setHud()"), e)
                  ) {
                    case 1:
                    case 2:
                      a.g.input.set(
                        "Загрузить маты",
                        "Введите кол-во матов",
                        4,
                        "loadmats"
                      );
                      break;
                    case 3:
                      a.g.input.set(
                        "Загрузить наркоту",
                        "Введите кол-во наркоты",
                        4,
                        "loaddrugs"
                      );
                      break;
                    case 4:
                      a.g.input.set(
                        "Загрузить аптечки",
                        "Введите кол-во аптечек",
                        4,
                        "loadmedkits"
                      );
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "fractions/mats",
                    "matsL",
                    e.toString()
                  );
                }
              }),
              mp.events.add("matsU", (e) => {
                try {
                  switch (
                    (a.g.menuClose(), mp.gui.emmit("window.router.setHud()"), e)
                  ) {
                    case 1:
                    case 2:
                      a.g.input.set(
                        "Выгрузить маты",
                        "Введите кол-во матов",
                        4,
                        "unloadmats"
                      );
                      break;
                    case 3:
                      a.g.input.set(
                        "Выгрузить наркоту",
                        "Введите кол-во наркоты",
                        4,
                        "unloaddrugs"
                      );
                      break;
                    case 4:
                      a.g.input.set(
                        "Выгрузить аптечки",
                        "Введите кол-во аптечек",
                        4,
                        "unloadmedkits"
                      );
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "fractions/mats",
                    "matsU",
                    e.toString()
                  );
                }
              });
          },
          5998: (e, t, a) => {
            let o = !1;
            (a.g.binderFunctions.open_Table = () => {
              a.g.menuCheck() ||
                ((0 !== a.g.fractionId && 0 !== a.g.organizationId) ||
                15 === a.g.fractionId ||
                (6 === a.g.fractionId && a.g.isLeader)
                  ? a.g.OpenCircle("Открыть планшет", 0)
                  : 0 !== a.g.fractionId
                  ? mp.events.callRemote("server.openTableChoose", 0)
                  : 0 !== a.g.organizationId &&
                    mp.events.callRemote("server.openTableChoose", 1));
            }),
              mp.events.add(
                "client.table.open",
                async (e, t, i, n, s, r, l, m, c = !1) => {
                  try {
                    await a.g.awaitMenuCheck(),
                      a.g.menuOpen(),
                      mp.gui.emmit(
                        `window.router.setView("FractionsMenu", {usersList: '${e}', vehiclesList: '${t}', boardList: '${i}', settings: '${n}', defaultAccess: '${s}', access: '${r}', updateInfo: '${l}', clothesList: '${m}', isOrgTable: '${c}'})`
                      ),
                      (o = !0),
                      mp.discord.update(
                        "Изучает фракционный планшет",
                        `на RedAge под ID ${a.g.localplayer.remoteId}`
                      );
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "fractions/mats",
                      "matsOpen",
                      e.toString()
                    );
                  }
                }
              ),
              (a.g.closeFractionTableMenu = () => {
                o &&
                  (mp.gui.emmit("window.router.setHud();"),
                  a.g.menuClose(),
                  (o = !1));
              }),
              mp.events.add("client.table.rank", (e, t) => {
                mp.events.callRemote("server.table.rank", e, t);
              }),
              mp.events.add("client.table.irank", (e, t) => {
                mp.events.callRemote("server.table.irank", e, t);
              }),
              mp.events.add("client.table.call", (e, t) => {
                mp.events.callRemote("server.table.call", e, t);
              }),
              mp.events.add("client.table.uninvite", (e) => {
                mp.events.callRemote("server.table.uninvite", e);
              }),
              mp.events.add("client.table.invite", (e) => {
                mp.events.callRemote("server.table.invite", e);
              }),
              mp.events.add("client.table.fracad", (e) => {
                mp.events.callRemote("server.table.fracad", e);
              }),
              mp.events.add("client.table.ufracad", (e, t) => {
                mp.events.callRemote("server.table.ufracad", e, t);
              }),
              mp.events.add("client.table.dfracad", (e) => {
                mp.events.callRemote("server.table.dfracad", e);
              }),
              mp.events.add("client.table.gps", (e) => {
                mp.events.callRemote("server.table.gps", e);
              }),
              mp.events.add("client.table.evacuation", (e) => {
                mp.events.callRemote("server.table.evacuation", e);
              }),
              mp.events.add("client.table.gethistory", (e, t) => {
                mp.events.callRemote("server.table.gethistory", e, t);
              }),
              mp.events.add("client.table.logs", (e) => {
                mp.gui.emmit(
                  `window.events.callEvent("cef.table.hget", '${e}')`
                );
              }),
              mp.events.add("client.table.vrank", (e, t) => {
                mp.events.callRemote("server.table.vrank", e, t);
              }),
              mp.events.add("client.table.clothingSetRank", (e, t, a) => {
                mp.events.callRemote("server.table.clothingSetRank", e, t, a);
              }),
              mp.events.add("client.table.startEditClothingSet", (e, t, o) => {
                a.g.closeFractionTableMenu(),
                  mp.events.callRemote(
                    "server.table.startEditClothingSet",
                    e,
                    t,
                    o
                  );
              }),
              mp.events.add("client.table.editClothingSet", (e, t, a) => {
                mp.events.callRemote("server.table.editClothingSet", e, t, a);
              }),
              mp.events.add("client.table.createrank", (e) => {
                a.g.closeFractionTableMenu(),
                  mp.events.callRemote("server.table.createrank", e);
              }),
              mp.events.add("client.table.editrank", (e, t) => {
                mp.events.callRemote("server.table.editrank", e, t);
              }),
              mp.events.add("client.table.accessdelete", (e, t) => {
                mp.events.callRemote("server.table.accessdelete", e, t);
              }),
              mp.events.add("client.table.accessadd", (e, t) => {
                mp.events.callRemote("server.table.accessadd", e, t);
              }),
              mp.events.add("client.table.event", (e) => {
                a.g.closeFractionTableMenu(),
                  mp.events.callRemote("server.table.event", e);
              }),
              mp.events.add("client.table.dellorg", () => {
                a.g.closeFractionTableMenu(),
                  mp.events.callRemote("server.table.dellorg");
              }),
              mp.events.add("client.table.dellrank", (e) => {
                a.g.closeFractionTableMenu(),
                  mp.events.callRemote("server.table.dellrank", e);
              }),
              mp.events.add("client.table.sellcar", (e) => {
                a.g.closeFractionTableMenu(),
                  mp.events.callRemote("server.table.sellcar", e);
              }),
              mp.events.add("client.table.leave", () => {
                a.g.closeFractionTableMenu(),
                  mp.events.callRemote("server.table.leave");
              }),
              mp.events.add("client.table.defaultrank", () => {
                a.g.closeFractionTableMenu(),
                  mp.events.callRemote("server.table.defaultrank");
              }),
              mp.events.add("client.table.defaultvrank", () => {
                a.g.closeFractionTableMenu(),
                  mp.events.callRemote("server.table.defaultvrank");
              }),
              mp.events.add("client.table.upgrade", (e) => {
                mp.events.callRemote("server.table.upgrade", e);
              }),
              mp.events.add("client.table.tuning", () => {
                a.g.closeFractionTableMenu(),
                  mp.events.callRemote("server.table.tuning");
              }),
              mp.events.add("client.table.dron", () => {
                a.g.closeFractionTableMenu(),
                  mp.events.callRemote("server.table.dron");
              }),
              mp.events.add("client.table.reprimand", (e, t, a) => {
                mp.events.callRemote("server.table.reprimand", e, t, a);
              });
          },
          1043: (e, t, a) => {
            var o = !1;
            (a.g.binderFunctions.o_policepc = () => {
              try {
                if (
                  !a.g.loggedin ||
                  a.g.chatActive ||
                  a.g.editing ||
                  a.g.menuCheck() ||
                  new Date().getTime() - a.g.lastCheck < 1e3
                )
                  return;
                mp.events.callRemote("openCopCarMenu"),
                  (a.g.lastCheck = new Date().getTime());
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "fractions/policepc",
                  "global.binderFunctions.o_policepc",
                  e.toString()
                );
              }
            }),
              mp.events.add("playerLeaveVehicle", () => {
                try {
                  o && mp.events.call("closePc");
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "fractions/policepc",
                    "playerLeaveVehicle",
                    e.toString()
                  );
                }
              }),
              mp.events.add("openPc", () => {
                try {
                  if (a.g.menuCheck()) return;
                  (o = !0),
                    mp.gui.emmit(
                      'window.router.setView("FractionsPolicecomputer");'
                    ),
                    mp.discord.update(
                      "Использует бортовой компьютер",
                      `на RedAge под ID ${a.g.localplayer.remoteId}`
                    ),
                    a.g.menuOpen();
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "fractions/policepc",
                    "openPc",
                    e.toString()
                  );
                }
              }),
              mp.events.add("closePc", () => {
                try {
                  (o = !1),
                    mp.gui.emmit("window.router.setHud();"),
                    a.g.menuClose();
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "fractions/policepc",
                    "closePc",
                    e.toString()
                  );
                }
              }),
              (a.g.binderFunctions.c_policepc = () => {
                try {
                  o && mp.events.call("closePc");
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "fractions/policepc",
                    "global.binderFunctions.c_policepc",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client:pcMenuExit", () => {
                try {
                  (o = !1),
                    mp.gui.emmit("window.router.setHud();"),
                    a.g.menuClose();
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "fractions/policepc",
                    "client:pcMenuExit",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client:pcMenuInput", (e, t) => {
                mp.events.callRemote(e, t);
              }),
              mp.events.add("client:wantedListRequest", () => {
                mp.events.callRemote("checkWantedList");
              }),
              mp.events.add("executeCarInfo", (e, t) => {
                mp.gui.emmit(`window.policecomputer.openCar("${e}","${t}")`);
              }),
              mp.events.add(
                "executePersonInfo",
                (e, t, a, o, i, n, s, r, l) => {
                  mp.gui.emmit(
                    `window.policecomputer.openPerson("${e}","${t}","${a}","${o}","${i}","${n}","${s}","${r}","${l}")`
                  );
                }
              ),
              mp.events.add("executeWantedList", (e) => {
                mp.gui.emmit(`window.policecomputer.openWanted('${e}')`);
              });
          },
          7715: (e, t, a) => {
            mp.events.add("openStock", (e) => {
              try {
                if (a.g.menuCheck()) return;
                mp.gui.emmit(
                  `window.router.setView("FractionsStock", '${e}');`
                ),
                  mp.discord.update(
                    "На фракционном складе",
                    `на RedAge под ID ${a.g.localplayer.remoteId}`
                  ),
                  a.g.menuOpen();
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "fractions/stock",
                  "openStock",
                  e.toString()
                );
              }
            }),
              mp.events.add("closeStock", () => {
                try {
                  a.g.menuClose(), mp.gui.emmit("window.router.setHud()");
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "fractions/stock",
                    "closeStock",
                    e.toString()
                  );
                }
              }),
              mp.events.add("stockTake", (e) => {
                try {
                  switch (
                    (a.g.menuClose(), mp.gui.emmit("window.router.setHud()"), e)
                  ) {
                    case 0:
                      mp.events.callRemote("setStock", "money"),
                        a.g.input.set(
                          "Взять деньги",
                          "Введите кол-во денег",
                          10,
                          "take_stock"
                        );
                      break;
                    case 1:
                      mp.events.callRemote("setStock", "medkits"),
                        a.g.input.set(
                          "Взять аптечки",
                          "Введите кол-во аптечек",
                          10,
                          "take_stock"
                        );
                      break;
                    case 2:
                      mp.events.callRemote("setStock", "drugs"),
                        a.g.input.set(
                          "Взять наркотики",
                          "Введите кол-во наркоты",
                          10,
                          "take_stock"
                        );
                      break;
                    case 3:
                      mp.events.callRemote("setStock", "mats"),
                        a.g.input.set(
                          "Взять маты",
                          "Введите кол-во матов",
                          10,
                          "take_stock"
                        );
                      break;
                    case 4:
                      mp.events.callRemote("openWeaponStock");
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "fractions/stock",
                    "stockTake",
                    e.toString()
                  );
                }
              }),
              mp.events.add("stockPut", (e) => {
                try {
                  switch (
                    (a.g.menuClose(), mp.gui.emmit("window.router.setHud()"), e)
                  ) {
                    case 3:
                      mp.events.callRemote("setStock", "mats"),
                        a.g.input.set(
                          "Положить маты",
                          "Введите кол-во матов",
                          10,
                          "put_stock"
                        );
                      break;
                    case 0:
                      mp.events.callRemote("setStock", "money"),
                        a.g.input.set(
                          "Положить деньги",
                          "Введите кол-во денег",
                          10,
                          "put_stock"
                        );
                      break;
                    case 1:
                      mp.events.callRemote("setStock", "medkits"),
                        a.g.input.set(
                          "Положить аптечки",
                          "Введите кол-во аптечек",
                          10,
                          "put_stock"
                        );
                      break;
                    case 2:
                      mp.events.callRemote("setStock", "drugs"),
                        a.g.input.set(
                          "Положить наркотики",
                          "Введите кол-во наркоты",
                          10,
                          "put_stock"
                        );
                      break;
                    case 4:
                      mp.events.callRemote("openWeaponStock");
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "fractions/stock",
                    "stockPut",
                    e.toString()
                  );
                }
              }),
              mp.events.add("stockExit", () => {
                try {
                  a.g.menuClose(), mp.gui.emmit("window.router.setHud()");
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "fractions/stock",
                    "stockExit",
                    e.toString()
                  );
                }
              });
          },
          6540: (e, t, a) => {
            mp.events.add("startEditing", (e) => {
              try {
                a.g.binderFunctions.GameMenuClose(),
                  mp.discord.update(
                    "Расставляет мебель в доме",
                    `на RedAge под ID ${a.g.localplayer.remoteId}`
                  ),
                  a.g.OnObjectEditor(
                    mp.game.joaat(e),
                    null,
                    (e, t, a) => {
                      mp.events.callRemote(
                        "acceptEdit",
                        e.x,
                        e.y,
                        e.z,
                        t.x,
                        t.y,
                        t.z
                      );
                    },
                    () => {
                      mp.events.callRemote("cancelEdit"), a.g.DiscordDefault();
                    },
                    !0
                  );
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "house/furniture",
                  "startEditing",
                  e.toString()
                );
              }
            });
          },
          705: (e, t, a) => {
            mp.events.add("client.parking.open", async () => {
              try {
                await a.g.awaitMenuCheck(),
                  a.g.menuOpen(),
                  mp.gui.emmit('window.router.setView("HouseMenu")');
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "house/index",
                  "client.house.open",
                  e.toString()
                );
              }
            }),
              mp.events.add("client.parking.close", () => {
                mp.gui.emmit("window.router.setHud();"), a.g.menuClose();
              }),
              mp.events.add("client.garage.parking", (e, t) => {
                mp.events.callRemote("server.garage.parking", e, t);
              }),
              mp.events.add("client.parking.updateCar", (e) => {
                mp.gui.emmit(
                  `window.events.callEvent("cef.parking.carsData", '${e}')`
                ),
                  mp.gui.emmit(
                    'window.events.callEvent("cef.parking.confirm")'
                  );
              }),
              mp.events.add("client.vehicle.action", (e, t) => {
                "sell" === t && mp.events.call("client.house.close"),
                  mp.events.callRemote("server.vehicle.action", e, t);
              }),
              mp.events.add("client.garage.update", () => {
                mp.events.call("client.house.close"),
                  mp.events.callRemote("server.garage.update");
              }),
              mp.events.add("client.houseinfo.open", (e) => {
                a.g.menuCheck() ||
                  (a.g.menuOpen(),
                  mp.discord.update(
                    "Присматривает дом",
                    `на RedAge под ID ${a.g.localplayer.remoteId}`
                  ),
                  mp.gui.emmit(`window.router.setView("HouseBuy", '${e}')`));
              }),
              mp.events.add("client.houseinfo.close", () => {
                a.g.menuClose(), mp.gui.emmit("window.router.setHud()");
              }),
              mp.events.add("client.houseinfo.action", (e) => {
                mp.events.call("client.houseinfo.close"),
                  mp.events.callRemote("server.houseinfo.action", e);
              }),
              mp.events.add("client.furniture.open", (e) => {
                a.g.menuCheck() ||
                  (a.g.menuOpen(),
                  mp.discord.update(
                    "Присматривает мебель",
                    `на RedAge под ID ${a.g.localplayer.remoteId}`
                  ),
                  mp.gui.emmit(
                    `window.router.setView("HouseFurniture", '${e}')`
                  ));
              }),
              mp.events.add("client.furniture.buy", (e, t) => {
                mp.events.callRemote("server.furniture.buy", e, t);
              }),
              mp.events.add("client.furniture.close", () => {
                a.g.menuClose(), mp.gui.emmit("window.router.setHud()");
              }),
              mp.events.add("client.vehicleair.open", (e) => {
                a.g.menuCheck() ||
                  (a.g.menuOpen(),
                  mp.discord.update(
                    "В магазине вертолётов",
                    `на RedAge под ID ${a.g.localplayer.remoteId}`
                  ),
                  mp.gui.emmit(`window.router.setView("VehicleAir", '${e}')`));
              }),
              mp.events.add("client.vehicleair.exit", () => {
                mp.gui.emmit("window.router.setHud();"), a.g.menuClose();
              });
          },
          6857: (e, t, a) => {
            let o = !1;
            mp.events.add("client.rieltagency.open", (e, t, i, n, s) => {
              a.g.menuCheck() ||
                ((o = !0),
                a.g.menuOpen(),
                mp.discord.update(
                  "В риэлторском агенстве",
                  `на RedAge под ID ${a.g.localplayer.remoteId}`
                ),
                mp.gui.emmit(
                  `window.router.setView("HouseRielt", {buyPrice: ${e}, houseData: '${t}', allHouse: ${i}, businessData: '${n}', allBusiness: ${s}})`
                ));
            }),
              mp.events.add("client.rieltagency.close", () => {
                o &&
                  (mp.events.callRemote("server.rieltagency.close"),
                  (o = !1),
                  a.g.menuClose(),
                  mp.gui.emmit("window.router.setHud()"));
              }),
              mp.events.add("client.rieltagency.buy", (e, t) => {
                o &&
                  (mp.events.call("client.rieltagency.close"),
                  mp.events.callRemote("server.rieltagency.buy", e, t));
              }),
              mp.events.add("client.rieltagency.addRange", (e, t) => {
                o &&
                  (mp.gui.emmit(
                    `window.events.callEvent("cef.rieltagency.addHouse", '${e}')`
                  ),
                  mp.gui.emmit(
                    `window.events.callEvent("cef.rieltagency.addBusiness", '${t}')`
                  ));
              });
            let i = {};
            mp.events.add("client.rieltagency.addBlip", (e, t, a, o, n, s) => {
              mp.events.call("client.rieltagency.delBlip", e, a),
                (i[`${e}_${a}`] = mp.blips.new(e, new mp.Vector3(o, n), {
                  alpha: 255,
                  color: t,
                  name: s,
                })),
                mp.events.call("createWaypoint", o, n);
            }),
              mp.events.add("client.rieltagency.delBlip", (e, t) => {
                i[`${e}_${t}`] &&
                  (i[`${e}_${t}`].destroy(), delete i[`${e}_${t}`]);
              });
          },
          7185: (e, t, a) => {
            (mp.attachments = {
              attachments: {},
              addFor: async function (e, t) {
                try {
                  if (
                    (this.attachments || (this.attachments = {}),
                    this.attachments.hasOwnProperty(t) &&
                      (e.__attachmentObjects || (e.__attachmentObjects = {}),
                      !e.__attachmentObjects.hasOwnProperty(t)))
                  ) {
                    let o = this.attachments[t],
                      i = mp.objects.new(o.model, e.position, {
                        dimension: -1,
                      });
                    await a.g.IsLoadEntity(i),
                      i && i.handle && e && e.handle
                        ? (i.attachTo(
                            e.handle,
                            "string" == typeof o.boneName
                              ? e.getBoneIndexByName(o.boneName)
                              : e.getBoneIndex(o.boneName),
                            o.offset.x,
                            o.offset.y,
                            o.offset.z,
                            o.rotation.x,
                            o.rotation.y,
                            o.rotation.z,
                            !1,
                            !1,
                            !1,
                            !1,
                            2,
                            o.fixedRot
                          ),
                          "vehicle" === e.type
                            ? i.setLodDist(a.g.getLodDist(a.g.DistanceVehicle))
                            : i.setLodDist(a.g.getLodDist(a.g.DistancePlayer)),
                          (e.__attachmentObjects[t] = i))
                        : mp.objects.exists(i) && i.destroy();
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "inventory/attachments",
                    "addFor",
                    e.toString()
                  );
                }
              },
              removeFor: function (e, t) {
                try {
                  if (
                    (e.__attachmentObjects || (e.__attachmentObjects = {}),
                    e.__attachmentObjects.hasOwnProperty(t))
                  ) {
                    let a = e.__attachmentObjects[t];
                    delete e.__attachmentObjects[t],
                      mp.objects.exists(a) && a.destroy();
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "inventory/attachments",
                    "removeFor",
                    e.toString()
                  );
                }
              },
              initFor: function (e) {
                try {
                  for (let t of e.__attachments) mp.attachments.addFor(e, t);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "inventory/attachments",
                    "initFor",
                    e.toString()
                  );
                }
              },
              shutdownFor: function (e) {
                try {
                  for (let t in e.__attachmentObjects)
                    mp.attachments.removeFor(e, t);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "inventory/attachments",
                    "shutdownFor",
                    e.toString()
                  );
                }
              },
              register: function (e, t, a, o, i, n = !0) {
                try {
                  "string" == typeof e && (e = mp.game.joaat(e)),
                    "string" == typeof t && (t = mp.game.joaat(t)),
                    this.attachments || (this.attachments = {}),
                    this.attachments.hasOwnProperty(e) ||
                      (mp.game.streaming.isModelInCdimage(t) &&
                        (this.attachments[e] = {
                          id: e,
                          model: t,
                          offset: o,
                          rotation: i,
                          boneName: a,
                          fixedRot: n,
                        }));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "inventory/attachments",
                    "register",
                    e.toString()
                  );
                }
              },
              unregister: function (e) {
                try {
                  "string" == typeof e && (e = mp.game.joaat(e)),
                    this.attachments || (this.attachments = {}),
                    this.attachments.hasOwnProperty(e) &&
                      (this.attachments[e] = void 0);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "inventory/attachments",
                    "unregister",
                    e.toString()
                  );
                }
              },
              addLocal: function (e) {
                try {
                  "string" == typeof e && (e = mp.game.joaat(e));
                  let t = a.g.localplayer;
                  (t.__attachments && -1 !== t.__attachments.indexOf(e)) ||
                    mp.events.callRemote("staticAttachments.Add", String(e));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "inventory/attachments",
                    "addLocal",
                    e.toString()
                  );
                }
              },
              removeLocal: function (e) {
                try {
                  "string" == typeof e && (e = mp.game.joaat(e));
                  let t = a.g.localplayer;
                  t.__attachments &&
                    -1 !== t.__attachments.indexOf(e) &&
                    mp.events.callRemote("staticAttachments.Remove", String(e));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "inventory/attachments",
                    "removeLocal",
                    e.toString()
                  );
                }
              },
              getAttachments: function () {
                return Object.assign({}, this.attachments);
              },
            }),
              mp.events.add("allStreamIn", (e) => {
                try {
                  e && e.__attachments && mp.attachments.initFor(e);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "inventory/attachments",
                    "allStreamIn",
                    e.toString()
                  );
                }
              }),
              (a.g.IsLoadEntity = (e) =>
                new Promise(async (t, a) => {
                  try {
                    if (e && e.doesExist() && 0 !== e.handle) return t(!0);
                    let a = 0;
                    for (; !e || !e.doesExist() || 0 === e.handle; ) {
                      if (a > 1e3) return t("Ошибка IsLoadEntity.");
                      a++, await mp.game.waitAsync(10);
                    }
                    return t(!0);
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "inventory/attachments",
                      "IsLoadEntity",
                      e.toString()
                    ),
                      t();
                  }
                })),
              (a.g.IsSeatVehicle = () =>
                new Promise(async (e, t) => {
                  try {
                    if (a.g.localplayer.vehicle) return e(!0);
                    let t = 0;
                    for (; !a.g.localplayer.vehicle; ) {
                      if (t > 1e3) return e("Ошибка IsSeatVehicle.");
                      t++, await mp.game.waitAsync(10);
                    }
                    return e(!0);
                  } catch (t) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "inventory/attachments",
                      "IsSeatVehicle",
                      t.toString()
                    ),
                      e();
                  }
                })),
              mp.events.add("allStreamOut", (e) => {
                try {
                  e && e.__attachmentObjects && mp.attachments.shutdownFor(e);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "inventory/attachments",
                    "allStreamOut",
                    e.toString()
                  );
                }
              }),
              mp.events.addDataHandler("attachmentsData", (e, t) => {
                try {
                  let a = t.length > 0 ? JSON.parse(t) : [];
                  if (0 !== e.handle) {
                    let t = e.__attachments;
                    t || ((t = []), (e.__attachmentObjects = {}));
                    for (let o of t)
                      -1 === a.indexOf(o) && mp.attachments.removeFor(e, o);
                    for (let o of a)
                      -1 === t.indexOf(o) && mp.attachments.addFor(e, o);
                  }
                  e.__attachments = a;
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "inventory/attachments",
                    "attachmentsData",
                    e.toString()
                  );
                }
              }),
              mp.events.add("playerReady", () => {
                try {
                  let e, t;
                  mp.players.forEach((a) => {
                    (e = a.getVariable("attachmentsData")),
                      e &&
                        e.length > 0 &&
                        ((t = e.length > 0 ? JSON.parse(e) : []),
                        t || (t = []),
                        (a.__attachments = t),
                        (a.__attachmentObjects = {}));
                  });
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "inventory/attachments",
                    "playerReady",
                    e.toString()
                  );
                }
              }),
              mp.attachments.register(
                "spec1",
                1657647215,
                "bodyshell",
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 180)
              ),
              mp.attachments.register(
                "spec2",
                442185650,
                "bodyshell",
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 180)
              ),
              mp.attachments.register(
                "spec3",
                -388213579,
                "bodyshell",
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 180)
              ),
              mp.attachments.register(
                "beer",
                "prop_beer_stzopen",
                57005,
                new mp.Vector3(0.13, -0.13, -0.07),
                new mp.Vector3(-80, 0, 0),
                !0
              ),
              mp.attachments.register(
                "burger",
                "prop_cs_burger_01",
                57005,
                new mp.Vector3(0.14, 0, -0.06),
                new mp.Vector3(0, 0, 0),
                !0
              ),
              mp.attachments.register(
                "hotdog",
                "prop_cs_hotdog_01",
                57005,
                new mp.Vector3(0.146, 0, -0.035),
                new mp.Vector3(-33.28, -153.187, 203.25),
                !0
              ),
              mp.attachments.register(
                "pizza",
                "prop_pizza_box_02",
                18905,
                new mp.Vector3(-0.094, 0.094, 0.085),
                new mp.Vector3(148.3, 0, -22.58),
                !0
              ),
              mp.attachments.register(
                "sandwich",
                "prop_sandwich_01",
                57005,
                new mp.Vector3(0.144, 0, -0.03),
                new mp.Vector3(128.75, 4.2, -59.33),
                !0
              ),
              mp.attachments.register(
                "crisps",
                "prop_cs_crisps_01",
                18905,
                new mp.Vector3(0.045, 0.08, 0.03),
                new mp.Vector3(93.02, 22.13, -156.58),
                !0
              ),
              mp.attachments.register(
                "joint",
                "prop_sh_joint_01",
                57005,
                new mp.Vector3(0.175, 0, 0.01),
                new mp.Vector3(0.17, 66.85, 148.33),
                !0
              ),
              mp.attachments.register(
                "ecola",
                "prop_ecola_can",
                60309,
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                !0
              ),
              mp.attachments.register(
                "sprunk",
                "apa_prop_cs_plastic_cup_01",
                57005,
                new mp.Vector3(0.15, -0.09, -0.05),
                new mp.Vector3(-85.4, 0, 0),
                !0
              ),
              mp.attachments.register(
                "guitar",
                "prop_acc_guitar_01",
                24818,
                new mp.Vector3(-0.1, 0.31, 0.1),
                new mp.Vector3(10, -20, 150),
                !0
              ),
              mp.attachments.register(
                "bongo",
                "prop_bongos_01",
                24818,
                new mp.Vector3(-0.14, 0.2, 0.2),
                new mp.Vector3(51.74, 150.41, -16.1),
                !0
              ),
              mp.attachments.register(
                "press1",
                "prop_barbell_100kg",
                57005,
                new mp.Vector3(0.146, 0.34, 0.025),
                new mp.Vector3(0, 10.3, -101.08),
                !0
              ),
              mp.attachments.register(
                "press2",
                "prop_curl_bar_01",
                36029,
                new mp.Vector3(0.043, -0.107, 0.237),
                new mp.Vector3(-4.41, -114.86, 99.58),
                !0
              ),
              mp.attachments.register(
                "elguitar",
                "prop_el_guitar_01",
                24818,
                new mp.Vector3(-0.045, 0.29, 0.13),
                new mp.Vector3(11.73, -14.83, 164.166),
                !0
              ),
              mp.attachments.register(
                "cuffs",
                "p_cs_cuffs_02_s",
                6286,
                new mp.Vector3(-0.02, 0.063, 0),
                new mp.Vector3(75, 0, 76),
                !0
              ),
              mp.attachments.register(
                "moneybag",
                "prop_money_bag_01",
                18905,
                new mp.Vector3(0.55, 0.02, 0),
                new mp.Vector3(0, -90, 0),
                !0
              ),
              mp.attachments.register(
                "postalobj",
                "prop_drug_package_02",
                60309,
                new mp.Vector3(0.03, 0, 0.02),
                new mp.Vector3(0, 0, 50),
                !0
              ),
              mp.attachments.register(
                "phonecall",
                "redagephone",
                6286,
                new mp.Vector3(0.06, 0.01, -0.02),
                new mp.Vector3(80, -10, 110),
                !0
              ),
              mp.attachments.register(
                "microphone",
                "prop_microphone_02",
                60309,
                new mp.Vector3(0.06715794, 0.03628302, -0.00216622),
                new mp.Vector3(243.8641, -12.80466, 10.23078),
                !0
              ),
              mp.attachments.register(
                "vape",
                "ba_prop_battle_vape_01",
                18905,
                new mp.Vector3(0.11999999999989086, 0, 0.030000000000654836),
                new mp.Vector3(-180, 90, -20),
                !0
              ),
              mp.attachments.register(
                "umbrella",
                "p_amb_brolly_01",
                57005,
                new mp.Vector3(0.09479946, 0.013351775, -0.020646578),
                new mp.Vector3(-76.90267, 5.92244, -32.74062),
                !0
              ),
              mp.attachments.register(
                "rose",
                "prop_single_rose",
                57005,
                new mp.Vector3(0.13973124, 0.09400548, -0.008136311),
                new mp.Vector3(-86.43276, 0, -29.57296),
                !0
              ),
              mp.attachments.register(
                "news_camera",
                "prop_v_cam_01",
                28422,
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                !0
              ),
              mp.attachments.register(
                "news_mic",
                "p_ing_microphonel_01",
                57005,
                new mp.Vector3(0.13055836, 0.07557731, -0.0057103653),
                new mp.Vector3(-83.314026, 7.7800093, -24.884037),
                !0
              ),
              mp.attachments.register(
                "electric_guitar",
                "prop_el_guitar_01",
                24818,
                new mp.Vector3(-0.1, 0.31, 0.1),
                new mp.Vector3(10, -20, 150),
                !0
              ),
              mp.attachments.register(
                "binoculars",
                "prop_binoc_01",
                60309,
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                !0
              ),
              mp.attachments.register(
                "clipboard",
                "p_amb_clipboard_01",
                60309,
                new mp.Vector3(0, 0, 0),
                new mp.Vector3(0, 0, 0),
                !0
              ),
              mp.attachments.register(
                "bong",
                "prop_bong_01",
                28422,
                new mp.Vector3(0.04849681, -0.044438273, -0.057797566),
                new mp.Vector3(-73.746086, 42.461754, 0.12613341),
                !0
              ),
              mp.attachments.register(
                "teddy",
                "v_ilev_mr_rasberryclean",
                24817,
                new mp.Vector3(-0.2, 0.46, -0.016),
                new mp.Vector3(-180, 90, 0),
                !0
              ),
              mp.attachments.register(
                "barbell",
                "prop_barbell_02",
                57005,
                new mp.Vector3(0.07116705, -0.12621467, -0.22997302),
                new mp.Vector3(17.429564, 124.60293, 84.8938),
                !0
              ),
              mp.attachments.register(
                "mine_pickaxe",
                "prop_tool_pickaxe",
                6286,
                new mp.Vector3(0.048031863, -0.025162484, -0.023895439),
                new mp.Vector3(-77.863785, 0, -5.8967414),
                !0
              ),
              mp.attachments.register(
                "mine_rock",
                "prop_rock_5_smash2",
                6286,
                new mp.Vector3(0.12810344, 0.0496148, -0.24910454),
                new mp.Vector3(-85.96926, -111.396194, 11.526477),
                !0
              ),
              mp.attachments.register(
                "work_axe",
                "prop_ld_fireaxe",
                6286,
                new mp.Vector3(0.063695654, 0.038963683, 0),
                new mp.Vector3(74.704636, -7.9448185, -172.23056),
                !0
              ),
              mp.attachments.register(
                "ball",
                "w_am_baseball",
                17188,
                new mp.Vector3(0.12, 0.01, 0.01),
                new mp.Vector3(5, 150, 0),
                !0
              ),
              mp.attachments.register(
                "vehicleNumber",
                "p_num_plate_02",
                57005,
                new mp.Vector3(0.2573055, 0.06773748, 0.014193673),
                new mp.Vector3(277.4668, -3.8297656, 0.867015),
                !0
              ),
              (function () {
                let e = [
                    ["Pistol", 1467525553, 0],
                    ["VintagePistol", -1124046276, 0],
                    ["APPistol", 905830540, 0],
                    ["CombatPistol", 403140669, 0],
                    ["Revolver", 914615883, 0],
                    ["SNSPistol", 339962010, 0],
                    ["HeavyPistol", 1927398017, 0],
                    ["Pistol50", -178484015, 0],
                    ["NavyRevolver", 2200574582, 0],
                    ["CeramicPistol", 3924381353, 0],
                    ["MarksmanPistol", 4191177435, 0],
                    ["FlareGun", 1349014803, 0],
                    ["DoubleAction", 2050882666, 0],
                    ["PistolMk2", 995074671, 0],
                    ["SNSPistolMk2", 4221916961, 0],
                    ["RevolverMk2", 4065179617, 0],
                    ["CombatPDW", -1393014804, 1],
                    ["MicroSMG", -1056713654, 1],
                    ["SMG", -500057996, 1],
                    ["MiniSMG", -972823051, 1],
                    ["MachinePistol", -331545829, 1],
                    ["AssaultSMG", -473574177, 1],
                    ["RayCarbine", 377247090, 1],
                    ["MG", 2238602894, 1],
                    ["CombatMG", 3555572849, 1],
                    ["Gusenberg", 574348740, 1],
                    ["SMGMk2", 2547423399, 1],
                    ["CombatMGMk2", 2969831089, 1],
                    ["CarbineRifle", 1026431720, 2],
                    ["AssaultRifle", 273925117, 2],
                    ["SpecialCarbine", -1745643757, 2],
                    ["MarksmanRifle", -1711248638, 2],
                    ["AdvancedRifle", 2587382322, 2],
                    ["BullpupRifle", 3006407723, 2],
                    ["CompactRifle", 1931114084, 2],
                    ["AssaultRifleMk2", 1762764713, 2],
                    ["CarbineRifleMk2", 1520780799, 2],
                    ["SpecialCarbineMk2", 2379721761, 2],
                    ["BullpupRifleMk2", 1415744902, 2],
                    ["PumpShotgun", 689760839, 3],
                    ["HeavyShotgun", -1209868881, 3],
                    ["AssaultShotgun", 1255410010, 3],
                    ["BullpupShotgun", -1598212834, 3],
                    ["SawnOffShotgun", 3619125910, 3],
                    ["Musket", 1652015642, 3],
                    ["DoubleBarrelShotgun", 222483357, 3],
                    ["SweeperShotgun", 1380588314, 3],
                    ["PumpShotgunMk2", 3194406291, 3],
                  ],
                  t = new mp.Vector3(0, 0, 0),
                  a = new mp.Vector3(0, 0, 0);
                for (let o of e) {
                  let e = 0;
                  switch (o[2]) {
                    case 0:
                      (e = 51826),
                        (t = new mp.Vector3(0.02, 0.06, 0.1)),
                        (a = new mp.Vector3(-100, 0, 0));
                      break;
                    case 1:
                      (e = 58271),
                        (t = new mp.Vector3(0.08, 0.03, -0.1)),
                        (a = new mp.Vector3(-80.77, 0, 0));
                      break;
                    case 2:
                      (e = 24818),
                        (t = new mp.Vector3(-0.1, -0.15, 0.11)),
                        (a = new mp.Vector3(-180, 0, 0));
                      break;
                    case 3:
                      (e = 24818),
                        (t = new mp.Vector3(-0.1, -0.15, -0.13)),
                        (a = new mp.Vector3(0, 0, 3.5));
                  }
                  mp.attachments.register(o[0], o[1], e, t, a);
                }
              })();
            let o,
              i,
              n = !1,
              s = "",
              r = 0,
              l = 0,
              m = "",
              c = !1,
              p = !1,
              g = new mp.Vector3(),
              _ = new mp.Vector3(),
              d = { x: [0, 0, 0, 0], y: [0, 0, 0, 0], z: [0, 0, 0, 0] };
            mp.keys.bind(a.g.Keys.VK_RETURN, !1, () => {
              n &&
                (mp.events.callRemote(
                  "staticAttachments.Save",
                  s,
                  r,
                  JSON.stringify(g),
                  JSON.stringify(_)
                ),
                u());
            }),
              mp.keys.bind(a.g.Keys.VK_R, !1, () => {
                n && (c = !c);
              }),
              mp.keys.bind(a.g.Keys.VK_ESCAPE, !1, () => u()),
              mp.events.add("objecteditor:start", (e, t) => {
                !(function (e, t, a) {
                  h(t, a);
                })(0, e, t);
              });
            const h = async (e, t) => {
              try {
                if (a.g.menuCheck()) return;
                (n = !0),
                  (s = e),
                  (r = t),
                  (l =
                    "string" == typeof t
                      ? a.g.localplayer.getBoneIndexByName(t)
                      : a.g.localplayer.getBoneIndex(t)),
                  mp.objects.exists(o) && o.destroy(),
                  (o = mp.objects.new(
                    mp.game.joaat(e),
                    a.g.localplayer.position,
                    new mp.Vector3()
                  )),
                  await a.g.IsLoadEntity(o),
                  o.setCollision(!1, !1),
                  o.setNoCollision(a.g.localplayer.handle, !1),
                  (g = new mp.Vector3()),
                  (_ = new mp.Vector3()),
                  o.attachTo(
                    a.g.localplayer.handle,
                    l,
                    g.x,
                    g.y,
                    g.z,
                    _.x,
                    _.y,
                    _.z,
                    !0,
                    !1,
                    !1,
                    !1,
                    0,
                    !0
                  ),
                  a.g.menuOpen(),
                  (a.g.dropEditor = !0);
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "inventory/attachments",
                  "EnableEditor",
                  e.toString()
                );
              }
            };
            function u() {
              n &&
                ((n = !1),
                a.g.menuClose(),
                (a.g.dropEditor = !1),
                mp.objects.exists(o) && o.destroy(),
                (s = ""));
            }
            (a.g.GetMagnitudeOffset = (e, t, a, o, i, n = 0, s = 0, r = 0) => {
              try {
                const l = mp.game.graphics.world3dToScreen2d(
                  e.x + n,
                  e.y + s,
                  e.z + r
                );
                return t * (l.x - o) + a * (l.y - i);
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "inventory/attachments",
                  "GetMagnitudeOffset",
                  e.toString()
                );
              }
            }),
              (a.g.DrawAxis = (e, t, a, o) => {
                try {
                  if (
                    t &&
                    a &&
                    void 0 !== t.x &&
                    void 0 !== t.y &&
                    void 0 !== t.z &&
                    void 0 !== a.x &&
                    void 0 !== a.y &&
                    void 0 !== a.z
                  ) {
                    mp.game.graphics.drawLine(
                      t.x,
                      t.y,
                      t.z,
                      a.x,
                      a.y,
                      a.z,
                      o[0],
                      o[1],
                      o[2],
                      o[3]
                    );
                    const i = mp.game.graphics.world3dToScreen2d(a.x, a.y, a.z);
                    if (i && void 0 !== i.x && void 0 !== i.y) {
                      const t = 0.01,
                        a = 0.02;
                      return (
                        mp.game.graphics.drawRect(
                          i.x,
                          i.y,
                          t,
                          a,
                          o[0],
                          o[1],
                          o[2],
                          o[3]
                        ),
                        mp.game.graphics.drawText(e, [i.x, i.y - 0.0115], {
                          font: 0,
                          color: [255, 255, 255, 255],
                          scale: [0.3, 0.3],
                          outline: !1,
                        }),
                        [i.x, i.y - 0.0115]
                      );
                    }
                  }
                  return !1;
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "inventory/attachments",
                    "DrawAxis",
                    e.toString()
                  );
                }
              }),
              mp.events.add("render", () => {
                try {
                  if (!a.g.loggedin) return;
                  if (n && null != o && 0 != o.handle) {
                    const e = mp.gui.cursor.position,
                      t = mp.game.graphics.getScreenActiveResolution(0, 0),
                      n = t.x,
                      s = t.y,
                      r = o.getOffsetFromInWorldCoords(-0.6, 0, 0),
                      h = o.getOffsetFromInWorldCoords(0.6, 0, 0);
                    d.x = DrawAxis(c ? "RX" : "X", r, h, [
                      153,
                      153,
                      204,
                      "x" == m ? 255 : 150,
                    ]);
                    const u = o.getOffsetFromInWorldCoords(0, -0.6, 0),
                      y = o.getOffsetFromInWorldCoords(0, 0.6, 0);
                    d.y = DrawAxis(c ? "RY" : "Y", u, y, [
                      190,
                      143,
                      143,
                      "y" == m ? 255 : 150,
                    ]);
                    const v = o.getOffsetFromInWorldCoords(0, 0, -0.6),
                      f = o.getOffsetFromInWorldCoords(0, 0, 0.6);
                    if (
                      ((d.z = DrawAxis(c ? "RZ" : "Z", v, f, [
                        140,
                        180,
                        139,
                        "z" == m ? 255 : 150,
                      ])),
                      mp.game.controls.enableControlAction(0, 237, !0),
                      mp.game.controls.isControlPressed(0, 237))
                    ) {
                      if (!p && ((p = !0), "" == m)) {
                        const t = e[0] / n,
                          a = e[1] / s;
                        for (let e in d) {
                          const o = d[e];
                          0.015 >=
                            mp.game.system.vdist(t, a, 0, o[0], o[1], 0) &&
                            (m = e);
                        }
                      }
                    } else (p = !1), (m = "");
                    if ("" != m) {
                      const t = o.position,
                        r = (e[0] - i[0]) / n,
                        p = (e[1] - i[1]) / s,
                        d = mp.game.graphics.world3dToScreen2d(t.x, t.y, t.z),
                        h = d.x,
                        u = d.y;
                      switch (m) {
                        case "x":
                          {
                            const e = GetMagnitudeOffset(t, r, p, h, u, -1);
                            c ? (_.x += 800 * e) : (g.x += 50 * e);
                          }
                          break;
                        case "y":
                          {
                            const e = GetMagnitudeOffset(t, r, p, h, u, 0, -1);
                            c ? (_.y += 800 * e) : (g.y += 50 * e);
                          }
                          break;
                        case "z": {
                          const e = GetMagnitudeOffset(t, r, p, h, u, 0, -1);
                          c ? (_.z += 800 * e) : (g.z += 50 * e);
                        }
                      }
                      o.attachTo(
                        a.g.localplayer.handle,
                        l,
                        g.x,
                        g.y,
                        g.z,
                        _.x,
                        _.y,
                        _.z,
                        !0,
                        !1,
                        !1,
                        !1,
                        0,
                        !0
                      );
                    }
                    mp.keys.isDown(a.g.Keys.VK_SPACE)
                      ? (mp.gui.cursor.visible = !1)
                      : (mp.game.controls.disableAllControlActions(0),
                        (mp.gui.cursor.visible = !0)),
                      (i = e);
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "inventory/attachments",
                    "render",
                    e.toString()
                  );
                }
              }),
              (a.g.ToggleMovementControls = () => {
                mp.game.controls.disableControlAction(
                  0,
                  a.g.Inputs.MOVE_UP_ONLY,
                  !0
                ),
                  mp.game.controls.disableControlAction(
                    0,
                    a.g.Inputs.MOVE_DOWN_ONLY,
                    !0
                  ),
                  mp.game.controls.disableControlAction(
                    0,
                    a.g.Inputs.MOVE_LEFT_ONLY,
                    !0
                  ),
                  mp.game.controls.disableControlAction(
                    0,
                    a.g.Inputs.MOVE_RIGHT_ONLY,
                    !0
                  ),
                  mp.game.controls.disableControlAction(
                    0,
                    a.g.Inputs.VEH_MOVE_UP_ONLY,
                    !0
                  ),
                  mp.game.controls.disableControlAction(
                    0,
                    a.g.Inputs.VEH_MOVE_DOWN_ONLY,
                    !0
                  ),
                  mp.game.controls.disableControlAction(
                    0,
                    a.g.Inputs.VEH_MOVE_LEFT_ONLY,
                    !0
                  ),
                  mp.game.controls.disableControlAction(
                    0,
                    a.g.Inputs.VEH_MOVE_RIGHT_ONLY,
                    !0
                  ),
                  mp.game.controls.disableControlAction(0, a.g.Inputs.JUMP, !0);
              }),
              (a.g.ToggleFightControls = () => {
                mp.game.controls.disableControlAction(
                  0,
                  a.g.Inputs.VEH_AIM,
                  !0
                ),
                  mp.game.controls.disableControlAction(
                    0,
                    a.g.Inputs.VEH_ATTACK,
                    !0
                  ),
                  mp.game.controls.disableControlAction(
                    0,
                    a.g.Inputs.VEH_ATTACK2,
                    !0
                  );
              });
          },
          584: (e, t, a) => {
            (a.g.dropEditor = !1),
              mp.game.graphics.getScreenActiveResolution(0, 0);
            const o = [-1611832715, -879052345, -1118757580, -1502580877];
            mp.events.add("client.inventory.objecteditor", (e, t, i) => {
              try {
                a.g.binderFunctions.GameMenuClose(),
                  a.g.OnObjectEditor(e, null, (n, s, r) => {
                    if (o.includes(e) && a.g.isInSafeZone)
                      return mp.events.call(
                        "notify",
                        1,
                        9,
                        "Фейерверк нельзя ставить в зеленой зоне",
                        3e3
                      );
                    mp.events.callRemote(
                      "server.dropeditor.finish",
                      t,
                      i,
                      n.x,
                      n.y,
                      n.z,
                      0,
                      0,
                      s.z
                    );
                  });
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "inventory/dropEditor",
                  "client.inventory.objecteditor",
                  e.toString()
                );
              }
            });
          },
          8077: (e, t, a) => {
            (a.g.gamemenu = !1), (a.g.myStats = !1);
            let o = !1,
              i = 0;
            (a.g.pInt = (e) => (e = Math.round(e)) || 0),
              (a.g.binderFunctions.GameMenuOpen = () => {
                a.g.gamemenu ? a.g.binderFunctions.GameMenuClose() : n();
              });
            const n = () => {
              try {
                if (
                  !a.g.loggedin ||
                  a.g.chatActive ||
                  a.g.editing ||
                  a.g.cuffed ||
                  1 == a.g.isDeath ||
                  1 == a.g.isDemorgan ||
                  a.g.attachedtotrunk ||
                  a.g.menuCheck() ||
                  (void 0 !== a.g.inAirsoftLobby && a.g.inAirsoftLobby >= 0)
                )
                  return;
                a.g.myStats ||
                  mp.events.callRemote("server.gamemenu.updatestats"),
                  mp.gui.emmit('window.router.updateStatic("PlayerGameMenu");'),
                  (a.g.gamemenu = !0),
                  a.g.menuOpen(!0),
                  mp.events.call(
                    "sounds.playInterface",
                    "inventory/open_inv",
                    0.005
                  ),
                  mp.discord.update(
                    "Исследует инвентарь",
                    `на RedAge под ID ${a.g.localplayer.remoteId}`
                  ),
                  mp.gui.emmit(
                    `window.events.callEvent("cef.inventory.UpdateSpecialVars", ${!!a
                      .g.localplayer.vehicle})`
                  );
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "inventory/index",
                  "OpenGameMenu",
                  e.toString()
                );
              }
            };
            mp.events.add(a.g.renderName["500ms"], () => {
              s();
            });
            const s = () => {
              try {
                if (o) return;
                if (a.g.localplayer.vehicle) return;
                if (!a.g.gamemenu) return;
                let e = [];
                const t = a.g.localplayer.position;
                let i,
                  n,
                  s = 0;
                mp.objects.forEachInStreamRangeItems((a) => {
                  a &&
                    mp.objects.exists(a) &&
                    a.dropData &&
                    ((i = mp.game.gameplay.getDistanceBetweenCoords(
                      t.x,
                      t.y,
                      t.z,
                      a.position.x,
                      a.position.y,
                      a.position.z,
                      !0
                    )),
                    i < 3 &&
                      ((n = a.dropData),
                      n &&
                        n.ItemId &&
                        ((n.Index = s),
                        (n.remoteId = a.remoteId),
                        (e = [...e, n]),
                        s++)));
                }),
                  e.length > 0
                    ? mp.gui.emmit(
                        `window.events.callEvent("cef.inventory.InitOtherData", 8, 'На земле', '${JSON.stringify(
                          e
                        )}', ${e.length})`
                      )
                    : mp.gui.emmit(
                        'window.events.callEvent("cef.inventory.InitOtherData", 0)'
                      );
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "inventory/index",
                  "getDrops",
                  e.toString()
                );
              }
            };
            mp.events.add("client.inventory.InitBackpack", (e, t, a) => {
              mp.gui.emmit(
                `window.events.callEvent("cef.inventory.InitMyData", ${e}, '${t}', ${a})`
              );
            }),
              mp.events.add("client.inventory.InitData", (e, t) => {
                mp.gui.emmit(
                  `window.events.callEvent("cef.inventory.InitData", '${e}', ${t})`
                );
              }),
              mp.events.add(
                "client.inventory.InitOtherData",
                (e, t, i, n, s, r, l) => {
                  mp.gui.emmit(
                    `window.events.callEvent("cef.inventory.InitOtherData", ${e}, '${t}', '${i}', ${n}, '${s}', ${r}, ${l})`
                  ),
                    (o = !0),
                    a.g.gamemenu || a.g.binderFunctions.GameMenuOpen();
                }
              ),
              mp.events.add("client.inventory.SlotToPrice", (e) => {
                mp.gui.emmit(
                  `window.events.callEvent("cef.inventory.SlotToPrice", '${e}')`
                );
              }),
              mp.events.add("client.inventory.OtherClose", () => {
                mp.events.callRemote("server.gamemenu.inventory.otherclose"),
                  (o = !1),
                  s();
              }),
              mp.events.add("client.inventory.InitTradeData", (e) => {
                mp.gui.emmit(
                  `window.events.callEvent("cef.inventory.InitTradeData", '${e}')`
                ),
                  (o = !0),
                  a.g.gamemenu || a.g.binderFunctions.GameMenuOpen();
              }),
              mp.events.add("client.inventory.UpdateSlot", (e, t, a, o) => {
                mp.gui.emmit(
                  `window.events.callEvent("cef.inventory.UpdateSlot", '${e}', ${t}, '${a}', ${o})`
                );
              }),
              mp.events.add("client.inventory.TradeUpdate", (e) => {
                mp.gui.emmit(
                  `window.events.callEvent("cef.inventory.TradeUpdate", ${e})`
                );
              }),
              mp.events.add("client.inventory.tradeMoney", (e, t) => {
                mp.gui.emmit(
                  `window.events.callEvent("cef.inventory.tradeMoney", "${e}", "${t}")`
                );
              }),
              mp.events.add("client.inventory.Close", () => {
                a.g.binderFunctions.GameMenuClose();
              }),
              mp.events.add("client.inventory.Open", async () => {
                (a.g.myStats = !0),
                  await a.g.wait(50),
                  a.g.binderFunctions.GameMenuOpen();
              }),
              mp.events.add("client.gamemenu.inventory.move", (e, t, o, i) => {
                mp.events.callRemote(
                  "server.gamemenu.inventory.move",
                  String(e),
                  a.g.pInt(t),
                  String(o),
                  a.g.pInt(i)
                );
              }),
              mp.events.add(
                "client.gamemenu.inventory.move.stack",
                (e, t, o, i, n) => {
                  mp.events.callRemote(
                    "server.gamemenu.inventory.move.stack",
                    String(e),
                    a.g.pInt(t),
                    String(o),
                    a.g.pInt(i),
                    a.g.pInt(n)
                  );
                }
              ),
              mp.events.add("client.gamemenu.inventory.use", (e, t) => {
                mp.events.callRemote(
                  "server.gamemenu.inventory.use",
                  String(e),
                  a.g.pInt(t),
                  a.g.pInt(a.g.weaponData.ammo)
                );
              }),
              mp.events.add("client.gamemenu.inventory.drop", (e, t) => {
                let o = a.g.localplayer.position;
                (o.z = mp.game.gameplay.getGroundZFor3dCoord(
                  o.x,
                  o.y,
                  o.z,
                  0,
                  !1
                )),
                  mp.events.callRemote(
                    "server.gamemenu.inventory.drop",
                    String(e),
                    a.g.pInt(t),
                    o.z
                  );
              }),
              mp.events.add("client.gamemenu.inventory.stack", (e, t, o, i) => {
                mp.events.callRemote(
                  "server.gamemenu.inventory.stack",
                  String(e),
                  a.g.pInt(t),
                  a.g.pInt(o),
                  a.g.pInt(i)
                );
              }),
              mp.events.add("client.gamemenu.inventory.buy", (e, t, o) => {
                mp.events.callRemote(
                  "server.gamemenu.inventory.buy",
                  String(e),
                  a.g.pInt(t),
                  a.g.pInt(o)
                );
              }),
              mp.events.add("client.gamemenu.inventory.trade", (e) => {
                mp.events.callRemote(
                  "server.gamemenu.inventory.trade",
                  a.g.pInt(e)
                );
              }),
              mp.events.add("client.gamemenu.inventory.tradeMoney", (e) => {
                mp.events.callRemote(
                  "server.gamemenu.inventory.tradeMoney",
                  a.g.pInt(e)
                );
              }),
              mp.events.add("client.gamemenu.inventory.toput", (e, t) => {
                mp.events.callRemote(
                  "server.gamemenu.inventory.toput",
                  String(e),
                  a.g.pInt(t)
                );
              }),
              mp.events.add("client.gamemenu.inventory.nearby", (e) => {
                const t = mp.objects.atRemoteId(e);
                t &&
                  t.doesExist() &&
                  t.handle &&
                  mp.events.callRemote("server.raise", t);
              }),
              mp.events.add("statsVipInfoUpdate", (e, t) => {
                mp.gui.emmit(`window.statsInfo.updateVipInfo('${e}', '${t}')`);
              }),
              mp.events.add("checkClientSpecialVars", () => {
                a.g.menuCheck() &&
                  mp.gui.emmit(
                    `window.events.callEvent("cef.inventory.UpdateSpecialVars", ${!!a
                      .g.localplayer.vehicle})`
                  );
              }),
              (a.g.binderFunctions.GameMenuClose = (e = !0) => {
                try {
                  if (!a.g.gamemenu) return;
                  (i = 0),
                    e &&
                      (mp.events.callRemote("server.gamemenu.inventory.close"),
                      mp.gui.emmit(
                        "window.accountStore.otherStatsData ('{}')"
                      )),
                    (a.g.myStats = !1),
                    mp.gui.emmit("window.router.setHud();"),
                    mp.gui.emmit(
                      'window.events.callEvent("cef.inventory.Close")'
                    ),
                    (a.g.gamemenu = !1),
                    a.g.menuClose(),
                    (o = !1),
                    mp.events.call(
                      "sounds.playInterface",
                      "inventory/open_inv",
                      0.005
                    ),
                    mp.events.call("client.everydayawards.close");
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "inventory/index",
                    "global.binderFunctions.GameMenuClose",
                    e.toString()
                  );
                }
              }),
              (a.g.GetItemData = (e) => {
                try {
                  if (null == e || "object" != e.type || !mp.objects.exists(e))
                    return;
                  e.dropData &&
                    null != e.dropData.ItemId &&
                    mp.gui.emmit(
                      `window.hudItem.drop (${e.dropData.ItemId}, ${e.dropData.Count}, '${e.dropData.Data}')`
                    );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "inventory/index",
                    "global.GetItemData",
                    e.toString()
                  );
                }
              }),
              (a.g.GetItem = (e) => {
                mp.gui.emmit(`window.isItem([${e}])`);
              }),
              (a.g.GetItems = (e) => {
                mp.gui.emmit(`window.isItem('${JSON.stringify(e)}')`);
              });
          },
          3863: (e, t, a) => {
            let o = !1;
            (a.g.OpenNotes = (e) => {
              a.g.menuCheck() ||
                o ||
                (e
                  ? mp.gui.emmit(
                      `window.router.setView("EventsValentine", '${e}');`
                    )
                  : mp.gui.emmit('window.router.setView("EventsValentine");'),
                (o = !0),
                a.g.menuOpen());
            }),
              mp.events.add("client.note.close", () => {
                try {
                  if (!o) return;
                  mp.gui.emmit("window.router.setHud();"),
                    (o = !1),
                    a.g.menuClose();
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "inventory/notes",
                    "client.note.close",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.note.create", (e, t, i, n) => {
                try {
                  if (!o) return;
                  mp.events.call("client.note.close"),
                    mp.events.callRemote("server.note.create", e, t, i, n),
                    mp.discord.update(
                      "Пишет записку",
                      `на RedAge под ID ${a.g.localplayer.remoteId}`
                    );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "inventory/notes",
                    "client.note.create",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.note.open", (e) => {
                a.g.OpenNotes(e),
                  mp.discord.update(
                    "Читает записку",
                    `на RedAge под ID ${a.g.localplayer.remoteId}`
                  );
              });
          },
          9001: (e, t, a) => {
            const o = mp.game.graphics.getScreenActiveResolution(0, 0),
              i = mp.game.graphics.getScreenActiveResolution(1, 1),
              n = !1,
              s = !0;
            let r = {
              toggled: !1,
              entity: null,
              prop: "",
              index: 0,
              arrayObject: [],
              call: null,
              callEsq: null,
              type: n,
            };
            a.g.isEditor = !1;
            let l = "",
              m = !1,
              c = !1,
              p = { x: [0, 0, 0, 0], y: [0, 0, 0, 0], z: [0, 0, 0, 0] },
              g = [0, 0];
            mp.events.add("render", function () {
              try {
                if (!a.g.loggedin) return;
                if (!r.toggled) return;
                if (r.type == n) {
                  mp.game.controls.disableControlAction(2, 24, !0),
                    mp.game.controls.disableControlAction(2, 69, !0),
                    mp.game.controls.disableControlAction(2, 70, !0),
                    mp.game.controls.disableControlAction(2, 92, !0),
                    mp.game.controls.disableControlAction(2, 114, !0),
                    mp.game.controls.disableControlAction(2, 121, !0),
                    mp.game.controls.disableControlAction(2, 140, !0),
                    mp.game.controls.disableControlAction(2, 141, !0),
                    mp.game.controls.disableControlAction(2, 142, !0),
                    mp.game.controls.disableControlAction(2, 257, !0),
                    mp.game.controls.disableControlAction(2, 263, !0),
                    mp.game.controls.disableControlAction(2, 264, !0),
                    mp.game.controls.disableControlAction(2, 331, !0),
                    mp.game.controls.disableControlAction(2, 25, !0),
                    mp.game.controls.disableControlAction(2, 66, !0),
                    mp.game.controls.disableControlAction(2, 67, !0),
                    mp.game.controls.disableControlAction(2, 68, !0),
                    mp.game.controls.disableControlAction(2, 91, !0);
                  let t = mp.game.graphics.screen2dToWorld3d(
                      new mp.Vector3(i.x / 2, i.y / 2, 0)
                    ),
                    a = mp.game.gameplay.getGroundZFor3dCoord(
                      t.x,
                      t.y,
                      t.z,
                      0,
                      !1
                    );
                  for (
                    var e = 1;
                    e < 11 &&
                    (0 != a ||
                      ((a = mp.game.gameplay.getGroundZFor3dCoord(
                        t.x,
                        t.y,
                        t.z + e,
                        0,
                        !1
                      )),
                      0 == a));
                    e++
                  );
                  if (
                    (0 == a &&
                      (a = mp.game.gameplay.getGroundZFor3dCoord(
                        t.x,
                        t.y,
                        t.z + 50,
                        0,
                        !1
                      )),
                    (t.z = a),
                    r.entity && 0 != r.entity.handle)
                  ) {
                    r.entity.placeOnGroundProperly(),
                      (t = r.entity.getCoords(!0));
                    const e = r.entity.getRotation(2);
                    (r.entity.position = new mp.Vector3(t.x, t.y, t.z)),
                      (r.entity.rotation = new mp.Vector3(e.x, e.y, e.z)),
                      r.entity.setCollision(!1, !1),
                      r.marker &&
                        0 != r.marker.handle &&
                        (r.marker.position = new mp.Vector3(
                          t.x,
                          t.y,
                          t.z + 1.3
                        ));
                  }
                } else if (
                  null != r.entity &&
                  mp.objects.exists(r.entity) &&
                  0 != r.entity.handle
                ) {
                  const e = mp.gui.cursor.position,
                    t = o.x,
                    i = o.y,
                    n = r.entity.position,
                    s = new mp.Vector3(n.x + -0.85, n.y, n.z),
                    _ = new mp.Vector3(n.x + 0.85, n.y, n.z);
                  if (
                    ((p.x = a.g.DrawAxis(m ? "RX" : "X", s, _, [
                      153,
                      153,
                      204,
                      "x" == l ? 255 : 150,
                    ])),
                    !p.x)
                  )
                    return;
                  const d = new mp.Vector3(n.x, n.y + -0.85, n.z),
                    h = new mp.Vector3(n.x, n.y + 0.85, n.z);
                  if (
                    ((p.y = a.g.DrawAxis(m ? "RY" : "Y", d, h, [
                      190,
                      143,
                      143,
                      "y" == l ? 255 : 150,
                    ])),
                    !p.y)
                  )
                    return;
                  const u = new mp.Vector3(n.x, n.y, n.z + -0.85),
                    y = new mp.Vector3(n.x, n.y, n.z + 0.85);
                  if (
                    ((p.z = a.g.DrawAxis(m ? "RZ" : "Z", u, y, [
                      140,
                      180,
                      139,
                      "z" == l ? 255 : 150,
                    ])),
                    !p.z)
                  )
                    return;
                  if (
                    (mp.game.controls.enableControlAction(0, 237, !0),
                    r.entity.isOnScreen() &&
                      mp.game.controls.isControlPressed(0, 237))
                  ) {
                    if (!c && ((c = !0), "" == l)) {
                      const a = e[0] / t,
                        o = e[1] / i;
                      for (let e in p) {
                        const t = p[e];
                        0.015 >= mp.game.system.vdist(a, o, 0, t[0], t[1], 0) &&
                          (l = e);
                      }
                    }
                  } else (c = !1), (l = "");
                  if ("" !== l) {
                    const o = (e[0] - g[0]) / t,
                      n = (e[1] - g[1]) / i,
                      s = r.entity.position,
                      c = r.entity.rotation,
                      p = mp.game.graphics.world3dToScreen2d(s.x, s.y, s.z),
                      _ = p.x,
                      d = p.y;
                    if ("x" == l)
                      if (m) {
                        const e = a.g.GetMagnitudeOffset(s, o, n, _, d, 0, 1);
                        c.x -= 800 * e;
                      } else {
                        const e = a.g.GetMagnitudeOffset(s, o, n, _, d, 1);
                        s.x += 25 * e;
                      }
                    else if ("y" == l)
                      if (m) {
                        const e = a.g.GetMagnitudeOffset(s, o, n, _, d, 1);
                        c.y += 800 * e;
                      } else {
                        const e = a.g.GetMagnitudeOffset(s, o, n, _, d, 0, 1);
                        s.y += 25 * e;
                      }
                    else if ("z" == l) {
                      const e = a.g.GetMagnitudeOffset(s, o, n, _, d, 0, 0, 1);
                      m ? (c.z += 800 * o * 0.2) : (s.z += 25 * e);
                    }
                    (r.entity.position = s), (r.entity.rotation = c);
                  }
                  mp.keys.isDown(a.g.Keys.VK_SPACE)
                    ? (mp.gui.cursor.visible = !1)
                    : (mp.game.controls.disableAllControlActions(0),
                      (mp.gui.cursor.visible = !0)),
                    (g = e);
                }
              } catch (e) {
                if (
                  new Date().getTime() -
                    a.g.trycatchtime["inventory/objectEditor"] <
                  6e4
                )
                  return;
                (a.g.trycatchtime["inventory/objectEditor"] =
                  new Date().getTime()),
                  mp.events.callRemote(
                    "client_trycatch",
                    "inventory/objectEditor",
                    "render",
                    e.toString()
                  );
              }
            }),
              mp.events.add("click", (e, t, o, i, n, l, m, c) => {
                try {
                  if (!r.toggled) return;
                  if ("left" !== i && "right" !== i) return;
                  if ("left" == i && a.g.localplayer.isInWater())
                    return mp.events.call(
                      "notify",
                      1,
                      9,
                      "Нельзя устанавливать объекты здесь",
                      3e3
                    );
                  if (r.type === s)
                    return void (
                      "up" == o &&
                      "right" === i &&
                      mp.events.call("client.dropinfo.mod")
                    );
                  if ("left" == i && mp.objects.exists(r.entity))
                    return void mp.events.call("client.dropinfo.enter");
                  mp.events.call("client.dropinfo.close");
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "inventory/objectEditor",
                    "click",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.dropinfo.enter", () => {
                if (r.toggled) {
                  if (r.entity && mp.objects.exists(r.entity)) {
                    const e = r.entity.position,
                      t = r.entity.rotation,
                      a = r.index;
                    r.call(e, t, a);
                  }
                  mp.events.call("client.dropinfo.close", !0);
                }
              }),
              mp.events.add("client.dropinfo.close", (e = !1) => {
                r.entity && mp.objects.exists(r.entity) && r.entity.destroy(),
                  r.marker && r.marker.destroy(),
                  e ||
                    null == r.callEsq ||
                    "function" != typeof r.callEsq ||
                    r.callEsq(),
                  mp.gui.emmit("window.router.setHud()"),
                  a.g.menuClose(),
                  (r = {
                    toggled: !1,
                    entity: null,
                    prop: "",
                    index: 0,
                    arrayObject: [],
                    call: null,
                    callEsq: null,
                    type: n,
                  }),
                  (a.g.isEditor = !1);
              }),
              mp.keys.bind(a.g.Keys.VK_DOWN, !0, () => {
                try {
                  if (!r.toggled) return;
                  if (r.entity && mp.objects.exists(r.entity)) {
                    let e = r.entity.rotation.z;
                    (e -= 5),
                      e < 0 && (e = 180),
                      (r.entity.rotation = new mp.Vector3(0, 0, e));
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "inventory/objectEditor",
                    "VK_DOWN",
                    e.toString()
                  );
                }
              }),
              mp.keys.bind(a.g.Keys.VK_UP, !0, () => {
                try {
                  if (!r.toggled) return;
                  if (r.entity && mp.objects.exists(r.entity)) {
                    let e = r.entity.rotation.z;
                    (e += 5),
                      e > 180 && (e = 0),
                      (r.entity.rotation = new mp.Vector3(0, 0, e));
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "inventory/objectEditor",
                    "VK_UP",
                    e.toString()
                  );
                }
              }),
              mp.keys.bind(a.g.Keys.VK_RIGHT, !0, () => {
                try {
                  if (!r.toggled) return;
                  if (!r.arrayObject || !r.arrayObject.length) return;
                  ++r.index === r.arrayObject.length && (r.index = 0),
                    (r.prop = mp.game.joaat(r.arrayObject[r.index]));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "inventory/objectEditor",
                    "VK_RIGHT",
                    e.toString()
                  );
                }
              }),
              mp.keys.bind(a.g.Keys.VK_LEFT, !0, () => {
                try {
                  if (!r.toggled) return;
                  if (!r.arrayObject || !r.arrayObject.length) return;
                  -1 == --r.index && (r.index = r.arrayObject.length - 1),
                    (r.prop = mp.game.joaat(r.arrayObject[r.index]));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "inventory/objectEditor",
                    "VK_LEFT",
                    e.toString()
                  );
                }
              }),
              mp.keys.bind(a.g.Keys.VK_OEM_3, !1, function () {
                r.toggled &&
                  (r.petModel ||
                    (r.type === s &&
                      (mp.gui.cursor.visible = !mp.gui.cursor.visible)));
              }),
              mp.events.add("client.dropinfo.updateType", (e) => {
                if (r.toggled && !r.petModel)
                  if (((r.type = e), r.type === s))
                    r.marker && (r.marker.destroy(), (r.marker = null)),
                      (mp.gui.cursor.visible = !0);
                  else if (
                    ((mp.gui.cursor.visible = !1),
                    r.marker && (r.marker.destroy(), (r.marker = null)),
                    r.entity && mp.objects.exists(r.entity))
                  ) {
                    const e = r.entity.position;
                    r.marker = mp.markers.new(
                      2,
                      new mp.Vector3(e.x, e.y, e.z + 1.3),
                      0.3,
                      {
                        rotation: new mp.Vector3(180, 0, 0),
                        color: [255, 255, 255, 185],
                        visible: !0,
                        dimension: a.g.localplayer.dimension,
                      }
                    );
                  }
              }),
              mp.events.add("client.dropinfo.mod", () => {
                r.toggled && (r.petModel || (r.type === s && (m = !m)));
              }),
              (a.g.OnPetEditor = (e, t = [], o = null, i = null) => {
                try {
                  mp.gui.emmit("window.router.setView('PlayerDropinfo')"),
                    (a.g.menuOpened = !0),
                    (r = {
                      toggled: !0,
                      entity: null,
                      marker: null,
                      petModel: e,
                      index: 0,
                      arrayObject: t,
                      call: o,
                      callEsq: i,
                    }),
                    (a.g.isEditor = !0);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "inventory/objectEditor",
                    "global.OnObjectEditor",
                    e.toString()
                  );
                }
              }),
              (a.g.OnObjectEditor = (
                e,
                t = [],
                o = null,
                i = null,
                n = false
              ) => {
                try {
                  mp.gui.emmit(`window.router.setView('PlayerDropinfo', ${n})`),
                    (a.g.menuOpened = !0),
                    (l = ""),
                    (m = !1),
                    (c = !1),
                    (r = {
                      toggled: !0,
                      entity: null,
                      marker: null,
                      prop: e,
                      index: 0,
                      arrayObject: t,
                      call: o,
                      callEsq: i,
                      type: n,
                    }),
                    (a.g.isEditor = !0),
                    (async (e) => {
                      if (
                        (r.entity && (r.entity.destroy(), (r.entity = null)),
                        r.petModel)
                      )
                        r.entity = mp.peds.new(
                          r.petModel,
                          a.g.localplayer.position,
                          r.rot,
                          a.g.localplayer.dimension
                        );
                      else {
                        const t = a.g.localplayer.position;
                        (t.x += 1),
                          (t.y += 1),
                          await a.g.loadModel(r.prop),
                          (r.entity = mp.objects.new(r.prop, t, {
                            dimension: a.g.localplayer.dimension,
                          })),
                          e ||
                            (r.marker = mp.markers.new(
                              2,
                              new mp.Vector3(t.x, t.y, t.z + 1.3),
                              0.3,
                              {
                                rotation: new mp.Vector3(180, 0, 0),
                                color: [255, 255, 255, 185],
                                visible: !0,
                                dimension: a.g.localplayer.dimension,
                              }
                            ));
                      }
                      r.entity.setCollision(!1, !1);
                    })(n);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "inventory/objectEditor",
                    "global.OnObjectEditor",
                    e.toString()
                  );
                }
              });
            let _ = { objid: null, save: "", objects: [] };
            mp.events.add("client.editor.start", (e, t, o = !1) => {
              try {
                (_.objid = e),
                  (_.save = t),
                  o ||
                    (_.objects.forEach((e) => {
                      e && mp.objects.exists(e) && e.destroy();
                    }),
                    (_.objects = [])),
                  a.g.OnObjectEditor(mp.game.joaat(e), null, (t, o, i) => {
                    if (_.objid) {
                      const i = mp.objects.new(mp.game.joaat(e), t, {
                        rotation: new mp.Vector3(0, 0, o),
                        dimension: a.g.localplayer.dimension,
                      });
                      _.objects.push(i),
                        mp.events.callRemote(
                          "server.editor.save",
                          _.objid,
                          _.save,
                          t.x,
                          t.y,
                          t.z,
                          o
                        ),
                        setTimeout(() => {
                          mp.events.call(
                            "client.editor.start",
                            _.objid,
                            _.save,
                            !0
                          );
                        }, 250);
                    }
                  });
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "inventory/dropEditor",
                  "client.editor.start",
                  e.toString()
                );
              }
            });
          },
          6804: (e, t, a) => {
            const o = mp.game.graphics.getScreenActiveResolution(0, 0);
            let i,
              n,
              s = null,
              r = "",
              l = [0, 0];
            mp.events.add("objecteditor:start", (e) => {
              mp.gui.cursor.show(!0, !0),
                (s = mp.objects.at(e)),
                s.setCollision(!1, !1),
                (i = s.position),
                (n = s.rotation);
            });
            let m = { x: [0, 0, 0, 0], y: [0, 0, 0, 0], z: [0, 0, 0, 0] };
            mp.events.add("render", () => {
              if (s && mp.objects.exists(s) && 0 != s.handle) {
                if (!s.isOnScreen()) return;
                const e = mp.gui.cursor.position,
                  t = o.x,
                  i = o.y,
                  n = s.getOffsetFromInWorldCoords(-0.85, 0, 0),
                  c = s.getOffsetFromInWorldCoords(0.85, 0, 0);
                m.x = a.g.DrawAxis("X", n, c, [
                  153,
                  153,
                  204,
                  "x" == r ? 255 : 150,
                ]);
                const p = s.getOffsetFromInWorldCoords(0, -0.85, 0),
                  g = s.getOffsetFromInWorldCoords(0, 0.85, 0);
                m.y = a.g.DrawAxis("Y", p, g, [
                  190,
                  143,
                  143,
                  "y" == r ? 255 : 150,
                ]);
                const _ = s.getOffsetFromInWorldCoords(0, 0, -0.85),
                  d = s.getOffsetFromInWorldCoords(0, 0, 0.85);
                if (
                  ((m.z = a.g.DrawAxis("Z", _, d, [
                    140,
                    180,
                    139,
                    "z" == r ? 255 : 150,
                  ])),
                  "" !== r)
                ) {
                  const o = (e[0] - l[0]) / t,
                    n = (e[1] - l[1]) / i,
                    m = mp.game.graphics.world3dToScreen2d(
                      s.position.x,
                      s.position.y,
                      s.position.z
                    ),
                    c = m.x,
                    p = m.y;
                  let g = null;
                  "x" == r
                    ? ((g = a.g.GetMagnitudeOffset(s.position, o, n, c, p, 1)),
                      (s.position = new mp.Vector3(
                        s.position.x + 50 * g,
                        s.position.y,
                        s.position.z
                      )))
                    : "y" == r
                    ? ((g = a.g.GetMagnitudeOffset(
                        s.position,
                        o,
                        n,
                        c,
                        p,
                        0,
                        1
                      )),
                      (s.position = new mp.Vector3(
                        s.position.x,
                        s.position.y + 50 * g,
                        s.position.z
                      )))
                    : "z" == r &&
                      ((g = a.g.GetMagnitudeOffset(
                        s.position,
                        o,
                        n,
                        c,
                        p,
                        0,
                        0,
                        1
                      )),
                      (s.position = new mp.Vector3(
                        s.position.x,
                        s.position.y,
                        s.position.z + 50 * g
                      )));
                }
                l = e;
              }
            }),
              mp.events.add("click", (e, t, a, i, n, l, m, c) => {
                s && (o.x, o.y, "up" == a && (r = ""));
              }),
              mp.events.add("objecteditor", (e) => {
                let t = mp.objects.new(
                  mp.game.joaat(e),
                  new mp.Vector3(
                    a.g.localplayer.position.x,
                    a.g.localplayer.position.y,
                    a.g.localplayer.position.z
                  )
                );
                mp.events.call("objecteditor:start", t.id);
              });
          },
          2220: (e, t, a) => {
            (a.g.loggedin = !1),
              (a.g.lastCheck = 0),
              (a.g.pocketEnabled = !1),
              (a.g.esptoggle = 0),
              (a.g.freeze = !1),
              (a.g.trycatchtime = []),
              mp.game.audio.stopAllAlarms(!0),
              mp.game.graphics.setNightvision(!1),
              mp.game.graphics.setSeethrough(!1);
            var o = [
              {
                Hash: -39239064,
                Pos: new mp.Vector3(726.8857, -916.3954, 24.574392),
                Angle: -125.49453,
              },
              {
                Hash: 2634057640,
                Pos: new mp.Vector3(480.9385, -1302.576, 29.24353),
                Angle: 224,
              },
              {
                Hash: 1706635382,
                Pos: new mp.Vector3(-209.004, -1598.8934, 34.86),
                Angle: 109.549934,
              },
              {
                Hash: 588969535,
                Pos: new mp.Vector3(112.52232, -1961.4207, 20.94),
                Angle: 18.294962,
              },
              {
                Hash: -1660909656,
                Pos: new mp.Vector3(486.2756, -1528.2778, 29.292677),
                Angle: 65.77025,
              },
              {
                Hash: 653210662,
                Pos: new mp.Vector3(1408.224, -1486.415, 60.65733),
                Angle: 192.2974,
              },
              {
                Hash: 663522487,
                Pos: new mp.Vector3(944.5905, -2161.819, 31.188383),
                Angle: 172.3141,
              },
              {
                Hash: 645279998,
                Pos: new mp.Vector3(-114.937965, 987.44073, 235.7),
                Angle: 104.27872,
              },
              {
                Hash: -236444766,
                Pos: new mp.Vector3(1389.9807, 1140.2769, 114.3),
                Angle: 87.27906,
              },
              {
                Hash: -1427838341,
                Pos: new mp.Vector3(-1467.7257, -30.005075, 54.6),
                Angle: -48.08219,
              },
              {
                Hash: -2034368986,
                Pos: new mp.Vector3(1392.098, 1155.892, 114.4433),
                Angle: 82.24557,
              },
              {
                Hash: -1420211530,
                Pos: new mp.Vector3(322.785, -586.43, 43.26),
                Angle: 187.57,
              },
              {
                Hash: -1306051250,
                Pos: new mp.Vector3(332.85, -594.66, 43.26),
                Angle: 2.6,
              },
              {
                Hash: -907676309,
                Pos: new mp.Vector3(724.8585, 134.1029, 80.95643),
                Angle: 245.0083,
              },
              {
                Hash: 1535236204,
                Pos: new mp.Vector3(-773.945, 313.0294, 85.70606),
                Angle: 177.9122,
              },
              {
                Hash: mp.game.joaat("s_f_y_ranger_01"),
                Pos: new mp.Vector3(-2348.598, 3210.923, 29.224812),
                Angle: 146.52292,
                PedId: 1,
              },
            ];
            setTimeout(function () {
              o.forEach((e) => {
                let t = mp.peds.new(e.Hash, e.Pos, e.Angle, 0);
                t.setLodDist(100),
                  void 0 !== e.PedId && e.PedId > 0 && (t.PedId = e.PedId);
              });
            }, 1e4),
              mp.events.add("freeze", function (e) {
                (a.g.freeze = e),
                  localplayer.freezePosition(e),
                  localplayer.vehicle && localplayer.vehicle.freezePosition(e);
              }),
              mp.events.add("alarm", function (e, t) {
                if (t) {
                  for (; !mp.game.audio.prepareAlarm(e); ) mp.game.wait(0);
                  mp.game.audio.startAlarm(e, !0);
                } else mp.game.audio.stopAlarm(e, !0);
              }),
              mp.events.add("setHUDVisible", function (e) {
                mp.game.ui.displayHud(e), mp.game.ui.displayRadar(e);
              });
            var i = 3;
            mp.events.add("setPocketEnabled", function (e) {
              (pocketEnabled = e),
                e
                  ? (mp.gui.emmit("fx.set('inpocket')"),
                    3 == i && (i = mp.game.invoke("0x8D4D46230B2C353A")),
                    mp.game.cam.setFollowPedCamViewMode(4))
                  : (mp.gui.emmit("fx.reset()"),
                    3 != i &&
                      (mp.game.cam.setFollowPedCamViewMode(i), (i = 3)));
            }),
              (a.g.binderFunctions.acceptPressed = () => {
                !a.g.loggedin ||
                  a.g.chatActive ||
                  a.g.editing ||
                  new Date().getTime() - a.g.lastCheck < 1e3 ||
                  a.g.menuCheck() ||
                  a.g.isDemorgan ||
                  (mp.events.callRemote("acceptPressed"),
                  (a.g.lastCheck = new Date().getTime()));
              }),
              (a.g.binderFunctions.cancelPressed = () => {
                !a.g.loggedin ||
                  a.g.chatActive ||
                  a.g.editing ||
                  new Date().getTime() - a.g.lastCheck < 1e3 ||
                  a.g.menuCheck() ||
                  a.g.isDemorgan ||
                  (mp.events.callRemote("cancelPressed"),
                  (a.g.lastCheck = new Date().getTime()));
              }),
              mp.events.add("ready", function () {
                mp.game.ui.displayHud(!0);
              }),
              mp.events.add("client.kick", function (e) {
                a.g.loggedin || mp.events.call("client.auth"),
                  mp.gui.emmit("window.router.close()"),
                  a.g.menuOpen(),
                  mp.gui.emmit(
                    `window.router.setPopUp("PopupMain", {Type: "kick", Title: "вы были кикнуты", Text: '${e}'})`
                  ),
                  setTimeout(() => {
                    mp.events.callRemote("kickclient");
                  }, 18e4);
              }),
              mp.events.add("client.ban", function (e) {
                a.g.loggedin || mp.events.call("client.auth"),
                  mp.gui.emmit("window.router.close()"),
                  a.g.menuOpen(),
                  mp.gui.emmit(
                    `window.router.setPopUp("PopupMain", {Type: "ban", Title: "вы были забанены", Text: '${e}'})`
                  ),
                  setTimeout(() => {
                    mp.events.callRemote("kickclient");
                  }, 18e4);
              }),
              mp.events.add("restart", function () {
                a.g.loggedin || mp.events.call("client.auth"),
                  mp.gui.emmit("window.router.close()"),
                  a.g.menuOpen(),
                  mp.gui.emmit(
                    'window.router.setPopUp("PopupMain", {Type: "restart", Title: "Рестарт сервера", Text: \'В данный момент происходит плановый рестарт сервера, обычно это занимает всего несколько минут. Не отключайтесь от сервера, вас подключит автоматически.\'})'
                  );
              });
            var n = !1;
            mp.keys.bind(a.g.Keys.VK_F1, !0, function () {
              a.g.loggedin && ((mp.gui.cursor.visible = !0), (n = !n));
            }),
              setInterval(function () {
                n && !mp.gui.cursor.visible && (mp.gui.cursor.visible = !0);
              }, 600),
              (a.g.binderFunctions.interactionPressed = () => {
                if (
                  !(
                    !a.g.loggedin ||
                    a.g.chatActive ||
                    a.g.editing ||
                    new Date().getTime() - a.g.lastCheck < 1e3 ||
                    (a.g.menuCheck() && !a.g.isSartMetro)
                  )
                ) {
                  if (
                    null != a.g.selectFestive &&
                    -1 != a.g.selectFestive &&
                    null != a.g.selectFestive.fId &&
                    !a.g.localplayer.vehicle
                  ) {
                    if (a.g.ANTIANIM) return;
                    return new Date().getTime() - a.g.lastCheckKeyToEvents < 6e4
                      ? void mp.events.call(
                          "notify",
                          4,
                          9,
                          "Немного подождите... на вас действует минутное ограничение, вы очень быстрый.",
                          1e4
                        )
                      : void mp.events.callRemote(
                          "server.events.collect",
                          a.g.selectFestive.fId
                        );
                  }
                  if (
                    null == a.g.selectFightId ||
                    -1 == a.g.selectFightId ||
                    a.g.localplayer.vehicle ||
                    a.g.canHackAirdrop
                  )
                    if (
                      null == a.g.selectMatwarFightId ||
                      -1 == a.g.selectMatwarFightId ||
                      a.g.localplayer.vehicle ||
                      a.g.canHackMatWarDrop
                    )
                      if (null == a.g.selectBear || -1 == a.g.selectBear)
                        if (!0 !== a.g.dfdayMissionCanPress) {
                          if (a.g.isSeat) {
                            if (a.g.localplayer.vehicle) return;
                            mp.events.call("client.seat");
                          } else
                            "buyMetro" === a.g.isEnter ||
                            "exitMetro" === a.g.isEnter
                              ? mp.events.call("metroEnter")
                              : mp.events.callRemote("server.useEvent");
                          a.g.lastCheck = new Date().getTime();
                        } else {
                          if (a.g.ANTIANIM) return;
                          mp.events.call("client.update.npc_dfday_mission");
                        }
                      else {
                        if (a.g.ANTIANIM) return;
                        mp.events.callRemote(
                          "server.take_quest_item",
                          a.g.selectBear
                        );
                      }
                    else {
                      if (a.g.ANTIANIM) return;
                      mp.events.callRemote(
                        "server.matwar.fight.open",
                        a.g.selectMatwarFightId
                      );
                    }
                  else {
                    if (a.g.ANTIANIM) return;
                    mp.events.callRemote(
                      "server.fight.open",
                      a.g.selectFightId
                    );
                  }
                }
              }),
              (a.g.binderFunctions.playerPressCuffBut = () => {
                !a.g.loggedin ||
                  a.g.chatActive ||
                  a.g.editing ||
                  new Date().getTime() - a.g.lastCheck < 1e3 ||
                  a.g.menuCheck() ||
                  a.g.isDemorgan ||
                  (mp.events.callRemote("playerPressCuffBut"),
                  (a.g.lastCheck = new Date().getTime()));
              }),
              (a.g.GetWaypointCoords = () => {
                try {
                  if (Natives.IS_WAYPOINT_ACTIVE()) {
                    let e = Natives.GET_WAYPOINT_BLIP_ENUM_ID(),
                      t = Natives.GET_NUMBER_OF_ACTIVE_BLIPS(),
                      a = Natives.GET_FIRST_BLIP_INFO_ID(e),
                      o = Natives.GET_NEXT_BLIP_INFO_ID(e);
                    for (let e = a, i = 0; i != t; i++, e = o)
                      if (8 == Natives.GET_BLIP_SPRITE(e))
                        return mp.game.ui.getBlipInfoIdCoord(e);
                    return null;
                  }
                  return null;
                } catch (e) {
                  return null;
                }
              }),
              (a.g.ap = !1);
            var s = null;
            (a.g.binderFunctions.playerPressFollowBut = () => {
              !a.g.loggedin ||
                a.g.chatActive ||
                a.g.editing ||
                new Date().getTime() - a.g.lastCheck < 1e3 ||
                a.g.menuCheck() ||
                a.g.isDemorgan ||
                a.g.localplayer.vehicle ||
                (mp.events.callRemote("playerPressFollowBut"),
                (a.g.lastCheck = new Date().getTime()));
            }),
              (a.g.binderFunctions.onAutoPilot = () => {
                try {
                  if (
                    !a.g.loggedin ||
                    a.g.chatActive ||
                    a.g.editing ||
                    new Date().getTime() - a.g.lastCheck < 1e3 ||
                    a.g.menuCheck() ||
                    a.g.isDemorgan ||
                    !a.g.localplayer.vehicle
                  )
                    return;
                  if (
                    a.g.localplayer.vehicle.getPedInSeat(-1) ==
                    a.g.localplayer.handle
                  ) {
                    if (a.g.VehicleSeatFix > new Date().getTime()) return;
                    if (a.g.ap)
                      a.g.localplayer.clearTasks(),
                        mp.events.call(
                          "notify",
                          2,
                          9,
                          "Автопилот отключён.",
                          1500
                        ),
                        (a.g.ap = !1),
                        mp.gui.emmit("window.vehicleState.autoPilot (false)"),
                        null != s && (clearInterval(s), (s = null));
                    else {
                      switch (a.g.localplayer.vehicle.getClass()) {
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 18:
                        case 21:
                          return void mp.events.call(
                            "notify",
                            1,
                            9,
                            "Автопилот недоступен.",
                            1e3
                          );
                      }
                      let e = a.g.localplayer.vehicle.getIsEngineRunning();
                      if (null != e && !e) return;
                      let t = a.g.Petrol;
                      if (void 0 !== t && t <= 0) return;
                      let o = GetWaypointCoords();
                      null !== o &&
                        (a.g.localplayer.taskVehicleDriveToCoordLongrange(
                          a.g.localplayer.vehicle.handle,
                          o.x,
                          o.y,
                          o.z,
                          40,
                          831,
                          50
                        ),
                        (a.g.ap = !0),
                        mp.events.call(
                          "notify",
                          2,
                          9,
                          "Вы включили автопилот. Обратите внимание, что данная функция не освобождает Вас от RP ситуаций.",
                          5e3
                        ),
                        mp.gui.emmit("window.vehicleState.autoPilot (true)"),
                        null == s &&
                          (s = setInterval(function () {
                            let e = 1,
                              t = !0;
                            a.g.localplayer.vehicle &&
                              ((e = a.g.Petrol),
                              (t =
                                a.g.localplayer.vehicle.getIsEngineRunning())),
                              (!Natives.IS_WAYPOINT_ACTIVE() ||
                                !a.g.localplayer.vehicle ||
                                (void 0 !== e && e <= 0) ||
                                (null != t && !t)) &&
                                (a.g.localplayer.vehicle &&
                                  (((void 0 !== e && e <= 0) ||
                                    (null != t && !t)) &&
                                    a.g.localplayer.vehicle.setEngineOn(
                                      !1,
                                      !0,
                                      !1
                                    ),
                                  a.g.localplayer.clearTasks(),
                                  mp.events.call(
                                    "notify",
                                    2,
                                    9,
                                    "Автопилот отключён.",
                                    1500
                                  )),
                                (a.g.ap = !1),
                                mp.gui.emmit(
                                  "window.vehicleState.autoPilot (false)"
                                ),
                                clearInterval(s),
                                (s = null));
                          }, 2500)));
                    }
                  }
                  a.g.lastCheck = new Date().getTime();
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "main",
                    "onAutoPilot",
                    e.toString()
                  );
                }
              }),
              (a.g.binderFunctions.onSendWaypoint = () => {
                if (
                  !(
                    !a.g.loggedin ||
                    a.g.chatActive ||
                    a.g.editing ||
                    new Date().getTime() - a.g.lastCheck < 1e3 ||
                    a.g.menuCheck() ||
                    a.g.isDemorgan
                  ) &&
                  a.g.localplayer.vehicle
                ) {
                  if (
                    a.g.localplayer.vehicle.getPedInSeat(-1) !=
                    a.g.localplayer.handle
                  ) {
                    let e = GetWaypointCoords();
                    null !== e &&
                      mp.events.callRemote("syncWaypoint", e.x, e.y);
                  }
                  a.g.lastCheck = new Date().getTime();
                }
              }),
              (a.g.binderFunctions.onSirenSync = () => {
                !a.g.loggedin ||
                  a.g.chatActive ||
                  a.g.editing ||
                  new Date().getTime() - a.g.lastCheck < 1e3 ||
                  a.g.menuCheck() ||
                  a.g.isDemorgan ||
                  !a.g.localplayer.vehicle ||
                  (a.g.localplayer.vehicle.getPedInSeat(-1) ==
                    a.g.localplayer.handle &&
                    18 == a.g.localplayer.vehicle.getClass() &&
                    mp.events.callRemote("syncSirenSound"),
                  (a.g.lastCheck = new Date().getTime()));
              }),
              mp.events.add("syncWP", function (e, t, a) {
                Natives.IS_WAYPOINT_ACTIVE()
                  ? 0 == a
                    ? mp.events.call(
                        "notify",
                        4,
                        9,
                        "Пассажир попытался передать Вам информацию о маршруте, но у Вас уже установлен другой маршрут.",
                        5e3
                      )
                    : 1 == a &&
                      mp.events.call(
                        "notify",
                        4,
                        9,
                        "Человек из списка контактов Вашего телефона попытался передать Вам метку его местоположения, но у Вас уже установлена другая метка.",
                        5e3
                      )
                  : (mp.game.ui.setNewWaypoint(e, t),
                    0 == a
                      ? mp.events.call(
                          "notify",
                          2,
                          9,
                          "Пассажир передал Вам информацию о своём маршруте!",
                          3e3
                        )
                      : 1 == a &&
                        mp.events.call(
                          "notify",
                          2,
                          9,
                          "Человек из списка контактов Вашего телефона передал Вам метку его местоположения!",
                          3e3
                        ));
              }),
              mp.keys.bind(a.g.Keys.VK_OEM_3, !1, function () {
                (mp.game.ui.isPauseMenuActive() && !mp.gui.cursor.visible) ||
                  a.g.isEditor ||
                  a.g.chatActive ||
                  n ||
                  (a.g.menuCheck() &&
                    !a.g.dropEditor &&
                    null == a.g.blackjack.selectTable &&
                    0 == a.g.rouletteplay &&
                    !a.g.horsesplaying &&
                    mp.gui.cursor.visible) ||
                  (mp.gui.cursor.visible = !mp.gui.cursor.visible);
              }),
              new mp.Vector3(0, 0, 0),
              mp.events.add("playerRuleTriggered", (e, t) => {
                "ping" === e &&
                  t > 5 &&
                  (mp.events.call(
                    "notify",
                    4,
                    2,
                    "Ваш ping слишком большой. Зайдите позже",
                    5e3
                  ),
                  mp.events.callRemote("kickclient"));
              });
          },
          743: () => {
            const e = "client.phone.auction.",
              t = "rpc.phone.auction.",
              a = "server.phone.auction.";
            mp.events.add(e + "load", () => {
              mp.events.callRemote(a + "load");
            }),
              mp.events.add(e + "close", () => {
                mp.events.callRemote(a + "close");
              });
            const o = (e) => {
                let t = [];
                return (
                  e[11].forEach((e) => {
                    t.push({ name: e[0], bet: e[1] });
                  }),
                  {
                    id: e[0],
                    type: e[1],
                    betCount: e[2],
                    title: e[3],
                    text: e[4],
                    image: e[5],
                    createPrice: e[6],
                    lastPrice: e[7],
                    createName: e[8],
                    createUuid: e[9],
                    time: e[10],
                    betsList: t,
                    lastBet: e[12],
                  }
                );
              },
              i = (e) => {
                let t = [];
                return (
                  (e = JSON.parse(e)).forEach((e) => {
                    t.push(o(e));
                  }),
                  t
                );
              };
            let n = [],
              s = [];
            mp.events.add(e + "init", (e, t) => {
              (n = i(e)),
                (s = i(t)),
                mp.gui.emmit("window.listernEvent ('auction.load');");
            });
            let r = 0;
            mp.events.add(e + "selectCategory", (e) => {
              r = e;
            }),
              mp.events.add(e + "getItem", (e) => {
                mp.events.callRemote(a + "getItem", e);
              }),
              rpc.register(t + "getCategory", () => r);
            let l = [];
            mp.events.add(e + "setItem", (e) => {
              (l = []),
                (e = JSON.parse(e)).forEach((e) => {
                  l.push({ id: e[0], name: e[1] });
                }),
                mp.gui.emmit("window.listernEvent ('auction.load');");
            }),
              rpc.register(t + "getItem", () => JSON.stringify(l));
            let m = -1;
            mp.events.add(e + "setItemId", (e) => {
              m = e;
            }),
              mp.events.add(e + "add", (e, t, o) => {
                mp.events.callRemote(a + "add", r, m, e, t, o),
                  mp.gui.emmit("window.listernEvent ('auction.view', 'Main');"),
                  (m = -1);
              }),
              rpc.register(t + "getMyList", () => JSON.stringify(n)),
              rpc.register(t + "getList", () =>
                JSON.stringify([
                  ...n.filter((e) => e.type === r),
                  ...s.filter((e) => e.type === r),
                ])
              ),
              rpc.register(t + "getListItem", () => {
                let e = n.find((e) => e.id === m);
                return e
                  ? ((r = e.type), JSON.stringify(e))
                  : ((e = s.find((e) => e.id === m)),
                    e
                      ? ((r = e.type), JSON.stringify(e))
                      : (mp.gui.emmit(
                          "window.listernEvent ('auction.view', 'Main');"
                        ),
                        !1));
              }),
              mp.events.add(e + "bet", (e, t) => {
                mp.events.callRemote(a + "bet", e, t);
              }),
              mp.events.add(e + "addMyItem", (e) => {
                (e = JSON.parse(e)),
                  (e = o(e)),
                  n.push(e),
                  mp.gui.emmit("window.listernEvent ('auction.updateMyList');"),
                  e.type === r && e.id === m
                    ? mp.gui.emmit(
                        "window.listernEvent ('auction.updateItem');"
                      )
                    : -1 == m &&
                      ((m = e.id),
                      (r = e.type),
                      mp.gui.emmit(
                        "window.listernEvent ('auction.view', 'ListItem');"
                      ));
              }),
              mp.events.add(e + "addItem", (e) => {
                (e = JSON.parse(e)),
                  s.push(o(e)),
                  mp.gui.emmit("window.listernEvent ('auction.updateList');");
              }),
              mp.events.add(e + "updateItem", (e) => {
                (e = JSON.parse(e)), (e = o(e));
                let t = n.findIndex((t) => t.id === e.id);
                "object" == typeof n[t] && (n[t] = e),
                  (t = s.findIndex((t) => t.id === e.id)),
                  "object" == typeof s[t] && (s[t] = e),
                  e.type === r &&
                    e.id === m &&
                    mp.gui.emmit("window.listernEvent ('auction.updateItem');");
              }),
              mp.events.add(e + "delItem", (e, t) => {
                let a = {},
                  o = n.findIndex((t) => t.id === e);
                "object" == typeof n[o] &&
                  ((a = n[o]),
                  n.splice(o, 1),
                  mp.gui.emmit(
                    "window.listernEvent ('auction.updateMyList');"
                  )),
                  (o = s.findIndex((t) => t.id === e)),
                  "object" == typeof s[o] &&
                    ((a = s[o]),
                    s.splice(o, 1),
                    mp.gui.emmit(
                      "window.listernEvent ('auction.updateList');"
                    )),
                  t ||
                    a.type !== r ||
                    a.id !== m ||
                    ((m = -1),
                    mp.gui.emmit(
                      "window.listernEvent ('auction.view', 'Main');"
                    ));
              });
          },
          5305: (e, t, a) => {
            const o = "client.phone.",
              i = "rpc.phone.",
              n = "server.phone.";
            phoneData.coming = {};
            let s = null;
            const r = () => mp.events.call("sounds.stop", "call"),
              l = () => mp.gui.emmit("window.listernEvent ('downPhone');"),
              m = (e = !1) => {
                e || null === s || clearTimeout(s),
                  e && mp.events.call(o + "put"),
                  (s = null);
              },
              c = () => {
                phoneData.coming = {};
              };
            mp.events.add(o + "take", () => {
              mp.events.callRemote(n + "take");
            }),
              mp.events.add(o + "put", () => {
                mp.events.callRemote(n + "put"), m(), c(), l(), r();
              }),
              mp.events.add(o + "callError", () => {
                m(),
                  c(),
                  l(),
                  r(),
                  a.g.phoneSound("msgReceived", "abonentdaun.ogg");
              }),
              mp.events.add(o + "call", (e) => {
                const t = a.g.getContact(e);
                t && t.IsSystem
                  ? mp.gui.emmit(
                      `window.listernEvent ('phone.call.onMessage', ${e});`
                    )
                  : (mp.events.callRemote(n + "call", e),
                    (phoneData.coming = {
                      Number: e,
                      isCall: !0,
                      isComing: !1,
                    }),
                    (s = setTimeout(() => {
                      m(!0), c(), l(), r();
                    }, 45e3)));
              }),
              mp.events.add(o + "callStart", () => {
                (phoneData.coming.callStart = !0),
                  a.g.phoneSound("call", "call.ogg", 0.25, !0);
              }),
              mp.events.add(o + "callAccept", () => {
                (phoneData.coming.isComing = !0),
                  phoneData.coming.callStart &&
                    delete phoneData.coming.callStart,
                  m(),
                  r(),
                  mp.gui.emmit("window.listernEvent ('callAccept');");
              }),
              mp.events.add(o + "bell", (e) => {
                (phoneData.coming = { Number: e, isCall: !1, isComing: !1 }),
                  mp.gui.emmit("window.listernEvent ('isPhoneCall');"),
                  mp.events.call("phone.notify", e, "Звонит вам..", 5);
              }),
              rpc.register(i + "getComingPhone", () => {
                if (phoneData.coming && phoneData.coming.Number) {
                  const e = {
                    ...phoneData.coming,
                    ...getContact(phoneData.coming.Number),
                  };
                  return JSON.stringify(e);
                }
                return !1;
              }),
              rpc.register(
                i + "isCall",
                () => !(!phoneData.coming || void 0 === phoneData.coming.Number)
              ),
              (a.g.phoneMute = !1),
              mp.events.add(o + "mute", (e) => {
                a.g.phoneMute = e;
              });
          },
          9716: (e, t, a) => {
            "use strict";
            a.r(t), a(1287);
            const o = [
                { name: "Обычная", animName: null },
                { name: "Прицеливание", animName: "mood_aiming_1" },
                { name: "Злой", animName: "mood_angry_1" },
                { name: "Пьяный", animName: "mood_drunk_1" },
                { name: "Весёлый", animName: "mood_happy_1" },
                { name: "Пострадавший", animName: "mood_injured_1" },
                { name: "Гнев", animName: "mood_stressed_1" },
                { name: "Обиженный", animName: "mood_sulk_1" },
              ],
              i = [
                {
                  name: "Кулак к груди",
                  dict: "cellphone@self@franklin@",
                  anim: "chest_bump",
                },
                {
                  name: "Мир",
                  dict: "cellphone@self@franklin@",
                  anim: "peace",
                },
                {
                  name: "West Coast",
                  dict: "cellphone@self@franklin@",
                  anim: "west_coast",
                },
                {
                  name: "Показать на камеру",
                  dict: "cellphone@self@michael@",
                  anim: "finger_point",
                },
                {
                  name: "Поправить лицо",
                  dict: "cellphone@self@michael@",
                  anim: "run_chin",
                },
                {
                  name: "Размять шею",
                  dict: "cellphone@self@michael@",
                  anim: "stretch_neck",
                },
                {
                  name: "Агрессивный фак",
                  dict: "cellphone@self@trevor@",
                  anim: "aggressive_finger",
                },
                {
                  name: "Гордый фак",
                  dict: "cellphone@self@trevor@",
                  anim: "proud_finger",
                },
                {
                  name: "Перерезать глотку",
                  dict: "cellphone@self@trevor@",
                  anim: "throat_slit",
                },
                {
                  name: "Воздушный поцелуй",
                  dict: "anim@mp_player_intselfieblow_kiss",
                },
                { name: "ОК", dict: "anim@mp_player_intselfiedock" },
                { name: "Ура", dict: "anim@mp_player_intselfiejazz_hands" },
                { name: "Фак", dict: "anim@mp_player_intselfiethe_bird" },
                {
                  name: "Большой палец",
                  dict: "anim@mp_player_intselfiethumbs_up",
                },
                { name: "Дергать рукой", dict: "anim@mp_player_intselfiewank" },
              ],
              n = [
                "",
                "NG_filmic01",
                "NG_filmic02",
                "NG_filmic03",
                "NG_filmic04",
                "NG_filmic05",
                "NG_filmic06",
                "NG_filmic07",
                "NG_filmic08",
                "NG_filmic09",
                "NG_filmic10",
                "NG_filmic11",
                "NG_filmic12",
                "NG_filmic13",
                "NG_filmic14",
                "NG_filmic15",
                "NG_filmic16",
                "NG_filmic17",
                "NG_filmic18",
                "NG_filmic19",
                "NG_filmic20",
                "NG_filmic21",
                "NG_filmic22",
                "NG_filmic23",
                "NG_filmic24",
                "NG_filmic25",
              ],
              s = (e, t, a) => Math.min(a, Math.max(t, e));
            let r = !1,
              l = !1,
              m = !1,
              c = !1,
              p = 100,
              g = 0,
              _ = 1,
              d = 0,
              h = 0,
              u = 0,
              y = 0,
              v = 0,
              f = !1,
              w = 0,
              S = !1,
              M = "",
              b = "",
              T = 0,
              C = 0;
            const D = () => {
              let e = {
                timeCycle: `Фильтр (${v + 1})`,
                animName: i[w].name,
                emotion: `Эмоция (${o[T].name})`,
                isPhoneThisFrame: r,
                isFreeMode: f,
                isDofEnabled: m,
              };
              mp.gui.emmit(
                `window.events.callEvent("camera.update", '${JSON.stringify(
                  e
                )}')`
              );
            };
            (a.g.phoneCameraOpen = !1),
              mp.events.add("camera.open", (e = !0) => {
                (r = !1),
                  (f = !1),
                  (l = !1),
                  (m = e),
                  (c = !1),
                  (p = a.g.localplayer.getHealth()),
                  (g = 0),
                  (_ = 1),
                  (d = 0),
                  (h = 0),
                  (u = 0),
                  (y = 0),
                  (v = 0),
                  (a.g.phoneCameraOpen = !0),
                  a.g.menuClose(!0),
                  (a.g.menuOpened = !0),
                  D(),
                  N(),
                  mp.events.add("camera.close", P),
                  mp.events.add("render", x),
                  mp.events.add("camera.freemode", R),
                  mp.events.add("camera.screen", I);
              });
            const P = (e) => {
              V(),
                mp.gui.emmit(`window.events.callEvent("camera.close", ${e})`),
                mp.events.callRemote("server.phone.anim", 0),
                mp.events.remove("camera.close", P),
                mp.events.remove("render", x),
                mp.events.remove("camera.freemode", R),
                mp.events.remove("camera.screen", I),
                a.g.isPhoneOpen ? a.g.menuOpen(!0) : a.g.menuOpen(),
                (a.g.phoneCameraOpen = !1);
            };
            let E = null,
              F = null;
            const I = async () => {
              mp.gui.emmit("window.router.opacity(0)"),
                mp.game.ui.displayRadar(!1),
                await mp.game.waitAsync(25),
                (F = Date.now() + ".jpg"),
                mp.gui.takeScreenshot(F, 0, 100, 0),
                (E = mp.browsers.new(`screenshots://${F}`)),
                P(!0),
                mp.game.audio.playSoundFrontend(
                  -1,
                  "Camera_Shoot",
                  "Phone_SoundSet_Michael",
                  !0
                );
            };
            mp.events.add("browserDomReady", (e) => {
              E === e &&
                (mp.game.ui.displayRadar(!0),
                mp.gui.emmit("window.router.opacity(1)"),
                mp.gui.emmit(
                  `window.screenshot_getbase64 ('http://screenshots/${F}')`
                ),
                (F = null),
                E.destroy(),
                (E = null));
            });
            const R = () => {
                r || ((f = !f), D(), f ? V() : N());
              },
              N = () => {
                mp.game.ui.displayRadar(!1),
                  mp.game.mobile.createMobilePhone(0),
                  mp.game.mobile.setMobilePhoneScale(0),
                  a.g.localplayer.setConfigFlag(242, !0),
                  a.g.localplayer.setConfigFlag(243, !0),
                  a.g.localplayer.setConfigFlag(244, !1),
                  mp.game.mobile.cellCamActivate(!0, !0),
                  Natives.CellCamDisableThisFrame(r),
                  mp.game.invoke(
                    "0xA2CCBE62CD4C91A4",
                    Natives.SetMobilePhoneUnk(c)
                  ),
                  mp.events.callRemote("server.phone.anim", 1);
              },
              V = () => {
                mp.game.ui.displayRadar(!0),
                  Natives.DestroyMobilePhone(),
                  mp.game.mobile.cellCamActivate(!1, !1),
                  a.g.localplayer.setConfigFlag(242, !1),
                  a.g.localplayer.setConfigFlag(243, !1),
                  a.g.localplayer.setConfigFlag(244, !0),
                  Natives.ClearTimecycleModifier(),
                  a.g.localplayer.clearFacialIdleAnimOverride(),
                  a.g.isPhoneOpen &&
                    (mp.game.mobile.createMobilePhone(0),
                    mp.game.mobile.setMobilePhoneScale(0));
              };
            V();
            const x = async () => {
              mp.game.controls.disableControlAction(0, 44, !0),
                mp.game.controls.disableControlAction(0, 156, !0),
                mp.game.controls.disableControlAction(0, 199, !0),
                mp.game.controls.disableControlAction(0, 200, !0),
                mp.game.controls.disableControlAction(2, 156, !0),
                mp.game.controls.disableControlAction(2, 199, !0),
                mp.game.controls.disableControlAction(2, 200, !0);
              const e = a.g.localplayer.getHealth();
              if (
                (e < p && 5 < p - e) ||
                null != a.g.localplayer.vehicle ||
                a.g.isDeath ||
                a.g.localplayer.isFalling() ||
                a.g.localplayer.isJumping() ||
                a.g.localplayer.isSwimming() ||
                a.g.cuffed
              )
                P();
              else if (((p = e), !f)) {
                if (
                  mp.game.controls.isControlJustPressed(0, 87) ||
                  mp.game.controls.isControlJustPressed(0, 88)
                ) {
                  const e = mp.game.controls.isControlJustPressed(0, 87)
                    ? 1
                    : -1;
                  (v += e),
                    v >= n.length ? (v = 0) : 0 > v && (v = n.length - 1),
                    mp.game.graphics.setTimecycleModifierStrength(1),
                    mp.game.graphics.setTimecycleModifier(n[v]),
                    D();
                }
                if (m) {
                  if (
                    (await (async () => (
                      !l &&
                        mp.game.controls.isControlJustPressed(3, 172) &&
                        ((r = !r),
                        (l = !0),
                        mp.game.cam.doScreenFadeOut(500),
                        await mp.game.waitAsync(500),
                        Natives.CellCamDisableThisFrame(r),
                        await mp.game.waitAsync(350),
                        D(),
                        mp.game.cam.doScreenFadeIn(500),
                        await mp.game.waitAsync(550),
                        (l = !1)),
                      r
                    ))()) &&
                    (() => {
                      const e =
                          mp.game.controls.getDisabledControlNormal(0, 1) / 20,
                        t =
                          -mp.game.controls.getDisabledControlNormal(0, 2) / 20;
                      return (
                        mp.game.controls.isDisabledControlPressed(0, 69)
                          ? (mp.game.controls.disableControlAction(0, 1, !0),
                            mp.game.controls.disableControlAction(0, 2, !0),
                            (g = s(g + e, 0, 1)),
                            (_ = s(_ + t, 0, 2)),
                            (d = s(
                              d +
                                mp.game.controls.getDisabledControlNormal(
                                  0,
                                  30
                                ) /
                                  12,
                              -1,
                              1
                            )))
                          : mp.game.controls.isDisabledControlPressed(0, 68) &&
                            (mp.game.controls.disableControlAction(0, 1, !0),
                            mp.game.controls.disableControlAction(0, 2, !0),
                            (h = s(h + e, -1, 1)),
                            (u = s(
                              u +
                                mp.game.controls.getDisabledControlNormal(
                                  0,
                                  30
                                ) /
                                  12,
                              -1,
                              1
                            )),
                            (y = s(y + t, -1, 1))),
                        Natives.CellCamSetHorizontalOffset(g),
                        Natives.CellCamSetVerticalOffset(_),
                        Natives.CellCamSetRoll(d),
                        Natives.CellCamSetHeadY(h),
                        Natives.CellCamSetHeadRoll(u),
                        Natives.CellCamSetHeadHeight(y),
                        m &&
                          mp.game.controls.isControlJustPressed(3, 0) &&
                          ((c = !c),
                          mp.game.invoke(
                            "0xA2CCBE62CD4C91A4",
                            Natives.SetMobilePhoneUnk(c)
                          )),
                        0 == ++C % 15
                      );
                    })()
                  ) {
                    const { x: e, y: t, z: o } = a.g.localplayer.position,
                      i = a.g.cameraManager.gameplayCam().getCoord();
                    mp.players.forEachInStreamRange((n) => {
                      (n === a.g.localplayer ||
                        5 >
                          mp.game.system.vdist(
                            e,
                            t,
                            o,
                            n.position.x,
                            n.position.y,
                            n.position.z
                          )) &&
                        Natives.TaskLookAtCoord(
                          n.handle,
                          i.x,
                          i.y,
                          i.z,
                          2500,
                          2048,
                          3
                        );
                    });
                  }
                  if (
                    mp.game.controls.isControlJustPressed(0, 89) ||
                    mp.game.controls.isControlJustPressed(0, 90)
                  ) {
                    const e = mp.game.controls.isControlJustPressed(0, 89)
                      ? -1
                      : 1;
                    (w += e),
                      w >= i.length ? (w = 0) : 0 > w && (w = i.length - 1),
                      D();
                  }
                  if (
                    mp.game.controls.isControlJustPressed(0, 51) ||
                    mp.game.controls.isControlJustPressed(0, 52)
                  ) {
                    const e = mp.game.controls.isControlJustPressed(0, 51)
                      ? -1
                      : 1;
                    (T += e),
                      T >= o.length ? (T = 0) : 0 > T && (T = o.length - 1),
                      null == o[T].animName
                        ? a.g.localplayer.clearFacialIdleAnimOverride()
                        : Natives.SetFacialIdleAnimOverride(
                            a.g.localplayer.handle,
                            o[T].animName,
                            0
                          ),
                      D();
                  }
                  const e = mp.game.controls.isControlPressed(0, 61);
                  if (e && !S) {
                    const e = i[w];
                    e &&
                      ((S = !0),
                      await a.g.requestAnimDict(e.dict),
                      e.anim
                        ? (a.g.localplayer.taskPlayAnim(
                            e.dict,
                            e.anim,
                            4,
                            4,
                            -1,
                            128,
                            -1,
                            !1,
                            !1,
                            !1
                          ),
                          (M = e.dict),
                          (b = e.anim))
                        : (a.g.localplayer.taskPlayAnim(
                            e.dict,
                            "enter",
                            4,
                            4,
                            -1,
                            128,
                            -1,
                            !1,
                            !1,
                            !1
                          ),
                          await mp.game.waitAsync(
                            1e3 *
                              mp.game.entity.getEntityAnimDuration(
                                e.dict,
                                "enter"
                              )
                          ),
                          a.g.localplayer.taskPlayAnim(
                            e.dict,
                            "idle_a",
                            8,
                            4,
                            -1,
                            129,
                            -1,
                            !1,
                            !1,
                            !1
                          ),
                          (M = e.dict),
                          (b = "")));
                  } else
                    S &&
                      !e &&
                      ((S = !1),
                      M && !b
                        ? (a.g.localplayer.taskPlayAnim(
                            M,
                            "exit",
                            4,
                            4,
                            -1,
                            128,
                            -1,
                            !1,
                            !1,
                            !1
                          ),
                          await mp.game.waitAsync(
                            1e3 *
                              mp.game.entity.getEntityAnimDuration(M, "exit")
                          ),
                          a.g.localplayer.taskPlayAnim(
                            "",
                            "",
                            4,
                            4,
                            -1,
                            128,
                            -1,
                            !1,
                            !1,
                            !1
                          ))
                        : (a.g.localplayer.stopAnimTask(M, b, 3),
                          a.g.localplayer.taskPlayAnim(
                            "",
                            "",
                            4,
                            4,
                            -1,
                            128,
                            -1,
                            !1,
                            !1,
                            !1
                          )));
                }
              }
            };
          },
          1287: () => {
            (Natives.DestroyMobilePhone = () =>
              mp.game.invoke("0x3BC861DF703E5097")),
              (Natives.CellCamDisableThisFrame = (e) =>
                mp.game.invoke("0x015C49A93E3E086E", e)),
              (Natives.SetMobilePhoneUnk = (e) =>
                mp.game.invoke("0x375A706A5C2FD084", e)),
              (Natives.CellCamSetHorizontalOffset = (e) =>
                mp.game.invoke("0x1B0B4AEED5B9B41C", e)),
              (Natives.CellCamSetVerticalOffset = (e) =>
                mp.game.invoke("0x3117D84EFA60F77B", e)),
              (Natives.CellCamSetRoll = (e) =>
                mp.game.invoke("0x15E69E2802C24B8D", e)),
              (Natives.CellCamSetHeadY = (e) =>
                mp.game.invoke("0xD6ADE981781FCA09", e)),
              (Natives.CellCamSetHeadRoll = (e) =>
                mp.game.invoke("0xF1E22DC13F5EEBAD", e)),
              (Natives.CellCamSetHeadHeight = (e) =>
                mp.game.invoke("0x466DA42C89865553", e)),
              (Natives.TaskLookAtCoord = (e, t, a, o, i, n, s) =>
                mp.game.invoke("0x6FA46612594F7973", e, t, a, o, i, n, s)),
              (Natives.SetFacialIdleAnimOverride = (e, t, a) =>
                mp.game.invoke("0xFFC24B988B938B38", e, t, a)),
              (Natives.ClearTimecycleModifier = () =>
                mp.game.invoke("0x0F07E7745A236711"));
          },
          9414: () => {
            const e = "client.phone.cars.",
              t = "rpc.phone.cars.";
            let a = [],
              o = !1,
              i = !1;
            mp.events.add(e + "load", () => {
              mp.events.callRemote("server.phone.cars.load");
            });
            const n = (e) =>
              "number" == typeof e || e
                ? "Личный"
                : i
                ? "Подселённого"
                : "Домовладельца";
            let s = [];
            mp.events.add(e + "init", (e, t, r) => {
              (s = []),
                (o = t),
                (i = r),
                (e = JSON.parse(e)),
                (a = []),
                e.forEach((e) => {
                  "rent" === e[0]
                    ? (a.push({
                        isRent: !0,
                        model: e[1],
                        number: e[2],
                        date: e[3],
                        rentPrice: e[4],
                        header: "Аренда",
                      }),
                      s.includes("Аренда") || s.push("Аренда"))
                    : (a.push({
                        sqlId: e[0],
                        model: e[1],
                        number: e[2],
                        isCarGarage: e[3],
                        place: e[4],
                        ticket: e[5],
                        isAir: e[6],
                        isCreate: e[7],
                        color: e[8],
                        sell: e[9],
                        header: n(e[9]),
                      }),
                      s.includes(n(e[9])) || s.push(n(e[9])));
                }),
                mp.gui.emmit("window.listernEvent ('phoneCarsLoad')");
            }),
              rpc.register(t + "filterData", () => JSON.stringify(s)),
              rpc.register(t + "getCarsList", () => JSON.stringify(a)),
              rpc.register(t + "inGarage", () => !!o),
              rpc.register(t + "isOwner", () => !!i);
          },
          1842: () => {
            const e = "client.phone.forbes.",
              t = "rpc.phone.forbes.";
            mp.events.add(e + "load", () => {
              mp.events.callRemote("server.phone.forbes.load");
            });
            let a = [];
            mp.events.add(e + "init", (e) => {
              (a = []),
                (e = JSON.parse(e)).forEach((e) => {
                  const t = {};
                  (t.Name = e[0]),
                    (t.Money = e[1]),
                    (t.SumMoney = e[2]),
                    (t.Lvl = e[3]),
                    (t.IsShowForbes = e[4]);
                  let o = { houses: [], biz: [], vehicles: [] };
                  e[5].forEach((e) => {
                    let t = "houses";
                    1 === e[2] ? (t = "biz") : 2 === e[2] && (t = "vehicles"),
                      o[t].push({ Name: e[0], Money: e[1] });
                  }),
                    (t.houses = o.houses),
                    (t.biz = o.biz),
                    (t.vehicles = o.vehicles),
                    a.push(t);
                }),
                mp.gui.emmit("window.listernEvent ('phone.forbes.load');");
            }),
              rpc.register(t + "getList", () => {
                let e = [];
                return (
                  a.forEach((t) => {
                    e.push({
                      Name: t.Name,
                      Money: t.SumMoney,
                      IsShowForbes: t.IsShowForbes,
                    });
                  }),
                  JSON.stringify(e)
                );
              }),
              rpc.register(t + "getId", (e) => JSON.stringify(a[e]));
          },
          4597: () => {
            const e = "client.phone.",
              t = "server.phone.";
            (phoneData.gallery = []),
              mp.events.add(e + "initGallery", (e) => {
                phoneData.gallery = JSON.parse(e);
              }),
              rpc.register("rpc.phone.getGallery", () =>
                JSON.stringify(phoneData.gallery.reverse())
              ),
              mp.events.add(e + "addGallery", (e) => {
                mp.events.callRemote(t + "addGallery", e);
              }),
              mp.events.add(e + "dellGallery", (e) => {
                const a = phoneData.gallery.findIndex((t) => t[0] === e);
                phoneData.gallery[a] && phoneData.gallery.splice(a, 1),
                  mp.events.callRemote(t + "dellGallery", e);
              }),
              mp.events.add(e + "pushGallery", (e) => {
                (e = JSON.parse(e)), phoneData.gallery.push(e);
              });
          },
          7606: (e, t, a) => {
            const o = "rpc.phone.gps.";
            let i = [],
              n = {};
            mp.events.add("client.phone.gps.init", (e) => {
              (e = JSON.parse(e)),
                (i = []),
                e.forEach((e) => {
                  let t = {};
                  (t.name = e[0]), (t.icon = e[1]);
                  let a = [];
                  e[2].forEach((e) => {
                    let t = {};
                    if (
                      ((t.name = e[0]),
                      "object" == typeof e[1] && "object" == typeof e[1][0])
                    ) {
                      let a = [],
                        o = [],
                        i = !1;
                      e[1].forEach((e) => {
                        a.push(new mp.Vector3(e[0], e[1], 0)),
                          e[2] && ((i = !0), o.push(e[2]));
                      }),
                        (t.posList = a),
                        i && ((t.isSub = !0), (t.subList = o));
                    } else t.pos = new mp.Vector3(e[1][0], e[1][1], 0);
                    (n[t.name] = t), a.push(t);
                  }),
                    (t.content = a),
                    i.push(t);
                });
            }),
              mp.events.add("gps.name", (e) => {
                s(e);
              });
            const s = (e) => {
              if (n[e]) {
                let t = n[e].pos;
                const a = mp.players.local.position;
                n[e].posList && (t = r(n[e].posList, a)),
                  mp.events.call("createWaypoint", t.x, t.y);
              }
            };
            rpc.register(o + "getRoutes", () => {
              let e = [];
              return (
                i.forEach((t) => {
                  e.push({ name: t.name, icon: t.icon });
                }),
                JSON.stringify(e)
              );
            });
            const r = (e, t) => {
              let o = null;
              return (
                e.forEach((e) => {
                  (null === o || a.g.vdist2(e, t, !0) < a.g.vdist2(o, t, !0)) &&
                    (o = e);
                }),
                o
              );
            };
            let l = -1;
            rpc.register(o + "getList", (e) => {
              l = -1;
              const t = i[e];
              let o = {};
              (o.name = t.name), (o.icon = t.icon), (o.content = []);
              const n = mp.players.local.position;
              return (
                t.content.forEach((e, t) => {
                  let i = {};
                  (i.name = e.name),
                    (i.pos = e.pos),
                    (i.isSub = e.isSub),
                    e.posList && (i.pos = r(e.posList, n)),
                    (i.dist = Math.round(a.g.vdist2(i.pos, n, !0))),
                    o.content.push(i);
                }),
                JSON.stringify(o)
              );
            }),
              rpc.register(o + "getSubList", (e) => {
                const t = i[e.index];
                let o = {};
                (o.name = t.name), (o.icon = t.icon), (o.content = []);
                const n = mp.players.local.position,
                  s = t.content[e.id];
                return (
                  (l = e.id),
                  s.posList.forEach((e, t) => {
                    let i = {};
                    (i.name = s.name + " #" + s.subList[t]),
                      (i.pos = e),
                      (i.dist = Math.round(a.g.vdist2(i.pos, n, !0))),
                      o.content.push(i);
                  }),
                  JSON.stringify(o)
                );
              }),
              rpc.register(o + "getItem", (e) => {
                const t = i[e.index],
                  o = -1 !== l ? t.content[l] : t.content[e.id];
                let n = {};
                (n.icon = t.icon), (n.name = o.name), (n.pos = o.pos);
                const s = mp.players.local.position;
                return (
                  -1 !== l
                    ? ((n.pos = o.posList[e.id]),
                      (n.name = o.name + " #" + o.subList[e.id]))
                    : o.posList && (n.pos = r(o.posList, s)),
                  (n.dist = Math.round(a.g.vdist2(n.pos, s, !0))),
                  JSON.stringify(n)
                );
              }),
              (Natives.SET_WAYPOINT_OFF = () =>
                mp.game.invoke("0xA7E4E2D361C2627F")),
              mp.events.add("gps.setPoint", (e) => {
                (e = JSON.parse(e)),
                  mp.events.call("gps.clearPoint"),
                  Natives.SET_WAYPOINT_OFF(),
                  (a.g.gps = mp.blips.new(162, new mp.Vector3(e.x, e.y, 0), {
                    name: e.name,
                    color: 5,
                    shortRange: !1,
                  })),
                  a.g.gps.setRoute(!0),
                  a.g.gps.setRouteColour(5),
                  mp.game.audio.setGpsActive(!0);
              }),
              mp.events.add("gps.clearPoint", () => {
                a.g.gps && (a.g.gps.setRoute(!1), a.g.gps.destroy()),
                  (a.g.gps = null);
              }),
              mp.events.add("gps.pointDefault", (e) => {
                mp.events.callRemote("gps.pointDefault", e);
              });
          },
          9684: (e, t, a) => {
            (a.g.phoneData = {}),
              a(7606),
              a(4743),
              a(1181),
              a(2392),
              a(5305),
              a(4597),
              a(3744),
              a(1055),
              a(5910),
              a(5557),
              a(9414),
              a(2844),
              a(9774),
              a(1842),
              a(2447),
              a(743),
              a(9716),
              a(9871);
            const o = "client.phone.",
              i = "rpc.phone.",
              n = "server.phone.";
            (a.g.phoneSound = (e, t, a = 0.25, o = !1) => {
              mp.events.call("sounds.playAmbient", "cloud/sound/iphone/" + t, {
                id: e,
                volume: a,
                loop: o,
              });
            }),
              (a.g.isPhoneOpen = !1),
              mp.events.add(o + "finger", (e) => {
                mp.game.mobile.moveFinger(e);
              }),
              (a.g.binderFunctions.openPlayerMenu = () => {
                mp.events.call(o + "open");
              });
            let s = !1;
            mp.events.add(o + "inputFocus", (e) => {
              a.g.isPhoneOpen && ((s = e), a.g.menuOpen(!s));
            });
            let r = 0;
            mp.events.add(o + "open", () => {
              if (
                !(
                  !a.g.loggedin ||
                  a.g.chatActive ||
                  a.g.editing ||
                  a.g.cuffed ||
                  1 == a.g.isDeath ||
                  1 == a.g.isDemorgan ||
                  a.g.attachedtotrunk ||
                  s ||
                  r > Date.now() ||
                  a.g.phoneCameraOpen
                )
              )
                if (a.g.isPhoneOpen)
                  a.g.menuCheck() && mp.events.call(o + "close");
                else {
                  if (a.g.menuCheck()) return;
                  mp.gui.emmit("window.hudStore.isHudNewPhone (true)"),
                    mp.events.callRemote(n + "open"),
                    a.g.menuOpen(!0),
                    (a.g.isPhoneOpen = !0),
                    "cphone_call" !== a.g.localplayer.cSen &&
                      (mp.game.mobile.createMobilePhone(0),
                      mp.game.mobile.setMobilePhoneScale(0)),
                    (r = Date.now() + 500);
                }
            }),
              mp.events.add(o + "close", () => {
                a.g.isPhoneOpen &&
                  ((r = Date.now() + 500),
                  (s = !1),
                  (a.g.isPhoneOpen = !1),
                  mp.gui.emmit("window.hudStore.isHudNewPhone (false)"),
                  mp.events.callRemote(n + "close"),
                  a.g.menuClose(),
                  "cphone_base" === a.g.localplayer.cSen &&
                    Natives.DestroyMobilePhone());
              });
            const l = {
              112: {
                Name: "Полиция",
                Avatar: "https://cloud.redage.net/cloud/img/iphone/police.jpg",
                IsSystem: !0,
              },
              911: {
                Name: "Больница",
                Avatar: "https://cloud.redage.net/cloud/img/iphone/ems.jpg",
                IsSystem: !0,
              },
              333: {
                Name: "Механик",
                Avatar: "https://cloud.redage.net/cloud/img/iphone/mech.jpg",
                IsSystem: !0,
                IsNotShow: !0,
                NoSend: !0,
              },
              228: {
                Name: "Такси",
                Avatar: "https://cloud.redage.net/cloud/img/iphone/taxi.jpg",
                IsSystem: !0,
                IsNotShow: !0,
                NoSend: !0,
              },
              101: {
                Name: "RedAge",
                Avatar: "https://cloud.redage.net/cloud/img/iphone/ra.jpg",
                IsSystem: !0,
                DefaultMessage:
                  "Привет! :cowboy_hat_face: Сюда ты можешь отправить найденный бонус-код или промо-код и сразу получить свои бонусы. Просто пришли его в ответном сообщении! :gift: :gift: :gift:",
              },
              4386: {
                Name: "Банк",
                Avatar: "https://cloud.redage.net/cloud/img/iphone/bank.jpg",
                IsSystem: !0,
                IsNotShow: !0,
                NoSend: !0,
              },
              99999999: {
                Name: "Информатор",
                Avatar: "https://cloud.redage.net/cloud/img/iphone/inform.png",
                IsSystem: !0,
                IsNotShow: !0,
                NoSend: !0,
              },
            };
            (phoneData.contacts = l),
              mp.events.add(o + "initContacts", (e) => {
                (phoneData.contacts = l), (e = JSON.parse(e));
                for (let t in e)
                  phoneData.contacts[t] = { Name: e[t][0], Avatar: e[t][1] };
              }),
              (phoneData.blackList = []),
              mp.events.add(o + "initBalckList", (e) => {
                phoneData.blackList = JSON.parse(e);
              }),
              (a.g.getContact = (e) => {
                let t = {
                  Name: e.toString(),
                  Number: e,
                  IsBlackList: phoneData.blackList.includes(e),
                  Avatar: null,
                  IsAdded: !1,
                };
                const a = phoneData.contacts[e];
                return (
                  "object" == typeof a &&
                    ((t = { ...t, ...a }), (t.IsAdded = !0)),
                  t
                );
              }),
              mp.events.add(o + "addContact", (e, t, a) => {
                "object" != typeof phoneData.contacts[e] &&
                  ((phoneData.contacts[e] = { Name: t, Avatar: a }),
                  mp.events.callRemote(n + "addContact", e, t, a));
              }),
              mp.events.add(o + "updateContact", (e, t, a) => {
                "object" == typeof phoneData.contacts[e] &&
                  ((phoneData.contacts[e] = { Name: t, Avatar: a }),
                  mp.events.callRemote(n + "updateContact", e, t, a));
              }),
              mp.events.add(o + "dellContact", (e) => {
                "object" == typeof phoneData.contacts[e] &&
                  (delete phoneData.contacts[e],
                  mp.events.callRemote(n + "dellContact", e));
              }),
              rpc.register(i + "getContacts", () =>
                JSON.stringify(
                  (() => {
                    let e = [];
                    Object.keys(phoneData.contacts).forEach((t) => {
                      e.push({ ...getContact(t), Number: t });
                    });
                    let t = [];
                    return (
                      e.forEach((e) => {
                        const a = e.Name[0].toUpperCase(),
                          o = t.findIndex((e) => e.Name === a);
                        if (-1 === o) {
                          const o = { Name: a, List: [] };
                          o.List.push(e), t.push(o);
                        } else t[o].List.push(e);
                      }),
                      t
                    );
                  })()
                )
              ),
              rpc.register(i + "getContact", (e) =>
                JSON.stringify(getContact(e))
              ),
              rpc.register(
                i + "addBlackList",
                (e) =>
                  -1 === phoneData.blackList.findIndex((t) => t === e) &&
                  (phoneData.blackList.push(e),
                  mp.events.callRemote(n + "addBlackList", e),
                  !0)
              ),
              rpc.register(i + "dellBlackList", (e) => {
                const t = phoneData.blackList.findIndex((t) => t === e);
                return (
                  -1 !== t &&
                  (phoneData.blackList.splice(t, 1),
                  mp.events.callRemote(n + "dellBlackList", e),
                  !0)
                );
              }),
              rpc.register(
                i + "dellContact",
                (e) =>
                  "object" == typeof phoneData.contacts[e] &&
                  (delete phoneData.contacts[e],
                  mp.events.callRemote(n + "dellContact", e),
                  !0)
              );
          },
          2844: (e, t, a) => {
            a(1825);
          },
          1825: (e, t, a) => {
            const o = "client.phone.truck.",
              i = "rpc.phone.truck.",
              n = "server.phone.truck.";
            mp.events.add(o + "load", () => {
              mp.events.callRemote(n + "load");
            });
            let s = {},
              r = [];
            mp.events.add(o + "init", (e, t) => {
              (e = JSON.parse(e)), (s = {});
              const o = mp.players.local.position;
              e &&
                e.length &&
                ((s.uid = e[0]),
                (s.name = e[1]),
                (s.pos = new mp.Vector3(e[2], e[3], e[4])),
                (s.dist = Math.round(a.g.vdist2(s.pos, o, !0))),
                (s.aStreet = a.g.getStreetName(s.pos.x, s.pos.y, s.pos.z)),
                (s.aArea = a.g.getAreaName(s.pos.x, s.pos.y, s.pos.z)),
                (s.area =
                  a.g.getStreetName(s.pos.x, s.pos.y, s.pos.z) +
                  " - " +
                  a.g.getAreaName(s.pos.x, s.pos.y, s.pos.z))),
                (r = []),
                (t = JSON.parse(t)).forEach((e) => {
                  const t = {};
                  (t.uid = e[0]),
                    (t.name = e[1]),
                    (t.price = e[2]),
                    (t.pos = new mp.Vector3(e[3], e[4], e[5])),
                    (t.dist = Math.round(a.g.vdist2(t.pos, o, !0))),
                    (t.aStreet = a.g.getStreetName(t.pos.x, t.pos.y, t.pos.z)),
                    (t.aArea = a.g.getAreaName(t.pos.x, t.pos.y, t.pos.z)),
                    (t.area =
                      a.g.getStreetName(t.pos.x, t.pos.y, t.pos.z) +
                      " - " +
                      a.g.getAreaName(t.pos.x, t.pos.y, t.pos.z)),
                    r.push(t);
                }),
                mp.gui.emmit("window.listernEvent ('phoneTruckerLoad');");
            }),
              rpc.register(i + "getSelect", () => JSON.stringify(s)),
              rpc.register(i + "getList", (e) => {
                let t = [];
                for (let a = 0; a < e; a++) r[a] && t.push(r[a]);
                return JSON.stringify(t);
              }),
              mp.events.add(o + "take", (e) => {
                mp.events.callRemote(n + "take", e);
              }),
              mp.events.add(o + "cancel", () => {
                mp.events.callRemote(n + "cancel");
              });
          },
          1181: (e, t, a) => {
            a(1085);
            const o = "client.phone.mech.",
              i = "rpc.phone.mech.",
              n = "server.phone.mech.";
            let s = {};
            rpc.register(i + "getOrder", () => JSON.stringify(s));
            const r = () => {
              if (
                (mp.gui.emmit("window.listernEvent ('phone.mech.load');"),
                s.pos &&
                  (mp.events.call(
                    "createBlip",
                    "mech",
                    "Такси",
                    636,
                    s.pos,
                    1.25,
                    5
                  ),
                  void 0 === s.shape))
              ) {
                const e = mp.players.local.position;
                mp.events.call(
                  "createBlip",
                  "mechCircle",
                  "Такси",
                  9,
                  e,
                  0.5,
                  5,
                  155,
                  5
                ),
                  (s.shape = mp.colshapes.newSphere(e.x, e.y, e.z, 15));
              }
            };
            mp.events.add("playerExitColshape", (e) => {
              s &&
                s.shape &&
                void 0 !== s.shape &&
                e &&
                e === s.shape &&
                mp.events.call(o + "cancel");
            }),
              mp.events.add(o + "order", () => {
                s.isOrder || mp.events.callRemote(n + "order");
              }),
              mp.events.add(o + "successOrder", () => {
                (s = { isOrder: !0 }), r();
              }),
              mp.events.add(o + "cancel", () => {
                s.isOrder && mp.events.callRemote(n + "cancel");
              }),
              mp.events.add(o + "successCancel", () => {
                (() => {
                  const e = s.shape;
                  (s = {}),
                    void 0 !== e && e.destroy(),
                    mp.events.call("deleteBlip", "mech"),
                    mp.events.call("deleteBlip", "mechCircle");
                })(),
                  r();
              }),
              mp.events.add(o + "updateOrder", (e, t, a, o, i) => {
                s.isOrder &&
                  ((s.driver = e),
                  (s.number = t),
                  (s.pos = new mp.Vector3(a, o, i)),
                  r());
              }),
              mp.events.add(o + "updatePosOrder", (e, t, a) => {
                s.isOrder && ((s.pos = new mp.Vector3(e, t, a)), r());
              }),
              rpc.register(i + "getMenu", () =>
                a.g.isMechOrder
                  ? "Driver"
                  : a.g.isInitMechList
                  ? "List"
                  : "Client"
              );
          },
          1085: (e, t, a) => {
            const o = "client.phone.mechjob.",
              i = "rpc.phone.mechjob.",
              n = "server.phone.mechjob.";
            let s = {},
              r = [];
            (a.g.isInitMechList = !1),
              mp.events.add(o + "init", (e) => {
                r = [];
                const t = a.g.localplayer.position;
                (e = JSON.parse(e)).forEach((e) => {
                  let o = {};
                  (o.id = e[0]),
                    (o.name = e[1]),
                    (o.pos = new mp.Vector3(e[2], e[3], e[4])),
                    (o.dist = Math.round(a.g.vdist2(o.pos, t, !0))),
                    (o.aStreet = a.g.getStreetName(o.pos.x, o.pos.y, o.pos.z)),
                    (o.aArea = a.g.getAreaName(o.pos.x, o.pos.y, o.pos.z)),
                    (o.area =
                      a.g.getStreetName(o.pos.x, o.pos.y, o.pos.z) +
                      " - " +
                      a.g.getAreaName(o.pos.x, o.pos.y, o.pos.z)),
                    r.push(o);
                }),
                  (a.g.isInitMechList = !0),
                  mp.gui.emmit("window.listernEvent ('phone.mech.getMenu');");
              }),
              mp.events.add(o + "jobEnd", () => {
                (r = []),
                  (a.g.isInitMechList = !1),
                  mp.gui.emmit("window.listernEvent ('phone.mech.getMenu');");
              }),
              mp.events.add(o + "add", (e, t, o, i, n) => {
                if (!a.g.isInitMechList) return;
                const s = mp.players.local.position;
                let l = {};
                (l.id = e),
                  (l.name = t),
                  (l.pos = new mp.Vector3(o, i, n)),
                  (l.dist = Math.round(a.g.vdist2(l.pos, s, !0))),
                  (l.aStreet = a.g.getStreetName(l.pos.x, l.pos.y, l.pos.z)),
                  (l.aArea = a.g.getAreaName(l.pos.x, l.pos.y, l.pos.z)),
                  (l.area =
                    a.g.getStreetName(l.pos.x, l.pos.y, l.pos.z) +
                    " - " +
                    a.g.getAreaName(l.pos.x, l.pos.y, l.pos.z)),
                  r.push(l),
                  mp.gui.emmit("window.listernEvent ('phone.mechjob.update');"),
                  mp.gui.chat.push(
                    `!{#00a86b}[ДИСПЕТЧЕР]: !{#ffffff}Игрок ${t} вызвал автомеханика !{#ffcc00}(${l.dist}м)!{#ffffff}. Откройте телефон что бы принять вызов`
                  ),
                  mp.events.call(
                    "phone.notify",
                    333,
                    "Появился новый заказ! :)",
                    4
                  );
              }),
              mp.events.add(o + "dell", (e) => {
                if (!a.g.isInitMechList) return;
                const t = r.findIndex((t) => t.id === e);
                r[t] && r.splice(t, 1),
                  mp.gui.emmit("window.listernEvent ('phone.mechjob.update');");
              }),
              mp.events.add(o + "take", (e) => {
                if (!a.g.isInitMechList) return;
                const t = r.findIndex((t) => t.id === e);
                r[t] && mp.events.callRemote(n + "take", e);
              }),
              mp.events.add(o + "cancel", () => {
                mp.events.callRemote("server.phone.mech.cancel");
              }),
              mp.events.add(o + "successCancel", () => {
                (s = {}),
                  (a.g.isMechOrder = !1),
                  mp.gui.emmit("window.listernEvent ('phone.mechjob.load');");
              }),
              mp.events.add(o + "load", () => {
                mp.events.callRemote(n + "load");
              }),
              (a.g.isMechOrder = !1),
              mp.events.add(o + "initSelect", (e, t) => {
                (e = JSON.parse(e)), (s = {});
                const o = mp.players.local.position;
                e &&
                  e.length &&
                  ((s.name = e[0]),
                  (a.g.isMechOrder = !0),
                  (s.pos = new mp.Vector3(e[1], e[2], e[3])),
                  t && mp.events.call("createWaypoint", s.pos.x, s.pos.y),
                  (s.dist = Math.round(a.g.vdist2(s.pos, o, !0))),
                  (s.aStreet = a.g.getStreetName(s.pos.x, s.pos.y, s.pos.z)),
                  (s.aArea = a.g.getAreaName(s.pos.x, s.pos.y, s.pos.z)),
                  (s.area =
                    a.g.getStreetName(s.pos.x, s.pos.y, s.pos.z) +
                    " - " +
                    a.g.getAreaName(s.pos.x, s.pos.y, s.pos.z))),
                  mp.gui.emmit("window.listernEvent ('phone.mechjob.load');");
              }),
              rpc.register(i + "getList", () => JSON.stringify(r)),
              rpc.register(i + "getSelect", () => JSON.stringify(s));
          },
          2392: (e, t, a) => {
            const o = "client.phone.",
              i = "rpc.phone.",
              n = "server.phone.";
            (a.g.messagesData = {}),
              (messagesData.list = []),
              (messagesData.messages = {}),
              (messagesData.draft = {});
            let s = null;
            const r = (e) => {
              s !== e &&
                ((s = e),
                e
                  ? (c(e), mp.events.callRemote(n + "sNumber", e))
                  : mp.events.callRemote(n + "sNumber", -1));
            };
            mp.events.add(o + "closeMessage", () => {
              r(null);
            });
            const l = (e, t, a, o, i, n) => ({
              Number: e,
              Avatar: null,
              Name: e,
              Date: t,
              Text: a,
              Type: o,
              IsMe: i,
              Status: !!i || n,
            });
            mp.events.add(o + "initMessages", (e) => {
              (messagesData.list = []),
                (messagesData.messages = {}),
                (messagesData.draft = {}),
                (e = JSON.parse(e)).forEach((e, t) => {
                  messagesData.list.push(l(e[1], e[4], e[2], e[3], e[5]));
                });
            }),
              rpc.register(i + "getMessages", () => {
                s = null;
                let e = [];
                return (
                  messagesData.list.forEach((t) => {
                    const a = { ...t },
                      o = p(a.Number);
                    "string" == typeof o && o.length > 0 && (a.DraftText = o);
                    const i = phoneData.contacts[a.Number];
                    "object" == typeof i &&
                      ((a.Name = i.Name), (a.Avatar = i.Avatar));
                    const n = messagesData.ChatStatus[a.Number];
                    n && n.IsWrite && (a.IsWrite = !0), e.push(a);
                  }),
                  JSON.stringify(e)
                );
              });
            const m = (e, t, a, o, i, n) => {
                const s = messagesData.list.findIndex((t) => t.Number == e);
                "object" == typeof messagesData.list[s] &&
                  messagesData.list.splice(s, 1),
                  messagesData.list.unshift(l(e, t, a, o, i, n));
              },
              c = (e) => {
                const t = messagesData.list.findIndex((t) => t.Number == e);
                "object" != typeof messagesData.list[t] ||
                  messagesData.list[t].Status ||
                  ((messagesData.list[t].Status = !0),
                  mp.events.callRemote(n + "updStatus", e));
              },
              p = (e) => {
                const t = messagesData.draft[e];
                return "string" == typeof t && t.length > 0 ? t : "";
              };
            mp.events.add(o + "draftMessages", (e) => {
              "number" == typeof s &&
                (e && e.length
                  ? (messagesData.draft[s] = e)
                  : delete messagesData.draft[s]);
            }),
              rpc.register(i + "getDraftMessages", (e) => p(e));
            const g = (e, t = -1) => {
              let a = [];
              const o = -1 === t ? e.length : e.findIndex((e) => e.Id === t);
              for (let t = o - 15; t < o; t++) e[t] && a.push(e[t]);
              return JSON.stringify(a);
            };
            rpc.register(i + "getMessage", (e) => {
              r(Number(e));
              const t = messagesData.messages[e];
              if ("object" == typeof t) {
                const a = g(t);
                return h(e), a;
              }
              return (
                -1 !== t &&
                  ((messagesData.messages[e] = -1),
                  mp.events.callRemote(n + "getMsg", e)),
                JSON.stringify([])
              );
            }),
              rpc.register(i + "requestMessages", (e) => {
                if ("number" == typeof s) {
                  const t = messagesData.messages[s];
                  if ("object" == typeof t) return g(t, e);
                }
                return null;
              }),
              mp.events.add(o + "setMsg", (e, t) => {
                t = JSON.parse(t);
                let a = [];
                t.forEach((e, t) => {
                  a.push({
                    Text: e[1],
                    Date: e[2],
                    Me: e[3],
                    Type: e[4],
                    Status: 1,
                    Id: e[0],
                  });
                }),
                  s === e &&
                    (mp.gui.emmit(
                      `window.listernEvent ('messageInit', '${g(a)}');`
                    ),
                    h(e)),
                  (messagesData.messages[e] = a);
              }),
              mp.events.add(o + "sendMsg", (e, t, i) => {
                if ("number" == typeof s) {
                  "object" != typeof messagesData.messages[s] &&
                    (messagesData.messages[s] = []);
                  const r = {
                    Key: e,
                    Text: t,
                    Date: -1,
                    Me: !0,
                    Type: i,
                    Status: 0,
                    Id: e,
                  };
                  messagesData.messages[s].push(r);
                  const l = a.g.getContact(s);
                  if (l && l.NoSend)
                    return void mp.events.call(
                      o + "updMsgStatus",
                      s,
                      e,
                      JSON.stringify(a.g.DateTime),
                      2
                    );
                  l && l.IsSystem
                    ? mp.events.callRemote(n + "sendSystemMsg", s, e, t, i)
                    : mp.events.callRemote(n + "sendMsg", s, e, t, i);
                }
              }),
              mp.events.add(o + "updMsgStatus", (e, t, o, i) => {
                "object" != typeof messagesData.messages[e] &&
                  (messagesData.messages[e] = []);
                const n = messagesData.messages[e].findIndex(
                    (e) => e.Key === t
                  ),
                  r = messagesData.messages[e][n];
                "object" == typeof r &&
                  ((messagesData.messages[e][n].Date = JSON.parse(o)),
                  (messagesData.messages[e][n].Status = i),
                  s === e &&
                    mp.gui.emmit(
                      `window.listernEvent ('updMsgStatus', ${t}, ${o}, ${i});`
                    ),
                  1 === i && a.g.phoneSound("msgReceived", "messagesent.ogg"),
                  m(e, JSON.parse(o), r.Text, r.Type, !0, !0));
              }),
              mp.events.add(o + "msgAdd", (e, t, a, o) => {
                "object" != typeof messagesData.messages[e] &&
                  (messagesData.messages[e] = []);
                const i = {
                  Text: t,
                  Date: JSON.parse(a),
                  Me: !1,
                  Type: o,
                  Status: 1,
                };
                messagesData.messages[e].push(i);
                const n = s === e;
                if (n)
                  mp.gui.emmit(
                    `window.listernEvent ('msgAdd', '${t}', ${a}, ${o});`
                  );
                else {
                  let a = t;
                  1 === o
                    ? (a = "Вложение: геопозиция")
                    : 2 === o && (a = "Вложение: фотография"),
                    mp.events.call("phone.notify", e, a, 3);
                }
                m(e, JSON.parse(a), t, o, !1, n);
              }),
              (messagesData.ChatStatus = {});
            const _ = (e) => {
              if (messagesData.ChatStatus[e]) {
                const t = messagesData.ChatStatus[e];
                t.IsWrite
                  ? mp.gui.emmit(
                      "window.listernEvent ('phoneChatUpdStatus', 3);"
                    )
                  : mp.gui.emmit(
                      `window.listernEvent ('phoneChatUpdStatus', ${t.status});`
                    );
              } else
                mp.gui.emmit("window.listernEvent ('phoneChatUpdStatus', 0);");
            };
            mp.events.add(o + "getPhoneChatStatus", (e) => {
              const t = a.g.getContact(e);
              if (t && t.IsSystem)
                return void mp.gui.emmit(
                  "window.listernEvent ('phoneChatUpdStatus', 1);"
                );
              let o = !0;
              const i = messagesData.list.findIndex((t) => t.Number == e);
              "object" != typeof messagesData.list[i] ||
                messagesData.list[i].Status ||
                ((o = !1), (messagesData.list[i].Status = !0)),
                mp.events.callRemoteUnreliable(n + "getChatStatus", e, o);
            }),
              mp.events.add(o + "setPhoneChatStatus", (e, t) => {
                "object" != typeof messagesData.ChatStatus[e] &&
                  (messagesData.ChatStatus[e] = {}),
                  (messagesData.ChatStatus[e].status = t),
                  s === e && _(e);
              }),
              mp.events.add(o + "setPhoneChatWrite", (e, t) => {
                "object" != typeof messagesData.ChatStatus[e] &&
                  (messagesData.ChatStatus[e] = {}),
                  (messagesData.ChatStatus[e].IsWrite = t),
                  s === e && _(e);
              }),
              mp.events.add(o + "startWrite", () => {
                if ("number" == typeof s) {
                  if (phoneData.blackList.includes(s)) return;
                  mp.events.callRemoteUnreliable(n + "write", s, !0);
                }
              }),
              mp.events.add(o + "endWrite", () => {
                if ("number" == typeof s) {
                  if (phoneData.blackList.includes(s)) return;
                  mp.events.callRemoteUnreliable(n + "write", s, !1);
                }
              }),
              mp.events.add(o + "sendPopupMsg", (e, t, i, s) => {
                "object" != typeof messagesData.messages[e] &&
                  (messagesData.messages[e] = []);
                const r = {
                  Key: t,
                  Text: i,
                  Date: -1,
                  Me: !0,
                  Type: s,
                  Status: 0,
                  Id: t,
                };
                messagesData.messages[e].push(r);
                const l = a.g.getContact(e);
                l && l.NoSend
                  ? mp.events.call(
                      o + "updMsgStatus",
                      e,
                      t,
                      JSON.stringify(a.g.DateTime),
                      2
                    )
                  : l && l.IsSystem
                  ? mp.events.callRemote(n + "sendSystemMsg", e, t, i, s)
                  : mp.events.callRemote(n + "sendMsg", e, t, i, s);
              });
            let d = {};
            mp.events.add(o + "messageDefault", (e) => {
              const t = a.g.getContact(e);
              t && t.DefaultMessage && (d[e] = !0);
            });
            const h = (e) => {
              if (d[e]) {
                delete d[e];
                const t = a.g.getContact(e);
                t &&
                  t.DefaultMessage &&
                  setTimeout(() => {
                    mp.gui.emmit(
                      `window.listernEvent ('msgAdd', '${t.DefaultMessage}', '${a.g.DateTime}', 0);`
                    );
                  }, 150);
              }
            };
          },
          1055: () => {
            const e = "client.phone.",
              t = "rpc.phone.",
              a = "server.phone.";
            let o = [],
              i = 0;
            mp.events.add(e + "loadNews", () => {
              mp.events.callRemote(a + "loadNews");
            }),
              mp.events.add(e + "initNews", (e, t) => {
                (i = e),
                  (o = []),
                  (t = JSON.parse(t)).forEach((e) => {
                    o.push({
                      name: e[1],
                      number: e[2],
                      text: e[3],
                      link: e[4],
                      time: e[7],
                      type: e[5],
                      isPremium: e[6],
                    });
                  }),
                  mp.gui.emmit("window.listernEvent ('phoneNewsLoad');");
              }),
              rpc.register(t + "getNews", () => JSON.stringify(o.reverse())),
              rpc.register(t + "newsPriceOneSymbol", () => i),
              mp.events.add(e + "successNews", () => {
                mp.gui.emmit("window.listernEvent ('adSuccess');");
              }),
              mp.events.add(e + "addNews", (e, t, o, i) => {
                mp.events.callRemote(a + "addNews", e, t, o, i);
              });
          },
          2447: (e, t, a) => {
            class o {
              constructor(e, t, a) {
                (this.number = e),
                  (this.text = t),
                  (this.endtime = -1),
                  (this.timeout = 1e3 * a);
              }
            }
            let i = [];
            const n = () => {
              if ("object" == typeof i[0]) {
                const e = i[0],
                  t = a.g.getContact(e.number),
                  o = { Name: t.Name, Avatar: t.Avatar, Text: e.text };
                mp.gui.emmit(
                  `window.listernEvent ('phone.notify', '${JSON.stringify(
                    o
                  )}');`
                );
              } else
                mp.gui.emmit("window.listernEvent ('phone.notify', false);");
            };
            mp.events.add(a.g.renderName["150ms"], () => {
              (() => {
                if (
                  (!a.g.menuOpened || a.g.isPhoneOpen) &&
                  i.length > 0 &&
                  "object" == typeof i[0]
                ) {
                  const e = new Date().getTime(),
                    t = i[0];
                  -1 === t.endtime &&
                    ((t.endtime = new Date().getTime() + t.timeout), n()),
                    void 0 !== t && e > t.endtime && (i.splice(0, 1), n());
                }
              })();
            }),
              mp.events.add("phone.notify", (e, t, a) => {
                ((e, t, a) => {
                  const s = i.findIndex((t) => t.number === e);
                  -1 !== s
                    ? ((i[s].timeout = 1e3 * a),
                      (i[s].text = t),
                      0 === s &&
                        ((i[s].endtime = new Date().getTime() + a), n()))
                    : i.push(new o(e, t, a));
                })(e, t, a);
              });
          },
          9871: (e, t, a) => {
            let o = [];
            class i extends a.g.CustomScenario {
              constructor() {
                super("cphone_base");
              }
              async onStart(e) {
                e !== a.g.localplayer &&
                  a.g.requestAnimDict("cellphone@str").then(async () => {
                    mp.players.exists(e) &&
                      0 !== e.handle &&
                      (mp.attachments.addFor(e, mp.game.joaat("phonecall")),
                      e.taskPlayAnim(
                        "cellphone@str",
                        "cellphone_text_press_a",
                        8,
                        0,
                        -1,
                        49,
                        0,
                        !1,
                        !1,
                        !1
                      ));
                  });
              }
              onStartForNew(e) {
                this.onStart(e);
              }
              onEnd(e) {
                e !== a.g.localplayer &&
                  mp.players.exists(e) &&
                  0 !== e.handle &&
                  (mp.attachments.removeFor(e, mp.game.joaat("phonecall")),
                  e.stopAnimTask("cellphone@str", "cellphone_text_press_a", 3));
              }
            }
            o.push(new i());
            class n extends a.g.CustomScenario {
              constructor() {
                super("cphone_call");
              }
              async onStart(e) {
                e !== a.g.localplayer
                  ? a.g
                      .requestAnimDict("anim@cellphone@in_car@ds")
                      .then(async () => {
                        mp.players.exists(e) &&
                          0 !== e.handle &&
                          (mp.attachments.addFor(e, mp.game.joaat("phonecall")),
                          e.taskPlayAnim(
                            "anim@cellphone@in_car@ds",
                            "cellphone_call_listen_base",
                            8,
                            0,
                            -1,
                            49,
                            0,
                            !1,
                            !1,
                            !1
                          ));
                      })
                  : e.taskUseMobilePhone(1);
              }
              onStartForNew(e) {
                this.onStart(e);
              }
              onEnd(e) {
                e !== a.g.localplayer
                  ? mp.players.exists(e) &&
                    0 !== e.handle &&
                    (mp.attachments.removeFor(e, mp.game.joaat("phonecall")),
                    e.stopAnimTask(
                      "anim@cellphone@in_car@ds",
                      "cellphone_call_listen_base",
                      3
                    ))
                  : e.taskUseMobilePhone(0);
              }
            }
            o.push(new n()),
              mp.events.add("client.phone.anim", async (e, t) => {
                const i = mp.players.atRemoteId(e);
                if (
                  mp.players.exists(i) &&
                  0 !== i.handle &&
                  i !== a.g.localplayer
                )
                  if (0 === t) {
                    for (const e of o)
                      if (e.isActive(i)) {
                        e.onStart(i);
                        break;
                      }
                  } else
                    1 === t &&
                      a.g.requestAnimDict("cellphone@self").then(async () => {
                        mp.players.exists(i) &&
                          0 !== i.handle &&
                          i.taskPlayAnim(
                            "cellphone@self",
                            "selfie",
                            4,
                            4,
                            -1,
                            49,
                            0,
                            !1,
                            !1,
                            !1
                          );
                      });
              });
          },
          3642: () => {
            const e = "client.phone.business.",
              t = "rpc.phone.business.",
              a = "server.phone.business.";
            mp.events.add(e + "load", (e) => {
              mp.events.callRemote(a + "load", e), m();
            });
            let o = {},
              i = [],
              n = [];
            mp.events.add(e + "init", (e, t, a) => {
              (e = JSON.parse(e)),
                (o = {
                  type: e[0],
                  tax: e[1],
                  cash: e[2],
                  pribil: e[3],
                  zatratq: e[4],
                  whCount: e[5],
                  whMaxCount: e[6],
                  whPriceMaxCount: e[7],
                  sellPrice: e[8],
                }),
                (t = JSON.parse(t)),
                (i = []),
                t.forEach((e) => {
                  i.push({
                    name: e[0],
                    count: e[1],
                    maxCount: e[2],
                    price: e[3],
                    otherPrice: e[4],
                    defaultPrice: e[5],
                    minPrice: e[6],
                    maxPrice: e[7],
                    itemId: e[8],
                    productType: e[9],
                  });
                }),
                (a = JSON.parse(a)),
                (n = []),
                a.forEach((e) => {
                  const t = i.findIndex((t) => t.name === e[1]),
                    a = i[t];
                  if (a) {
                    const o = a.otherPrice > 0 ? a.otherPrice : a.defaultPrice;
                    n.push({
                      uid: e[0],
                      name: e[1],
                      count: e[2],
                      price: o * e[2],
                      itemId: a.itemId,
                      productType: a.productType,
                    }),
                      (i[t].isOrder = !0),
                      (i[t].uidOrder = e[0]);
                  }
                }),
                mp.gui.emmit("window.listernEvent ('phoneBusinessInit');"),
                mp.gui.emmit("window.listernEvent ('phoneBusinessUpdate');");
            }),
              rpc.register(t + "getProducts", () => JSON.stringify(i)),
              rpc.register(t + "getProduct", (e) =>
                JSON.stringify(i.find((t) => t.name === e))
              ),
              rpc.register(t + "getStats", () => JSON.stringify(o)),
              rpc.register(t + "getType", () => o.type),
              mp.events.add(e + "extraCharge", (e, t) => {
                mp.events.callRemote(a + "extraCharge", e, t);
              }),
              mp.events.add(e + "cExtraCharge", (e, t) => {
                const a = i.findIndex((t) => t.name === e);
                i[a] &&
                  ((i[a].price = t),
                  mp.gui.emmit("window.listernEvent ('phoneBusinessUpdate');"));
              }),
              mp.events.add(e + "maxProducts", () => {
                mp.events.callRemote(a + "maxProducts");
              }),
              rpc.register(t + "getOrders", () => JSON.stringify(n)),
              rpc.register(t + "getOrder", (e) =>
                JSON.stringify(n.find((t) => t.name === e))
              ),
              mp.events.add(e + "addOrder", (e, t) => {
                mp.events.callRemote(a + "addOrder", e, t);
              }),
              mp.events.add(e + "cAddOrder", (e, t, a) => {
                const s = i.findIndex((e) => e.name === t),
                  r = i[s];
                if (r) {
                  const l = r.otherPrice > 0 ? r.otherPrice : r.defaultPrice;
                  n.push({
                    uid: e,
                    name: t,
                    count: a,
                    price: l * a,
                    itemId: r.itemId,
                    productType: r.productType,
                  }),
                    (i[s].isOrder = !0),
                    (i[s].uidOrder = e),
                    (o.whPriceMaxCount -= l * (r.maxCount - r.count)),
                    mp.gui.emmit(
                      "window.listernEvent ('phoneBusinessUpdate');"
                    );
                }
              }),
              mp.events.add(e + "cancelOrder", (e) => {
                const t = n.findIndex((t) => t.uid === e);
                n[t] && mp.events.callRemote(a + "cancelOrder", e);
              }),
              mp.events.add(e + "successCancel", (e) => {
                const t = n.findIndex((t) => t.uid === e);
                if (n[t]) {
                  const e = i.findIndex((e) => e.name === n[t].name),
                    a = i[e];
                  if (a) {
                    const t = a.otherPrice > 0 ? a.otherPrice : a.defaultPrice;
                    (o.whPriceMaxCount += t * (a.maxCount - a.count)),
                      delete i[e].isOrder,
                      delete i[e].uidOrder;
                  }
                  n.splice(t, 1),
                    mp.gui.emmit(
                      "window.listernEvent ('phoneBusinessUpdate');"
                    );
                }
              });
            let s = "",
              r = "",
              l = "";
            const m = () => {
              (s = ""), (r = ""), (l = "");
            };
            mp.events.add(e + "loadStats", () => {
              !s || s.length <= 1 ? mp.events.callRemote(a + "loadStats") : c();
            }),
              mp.events.add(e + "initStats", (e, t, a) => {
                (s = e), (t = JSON.parse(t));
                let o = [];
                t.forEach((e, t) => {
                  e.forEach((e) => {
                    const a = i.find((t) => t.name === e[0]);
                    a &&
                      o.push({
                        name: a.name,
                        price: e[1],
                        productType: a.productType,
                        itemId: a.itemId,
                        timeId: t,
                      });
                  });
                }),
                  (r = JSON.stringify(o)),
                  (o = []),
                  (a = JSON.parse(a)).forEach((e, t) => {
                    e.forEach((e) => {
                      o.push({ uuid: e[0], price: e[1], timeId: t });
                    });
                  }),
                  (l = JSON.stringify(o)),
                  c();
              });
            const c = () => {
              mp.gui.emmit(
                `window.listernEvent ('phoneBusinessStatsInit', '${s}', '${r}', '${l}');`
              );
            };
            mp.events.add(e + "sell", () => {
              mp.events.call("client.phone.close"),
                mp.events.callRemote(a + "sell");
            });
          },
          4267: (e, t, a) => {
            const o = "client.phone.house.",
              i = "rpc.phone.house.";
            mp.events.add(o + "load", () => {
              mp.events.callRemote("server.phone.house.load");
            });
            let n = {},
              s = {},
              r = {},
              l = {},
              m = [],
              c = !1;
            mp.events.add(o + "init", (e, t, o, i, p, g, _) => {
              (n = JSON.parse(e)),
                (s = JSON.parse(o)),
                (r = JSON.parse(i)),
                (l = JSON.parse(g)),
                (m = JSON.parse(_)),
                (r = JSON.parse(i)),
                r &&
                  Object.values(r) &&
                  Object.values(r).length &&
                  ((p = JSON.parse(p)),
                  (r.area = a.g.getAreaName(p.x, p.y, p.z))),
                mp.gui.emmit("window.listernEvent ('phoneHouseInit');"),
                mp.events.call(
                  "client.phone.cars.init",
                  t,
                  n.includes("inGarage"),
                  n.includes("sell")
                ),
                (c = n.includes("inPark"));
            }),
              mp.events.add(o + "close", () => {
                c && mp.events.callRemote("server.house.close"), (c = !1);
              }),
              rpc.register(i + "getStats", () => JSON.stringify(n)),
              rpc.register(i + "houseData", () => JSON.stringify(r)),
              rpc.register(i + "houseFurnitures", () => JSON.stringify(m)),
              rpc.register(i + "residentsData", () => JSON.stringify(s)),
              rpc.register(i + "garagesData", () => JSON.stringify(l)),
              mp.events.add(o + "fUse", (e, t) => {
                t && mp.events.call("client.phone.close"),
                  mp.events.callRemote("server.house.furniture.use", e, t),
                  mp.discord.update(
                    "Пользуется мебелью",
                    `на RedAge под ID ${a.g.localplayer.remoteId}`
                  );
              }),
              mp.events.add(o + "action", (e) => {
                mp.events.call("client.phone.close"),
                  mp.events.callRemote("server.house.action", e);
              }),
              mp.events.add(o + "openPark", () => {
                mp.events.call("client.phone.close"),
                  mp.events.call("client.parking.open");
              }),
              mp.events.add(o + "fBuy", (e) => {
                mp.events.call("client.phone.close"),
                  mp.events.callRemote("server.house.furniture.buy", e),
                  mp.discord.update(
                    "Покупает мебель в дом",
                    `на RedAge под ID ${a.g.localplayer.remoteId}`
                  );
              }),
              mp.events.add(o + "rAccess", (e, t) => {
                mp.events.callRemote("server.house.resident.access", e, t);
              }),
              mp.events.add(o + "rDell", (e) => {
                mp.events.call("client.phone.close"),
                  mp.events.callRemote("server.house.resident.dell", e);
              });
          },
          5910: (e, t, a) => {
            a(3642), a(4267);
            const o = "client.phone.";
            mp.events.add(o + "loadProperty", () => {
              mp.events.callRemote("server.phone.loadProperty");
            });
            let i = [];
            mp.events.add(o + "propertyInit", (e) => {
              (e = JSON.parse(e)),
                (i = []),
                e.forEach((e) => {
                  i.push({ type: e[0], isOwner: e[1], id: e[2] });
                }),
                mp.gui.emmit("window.listernEvent ('phoneMainPropertyLoad');");
            }),
              rpc.register("rpc.phone.getProperty", () => JSON.stringify(i));
          },
          5557: (e, t, a) => {
            const o = "client.phone.",
              i = "rpc.phone.";
            (phoneData.recents = []),
              mp.events.add(o + "initRecents", (e) => {
                (e = JSON.parse(e)).forEach((e) => {
                  const t = {
                    number: e[0],
                    time: e[1],
                    isCall: e[2],
                    duration: e[3],
                  };
                  phoneData.recents.push(t);
                });
              }),
              mp.events.add(o + "addRecent", (e, t, a, o = -1) => {
                const i = {
                    number: e,
                    time: JSON.parse(a),
                    isCall: t,
                    duration: o,
                  },
                  n = phoneData.recents.findIndex((t) => t.number === e);
                "object" == typeof phoneData.recents[n] &&
                  phoneData.recents.splice(n, 1),
                  phoneData.recents.push(i),
                  phoneData.recents.length >= 35 &&
                    phoneData.recents.splice(phoneData.recents.length - 1, 1);
              }),
              mp.events.add(o + "updateRecent", (e) => {
                const t = phoneData.recents.length - 1;
                "object" == typeof phoneData.recents[t] &&
                  (phoneData.recents[t].duration = e);
              }),
              rpc.register(i + "getRecents", () =>
                JSON.stringify(
                  (() => {
                    let e = [];
                    return (
                      phoneData.recents.forEach((t) => {
                        e.unshift({ ...t, ...a.g.getContact(t.number) });
                      }),
                      e
                    );
                  })()
                )
              ),
              rpc.register(
                i + "recentsClear",
                () => (
                  (phoneData.recents = []),
                  mp.events.callRemote("server.phone.recentsClear"),
                  !0
                )
              );
          },
          9774: () => {
            const e = "client.phone.settings.",
              t = "rpc.phone.settings.",
              a = "server.phone.settings.";
            let o = {};
            mp.events.add(e + "init", (e) => {
              o = JSON.parse(e);
            }),
              rpc.register(t + "isAir", () => o.IsAir),
              mp.events.add(e + "air", () => {
                (o.IsAir = !o.IsAir), mp.events.callRemote(a + "air");
              }),
              rpc.register(t + "forbesVisible", () => o.ForbesVisible),
              mp.events.add(e + "forbesVisible", () => {
                (o.ForbesVisible = !o.ForbesVisible),
                  mp.events.callRemote(a + "forbesVisible");
              }),
              mp.events.add(e + "removeSim", () => {
                mp.events.callRemote(a + "removeSim");
              }),
              rpc.register(t + "bellId", () => o.BellId),
              mp.events.add(e + "bellId", (e) => {
                (o.BellId = e), mp.events.callRemote(a + "bellId", e);
              }),
              rpc.register(t + "smsId", () => o.SmsId),
              mp.events.add(e + "smsId", (e) => {
                (o.SmsId = e), mp.events.callRemote(a + "smsId", e);
              }),
              rpc.register(t + "wallpaper", () => o.Wallpaper),
              mp.events.add(e + "wallpaper", (e) => {
                (o.Wallpaper = e), mp.events.callRemote(a + "wallpaper", e);
              }),
              mp.events.add(e + "play", (e) => {
                mp.events.call("sounds.stop", "phoneSound"),
                  mp.events.call("sounds.playAmbient", e, {
                    id: "phoneSound",
                    volume: 0.05,
                  });
              });
          },
          4743: (e, t, a) => {
            a(6146);
            const o = "client.phone.taxi.",
              i = "rpc.phone.taxi.",
              n = "server.phone.taxi.";
            let s = {};
            rpc.register(i + "getOrder", () => JSON.stringify(s));
            const r = () => {
              if (
                (mp.gui.emmit("window.listernEvent ('phone.taxi.load');"),
                s.pos &&
                  (mp.events.call(
                    "createBlip",
                    "taxi",
                    "Такси",
                    56,
                    s.pos,
                    1.25,
                    5
                  ),
                  void 0 === s.shape))
              ) {
                const e = mp.players.local.position;
                mp.events.call(
                  "createBlip",
                  "taxiCircle",
                  "Такси",
                  9,
                  e,
                  0.5,
                  5,
                  155,
                  5
                ),
                  (s.shape = mp.colshapes.newSphere(e.x, e.y, e.z, 15));
              }
            };
            mp.events.add("playerExitColshape", (e) => {
              s &&
                void 0 !== s.shape &&
                e &&
                e === s.shape &&
                mp.events.call(o + "cancel");
            }),
              mp.events.add(o + "order", () => {
                s.isOrder || mp.events.callRemote(n + "order");
              }),
              mp.events.add(o + "successOrder", () => {
                (s = { isOrder: !0 }), r();
              }),
              mp.events.add(o + "cancel", () => {
                s.isOrder && mp.events.callRemote(n + "cancel");
              }),
              mp.events.add(o + "successCancel", () => {
                (() => {
                  const e = s.shape;
                  (s = {}),
                    void 0 !== e && e.destroy(),
                    mp.events.call("deleteBlip", "taxi"),
                    mp.events.call("deleteBlip", "taxiCircle");
                })(),
                  r();
              }),
              mp.events.add(o + "updateOrder", (e, t, a, o, i) => {
                s.isOrder &&
                  ((s.driver = e),
                  (s.number = t),
                  (s.pos = new mp.Vector3(a, o, i)),
                  r());
              }),
              mp.events.add(o + "updatePosOrder", (e, t, a) => {
                s.isOrder && ((s.pos = new mp.Vector3(e, t, a)), r());
              });
            let l = !1;
            mp.events.add(o + "openCounter", (e, t) => {
              (l = {
                name: e,
                isDriver: t,
                price: 0,
                pos: a.g.localplayer.position,
              }),
                mp.gui.emmit("window.listernEvent ('phone.taxi.getMenu');"),
                mp.gui.emmit("window.hudStore.isTaxiCounter (true)");
            }),
              mp.events.add(o + "updateCounter", (e) => {
                (l.price += e),
                  (l.pos = a.g.localplayer.position),
                  mp.gui.emmit(
                    "window.listernEvent ('phone.taxi.updateCounter');"
                  ),
                  mp.gui.emmit(
                    "window.listernEvent ('hud.taxi.updateCounter');"
                  );
              }),
              rpc.register(i + "getCounter", () => JSON.stringify(l)),
              mp.events.add(o + "closeCounter", () => {
                (l = !1),
                  mp.gui.emmit("window.listernEvent ('phone.taxi.getMenu');"),
                  mp.gui.emmit("window.hudStore.isTaxiCounter (false)");
              }),
              rpc.register(i + "getMenu", () =>
                l
                  ? "Counter"
                  : a.g.isTaxiOrder
                  ? "Driver"
                  : a.g.isInitTaxiList
                  ? "List"
                  : "Client"
              );
          },
          6146: (e, t, a) => {
            const o = "client.phone.taxijob.",
              i = "rpc.phone.taxijob.",
              n = "server.phone.taxijob.";
            let s = {},
              r = [];
            (a.g.isInitTaxiList = !1),
              mp.events.add(o + "init", (e) => {
                r = [];
                const t = a.g.localplayer.position;
                (e = JSON.parse(e)).forEach((e) => {
                  let o = {};
                  (o.id = e[0]),
                    (o.name = e[1]),
                    (o.pos = new mp.Vector3(e[2], e[3], e[4])),
                    (o.dist = Math.round(a.g.vdist2(o.pos, t, !0))),
                    (o.aStreet = a.g.getStreetName(o.pos.x, o.pos.y, o.pos.z)),
                    (o.aArea = a.g.getAreaName(o.pos.x, o.pos.y, o.pos.z)),
                    (o.area =
                      a.g.getStreetName(o.pos.x, o.pos.y, o.pos.z) +
                      " - " +
                      a.g.getAreaName(o.pos.x, o.pos.y, o.pos.z)),
                    r.push(o);
                }),
                  (a.g.isInitTaxiList = !0),
                  mp.gui.emmit("window.listernEvent ('phone.taxi.getMenu');");
              }),
              mp.events.add(o + "jobEnd", () => {
                (r = []),
                  (a.g.isInitTaxiList = !1),
                  mp.gui.emmit("window.listernEvent ('phone.taxi.getMenu');");
              }),
              mp.events.add(o + "add", (e, t, o, i, n) => {
                if (!a.g.isInitTaxiList) return;
                const s = mp.players.local.position;
                let l = {};
                (l.id = e),
                  (l.name = t),
                  (l.pos = new mp.Vector3(o, i, n)),
                  (l.dist = Math.round(a.g.vdist2(l.pos, s, !0))),
                  (l.aStreet = a.g.getStreetName(l.pos.x, l.pos.y, l.pos.z)),
                  (l.aArea = a.g.getAreaName(l.pos.x, l.pos.y, l.pos.z)),
                  (l.area =
                    a.g.getStreetName(l.pos.x, l.pos.y, l.pos.z) +
                    " - " +
                    a.g.getAreaName(l.pos.x, l.pos.y, l.pos.z)),
                  r.push(l),
                  mp.gui.emmit("window.listernEvent ('phone.taxijob.update');"),
                  mp.gui.chat.push(
                    `!{#00a86b}[ДИСПЕТЧЕР]: !{#ffffff}Игрок ${t} вызвал такси !{#ffcc00}(${l.dist}м)!{#ffffff}. Откройте телефон что бы принять вызов`
                  ),
                  mp.events.call(
                    "phone.notify",
                    228,
                    "Появился новый заказ! :)",
                    4
                  );
              }),
              mp.events.add(o + "dell", (e) => {
                if (!a.g.isInitTaxiList) return;
                const t = r.findIndex((t) => t.id === e);
                r[t] && r.splice(t, 1),
                  mp.gui.emmit("window.listernEvent ('phone.taxijob.update');");
              }),
              mp.events.add(o + "take", (e) => {
                if (!a.g.isInitTaxiList) return;
                const t = r.findIndex((t) => t.id === e);
                r[t] && mp.events.callRemote(n + "take", e);
              }),
              mp.events.add(o + "cancel", () => {
                mp.events.callRemote("server.phone.taxi.cancel");
              }),
              mp.events.add(o + "successCancel", () => {
                (s = {}),
                  (a.g.isTaxiOrder = !1),
                  mp.gui.emmit("window.listernEvent ('phone.taxijob.load');");
              }),
              mp.events.add(o + "load", () => {
                mp.events.callRemote(n + "load");
              }),
              (a.g.isTaxiOrder = !1),
              mp.events.add(o + "initSelect", (e, t) => {
                (e = JSON.parse(e)), (s = {});
                const o = mp.players.local.position;
                e &&
                  e.length &&
                  ((s.name = e[0]),
                  (a.g.isTaxiOrder = !0),
                  (s.pos = new mp.Vector3(e[1], e[2], e[3])),
                  t && mp.events.call("createWaypoint", s.pos.x, s.pos.y),
                  (s.dist = Math.round(a.g.vdist2(s.pos, o, !0))),
                  (s.aStreet = a.g.getStreetName(s.pos.x, s.pos.y, s.pos.z)),
                  (s.aArea = a.g.getAreaName(s.pos.x, s.pos.y, s.pos.z)),
                  (s.area =
                    a.g.getStreetName(s.pos.x, s.pos.y, s.pos.z) +
                    " - " +
                    a.g.getAreaName(s.pos.x, s.pos.y, s.pos.z))),
                  mp.gui.emmit("window.listernEvent ('phone.taxijob.load');");
              }),
              rpc.register(i + "getList", () => JSON.stringify(r)),
              rpc.register(i + "getSelect", () => JSON.stringify(s));
          },
          3744: () => {
            const e = "client.phone.",
              t = "rpc.phone.";
            (phoneData.weatherList = []),
              mp.events.add(e + "initWeather", (e) => {
                (phoneData.weatherList = []), (e = JSON.parse(e));
                let t = [];
                e.forEach((e) => {
                  t.push({
                    weatherId: e[0],
                    hour: e[1],
                    minute: e[2],
                    temp: e[3],
                  });
                }),
                  (phoneData.weatherList = t);
              }),
              rpc.register(t + "getWeather", () =>
                JSON.stringify(phoneData.weatherList.slice(0, 6))
              ),
              rpc.register(t + "getCurrentWeather", () =>
                JSON.stringify(phoneData.weatherList[0])
              ),
              mp.events.add(e + "addWeather", (e, t, a, o) => {
                phoneData.weatherList.splice(0, 1),
                  phoneData.weatherList.push({
                    weatherId: e,
                    hour: t,
                    minute: a,
                    temp: o,
                  });
              }),
              mp.events.add(e + "updWeather", (e, t) => {
                (phoneData.weatherList[0].weatherId = e),
                  (phoneData.weatherList[0].temp = t);
              });
          },
          4528: (e, t, a) => {
            (a.g.afkSecondsCount = 0),
              setInterval(function () {
                try {
                  if (
                    !a.g.menuOpened &&
                    (a.g.afkSecondsCount++,
                    60 == a.g.afkSecondsCount &&
                      ((!a.g.anti_afk_flood ||
                        (a.g.anti_afk_flood &&
                          new Date().getTime() - a.g.anti_afk_flood >= 1e4)) &&
                        mp.events.call("updateAFKStatus_client", !0),
                      (a.g.anti_afk_flood = new Date().getTime())),
                    a.g.afkSecondsCount >= 60)
                  ) {
                    const e = Math.trunc(a.g.afkSecondsCount / 60),
                      t = a.g.afkSecondsCount % 60;
                    mp.discord.update(
                      `Сладенько спит уже  ${a.g.formatIntZero(
                        e,
                        2
                      )}:${a.g.formatIntZero(t, 2)}`,
                      `на RedAge под ID ${a.g.localplayer.remoteId}`
                    );
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/afksystem",
                    "setInterval",
                    e.toString()
                  );
                }
              }, 1e3),
              mp.events.add("updateAFKStatus_client", function (e = !1) {
                (!a.g.second_anti_afk_flood ||
                  (a.g.second_anti_afk_flood &&
                    new Date().getTime() - a.g.second_anti_afk_flood >= 1e3)) &&
                  a.g.AFK_STATUS !== e &&
                  mp.events.callRemote("updateAFKStatus", e),
                  (a.g.second_anti_afk_flood = new Date().getTime());
              });
          },
          2014: (e, t, a) => {
            mp.events.add("client.animationStore.animFavorites", (e) => {
              mp.gui.emmit(`window.animationStore.initAnimFavorites('${e}')`);
            }),
              mp.events.add("client.animationStore.animBind", (e) => {
                mp.gui.emmit(`window.animationStore.initAnimBind('${e}')`);
              });
            let o = !1,
              i = !1;
            (a.g.binderFunctions.с_animation = async () => {
              o &&
                (mp.gui.emmit("window.router.setHud();"),
                (o = !1),
                await a.g.wait(50),
                a.g.menuClose());
            }),
              (a.g.binderFunctions.o_animation = (e = !1) => {
                e &&
                  (!a.g.loggedin ||
                    a.g.chatActive ||
                    a.g.editing ||
                    a.g.cuffed ||
                    a.g.menuCheck() ||
                    !0 === a.g.isDeath ||
                    a.g.isDemorgan ||
                    a.g.localplayer.isInAnyVehicle(!1) ||
                    (mp.gui.emmit(
                      `window.router.setView('PlayerAnimations', ${a.g.ANTIANIM});`
                    ),
                    a.g.menuOpen(!0),
                    (o = !0)));
              }),
              mp.events.add("client.animation.open", () => {
                a.g.binderFunctions.o_animation(!0),
                  mp.discord.update(
                    "Изучает список анимаций",
                    `на RedAge под ID ${a.g.localplayer.remoteId}`
                  );
              }),
              mp.events.add("client.animation.play", (e) => {
                try {
                  if (
                    !a.g.loggedin ||
                    a.g.chatActive ||
                    a.g.editing ||
                    a.g.cuffed ||
                    !0 === a.g.isDeath ||
                    a.g.isDemorgan ||
                    !0 === a.g.startedMining ||
                    a.g.startedMafiaGame ||
                    a.g.localplayer.isInAnyVehicle(!1)
                  )
                    return;
                  if (a.g.ANTIANIM && !i) return;
                  mp.events.callRemote("server.animation.play", e, !0),
                    mp.gui.emmit(
                      "window.UpdateButtonText('hud__icon-Anim', 'Чтобы сбросить анимацию, нажмите \"Пробел\" дважды.');"
                    ),
                    a.g.binderFunctions.с_animation(),
                    mp.discord.update(
                      "ФЛЕКСИТ",
                      `на RedAge под ID ${a.g.localplayer.remoteId}`
                    );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/animation",
                    "client.animation.play",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.animation.stop", () => {
                try {
                  if (!i || a.g.startedMafiaGame) return;
                  if (!a.g.ANTIANIM)
                    return void a.g.binderFunctions.o_animation(!0);
                  mp.gui.emmit("window.UpdateButtonText('', '');"),
                    mp.events.callRemote("server.animation.play", -1, !0);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/animation",
                    "client.animation.stop",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.animation.favorite", (e) => {
                mp.events.callRemote("server.animation.favorite", e);
              }),
              mp.events.add("client.animation.bind", (e) => {
                mp.events.callRemote("server.animation.bind", e);
              }),
              mp.events.add("client.animation.isPlayer", (e) => {
                i = e;
              }),
              mp.events.add("playerEnterVehicle", (e, t) => {
                try {
                  a.g.localplayer.setHelmet(!1),
                    1 == i &&
                      (mp.gui.emmit("window.UpdateButtonText('', '');"),
                      mp.events.callRemote("server.animation.play", -1, !1));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/animation",
                    "playerStartEnterVehicle",
                    e.toString()
                  );
                }
              });
          },
          6496: (e, t, a) => {
            var o = 0;
            let i = "";
            mp.events.add("openatm", () => {
              a.g.menuCheck() ||
                (a.g.menuOpen(),
                mp.discord.update(
                  "Взаимодействует с банкоматом",
                  `на RedAge под ID ${a.g.localplayer.remoteId}`
                ));
            }),
              mp.events.add("closeatm", () => {
                a.g.menuClose(), mp.gui.emmit("window.router.setHud();");
              }),
              mp.events.add("setatm", (e, t, a, o) => {
                mp.gui.emmit(
                  `window.router.setView("PlayerAtm", {number: '${e}', holder: '${t}'})`
                );
              }),
              mp.events.add("atmCB", (e, t) => {
                mp.events.callRemote("atmCB", e, t);
              });
            var n = 0;
            mp.events.add("atmVal", (e) => {
              try {
                new Date().getTime() - o < 1e3
                  ? ++n >= 10 && ((n = 0), mp.events.callRemote("atmDP"))
                  : 0 === e
                  ? ((n = 0),
                    mp.events.call(
                      "notify",
                      1,
                      9,
                      "Введите корректное значение.",
                      3e3
                    ))
                  : ((n = 0),
                    mp.events.callRemote("atmVal", e),
                    (o = new Date().getTime()));
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/atm",
                  "atmVal",
                  e.toString()
                );
              }
            }),
              mp.events.add("atmOpen", (e) => {
                mp.gui.emmit(`window.atm.open(${e})`);
              }),
              mp.events.add("atmOpenBiz", (e, t) => {
                mp.gui.emmit(`window.atm.open([3, ${e}, ${t}])`);
              }),
              mp.events.add("atm", (e, t) => {
                try {
                  if (4 == e) i = t;
                  else {
                    if (44 == e)
                      return (
                        mp.events.callRemote("atm", 4, t, i),
                        void mp.gui.emmit("window.atm.reset()")
                      );
                    33 == e
                      ? mp.events.callRemote("atm", 3, t, i)
                      : (mp.events.callRemote("atm", e, t),
                        mp.gui.emmit("window.atm.reset()"));
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/atm",
                    "atm",
                    e.toString()
                  );
                }
              });
          },
          3698: (e, t, a) => {
            mp.events.add("client.init", function (e, t, o, i, n, s, r, l) {
              try {
                mp.events.call("setTraffic", 0),
                  mp.events.call("cleartraffic"),
                  mp.events.call("DateTime", n),
                  mp.events.call("SetWeather", s, r, l),
                  mp.game.gxt.set("PM_PAUSE_HDR", "REDAGE.NET"),
                  mp.gui.emmit(`window.serverStore.serverId (${parseInt(t)})`),
                  mp.gui.emmit(
                    `window.serverStore.serverDonatMultiplier (${o})`
                  ),
                  mp.gui.emmit(
                    `window.serverStore.serverDonateDoubleConvert (${i})`
                  ),
                  a.g.menuOpen(),
                  (a.g.localplayer.armour = 0);
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/auth",
                  "client.init",
                  e.toString()
                );
              }
            }),
              mp.events.add("client.closeAll", () => {
                a.g.FadeScreen(!1, 500), mp.gui.emmit("window.router.close()");
              }),
              mp.events.add("client.auth", async (e) => {
                try {
                  mp.gui.emmit(`window.accountStore.accountLogin('${e}')`);
                  const t = a.g.cameraManager.createCamera(
                    "authentication",
                    new mp.Vector3(723.5045, 851.446, 382.3506),
                    new mp.Vector3(0, 0, 358.6186),
                    70
                  );
                  (a.g.localplayer.position = new mp.Vector3(
                    723.5045,
                    851.446,
                    382.3506
                  )),
                    a.g.localplayer.freezePosition(!0),
                    a.g.localplayer.setVisible(!1, !1),
                    a.g.cameraManager.setActiveCamera(t, !0),
                    mp.discord.update(
                      "Восхищается окном логина",
                      "Заходя на любимый RedAge"
                    ),
                    await a.g.wait(500),
                    a.g.FadeScreen(!1, 2500);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "utils/cef",
                    "client.auth",
                    e.toString()
                  );
                }
              });
            var o = 0,
              i = 0;
            mp.events.add("client:OnSignInv2", function (e, t) {
              try {
                if (new Date().getTime() - o < 500)
                  return void mp.events.call(
                    "notify",
                    4,
                    9,
                    "Слишком быстро",
                    3e3
                  );
                (o = new Date().getTime()),
                  mp.events.callRemote("signin", e, t);
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/auth",
                  "client:OnSignInv2",
                  e.toString()
                );
              }
            }),
              mp.events.add("restorepass", function (e, t) {
                try {
                  if (new Date().getTime() - o < 1e3)
                    return void mp.events.call(
                      "notify",
                      4,
                      9,
                      "Слишком быстро",
                      3e3
                    );
                  o = new Date().getTime();
                  var a = t;
                  mp.events.callRemote("restorepass", e, a);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/auth",
                    "restorepass",
                    e.toString()
                  );
                }
              }),
              mp.events.add("restorepassstep", function (e) {
                mp.gui.emmit(
                  `window.events.callEvent("cef.authentication.restoreStep", ${e})`
                );
              }),
              mp.events.add("client:OnSignUpv2", function (e, t, i, n, s) {
                try {
                  if (new Date().getTime() - o < 500)
                    return void mp.events.call(
                      "notify",
                      4,
                      9,
                      "Слишком быстро",
                      3e3
                    );
                  if (((o = new Date().getTime()), a.g.isInvalidLogin(e)))
                    return void mp.events.call(
                      "notify",
                      1,
                      9,
                      "Логин не соответствует формату или слишком длинный!",
                      3e3
                    );
                  if (a.g.isInvalidEmail(t))
                    return void mp.events.call(
                      "notify",
                      1,
                      9,
                      "Электронная почта не соответствует формату!",
                      3e3
                    );
                  if (n != s)
                    return void mp.events.call(
                      "notify",
                      1,
                      9,
                      "Пароли не совпадают!",
                      3e3
                    );
                  if (n.length < 3)
                    return void mp.events.call(
                      "notify",
                      1,
                      9,
                      "Слишком короткий пароль!",
                      3e3
                    );
                  mp.events.callRemote("signup", e, n, t, i);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/auth",
                    "client:OnSignUpv2",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.registration.error", function (e) {
                mp.events.call("notify", 1, 9, e, 3e3),
                  mp.gui.emmit(
                    "window.listernEvent ('isSendEmailMessage', false);"
                  );
              }),
              mp.events.add("client.registration.sendEmail", function () {
                mp.gui.emmit(
                  "window.listernEvent ('isSendEmailMessage', true);"
                );
              }),
              mp.events.add("client:OnSelectCharacterv2", function (e, t) {
                try {
                  if (new Date().getTime() - i < 500)
                    return void mp.events.call(
                      "notify",
                      4,
                      9,
                      "Слишком быстро",
                      3e3
                    );
                  (i = new Date().getTime()),
                    mp.gui.emmit("window.router.close()"),
                    a.g.FadeScreen(!0, 0),
                    mp.events.call("client.charcreate.close"),
                    a.g.localplayer.freezePosition(!1),
                    a.g.setPlayerToGround(),
                    mp.events.callRemote("selectchar", e, t);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/auth",
                    "client:OnSelectCharacterv2",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client:OnCreateCharacterv2", function (e, t, o) {
                try {
                  if (
                    a.g.checkName(t) ||
                    !a.g.checkName2(t) ||
                    t.length > 25 ||
                    t.length <= 2
                  )
                    return void mp.events.call(
                      "notify",
                      1,
                      9,
                      "Правильный формат имени: 3-25 символов и первая буква имени заглавная",
                      3e3
                    );
                  if (
                    a.g.checkName(o) ||
                    !a.g.checkName2(o) ||
                    o.length > 25 ||
                    o.length <= 2
                  )
                    return void mp.events.call(
                      "notify",
                      1,
                      9,
                      "Правильный формат фамилии: 3-25 символов и первая буква фамилии заглавная",
                      3e3
                    );
                  if (new Date().getTime() - i < 500)
                    return void mp.events.call(
                      "notify",
                      4,
                      9,
                      "Слишком быстро",
                      3e3
                    );
                  (i = new Date().getTime()),
                    mp.events.callRemote("newchar", e, t, o);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/auth",
                    "client:OnCreateCharacterv2",
                    e.toString()
                  );
                }
              }),
              mp.events.add("buyNewSlot", function (e) {
                try {
                  if (new Date().getTime() - i < 500)
                    return void mp.events.call(
                      "notify",
                      4,
                      9,
                      "Слишком быстро",
                      3e3
                    );
                  (i = new Date().getTime()),
                    mp.events.callRemote("server.buySlots", Number(e));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/auth",
                    "buyNewSlot",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.char.delete", function (e) {
                mp.events.callRemote("server.character.delete", e);
              }),
              mp.events.add("client.character.canceldelete", function (e) {
                mp.gui.emmit(`window.accountStore.deleteCharacter(${e}, "-")`);
              }),
              mp.events.add("client.character.delete", function (e, t) {
                mp.gui.emmit(`window.accountStore.deleteCharacter(${e}, ${t})`);
              }),
              mp.events.add("client.character.deleteSuccess", function (e) {
                mp.gui.emmit(
                  `window.accountStore.deleteSuccessCharacter(${e})`
                );
              }),
              mp.events.add("client.character.accountIsSession", function (e) {
                mp.gui.emmit(`window.accountStore.accountIsSession(${e})`);
              }),
              mp.events.add("authtext", (e, t) => {
                mp.gui.emmit(
                  `window.events.callEvent("cef.authentication.text", '${t}')`
                ),
                  1 == e && mp.events.callRemote("kickclient");
              }),
              mp.events.add("unlockSlot", function (e) {
                mp.gui.emmit(`window.accountStore.unlockSlots(${e})`);
              });
            let n = -1;
            mp.events.add(a.g.renderName["2.5ms"], () => {
              a.g.loggedin &&
                n !== a.g.localplayer.model &&
                ((n = a.g.localplayer.model),
                a.g.localplayer.setConfigFlag(429, !0));
            }),
              mp.events.add("ready", async function (e = !0) {
                try {
                  (a.g.loggedin = !0),
                    a.g.menuClose(),
                    mp.events.call("showHUD", !0),
                    mp.gui.emmit(
                      `window.serverStore.serverPlayerId (${a.g.localplayer.remoteId})`
                    ),
                    a.g.localplayer.setInvincible(!1),
                    a.g.localplayer.setVisible(!0, !1),
                    a.g.SetWalkStyle(a.g.localplayer, null),
                    a.g.SetFacialClipset(a.g.localplayer, null),
                    a.g.setPlayerToGround(),
                    await a.g.wait(500),
                    a.g.FadeScreen(!1, 2500),
                    mp.gui.emmit("window.router.setHud()"),
                    a.g.setPlayerToGround(),
                    await a.g.wait(500),
                    !a.g.isNewChar &&
                      e &&
                      mp.events.callRemote("server.everydayaward.open", !0);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/auth",
                    "ready",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.merger.auntification", function (e, t) {
                try {
                  if (new Date().getTime() - o < 3e3)
                    return (
                      mp.gui.emmit(
                        'window.events.callEvent("cef.merger.progress", -2)'
                      ),
                      void mp.events.call("notify", 4, 9, "Слишком быстро", 3e3)
                    );
                  (o = new Date().getTime()),
                    mp.events.callRemote("server.merger.auntification", e, t);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/auth",
                    "client.merger.auntification",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.merger.progress", function (e) {
                999 === e
                  ? (a.g.FadeScreen(!0, 0),
                    mp.events.call("client.charcreate.close", !0),
                    mp.gui.emmit(
                      'events.callEvent("cef.authentication.setView", "Start")'
                    ))
                  : mp.gui.emmit(
                      `window.events.callEvent("cef.merger.progress", ${e})`
                    );
              }),
              mp.events.add("client.session.save", function () {
                mp.events.callRemote("server.session.save");
              }),
              mp.events.add("client.session.del", function () {
                mp.events.callRemote("server.session.del");
              }),
              mp.events.add("client.email.confirm", function (e) {
                a.g.isInvalidEmail(e)
                  ? mp.events.call(
                      "notify",
                      1,
                      9,
                      "Электронная почта не соответствует формату!",
                      3e3
                    )
                  : mp.events.callRemote("server.email.confirm", e);
              });
          },
          9667: (e, t, a) => {
            mp.events.add("mavrshop", (e) => {
              let t = JSON.parse(e);
              a.g.openSM(2, JSON.stringify(t));
            }),
              mp.events.add("gangmis", () => {
                a.g.openSM(
                  8,
                  JSON.stringify([
                    "Угон автотранспорта",
                    "Перевозка автотранспорта",
                  ])
                );
              }),
              mp.events.add("mafiamis", () => {
                a.g.openSM(
                  9,
                  JSON.stringify([
                    "Перевозка оружия",
                    "Перевозка денег",
                    "Перевозка трупов",
                  ])
                );
              }),
              mp.events.add("bikermis", () => {
                a.g.openSM(
                  10,
                  JSON.stringify([
                    "Перевозка оружия",
                    "Перевозка денег",
                    "Перевозка трупов",
                  ])
                );
              }),
              mp.events.add("shop", (e) => {
                let t = JSON.parse(e);
                a.g.openSM(1, JSON.stringify(t));
              });
          },
          5753: (e, t, a) => {
            var o = [];
            a.g.localplayer.setVisible(!0, !1),
              mp.events.add("payday", (e, t, o) => {
                mp.events.call("client.charStore.EXP", e),
                  mp.events.call("client.charStore.LVL", t),
                  mp.gui.emmit("window.updateLevel()"),
                  o > 0 &&
                    !a.g.menuCheck() &&
                    mp.gui.emmit(`window.PayDay(${o})`);
              }),
              mp.events.add("pedStreamIn", function (e) {
                try {
                  if (!e) return;
                  e.taskLookAt(a.g.localplayer.handle, -1, 2048, 3),
                    1 == e.PedId &&
                      e.getModel() == mp.game.joaat("s_f_y_ranger_01") &&
                      e.taskPlayAnim(
                        "anim@mp_player_intuppersalute",
                        "idle_a",
                        8,
                        1,
                        -1,
                        49,
                        0,
                        !1,
                        !1,
                        !1
                      );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/basicsync",
                    "pedStreamIn",
                    e.toString()
                  );
                }
              }),
              mp.events.add("setVehiclesWanted", function (e) {
                o[e] = !0;
              }),
              mp.events.add("clearVehicleWanted", function (e) {
                void 0 !== o[e] && delete o[e];
              });
            const i = mp.game.joaat("PLAYER"),
              n = mp.game.joaat("FRIENDLY_PLAYER"),
              s = mp.game.joaat("NON_FRIENDLY_PLAYER");
            a.g.localplayer.setRelationshipGroupHash(i),
              mp.game.ped.addRelationshipGroup("FRIENDLY_PLAYER", 0),
              mp.game.ped.addRelationshipGroup("NON_FRIENDLY_PLAYER", 0),
              mp.game.ped.setRelationshipBetweenGroups(0, i, s),
              mp.game.ped.setRelationshipBetweenGroups(5, i, n),
              mp.game.ped.setRelationshipBetweenGroups(5, n, i),
              (a.g.dmgdisabled = !1),
              mp.events.add("disabledmg", function (e, t) {
                try {
                  void 0 !== e &&
                    null != e &&
                    (a.g.localplayer == e
                      ? ((a.g.dmgdisabled = t),
                        t
                          ? mp.players.forEachInStreamRange((e) => {
                              e != a.g.localplayer &&
                                e.setRelationshipGroupHash(s);
                            })
                          : mp.players.forEachInStreamRange((e) => {
                              e != a.g.localplayer &&
                                e.setRelationshipGroupHash(n);
                            }))
                      : t
                      ? mp.players.forEachInStreamRange((t) => {
                          t == e && t.setRelationshipGroupHash(s);
                        })
                      : mp.players.forEachInStreamRange((t) => {
                          t == e && t.setRelationshipGroupHash(n);
                        }));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/basicsync",
                    "disabledmg",
                    e.toString()
                  );
                }
              }),
              (a.g.playersBlips = {}),
              mp.events.add("playerStreamIn", function (e) {
                try {
                  if (!e) return;
                  e.DMGDisable
                    ? e.setRelationshipGroupHash(s)
                    : e.setRelationshipGroupHash(n),
                    e.INVISIBLE
                      ? (e.setVisible(!1, !1), e.setAlpha(0))
                      : e.REDNAME
                      ? e.setAlpha(100)
                      : e.setAlpha(255),
                    ((0 != a.g.fractionId && a.g.fractionId == e.fraction) ||
                      (0 != a.g.organizationId &&
                        a.g.organizationId == e.organization)) &&
                      (e.ALVL ||
                        (void 0 !== a.g.playersBlips &&
                          void 0 !== a.g.playersBlips[e.remoteId] &&
                          (Natives.REMOVE_BLIP(a.g.playersBlips[e.remoteId]),
                          (a.g.playersBlips[e.remoteId] = void 0)),
                        (a.g.playersBlips[e.remoteId] =
                          Natives.ADD_BLIP_FOR_ENTITY(e.handle)),
                        a.g.playersBlips[e.remoteId] &&
                          (e.InDeath
                            ? Natives.SET_BLIP_COLOUR(
                                a.g.playersBlips[e.remoteId],
                                70
                              )
                            : e.leader
                            ? Natives.SET_BLIP_COLOUR(
                                a.g.playersBlips[e.remoteId],
                                1
                              )
                            : a.g.fractionId == e.fraction
                            ? Natives.SET_BLIP_COLOUR(
                                a.g.playersBlips[e.remoteId],
                                0
                              )
                            : Natives.SET_BLIP_COLOUR(
                                a.g.playersBlips[e.remoteId],
                                18
                              ),
                          Natives.SET_BLIP_CATEGORY(
                            a.g.playersBlips[e.remoteId],
                            7
                          ),
                          Natives.SHOW_HEADING_INDICATOR_ON_BLIP(
                            a.g.playersBlips[e.remoteId],
                            !0
                          ))));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/basicsync",
                    "playerStreamIn",
                    e.toString()
                  );
                }
              }),
              mp.events.add("playerStreamOut", function (e) {
                try {
                  e &&
                    void 0 !== a.g.playersBlips &&
                    void 0 !== a.g.playersBlips[e.remoteId] &&
                    (Natives.REMOVE_BLIP(a.g.playersBlips[e.remoteId]),
                    (a.g.playersBlips[e.remoteId] = void 0));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/basicsync",
                    "playerStreamOut",
                    e.toString()
                  );
                }
              }),
              mp.events.add("vehicleStreamIn", function (e) {
                try {
                  if (!e) return;
                  if ([7, 9].includes(a.g.fractionId)) {
                    var t = a.g.localplayer.vehicle;
                    if (
                      t &&
                      t.getPedInSeat(-1) == a.g.localplayer.handle &&
                      18 == t.getClass()
                    ) {
                      var i = Natives.GET_VEHICLE_NUMBER_PLATE_TEXT(
                        e.handle
                      ).replace(/\s+/g, "");
                      void 0 !== o[i] &&
                        mp.events.call(
                          "notify",
                          3,
                          9,
                          "Транспортное средство с номерами " +
                            i +
                            " было замечено неподалёку!",
                          3e3
                        );
                    }
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/basicsync",
                    "vehicleStreamIn",
                    e.toString()
                  );
                }
              });
          },
          8172: (e, t, a) => {
            (a.g.BinderStatus = !1), (a.g.indexUpdate = -1);
            const o = "all",
              i = "onFoot",
              n = "inVehicle",
              s = "exception",
              r = "all",
              l = "admin",
              m = "user",
              c = "fraction",
              p = "all",
              g = "vehicle",
              _ = "fast",
              d = "fraction",
              h = "other",
              u = "admin";
            (a.g.userBinder = [
              {
                title: "FlyCam",
                keyCode: a.g.Keys.VK_F8,
                keyCodeDefault: a.g.Keys.VK_F8,
                function: "noclip",
                type: o,
                group: l,
                menu: u,
              },
              {
                title: "ESP",
                keyCode: a.g.Keys.VK_F12,
                keyCodeDefault: a.g.Keys.VK_F12,
                function: "esp",
                type: o,
                group: l,
                menu: u,
              },
              {
                title: "Телепорт по WayPoint",
                keyCode: a.g.Keys.VK_F4,
                keyCodeDefault: a.g.Keys.VK_F4,
                function: "markerteleport",
                type: o,
                group: l,
                menu: u,
              },
              {
                title: "Рабочее пространство",
                keyCode: a.g.Keys.VK_F7,
                keyCodeDefault: a.g.Keys.VK_F7,
                function: "open_Table",
                type: o,
                group: m,
                menu: d,
              },
              {
                title: "Бортовой компьютер полиции",
                keyCode: a.g.Keys.VK_U,
                keyCodeDefault: a.g.Keys.VK_U,
                function: "o_policepc",
                type: n,
                group: c,
                menu: d,
              },
              {
                keyCode: a.g.Keys.VK_ESCAPE,
                keyCodeDefault: a.g.Keys.VK_ESCAPE,
                function: "c_policepc",
                trigges: !1,
                type: o,
                group: r,
                menu: p,
              },
              {
                title: "Принятие предложений",
                keyCode: a.g.Keys.VK_Y,
                keyCodeDefault: a.g.Keys.VK_Y,
                function: "acceptPressed",
                type: o,
                group: m,
                menu: p,
              },
              {
                title: "Отклонение предложений",
                keyCode: a.g.Keys.VK_N,
                keyCodeDefault: a.g.Keys.VK_N,
                function: "cancelPressed",
                type: o,
                group: m,
                menu: p,
              },
              {
                title: "Анимации",
                keyCode: a.g.Keys.VK_U,
                keyCodeDefault: a.g.Keys.VK_U,
                function: "o_animation",
                type: i,
                group: m,
                menu: p,
              },
              {
                title: "Взаимодействие",
                keyCode: a.g.Keys.VK_E,
                keyCodeDefault: a.g.Keys.VK_E,
                function: "interactionPressed",
                type: o,
                group: m,
                menu: h,
              },
              {
                title: "Надеть наручники/стяжки",
                keyCode: a.g.Keys.VK_X,
                keyCodeDefault: a.g.Keys.VK_X,
                function: "playerPressCuffBut",
                type: o,
                group: c,
                menu: d,
              },
              {
                title: "Вести за собой",
                keyCode: a.g.Keys.VK_Z,
                keyCodeDefault: a.g.Keys.VK_Z,
                function: "playerPressFollowBut",
                type: o,
                group: c,
                menu: d,
              },
              {
                title: "Инвентарь",
                keyCode: a.g.Keys.VK_I,
                keyCodeDefault: a.g.Keys.VK_I,
                function: "GameMenuOpen",
                type: o,
                group: m,
                menu: p,
              },
              {},
              {
                title: "Перезарядка оружия",
                keyCode: a.g.Keys.VK_R,
                keyCodeDefault: a.g.Keys.VK_R,
                function: "playerReload",
                type: o,
                group: m,
                menu: p,
              },
              {
                title: "Быстрый доступ (Слот 1)",
                keyCode: a.g.Keys.VK_1,
                keyCodeDefault: a.g.Keys.VK_1,
                function: "changeweap_1",
                type: o,
                group: m,
                menu: _,
              },
              {
                title: "Быстрый доступ (Слот 2)",
                keyCode: a.g.Keys.VK_2,
                keyCodeDefault: a.g.Keys.VK_2,
                function: "changeweap_2",
                type: o,
                group: m,
                menu: _,
              },
              {
                title: "Быстрый доступ (Слот 3)",
                keyCode: a.g.Keys.VK_3,
                keyCodeDefault: a.g.Keys.VK_3,
                function: "changeweap_3",
                type: o,
                group: m,
                menu: _,
              },
              {
                title: "Быстрый доступ (Слот 4)",
                keyCode: a.g.Keys.VK_4,
                keyCodeDefault: a.g.Keys.VK_4,
                function: "changeweap_4",
                type: o,
                group: m,
                menu: _,
              },
              {
                title: "Чат",
                keyCode: a.g.Keys.VK_T,
                keyCodeDefault: a.g.Keys.VK_T,
                function: "o_chat",
                type: o,
                group: m,
                menu: p,
              },
              {
                keyCode: a.g.Keys.VK_ESCAPE,
                keyCodeDefault: a.g.Keys.VK_ESCAPE,
                function: "c_chat",
                trigges: !1,
                type: o,
                group: r,
                menu: p,
              },
              {
                title: "Меню доната",
                keyCode: a.g.Keys.VK_F9,
                keyCodeDefault: a.g.Keys.VK_F9,
                function: "o_donate",
                type: o,
                group: m,
                menu: h,
              },
              {},
              {
                keyCode: a.g.Keys.VK_ESCAPE,
                keyCodeDefault: a.g.Keys.VK_ESCAPE,
                function: "gamemenu",
                trigges: !1,
                type: o,
                group: r,
                menu: p,
              },
              {
                title: "Отображание имён",
                keyCode: a.g.Keys.VK_5,
                keyCodeDefault: a.g.Keys.VK_5,
                function: "showGamertags",
                type: o,
                group: m,
                menu: h,
              },
              {
                title: "Меню помощи",
                keyCode: a.g.Keys.VK_F10,
                keyCodeDefault: a.g.Keys.VK_F10,
                function: "o_help",
                type: o,
                group: m,
                menu: h,
              },
              {
                keyCode: a.g.Keys.VK_ESCAPE,
                keyCodeDefault: a.g.Keys.VK_ESCAPE,
                function: "c_help",
                trigges: !1,
                type: o,
                group: r,
                menu: p,
              },
              {
                title: "Состояние HUD",
                keyCode: a.g.Keys.VK_F5,
                keyCodeDefault: a.g.Keys.VK_F5,
                function: "o_hud",
                type: o,
                group: m,
                menu: h,
              },
              {
                title: "Круиз контроль",
                keyCode: a.g.Keys.VK_6,
                keyCodeDefault: a.g.Keys.VK_6,
                function: "cruise",
                type: o,
                group: m,
                menu: g,
              },
              {
                keyCode: a.g.Keys.VK_ESCAPE,
                keyCodeDefault: a.g.Keys.VK_ESCAPE,
                function: "jobselectorOpened",
                trigges: !1,
                type: o,
                group: r,
                menu: p,
              },
              {
                title: "Телефон",
                keyCode: a.g.Keys.VK_M,
                keyCodeDefault: a.g.Keys.VK_M,
                function: "openPlayerMenu",
                type: o,
                group: m,
                menu: p,
              },
              {
                title: "Взаимодействие с игроками",
                keyCode: a.g.Keys.VK_G,
                keyCodeDefault: a.g.Keys.VK_G,
                function: "openCircleMenu",
                type: o,
                group: m,
                menu: p,
              },
              {
                title: "Взаимодействие с предметами",
                keyCode: a.g.Keys.VK_F2,
                keyCodeDefault: a.g.Keys.VK_F2,
                function: "dropObject",
                type: o,
                group: m,
                menu: p,
              },
              {
                title: "Меню репортов",
                keyCode: a.g.Keys.VK_F6,
                keyCodeDefault: a.g.Keys.VK_F6,
                function: "o_reports",
                type: o,
                group: l,
                menu: u,
              },
              {
                title: "Присесть",
                keyCode: 0,
                keyCodeDefault: 0,
                function: "SitWalkSyle",
                type: i,
                group: m,
                menu: _,
              },
              {
                keyCode: a.g.Keys.VK_ESCAPE,
                keyCodeDefault: a.g.Keys.VK_ESCAPE,
                function: "c_weaponshop",
                trigges: !1,
                type: o,
                group: r,
                menu: u,
              },
              {
                title: "Микрофон",
                keyCode: a.g.Keys.VK_N,
                keyCodeDefault: a.g.Keys.VK_N,
                function: "enableVoice",
                type: s,
                group: m,
                binding: "voice",
                menu: p,
              },
              {
                keyCode: a.g.Keys.VK_N,
                keyCodeDefault: a.g.Keys.VK_N,
                function: "disableVoice",
                type: s,
                group: r,
                trigges: !1,
                binding: "voice",
                menu: p,
              },
              {
                title: "Двигатель транспорта",
                keyCode: a.g.Keys.VK_B,
                keyCodeDefault: a.g.Keys.VK_B,
                function: "engineCarPressed",
                type: n,
                group: m,
                menu: g,
              },
              {
                title: "Закрыть/открыть транспорт",
                keyCode: a.g.Keys.VK_L,
                keyCodeDefault: a.g.Keys.VK_L,
                function: "lockCarPressed",
                type: o,
                group: m,
                menu: p,
              },
              {
                title: "Левый поворотник",
                keyCode: a.g.Keys.VK_LEFT,
                keyCodeDefault: a.g.Keys.VK_LEFT,
                function: "lightleft",
                type: n,
                group: m,
                menu: g,
              },
              {
                title: "Правый поворотник",
                keyCode: a.g.Keys.VK_RIGHT,
                keyCodeDefault: a.g.Keys.VK_RIGHT,
                function: "lightright",
                type: n,
                group: m,
                menu: g,
              },
              {
                title: "Аварийная сигнализация",
                keyCode: a.g.Keys.VK_DOWN,
                keyCodeDefault: a.g.Keys.VK_DOWN,
                function: "signaling",
                type: n,
                group: m,
                menu: g,
              },
              {
                title: "Меню биндера",
                keyCode: a.g.Keys.VK_TAB,
                keyCodeDefault: a.g.Keys.VK_TAB,
                function: "openBinder",
                type: o,
                group: m,
                menu: h,
              },
              {
                keyCode: a.g.Keys.VK_ESCAPE,
                keyCodeDefault: a.g.Keys.VK_ESCAPE,
                function: "c_globalEscape",
                trigges: !1,
                type: o,
                group: r,
                menu: p,
              },
              {
                title: "Указать пальцем",
                keyCode: 0,
                keyCodeDefault: 0,
                function: "down_fingerpointing",
                type: i,
                group: m,
                binding: "fingerpointing",
                menu: p,
              },
              {
                keyCode: 0,
                keyCodeDefault: 0,
                function: "up_fingerpointing",
                type: i,
                group: r,
                trigges: !1,
                binding: "fingerpointing",
                menu: p,
              },
              {
                title: "Перезагрузить микрофон",
                keyCode: 0,
                keyCodeDefault: 0,
                function: "voiceReload",
                type: o,
                group: m,
                menu: p,
              },
              {
                title: "Быстрый доступ (Слот 5)",
                keyCode: 0,
                keyCodeDefault: 0,
                function: "changeweap_5",
                type: o,
                group: m,
                menu: _,
              },
              {
                title: "Удаление уведомления",
                keyCode: 0,
                keyCodeDefault: 0,
                function: "dellNotification",
                type: o,
                group: m,
                menu: p,
              },
              {
                title: "Рация",
                keyCode: 0,
                keyCodeDefault: 0,
                function: "enableRadioVoice",
                type: s,
                group: m,
                binding: "radio",
                menu: p,
              },
              {
                keyCode: 0,
                keyCodeDefault: 0,
                function: "disableRadioVoice",
                type: s,
                group: r,
                trigges: !1,
                binding: "radio",
                menu: p,
              },
              {
                title: "Достать/убрать рацию",
                keyCode: 0,
                keyCodeDefault: 0,
                function: "takeWalkieTalkie",
                type: o,
                group: m,
                menu: p,
              },
              {
                title: "Пристегнуть/отстегнуть ремень безопасности",
                keyCode: 0,
                keyCodeDefault: 0,
                function: "onBelt",
                type: n,
                group: m,
                menu: g,
              },
              {
                title: "Включить/отключить автопилот",
                keyCode: 0,
                keyCodeDefault: 0,
                function: "onAutoPilot",
                type: n,
                group: m,
                menu: g,
              },
              {
                title: "Открыть взаимодействие с животным",
                keyCode: 0,
                keyCodeDefault: 0,
                function: "onAnimal",
                type: o,
                group: m,
                menu: p,
              },
              {
                title: "Отменить анимацию",
                keyCode: 0,
                keyCodeDefault: 0,
                function: "",
                type: i,
                group: m,
                menu: p,
              },
              {
                title: "Передать метку водителю",
                keyCode: 0,
                keyCodeDefault: 0,
                function: "onSendWaypoint",
                type: n,
                group: m,
                menu: g,
              },
              {
                title: "Включить/отключить сирену",
                keyCode: 0,
                keyCodeDefault: 0,
                function: "onSirenSync",
                type: n,
                group: m,
                menu: g,
              },
              {
                title: "Отправить репорт",
                keyCode: 0,
                keyCodeDefault: 0,
                function: "openReportInput",
                type: o,
                group: m,
                menu: p,
              },
            ]),
              mp.events.add("escape", () => {
                a.g.binderFunctions.c_globalEscape();
              }),
              (a.g.binderFunctions.openReportInput = () => {
                mp.events.call(
                  "openInput",
                  "Репорт",
                  "Введите ваше сообщение",
                  150,
                  "sendReportFromClientInput"
                );
              }),
              (a.g.binderFunctions.c_globalEscape = (e = !1) => {
                a.g.circleOpen && a.g.CloseCircle(!0),
                  a.g.reportactive && a.g.binderFunctions.c_reports(),
                  a.g.BinderStatus && b(),
                  a.g.CloseDocs(),
                  a.g.binderFunctions.blackjackExit(),
                  a.g.binderFunctions.spinExit(),
                  a.g.binderFunctions.horseExit(),
                  a.g.binderFunctions.rouletteExit(),
                  a.g.closeFractionTableMenu(),
                  a.g.binderFunctions.с_animation(),
                  a.g.binderFunctions.closeWedding(),
                  mp.events.call("closeWalkieTalkieMenu"),
                  mp.events.call("client.closedonatesite"),
                  mp.events.call("client.petshop.close"),
                  mp.events.call("client.advert.close"),
                  a.g.binderFunctions.GameMenuClose(),
                  e && mp.events.call("client.battlepass.close");
              });
            let y = {},
              v = new (class {
                open(e) {
                  let t = [];
                  return (
                    a.g.userBinder.forEach((o, i) => {
                      e === o.menu &&
                        o.group !== r &&
                        (t = [
                          ...t,
                          {
                            title: o.title,
                            name: a.g.Keys[o.keyCode],
                            index: i,
                          },
                        ]);
                    }),
                    t
                  );
                }
                bind() {
                  let e = {};
                  return (
                    a.g.userBinder.forEach((t, a) => {
                      t.group !== r &&
                        (e[t.keyCode] = e[t.keyCode]
                          ? `${e[t.keyCode]}, ${t.title}`
                          : t.title);
                    }),
                    e
                  );
                }
                getIsBinder(e) {
                  return e === o || e === s
                    ? 1
                    : e !== i || a.g.localplayer.isInAnyVehicle(!1)
                    ? e === n && a.g.localplayer.isInAnyVehicle(!1)
                      ? 1
                      : 0
                    : 1;
                }
                getControllBind(e, t) {
                  if (a.g.loggedin)
                    if (
                      ((a.g.afkSecondsCount = 0),
                      mp.events.call("updateAFKStatus_client", !1),
                      -1 !== a.g.indexUpdate)
                    ) {
                      const t = a.g.indexUpdate;
                      mp.gui.emmit("window.binder.index();"),
                        (a.g.indexUpdate = -1);
                      let l = !0;
                      const m = a.g.userBinder[t];
                      if (parseInt(e) === parseInt(m.keyCode)) {
                        if (43 == t)
                          return void mp.events.call(
                            "notify",
                            4,
                            9,
                            "Невозможно снять привязку с меню биндера",
                            3e3
                          );
                        S.destroy(e, t),
                          (a.g.userBinder[t].keyCode = 0),
                          a.g.BinderStatus &&
                            m.group !== r &&
                            (mp.gui.emmit(
                              `window.binder.updateData(${t}, '${a.g.Keys[0]}')`
                            ),
                            mp.gui.emmit(
                              `window.binder.setBindData('${JSON.stringify(
                                v.bind()
                              )}');`
                            )),
                          w(t),
                          y[t] &&
                            y[t].length &&
                            a.g.userBinder[t].binding &&
                            y[t].forEach((e) => {
                              e === t ||
                                a.g.userBinder[t].binding !==
                                  a.g.userBinder[e].binding ||
                                S.destroy(t, e);
                            }),
                          mp.events.callRemote("bindConfigSave", t, 0);
                      } else
                        m.type !== s &&
                          a.g.userBinder.forEach((t) =>
                            !l ||
                            parseInt(e) !== parseInt(t.keyCode) ||
                            (t.type !== o && m.type !== o)
                              ? (l &&
                                  parseInt(e) === parseInt(t.keyCode) &&
                                  t.type === i &&
                                  m.type === i) ||
                                (l &&
                                  parseInt(e) === parseInt(t.keyCode) &&
                                  t.type === n &&
                                  m.type === n)
                                ? ((l = !1),
                                  void mp.events.call(
                                    "notify",
                                    4,
                                    9,
                                    "Данная клавиша уже занята",
                                    3e3
                                  ))
                                : void 0
                              : ((l = !1),
                                void mp.events.call(
                                  "notify",
                                  4,
                                  9,
                                  "Данная клавиша уже занята",
                                  3e3
                                ))
                          ),
                          l &&
                            (S.update(e, t),
                            mp.events.callRemote("bindConfigSave", t, e));
                    } else
                      y[e] &&
                        y[e].length &&
                        y[e].forEach((e) => {
                          this.getIsBinder(a.g.userBinder[e].type) &&
                            ((void 0 === a.g.userBinder[e].trigges &&
                              !0 === t) ||
                              (void 0 !== a.g.userBinder[e].trigges &&
                                t === a.g.userBinder[e].trigges)) &&
                            a.g.binderFunctions[a.g.userBinder[e].function] &&
                            a.g.binderFunctions[a.g.userBinder[e].function]();
                        });
                }
              })(),
              f = {};
            const w = (e) => {
              mp.gui.emmit(
                `window.keysStore.updateName (${e}, ${a.g.userBinder[e].keyCode})`
              );
            };
            mp.events.add("client:OnBrowserInit", () => {
              a.g.userBinder.forEach((e, t) => {
                mp.gui.emmit(
                  `window.keysStore.updateName (${t}, ${e.keyCode})`
                );
              });
            });
            let S = new (class {
              update(e, t, o = !1) {
                const i = parseInt(a.g.userBinder[t].keyCode);
                this.destroy(i, t),
                  this.create(e, t, o),
                  w(t),
                  y[i] &&
                    y[i].length &&
                    a.g.userBinder[t].binding &&
                    y[i].forEach((o) => {
                      if (
                        o !== t &&
                        a.g.userBinder[t].binding === a.g.userBinder[o].binding
                      )
                        return this.destroy(i, o), void this.create(e, o);
                    });
              }
              create(e, t, o) {
                (e = parseInt(e)),
                  (a.g.userBinder[t].keyCode = e),
                  a.g.BinderStatus &&
                    a.g.userBinder[t].group !== r &&
                    !o &&
                    (mp.gui.emmit(
                      `window.binder.updateData(${t}, '${a.g.Keys[e]}')`
                    ),
                    mp.gui.emmit(
                      `window.binder.setBindData('${JSON.stringify(
                        v.bind()
                      )}');`
                    )),
                  (f[
                    `${e}_${
                      void 0 === a.g.userBinder[t].trigges ||
                      a.g.userBinder[t].trigges
                    }`
                  ] &&
                    void 0 !==
                      f[
                        `${e}_${
                          void 0 === a.g.userBinder[t].trigges ||
                          a.g.userBinder[t].trigges
                        }`
                      ]) ||
                    ((f[
                      `${e}_${
                        void 0 === a.g.userBinder[t].trigges ||
                        a.g.userBinder[t].trigges
                      }`
                    ] = !0),
                    mp.keys.bind(
                      e,
                      void 0 === a.g.userBinder[t].trigges ||
                        a.g.userBinder[t].trigges,
                      () => v.getControllBind(e, a.g.userBinder[t].trigges)
                    )),
                  (y[e] && -1 !== y[e].indexOf(t)) ||
                    (y[e] || (y[e] = []), y[e].push(t));
              }
              destroy(e, t) {
                if (((e = parseInt(e)), y[e])) {
                  const a = y[e].indexOf(t);
                  -1 !== a && y[e].splice(a, 1);
                }
              }
            })();
            [
              27, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 145,
              19, 192, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 189, 187, 8, 45,
              36, 33, 144, 111, 106, 109, 144, 9, 81, 69, 82, 84, 89, 85, 73,
              79, 219, 221, 220, 46, 35, 34, 36, 38, 33, 107, 20, 71, 72, 74,
              75, 76, 186, 222, 13, 37, 12, 39, 16, 90, 88, 67, 86, 66, 78, 77,
              188, 190, 191, 16, 35, 40, 34, 13, 17, 18, 18, 93, 17, 37, 40, 39,
              45, 46, 38,
            ].forEach((e) => {
              (f[`${e}_true`] && void 0 !== f[`${e}_true`]) ||
                ((f[`${e}_true`] = !0),
                mp.keys.bind(e, !0, () => v.getControllBind(e, !0)),
                mp.keys.bind(e, !1, () => v.getControllBind(e, !1)));
            }),
              a.g.userBinder.forEach((e, t) => {
                S.create(e.keyCode, t);
              }),
              (a.g.binderFunctions.openBinder = () => {
                a.g.BinderStatus ? b() : M();
              });
            const M = () => {
                a.g.menuCheck() ||
                  a.g.BinderStatus ||
                  (mp.gui.emmit('window.router.setView("PlayerBinder");'),
                  setTimeout(() => {
                    mp.gui.emmit(
                      `window.binder.setBindData('${JSON.stringify(
                        v.bind()
                      )}');`
                    ),
                      mp.gui.emmit(
                        `window.binder.setData('${JSON.stringify(v.open(p))}');`
                      );
                  }, 50),
                  (a.g.BinderStatus = !0),
                  a.g.menuOpen());
              },
              b = () => {
                mp.gui.emmit("window.router.setHud();"),
                  (a.g.BinderStatus = !1),
                  a.g.menuClose();
              };
            mp.events.add("loadBindConfig", (e) => {
              try {
                let t;
                for (t in (e = JSON.parse(e)))
                  e[t] &&
                    a.g.userBinder[Number(t)] &&
                    S.update(Number(e[t]), Number(t));
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/bind",
                  "loadBindConfig",
                  e.toString()
                );
              }
            }),
              mp.events.add("client:binder", (e, t, o) => {
                "update" === e
                  ? (a.g.indexUpdate = Number(t))
                  : "get" === e
                  ? mp.gui.emmit(
                      `window.binder.setData('${JSON.stringify(v.open(t))}');`
                    )
                  : "refresh" === e
                  ? (a.g.userBinder.forEach((e, t) => {
                      S.update(e.keyCodeDefault, t, !0);
                    }),
                    mp.gui.emmit(
                      `window.binder.setBindData('${JSON.stringify(
                        v.bind()
                      )}');`
                    ),
                    mp.gui.emmit(
                      `window.binder.setData('${JSON.stringify(v.open(t))}');`
                    ),
                    mp.events.callRemote("bindConfigSave", 0, 0))
                  : "close" === e && b();
              }),
              (a.g.isBind = !1),
              mp.events.add("setBindToKey", (e) => {
                a.g.isBind = -1 !== e;
              });
          },
          846: (e, t, a) => {
            a.g.binocularsEnabled = !1;
            let o,
              i,
              n = !1,
              s = 37.5;
            mp.events.add("binoculars.start", async () => {
              try {
                if (n || a.g.binocularsEnabled) return;
                if (a.g.localplayer.vehicle) return;
                (n = !0),
                  await a.g.requestScaleformMovie("BINOCULARS"),
                  (i = new a.g.ScaleFormRacing("BINOCULARS")),
                  (n = !1),
                  (a.g.menuOpened = !0),
                  mp.gui.emmit("window.router.close()"),
                  Natives.SET_TIMECYCLE_MODIFIER("default"),
                  Natives.SET_TIMECYCLE_MODIFIER_STRENGTH(0.3);
                const e = a.g.cameraManager.gameplayCam().getRot(2).z;
                (o = mp.cameras.new(
                  "DEFAULT_SCRIPTED_FLY_CAMERA",
                  a.g.localplayer.position,
                  new mp.Vector3(0, 0, 0),
                  s
                )),
                  o.attachTo(a.g.localplayer.handle, 0.1, 0.35, 0.75, !0),
                  o.setRot(0, 0, e, 2),
                  o.setFov(s),
                  a.g.localplayer.setHeading(e),
                  mp.game.cam.renderScriptCams(!0, !1, 0, !0, !1),
                  i.callFunction("SET_CAM_LOGO", 0),
                  (a.g.binocularsEnabled = !0),
                  mp.discord.update(
                    "Смотрит в бинокль",
                    `на RedAge под ID ${a.g.localplayer.remoteId}`
                  );
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/binoculars",
                  "start",
                  e.toString()
                );
              }
            }),
              mp.events.add("binoculars.stop", () => {
                try {
                  if (!a.g.binocularsEnabled) return;
                  (a.g.binocularsEnabled = !1),
                    (s = 37.5),
                    Natives.CLEAR_TIMECYCLE_MODIFIER(),
                    mp.game.cam.renderScriptCams(!1, !1, 0, !1, !1),
                    i && (i.dispose(), (i = void 0)),
                    o.destroy(),
                    mp.game.graphics.setNightvision(!1),
                    mp.game.graphics.setSeethrough(!1),
                    mp.gui.emmit("window.router.setHud()"),
                    a.g.menuClose();
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/binoculars",
                    "stop",
                    e.toString()
                  );
                }
              }),
              mp.events.add("playerDeath", (e, t, o) => {
                try {
                  if (!a.g.loggedin) return;
                  if (e !== a.g.localplayer) return;
                  if (!a.g.binocularsEnabled) return;
                  mp.events.callRemote("TakeWeapon", 0);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/binoculars",
                    "playerDeath",
                    e.toString()
                  );
                }
              }),
              mp.events.add("render", () => {
                try {
                  if (!a.g.loggedin) return;
                  if (!a.g.binocularsEnabled) return;
                  if (a.g.cuffed || 1 == a.g.isDemorgan)
                    return void mp.events.callRemote("TakeWeapon", 0);
                  if (a.g.localplayer.vehicle)
                    return (
                      (a.g.binocularsEnabled = !1),
                      void mp.events.callRemote("TakeWeapon", 0)
                    );
                  mp.game.controls.disableAllControlActions(0),
                    mp.game.ui.hideHudComponentThisFrame(1),
                    mp.game.ui.hideHudComponentThisFrame(2),
                    mp.game.ui.hideHudComponentThisFrame(3),
                    mp.game.ui.hideHudComponentThisFrame(4),
                    mp.game.ui.hideHudComponentThisFrame(6),
                    mp.game.ui.hideHudComponentThisFrame(7),
                    mp.game.ui.hideHudComponentThisFrame(8),
                    mp.game.ui.hideHudComponentThisFrame(9),
                    mp.game.ui.hideHudComponentThisFrame(13),
                    mp.game.ui.hideHudComponentThisFrame(11),
                    mp.game.ui.hideHudComponentThisFrame(12),
                    mp.game.ui.hideHudComponentThisFrame(15),
                    mp.game.ui.hideHudComponentThisFrame(18),
                    mp.game.ui.hideHudComponentThisFrame(19),
                    r(o, (1 / 65) * (s - 5)),
                    l(o),
                    i.render2D(0.5, 0.5, 1, 1);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/binoculars",
                    "render",
                    e.toString()
                  );
                }
              });
            const r = (e, t) => {
                try {
                  let o = mp.game.controls.getDisabledControlNormal(0, 1),
                    i = mp.game.controls.getDisabledControlNormal(0, 2),
                    n = e.getRot(2);
                  if (0 != o || 0 != i) {
                    const s = n.z + -1 * o * 8 * (t + 0.1),
                      r = a.g.clamp(
                        n.x + -1 * i * 8 * (t + (1439.1 - 1439)),
                        -89.5,
                        89.5
                      );
                    a.g.localplayer.setHeading(s),
                      e.setRot(r, 0, s, 2),
                      a.g.cameraManager.gameplayCam().setRot(r, 0, s, 2);
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/binoculars",
                    "distanceBin",
                    e.toString()
                  );
                }
              },
              l = (e) => {
                try {
                  if (a.g.localplayer.vehicle) {
                    mp.game.controls.isDisabledControlJustPressed(0, 17) &&
                      (s = Math.max(s - 10, 5)),
                      mp.game.controls.isDisabledControlJustPressed(0, 16) &&
                        (s = Math.min(s + 10, 70));
                    const t = e.getFov();
                    Math.abs(s - t) < 0.1 && (s = t),
                      e.setFov(t + 0.05 * (s - t));
                  } else {
                    mp.game.controls.isDisabledControlJustPressed(0, 241) &&
                      (s = Math.max(s - 10, 5)),
                      mp.game.controls.isDisabledControlJustPressed(0, 242) &&
                        (s = Math.min(s + 10, 70));
                    const t = e.getFov();
                    Math.abs(s - t) < 0.1 && (s = t),
                      e.setFov(t + 0.05 * (s - t));
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/binoculars",
                    "setFov",
                    e.toString()
                  );
                }
              };
          },
          8075: (e, t, a) => {
            (a.g.isBSearchActive = !1),
              mp.events.add("bsearch", (e) => {
                switch (e) {
                  case 1:
                    mp.events.callRemote(
                      "pSelected",
                      a.g.entity,
                      "Посмотреть лицензии"
                    );
                    break;
                  case 2:
                    mp.events.callRemote(
                      "pSelected",
                      a.g.entity,
                      "Посмотреть паспорт"
                    );
                    break;
                  default:
                    (a.g.isBSearchActive = !1),
                      a.g.menuClose(),
                      mp.gui.emmit("window.router.setHud();");
                }
              }),
              mp.events.add("bsearchOpen", (e) => {
                a.g.menuCheck() ||
                  (a.g.menuOpen(),
                  (a.g.isBSearchActive = e),
                  mp.gui.emmit(
                    `window.router.setView("FractionsBSearch", ${e});`
                  ));
              });
          },
          7625: (e, t, a) => {
            const o = {
              startedBoomboxMusic: !1,
              isBoomboxOwner: !1,
              boomboxCoords: void 0,
            };
            mp.events.add("setBoomboxInfo", (e, t) => {
              try {
                (o.isBoomboxOwner = e), (o.boomboxCoords = t);
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/boombox",
                  "setBoomboxInfo",
                  e.toString()
                );
              }
            }),
              mp.events.add("playBoomboxMusic", (e) => {
                try {
                  o.startedBoomboxMusic ||
                    ((o.startedBoomboxMusic = !0),
                    mp.events.call(
                      "client.sounds.play2d",
                      e,
                      0.01 * a.g.MaxVolumeBoombox * 1
                    ));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/boombox",
                    "playBoomboxMusic",
                    e.toString()
                  );
                }
              }),
              mp.events.add("stopBoomboxMusic", () => {
                try {
                  !0 === o.startedBoomboxMusic &&
                    (mp.events.call("client.sounds.stop2d"),
                    (o.startedBoomboxMusic = !1));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/boombox",
                    "stopBoomboxMusic",
                    e.toString()
                  );
                }
              });
            let i = 0;
            mp.keys.bind(69, !0, () => {
              a.g.menuCheck() ||
                !o.isBoomboxOwner ||
                void 0 === o.boomboxCoords ||
                mp.game.gameplay.getDistanceBetweenCoords(
                  a.g.localplayer.position.x,
                  a.g.localplayer.position.y,
                  a.g.localplayer.position.z,
                  o.boomboxCoords.x,
                  o.boomboxCoords.y,
                  o.boomboxCoords.z,
                  !0
                ) > 3 ||
                (new Date().getTime() - i >= 1e3 &&
                  (mp.events.callRemote("boomboxManageMenu"),
                  (i = new Date().getTime())));
            });
          },
          3380: (e, t, a) => {
            const o = () => ({
              motherid: 0,
              fatherid: 0,
              shapemix: 0,
              skintone: 0,
              hair: { variation: 0, color: 0 },
              eyebrows: { variation: 0, color: 0, opacity: 0 },
              facialhair: { variation: 0, color: 0, opacity: 0 },
              blemishes: { variation: 0, opacity: 0 },
              ageing: { variation: 0, opacity: 0 },
              complexion: { variation: 0, opacity: 0 },
              molesfreckles: { variation: 0, opacity: 0 },
              sundamage: { variation: 0, opacity: 0 },
              eyescolor: { variation: 0 },
              lipstick: { variation: 0, color: 0, opacity: 0 },
              head: { drawable: 0, texture: 0 },
              tops: { drawable: 0, texture: 0 },
              legs: { drawable: 0, texture: 0 },
              shoes: { drawable: 0, texture: 0 },
              Facesettings: new Array(20).fill(0),
            });
            let i = 0;
            const n = { gender: !1, false: o(), true: o() };
            let s = !1,
              r = new Array(3).fill(n);
            mp.events.add(
              "client.characters.customization.updateIndex",
              (e) => {
                try {
                  if (i === e) return;
                  i = e;
                  const t = g(e);
                  s &&
                    t &&
                    mp.peds.exists(t) &&
                    (a.g.createCamera("char", t),
                    a.g.updateCameraToBone("hat", t, !0, 750));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/character",
                    "updateIndex",
                    e.toString()
                  );
                }
              }
            ),
              mp.events.add(
                "client.characters.customization.updateCam",
                (e) => {
                  try {
                    const t = g(i);
                    t && mp.peds.exists(t) && a.g.updateCameraToBone(e, t);
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/character",
                      "updateIndex",
                      e.toString()
                    );
                  }
                }
              ),
              mp.events.add(
                "client.characters.customization.UpdateGender",
                (e) => {
                  try {
                    v(e), w(e);
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/character",
                      "clUpdateGender",
                      e.toString()
                    );
                  }
                }
              ),
              mp.events.add(
                "client.characters.customization.UpdateParents",
                (e, t, a) => {
                  try {
                    (r[i][e].fatherid = t), (r[i][e].motherid = a), w(e);
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/character",
                      "clUpdateParents",
                      e.toString()
                    );
                  }
                }
              ),
              mp.events.add(
                "client.characters.customization.UpdateShapeMix",
                (e, t) => {
                  try {
                    (r[i][e].shapemix = t), w(e);
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/character",
                      "clUpdateShapeMix",
                      e.toString()
                    );
                  }
                }
              ),
              mp.events.add(
                "client.characters.customization.UpdateSkinTone",
                (e, t) => {
                  try {
                    (r[i][e].skintone = t), w(e);
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/character",
                      "clUpdateSkinTone",
                      e.toString()
                    );
                  }
                }
              ),
              mp.events.add(
                "client.characters.customization.UpdateAppearance",
                (e, t, a, o, i) => {
                  try {
                    S(e, t, a, o, i);
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/character",
                      "clUpdateAppearance",
                      e.toString()
                    );
                  }
                }
              ),
              mp.events.add(
                "client.characters.customization.UpdateCharacteristic",
                (e, t, a, o, i) => {
                  try {
                    b(e, t, a, o, i);
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/character",
                      "clUpdateCharacteristic",
                      e.toString()
                    );
                  }
                }
              ),
              mp.events.add(
                "client.characters.customization.UpdateClothes",
                (e, t, a, o) => {
                  try {
                    T(e, t, a, o);
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/character",
                      "clUpdateClothes",
                      e.toString()
                    );
                  }
                }
              );
            let l = { face: {}, clothes: {}, accessory: {}, charsSlot: [] };
            mp.events.add("initCustomizationCharsData", (e, t, o, i) => {
              try {
                a.g.cameraManager.deleteCamera("authentication"),
                  (l = {
                    face: JSON.parse(e),
                    clothes: JSON.parse(t),
                    accessory: JSON.parse(o),
                    charsSlot: JSON.parse(i),
                  }),
                  mp.events.call("CreatorCamera");
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/character",
                  "CreatorCamera",
                  e.toString()
                );
              }
            }),
              mp.events.add("CreatorCamera", (e = !1) => {
                d(e);
              }),
              new mp.Vector3(-1410.821, -994.527, 19.38);
            const m = [
              [-2635.406, 1894.9324, 157.87411, 51],
              [-2633.8286, 1892.0219, 159.54903, 54],
              [-2632.374, 1894.3527, 160.06157, 95],
              [-2629.908, 1892.279, 160.64325, 74],
              [-2627.1514, 1893.1362, 161.08452, 94],
              [-2626.007, 1890.8905, 161.52815, 71],
              [-2623.83, 1888.7576, 162.07239, 63],
              [-2622.5635, 1891.7043, 162.66278, 63],
              [-2619.404, 1892.1887, 163.1601, 71],
            ];
            let c = [],
              p = null;
            const g = (e = -1) => c[-1 !== e ? e : i],
              _ = [
                {
                  animDictionary: "anim@mp_player_intincarphotographylow@ds@",
                  animationName: "idle_a",
                  flag: 50,
                },
                {
                  animDictionary: "anim@mp_player_intincarrockbodhi@ds@",
                  animationName: "idle_a",
                  flag: 50,
                },
                {
                  animDictionary: "anim@mp_player_intincarsalutebodhi@ds@",
                  animationName: "enter",
                  flag: 50,
                },
                {
                  animDictionary: "anim@mp_player_intincarshushbodhi@ds@ ",
                  animationName: "enter",
                  flag: 50,
                },
                {
                  animDictionary: "clothingtie",
                  animationName: "check_out_a",
                  flag: 49,
                },
                {
                  animDictionary: "friends@frj@ig_1",
                  animationName: "wave_d",
                  flag: 49,
                },
                {
                  animDictionary: "gestures@f@standing@casual",
                  animationName: "gesture_no_way",
                  flag: 49,
                },
                {
                  animDictionary: "gestures@f@standing@casual",
                  animationName: "gesture_nod_no_hard",
                  flag: 49,
                },
                {
                  animDictionary: "gestures@f@standing@casual ",
                  animationName: "gesture_shrug_hard",
                  flag: 49,
                },
                {
                  animDictionary: "gestures@miss@fbi_5",
                  animationName: "fbi5_gesture_sniff",
                  flag: 49,
                },
                {
                  animDictionary: "friends@frj@ig_1",
                  animationName: "wave_c",
                  flag: 49,
                },
                {
                  animDictionary: "friends@frl@ig_1",
                  animationName: "idle_a_lamar",
                  flag: 49,
                },
                {
                  animDictionary: "friends@frl@ig_1",
                  animationName: "waive_a_lamar",
                  flag: 49,
                },
                {
                  animDictionary: "switch@franklin@bed",
                  animationName: "stretch_short",
                  flag: 49,
                },
                {
                  animDictionary: "amb@world_human_cheering@female_d",
                  animationName: "base",
                  flag: 50,
                },
                {
                  animDictionary: "mini@hookers_sp",
                  animationName: "idle_reject_loop_a",
                  flag: 1,
                },
                {
                  animDictionary: "mini@shop@",
                  animationName: "base",
                  flag: 1,
                },
                {
                  animDictionary: "mini@strip_club@idles@bouncer@base",
                  animationName: "base",
                  flag: 1,
                },
                {
                  animDictionary: "mini@strip_club@idles@bouncer@idle_a",
                  animationName: "idle_a",
                  flag: 1,
                },
                {
                  animDictionary: "friends@fra@ig_1",
                  animationName: "impatient_idle_b",
                  flag: 1,
                },
                {
                  animDictionary: "friends@frj@ig_1",
                  animationName: "idle_d",
                  flag: 1,
                },
                {
                  animDictionary: "friends@frl@ig_1",
                  animationName: "idle_c_lamar",
                  flag: 1,
                },
                {
                  animDictionary: "friends@frm@ig_1",
                  animationName: "base_idle",
                  flag: 1,
                },
                {
                  animDictionary: "friends@frt@ig_1",
                  animationName: "trevor_base",
                  flag: 1,
                },
                {
                  animDictionary: "amb@world_human_cop_idles@female@base",
                  animationName: "base",
                  flag: 1,
                },
                {
                  animDictionary: "amb@world_human_drug_dealer_hard@male@base",
                  animationName: "base",
                  flag: 1,
                },
                {
                  animDictionary:
                    "amb@world_human_hang_out_street@female_arm_side@base",
                  animationName: "base",
                  flag: 1,
                },
                {
                  animDictionary:
                    "amb@world_human_hang_out_street@female_arm_side@idle_a",
                  animationName: "idle_a",
                  flag: 1,
                },
                {
                  animDictionary:
                    "amb@world_human_hang_out_street@female_arm_side@idle_a",
                  animationName: "idle_b",
                  flag: 1,
                },
                {
                  animDictionary: "mini@triathlon",
                  animationName: "ig_2_gen_warmup_01",
                  flag: 1,
                },
                {
                  animDictionary: "mini@triathlon",
                  animationName: "ig_2_gen_warmup_04",
                  flag: 1,
                },
                {
                  animDictionary: "missfam5_yoga",
                  animationName: "c3_pose",
                  flag: 1,
                },
                {
                  animDictionary: "anim@amb@business@cfm@cfm_drying_notes@",
                  animationName: "stretch_worker",
                  flag: 1,
                },
                {
                  animDictionary: "rcmepsilonism8",
                  animationName: "security_greet",
                  flag: 1,
                },
                {
                  animDictionary: "random@bicycle_thief@ask_help",
                  animationName: "i_cant_catch_him_on_foot",
                  flag: 1,
                },
                {
                  animDictionary: "random@bicycle_thief@ask_help",
                  animationName: "my_dads_going_to_kill_me",
                  flag: 1,
                },
                {
                  animDictionary: "random@bus_tour_guide@idle_a",
                  animationName: "idle_b",
                  flag: 1,
                },
                {
                  animDictionary: "random@car_thief@agitated@idle_a",
                  animationName: "agitated_idle_b",
                  flag: 1,
                },
                {
                  animDictionary: "random@shop_gunstore",
                  animationName: "_positive_goodbye",
                  flag: 1,
                },
                {
                  animDictionary: "anim@random@shop_clothes@watches",
                  animationName: "base",
                  flag: 1,
                },
              ],
              d = async (e) => {
                try {
                  await a.g.wait(100),
                    a.g.localplayer.setVisible(!1, !1),
                    a.g.localplayer.setAlpha(0),
                    mp.discord.update(
                      "Выбирает персонажа",
                      "Готовясь влететь на RedAge"
                    );
                  const t = a.g.localplayer.dimension;
                  if (
                    ((a.g.localplayer.position = new mp.Vector3(
                      m[0][0],
                      m[0][1],
                      m[0][2]
                    )),
                    await a.g.wait(200),
                    a.g.createCamera("char", a.g.localplayer),
                    (p = mp.objects.new(
                      mp.game.joaat("redagelogo"),
                      new mp.Vector3(-2636.347, 1887.127, 157.8161),
                      {
                        rotation: new mp.Vector3(0, 0, -143.6626),
                        dimension: t,
                      }
                    )),
                    await a.g.requestAnimDict(
                      "amb@world_human_stand_guard@male@base"
                    ),
                    await a.g.loadModel("mp_m_freemode_01"),
                    await a.g.loadModel("mp_f_freemode_01"),
                    e)
                  ) {
                    const o = mp.peds.new(
                      mp.game.joaat("mp_m_freemode_01"),
                      new mp.Vector3(m[0][0], m[0][1], m[0][2]),
                      m[0][3],
                      t
                    );
                    await a.g.IsLoadEntity(o),
                      c.push(o),
                      o.taskPlayAnim(
                        "amb@world_human_stand_guard@male@base",
                        "base",
                        1,
                        1,
                        -1,
                        1,
                        0,
                        !1,
                        !1,
                        !1
                      ),
                      await a.g.wait(100),
                      y(e);
                  } else {
                    for (let e = 0; e < 3; e++)
                      if (l.charsSlot[e] <= -1) {
                        const o = mp.peds.new(
                          mp.game.joaat("mp_m_freemode_01"),
                          new mp.Vector3(m[e][0], m[e][1], m[e][2]),
                          m[e][3],
                          t
                        );
                        await a.g.IsLoadEntity(o),
                          c.push(o),
                          o.taskPlayAnim(
                            "amb@world_human_stand_guard@male@base",
                            "base",
                            1,
                            1,
                            -1,
                            1,
                            0,
                            !1,
                            !1,
                            !1
                          );
                      } else c.push(!1);
                    await a.g.wait(100),
                      mp.gui.emmit("window.initCustomizations ();");
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/character",
                    "StartCharacterCustomization",
                    e.toString()
                  );
                }
              },
              h = async (e, t) => {
                const o = a.g.localplayer.dimension;
                let i = g(e);
                return (
                  i && mp.peds.exists(i) && i.destroy(),
                  (c[e] = mp.peds.new(
                    t
                      ? mp.game.joaat("mp_m_freemode_01")
                      : mp.game.joaat("mp_f_freemode_01"),
                    new mp.Vector3(m[e][0], m[e][1], m[e][2]),
                    m[e][3],
                    o
                  )),
                  await a.g.IsLoadEntity(c[e]),
                  (function (e, t) {
                    try {
                      e.clearProp(0),
                        e.clearProp(1),
                        e.clearProp(2),
                        e.clearProp(6),
                        e.clearProp(7),
                        e.setComponentVariation(
                          1,
                          a.g.clothesEmpty[t][1],
                          0,
                          0
                        ),
                        e.setComponentVariation(
                          3,
                          a.g.clothesEmpty[t][3],
                          0,
                          0
                        ),
                        e.setComponentVariation(
                          4,
                          a.g.clothesEmpty[t][4],
                          0,
                          0
                        ),
                        e.setComponentVariation(
                          5,
                          a.g.clothesEmpty[t][5],
                          0,
                          0
                        ),
                        e.setComponentVariation(
                          6,
                          a.g.clothesEmpty[t][6],
                          0,
                          0
                        ),
                        e.setComponentVariation(
                          7,
                          a.g.clothesEmpty[t][7],
                          0,
                          0
                        ),
                        e.setComponentVariation(
                          8,
                          a.g.clothesEmpty[t][8],
                          0,
                          0
                        ),
                        e.setComponentVariation(
                          9,
                          a.g.clothesEmpty[t][9],
                          0,
                          0
                        ),
                        e.setComponentVariation(
                          10,
                          a.g.clothesEmpty[t][10],
                          0,
                          0
                        ),
                        e.setComponentVariation(
                          11,
                          a.g.clothesEmpty[t][11],
                          0,
                          0
                        );
                    } catch (e) {
                      mp.events.callRemote(
                        "client_trycatch",
                        "player/character",
                        "clearClothes",
                        e.toString()
                      );
                    }
                  })(c[e], t),
                  c[e].taskPlayAnim(
                    "amb@world_human_stand_guard@male@base",
                    "base",
                    1,
                    1,
                    -1,
                    1,
                    0,
                    !1,
                    !1,
                    !1
                  ),
                  !0
                );
              };
            let u = 0;
            mp.events.add("client.characters.initChars", async () => {
              try {
                u = 0;
                for (let e in l.face)
                  if (l.face[e]) {
                    const t = l.face[e];
                    await h(e, Number(t.Gender));
                  }
                for (let e in l.face)
                  if (l.face[e]) {
                    u = 1;
                    const t = l.face[e],
                      a = g(e);
                    if (a && mp.peds.exists(a)) {
                      u = 2;
                      let e = JSON.parse(t.Hair);
                      a.setComponentVariation(2, e.Hair, 0, 0),
                        a.setHairColor(e.Color, e.HighlightColor),
                        (u = 3);
                      let o = JSON.parse(t.Tattoos);
                      for (let e in o)
                        o[e] &&
                          o[e].forEach((e) => {
                            a.setDecoration(
                              mp.game.joaat(e.Dictionary),
                              mp.game.joaat(e.Hash)
                            );
                          });
                      u = 4;
                      let i = JSON.parse(t.Parents);
                      a.setHeadBlendData(
                        i.Mother,
                        i.Father,
                        0,
                        i.Mother,
                        i.Father,
                        0,
                        i.Similarity,
                        i.SkinSimilarity,
                        0,
                        !0
                      ),
                        (u = 5);
                      const n = JSON.parse(t.Features);
                      for (let e = 0; e < n.length; e++)
                        a.setFaceFeature(e, n[e]);
                      (u = 6), a.setEyeColor(Number(t.Eyec)), (u = 7);
                      const s = JSON.parse(t.Appearance);
                      for (let e = 0; e < s.length; e++) {
                        const t = s[e];
                        a.setHeadOverlay(
                          e,
                          Number(t.Value),
                          Number(t.Opacity),
                          1,
                          1
                        ),
                          void 0 !== t.Color
                            ? [1, 2, 10].includes(e)
                              ? a.setHeadOverlayColor(e, 1, Number(t.Color), 0)
                              : [5, 8].includes(e)
                              ? a.setHeadOverlayColor(e, 2, Number(t.Color), 0)
                              : [0].includes(e) &&
                                a.setHeadOverlayColor(e, 0, Number(t.Color), 0)
                            : [1, 2, 10].includes(e)
                            ? a.setHeadOverlayColor(e, 1, 0, 0)
                            : [5, 8].includes(e)
                            ? a.setHeadOverlayColor(e, 2, 0, 0)
                            : [0].includes(e) &&
                              a.setHeadOverlayColor(e, 0, 0, 0);
                      }
                      (u = 7), (u = 8);
                    }
                  }
                for (let e in l.clothes)
                  if (l.clothes[e]) {
                    const t = g(e),
                      a = l.clothes[e];
                    for (let e in a)
                      t &&
                        mp.peds.exists(t) &&
                        t.setComponentVariation(
                          Number(e),
                          Number(a[e].Drawable),
                          Number(a[e].Texture),
                          0
                        );
                  }
                for (let e in l.accessory)
                  if (l.accessory[e]) {
                    const t = g(e),
                      a = l.accessory[e];
                    for (let e in a)
                      t &&
                        mp.peds.exists(t) &&
                        t.setPropIndex(
                          Number(e),
                          Number(a[e].Drawable),
                          Number(a[e].Texture),
                          !0
                        );
                  }
                await a.g.wait(100),
                  a.g.createCamera("char", c[0]),
                  a.g.updateCameraToBone("hat", c[0], !0, 0),
                  _.forEach(async (e) => {
                    await a.g.requestAnimDict(e.animDictionary);
                  });
                for (let e in l.clothes) {
                  const t = a.g.getRandomInt(0, _.length);
                  _[t] &&
                    a.g.requestAnimDict(_[t].animDictionary).then(() => {
                      const a = g(e);
                      a &&
                        mp.peds.exists(a) &&
                        a.taskPlayAnim(
                          _[t].animDictionary,
                          _[t].animationName,
                          1,
                          1,
                          -1,
                          1,
                          0,
                          !1,
                          !1,
                          !1
                        );
                    });
                }
                await a.g.wait(200), y();
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/character",
                  "InitPlayerChar - " + u,
                  e.toString()
                );
              }
            });
            const y = async (e) => {
                e
                  ? mp.gui.emmit('window.router.setView("PlayerCustomization")')
                  : mp.gui.emmit(
                      'events.callEvent("cef.authentication.setView", "Chars")'
                    ),
                  a.g.menuOpen(),
                  (s = !0),
                  a.g.createCamera("char", c[0]),
                  a.g.updateCameraToBone("hat", c[0], !0, 0),
                  await a.g.wait(500),
                  a.g.FadeScreen(!1, 1500),
                  (s = !0);
              },
              v = (e) => {
                (r[i].gender = e),
                  (async (e) => {
                    try {
                      await h(i, Number(e));
                    } catch (e) {
                      mp.events.callRemote(
                        "client_trycatch",
                        "player/character",
                        "UpdateGender",
                        e.toString()
                      );
                    }
                  })(e),
                  f(e);
              },
              f = (e) => {
                try {
                  const t = g();
                  if (t && mp.peds.exists(t)) {
                    C(e, "head"),
                      C(e, "tops"),
                      C(e, "legs"),
                      C(e, "shoes"),
                      M(e, "hair"),
                      M(e, "eyebrows"),
                      M(e, "blemishes"),
                      M(e, "ageing"),
                      M(e, "complexion"),
                      M(e, "molesfreckles"),
                      M(e, "sundamage"),
                      M(e, "eyescolor"),
                      M(e, e ? "facialhair" : "lipstick");
                    for (let a = 0; a < 20; a++)
                      t.setFaceFeature(a, r[i][e].Facesettings[a]);
                    w(e);
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/character",
                    "UpdateAll",
                    e.toString()
                  );
                }
              },
              w = (e) => {
                try {
                  const t = g();
                  if (t && mp.peds.exists(t)) {
                    const a = r[i][e];
                    t.setHeadBlendData(
                      a.motherid,
                      a.fatherid,
                      0,
                      a.motherid,
                      a.fatherid,
                      0,
                      a.shapemix,
                      a.skintone,
                      0,
                      !0
                    );
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/character",
                    "updateHeadBlendData",
                    e.toString()
                  );
                }
              },
              S = (e, t, a, o, n) => {
                try {
                  "hair" == t
                    ? ((r[i][e].hair.variation = a), (r[i][e].hair.color = o))
                    : "eyebrows" == t
                    ? ((r[i][e].eyebrows.variation = a),
                      (r[i][e].eyebrows.color = o),
                      (r[i][e].eyebrows.opacity = n))
                    : "facialhair" == t
                    ? ((r[i][e].facialhair.variation = a),
                      (r[i][e].facialhair.color = o),
                      (r[i][e].facialhair.opacity = n))
                    : "blemishes" == t
                    ? ((r[i][e].blemishes.variation = a),
                      (r[i][e].blemishes.opacity = n))
                    : "ageing" == t
                    ? ((r[i][e].ageing.variation = a),
                      (r[i][e].ageing.opacity = n))
                    : "complexion" == t
                    ? ((r[i][e].complexion.variation = a),
                      (r[i][e].complexion.opacity = n))
                    : "molesfreckles" == t
                    ? ((r[i][e].molesfreckles.variation = a),
                      (r[i][e].molesfreckles.opacity = n))
                    : "sundamage" == t
                    ? ((r[i][e].sundamage.variation = a),
                      (r[i][e].sundamage.opacity = n))
                    : "eyescolor" == t
                    ? (r[i][e].eyescolor.variation = a)
                    : "lipstick" == t &&
                      ((r[i][e].lipstick.variation = a),
                      (r[i][e].lipstick.color = o),
                      (r[i][e].lipstick.opacity = n)),
                    M(e, t);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/character",
                    "SetAppearanceChange",
                    e.toString()
                  );
                }
              },
              M = (e, t) => {
                try {
                  const a = g();
                  if (a && mp.peds.exists(a)) {
                    const o = r[i][e];
                    "hair" == t
                      ? (a.setComponentVariation(2, o.hair.variation, 0, 0),
                        a.setHairColor(o.hair.color, o.hair.color))
                      : "eyebrows" == t
                      ? (a.setHeadOverlay(
                          2,
                          o.eyebrows.variation,
                          o.eyebrows.opacity,
                          1,
                          1
                        ),
                        a.setHeadOverlayColor(2, 1, o.eyebrows.color, 0))
                      : "facialhair" == t
                      ? (a.setHeadOverlay(
                          1,
                          o.facialhair.variation,
                          o.facialhair.opacity,
                          1,
                          1
                        ),
                        a.setHeadOverlayColor(1, 1, o.facialhair.color, 0))
                      : "blemishes" == t
                      ? a.setHeadOverlay(
                          0,
                          o.blemishes.variation,
                          o.blemishes.opacity,
                          1,
                          1
                        )
                      : "ageing" == t
                      ? a.setHeadOverlay(
                          3,
                          o.ageing.variation,
                          o.ageing.opacity,
                          1,
                          1
                        )
                      : "complexion" == t
                      ? a.setHeadOverlay(
                          6,
                          o.complexion.variation,
                          o.complexion.opacity,
                          1,
                          1
                        )
                      : "molesfreckles" == t
                      ? a.setHeadOverlay(
                          9,
                          o.molesfreckles.variation,
                          o.molesfreckles.opacity,
                          1,
                          1
                        )
                      : "sundamage" == t
                      ? a.setHeadOverlay(
                          7,
                          o.sundamage.variation,
                          o.sundamage.opacity,
                          1,
                          1
                        )
                      : "eyescolor" == t
                      ? a.setEyeColor(o.eyescolor.variation)
                      : "lipstick" == t &&
                        (a.setHeadOverlay(
                          8,
                          o.lipstick.variation,
                          o.lipstick.opacity,
                          1,
                          1
                        ),
                        a.setHeadOverlayColor(8, 2, o.lipstick.color, 0));
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/character",
                    "UpdateAppearance",
                    e.toString()
                  );
                }
              },
              b = (e, t, a, o, n) => {
                try {
                  const s = g();
                  s &&
                    mp.peds.exists(s) &&
                    (-1 != t &&
                      ((2 != t && 10 != t && 11 != t && 12 != t && 17 != t) ||
                        (a *= -1),
                      16 == t && (a = (a + 1) / 2),
                      (r[i][e].Facesettings[t] = a),
                      s.setFaceFeature(t, a)),
                    -1 != o &&
                      ((r[i][e].Facesettings[o] = n), s.setFaceFeature(o, n)));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/character",
                    "SetCharacteristicChange",
                    e.toString()
                  );
                }
              },
              T = (e, t, a, o) => {
                try {
                  (r[i][e][t] = { drawable: a, texture: o }), C(e, t);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/character",
                    "SetClothesChange",
                    e.toString()
                  );
                }
              },
              C = (e, t) => {
                try {
                  const o = g();
                  if (o && mp.peds.exists(o)) {
                    const n = r[i][e];
                    "head" === t
                      ? -1 == n.head.drawable
                        ? o.clearProp(0)
                        : o.setPropIndex(0, n.head.drawable, n.head.texture, !0)
                      : "tops" === t
                      ? (o.setComponentVariation(
                          8,
                          a.g.clothesEmpty[Number(e)][8],
                          0,
                          0
                        ),
                        o.setComponentVariation(
                          11,
                          n.tops.drawable,
                          n.tops.texture,
                          0
                        ))
                      : "legs" === t
                      ? o.setComponentVariation(
                          4,
                          n.legs.drawable,
                          n.legs.texture,
                          0
                        )
                      : "shoes" === t &&
                        o.setComponentVariation(
                          6,
                          n.shoes.drawable,
                          n.shoes.texture,
                          0
                        );
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/character",
                    "UpdateClothesChange",
                    e.toString()
                  );
                }
              };
            mp.events.add("client.characters.create.error", async (e) => {
              a.g.FadeScreen(!1, 500),
                mp.gui.emmit(
                  `window.events.callEvent("cef.customization.error",  '${e}')`
                );
            }),
              mp.events.add(
                "client.characters.customization.create",
                async (e, t, o, n) => {
                  try {
                    const s = r[i][n];
                    a.g.FadeScreen(!0, 0), await a.g.wait(50);
                    let l = [];
                    s.blemishes
                      ? l.push({
                          Value: s.blemishes.variation,
                          Opacity: s.blemishes.opacity,
                        })
                      : l.push({ Value: 255, Opacity: 100 }),
                      s.facialhair
                        ? l.push({
                            Value: s.facialhair.variation,
                            Opacity: s.facialhair.opacity,
                          })
                        : l.push({ Value: 255, Opacity: 100 }),
                      s.eyebrows
                        ? l.push({
                            Value: s.eyebrows.variation,
                            Opacity: s.eyebrows.opacity,
                          })
                        : l.push({ Value: 255, Opacity: 100 }),
                      s.ageing
                        ? l.push({
                            Value: s.ageing.variation,
                            Opacity: s.ageing.opacity,
                          })
                        : l.push({ Value: 255, Opacity: 100 }),
                      l.push({ Value: 255, Opacity: 100 }),
                      l.push({ Value: 255, Opacity: 100 }),
                      s.complexion
                        ? l.push({
                            Value: s.complexion.variation,
                            Opacity: s.complexion.opacity,
                          })
                        : l.push({ Value: 255, Opacity: 100 }),
                      s.sundamage
                        ? l.push({
                            Value: s.sundamage.variation,
                            Opacity: s.sundamage.opacity,
                          })
                        : l.push({ Value: 255, Opacity: 100 }),
                      s.lipstick
                        ? l.push({
                            Value: s.lipstick.variation,
                            Opacity: s.lipstick.opacity,
                          })
                        : l.push({ Value: 255, Opacity: 100 }),
                      s.molesfreckles
                        ? l.push({
                            Value: s.molesfreckles.variation,
                            Opacity: s.molesfreckles.opacity,
                          })
                        : l.push({ Value: 255, Opacity: 100 }),
                      l.push({ Value: 255, Opacity: 100 });
                    let m = [];
                    m.push(s.hair ? s.hair.variation : 0),
                      m.push(s.hair ? s.hair.color : 0),
                      m.push(s.hair ? s.hair.color : 0),
                      m.push(s.eyebrows ? s.eyebrows.color : 0),
                      m.push(s.facialhair ? s.facialhair.color : 0),
                      m.push(s.eyescolor ? s.eyescolor.variation : 0),
                      m.push(0),
                      m.push(s.lipstick ? s.lipstick.color : 0),
                      m.push(0);
                    let c = [];
                    c.push({
                      Drawable: s.head.drawable,
                      Texture: s.head.texture,
                    }),
                      c.push({
                        Drawable: s.tops.drawable,
                        Texture: s.tops.texture,
                      }),
                      c.push({
                        Drawable: s.legs.drawable,
                        Texture: s.legs.texture,
                      }),
                      c.push({
                        Drawable: s.shoes.drawable,
                        Texture: s.shoes.texture,
                      }),
                      mp.events.callRemote(
                        "CreateCharacter",
                        e,
                        t,
                        o,
                        n,
                        s.fatherid,
                        s.motherid,
                        s.shapemix,
                        s.skintone,
                        JSON.stringify(s.Facesettings),
                        JSON.stringify(l),
                        JSON.stringify(m),
                        JSON.stringify(c)
                      );
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/character",
                      "create",
                      e.toString()
                    );
                  }
                }
              ),
              mp.events.add("client.charcreate.close", async (e = !1) => {
                e || mp.events.call("resumeTime"),
                  a.g.cameraManager.stopCamera(),
                  (s = !1),
                  a.g.localplayer.setVisible(!0, !1),
                  a.g.localplayer.setAlpha(255),
                  a.g.localplayer.freezePosition(!1),
                  a.g.setPlayerToGround(),
                  (l = { face: {}, clothes: {}, accessory: {}, charsSlot: [] }),
                  p && mp.objects.exists(p) && p.destroy(),
                  (p = null),
                  c.forEach((e) => {
                    e && mp.peds.exists(e) && e.destroy();
                  }),
                  (c = []),
                  (i = 0);
              });
          },
          5971: (e, t, a) => {
            (a.g.binderFunctions.o_chat = () => {
              !0 === a.g.loggedin &&
                !a.g.menuCheck() &&
                !1 === a.g.chatActive &&
                a.g.showhud &&
                (mp.gui.emmit("window.chat.toggleInput(true)"),
                (a.g.chatActive = !0),
                a.g.menuOpen());
            }),
              (a.g.binderFunctions.c_chat = () => {
                !0 === a.g.loggedin &&
                  a.g.menuCheck() &&
                  !0 === a.g.chatActive &&
                  (mp.gui.emmit(
                    "window.chat.toggleInput(false, false, false, false)"
                  ),
                  a.g.menuClose(),
                  (a.g.chatActive = !1));
              }),
              mp.events.add("client:OnChatInputChanged", (e) => {
                (a.g.chatActive = e), e ? a.g.menuOpen() : a.g.menuClose();
              }),
              mp.events.add("loadChatConfig", (e) => {
                i(e);
              }),
              mp.events.add("chatconfig", function (e) {
                i(e), mp.events.callRemote("chatConfigSave", e);
              }),
              mp.events.add("updateRadioVolume", function (e = 15) {
                mp.gui.emmit(
                  `window.events.callEvent("cef.walkietalkie.updatePhoneRadioVolume", ${e})`
                );
              });
            let o = !0;
            (a.g.isTagsHead = !0),
              (a.g.FirstLVLMute = !1),
              (a.g.MaxVoiceVolume = 100),
              (a.g.MaxVolumeRadio = 70),
              (a.g.MaxVolumeBoombox = 70),
              (a.g.DistancePlayer = 100),
              (a.g.DistanceVehicle = 100);
            const i = (e) => {
              try {
                if (
                  (mp.gui.emmit(`window.chat.updateConfig('${e}')`),
                  mp.gui.emmit(`window.settingsStore.init ('${e}')`),
                  void 0 !== (e = JSON.parse(e)).HudToggled &&
                    (mp.gui.emmit(
                      `window.hudStore.isHudVisible (${e.HudToggled})`
                    ),
                    (a.g.showhud = e.HudToggled)),
                  void 0 !== e.HudStats &&
                    mp.gui.emmit(`window.hudStore.isPlayer (${e.HudStats})`),
                  void 0 !== e.TagsHead && (a.g.isTagsHead = e.TagsHead),
                  void 0 !== e.HudSpeed &&
                    mp.gui.emmit(
                      `window.vehicleState.isToggledVehicleHud (${e.HudSpeed})`
                    ),
                  void 0 !== e.HudOnline &&
                    mp.gui.emmit(
                      `window.hudStore.isWaterMark (${e.HudOnline})`
                    ),
                  void 0 !== e.HudLocation &&
                    mp.gui.emmit(`window.hudStore.isWorld (${e.HudLocation})`),
                  void 0 !== e.HudKey &&
                    (mp.gui.emmit(`window.hudStore.isHelp (${e.HudKey})`),
                    (a.g.showHint = e.HudKey)),
                  void 0 !== e.HudMap &&
                    o !== e.HudMap &&
                    ((o = e.HudMap), (a.g.bigMapStatus = o ? 0 : 3)),
                  void 0 !== e.VolumeInterface &&
                    (a.g.VolumeInterface = e.VolumeInterface),
                  void 0 !== e.VolumeQuest && (a.g.VolumeQuest = e.VolumeQuest),
                  void 0 !== e.VolumeAmbient &&
                    (a.g.VolumeAmbient = e.VolumeAmbient),
                  void 0 !== e.VolumePhoneRadio &&
                    (a.g.VolumePhoneRadio = e.VolumePhoneRadio),
                  void 0 !== e.VolumeVoice &&
                    (a.g.MaxVoiceVolume = e.VolumeVoice),
                  void 0 !== e.VolumeRadio &&
                    ((a.g.MaxVolumeRadio = e.VolumeRadio),
                    mp.events.call("UpdateVoiceRadio")),
                  void 0 !== e.VolumeBoombox &&
                    (a.g.MaxVolumeBoombox = e.VolumeBoombox),
                  void 0 !== e.FirstMute && (a.g.FirstLVLMute = e.FirstMute),
                  void 0 !== e.DistancePlayer &&
                    e.DistancePlayer !== a.g.DistancePlayer)
                ) {
                  a.g.DistancePlayer = e.DistancePlayer;
                  const t = a.g.getLodDist(a.g.DistancePlayer);
                  mp.players.forEachInStreamRange((e) => {
                    e && 0 !== e.handle && e.setLodDist(t);
                  });
                }
                if (
                  void 0 !== e.DistanceVehicle &&
                  e.DistanceVehicle !== a.g.DistanceVehicle
                ) {
                  a.g.DistanceVehicle = e.DistanceVehicle;
                  const t = a.g.getLodDist(a.g.DistanceVehicle);
                  mp.vehicles.forEachInStreamRange((e) => {
                    e && 0 !== e.handle && e.setLodDist(t);
                  });
                }
                void 0 !== e.cPToggled &&
                  (a.g.crosshairParameters.toggled = e.cPToggled),
                  void 0 !== e.cPWidth &&
                    (a.g.crosshairParameters.width = e.cPWidth),
                  void 0 !== e.cPGap && (a.g.crosshairParameters.gap = e.cPGap),
                  void 0 !== e.cPDot && (a.g.crosshairParameters.dot = e.cPDot),
                  void 0 !== e.cPThickness &&
                    (a.g.crosshairParameters.thickness = e.cPThickness),
                  void 0 !== e.cPColorR &&
                    (a.g.crosshairParameters.color[0] = e.cPColorR),
                  void 0 !== e.cPColorG &&
                    (a.g.crosshairParameters.color[1] = e.cPColorG),
                  void 0 !== e.cPColorB &&
                    (a.g.crosshairParameters.color[2] = e.cPColorB),
                  void 0 !== e.cPOpacity &&
                    (a.g.crosshairParameters.opacity = e.cPOpacity),
                  void 0 !== e.cPCheck &&
                    (a.g.crosshairParameters.checkp = e.cPCheck),
                  void 0 !== e.cEfValue &&
                    (mp.game.graphics.bloodVfxMode = e.cEfValue),
                  void 0 !== e.notifCount && (a.g.notifyCount = e.notifCount),
                  void 0 !== e.hitPoint && (a.g.hitPoint = e.hitPoint);
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/chat",
                  "UpdateSettingsData",
                  e.toString()
                );
              }
            };
            (a.g.getLodDist = (e) => Math.round(getLerp(65, 400, e / 100))),
              (a.g.getLerp = (e, t, a) => e * (1 - a) + t * a);
          },
          9691: (e, t, a) => {
            a.g.circleOpen = !1;
            let o = "";
            const i = {
                Я: [
                  "inv",
                  "phone",
                  "fraction_table",
                  "org_table",
                  "anim",
                  "battlepass",
                  "house_table",
                  "donate",
                ],
                Игрок: [
                  "sell",
                  "offer",
                  "fraction",
                  "documents",
                  "heal",
                  "house",
                  "paired_animations",
                  "family",
                ],
                Документы: [
                  "passport",
                  "licenses",
                  "idcard",
                  "badge",
                  "lspdbadge",
                  "fibbadge",
                ],
                Взаимодействия: [
                  "handshake",
                  "tinter",
                  "givemoney",
                  "tradehouse",
                  "tradebiz",
                  "tradecar",
                  "vmuted",
                ],
                "Парные анимации": [
                  "embrace",
                  "kiss",
                  "paired_five",
                  "paired_slap",
                  "carry_0",
                  "carry_1",
                  "carry_2",
                  "carry_3",
                ],
                Машина: [
                  "hood",
                  "trunk",
                  "doors",
                  "carinv",
                  "trunkAction",
                  "ticketveh",
                  "breaking_trunk",
                  "veh_fix",
                ],
                "Взаимодействие с багажником": [
                  "intrunk",
                  "fromtrunk",
                  "newnumber",
                ],
                "В машине": ["belt", "hood", "trunk", "doors", "streetrace"],
                Недвижимость: [
                  "sellcar",
                  "sellhouse",
                  "roommate",
                  "invitehouse",
                ],
                Фракция: [
                  [],
                  ["leadaway", "handsup", "rob", "robguns", "pocket"],
                  ["leadaway", "handsup", "rob", "robguns", "pocket"],
                  ["leadaway", "handsup", "rob", "robguns", "pocket"],
                  ["leadaway", "handsup", "rob", "robguns", "pocket"],
                  ["leadaway", "handsup", "rob", "robguns", "pocket"],
                  ["leadaway", "search"],
                  [
                    "leadaway",
                    "search",
                    "takegun",
                    "takeillegal",
                    "takemask",
                    "ticket",
                  ],
                  ["sellkit", "offerheal"],
                  ["leadaway", "search", "takegun", "takeillegal", "takemask"],
                  ["leadaway", "pocket", "handsup", "rob", "robguns"],
                  ["leadaway", "pocket", "handsup", "rob", "robguns"],
                  ["leadaway", "pocket", "handsup", "rob", "robguns"],
                  ["leadaway", "pocket", "handsup", "rob", "robguns"],
                  ["leadaway", "search", "takegun"],
                  [],
                  ["leadaway", "rob", "robguns", "pocket"],
                  ["leadaway", "search", "pocket", "takemask"],
                  [
                    "leadaway",
                    "search",
                    "takegun",
                    "takeillegal",
                    "takemask",
                    "ticket",
                  ],
                ],
                Семья: ["handsup", "rob", "robguns", "pocket", "leadaway"],
                Кальян: ["use_hookah", "take_hookah"],
                "Лифт 1": ["f_lift_0", "f_lift_1", "f_lift_2", "f_lift_3"],
                "Лифт 2": [
                  "s_lift_0",
                  "s_lift_1",
                  "s_lift_2",
                  "s_lift_3",
                  "s_lift_4",
                ],
                Лифт: ["c_lift_0", "c_lift_1"],
                "Лифт FIB": ["gov_lift_1", "gov_lift_3", "gov_lift_4"],
                "Лифт News 1": [
                  "news_f_lift_1",
                  "news_f_lift_2",
                  "news_f_lift_3",
                ],
                "Лифт News 2": [
                  "news_s_lift_1",
                  "news_s_lift_2",
                  "news_s_lift_3",
                ],
                "Открыть планшет": [
                  "fraction_table",
                  "fraction_news",
                  "org_table",
                  "fraction_mayormenu",
                ],
                "Покинуть фракцию/семью": ["leave_fraction", "leave_org"],
              },
              n = {
                inv: "Инвентарь",
                phone: "Телефон",
                anim: "Анимации",
                awards: "Награды",
                house_table: "Меню дома",
                donate: "Донат",
                battlepass: "Боевой пропуск",
                fraction_mayormenu: "Управление казной",
                veh_fix: "Починить транспорт",
                breaking_trunk: "Взломать багажник",
                belt: "Ремень безопасности",
                sell: "Взаимодействия",
                paired_animations: "Парные анимации",
                whisper: "Шептаться",
                intrunk: "Залезть в багажник",
                trunkAction: "Взаимодействие с багажником",
                fromtrunk: "Выкинуть из багажника",
                newnumber: "Установить номер",
                tradehouse: "Обмен недвижимостью",
                tradebiz: "Обмен бизнесами",
                tradecar: "Обмен машинами",
                streetrace: "Уличная гонка",
                handshake: "Пожать руку",
                licenses: "Показать лицензии",
                documents: "Документы",
                idcard: "Показать ID-карту",
                badge: "Показать удостоверение",
                lspdbadge: "Посмотреть значок",
                fibbadge: "Посмотреть бейджик",
                carinv: "Инвентарь",
                doors: "Открыть/Закрыть двери",
                fraction: "Фракция",
                family: "Семья",
                offer: "Предложить обмен",
                givemoney: "Передать деньги",
                heal: "Вылечить",
                hood: "Открыть/Закрыть капот",
                leadaway: "Вести за собой",
                offerheal: "Предложить лечение",
                passport: "Показать паспорт",
                search: "Обыскать",
                sellkit: "Продать аптечку",
                takegun: "Изъять оружие",
                takeillegal: "Изъять нелегал",
                trunk: "Открыть/Закрыть багажник",
                pocket: "Надеть/снять мешок",
                takemask: "Сорвать маску/мешок",
                handsup: "Заставить поднять руки",
                rob: "Ограбить",
                robguns: "Украсть оружие",
                house: "Недвижимость",
                ticket: "Выписать штраф",
                ticketveh: "Выписать штраф",
                sellcar: "Продать машину",
                sellhouse: "Продать недвижимость",
                roommate: "Заселить в дом",
                invitehouse: "Пригласить в дом",
                embrace: "Обнять",
                kiss: "Поцеловать",
                paired_five: "Дать пять",
                paired_slap: "Дать пощечину",
                carry_0: "Взять на руки",
                carry_1: "Закинуть на шею",
                carry_2: "Закинуть на плечо",
                carry_3: "Взять в заложники",
                tinter: "Повторить анимацию",
                use_hookah: "Использовать кальян",
                take_hookah: "Убрать кальян",
                f_lift_0: "0 этаж",
                f_lift_1: "1 этаж",
                f_lift_2: "2 этаж",
                f_lift_3: "3 этаж",
                s_lift_0: "0 этаж",
                s_lift_1: "1 этаж",
                s_lift_2: "2 этаж",
                s_lift_3: "3 этаж",
                s_lift_4: "4 этаж",
                c_lift_0: "1 этаж",
                c_lift_1: "2 этаж",
                gov_lift_1: "1 этаж",
                gov_lift_3: "3 этаж",
                gov_lift_4: "4 этаж",
                news_f_lift_1: "1 этаж",
                news_f_lift_2: "2 этаж",
                news_f_lift_3: "3 этаж",
                news_s_lift_1: "1 этаж",
                news_s_lift_2: "2 этаж",
                news_s_lift_3: "3 этаж",
                fraction_table: "Планшет фракции",
                fraction_news: "Планшет новостей",
                org_table: "Планшет семьи",
                leave_fraction: "Покинуть фракцию",
                leave_org: "Покинуть семью",
              };
            let s = null,
              r = [];
            (a.g.OpenCircle = (e, t, l = null) => {
              try {
                if (a.g.menuCheck() && !a.g.circleOpen) return;
                const m = !((-1 === l || s === l) && "В машине" !== e);
                -1 !== l && (s = l);
                const p = ((e, t) => {
                  o = e;
                  let r = [];
                  r = "string" == typeof i[e][0] ? i[e] : i[e][t];
                  let l = [];
                  return (
                    r.forEach((e, t) => {
                      const o = ((e) =>
                        ("fraction_table" !== e || 0 !== a.g.fractionId) &&
                        ("fraction_news" !== e || 15 === a.g.fractionId) &&
                        !!(
                          "fraction_mayormenu" !== e ||
                          (6 === a.g.fractionId && a.g.isLeader)
                        ) &&
                        ("org_table" !== e || 0 !== a.g.organizationId) &&
                        ("belt" === e
                          ? _
                            ? "Отстегнуть ремень"
                            : "Пристегнуть ремень"
                          : "doors" === e && null !== s && s.doesExist()
                          ? s.getVariable("vLock")
                            ? "Открыть дверной замок"
                            : "Закрыть дверной замок"
                          : ("fraction" !== e ||
                              (0 != a.g.fractionId && 15 != a.g.fractionId)) &&
                            ("family" !== e || 0 != a.g.organizationId) &&
                            ("handshake" !== e ||
                              null == a.g.friends[s.name] ||
                              1 != a.g.friends[s.name]) &&
                            !!(
                              "take_hookah" !== e ||
                              (null !== s &&
                                s.doesExist() &&
                                s.dropData.pId === a.g.localplayer.remoteId)
                            ) &&
                            n[e]))(e);
                      o && l.push({ name: o, func: e, index: t });
                    }),
                    l
                  );
                })(e, t);
                !a.g.circleOpen || m
                  ? ((r = []),
                    mp.gui.emmit(
                      `window.router.setPopUp("CircleMenu", '${JSON.stringify(
                        p
                      )}')`
                    ))
                  : mp.gui.emmit(
                      `window.events.callEvent("cef.circle.updateCategory", '${JSON.stringify(
                        p
                      )}');`
                    ),
                  r.push({ title: e, id: t }),
                  a.g.circleOpen ||
                    ((a.g.circleOpen = !0),
                    (a.g.isPopup = !0),
                    a.g.menuOpen(!0),
                    mp.events.add("render", c),
                    mp.game.graphics.transitionToBlurred(50));
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/circle",
                  "global.OpenCircle",
                  e.toString()
                );
              }
            }),
              (a.g.UpdateCircle = (e) => {
                if (!a.g.circleOpen) return;
                if ("В машине" === o && s === a.g.localplayer.vehicle) return;
                if (
                  [
                    "Кальян",
                    "Лифт 1",
                    "Лифт 2",
                    "Лифт",
                    "Лифт FIB",
                    "Лифт News 1",
                    "Лифт News 2",
                    "Открыть планшет",
                    "Покинуть фракцию/семью",
                  ].includes(o)
                )
                  return;
                if (
                  ["Взаимодействие с багажником", "Машина", "Я"].includes(o) &&
                  a.g.localplayer.vehicle
                )
                  return a.g.OpenCircle("В машине", 0, a.g.localplayer.vehicle);
                if ("Я" === o && null === e && null === s) return;
                if (null == e) return void a.g.OpenCircle("Я", 0);
                const t = !(
                  s === e &&
                  ("В машине" !== o || a.g.localplayer.vehicle)
                );
                if (
                  [
                    "Игрок",
                    "Документы",
                    "Взаимодействия",
                    "Парные анимации",
                    "Машина",
                    "Взаимодействие с багажником",
                    "В машине",
                    "Фракция",
                    "Семья",
                    "Недвижимость",
                    "Я",
                  ].includes(o)
                ) {
                  const i = e.position,
                    n = a.g.localplayer.position;
                  if (
                    mp.game.gameplay.getDistanceBetweenCoords(
                      i.x,
                      i.y,
                      i.z,
                      n.x,
                      n.y,
                      n.z,
                      !0
                    ) > 8
                  )
                    return void a.g.OpenCircle("Я", 0);
                  if (t)
                    switch (e.type) {
                      case "player":
                        a.g.OpenCircle("Игрок", 0, e);
                        break;
                      case "vehicle":
                        "Взаимодействие с багажником" === o
                          ? a.g.OpenCircle(o, 0, e)
                          : a.g.OpenCircle("Машина", 0, e);
                        break;
                      default:
                        a.g.OpenCircle("Я", 0);
                    }
                }
              });
            let l = !1;
            mp.events.add("client.circle.initCircle", (e, t) => {
              l = [e, t];
            });
            let m = !1;
            mp.events.add("client.circle.isBack", (e) => {
              m = e;
            });
            const c = () => {
              if (!l) return;
              const [e, t] = mp.gui.cursor.position,
                a = mp.game.graphics.getScreenAspectRatio(!0),
                o = mp.game.graphics.getScreenActiveResolution(0, 0),
                i = e - o.x / 2,
                n = t - o.y / 2;
              let s = Math.atan2(n, i) * (180 / Math.PI);
              s < 0 ? (s = Math.abs(s)) : s > 0 && (s = s - s - s),
                mp.game.graphics.drawSprite(
                  "redage_textures_001",
                  m ? "noCircleMenu" : "circleMenu",
                  0.5,
                  0.5,
                  0.175 * l[0],
                  0.175 * l[0] * a,
                  90 - s,
                  255,
                  255,
                  255,
                  255
                );
            };
            (a.g.CloseCircle = () => {
              try {
                mp.gui.emmit("window.router.setPopUp();"),
                  (a.g.circleOpen = !1),
                  (a.g.isPopup = !1),
                  (o = ""),
                  (s = null),
                  (r = []),
                  a.g.menuClose(),
                  mp.events.remove("render", c),
                  mp.game.graphics.transitionFromBlurred(250);
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/circle",
                  "global.CloseCircle",
                  e.toString()
                );
              }
            }),
              mp.events.add("client.circle.select", (e, t) => {
                switch (e) {
                  case "back":
                    if (((t = r.length - 2), r.length > 0 && r[t])) {
                      const e = r[t];
                      r.splice(t, 2), a.g.OpenCircle(e.title, e.id, -1);
                    } else a.g.CloseCircle();
                    break;
                  case "trunkAction":
                    a.g.OpenCircle("Взаимодействие с багажником", 0, -1);
                    break;
                  case "sell":
                    mp.events.call("client.circle.events", Number(t)),
                      a.g.OpenCircle("Взаимодействия", 0, -1);
                    break;
                  case "paired_animations":
                    a.g.OpenCircle("Парные анимации", 0, -1);
                    break;
                  case "fraction":
                    if (0 == a.g.fractionId || 15 == a.g.fractionId) return;
                    a.g.OpenCircle("Фракция", a.g.fractionId, -1);
                    break;
                  case "family":
                    if (0 == a.g.organizationId) return;
                    a.g.OpenCircle("Семья", 0, -1);
                    break;
                  case "documents":
                  case "documents":
                  case "documents":
                    a.g.OpenCircle("Документы", 0, -1);
                    break;
                  case "house":
                    a.g.OpenCircle("Недвижимость", 0, -1);
                    break;
                  default:
                    mp.events.call("client.circle.events", e, Number(t));
                }
              });
            let p = [new Date().getTime(), new Date().getTime()];
            mp.events.add("client.circle.events", (e, t) => {
              try {
                const n = o;
                switch (
                  (("Игрок" === n && ("Игрок" !== n || (1 !== t && 4 !== t))) ||
                    a.g.CloseCircle(!1),
                  n)
                ) {
                  case "Я":
                    switch (t) {
                      case 0:
                        a.g.binderFunctions.GameMenuOpen();
                        break;
                      case 1:
                        a.g.binderFunctions.openPlayerMenu();
                        break;
                      case 2:
                        mp.events.callRemote("server.openTableChoose", 0);
                        break;
                      case 3:
                        mp.events.callRemote("server.openTableChoose", 1);
                        break;
                      case 4:
                        a.g.binderFunctions.o_animation(!0);
                        break;
                      case 5:
                        mp.events.call("client.battlepass.open");
                        break;
                      case 6:
                        mp.events.callRemote("server.house.open", !0);
                        break;
                      case 7:
                        a.g.binderFunctions.o_donate();
                    }
                    return;
                  case "В машине":
                    const o = a.g.localplayer.vehicle;
                    if (!o || a.g.localplayer.isInAnyPlane()) return;
                    switch (t) {
                      case 0:
                        let e = o.getClass();
                        if (8 == e || 13 == e || 14 == e)
                          return void mp.events.call(
                            "notify",
                            4,
                            9,
                            "В этом типе транспортных средств нет ремней безопасности.",
                            3e3
                          );
                        _
                          ? a.g.localplayer.setConfigFlag(32, !0)
                          : a.g.localplayer.setConfigFlag(32, !1),
                          mp.events.callRemote("beltSelected", _),
                          (_ = !_),
                          mp.gui.emmit(`window.vehicleState.belt (${_})`);
                        break;
                      case 1:
                      case 2:
                      case 3:
                        return o.getPedInSeat(-1) != a.g.localplayer.handle
                          ? void mp.events.call(
                              "notify",
                              4,
                              9,
                              "Вы должны быть на водительском месте",
                              3e3
                            )
                          : void mp.events.callRemote(
                              "vehicleSelected",
                              o,
                              t - 1
                            );
                      case 4:
                        return o.getPedInSeat(-1) != a.g.localplayer.handle
                          ? void mp.events.call(
                              "notify",
                              4,
                              9,
                              "Вы должны быть на водительском месте",
                              3e3
                            )
                          : void mp.events.callRemote("server.streetrace.open");
                    }
                    return;
                  case "Взаимодействие с багажником":
                    if (null == a.g.entity) return;
                    switch (t) {
                      case 0:
                      case 1:
                        const e = a.g.entity.getClass();
                        return 1 != e &&
                          2 != e &&
                          3 != e &&
                          4 != e &&
                          5 != e &&
                          6 != e
                          ? void mp.events.call(
                              "notify",
                              4,
                              9,
                              "В багажник этого т/с нельзя залезть.",
                              3e3
                            )
                          : void mp.events.callRemote(
                              "vehicleSelected",
                              a.g.entity,
                              t + 10
                            );
                      case 2:
                        return void mp.events.callRemote(
                          "vehicleSelected",
                          a.g.entity,
                          t + 10
                        );
                    }
                    return;
                  case "Машина":
                    if (null == a.g.entity) return;
                    switch (t) {
                      case 0:
                      case 1:
                      case 2:
                      case 3:
                      case 5:
                      case 6:
                      case 7:
                        return void mp.events.callRemote(
                          "vehicleSelected",
                          a.g.entity,
                          t
                        );
                    }
                    return;
                  case "Игрок":
                    if (null == a.g.entity) return;
                    switch (t) {
                      case 1:
                        return void mp.events.callRemote(
                          "pSelected",
                          a.g.entity,
                          "offer"
                        );
                      case 4:
                        return void mp.events.callRemote(
                          "pSelected",
                          a.g.entity,
                          "heal"
                        );
                    }
                    return;
                  case "Документы":
                    if (null == a.g.entity) return;
                    switch (t) {
                      case 0:
                        return void mp.events.callRemote(
                          "passport",
                          a.g.entity
                        );
                      case 1:
                        return void mp.events.callRemote(
                          "licenses",
                          a.g.entity
                        );
                      case 2:
                        return void mp.events.callRemote("idcard", a.g.entity);
                      case 3:
                        return void mp.events.callRemote(
                          "certificate",
                          a.g.entity
                        );
                      case 4:
                        return new Date().getTime() - p[0] < 15e3
                          ? void mp.events.call(
                              "notify",
                              4,
                              9,
                              "Попробуйте через 15 секунд",
                              3e3
                            )
                          : ((p[0] = new Date().getTime()),
                            void mp.events.callRemote(
                              "viewBadge",
                              a.g.entity,
                              "Посмотреть значок"
                            ));
                      case 5:
                        return new Date().getTime() - p[1] < 15e3
                          ? void mp.events.call(
                              "notify",
                              4,
                              9,
                              "Попробуйте через 15 секунд",
                              3e3
                            )
                          : ((p[1] = new Date().getTime()),
                            void mp.events.callRemote(
                              "viewBadge",
                              a.g.entity,
                              "Посмотреть бейджик"
                            ));
                    }
                    return;
                  case "Недвижимость":
                    switch (t) {
                      case 0:
                        return void mp.events.callRemote(
                          "pSelected",
                          a.g.entity,
                          "sellcar"
                        );
                      case 1:
                        return void mp.events.callRemote(
                          "pSelected",
                          a.g.entity,
                          "sellhouse"
                        );
                      case 2:
                        return void mp.events.callRemote(
                          "pSelected",
                          a.g.entity,
                          "roommate"
                        );
                      case 3:
                        return void mp.events.callRemote(
                          "pSelected",
                          a.g.entity,
                          "invitehouse"
                        );
                    }
                    return;
                  case "Взаимодействия":
                    if (null == a.g.entity) return;
                    switch (t) {
                      case 0:
                        return void mp.events.callRemote(
                          "pSelected",
                          a.g.entity,
                          "handshake"
                        );
                      case 1:
                        return void mp.events.callRemote(
                          "pSelected",
                          a.g.entity,
                          "tinter"
                        );
                      case 2:
                        return void mp.events.callRemote(
                          "pSelected",
                          a.g.entity,
                          "givemoney"
                        );
                      case 3:
                        return void mp.events.callRemote(
                          "server.character.trade",
                          a.g.entity,
                          "house"
                        );
                      case 4:
                        return void mp.events.callRemote(
                          "server.character.trade",
                          a.g.entity,
                          "business"
                        );
                      case 5:
                        return void mp.events.callRemote(
                          "server.character.trade",
                          a.g.entity,
                          "vehicle"
                        );
                      case 6:
                        return a.g.pplMuted.length >= 10
                          ? void mp.events.call(
                              "notify",
                              4,
                              9,
                              "За одну сессию можно отключить микрофон только 10 игрокам.",
                              3e3
                            )
                          : void mp.events.callRemote(
                              "pSelected",
                              a.g.entity,
                              "vmuted"
                            );
                    }
                    return;
                  case "Парные анимации":
                    if (null == a.g.entity) return;
                    switch (t) {
                      case 0:
                        return void mp.events.callRemote(
                          "pairedAnimations",
                          a.g.entity,
                          "PAIRED_EMBRACE"
                        );
                      case 1:
                        return void mp.events.callRemote(
                          "pairedAnimations",
                          a.g.entity,
                          "PAIRED_KISS"
                        );
                      case 2:
                        return void mp.events.callRemote(
                          "pairedAnimations",
                          a.g.entity,
                          "PAIRED_FIVE"
                        );
                      case 3:
                        return void mp.events.callRemote(
                          "pairedAnimations",
                          a.g.entity,
                          "PAIRED_SLAP"
                        );
                      case 4:
                      case 5:
                      case 6:
                      case 7:
                        mp.events.callRemote(
                          "carryAnimations",
                          a.g.entity,
                          t - 4
                        );
                    }
                    return;
                  case "Фракция":
                    if (null == a.g.entity) return;
                    if (null == i["Фракция"][a.g.fractionId]) return;
                    return void mp.events.callRemote(
                      "pSelected",
                      a.g.entity,
                      i["Фракция"][a.g.fractionId][t]
                    );
                  case "Семья":
                    if (null == a.g.entity) return;
                    return void mp.events.callRemote(
                      "pOrgSelected",
                      a.g.entity,
                      t
                    );
                  case "Кальян":
                    switch (t) {
                      case 0:
                        mp.events.callRemote("server.hookahManage", a.g.entity);
                        break;
                      case 1:
                        mp.events.callRemote("server.raise", a.g.entity);
                    }
                    return;
                  case "Лифт 1":
                    return void mp.events.callRemote(
                      "server.useCityhallLift",
                      1,
                      t
                    );
                  case "Лифт 2":
                    return void mp.events.callRemote(
                      "server.useCityhallLift",
                      2,
                      t
                    );
                  case "Лифт":
                    return void mp.events.callRemote(
                      "server.useCityhallLift",
                      3,
                      t
                    );
                  case "Лифт FIB":
                    return void mp.events.callRemote(
                      "server.useCityhallLift",
                      4,
                      t
                    );
                  case "Лифт News 1":
                    return void mp.events.callRemote(
                      "server.useNewsLift",
                      1,
                      t
                    );
                  case "Лифт News 2":
                    return void mp.events.callRemote(
                      "server.useNewsLift",
                      2,
                      t
                    );
                  case "Открыть планшет":
                    switch (e) {
                      case "fraction_table":
                        mp.events.callRemote("server.openTableChoose", 0);
                        break;
                      case "org_table":
                        mp.events.callRemote("server.openTableChoose", 1);
                        break;
                      case "fraction_news":
                        mp.events.call("client.advert.open");
                        break;
                      case "fraction_mayormenu":
                        mp.events.callRemote("server.mayormenu.open");
                    }
                    return;
                  case "Покинуть фракцию/семью":
                    return void mp.events.callRemote(
                      "server.LeaveFractionOrg",
                      t
                    );
                }
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/circle",
                  "client.circle.events",
                  e.toString()
                );
              }
            }),
              (a.g.attachedtotrunk = !1),
              (a.g.getVehicleWidth = (e) => {
                try {
                  if (e && mp.vehicles.exists(e)) {
                    const t = mp.game.gameplay.getModelDimensions(e.model);
                    return t.max.y - t.min.y;
                  }
                  return 1;
                } catch (e) {
                  return (
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/circle",
                      "getVehicleWidth",
                      e.toString()
                    ),
                    1
                  );
                }
              });
            const g = (e, t) => {
              try {
                let o = mp.players.atRemoteId(e),
                  i = mp.vehicles.atRemoteId(t);
                if (
                  !(
                    o &&
                    mp.players.exists(o) &&
                    "player" === o.type &&
                    i &&
                    mp.vehicles.exists(i)
                  )
                )
                  return;
                const n = a.g.getVehicleWidth(i);
                o.attachTo(
                  i.handle,
                  -1,
                  0,
                  -n / 2 + 0.5,
                  0.4,
                  0,
                  0,
                  0,
                  !1,
                  !1,
                  !1,
                  !1,
                  20,
                  !0
                ),
                  o == a.g.localplayer && (a.g.attachedtotrunk = !0);
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/circle",
                  "attachPlayerToTrunk",
                  e.toString()
                );
              }
            };
            mp.events.add("client.vehicle.trunk.attachPlayer", g),
              mp.events.add(
                "client.vehicle.trunk.detachPlayer",
                (e, t, o = !0) => {
                  try {
                    let i = mp.players.atRemoteId(e);
                    if (!i || "player" !== i.type || !mp.players.exists(i))
                      return;
                    let n = i.position,
                      s = mp.vehicles.atRemoteId(t);
                    s &&
                      mp.vehicles.exists(s) &&
                      (n = s.getOffsetFromInWorldCoords(0, -3, 0)),
                      i.detach(!0, !0),
                      i == a.g.localplayer &&
                        (o &&
                          ((i.position = n),
                          (i.posX = n.x),
                          (i.posY = n.y),
                          (i.posZ = n.z)),
                        (a.g.attachedtotrunk = !1));
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/circle",
                      "client.vehicle.trunk.detachPlayer",
                      e.toString()
                    );
                  }
                }
              ),
              mp.events.add("openCityhallLiftMenu", (e) => {
                try {
                  if (a.g.circleOpen) return void a.g.CloseCircle();
                  10 == e
                    ? a.g.OpenCircle("Лифт 1", 0)
                    : 11 == e
                    ? a.g.OpenCircle("Лифт 2", 0)
                    : 12 == e
                    ? a.g.OpenCircle("Лифт", 0)
                    : 13 == e && a.g.OpenCircle("Лифт FIB", 0);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/circle",
                    "openCityhallLiftMenu",
                    e.toString()
                  );
                }
              }),
              mp.events.add("openNewsLiftMenu", (e) => {
                try {
                  if (a.g.circleOpen) return void a.g.CloseCircle();
                  2 == e
                    ? a.g.OpenCircle("Лифт News 1", 0)
                    : 3 == e && a.g.OpenCircle("Лифт News 2", 0);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/circle",
                    "openCityhallLiftMenu",
                    e.toString()
                  );
                }
              }),
              mp.events.add("openSpecialChooseMenu", (e) => {
                try {
                  if (a.g.circleOpen) return void a.g.CloseCircle();
                  0 == e
                    ? a.g.OpenCircle("Открыть планшет", 0)
                    : 1 == e && a.g.OpenCircle("Покинуть фракцию/семью", 0);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/circle",
                    "openTableChooseMenu",
                    e.toString()
                  );
                }
              }),
              mp.events.add("playerStreamIn", (e) => {
                try {
                  if (e) {
                    let t = e.getVariable("AttachToVehicle");
                    t &&
                      setTimeout(function () {
                        e && mp.players.exists(e) && g(e.remoteId, Number(t));
                      }, 2500);
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/circle",
                    "playerStreamIn",
                    e.toString()
                  );
                }
              }),
              mp.events.add("render", () => {
                try {
                  if (!a.g.loggedin) return;
                  1 == a.g.attachedtotrunk &&
                    (mp.game.graphics.drawText(
                      "Нажмите 'F', чтобы вылезти из багажника.",
                      [0.5, 0.8],
                      {
                        font: 0,
                        color: [255, 255, 255, 185],
                        scale: [0.35, 0.35],
                        outline: !0,
                      }
                    ),
                    a.g.ToggleMovementControls());
                } catch (e) {
                  if (
                    new Date().getTime() - a.g.trycatchtime["player/circle"] <
                    6e4
                  )
                    return;
                  (a.g.trycatchtime["player/circle"] = new Date().getTime()),
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/circle",
                      "render",
                      e.toString()
                    );
                }
              });
            let _ = !1;
            mp.events.add("playerEnterVehicle", (e, t) => {
              try {
                (_ = !1), mp.gui.emmit("window.vehicleState.belt (false)");
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/circle",
                  "playerEnterVehicle",
                  e.toString()
                );
              }
            }),
              mp.events.add("playerLeaveVehicle", () => {
                try {
                  (_ = !1),
                    mp.gui.emmit("window.vehicleState.belt (false)"),
                    a.g.localplayer.setConfigFlag(32, !0);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/circle",
                    "playerLeaveVehicle",
                    e.toString()
                  );
                }
              }),
              (a.g.binderFunctions.onBelt = () => {
                try {
                  const e = a.g.localplayer.vehicle;
                  if (!e || a.g.localplayer.isInAnyPlane()) return;
                  let t = e.getClass();
                  if (8 == t || 13 == t || 14 == t)
                    return void mp.events.call(
                      "notify",
                      4,
                      9,
                      "В этом типе транспортных средств нет ремней безопасности.",
                      3e3
                    );
                  _
                    ? a.g.localplayer.setConfigFlag(32, !0)
                    : a.g.localplayer.setConfigFlag(32, !1),
                    mp.events.callRemote("beltSelected", _),
                    (_ = !_),
                    mp.gui.emmit(`window.vehicleState.belt (${_})`);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/circle",
                    "global.binderFunctions.onBelt",
                    e.toString()
                  );
                }
              }),
              (a.g.pplMuted = []),
              mp.events.add("MutePlayer", function (e) {
                try {
                  pplMuted[e] = !0;
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/circle",
                    "MutePlayer",
                    e.toString()
                  );
                }
              }),
              mp.events.add("unMutePlayer", function (e) {
                try {
                  !0 === pplMuted[e] && delete pplMuted[e];
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/circle",
                    "unMutePlayer",
                    e.toString()
                  );
                }
              }),
              (a.g.pplMutedMe = []),
              mp.events.add("MutedMePlayer", function (e) {
                try {
                  pplMutedMe[e] = !0;
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/circle",
                    "MutedMePlayer",
                    e.toString()
                  );
                }
              }),
              mp.events.add("unMuteMeForPlayer", function (e) {
                try {
                  !0 === pplMutedMe[e] && delete pplMutedMe[e];
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/circle",
                    "unMuteMeForPlayer",
                    e.toString()
                  );
                }
              });
          },
          4735: (e, t, a) => {
            let o = null;
            a.g.openAlco = !1;
            const i = {
                10: "Bahama Mamas West",
                11: "Vanila Unicorn",
                12: "Tequi-la-la",
                13: "Diamond Penthouse",
              },
              n = {
                10: ["«Martini Asti»", "«Sambuca»", "«Campari»"],
                11: [
                  "«На корке лимона»",
                  "«На бруснике»",
                  "«Русский стандарт»",
                ],
                12: ["«Asahi»", "«Midori»", "«Yamazaki»"],
                13: ["«Дживан»", "«Арарат»", "«Noyan Tapan»"],
              },
              s = [75, 115, 150];
            var r = 0;
            mp.events.add("openAlco", (e, t, l, m) => {
              try {
                (a.g.openAlco || o) && o.Close(),
                  setTimeout(() => {
                    (a.g.openAlco = !0),
                      (r = 0),
                      a.g.menuOpen(),
                      (mp.gui.cursor.visible = !1);
                    var c = mp.game.graphics.getScreenActiveResolution(0, 0);
                    const p = {
                      RightMiddle: new a.g.Point(c.x - 180, c.y / 2),
                      LeftMiddle: new a.g.Point(0, c.y / 2 - 200),
                    };
                    (o = new a.g.NativeMenu("Клуб", i[e], p.LeftMiddle)),
                      mp.discord.update(
                        "Выбирает алкоголь в клубе",
                        `на RedAge под ID ${a.g.localplayer.remoteId}`
                      );
                    var g = [
                      ` ${n[e][0]} ${(s[0] * t).toFixed()}$`,
                      ` ${n[e][1]} ${(s[1] * t).toFixed()}$`,
                      ` ${n[e][2]} ${(s[2] * t).toFixed()}$`,
                    ];
                    o.AddItem(
                      new UIMenuListItem(
                        "Напитки",
                        "Вы можете выбрать любой напиток",
                        new ItemsCollection(g)
                      )
                    ),
                      l &&
                        (o.AddItem(
                          new UIMenuItem(
                            "Инфо",
                            `Материалы: ${m[0]}\n${n[e][0]} - ${m[1]}\n${n[e][1]} - ${m[2]}\n${n[e][2]} - ${m[3]}`
                          )
                        ),
                        o.AddItem(
                          new UIMenuItem(
                            "Взять",
                            "Взять выбранный напиток со склада"
                          )
                        ),
                        o.AddItem(
                          new UIMenuItem(
                            "Скрафтить",
                            "Скрафтить выбранный напиток"
                          )
                        ),
                        o.AddItem(
                          new UIMenuItem(
                            "Установить цену",
                            "Установить модификатор цены для всех продуктов (от 50% до 150%)"
                          )
                        )),
                      o.AddItem(
                        new UIMenuItem("Купить", "Купить выбранный напиток")
                      );
                    var _ = new UIMenuItem("Закрыть", "Закрыть меню");
                    (_.BackColor = new Color(255, 0, 0)),
                      o.AddItem(_),
                      o.ItemSelect.on((e) => {
                        new Date().getTime() - a.g.lastCheck < 100 ||
                          ((a.g.lastCheck = new Date().getTime()),
                          "Купить" == e.Text
                            ? mp.events.callRemote("menu_alco", 0, r)
                            : "Взять" == e.Text
                            ? mp.events.callRemote("menu_alco", 1, r)
                            : "Скрафтить" == e.Text
                            ? mp.events.callRemote("menu_alco", 2, r)
                            : "Установить цену" == e.Text
                            ? ((a.g.openAlco = !1),
                              a.g.menuClose(),
                              o.Close(),
                              (o = null),
                              mp.events.callRemote("menu_alco", 3, 0))
                            : "Закрыть" == e.Text &&
                              ((a.g.openAlco = !1),
                              a.g.menuClose(),
                              o.Close(),
                              (o = null)));
                      }),
                      o.ListChange.on((e, t) => {
                        r = t;
                      }),
                      o.Open(),
                      o.MenuClose.on(() => {
                        a.g.openAlco && o.Open();
                      });
                  }, 0);
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/clubmenu",
                  "openAlco",
                  e.toString()
                );
              }
            }),
              mp.events.add("render", () => {
                try {
                  if (!a.g.loggedin) return;
                  (!a.g.openAlco && !o) ||
                    (!mp.gui.cursor.visible && a.g.menuCheck()) ||
                    ((a.g.openAlco = !1),
                    a.g.menuClose(),
                    o.Close(),
                    (o = null));
                } catch (e) {
                  if (
                    new Date().getTime() - a.g.trycatchtime["casino/roulette"] <
                    6e4
                  )
                    return;
                  (a.g.trycatchtime["casino/roulette"] = new Date().getTime()),
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/clubmenu",
                      "render",
                      e.toString()
                    );
                }
              });
          },
          3601: (e, t, a) => {
            var o = "",
              i = "";
            let n = !1;
            (a.g.openDialog = () => {
              mp.gui.emmit(
                `window.router.setPopUp("PopupConfirm", {title: "Подтверждение", text: "${o}"});`
              ),
                (mp.gui.cursor.visible = !0),
                (n = !1),
                a.g.menuCheck() ||
                  (a.g.menuOpen(!0), (n = !0), (a.g.isPopup = !0));
            }),
              (a.g.closeDialog = () => {
                mp.gui.emmit("window.router.setPopUp()"),
                  n
                    ? a.g.menuClose()
                    : s && mp.events.callRemote("popup.list.callback", null),
                  (n = !1),
                  (a.g.isPopup = !1),
                  (s = !1);
              }),
              mp.events.add("openDialog", (e, t) => {
                (i = e), (o = t), a.g.openDialog();
              }),
              mp.events.add("client:OnDialogCallback", (e) => {
                "tuningbuy" == i
                  ? mp.events.call("client.custom.sbuy", e)
                  : mp.events.callRemote("dialogCallback", i, e),
                  a.g.closeDialog();
              }),
              mp.events.add("openHospitalDialog", (e) => {
                mp.gui.emmit(
                  `window.router.setPopUp("HospitalPopupConfirm", {title: "Подтверждение", text: "${e}"});`
                ),
                  (mp.gui.cursor.visible = !0),
                  (n = !1),
                  a.g.menuCheck() ||
                    (a.g.menuOpen(!0),
                    mp.discord.update(
                      "Общается с врачами в больнице",
                      `на RedAge под ID ${a.g.localplayer.remoteId}`
                    ),
                    (n = !0),
                    (a.g.isPopup = !0));
              }),
              mp.events.add("client:OnHospitalDialogCallback", (e) => {
                mp.events.callRemote("server:OnHospitalDialogCallback", e),
                  a.g.closeDialog();
              });
            let s = !1;
            mp.events.add("popup.list.open", (e, t) => {
              mp.gui.emmit(
                `window.router.setPopUp("PopupSelect", {title: '${e}', elements: '${t}'});`
              ),
                (mp.gui.cursor.visible = !0),
                (n = !1),
                (s = !0),
                a.g.menuCheck() ||
                  (a.g.menuOpen(!0), (n = !0), (a.g.isPopup = !0));
            }),
              mp.events.add("popup.list.selected", (e) => {
                mp.events.callRemote("popup.list.callback", e),
                  (s = !1),
                  a.g.closeDialog();
              });
          },
          303: (e, t, a) => {
            const o = {
              width: [
                0.002, 0.0025, 0.003, 0.0035, 0.004, 0.0045, 0.005, 0.0055,
                0.006, 0.0065, 0.007, 0.0075, 0.008, 0.0085, 0.009, 0.0095,
                0.01, 0.0105, 0.011, 0.0115, 0.012, 0.0125, 0.013, 0.0135,
                0.014, 0.0145, 0.015, 0.0155, 0.016, 0.0165, 0.017, 0.0175,
                0.018, 0.0185, 0.019, 0.0195, 0.02,
              ],
              gap: [
                0, 5e-4, 0.001, 0.0015, 0.002, 0.0025, 0.003, 0.0035, 0.004,
                0.0045, 0.005, 0.0055, 0.006, 0.0065, 0.007, 0.0075, 0.008,
                0.0085, 0.009, 0.0095, 0.01,
              ],
              thickness: [
                0.002, 0.004, 0.006, 0.008, 0.01, 0.012, 0.014, 0.016, 0.018,
                0.02,
              ],
              opacity: [25, 50, 75, 100, 125, 150, 175, 200, 225, 255],
            };
            (a.g.crosshairParameters = {
              toggled: !1,
              width: 2,
              gap: 2,
              dot: !0,
              thickness: 0,
              color: [255, 255, 255],
              opacity: 9,
              checkp: !0,
            }),
              mp.events.add("render", () => {
                try {
                  if (!a.g.loggedin) return;
                  if (a.g.menuCheck()) return;
                  if (
                    a.g.crosshairParameters.toggled &&
                    !a.g.IsWeaponSniper() &&
                    (mp.game.ui.hideHudComponentThisFrame(14),
                    mp.game.player.isFreeAiming() &&
                      -1569615261 != a.g.weaponData.weapon)
                  ) {
                    const e = mp.game.graphics.getScreenAspectRatio(!0),
                      t = mp.game.graphics,
                      i = o.thickness[a.g.crosshairParameters.thickness],
                      n = o.width[a.g.crosshairParameters.width],
                      s = o.gap[a.g.crosshairParameters.gap],
                      r = a.g.crosshairParameters.color[0],
                      l = a.g.crosshairParameters.color[1],
                      m = a.g.crosshairParameters.color[2],
                      c = o.opacity[a.g.crosshairParameters.opacity];
                    if (
                      (t.drawRect(0.5 - s - n / 2, 0.5, n, i, r, l, m, c),
                      t.drawRect(0.5 + s + n / 2, 0.5, n, i, r, l, m, c),
                      t.drawRect(
                        0.5,
                        0.5 - s * e - (n * e) / 2,
                        i / e,
                        n * e,
                        r,
                        l,
                        m,
                        c
                      ),
                      t.drawRect(
                        0.5,
                        0.5 + s * e + (n * e) / 2,
                        i / e,
                        n * e,
                        r,
                        l,
                        m,
                        c
                      ),
                      a.g.crosshairParameters.dot &&
                        t.drawRect(0.5, 0.5, i / 2, (i / 2) * e, r, l, m, c),
                      a.g.crosshairParameters.checkp)
                    ) {
                      const a = mp.game.player.getEntityIsFreeAimingAt();
                      void 0 !== a &&
                        null != a &&
                        "player" == a.type &&
                        t.drawRect(
                          0.5,
                          0.517 + s * e + (n * e) / 2,
                          2 * n,
                          i,
                          r,
                          l,
                          m,
                          c
                        );
                    }
                  }
                } catch (e) {
                  if (
                    new Date().getTime() -
                      a.g.trycatchtime["player/crosshair"] <
                    6e4
                  )
                    return;
                  (a.g.trycatchtime["player/crosshair"] = new Date().getTime()),
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/crosshair",
                      "render",
                      e.toString()
                    );
                }
              });
          },
          8572: (e, t, a) => {
            let o = [];
            mp.events.add("client.addHit", (e, t, i, n, s) => {
              let r = a.g.getPlayerByRemoteId(parseInt(t));
              if (null != r && 0 !== r.handle) {
                const t = r.getBoneCoords(i, 0, 0, 0);
                s &&
                  o.push({
                    amount: e,
                    position: new mp.Vector3(t.x, t.y, t.z - 0.2),
                    count: 0,
                    head: n,
                    isDead: !0,
                  }),
                  o.push({
                    amount: e,
                    position: new mp.Vector3(t.x, t.y, t.z),
                    count: 0,
                    head: n,
                  });
              }
            }),
              mp.events.add("render", function () {
                o.forEach((e) => {
                  let t = [255, 255, 255],
                    a = e.amount.toString();
                  if (
                    (e.isDead
                      ? ((a = "DEAD"), (t = [255, 180, 0]))
                      : e.head && (t = [255, 0, 0]),
                    mp.game.graphics.drawText(
                      a,
                      [e.position.x, e.position.y, e.position.z + 1.4],
                      {
                        font: 2,
                        centre: !0,
                        color: [t[0], t[1], t[2], 255 - e.count],
                        scale: [0.3, 0.3],
                        outline: !0,
                      }
                    ),
                    (e.count += 2),
                    (e.position.z += 0.02),
                    e.count > 155)
                  ) {
                    const t = o.findIndex((t) => t === e);
                    o.splice(t, 1);
                  }
                });
              });
          },
          7077: (e, t, a) => {
            "use strict";
            a.r(t), a(8572);
            const o = {
              0: 0,
              1: 11816,
              2: 58271,
              3: 63931,
              4: 14201,
              5: 2108,
              6: 65245,
              7: 57717,
              8: 64157,
              9: 60734,
              10: 4115,
              11: 46078,
              12: 50201,
              13: 24589,
              14: 51826,
              15: 36864,
              16: 52301,
              17: 20781,
              18: 35502,
              19: 24806,
              20: 34414,
              21: 62948,
              22: 45075,
              23: 16335,
              24: 30482,
              25: 20899,
              26: 23639,
              27: 6442,
              28: 3515,
              29: 16562,
              30: 49473,
              31: 52667,
              32: 39785,
              33: 34545,
              34: 57597,
              35: 23553,
              36: 24816,
              37: 24817,
              38: 24818,
              39: 64729,
              40: 45509,
              41: 61163,
              42: 18905,
              43: 26610,
              44: 4089,
              45: 4090,
              46: 35939,
              47: 24504,
              48: 26611,
              49: 4169,
              50: 4170,
              51: 35923,
              52: 26612,
              53: 4185,
              54: 4186,
              55: 26613,
              56: 4137,
              57: 4138,
              58: 26614,
              59: 4153,
              60: 4154,
              61: 60309,
              62: 36029,
              63: 41540,
              64: 51082,
              65: 61007,
              66: 5232,
              67: 22711,
              68: 10706,
              69: 40269,
              70: 28252,
              71: 57005,
              72: 58866,
              73: 64016,
              74: 64017,
              75: 11363,
              76: 27064,
              78: 64096,
              79: 64097,
              80: 11347,
              81: 58868,
              82: 64112,
              83: 64113,
              84: 58869,
              85: 64064,
              86: 64065,
              87: 58870,
              88: 64080,
              89: 64081,
              90: 28422,
              91: 6286,
              92: 61259,
              93: 26875,
              94: 43810,
              95: 37119,
              96: 2992,
              97: 39317,
              98: 31086,
              99: 12844,
              100: 50788,
              101: 5749,
              102: 65068,
              103: 58331,
              104: 45750,
              105: 25260,
              106: 21550,
              107: 29868,
              108: 43536,
              109: 27474,
              110: 19336,
              111: 1356,
              112: 11174,
              113: 37193,
              114: 20178,
              115: 61839,
              116: 20279,
              117: 17719,
              118: 46240,
              119: 17188,
              120: 20623,
              121: 47419,
              122: 49979,
              123: 47495,
              124: 35731,
              125: 64654,
              126: 34911,
              127: 56604,
            };
            mp._events.add("outgoingDamage", (e, t, a, o, i, n) => {
              try {
                if (n < 0) return;
                if (e && "ped" === e.type)
                  return void (t && "player" === t.type
                    ? mp.events.callRemote("server.damage.petToPlayer", t, e, i)
                    : t &&
                      "ped" === t.type &&
                      mp.events.callRemote("server.damage.petToPet", t, e, i));
                if (t && "ped" === t.type)
                  return void mp.events.callRemote(
                    "server.damage.playerToPet",
                    t,
                    i,
                    1
                  );
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "synchronization/player",
                  "outgoingDamage",
                  e.toString()
                );
              }
            }),
              mp.events.add("playerWeaponShot", (e, t) => {
                const i = ((e, t, o = 31) => {
                  const i = a.g.cameraManager.gameplayCam(),
                    n = i.getDirection(),
                    s = i.getCoord(),
                    r = new mp.Vector3(
                      s.x + 200 * n.x,
                      s.y + 200 * n.y,
                      s.z + 200 * n.z
                    ),
                    l = a.g.localplayer.getBoneCoords(26610, 0, 0, 0),
                    m = mp.raycasting.testPointToPoint(
                      s,
                      r,
                      a.g.localplayer,
                      o
                    );
                  let c = r,
                    p = null;
                  if (m)
                    if (
                      ((c = new mp.Vector3(
                        m.position.x,
                        m.position.y,
                        m.position.z
                      )),
                      12 === o)
                    ) {
                      if (m.entity && "number" == typeof m.entity) {
                        const e = mp.peds.atHandle(m.entity);
                        e && 0 !== e.handle && ((c = c), (p = e));
                      }
                    } else {
                      if (
                        m.entity &&
                        "number" != typeof m.entity &&
                        "player" === m.entity.type
                      ) {
                        const e = mp.raycasting.testPointToPoint(
                          l,
                          c,
                          a.g.localplayer,
                          o
                        );
                        e &&
                        ((e.entity && "number" == typeof e.entity) ||
                          "player" !== e.entity.type)
                          ? ((p = null), (c = e.position))
                          : (p = m.entity);
                      }
                      m.entity &&
                        "number" != typeof m.entity &&
                        "vehicle" === m.entity.type &&
                        ((c = e), (p = t));
                    }
                  return { resultPosition: c, resultEntity: p };
                })(e, t, 12);
                if (
                  ((e = i.resultPosition),
                  (t = i.resultEntity) && "ped" === t.type)
                ) {
                  let i = -1,
                    p = 9999;
                  for (let a in o)
                    if (o[a]) {
                      const g = t.getBoneCoords(o[a], 0, 0, 0),
                        _ =
                          ((n = e.x),
                          (s = e.y),
                          (r = e.z),
                          (n - (l = g.x) < 0 ? -(n - l) : n - l) +
                            (s - (m = g.y) < 0 ? -(s - m) : s - m) +
                            (r - (c = g.z) < 0 ? -(r - c) : r - c));
                      _ < p && ((i = a), (p = _));
                    }
                  if (-1 != i) {
                    const o = a.g.localplayer.position;
                    mp.events.callRemote(
                      "server.damage.playerToPet",
                      t,
                      i,
                      getDist(o, e)
                    );
                  }
                } else var n, s, r, l, m, c;
              });
            const i = {
                [mp.game.joaat("weapon_dagger")]: {
                  damage: 33,
                  distance: 5,
                  shotCount: 1,
                  isMelee: !0,
                },
                [mp.game.joaat("weapon_bat")]: {
                  damage: 33,
                  distance: 5,
                  shotCount: 1,
                  isMelee: !0,
                },
                [mp.game.joaat("weapon_bottle")]: {
                  damage: 33,
                  distance: 5,
                  shotCount: 1,
                  isMelee: !0,
                },
                [mp.game.joaat("weapon_crowbar")]: {
                  damage: 33,
                  distance: 5,
                  shotCount: 1,
                  isMelee: !0,
                },
                [mp.game.joaat("weapon_unarmed")]: {
                  damage: 9,
                  distance: 5,
                  shotCount: 1,
                  isMelee: !0,
                },
                [mp.game.joaat("weapon_flashlight")]: {
                  damage: 33,
                  distance: 5,
                  shotCount: 1,
                  isMelee: !0,
                },
                [mp.game.joaat("weapon_golfclub")]: {
                  damage: 33,
                  distance: 5,
                  shotCount: 1,
                  isMelee: !0,
                },
                [mp.game.joaat("weapon_hammer")]: {
                  damage: 33,
                  distance: 5,
                  shotCount: 1,
                  isMelee: !0,
                },
                [mp.game.joaat("weapon_hatchet")]: {
                  damage: 33,
                  distance: 5,
                  shotCount: 1,
                  isMelee: !0,
                },
                [mp.game.joaat("weapon_knuckle")]: {
                  damage: 27,
                  distance: 5,
                  shotCount: 1,
                  isMelee: !0,
                },
                [mp.game.joaat("weapon_knife")]: {
                  damage: 33,
                  distance: 5,
                  shotCount: 1,
                  isMelee: !0,
                },
                [mp.game.joaat("weapon_machete")]: {
                  damage: 33,
                  distance: 5,
                  shotCount: 1,
                  isMelee: !0,
                },
                [mp.game.joaat("weapon_switchblade")]: {
                  damage: 33,
                  distance: 5,
                  shotCount: 1,
                  isMelee: !0,
                },
                [mp.game.joaat("weapon_nightstick")]: {
                  damage: 33,
                  distance: 5,
                  shotCount: 1,
                  isMelee: !0,
                },
                [mp.game.joaat("weapon_wrench")]: {
                  damage: 33,
                  distance: 5,
                  shotCount: 1,
                  isMelee: !0,
                },
                [mp.game.joaat("weapon_battleaxe")]: {
                  damage: 33,
                  distance: 5,
                  shotCount: 1,
                  isMelee: !0,
                },
                [mp.game.joaat("weapon_poolcue")]: {
                  damage: 33,
                  distance: 5,
                  shotCount: 1,
                  isMelee: !0,
                },
                [mp.game.joaat("weapon_stone_hatchet")]: {
                  damage: 33,
                  distance: 5,
                  shotCount: 1,
                  isMelee: !0,
                },
                [mp.game.joaat("weapon_pistol")]: {
                  damage: 17,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_pistol_mk2")]: {
                  damage: 19,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_combatpistol")]: {
                  damage: 18,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_appistol")]: {
                  damage: 19,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_stungun")]: {
                  damage: 0,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_pistol50")]: {
                  damage: 25,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_snspistol")]: {
                  damage: 10,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_snspistol_mk2")]: {
                  damage: 11,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_heavypistol")]: {
                  damage: 25,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_vintagepistol")]: {
                  damage: 12,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_revolver")]: {
                  damage: 50,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_revolver_mk2")]: {
                  damage: 57,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_doubleaction")]: {
                  damage: 29,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_marksmanpistol")]: {
                  damage: 77,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_ceramicpistol")]: {
                  damage: 15,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_navyrevolver")]: {
                  damage: 53,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_gadgetpistol")]: {
                  damage: 65,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_glockp80")]: {
                  damage: 15,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_pumpshotgun")]: {
                  damage: 28,
                  distance: 30,
                  shotCount: 8,
                },
                [mp.game.joaat("weapon_pumpshotgun_mk2")]: {
                  damage: 33,
                  distance: 40,
                  shotCount: 8,
                },
                [mp.game.joaat("weapon_sawnoffshotgun")]: {
                  damage: 24,
                  distance: 30,
                  shotCount: 8,
                },
                [mp.game.joaat("weapon_assaultshotgun")]: {
                  damage: 25,
                  distance: 30,
                  shotCount: 6,
                },
                [mp.game.joaat("weapon_bullpupshotgun")]: {
                  damage: 33,
                  distance: 30,
                  shotCount: 8,
                },
                [mp.game.joaat("weapon_dbshotgun")]: {
                  damage: 50,
                  distance: 20,
                  shotCount: 8,
                },
                [mp.game.joaat("weapon_heavyshotgun")]: {
                  damage: 45,
                  distance: 75,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_autoshotgun")]: {
                  damage: 25,
                  distance: 30,
                  shotCount: 6,
                },
                [mp.game.joaat("weapon_musket")]: {
                  damage: 70,
                  distance: 100,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_combatshotgun")]: {
                  damage: 70,
                  distance: 35,
                  shotCount: 6,
                },
                [mp.game.joaat("weapon_microsmg")]: {
                  damage: 7,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_smg")]: {
                  damage: 12,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_smg_mk2")]: {
                  damage: 12,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_combatpdw")]: {
                  damage: 12,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_machinepistol")]: {
                  damage: 12,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_minismg")]: {
                  damage: 7,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_assaultsmg")]: {
                  damage: 8,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_assaultrifle")]: {
                  damage: 11,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_assaultrifle_mk2")]: {
                  damage: 14,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_carbinerifle")]: {
                  damage: 12,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_carbinerifle_mk2")]: {
                  damage: 14,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_advancedrifle")]: {
                  damage: 12,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_specialcarbine")]: {
                  damage: 12,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_specialcarbine_mk2")]: {
                  damage: 12.5,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_bullpuprifle")]: {
                  damage: 12,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_bullpuprifle_mk2")]: {
                  damage: 12,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_compactrifle")]: {
                  damage: 12,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_militaryrifle")]: {
                  damage: 13,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_mg")]: {
                  damage: 14,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_combatmg")]: {
                  damage: 14,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_combatmg_mk2")]: {
                  damage: 17,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_gusenberg")]: {
                  damage: 12,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_sniperrifle")]: {
                  damage: 50,
                  distance: 300,
                  shotCount: 1,
                  isSniper: !0,
                },
                [mp.game.joaat("weapon_heavysniper")]: {
                  damage: 70,
                  distance: 300,
                  shotCount: 1,
                  isSniper: !0,
                },
                [mp.game.joaat("weapon_heavysniper_mk2")]: {
                  damage: 90,
                  distance: 300,
                  shotCount: 1,
                  isSniper: !0,
                },
                [mp.game.joaat("weapon_marksmanrifle")]: {
                  damage: 25,
                  distance: 300,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_marksmanrifle_mk2")]: {
                  damage: 33,
                  distance: 300,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_rpg")]: {
                  damage: 0,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_grenadelauncher")]: {
                  damage: 0,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_grenadelauncher_smoke")]: {
                  damage: 0,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_minigun")]: {
                  damage: 20,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_firework")]: {
                  damage: 0,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_railgun")]: {
                  damage: 0,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_hominglauncher")]: {
                  damage: 0,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_compactlauncher")]: {
                  damage: 0,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_rayminigun")]: {
                  damage: 20,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_fireextinguisher")]: {
                  damage: 0,
                  distance: 129,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_snowball")]: {
                  damage: 1,
                  distance: 25,
                  shotCount: 1,
                },
                [mp.game.joaat("weapon_ball")]: {
                  damage: 1,
                  distance: 25,
                  shotCount: 1,
                },
              },
              n = new (class {
                constructor() {
                  this.parts = {};
                }
                onSuccessShoot(e, t) {
                  const o = a.g.cameraManager.gameplayCam(),
                    i = o.getDirection(),
                    n = o.getCoord();
                  let s = new mp.Vector3(
                    n.x + 200 * i.x,
                    n.y + 200 * i.y,
                    n.z + 200 * i.z
                  );
                  const r = mp.players.local.getBoneCoords(26610, 0, 0, 0),
                    l = mp.raycasting.testPointToPoint(
                      n,
                      s,
                      mp.players.local,
                      31
                    );
                  let m = null;
                  if (l) {
                    if (
                      ((s = new mp.Vector3(
                        l.position.x,
                        l.position.y,
                        l.position.z
                      )),
                      l.entity &&
                        "number" != typeof l.entity &&
                        "player" === l.entity.type)
                    ) {
                      const e = mp.raycasting.testPointToPoint(
                        r,
                        s,
                        mp.players.local,
                        31
                      );
                      !e ||
                      ("number" != typeof e.entity &&
                        "player" === e.entity.type)
                        ? (m = l.entity)
                        : ((m = null), (s = e.position));
                    }
                    l.entity &&
                      "number" != typeof l.entity &&
                      "vehicle" === l.entity.type &&
                      ((s = e), (m = t));
                  }
                  if (s && m && "player" === m.type) {
                    if (
                      !mp.players.local.isShooting() &&
                      "0.2 beta" == mp.version.core
                    )
                      return;
                    this.getHitBone(s, m);
                  }
                }
                getBoneDamageMultiplier(e) {
                  const t = this.parts[e];
                  return t ? t.damageMultiplier : 1;
                }
                addBone(e, t) {
                  const a = {};
                  (a.damageMultiplier = t), (this.parts[e] = a);
                }
              })(),
              s = {};
            for (const e in i) s[e >> 0] = i[e];
            n.addBone(0, 0.9),
              n.addBone(11816, 0.9),
              n.addBone(58271, 0.85),
              n.addBone(63931, 0.6),
              n.addBone(14201, 0.9),
              n.addBone(2108, 0.85),
              n.addBone(65245, 0.6),
              n.addBone(57717, 0.95),
              n.addBone(64157, 1),
              n.addBone(60734, 1),
              n.addBone(4115, 1.15),
              n.addBone(46078, 1.1),
              n.addBone(50201, 0.95),
              n.addBone(24589, 0.85),
              n.addBone(51826, 0.6),
              n.addBone(36864, 1.1),
              n.addBone(52301, 0.95),
              n.addBone(20781, 0.85),
              n.addBone(35502, 0.6),
              n.addBone(24806, 1.2),
              n.addBone(34414, 1.25),
              mp._events.add("outgoingDamage", (e, t, i, l, m, c) => {
                if (
                  a.g.cuffed ||
                  !0 === a.g.isDeath ||
                  a.g.isDemorgan ||
                  a.g.dmgdisabled ||
                  a.g.isInSafeZone
                )
                  return !0;
                if (t && "player" === t.type && mp.players.exists(t)) {
                  if (
                    a.g.localplayer.PlayerAirsoftTeam &&
                    a.g.localplayer.PlayerAirsoftTeam >= 0 &&
                    a.g.localplayer.PlayerAirsoftTeam == t.PlayerAirsoftTeam
                  )
                    return !0;
                  if (t.AGM) return !0;
                  if (t.InDeath) return !0;
                  if (h) {
                    const e = t.organization;
                    if (
                      0 != a.g.organizationId &&
                      0 != e &&
                      a.g.organizationId === e
                    )
                      return !0;
                  }
                  if (a.g.hitPoint) {
                    const e = l >> 0;
                    a.g.vdist2(a.g.localplayer.position, t.position, !0);
                    let i = c;
                    const p = o[m],
                      g = s[e];
                    if (g) {
                      const e = n.getBoneDamageMultiplier(p),
                        t = g.shotCount;
                      i = (a.g.clamp(g.damage, g.damage / 2, g.damage) * e) / t;
                    }
                    const _ = t.getHealth() + t.getArmour();
                    mp.events.call(
                      "client.addHit",
                      Math.round(i),
                      t.remoteId,
                      p,
                      !!r.includes(m),
                      !!(_ - i <= 0)
                    );
                  }
                }
                i &&
                  "player" === i.type &&
                  mp.game.weapon.cancelCurrentDamageEvent();
              });
            const r = [20],
              l = () => {
                a.g.localplayer.getArmour() <= 0 &&
                  !0 === a.g.isArmor &&
                  (mp.events.callRemote("deletearmor"), (a.g.isArmor = !1));
              };
            mp._events.add("incomingDamage", (e, t, i, r, m, c) => {
              if (i === mp.players.local) {
                if (!0 === a.g.isDeath || a.g.admingm || a.g.isInSafeZone)
                  return !0;
                const e = r >> 0;
                if (911657153 == e) return !0;
                if (mp.players.exists(t)) {
                  if (
                    a.g.localplayer.PlayerAirsoftTeam &&
                    a.g.localplayer.PlayerAirsoftTeam >= 0 &&
                    a.g.localplayer.PlayerAirsoftTeam == t.PlayerAirsoftTeam
                  )
                    return !0;
                  if (h) {
                    const e = t.organization;
                    if (
                      0 != a.g.organizationId &&
                      0 != e &&
                      a.g.organizationId === e
                    )
                      return !0;
                  }
                  a.g.vdist2(t.position, mp.players.local.position, !0);
                  let i = c;
                  const r = o[m],
                    p = s[e];
                  if (p) {
                    const e = n.getBoneDamageMultiplier(r),
                      t = p.shotCount;
                    i = (a.g.clamp(p.damage, p.damage / 2, p.damage) * e) / t;
                  }
                  const g =
                    mp.players.local.getHealth() + mp.players.local.getArmour();
                  if (!p || !p.isMelee)
                    return g - i <= 0
                      ? (l(), !1)
                      : (mp.players.local.applyDamageTo(Math.round(i) + 1, !0),
                        l(),
                        !0);
                  mp.game.weapon.setCurrentDamageEventAmount(Math.round(i)),
                    l();
                }
              }
            }),
              mp._events.add("explosion", function (e, t, a) {
                return !0;
              }),
              mp._events.add("projectile", function (e, t, a, o, i) {
                return !0;
              }),
              (a.g.weaponGroup = {
                Unarmed: 2685387236,
                Melee: 3566412244,
                Pistol: 416676503,
                SMG: 3337201093,
                AssaultRifle: 970310034,
                DigiScanner: 3539449195,
                FireExtinguisher: 4257178988,
                MG: 1159398588,
                NightVision: 3493187224,
                Parachute: 431593103,
                Shotgun: 860033945,
                Sniper: 3082541095,
                Stungun: 690389602,
                Heavy: 2725924767,
                Thrown: 1548507267,
                PetrolCan: 1595662460,
              }),
              (a.g.getCurrentWeapon = function () {
                return mp.game.invoke(
                  getNative("GET_SELECTED_PED_WEAPON"),
                  a.g.localplayer.handle
                );
              }),
              (a.g.weaponData = {
                weapon: mp.game.joaat("weapon_unarmed"),
                group: a.g.weaponGroup.Unarmed,
                ammo: 0,
                isMelee: !1,
              }),
              mp.game.joaat("weapon_revolver"),
              mp.game.joaat("weapon_revolver_mk2"),
              mp.game.joaat("weapon_doubleaction"),
              mp.game.joaat("weapon_navyrevolver"),
              mp.events.add(a.g.renderName["250ms"], () => {
                const e = a.g.getCurrentWeapon();
                if (e != a.g.weaponData.weapon) {
                  switch (a.g.weaponData.weapon) {
                    case mp.game.joaat("weapon_ball") >> 0:
                    case mp.game.joaat("weapon_snowball") >> 0:
                      return (
                        (a.g.weaponData.weapon = e),
                        (a.g.weaponData.group =
                          mp.game.weapon.getWeapontypeGroup(
                            a.g.weaponData.weapon
                          )),
                        (a.g.weaponData.isMelee = [
                          a.g.weaponGroup.Unarmed,
                          a.g.weaponGroup.Melee,
                        ].includes(a.g.weaponData.group)),
                        void mp.events.callRemote("server.weapon.remove")
                      );
                  }
                  mp.game.invoke(
                    getNative("GIVE_WEAPON_TO_PED"),
                    a.g.localplayer.handle,
                    a.g.weaponData.weapon,
                    a.g.weaponData.ammo,
                    !1,
                    !0
                  ),
                    a.g.localplayer.isClimbing ||
                      ((a.g.weaponData.ammo = 0),
                      mp.game.invoke(
                        getNative("SET_PED_AMMO"),
                        a.g.localplayer.handle,
                        a.g.weaponData.weapon,
                        0
                      ),
                      a.g.localplayer.taskReloadWeapon(!1),
                      a.g.localplayer.taskSwapWeapon(!1),
                      mp.gui.emmit("window.hudStore.ammo (0)"));
                }
                mp.game.player.setVehicleDefenseModifier(0.005);
              });
            const m = [
                a.g.Inputs.MELEE_ATTACK1,
                a.g.Inputs.MELEE_ATTACK_LIGHT,
                a.g.Inputs.MELEE_ATTACK_ALTERNATE,
              ],
              c = [
                a.g.Inputs.VEH_ATTACK,
                a.g.Inputs.VEH_ATTACK2,
                a.g.Inputs.VEH_PASSENGER_ATTACK,
              ];
            (Natives._REMOVE_STEALTH_KILL = (e, t) =>
              mp.game.invoke("0xA6A12939F16D85BE", e, t)),
              mp.events.add(a.g.renderName.render, () => {
                if (
                  a.g.loggedin &&
                  (a.g.weaponData.isMelee
                    ? (mp.game.controls.disableControlAction(
                        2,
                        a.g.Inputs.MELEE_ATTACK_LIGHT,
                        !0
                      ),
                      (a.g.localplayer.isPerformingStealthKill() ||
                        Natives.GET_PED_STEALTH_MOVEMENT(
                          a.g.localplayer.handle
                        )) &&
                        (mp.game.controls.disableControlAction(
                          2,
                          a.g.Inputs.MELEE_ATTACK_HEAVY,
                          !0
                        ),
                        mp.game.controls.disableControlAction(
                          2,
                          a.g.Inputs.MELEE_ATTACK_ALTERNATE,
                          !0
                        )))
                    : m.forEach((e) => {
                        mp.game.controls.disableControlAction(2, e, !0);
                      }),
                  a.g.localplayer.vehicle)
                ) {
                  mp.game.controls.disableControlAction(
                    2,
                    a.g.Inputs.VEH_MELEE_HOLD,
                    !0
                  );
                  const e = a.g.getCurrentWeapon(),
                    t = mp.game.weapon.getWeapontypeGroup(e);
                  a.g.localplayer.vehicle.getPedInSeat(-1) ===
                    a.g.localplayer.handle &&
                    [
                      a.g.weaponGroup.Pistol,
                      a.g.weaponGroup.SMG,
                      a.g.weaponGroup.AssaultRifle,
                      a.g.weaponGroup.MG,
                      a.g.weaponGroup.Shotgun,
                      a.g.weaponGroup.Sniper,
                      a.g.weaponGroup.Stungun,
                      a.g.weaponGroup.Heavy,
                    ].includes(t) &&
                    c.forEach((e) => {
                      mp.game.controls.disableControlAction(2, e, !0);
                    });
                }
              });
            const p = [
                a.g.Inputs.WEAPON_WHEEL_UD,
                a.g.Inputs.WEAPON_WHEEL_LR,
                a.g.Inputs.WEAPON_WHEEL_NEXT,
                a.g.Inputs.WEAPON_WHEEL_PREV,
                a.g.Inputs.SELECT_NEXT_WEAPON,
                a.g.Inputs.SELECT_PREV_WEAPON,
              ],
              g = [
                a.g.Inputs.VEH_SELECT_NEXT_WEAPON,
                a.g.Inputs.VEH_SELECT_PREV_WEAPON,
              ],
              _ = [
                a.g.Inputs.SELECT_WEAPON_UNARMED,
                a.g.Inputs.SELECT_WEAPON_MELEE,
                a.g.Inputs.SELECT_WEAPON_HANDGUN,
                a.g.Inputs.SELECT_WEAPON_SHOTGUN,
                a.g.Inputs.SELECT_WEAPON_SMG,
                a.g.Inputs.SELECT_WEAPON_AUTO_RIFLE,
                a.g.Inputs.SELECT_WEAPON_SNIPER,
                a.g.Inputs.SELECT_WEAPON_HEAVY,
                a.g.Inputs.SELECT_WEAPON_SPECIAL,
              ],
              d = [a.g.Inputs.PREV_WEAPON, a.g.Inputs.NEXT_WEAPON];
            mp.events.add("render", () => {
              a.g.loggedin &&
                (p.forEach((e) => {
                  mp.game.controls.disableControlAction(2, e, !0);
                }),
                mp.game.controls.disableControlAction(
                  2,
                  a.g.Inputs.SELECT_WEAPON,
                  !0
                ),
                g.forEach((e) => {
                  mp.game.controls.disableControlAction(2, e, !0);
                }),
                _.forEach((e) => {
                  mp.game.controls.disableControlAction(2, e, !0);
                }),
                d.forEach((e) => {
                  mp.game.controls.disableControlAction(2, e, !0);
                }));
            });
            let h = !1;
            mp.events.add("client.AirDrop.isZone", (e) => {
              h = e;
            });
          },
          5754: (e, t, a) => {
            a.g.deathTimerOn = !1;
            let o = 0;
            mp.game.gameplay.disableAutomaticRespawn(!0),
              mp.game.gameplay.ignoreNextRestart(!0),
              mp.game.gameplay.setFadeOutAfterDeath(!1),
              mp.game.gameplay.setFadeInAfterDeathArrest(!1),
              mp.game.gameplay.setFadeInAfterLoad(!1),
              mp.events.add("DeathTimer", (e) => {
                try {
                  "number" == typeof e && Math.round(e) >= 1
                    ? ((a.g.deathTimerOn = !0),
                      a.g.localplayer.setInvincible(!0),
                      (o = new Date().getTime() + Math.round(e)))
                    : a.g.deathTimerOn &&
                      (mp.events.call("clearCarryng"),
                      (a.g.deathTimerOn = !1),
                      a.g.localplayer.setInvincible(!1),
                      a.g.binderFunctions.c_globalEscape(!0),
                      mp.events.call("client.phone.close"));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/death",
                    "DeathTimer",
                    e.toString()
                  );
                }
              });
            var i = !1,
              n = !1;
            mp.events.add("blockMove", function (e) {
              try {
                i = e;
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/death",
                  "blockMove",
                  e.toString()
                );
              }
            }),
              mp.events.add("fullblockMove", function (e) {
                try {
                  n = e;
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/death",
                    "fullblockMove",
                    e.toString()
                  );
                }
              }),
              mp.events.add("playerDeath", async (e, t, o) => {
                try {
                  if (!a.g.loggedin) return;
                  if (e !== a.g.localplayer) return;
                  a.g.binderFunctions.c_globalEscape(!0),
                    mp.events.call("client.phone.close"),
                    a.g.localplayer.vehicle &&
                      (a.g.localplayer.clearTasks(),
                      a.g.localplayer.clearTasksImmediately()),
                    (a.g.inAirsoftLobby && -1 != a.g.inAirsoftLobby) ||
                      (mp.game.audio.playSoundFrontend(
                        -1,
                        "Bed",
                        "WastedSounds",
                        !0
                      ),
                      mp.game.graphics.startScreenEffect(
                        "DeathFailMPIn",
                        0,
                        !0
                      ),
                      mp.game.cam.setCamEffect(1));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/death",
                    "playerDeath",
                    e.toString()
                  );
                }
              }),
              mp.events.add("playerSpawn", () => {
                try {
                  if (!a.g.loggedin) return;
                  (a.g.deathTimerOn = !1),
                    a.g.localplayer.setInvincible(!1),
                    mp.game.graphics.stopScreenEffect("DeathFailMPIn"),
                    mp.game.cam.setCamEffect(0),
                    (a.g.lastCheck = new Date().getTime());
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/death",
                    "playerSpawn",
                    e.toString()
                  );
                }
              }),
              mp.events.add("render", () => {
                try {
                  if (!a.g.loggedin) return;
                  if (
                    (a.g.isDeath
                      ? (mp.game.controls.disableAllControlActions(2),
                        mp.game.controls.enableControlAction(
                          2,
                          a.g.Inputs.LOOK_LR,
                          !0
                        ),
                        mp.game.controls.enableControlAction(
                          2,
                          a.g.Inputs.LOOK_UD,
                          !0
                        ),
                        mp.game.controls.enableControlAction(
                          2,
                          a.g.Inputs.LOOK_UP_ONLY,
                          !0
                        ),
                        mp.game.controls.enableControlAction(
                          2,
                          a.g.Inputs.LOOK_DOWN_ONLY,
                          !0
                        ),
                        mp.game.controls.enableControlAction(
                          2,
                          a.g.Inputs.LOOK_LEFT_ONLY,
                          !0
                        ),
                        mp.game.controls.enableControlAction(
                          2,
                          a.g.Inputs.LOOK_RIGHT_ONLY,
                          !0
                        ))
                      : (i || n) &&
                        (mp.game.controls.disableAllControlActions(2),
                        n ||
                          (mp.game.controls.enableControlAction(2, 30, !0),
                          mp.game.controls.enableControlAction(2, 31, !0),
                          mp.game.controls.enableControlAction(2, 32, !0),
                          mp.game.controls.enableControlAction(2, 1, !0),
                          mp.game.controls.enableControlAction(2, 2, !0))),
                    a.g.deathTimerOn)
                  ) {
                    const e = Math.trunc((o - new Date().getTime()) / 1e3);
                    if (e >= 0) {
                      mp.game.cam.doScreenFadeIn(500),
                        mp.discord.update(
                          "Ждёт медиков...",
                          `на RedAge под ID ${a.g.localplayer.remoteId}`
                        );
                      const t = Math.trunc(e / 60),
                        o = e % 60;
                      mp.game.graphics.drawText(
                        `До попадания в больницу: ${a.g.formatIntZero(
                          t,
                          2
                        )}:${a.g.formatIntZero(o, 2)}`,
                        [0.5, 0.8],
                        {
                          font: 0,
                          color: [255, 255, 255, 200],
                          scale: [0.35, 0.35],
                          outline: !0,
                        }
                      );
                    }
                  }
                  mp.game.controls.isControlPressed(0, 32) ||
                  mp.game.controls.isControlPressed(0, 33) ||
                  mp.game.controls.isControlPressed(0, 321) ||
                  mp.game.controls.isControlPressed(0, 34) ||
                  mp.game.controls.isControlPressed(0, 35) ||
                  mp.game.controls.isControlPressed(0, 24) ||
                  1 == a.g.isDeath ||
                  (a.g.localplayer.isInAnyVehicle(!1) &&
                    null != a.g.localplayer.vehicle &&
                    0 != a.g.localplayer.vehicle.getSpeed())
                    ? ((a.g.afkSecondsCount = 0),
                      mp.events.call("updateAFKStatus_client", !1))
                    : a.g.spectating;
                } catch (e) {
                  if (
                    new Date().getTime() - a.g.trycatchtime["player/death"] <
                    6e4
                  )
                    return;
                  (a.g.trycatchtime["player/death"] = new Date().getTime()),
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/death",
                      "render",
                      e.toString()
                    );
                }
              });
          },
          8496: (e, t, a) => {
            mp.events.add("dial", (e, t, o) => {
              try {
                switch (e) {
                  case "open":
                    1 == o &&
                      (mp.gui.emmit("window.router.setHud()"), a.g.menuClose());
                    var i = Math.random(2, 5);
                    (t = t),
                      (i = i),
                      mp.gui.emmit(
                        `window.router.setView("PlayerBreakingLock", {value: ${t}, off: ${i}})`
                      ),
                      a.g.menuOpen();
                    break;
                  case "close":
                    mp.gui.emmit("window.router.setHud()"), a.g.menuClose();
                    break;
                  case "call":
                    mp.events.callRemote("dialPress", t), a.g.menuClose();
                }
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/dial",
                  "dial",
                  e.toString()
                );
              }
            });
          },
          9958: (e, t, a) => {
            (a.g.DiscordDefault = () =>
              mp.discord.update(
                "Наслаждается жизнью",
                `на RedAge под ID ${a.g.localplayer.remoteId}`
              )),
              a.g.DiscordDefault();
          },
          6545: (e, t, a) => {
            let o = !1;
            mp.events.add("passport", (e) => {
              try {
                if ((a.g.menuCheck() && !a.g.isBSearchActive) || o) return;
                mp.gui.emmit(`window.router.setView("PlayerPassport", ${e})`),
                  mp.discord.update(
                    "Смотрит паспорт",
                    `на RedAge под ID ${a.g.localplayer.remoteId}`
                  ),
                  (o = !0),
                  a.g.menuOpen();
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/docs",
                  "passport",
                  e.toString()
                );
              }
            }),
              mp.events.add("licenses", (e) => {
                try {
                  if ((a.g.menuCheck() && !a.g.isBSearchActive) || o) return;
                  mp.gui.emmit(`window.router.setView("PlayerLicense", ${e})`),
                    mp.discord.update(
                      "Смотрит лицензии",
                      `на RedAge под ID ${a.g.localplayer.remoteId}`
                    ),
                    (o = !0),
                    a.g.menuOpen();
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/docs",
                    "licenses",
                    e.toString()
                  );
                }
              }),
              mp.events.add("dochide", () => {
                try {
                  a.g.isBSearchActive
                    ? mp.gui.emmit(
                        `window.router.setView("FractionsBSearch", ${a.g.isBSearchActive});`
                      )
                    : (a.g.menuClose(),
                      mp.gui.emmit("window.router.setHud();")),
                    (o = !1);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/docs",
                    "dochide",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.docs", (e, t) => {
                try {
                  if ((a.g.menuCheck() && !a.g.isBSearchActive) || o) return;
                  mp.gui.emmit(
                    `window.router.setView("PlayerDocumets", {page: '${e}', data: ${t}})`
                  ),
                    mp.discord.update(
                      "Смотрит документы",
                      `на RedAge под ID ${a.g.localplayer.remoteId}`
                    ),
                    (o = !0),
                    a.g.menuOpen();
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/docs",
                    "client.docs",
                    e.toString()
                  );
                }
              }),
              (a.g.CloseDocs = () => {
                o &&
                  (a.g.isBSearchActive
                    ? mp.gui.emmit(
                        `window.router.setView("FractionsBSearch", ${a.g.isBSearchActive});`
                      )
                    : (a.g.menuClose(),
                      mp.gui.emmit("window.router.setHud();")),
                  (o = !1));
              });
          },
          2154: (e, t, a) => {
            var o = !1;
            (a.g.binderFunctions.o_donate = () => {
              a.g.loggedin &&
                !a.g.chatActive &&
                (a.g.menuCheck()
                  ? o &&
                    (a.g.menuClose(),
                    mp.gui.emmit("window.router.setHud();"),
                    (o = !1))
                  : (a.g.menuOpen(),
                    (o = !0),
                    mp.gui.emmit("window.router.setView('DonateMain')"),
                    mp.discord.update(
                      "Изучает донат-меню",
                      `на RedAge под ID ${a.g.localplayer.remoteId}`
                    )));
            }),
              mp.events.add("client.donate.buyVehNumber", (e) => {
                mp.events.callRemote("server.donate.buyVehNumber", e);
              }),
              mp.events.add("client.donate.buySim", (e) => {
                mp.events.callRemote("server.donate.buySim", e);
              }),
              mp.events.add("client.donate.close", () => {
                try {
                  o &&
                    (mp.gui.emmit("window.router.setHud();"),
                    (o = !1),
                    a.g.menuClose());
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/donatemenu",
                    "client.donate.close",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.donate.buy.set", (e) => {
                mp.events.callRemote("server.donate.buy.set", e);
              }),
              mp.events.add("client.donate.buy.clothes", (e) => {
                mp.events.callRemote("server.donate.buy.clothes", e);
              }),
              mp.events.add("client.donate.buy.char", (e, t) => {
                mp.events.callRemote("server.donate.buy.char", e, t);
              }),
              mp.events.add("client.donate.reward", () => {
                mp.events.callRemote("server.donate.reward");
              }),
              mp.events.add("client.donate.buy.premium", (e) => {
                mp.events.callRemote("server.donate.buy.premium", e);
              }),
              mp.events.add("client.donate.change", (e) => {
                mp.events.callRemote("server.donate.change", e);
              }),
              mp.events.add("donbuy", (e, t, o) => {
                try {
                  if (1 === e) {
                    if (
                      a.g.checkName(t) ||
                      !a.g.checkName2(t) ||
                      t.length > 25 ||
                      t.length <= 2
                    )
                      return void mp.events.call(
                        "notify",
                        1,
                        9,
                        "Правильный формат имени: 3-25 символов и первая буква имени заглавная",
                        3e3
                      );
                    if (
                      a.g.checkName(o) ||
                      !a.g.checkName2(o) ||
                      o.length > 25 ||
                      o.length <= 2
                    )
                      return void mp.events.call(
                        "notify",
                        1,
                        9,
                        "Правильный формат фамилии: 3-25 символов и первая буква фамилии заглавная",
                        3e3
                      );
                    var i = t + "_" + o;
                    mp.events.callRemote("donate", e, i);
                  } else if (999 === e) {
                    if (t.length <= 0 || t.length > 50)
                      return void mp.events.call(
                        "notify",
                        1,
                        9,
                        "Неправильный формат логина",
                        3e3
                      );
                    if (o < 25 || o > 9999)
                      return void mp.events.call(
                        "notify",
                        1,
                        9,
                        "За раз можно отправить от 25 до 9.999 RedBucks",
                        3e3
                      );
                    mp.events.callRemote("giftdonate", t, o);
                  } else mp.events.callRemote("donate", e, t);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/donatemenu",
                    "donbuy",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.roullete.updateCase", (e) => {
                mp.gui.emmit(`window.updateCase(${e});`);
              }),
              mp.events.add("client.roullete.open", (e, t) => {
                a.g.loggedin &&
                  !a.g.cuffed &&
                  1 != a.g.isDeath &&
                  mp.events.callRemote("server.roullete.open", e, t);
              }),
              mp.events.add("client.roullete.buy", (e, t) => {
                a.g.loggedin &&
                  !a.g.cuffed &&
                  1 != a.g.isDeath &&
                  (mp.events.callRemote("server.roullete.buy", e, t),
                  mp.discord.update(
                    "Покупает кейсы",
                    `на RedAge под ID ${a.g.localplayer.remoteId}`
                  ));
              }),
              mp.events.add("client.roullete.confirm", (e, t) => {
                mp.events.callRemote("server.roullete.confirm", e, t);
              }),
              mp.events.add("client.roullete.start", (e) => {
                mp.gui.emmit(
                  `window.events.callEvent("cef.roullete.confirm", ${e})`
                ),
                  mp.discord.update(
                    "Крутит кейсы",
                    `на RedAge под ID ${a.g.localplayer.remoteId}`
                  );
              }),
              mp.events.add("client.sapper.bet", (e) => {
                mp.events.callRemote("server.sapper.bet", e);
              }),
              mp.events.add("client.sapper.game", (e) => {
                mp.gui.emmit(
                  `window.events.callEvent("cef.sapper.game", ${e})`
                ),
                  mp.discord.update(
                    "Играет в сапёра",
                    `на RedAge под ID ${a.g.localplayer.remoteId}`
                  );
              }),
              mp.events.add("client.sapper.end", (e) => {
                mp.events.callRemote("server.sapper.end", e);
              }),
              mp.events.add("client.roullete.updateWin", (e, t, a) => {
                mp.gui.emmit(`window.updateWin('${e}', ${t}, '${a}');`);
              });
            let i = null;
            mp.events.add("client.opendonatesite", (e) => {
              try {
                (i = mp.browsers.new(e)), mp.gui.cursor.show(!0, !0);
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/donatemenu",
                  "client.opendonatesite",
                  e.toString()
                );
              }
            }),
              mp.events.add("client.closedonatesite", () => {
                try {
                  if (!i) return;
                  i.destroy(), (i = null);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/donatemenu",
                    "client.closedonatesite",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.donatepack.open", (e) => {
                mp.events.callRemote("server.donatepack.open", e);
              });
            let n = !1;
            mp.events.add("client.donatepack.show", (e, t, o, i) => {
              mp.gui.emmit(
                `window.router.setPopUp("PopupDonate", {id: ${e}, title: "${t}", data: [${o}, ${i}]});`
              ),
                (mp.gui.cursor.visible = !0),
                (n = !1),
                a.g.menuCheck() ||
                  (a.g.menuOpen(!0), (n = !0), (a.g.isPopup = !0));
            }),
              mp.events.add("client.donatepack.rb", (e) => {
                mp.events.callRemote("server.donatepack.rb", e);
              }),
              mp.events.add("client.donatepack.donate", (e) => {
                mp.events.callRemote("server.donatepack.donate", e);
              }),
              mp.events.add("client.donatepack.close", () => {
                mp.gui.emmit("window.router.setPopUp()"),
                  n && a.g.menuClose(),
                  (n = !1),
                  (a.g.isPopup = !1);
              });
          },
          1040: (e, t, a) => {
            mp.game.streaming.requestAnimDict("anim@mp_point");
            let o = {
              active: !1,
              interval: null,
              lastSent: 0,
              start: function () {
                if (!this.active) {
                  for (
                    this.active = !0,
                      mp.game.streaming.requestAnimDict("anim@mp_point");
                    !mp.game.streaming.hasAnimDictLoaded("anim@mp_point");

                  )
                    mp.game.wait(0);
                  mp.game.invoke(
                    "0x0725a4ccfded9a70",
                    a.g.localplayer.handle,
                    0,
                    1,
                    1,
                    1
                  ),
                    a.g.localplayer.setConfigFlag(36, !0),
                    a.g.localplayer.taskMoveNetwork(
                      "task_mp_pointing",
                      0.5,
                      !1,
                      "anim@mp_point",
                      24
                    ),
                    mp.game.streaming.removeAnimDict("anim@mp_point"),
                    mp.gui.emmit("window.hudStore.isHint (true)"),
                    mp.discord.update(
                      "Тыкает куда-то пальцем",
                      `на RedAge под ID ${a.g.localplayer.remoteId}`
                    ),
                    (this.interval = setInterval(this.process.bind(this), 0));
                }
              },
              stop: function () {
                this.active &&
                  (clearInterval(this.interval),
                  (this.interval = null),
                  (this.active = !1),
                  mp.game.invoke(
                    "0xd01015c7316ae176",
                    a.g.localplayer.handle,
                    "Stop"
                  ),
                  mp.game.invoke(
                    "0x84A2DD9AC37C35C1",
                    a.g.localplayer.handle
                  ) ||
                    mp.game.invoke(
                      "0x176CECF6F920D707",
                      a.g.localplayer.handle
                    ),
                  mp.game.invoke(
                    "0x0725a4ccfded9a70",
                    a.g.localplayer.handle,
                    1,
                    1,
                    1,
                    1
                  ),
                  a.g.localplayer.setConfigFlag(36, !1),
                  mp.gui.emmit("window.hudStore.isHint (false)"));
              },
              lastSync: 0,
              getRelativePitch: function () {
                return (
                  a.g.cameraManager.gameplayCam().getRot(2).x -
                  a.g.localplayer.getPitch()
                );
              },
              process: function () {
                if (this.active) {
                  if (
                    a.g.chatActive ||
                    a.g.editing ||
                    a.g.cuffed ||
                    1 == a.g.isDeath ||
                    1 == a.g.isDemorgan ||
                    a.g.attachedtotrunk ||
                    a.g.menuCheck() ||
                    mp.gui.cursor.visible ||
                    a.g.localplayer.isInAnyVehicle(!1) ||
                    -1569615261 !=
                      mp.game.invoke(
                        getNative("GET_SELECTED_PED_WEAPON"),
                        a.g.localplayer.handle
                      ) ||
                    a.g.freeze ||
                    1 == a.g.ANTIANIM
                  )
                    return void o.stop();
                  let e = a.g.localplayer.getVariable("ANIM_USE");
                  if (null != e && "null" != e) return void o.stop();
                  mp.game.invoke("0x921ce12c489c4c41", a.g.localplayer.handle);
                  let t = this.getRelativePitch();
                  t < -70 ? (t = -70) : t > 42 && (t = 42),
                    (t = (t + 70) / 112);
                  let i = mp.game.cam.getGameplayCamRelativeHeading(),
                    n = mp.game.system.cos(i),
                    s = mp.game.system.sin(i);
                  i < -180 ? (i = -180) : i > 180 && (i = 180),
                    (i = (i + 180) / 360);
                  let r = a.g.localplayer.getOffsetFromGivenWorldCoords(
                      -0.2 * n - s * (0.4 * i + 0.3),
                      -0.2 * s + n * (0.4 * i + 0.3),
                      0.6
                    ),
                    l =
                      void 0 !==
                      mp.raycasting.testPointToPoint(
                        [r.x, r.y, r.z - 0.2],
                        [r.x, r.y, r.z + 0.2],
                        a.g.localplayer.handle,
                        7
                      );
                  mp.game.invoke(
                    "0xd5bb4025ae449a4e",
                    a.g.localplayer.handle,
                    "Pitch",
                    t
                  ),
                    mp.game.invoke(
                      "0xd5bb4025ae449a4e",
                      a.g.localplayer.handle,
                      "Heading",
                      -1 * i + 1
                    ),
                    mp.game.invoke(
                      "0xb0a6cfd2c69c1088",
                      a.g.localplayer.handle,
                      "isBlocked",
                      l
                    ),
                    mp.game.invoke(
                      "0xb0a6cfd2c69c1088",
                      a.g.localplayer.handle,
                      "isFirstPerson",
                      4 ==
                        mp.game.invoke(
                          "0xee778f8c7e1142e2",
                          mp.game.invoke("0x19cafa3c87f7c2ff")
                        )
                    ),
                    Date.now() - this.lastSent > 100 &&
                      ((this.lastSent = Date.now()),
                      mp.events.callRemoteUnreliable(
                        "server.fpsync.update",
                        t,
                        i
                      ));
                }
              },
            };
            mp.events.add("client.fpsync.update", (e, t, o) => {
              try {
                if (a.g.localplayer.remoteId === e) return;
                let i = a.g.getPlayerByRemoteId(parseInt(e));
                if (null != i && 0 !== i.handle && i != a.g.localplayer) {
                  if (
                    ((i.lastReceivedPointing = Date.now()), !i.pointingInterval)
                  ) {
                    for (
                      i.pointingInterval = setInterval(
                        function () {
                          if (Date.now() - i.lastReceivedPointing > 1e3) {
                            if (
                              (clearInterval(i.pointingInterval),
                              (i.lastReceivedPointing = void 0),
                              (i.pointingInterval = void 0),
                              !mp.players.exists(i) || 0 === i.handle)
                            )
                              return;
                            mp.game.invoke(
                              "0xd01015c7316ae176",
                              i.handle,
                              "Stop"
                            ),
                              i.isInAnyVehicle(!0) ||
                                mp.game.invoke(
                                  "0x0725a4ccfded9a70",
                                  i.handle,
                                  1,
                                  1,
                                  1,
                                  1
                                ),
                              i.setConfigFlag(36, !1),
                              mp.game.invoke("0x84A2DD9AC37C35C1", i.handle) ||
                                mp.game.invoke("0x176CECF6F920D707", i.handle);
                          }
                        }.bind(i),
                        500
                      ),
                        mp.game.streaming.requestAnimDict("anim@mp_point");
                      !mp.game.streaming.hasAnimDictLoaded("anim@mp_point");

                    )
                      mp.game.wait(0);
                    mp.game.invoke("0x0725a4ccfded9a70", i.handle, 0, 1, 1, 1),
                      i.setConfigFlag(36, !0),
                      i.taskMoveNetwork(
                        "task_mp_pointing",
                        0.5,
                        !1,
                        "anim@mp_point",
                        24
                      ),
                      mp.game.streaming.removeAnimDict("anim@mp_point");
                  }
                  mp.game.invoke("0xd5bb4025ae449a4e", i.handle, "Pitch", t),
                    mp.game.invoke(
                      "0xd5bb4025ae449a4e",
                      i.handle,
                      "Heading",
                      -1 * o + 1
                    ),
                    mp.game.invoke(
                      "0xb0a6cfd2c69c1088",
                      i.handle,
                      "isBlocked",
                      0
                    ),
                    mp.game.invoke(
                      "0xb0a6cfd2c69c1088",
                      i.handle,
                      "isFirstPerson",
                      0
                    );
                }
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/fingerpointing",
                  "client.fpsync.update",
                  e.toString()
                );
              }
            }),
              (a.g.binderFunctions.down_fingerpointing = () => {
                if (
                  !a.g.loggedin ||
                  a.g.chatActive ||
                  a.g.editing ||
                  a.g.cuffed ||
                  1 == a.g.isDeath ||
                  1 == a.g.isDemorgan ||
                  a.g.attachedtotrunk ||
                  a.g.menuCheck() ||
                  mp.gui.cursor.visible ||
                  a.g.localplayer.isInAnyVehicle(!1) ||
                  -1569615261 !=
                    mp.game.invoke(
                      getNative("GET_SELECTED_PED_WEAPON"),
                      a.g.localplayer.handle
                    ) ||
                  a.g.freeze ||
                  1 == a.g.ANTIANIM
                )
                  return;
                let e = a.g.localplayer.getVariable("ANIM_USE");
                (null != e && "null" != e) || o.start();
              }),
              (a.g.binderFunctions.up_fingerpointing = () => {
                o.stop();
              }),
              (a.g.getPlayerByRemoteId = (e) => {
                let t = mp.players.atRemoteId(e);
                return null == t || null == t ? null : t;
              });
          },
          310: (e, t, a) => {
            mp.events.add("policeg", () => {
              a.g.openSM(
                4,
                JSON.stringify([
                  "Дубинка",
                  "Пистолет",
                  "SMG",
                  "Дробовик",
                  "Tazer",
                  "Бронежилет",
                  "Аптечка",
                  "Пистолетный калибр x12",
                  "Малый калибр x30",
                  "Дробь x6",
                  "Сдать бронежилет",
                ])
              );
            }),
              mp.events.add("fbiguns", () => {
                a.g.openSM(
                  3,
                  JSON.stringify([
                    "Tazer",
                    "Пистолет",
                    "ПОС",
                    "Карабин",
                    "Снайперская винтовка",
                    "Бронежилет",
                    "Аптечка",
                    "Пистолетный калибр x12",
                    "Малый калибр x30",
                    "Автоматный калибр x30",
                    "Снайперский калибр x5",
                    "Бейдж",
                    "Сдать бронежилет",
                  ])
                );
              }),
              mp.events.add("govguns", () => {
                a.g.openSM(
                  6,
                  JSON.stringify([
                    "Tazer",
                    "Пистолет",
                    "Advanced Rifle",
                    "Gusenberg Sweeper",
                    "Бронежилет",
                    "Аптечка",
                    "Пистолетный калибр x12",
                    "Малый калибр x30",
                    "Автоматный калибр x30",
                    "Сдать бронежилет",
                  ])
                );
              }),
              mp.events.add("armyguns", () => {
                a.g.openSM(
                  7,
                  JSON.stringify([
                    "Пистолет",
                    "Карабин",
                    "Боевой пулемет",
                    "Бронежилет",
                    "Аптечка",
                    "Пистолетный калибр x12",
                    "Автоматный калибр x30",
                    "Малый калибр x100",
                    "Сдать бронежилет",
                  ])
                );
              });
          },
          9389: (e, t, a) => {
            (mp.nametags.enabled = !1),
              (a.g.binderFunctions.showGamertags = () => {
                !a.g.loggedin ||
                  a.g.chatActive ||
                  a.g.editing ||
                  a.g.menuCheck() ||
                  (a.g.Name = !a.g.Name);
              });
            const o = [
              { name: "ALVL" },
              { name: "AGM" },
              { name: "DMGDisable" },
              { name: "VoiceZone" },
              { name: "leader" },
              { name: "INVISIBLE", updateNameTag: !0 },
              { name: "HideNick", updateNameTag: !0 },
              { name: "InDeath" },
              { name: "AFK_STATUS" },
              { name: "vmuted" },
              { name: "isWhisper" },
              { name: "isDeaf" },
              { name: "PlayerAirsoftTeam" },
              { name: "REDNAME", updateNameTag: !0 },
              { name: "fraction", updateNameTag: !0, updateName: !0 },
              { name: "organization", updateNameTag: !0, updateName: !0 },
              { name: "IS_MASK", updateNameTag: !0, updateName: !0 },
              { name: "NewUser" },
            ];
            o.forEach((e) => {
              mp.events.addDataHandler(e.name, (t, a, o) => {
                t &&
                  mp.players.exists(t) &&
                  "player" === t.type &&
                  (SetSharedData(t, e.name, a),
                  e.updateName && i(t),
                  e.updateNameTag && 0 !== t.handle && n(t));
              });
            }),
              (a.g.SetSharedData = (e, t, a) => {
                e && mp.players.exists(e) && "player" === e.type && (e[t] = a);
              }),
              mp.events.add("newPassport", async (e, t) => {
                e &&
                  mp.players.exists(e) &&
                  "player" === e.type &&
                  (await a.g.wait(10), i(e), 0 !== e.handle && n(e));
              }),
              mp.events.add("setFriendList", async () => {
                try {
                  await a.g.wait(10),
                    mp.players.forEach((e) => {
                      e &&
                        mp.players.exists(e) &&
                        (i(e), 0 !== e.handle && n(e));
                    });
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/gametag",
                    "setFriendList",
                    e.toString()
                  );
                }
              }),
              mp.events.add("setFriend", async () => {
                try {
                  await a.g.wait(10),
                    mp.players.forEach((e) => {
                      e &&
                        mp.players.exists(e) &&
                        (i(e), 0 !== e.handle && n(e));
                    });
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/gametag",
                    "setFriend",
                    e.toString()
                  );
                }
              }),
              mp.events.add("pPlayerStreamIn", (e) => {
                try {
                  if (!e || !mp.players.exists(e)) return;
                  o.forEach((t) => {
                    SetSharedData(e, t.name, e.getVariable(t.name));
                  }),
                    i(e),
                    n(e);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/gametag",
                    "playerStreamIn",
                    e.toString()
                  );
                }
              });
            const i = (e) => {
              e && mp.players.exists(e) && (e.currentName = h(e, e.remoteId));
            };
            a.g.getName = (e) => {
              if (e && mp.players.exists(e))
                return (
                  e.currentName || (e.currentName = h(e, e.remoteId)),
                  e.currentName
                );
            };
            const n = (e) => {
              try {
                if (!e || !mp.players.exists(e)) return;
                e.INVISIBLE || e.HideNick
                  ? (e.nameTag = !1)
                  : (e.REDNAME
                      ? (e.nameTag = `~r~${e.name.replace("_", " ")} (${
                          e.remoteId
                        })`)
                      : (e.nameTag = a.g.getName(e)),
                    (e.nameWidth =
                      ((t = e.nameTag),
                      0,
                      0.275,
                      mp.game.ui.setTextEntryForWidth("STRING"),
                      mp.game.ui.addTextComponentSubstringPlayerName(t),
                      mp.game.ui.setTextFont(0),
                      mp.game.ui.setTextScale(0.275, 0.275),
                      mp.game.ui.getTextScreenWidth(!0))),
                    (e.nameHeight = mp.game.ui.getTextScaleHeight(0.275, 0)));
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/gametag",
                  "SetNameTag",
                  e.toString()
                );
              }
              var t;
            };
            a.g.loadTextureDict = (e) =>
              new Promise(async (t, o) => {
                try {
                  if (mp.game.graphics.hasStreamedTextureDictLoaded(e))
                    return t(!0);
                  mp.game.graphics.requestStreamedTextureDict(e, !1);
                  let o = 0;
                  for (; !mp.game.graphics.hasStreamedTextureDictLoaded(e); ) {
                    if (o > 5e3)
                      return t("Ошибка loadTextureDict. Model: " + e);
                    o++, await a.g.wait(0);
                  }
                  return t(!0);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/gametag",
                    "loadTextureDict",
                    e.toString()
                  ),
                    t();
                }
              });
            const s = ["redage_textures_001", "mpinventory"];
            a.g.wait(5e3).then(() => {
              s.forEach((e) => {
                mp.game.graphics.hasStreamedTextureDictLoaded(e) ||
                  a.g.loadTextureDict(e);
              });
            }),
              mp.events.add(a.g.renderName["1s"], () => {
                try {
                  mp.players.forEachInStreamRange((e) => {
                    a.g.localplayer.hasClearLosTo(e.handle, 17)
                      ? (e.hasLosTo = !0)
                      : (e.hasLosTo = !1);
                  });
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/gametag",
                    a.g.renderName["1s"],
                    e.toString()
                  );
                }
              });
            const r = [255, 255, 255, 255];
            mp.events.add("render", (e) => {
              try {
                if (!a.g.loggedin) return;
                a.g.isTagsHead &&
                  e.forEach((e) => {
                    try {
                      let [t, a, o, i] = e;
                      if (i <= 225) {
                        if (!t.hasLosTo) return;
                        if (!t.isOnScreen()) return;
                        if (!t.nameTag) return;
                        p(t, a, o + 0.015),
                          (o += 0.03015),
                          _(t, a, o, r),
                          d(t, a, o + 0.005, 0.035, 0.003);
                      }
                    } catch (e) {
                      if (
                        new Date().getTime() -
                          a.g.trycatchtime["player/gamertag1"] <
                        5e3
                      )
                        return;
                      (a.g.trycatchtime["player/gamertag1"] =
                        new Date().getTime()),
                        mp.events.callRemote(
                          "client_trycatch",
                          "player/gamertag",
                          "render 1",
                          e.toString()
                        );
                    }
                  });
              } catch (e) {
                if (
                  new Date().getTime() - a.g.trycatchtime["player/gamertag"] <
                  6e4
                )
                  return;
                (a.g.trycatchtime["player/gamertag"] = new Date().getTime()),
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/gamertag",
                    "render",
                    e.toString()
                  );
              }
            });
            const l = [
                ["redage_textures_001", "newUser"],
                ["redage_textures_001", "telefon"],
                ["redage_textures_001", "racia"],
                ["redage_textures_001", "micro_on"],
                ["redage_textures_001", "micro_off"],
                ["redage_textures_001", "microphone"],
                ["redage_textures_001", "quest_perform", -45],
                ["redage_textures_001", "quest_take", -45],
                ["redage_textures_001", "door_open", -45],
                ["redage_textures_001", "door_close", -45],
                ["redage_textures_001", "death"],
                ["redage_textures_001", "afk"],
                ["redage_textures_001", "shepot"],
                ["redage_textures_001", "mutedinamik"],
                ["redage_textures_001", "chat"],
                ["redage_textures_001", "friends"],
                ["redage_textures_001", "admin"],
                ["redage_textures_001", "ticket", -45],
              ],
              m = {
                door_open: 1,
                door_close: 1,
                ticket: 1,
                quest_perform: 1,
                quest_take: 1,
              };
            let c = {};
            mp.events.add(a.g.renderName["2s"], () => {
              const e = mp.game.graphics.getScreenActiveResolution(0, 0);
              l.forEach((t) => {
                const a = m[t[1]] ? m[t[1]] : 0.55,
                  o = mp.game.graphics.getTextureResolution(t[0], t[1]);
                c[t[1]] = {
                  width: (a * o.x) / e.x,
                  height: (a * o.y) / e.y,
                  heading: t[2] ? t[2] : 0,
                };
              });
            });
            const p = (e, t, o) => {
                try {
                  const i = { font: 0 };
                  (i.color = r),
                    (i.scale = [0.275, 0.275]),
                    (i.outline = !0),
                    mp.game.graphics.drawText(e.nameTag, [t, o], i);
                  let n = !1;
                  if (e.AFK_STATUS)
                    n = {
                      textureDict: "redage_textures_001",
                      textureName: "afk",
                    };
                  else if (e.isTypingInTextChat)
                    n = {
                      textureDict: "redage_textures_001",
                      textureName: "chat",
                    };
                  else if (!e.InDeath)
                    if (e.isVoiceActive && 2 == e.isListening)
                      n = {
                        textureDict: "redage_textures_001",
                        textureName: "telefon",
                      };
                    else if (e.isVoiceActive && 3 == e.isListening)
                      n = {
                        textureDict: "redage_textures_001",
                        textureName: "racia",
                      };
                    else if (e.isVoiceActive)
                      if (a.g.startedMafiaGame && 1 == a.g.mafiaGameProcess)
                        n = !1;
                      else {
                        let t = "redage_textures_001",
                          o = "micro_on",
                          i = r;
                        !0 === a.g.pplMuted[e.name]
                          ? ((i = [255, 0, 0, 255]), (o = "mutedinamik"))
                          : !0 === a.g.pplMutedMe[e.name]
                          ? ((i = [255, 0, 0, 255]), (o = "micro_off"))
                          : e.voiceDist && (o = "microphone"),
                          (n = { textureDict: t, textureName: o, color: i });
                      }
                  n &&
                    a.g.DrawSprite(
                      n.textureDict,
                      n.textureName,
                      n.color ? n.color : r,
                      t + e.nameWidth / 2 + c[n.textureName].width / 2,
                      o + e.nameHeight / 2 + 0.25 * c[n.textureName].height
                    );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/gametag",
                    "DrawPlayerName",
                    e.toString()
                  );
                }
              },
              g = [
                r,
                [21, 168, 3, 255],
                [21, 168, 3, 255],
                [21, 168, 3, 255],
                [21, 168, 3, 255],
                [21, 168, 3, 255],
                [211, 126, 15, 255],
                [255, 0, 0, 255],
                [211, 126, 15, 255],
                [211, 126, 15, 255],
                [211, 126, 15, 255],
              ],
              _ = (e, t, o, i) => {
                try {
                  const n = ((e) => {
                    try {
                      let t = [];
                      if (
                        (e.NewUser &&
                          t.push({
                            textureDict: "redage_textures_001",
                            textureName: "newUser",
                            color: [255, 255, 255, 255],
                          }),
                        e.InDeath
                          ? t.push({
                              textureDict: "redage_textures_001",
                              textureName: "death",
                              color: [255, 0, 0, 255],
                            })
                          : e.vmuted
                          ? t.push({
                              textureDict: "redage_textures_001",
                              textureName: "mutedinamik",
                            })
                          : e.isWhisper
                          ? t.push({
                              textureDict: "redage_textures_001",
                              textureName: "shepot",
                            })
                          : e.isDeaf &&
                            t.push({
                              textureDict: "redage_textures_001",
                              textureName: "mutedinamik",
                            }),
                        a.g.localplayer.PlayerAirsoftTeam &&
                          a.g.localplayer.PlayerAirsoftTeam >= 0 &&
                          a.g.localplayer.PlayerAirsoftTeam ==
                            e.PlayerAirsoftTeam)
                      )
                        t.push({
                          textureDict: "redage_textures_001",
                          textureName: "friends",
                        });
                      else if (e.REDNAME) {
                        let a = Number(e.ALVL);
                        a || (a = 0),
                          t.push({
                            textureDict: "redage_textures_001",
                            textureName: "admin",
                            color: g[a],
                          });
                      }
                      return t;
                    } catch (e) {
                      if (
                        new Date().getTime() -
                          a.g.trycatchtime["player/gamertag5"] <
                        5e3
                      )
                        return;
                      (a.g.trycatchtime["player/gamertag5"] =
                        new Date().getTime()),
                        mp.events.callRemote(
                          "client_trycatch",
                          "player/gamertag",
                          "GetDrawPlayerIcon",
                          e.toString()
                        );
                    }
                    return [];
                  })(e);
                  let s = 0;
                  n &&
                    (s = n.length) &&
                    (s >= 3 ? (t -= 0.015) : s >= 2 && (t -= 0.01),
                    n.forEach((e) => {
                      a.g.DrawSprite(
                        e.textureDict,
                        e.textureName,
                        e.color ? e.color : i,
                        t,
                        o - 0.02
                      ),
                        (t += 0.01);
                    }));
                } catch (e) {
                  if (
                    new Date().getTime() -
                      a.g.trycatchtime["player/gamertag5"] <
                    5e3
                  )
                    return;
                  (a.g.trycatchtime["player/gamertag5"] = new Date().getTime()),
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/gamertag",
                      "DrawPlayerIcon",
                      e.toString()
                    );
                }
              };
            a.g.DrawSprite = (e, t, a, o, i) => {
              const n = c[t];
              n &&
                mp.game.graphics.drawSprite(
                  e,
                  t,
                  o,
                  i,
                  n.width,
                  n.height,
                  n.heading,
                  a[0],
                  a[1],
                  a[2],
                  a[3]
                );
            };
            const d = (e, t, o, i, n) => {
              try {
                if (
                  a.g.isAdmin ||
                  mp.game.player.isFreeAimingAtEntity(e.handle) ||
                  mp.game.player.isTargettingEntity(e.handle)
                ) {
                  o += 0.0225;
                  let a = e.getHealth();
                  const s = a;
                  (a > 100 || a < 0) && (a = 10),
                    (a = a <= 100 ? a / 100 : (a - 100) / 100);
                  let r = e.getArmour() / 100;
                  (r > 100 || r < 0) && (r = 100);
                  let l = Array(3);
                  s >= 80
                    ? ((l[0] = 0), (l[1] = 220), (l[2] = 0))
                    : s >= 20 && s < 80
                    ? ((l[0] = 255), (l[1] = 220), (l[2] = 0))
                    : ((l[0] = 255), (l[1] = 0), (l[2] = 0)),
                    mp.game.graphics.drawRect(
                      t,
                      o,
                      i,
                      n,
                      l[0],
                      l[1],
                      l[2],
                      145
                    ),
                    mp.game.graphics.drawRect(
                      t - (i / 2) * (1 - a),
                      o,
                      i * a,
                      n,
                      l[0],
                      l[1],
                      l[2],
                      200
                    ),
                    r > 0 &&
                      ((o += 0.007),
                      mp.game.graphics.drawRect(t, o, i, n, 41, 66, 78, 255),
                      mp.game.graphics.drawRect(
                        t - (i / 2) * (1 - r),
                        o,
                        i * r,
                        n,
                        48,
                        108,
                        135,
                        200
                      ));
                }
              } catch (e) {
                if (
                  new Date().getTime() - a.g.trycatchtime["player/gamertag3"] <
                  5e3
                )
                  return;
                (a.g.trycatchtime["player/gamertag3"] = new Date().getTime()),
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/gamertag",
                    "DrawHealthAndArmor",
                    e.toString()
                  );
              }
            };
            (a.g.GetScale = (e, t) => Math.max(0.1, 1 - e / t)),
              mp.events.add("sendRPMessage", (e, t, o) => {
                try {
                  var i = "";
                  o.forEach((o) => {
                    var n = mp.players.atRemoteId(o);
                    if (mp.players.exists(n)) {
                      if ("chat" === e || "s" === e) {
                        let e = a.g.localplayer.position,
                          t = n.position,
                          o = mp.game.system.vdist(
                            t.x,
                            t.y,
                            t.z,
                            e.x,
                            e.y,
                            e.z
                          );
                        i =
                          o < 2
                            ? "FFFFFF"
                            : o < 4
                            ? "F7F9F9"
                            : o < 6
                            ? "DEE0E0"
                            : o < 8
                            ? "C5C7C7"
                            : "ACAEAE";
                      }
                      t = t.replace("{name}", a.g.getName(n));
                    }
                  }),
                    ("chat" !== e && "s" !== e) || (t = `!{${i}}${t}`),
                    mp.gui.chat.push(t);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/gamertag",
                    "sendRPMessage",
                    e.toString()
                  );
                }
              });
            const h = (e, t) => {
              try {
                let o = "";
                if (!e || !mp.players.exists(e)) return o;
                const i = ((e) => {
                  try {
                    if (a.g.isAdmin) return 1;
                    if (e === a.g.localplayer) return 1;
                    const t = e.fraction;
                    if (0 != a.g.fractionId && 0 != t && a.g.fractionId === t)
                      return 1;
                    const o = e.organization;
                    return 0 != a.g.organizationId &&
                      0 != o &&
                      a.g.organizationId === o
                      ? 1
                      : e.IS_MASK || null == a.g.passports[e.name]
                      ? e.IS_MASK || null == a.g.friends[e.name]
                        ? 0
                        : 3
                      : 2;
                  } catch (e) {
                    return (
                      new Date().getTime() -
                        a.g.trycatchtime["player/gamertag6"] <
                        5e3 ||
                        ((a.g.trycatchtime["player/gamertag6"] =
                          new Date().getTime()),
                        mp.events.callRemote(
                          "client_trycatch",
                          "player/gamertag",
                          "IsNameToPlayer",
                          e.toString()
                        )),
                      0
                    );
                  }
                })(e);
                return (
                  0 !== i
                    ? ((o =
                        3 === i && !1 === a.g.friends[e.name]
                          ? e.name.split("_")[0]
                          : e.name.replace("_", " ")),
                      (o +=
                        2 === i
                          ? ` (${t} | ${a.g.passports[e.name]})`
                          : ` (${t})`))
                    : (o =
                        (a.g.GetGender(e) ? "Heзнaкoмeц" : "Heзнaкoмкa") +
                        ` (${t})`),
                  o
                );
              } catch (e) {
                return (
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/gametag",
                    "GetCurrentName",
                    e.toString()
                  ),
                  ""
                );
              }
            };
          },
          4207: (e, t, a) => {
            const o = [
                {
                  position: { x: -200.8397, y: -1431.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: -100.8397, y: -1431.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: -0.8397, y: -1431.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 99.1603, y: -1431.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: -200.8397, y: -1531.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: -100.8397, y: -1531.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: -0.8397, y: -1531.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 99.1603, y: -1531.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 199.1603, y: -1531.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 299.1603, y: -1531.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 399.1603, y: -1531.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 499.1603, y: -1531.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: -200.8397, y: -1631.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: -100.8397, y: -1631.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: -0.8397, y: -1631.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 99.1603, y: -1631.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 199.1603, y: -1631.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 299.1603, y: -1631.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 399.1603, y: -1631.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 499.1603, y: -1631.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 599.1603, y: -1631.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: -100.8397, y: -1731.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: -0.8397, y: -1731.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 99.1603, y: -1731.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 199.1603, y: -1731.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 299.1603, y: -1731.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 399.1603, y: -1731.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 499.1603, y: -1731.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 599.1603, y: -1731.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: -0.8397, y: -1831.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 99.1603, y: -1831.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 199.1603, y: -1831.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 299.1603, y: -1831.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 399.1603, y: -1831.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 499.1603, y: -1831.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 599.1603, y: -1831.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 99.1603, y: -1931.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 199.1603, y: -1931.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 299.1603, y: -1931.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 399.1603, y: -1931.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 499.1603, y: -1931.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 599.1603, y: -1931.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 199.1603, y: -2031.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 299.1603, y: -2031.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 399.1603, y: -2031.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 499.1603, y: -2031.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 299.1603, y: -2131.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 399.1603, y: -2131.556, z: 30.18104 },
                  color: 10,
                },
                {
                  position: { x: 768.8984, y: -2401.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 868.8984, y: -2401.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 968.8984, y: -2401.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 1068.898, y: -2401.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 768.8984, y: -2301.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 868.8984, y: -2301.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 968.8984, y: -2301.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 1068.898, y: -2301.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 768.8984, y: -2201.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 868.8984, y: -2201.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 968.8984, y: -2201.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 1068.898, y: -2201.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 768.8984, y: -2101.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 868.8984, y: -2101.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 968.8984, y: -2101.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 1068.898, y: -2101.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 768.8984, y: -2001.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 868.8984, y: -2001.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 968.8984, y: -2001.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 1068.898, y: -2001.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 768.8984, y: -1901.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 868.8984, y: -1901.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 968.8984, y: -1901.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 1068.898, y: -1901.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 768.8984, y: -1801.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 868.8984, y: -1801.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 968.8984, y: -1801.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 1168.898, y: -1801.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 1268.898, y: -1801.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 768.8984, y: -1701.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 868.8984, y: -1701.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 968.8984, y: -1701.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 1168.898, y: -1701.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 1268.898, y: -1701.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 1368.898, y: -1701.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 768.8984, y: -1601.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 868.8984, y: -1601.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 1168.898, y: -1601.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 1268.898, y: -1601.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 1368.898, y: -1601.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 1268.898, y: -1501.556, z: 28.17772 },
                  color: 10,
                },
                {
                  position: { x: 1368.898, y: -1501.556, z: 28.17772 },
                  color: 10,
                },
              ],
              i = [
                { position: { x: 1714.411, y: -1646.583, z: 110.5078 } },
                { position: { x: 1018.687, y: 2363.665, z: 49.2389 } },
                { position: { x: 525.6157, y: -3163.575, z: 2.183115 } },
                { position: { x: -551.887, y: 5313.623, z: 69.28452 } },
                { position: { x: 2388, y: 3088, z: 48.2 } },
              ];
            var n = [];
            mp.events.add("loadCaptureBlips", function (e) {
              try {
                for (var t = JSON.parse(e), a = 0; a < t.length; a++)
                  o[a].color = t[a];
                o.forEach((e) => {
                  const t = mp.game.ui.addBlipForRadius(
                    e.position.x,
                    e.position.y,
                    e.position.z,
                    50
                  );
                  mp.game.invoke(getNative("SET_BLIP_SPRITE"), t, 5),
                    mp.game.invoke(getNative("SET_BLIP_ALPHA"), t, 100),
                    mp.game.invoke(getNative("SET_BLIP_COLOUR"), t, e.color),
                    n.push(t);
                });
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/gangzones",
                  "loadCaptureBlips",
                  e.toString()
                );
              }
            });
            var s = !1,
              r = 0,
              l = 0,
              m = 0,
              c = 0;
            mp.events.add("captureStats_client", function (e, t, a, o, i, n) {
              try {
                mp.gui.emmit(
                  `window.captureStats(1, '${e}', '${t}', ${a}, ${o}, ${i}, ${n});`
                );
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/gangzones",
                  "captureStats_client",
                  e.toString()
                );
              }
            }),
              mp.events.add("sendCaptureInformation", function (e, t, a, o) {
                try {
                  (r = e), (l = t), (m = a), (c = o);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/gangzones",
                    "sendCaptureInformation",
                    e.toString()
                  );
                }
              }),
              mp.events.add("captureHud", function (e) {
                try {
                  if (!a.g.loggedin) return;
                  (s = e),
                    e ||
                      (mp.events.call("hud.kill.clear"),
                      mp.gui.emmit("window.captureStats(0);"));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/gangzones",
                    "captureHud",
                    e.toString()
                  );
                }
              }),
              mp.events.add("setZoneColor", function (e, t) {
                try {
                  if (!a.g.loggedin) return;
                  if (0 == n.length) return;
                  mp.game.invoke(getNative("SET_BLIP_COLOUR"), n[e], t);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/gangzones",
                    "setZoneColor",
                    e.toString()
                  );
                }
              }),
              mp.events.add("setZoneFlash", function (e, t, i) {
                try {
                  if (!a.g.loggedin) return;
                  if (1 == n.length || 0 == n.length)
                    if (t) {
                      const t = mp.game.ui.addBlipForRadius(
                        o[e].position.x,
                        o[e].position.y,
                        o[e].position.z,
                        50
                      );
                      mp.game.invoke(getNative("SET_BLIP_SPRITE"), t, 5),
                        mp.game.invoke(getNative("SET_BLIP_ALPHA"), t, 175),
                        mp.game.invoke(getNative("SET_BLIP_COLOUR"), t, i),
                        (n[e] = t);
                    } else {
                      if (0 == n.length) return;
                      mp.game.invoke(getNative("SET_BLIP_ALPHA"), n[e], 0);
                    }
                  mp.game.invoke(getNative("SET_BLIP_FLASH_TIMER"), n[e], 1e3),
                    mp.game.invoke(getNative("SET_BLIP_FLASHES"), n[e], t);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/gangzones",
                    "setZoneFlash",
                    e.toString()
                  );
                }
              }),
              mp.events.add("render", () => {
                try {
                  if (!a.g.loggedin) return;
                  s &&
                    (mp.game.graphics.drawText(
                      `~b~${l} v~r~s ${r}`,
                      [0.5, 0.005],
                      {
                        font: 0,
                        color: [255, 255, 255, 185],
                        scale: [0.5, 0.5],
                        outline: !0,
                      }
                    ),
                    mp.game.graphics.drawText(`${m}:${c}`, [0.5, 0.05], {
                      font: 0,
                      color: [255, 255, 255, 185],
                      scale: [0.5, 0.5],
                      outline: !0,
                    })),
                    0 !== n.length &&
                      n.forEach((e) => {
                        mp.game.invoke(getNative("SET_BLIP_ROTATION"), e, 0);
                      });
                } catch (e) {
                  if (
                    new Date().getTime() -
                      a.g.trycatchtime["player/gangzones"] <
                    6e4
                  )
                    return;
                  (a.g.trycatchtime["player/gangzones"] = new Date().getTime()),
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/gangzones",
                      "render",
                      e.toString()
                    );
                }
              }),
              mp.events.add("quitcmd", function () {
                try {
                  if (0 !== n.length)
                    for (var e = 0; e < n.length; e++)
                      mp.game.ui.removeBlip(n[e]);
                  setTimeout(function () {
                    mp.events.callRemote("kickclient");
                  }, 500);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/gangzones",
                    "quitcmd",
                    e.toString()
                  );
                }
              });
            var p = void 0,
              g = void 0,
              _ = !1,
              d = 1;
            mp.events.add("setZoneArea", function (e, t, a = 1) {
              try {
                (d = a),
                  void 0 !== p && (p.destroy(), (p = void 0)),
                  void 0 !== g && (g.destroy(), (g = void 0)),
                  1 == d && 0 == t && !0 === _
                    ? ((_ = !1),
                      mp.events.callRemote("changePlayerCaptureDimension", 2))
                    : 2 == d &&
                      0 == t &&
                      !0 === _ &&
                      ((_ = !1),
                      mp.events.callRemote("changePlayerBizwarDimension", 2)),
                  1 == d && 1 == t
                    ? ((p = mp.markers.new(
                        28,
                        new mp.Vector3(
                          o[e].position.x,
                          o[e].position.y,
                          o[e].position.z - 1.25
                        ),
                        150,
                        { visible: !0, color: [255, 0, 0, 90], dimension: -1 }
                      )),
                      (g = mp.colshapes.newSphere(
                        o[e].position.x,
                        o[e].position.y,
                        o[e].position.z,
                        150,
                        -1
                      )))
                    : 2 == d &&
                      1 == t &&
                      ((p = mp.markers.new(
                        28,
                        new mp.Vector3(
                          i[e].position.x,
                          i[e].position.y,
                          i[e].position.z - 1.25
                        ),
                        150,
                        { visible: !0, color: [255, 0, 0, 90], dimension: -1 }
                      )),
                      (g = mp.colshapes.newSphere(
                        i[e].position.x,
                        i[e].position.y,
                        i[e].position.z,
                        150,
                        -1
                      )));
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/gangzones",
                  "setZoneArea",
                  e.toString()
                );
              }
            }),
              mp.events.add("playerEnterColshape", (e) => {
                if (e === g) {
                  if (a.g.isDemorgan)
                    return void mp.events.call(
                      "notify",
                      1,
                      9,
                      "Во время действующего наказания нельзя участвовать в войне.",
                      3e3
                    );
                  (_ = !0),
                    1 == d
                      ? mp.events.callRemote("changePlayerCaptureDimension", 1)
                      : 2 == d &&
                        mp.events.callRemote("changePlayerBizwarDimension", 1);
                }
              }),
              mp.events.add("playerExitColshape", (e) => {
                e === g &&
                  ((_ = !1),
                  1 == d
                    ? mp.events.callRemote("changePlayerCaptureDimension", 2)
                    : 2 == d &&
                      mp.events.callRemote("changePlayerBizwarDimension", 2),
                  mp.events.call(
                    "notify",
                    0,
                    9,
                    "Вы покинули территорию войны.",
                    3e3
                  ));
              });
          },
          4865: (e, t, a) => {
            let o = !1,
              i = !1;
            (a.g.closeHelpMenu = () => {
              o &&
                (mp.gui.emmit("window.router.setHud();"),
                (o = !1),
                a.g.menuClose(),
                (mp.gui.cursor.visible = !1)),
                i && ((i = !1), mp.events.call("client.battlepass.open"));
            }),
              (a.g.isNewChar = !1),
              mp.events.add("client:OnOpenHelpMenu", () => {
                a.g.isNewChar = !0;
              }),
              mp.events.add("pedStreamIn", (e) => {
                a.g.isNewChar &&
                  e === questNameToPeds.npc_zdobich &&
                  (mp.events.call(
                    "notify",
                    3,
                    9,
                    "Не забудь подойти к NPC Виталий Здобич, чтобы начать стартовую линейку квестов, которая познакомит тебя с нашим чудесным штатом!",
                    3e3
                  ),
                  a.g.createCamera("peds", e),
                  a.g.localplayer.freezePosition(!0),
                  setTimeout(function () {
                    (a.g.isNewChar = !1),
                      mp.gui.chat.push(
                        "Не забудь подойти к !{#ff3333}NPC Виталий Здобич!{#FFF}, чтобы начать стартовую линейку квестов, которая познакомит тебя с нашим чудесным штатом!"
                      ),
                      a.g.cameraManager.deleteCamera("peds", !0, 500),
                      a.g.localplayer.freezePosition(!1),
                      (i = !0),
                      a.g.binderFunctions.o_help();
                  }, 5e3));
              }),
              mp.events.add("client:OnCloseHelpMenu", () => {
                closeHelpMenu();
              }),
              (a.g.binderFunctions.o_help = () => {
                a.g.chatActive ||
                  (a.g.menuCheck() || o
                    ? closeHelpMenu()
                    : (a.g.menuOpen(),
                      mp.gui.emmit('window.router.setView("PlayerHelp")'),
                      mp.discord.update(
                        "Изучает меню помощи",
                        `на RedAge под ID ${a.g.localplayer.remoteId}`
                      ),
                      (o = !0),
                      (mp.gui.cursor.visible = !0)));
              }),
              (a.g.binderFunctions.c_help = () => {
                closeHelpMenu();
              }),
              mp.events.add("client.help.waypoint", (e) => {
                mp.events.callRemote("server.help.waypoint", e);
              });
          },
          5198: (e, t, a) => {
            (a.g.showhud = !1),
              (a.g.Petrol = 0),
              (a.g.dimension = 0),
              mp.game.gameplay.setFakeWantedLevel(0);
            var o = -1,
              i = 0;
            (a.g.showHint = !0),
              (a.g.hudstatus = {
                online: 0,
                street: "",
                area: "",
                direction: "",
                speed: 0,
                invehicle: !1,
                engine: !1,
                doors: !0,
                fuel: 0,
                health: 0,
              }),
              mp.events.add("showHUD", (e) => {
                try {
                  (a.g.showhud = e),
                    e
                      ? e &&
                        a.g.showHint &&
                        mp.gui.emmit(`window.hudStore.isHelp (${a.g.showhud})`)
                      : mp.gui.emmit(`window.hudStore.isHelp (${a.g.showhud})`),
                    mp.gui.emmit(
                      `window.hudStore.isHudVisible (${a.g.showhud})`
                    ),
                    mp.game.ui.displayAreaName(a.g.showhud),
                    mp.game.ui.displayRadar(a.g.showhud),
                    mp.game.ui.displayHud(a.g.showhud);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/hud",
                    "showHUD",
                    e.toString()
                  );
                }
              });
            let n = !1;
            const s = [
              { name: "UUID", noInit: !0 },
              { name: "Name", isString: !0, noInit: !0 },
              { name: "Gender" },
              { name: "Money" },
              { name: "BankMoney" },
              { name: "WorkID" },
              { name: "IsLeader" },
              { name: "FractionID" },
              { name: "FractionLVL" },
              { name: "OrganizationID" },
              { name: "OrganizationLVL" },
              { name: "EXP" },
              { name: "LVL" },
              { name: "Wanted" },
              { name: "CreateDate", isString: !0, noInit: !0 },
              { name: "Sim" },
            ];
            mp.events.add("client.inventory.stats", (e) => {
              mp.gui.emmit(`window.charStore.charData ('${e}')`);
              const t = JSON.parse(e);
              t &&
                (t.FirstName &&
                  t.LastName &&
                  mp.gui.emmit(
                    `window.charStore.charName ('${
                      t.FirstName + "_" + t.LastName
                    }')`
                  ),
                n ||
                  ((n = !0),
                  s.forEach((e) => {
                    null != t[e.name] &&
                      (e.noInit
                        ? e.isString
                          ? mp.gui.emmit(
                              `window.charStore.char${e.name} ('${t[e.name]}')`
                            )
                          : mp.gui.emmit(
                              `window.charStore.char${e.name} (${t[e.name]})`
                            )
                        : mp.events.call(
                            "client.charStore." + e.name,
                            t[e.name],
                            e.isString
                          ));
                  })));
            }),
              s.forEach((e) => {
                e.noInit ||
                  mp.events.add(
                    "client.charStore." + e.name,
                    function (t, a = !1) {
                      a
                        ? mp.gui.emmit(
                            `window.charStore.char${e.name} ('${t}')`
                          )
                        : mp.gui.emmit(`window.charStore.char${e.name} (${t})`);
                    }
                  );
              });
            const r = [
              { name: "Login", isString: !0, noInit: !0 },
              { name: "SocialClub", isString: !0, noInit: !0 },
              { name: "Redbucks" },
              { name: "Unique", isString: !0 },
              { name: "Vip" },
              { name: "VipDate", isString: !0 },
              { name: "Subscribe", isString: !0 },
              { name: "Email", isString: !0 },
            ];
            mp.events.add("toslots", function (e, t, o, i) {
              a.g.FadeScreen(!0, 0);
              const n = JSON.parse(e);
              let s = [-1, -1, -2, -2, -2, -2, -2, -2, -2];
              n &&
                (mp.gui.emmit(`window.accountStore.accountLogin('${n.Login}')`),
                (s = n.charsSlot)),
                mp.gui.emmit(`window.accountStore.accountData('${e}')`),
                mp.events.call(
                  "initCustomizationCharsData",
                  t,
                  o,
                  i,
                  JSON.stringify(s)
                ),
                n &&
                  r.forEach((e) => {
                    null != n[e.name] &&
                      (e.noInit
                        ? e.isString
                          ? mp.gui.emmit(
                              `window.accountStore.account${e.name} ('${
                                n[e.name]
                              }')`
                            )
                          : mp.gui.emmit(
                              `window.accountStore.account${e.name} (${
                                n[e.name]
                              })`
                            )
                        : mp.events.call(
                            "client.accountStore." + e.name,
                            n[e.name],
                            e.isString
                          ));
                  });
            }),
              r.forEach((e) => {
                e.noInit ||
                  mp.events.add(
                    "client.accountStore." + e.name,
                    function (t, a = !1) {
                      a
                        ? mp.gui.emmit(
                            `window.accountStore.account${e.name} ('${t}')`
                          )
                        : mp.gui.emmit(
                            `window.accountStore.account${e.name} (${t})`
                          );
                    }
                  );
              }),
              mp.events.add("client.accountStore.otherStatsData", (e) => {
                mp.gui.emmit(`window.accountStore.otherStatsData('${e}')`);
              }),
              (a.g.binderFunctions.o_hud = () => {
                try {
                  if (a.g.menuCheck() || a.g.chatActive) return;
                  a.g.showhud && a.g.showHint
                    ? ((a.g.showHint = !1),
                      mp.gui.emmit("window.hudStore.isHelp (false)"))
                    : a.g.showhud
                    ? ((a.g.showhud = !a.g.showhud),
                      mp.events.call("showHUD", a.g.showhud))
                    : ((a.g.showHint = !0),
                      mp.gui.emmit("window.hudStore.isHelp (true)"),
                      (a.g.showhud = !a.g.showhud),
                      mp.events.call("showHUD", a.g.showhud));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/hud",
                    "global.binderFunctions.o_hud",
                    e.toString()
                  );
                }
              }),
              (a.g.binderFunctions.cruise = () => {
                try {
                  if (
                    !a.g.loggedin ||
                    a.g.chatActive ||
                    a.g.editing ||
                    a.g.menuCheck()
                  )
                    return;
                  if (
                    !a.g.localplayer.isInAnyVehicle(!1) ||
                    a.g.localplayer.vehicle.getPedInSeat(-1) !=
                      a.g.localplayer.handle
                  )
                    return;
                  let n = a.g.localplayer.vehicle.getClass();
                  if (14 == n || 15 == n || 16 == n) return;
                  if (0 == a.g.localplayer.vehicle.isOnAllWheels()) return;
                  var e = a.g.localplayer.vehicle;
                  if (e.isTyreBurst(4, !0) || e.isTyreBurst(5, !0)) return;
                  if (1747439474 == e.model || 2034235290 == e.model) return;
                  if (new Date().getTime() - i < 300)
                    mp.events.call(
                      "openInput",
                      "Круиз-контроль",
                      "Укажите скорость в км/ч",
                      3,
                      "setCruise"
                    ),
                      mp.gui.emmit("window.vehicleState.cruiseControl (false)");
                  else if (-1 == o) {
                    var t = e.getSpeed();
                    t > 1 &&
                      (e.setMaxSpeed(t),
                      (o = t),
                      mp.gui.emmit("window.vehicleState.cruiseControl (true)"));
                  } else
                    (o = -1),
                      e.setMaxSpeed(
                        mp.game.vehicle.getVehicleModelMaxSpeed(e.model)
                      ),
                      mp.gui.emmit("window.vehicleState.cruiseControl (false)");
                  i = new Date().getTime();
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/hud",
                    "global.binderFunctions.cruise",
                    e.toString()
                  );
                }
              }),
              mp.events.add("setCruiseSpeed", function (e) {
                try {
                  if (!e || e.length < 1) return;
                  if (NaN === (e = parseInt(e)) || e < 1) return;
                  if (
                    !a.g.localplayer.isInAnyVehicle(!1) ||
                    a.g.localplayer.vehicle.getPedInSeat(-1) !=
                      a.g.localplayer.handle
                  )
                    return;
                  let s = a.g.localplayer.vehicle.getClass();
                  if (14 == s || 15 == s || 16 == s) return;
                  if (0 == a.g.localplayer.vehicle.isOnAllWheels()) return;
                  var t = a.g.localplayer.vehicle;
                  if (t.isTyreBurst(4, !0) || t.isTyreBurst(5, !0)) return;
                  if (1747439474 == t.model || 2034235290 == t.model) return;
                  var i = t.getSpeed();
                  if ((e /= 3.6) < i)
                    return void mp.events.call(
                      "notify",
                      4,
                      9,
                      "Нельзя установить скорость меньше, чем она есть на данный момент, снизьте скорость и попробуйте еще раз.",
                      6e3
                    );
                  var n = mp.game.vehicle.getVehicleModelMaxSpeed(t.model);
                  e > n && (e = n),
                    t.setMaxSpeed(e),
                    (o = e),
                    mp.gui.emmit("window.vehicleState.cruiseControl (true)");
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/hud",
                    "setCruiseSpeed",
                    e.toString()
                  );
                }
              }),
              mp.events.add("newPassport", function (e, t) {
                try {
                  e && mp.players.exists(e) && (a.g.passports[e.name] = t);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/hud",
                    "newPassport",
                    e.toString()
                  );
                }
              }),
              (a.g.hudstatus.invehicle = !1),
              (a.g.getStreetName = (e, t, a) => {
                const o = mp.game.pathfind.getStreetNameAtCoord(e, t, a, 0, 0);
                return mp.game.ui.getStreetNameFromHashKey(o.streetName);
              }),
              rpc.register("rpc.getStreetName", (e) =>
                getStreetName(e.x, e.y, e.z)
              ),
              (a.g.getAreaName = (e, t, a) => {
                const o = mp.game.zone.getNameOfZone(e, t, a);
                return mp.game.ui.getLabelText(o);
              }),
              rpc.register("rpc.getAreaName", (e) =>
                getAreaName(e.x, e.y, e.z)
              ),
              mp.events.add(a.g.renderName["1s"], () => {
                try {
                  d(),
                    a.g.hudstatus.online != mp.players.length &&
                      ((a.g.hudstatus.online = mp.players.length),
                      mp.gui.emmit(
                        `window.serverStore.serverOnline (${a.g.hudstatus.online})`
                      ));
                  const t = getStreetName(
                      a.g.localplayer.position.x,
                      a.g.localplayer.position.y,
                      a.g.localplayer.position.z
                    ),
                    o = getAreaName(
                      a.g.localplayer.position.x,
                      a.g.localplayer.position.y,
                      a.g.localplayer.position.z
                    );
                  a.g.hudstatus.street != t &&
                    ((a.g.hudstatus.street = t),
                    mp.gui.emmit(`window.hudStore.street ("${t}")`)),
                    a.g.hudstatus.area != o &&
                      ((a.g.hudstatus.area = o),
                      mp.gui.emmit(`window.hudStore.area ("${o}")`));
                  const i =
                    ((e = 360 - a.g.localplayer.getHeading()),
                    (e %= 360) >= 22.5 && e < 67.5
                      ? "NE"
                      : e >= 67.5 && e < 112.5
                      ? "E"
                      : e >= 112.5 && e < 157.5
                      ? "SE"
                      : e >= 157.5 && e < 202.5
                      ? "S"
                      : e >= 202.5 && e < 247.5
                      ? "SW"
                      : e >= 247.5 && e < 292.5
                      ? "W"
                      : e >= 292.5 && e < 337.5
                      ? "NW"
                      : "N");
                  a.g.hudstatus.direction != i &&
                    ((a.g.hudstatus.direction = i),
                    mp.gui.emmit(`window.hudStore.direction ("${i}")`));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/hud",
                    a.g.renderName["1s"],
                    e.toString()
                  );
                }
                var e;
              }),
              mp.events.add(a.g.renderName["125ms"], () => {
                try {
                  if (!a.g.loggedin) return;
                  const e = a.g.localplayer.isInAnyVehicle(!1),
                    t = a.g.localplayer.vehicle;
                  if (e && a.g.hudstatus.invehicle) {
                    if (null != t) {
                      a.g.hudstatus.speed !== (3.6 * t.getSpeed()).toFixed() &&
                        ((a.g.hudstatus.speed = (3.6 * t.getSpeed()).toFixed()),
                        mp.gui.emmit(
                          `window.vehicleState.speed(${a.g.hudstatus.speed})`
                        )),
                        ("undefined" === a.g.Petrol ||
                          "number" != typeof a.g.Petrol ||
                          isNaN(a.g.Petrol)) &&
                          ((a.g.Petrol = Number(t.getVariable("PETROL"))),
                          mp.gui.emmit(
                            `window.vehicleState.fuel(${
                              a.g.Petrol
                            }, ${t.getClass()})`
                          ));
                      let e = t.model;
                      -1 != o
                        ? 1747439474 == e || 2034235290 == e
                          ? ((o = -1),
                            mp.gui.emmit(
                              "window.vehicleState.cruiseControl (false)"
                            ))
                          : t.setMaxSpeed(o)
                        : 1747439474 == e
                        ? t.setMaxSpeed(30)
                        : 2034235290 == e && t.setMaxSpeed(40);
                    }
                  } else
                    e && !a.g.hudstatus.invehicle
                      ? c(t)
                      : !e && a.g.hudstatus.invehicle && p();
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/hud",
                    a.g.renderName["125ms"],
                    e.toString()
                  );
                }
              }),
              mp.events.add(a.g.renderName["5s"], () => {
                try {
                  if (!a.g.loggedin) return;
                  (mp.gui.cursor.visible || a.g.deathTimerOn) &&
                    mp.game.invoke("0xF4F2C0D4EE209E20");
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/hud",
                    a.g.renderName["5s"],
                    e.toString()
                  );
                }
              }),
              mp.events.add("render", () => {
                try {
                  if (
                    (((a.g.chatActive ||
                      !a.g.menuOpened ||
                      a.g.phoneStatus ||
                      a.g.isPopup ||
                      a.g.deathTimerOn ||
                      a.g.startedMining ||
                      a.g.isPhoneOpen) &&
                      3 !== a.g.bigMapStatus) ||
                      Natives.HIDE_HUD_AND_RADAR_THIS_FRAME(),
                    !a.g.loggedin)
                  )
                    return;
                  mp.game.ui.setHudColour(143, 228, 66, 66, 255),
                    mp.game.ui.setHudColour(144, 228, 66, 66, 255),
                    mp.game.ui.setHudColour(145, 228, 66, 66, 255),
                    mp.game.ui.hideHudComponentThisFrame(2),
                    mp.game.ui.hideHudComponentThisFrame(3),
                    mp.game.ui.hideHudComponentThisFrame(6),
                    mp.game.ui.hideHudComponentThisFrame(7),
                    mp.game.ui.hideHudComponentThisFrame(8),
                    mp.game.ui.hideHudComponentThisFrame(9),
                    mp.game.ui.hideHudComponentThisFrame(19),
                    mp.game.ui.hideHudComponentThisFrame(20),
                    mp.game.ui.hideHudComponentThisFrame(22);
                } catch (e) {
                  if (
                    new Date().getTime() - a.g.trycatchtime["player/hud"] <
                    6e4
                  )
                    return;
                  (a.g.trycatchtime["player/hud"] = new Date().getTime()),
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/hud",
                      "render",
                      e.toString()
                    );
                }
              });
            let l = null,
              m = null;
            new Date().getTime();
            const c = (e) => {
              e &&
                mp.vehicles.exists(e) &&
                a.g.localplayer.isInAnyVehicle(!1) &&
                e.getPedInSeat(-1) == a.g.localplayer.handle &&
                !a.g.hudstatus.invehicle &&
                (a.g.getVehicleIndicatorsInfo(e),
                (l = null),
                (m = -1),
                1747439474 == e.model
                  ? e.setMaxSpeed(30)
                  : 2034235290 == e.model && e.setMaxSpeed(40),
                mp.gui.emmit("window.hudStore.inVehicle (true)"),
                mp.gui.emmit(
                  `window.vehicleState.maxSpeed(${(
                    3.6 * mp.game.vehicle.getVehicleModelMaxSpeed(e.model)
                  ).toFixed()})`
                ),
                (a.g.hudstatus.invehicle = !0),
                (a.g.Petrol = Number(e.getVariable("PETROL"))),
                mp.gui.emmit(
                  `window.vehicleState.fuel(${a.g.Petrol}, ${e.getClass()})`
                ));
            };
            mp.events.add("playerLeaveVehicle", (e) => {
              p();
            });
            const p = () => {
              a.g.hudstatus.invehicle &&
                (mp.gui.emmit("window.hudStore.inVehicle (false)"),
                a.g.localplayer.setConfigFlag(32, !0),
                (a.g.Petrol = 0),
                (a.g.hudstatus.invehicle = !1));
            };
            let g = null,
              _ = null;
            const d = () => {
              const e = mp.game.graphics.getSafeZoneSize(),
                t = mp.game.graphics.getScreenAspectRatio(!1);
              if (e != g || t != _) {
                const a = mp.game.graphics.getScreenActiveResolution(0, 0);
                (g = e),
                  (_ = t),
                  mp.gui.emmit(
                    `window.hud.updateSafeZone(${a.x}, ${a.y}, ${g}, ${_})`
                  ),
                  h();
              }
            };
            mp.events.add("client:OnBrowserInit", () => {
              h(), d();
            }),
              (a.g.bigMapStatus = 0),
              mp.game.ui.setRadarZoom(1),
              mp.game.ui.setRadarBigmapEnabled(!1, !1),
              mp.keys.bind(a.g.Keys.VK_Z, !1, function () {
                try {
                  if (
                    !a.g.loggedin ||
                    mp.gui.cursor.visible ||
                    a.g.chatActive ||
                    a.g.menuCheck() ||
                    a.g.localplayer.vehicle
                  )
                    return;
                  0 === a.g.bigMapStatus
                    ? (mp.game.ui.setRadarZoom(0), (a.g.bigMapStatus = 1))
                    : 1 === a.g.bigMapStatus
                    ? (mp.game.ui.setRadarBigmapEnabled(!0, !1),
                      mp.game.ui.setRadarZoom(0),
                      (a.g.bigMapStatus = 2))
                    : 2 === a.g.bigMapStatus
                    ? (a.g.bigMapStatus = 3)
                    : (mp.game.ui.setRadarBigmapEnabled(!1, !1),
                      mp.game.ui.setRadarZoom(1),
                      (a.g.bigMapStatus = 0)),
                    h();
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/hud",
                    "VK_Z",
                    e.toString()
                  );
                }
              });
            const h = () => {
              try {
                const e = 0.05,
                  t = 0.05,
                  o = 1,
                  i = mp.game.graphics.getScreenAspectRatio(!1),
                  n = mp.game.graphics.getScreenActiveResolution(0, 0),
                  s = 1 / n.x,
                  r = 1 / n.y,
                  l = {
                    width: s * (n.x / ((2 == a.g.bigMapStatus ? 2.53 : 4) * i)),
                    height: r * (n.y / 5.674),
                    scaleX: s,
                    scaleY: r,
                    leftX: s * (n.x * (e * (10 * Math.abs(o - 1)))),
                    bottomY: 1 - r * (n.y * (t * (10 * Math.abs(o - 1)))),
                  };
                return (
                  (l.rightX = l.leftX + l.width),
                  (l.topY = l.bottomY - l.height),
                  (l.width = l.rightX * n.x),
                  3 == a.g.bigMapStatus && (l.width = 0),
                  void mp.gui.emmit(`window.hud.updateMapWidth(${l.width})`)
                );
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/hud",
                  "getMinimapAnchor",
                  e.toString()
                );
              }
            };
            (a.g.isEnter = null),
              mp.events.add("hud.oEnter", function (e) {
                try {
                  (a.g.isEnter = e), mp.gui.emmit(`window.hudEnter('${e}')`);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/hud",
                    "hud.oEnter",
                    e.toString()
                  );
                }
              }),
              mp.events.add("hud.cEnter", function () {
                try {
                  (a.g.isEnter = null), mp.gui.emmit("window.hudEnter(-1)");
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/hud",
                    "hud.cEnter",
                    e.toString()
                  );
                }
              }),
              mp.events.add("hud.tip", (e, t) => {
                mp.gui.emmit(`window.showTip ('${e}', '${t}')`);
              }),
              mp.events.add(
                "hud.kill",
                (e, t, a, o = "#DFDFDF", i = "#DFDFDF") => {
                  try {
                    mp.gui.emmit(
                      `window.kill.show ('${e}', '${t}', '${a}', '${o}', '${i}')`
                    );
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "vehicle/radiosync",
                      "playerLeaveVehicle",
                      e.toString()
                    );
                  }
                }
              ),
              mp.events.add("hud.kill.clear", () => {
                try {
                  mp.gui.emmit("window.kill.clear ()");
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "vehicle/radiosync",
                    "playerLeaveVehicle",
                    e.toString()
                  );
                }
              });
            let u = Natives.GET_FRAME_COUNT(),
              y = Natives.GET_GAME_TIMER(),
              v = u,
              f = y,
              w = 0;
            (a.g.GetFps = () => {
              (v = Natives.GET_FRAME_COUNT()),
                (f = Natives.GET_GAME_TIMER()),
                f - y > 1e3 && ((w = v - u - 1), (u = v), (y = f)),
                mp.game.graphics.drawText("FPS: " + w, [0.5, 0.9], {
                  scale: [0.35, 0.35],
                  outline: !0,
                  color: [255, 255, 255, 185],
                  font: 0,
                });
            }),
              (a.g.notifyCount = 2);
            class S {
              constructor(e, t, a, o) {
                (this.type = e),
                  (this.title = t),
                  (this.elements = a),
                  (this.timeout = o),
                  (this.endtime = -1),
                  (this.percent = 100);
              }
            }
            let M = [];
            const b = (e, t, a, o) => {
              -1 === M.findIndex((e) => e.title === t && e.text === a) &&
                M.push(new S(e, t, a, o));
            };
            mp.events.add("notifyClear", (e) => {
              T(e, !1);
            });
            const T = (e, t) => {
                t && M.length > 0
                  ? ((M = []), C())
                  : "object" == typeof M[0] && (M.splice(e, 1), C());
              },
              C = () => {
                if ("object" == typeof M[0]) {
                  const e = a.g.notifyCount <= 1 ? 2 : a.g.notifyCount,
                    t = Array.from(M);
                  mp.gui.emmit(
                    `window.notification('${JSON.stringify(t.splice(0, e))}')`
                  );
                } else mp.gui.emmit("window.notification(false)");
              };
            mp.events.add(a.g.renderName["150ms"], () => {
              (() => {
                if (M.length > 0) {
                  const e = a.g.notifyCount <= 1 ? 2 : a.g.notifyCount;
                  for (let t = 0; t < e; t++)
                    if ("object" == typeof M[t]) {
                      const e = new Date().getTime(),
                        a = M[t];
                      -1 === a.endtime
                        ? ((a.endtime = new Date().getTime() + a.timeout), C())
                        : M[t].percent > 0 && ((M[t].percent = 0), C()),
                        void 0 !== a && e > a.endtime && (M.splice(t, 1), C());
                    }
                }
              })();
            });
            const D = [
              "information",
              "error",
              "success",
              "information",
              "error",
            ];
            mp.events.add("notify", (e, t, a, o) => {
              b(D[e], "Уведомление", a, o);
            }),
              mp.events.add("notifyToKey", (e, t, o, i, n) => {
                b(
                  D[e],
                  "Уведомление",
                  o.replace(/!_!/g, a.g.Keys[a.g.userBinder[n].keyCode]),
                  i
                );
              });
            let P = null;
            a.g.binderFunctions.dellNotification = () => {
              M.length > 0 &&
                (null !== P
                  ? (clearTimeout(P), (P = null), T(0, !0))
                  : (T(0, !1),
                    (P = setTimeout(() => {
                      P = null;
                    }, 250))));
            };
          },
          2725: (e, t, a) => {
            let o = !1;
            (a.g.input = {
              head: "",
              desc: "",
              len: "",
              cBack: "",
              set: function (e, t, i, n) {
                (this.head = e),
                  (this.desc = t),
                  (this.len = i),
                  (this.cBack = n),
                  mp.gui.emmit(
                    `window.router.setPopUp("PopupInput", {title: '${this.head}', plholder: '${this.desc}', length: ${this.len}});`
                  ),
                  (mp.gui.cursor.visible = !0),
                  (o = !1),
                  a.g.menuCheck() ||
                    (a.g.menuOpen(), (o = !0), (a.g.isPopup = !0));
              },
              open: function () {
                a.g.menuCheck() ||
                  (mp.gui.emmit('window.router.setPopUp("PopupInput")'),
                  a.g.menuOpen());
              },
              close: function () {
                mp.gui.emmit("window.router.setPopUp()"),
                  o && a.g.menuClose(),
                  (o = !1),
                  (a.g.isPopup = !1);
              },
            }),
              mp.events.add("input", (e) => {
                try {
                  if ("" == input.cBack) return;
                  "join_private_lobby" == input.cBack
                    ? mp.events.call("airsoft_joinPrivateLobby_client", 2, e)
                    : "mafia_join_private_lobby" == input.cBack
                    ? mp.events.call("mafia_joinPrivateLobby_client", 2, e)
                    : "tanks_join_private_lobby" == input.cBack
                    ? mp.events.call("tanks_joinPrivateLobby_client", 2, e)
                    : "setCruise" == input.cBack
                    ? mp.events.call("setCruiseSpeed", e)
                    : "boombox" == input.cBack
                    ? mp.events.callRemote("setFirstBoomboxURL", e)
                    : "update_boombox_url" == input.cBack
                    ? mp.events.callRemote("updateBoomboxURL", e)
                    : "take_frac_ammo" == input.cBack
                    ? mp.events.callRemote("server.takeFractionAmmo", e)
                    : "sendReportFromClientInput" == input.cBack
                    ? mp.events.callRemote("sendReportFromClient", e)
                    : mp.events.callRemote("inputCallback", input.cBack, e),
                    (input.cBack = ""),
                    input.close();
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/input",
                    "input",
                    e.toString()
                  );
                }
              }),
              mp.events.add("openInput", (e, t, a, o) => {
                input.set(e, t, a, o);
              }),
              mp.events.add("closeInput", () => {
                input.close();
              });
          },
          3848: (e, t, a) => {
            var o = !1;
            mp.events.add("showJobMenu", (e, t) => {
              try {
                (a.g.menuCheck() && 1 != o) ||
                  (a.g.menuOpen(),
                  (mp.gui.cursor.visible = !0),
                  (o = !0),
                  mp.discord.update(
                    "Выбирает работу по душе",
                    `на RedAge под ID ${a.g.localplayer.remoteId}`
                  ),
                  mp.gui.emmit('window.router.setView("PlayerJobSelector")'));
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/jobselector",
                  "showJobMenu",
                  e.toString()
                );
              }
            }),
              mp.events.add("closeJobMenu", () => {
                a.g.menuClose(),
                  (mp.gui.cursor.visible = !1),
                  (o = !1),
                  mp.gui.emmit("window.router.setHud()");
              }),
              (a.g.binderFunctions.jobselectorOpened = () => {
                o &&
                  (mp.gui.emmit("window.router.setHud()"),
                  (o = !1),
                  a.g.menuClose());
              }),
              mp.events.add("selectJob", (e) => {
                try {
                  if (new Date().getTime() - a.g.lastCheck < 1e3) return;
                  (a.g.lastCheck = new Date().getTime()),
                    mp.events.callRemote("jobjoin", e);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/jobselector",
                    "selectJob",
                    e.toString()
                  );
                }
              });
          },
          1494: (e, t, a) => {
            var o = "";
            function i() {
              a.g.menuClose(),
                mp.gui.emmit("window.router.setHud();"),
                (o = "");
            }
            mp.events.add("openlift", (e, t) => {
              !(function (e, t) {
                a.g.menuCheck() ||
                  (mp.gui.emmit(
                    `window.router.setView("PlayerLift", ${JSON.stringify(
                      [
                        ["Гараж", "1 этаж", "49 этаж", "Крыша"],
                        ["Гараж", "Бункер", "Крыша", "Склад"],
                      ][e]
                    )})`
                  ),
                  a.g.menuOpen(),
                  (o = t));
              })(e, t);
            }),
              mp.events.add("lift", (e, t) => {
                switch (e) {
                  case "stop":
                    i();
                    break;
                  case "start":
                    mp.events.callRemote(o, t), i();
                }
              });
          },
          9174: (e, t, a) => {
            const o = {
              treeIndex: -1,
              treeStage: 0,
              treePosition: void 0,
              treeHP: 100,
              interval: void 0,
              restartTimeout: void 0,
              process_count: 0,
            };
            function i(e, t, a, o, i, n, s) {
              let r = mp.game.graphics.world3dToScreen2d(
                new mp.Vector3(t, a, o)
              );
              if (null != r && null != r.x && null != r.y) {
                if (1 == e) {
                  mp.game.graphics.drawRect(r.x, r.y, i, n, 0, 0, 0, 200);
                  let e = (s * i) / 100 / 2;
                  100 == s
                    ? mp.game.graphics.drawRect(
                        r.x,
                        r.y,
                        (s * i) / 100,
                        n,
                        0,
                        200,
                        0,
                        200
                      )
                    : s >= 75
                    ? mp.game.graphics.drawRect(
                        r.x - 0.0375 + e,
                        r.y,
                        (s * i) / 100,
                        n,
                        0,
                        200,
                        0,
                        200
                      )
                    : s < 75 && s >= 45
                    ? mp.game.graphics.drawRect(
                        r.x - 0.0375 + e,
                        r.y,
                        (s * i) / 100,
                        n,
                        255,
                        255,
                        0,
                        200
                      )
                    : s < 45 &&
                      mp.game.graphics.drawRect(
                        r.x - 0.0375 + e,
                        r.y,
                        (s * i) / 100,
                        n,
                        215,
                        55,
                        55,
                        200
                      );
                }
                mp.game.graphics.drawText(
                  1 == e ? `${s}HP\nНажмите один раз E чтобы рубить` : "E",
                  [r.x, r.y - 0.01],
                  {
                    font: 0,
                    color: [255, 255, 255, 185],
                    scale: [0.25, 0.25],
                    outline: !0,
                  }
                );
              }
            }
            mp.events.add("lumberjackJob_setTreeInfo", (e, t, a, i) => {
              try {
                (o.treeIndex = e),
                  (o.treeStage = t),
                  (o.treePosition = a),
                  (o.treeHP = i);
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/lumberjack",
                  "lumberjackJob_setTreeInfo",
                  e.toString()
                );
              }
            }),
              mp.events.add("lumberjackJob_updateTreeInfo", (e, t, a) => {
                try {
                  o.treeIndex == e && ((o.treeStage = t), (o.treeHP = a));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/lumberjack",
                    "lumberjackJob_updateTreeInfo",
                    e.toString()
                  );
                }
              }),
              mp.events.add("lumberjackJob_clearInfo", () => {
                (o.treeIndex = -1),
                  (o.treeStage = 0),
                  (o.treePosition = void 0),
                  (o.treeHP = 100),
                  void 0 !== o.interval &&
                    (clearInterval(o.interval), (o.interval = void 0)),
                  void 0 !== o.restartTimeout &&
                    (clearTimeout(o.restartTimeout),
                    (o.restartTimeout = void 0));
              }),
              mp.events.add("lumberjackJob_startProcess", () => {
                try {
                  if (-1 == o.treeIndex) return;
                  (a.g.startedMining = !0),
                    a.g.localplayer.freezePosition(!0),
                    (a.g.menuOpened = !0),
                    mp.discord.update(
                      "Рубит деревья в лесу",
                      `на RedAge под ID ${a.g.localplayer.remoteId}`
                    ),
                    mp.events.callRemote("Lumberjack_StartAnimCutTree"),
                    void 0 !== o.interval &&
                      (clearInterval(o.interval), (o.interval = void 0)),
                    void 0 !== o.restartTimeout &&
                      (clearTimeout(o.restartTimeout),
                      (o.restartTimeout = void 0)),
                    (o.process_count = 0),
                    (o.interval = setInterval(() => {
                      a.g.localplayer.vehicle ||
                      a.g.cuffed ||
                      !0 === a.g.isDeath ||
                      a.g.isDemorgan
                        ? mp.events.call("lumberjackJob_stopProcess")
                        : ((o.process_count += 1e3),
                          o.treeHP - 25 >= 0 && (o.treeHP -= 25),
                          o.process_count >= 4e3 &&
                            ((a.g.startedMining = !1),
                            (o.process_count = 0),
                            (o.treeHP = 0),
                            void 0 !== o.interval &&
                              (clearInterval(o.interval),
                              (o.interval = void 0)),
                            mp.events.callRemote(
                              "Lumberjack_CutTree",
                              o.treeIndex
                            ),
                            (o.restartTimeout = setTimeout(() => {
                              mp.events.call("lumberjackJob_startProcess");
                            }, 15500))));
                    }, 3300));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/lumberjack",
                    "lumberjackJob_startProcess",
                    e.toString()
                  );
                }
              }),
              mp.events.add("lumberjackJob_stopProcess", () => {
                try {
                  (a.g.startedMining = !1),
                    (o.process_count = 0),
                    void 0 !== o.interval &&
                      (clearInterval(o.interval), (o.interval = void 0)),
                    void 0 !== o.restartTimeout &&
                      (clearTimeout(o.restartTimeout),
                      (o.restartTimeout = void 0)),
                    a.g.localplayer.freezePosition(!1),
                    (a.g.menuOpened = !1);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/lumberjack",
                    "lumberjackJob_startProcess",
                    e.toString()
                  );
                }
              }),
              mp.keys.bind(69, !0, () => {
                -1 == o.treeIndex ||
                  a.g.localplayer.vehicle ||
                  a.g.cuffed ||
                  !0 === a.g.isDeath ||
                  a.g.isDemorgan ||
                  ((!a.g.anti_flood ||
                    (a.g.anti_flood &&
                      new Date().getTime() - a.g.anti_flood >= 1e3)) &&
                    (0 != o.treeStage || a.g.startedMining
                      ? a.g.startedMining
                        ? (mp.events.call("lumberjackJob_stopProcess"),
                          mp.events.callRemote(
                            "Lumberjack_StopCutTree",
                            o.treeIndex
                          ))
                        : 1 == o.treeStage &&
                          mp.events.callRemote(
                            "Lumberjack_TakeTimber",
                            o.treeIndex
                          )
                      : mp.events.callRemote(
                          "Lumberjack_HitTree",
                          o.treeIndex
                        )),
                  (a.g.anti_flood = new Date().getTime()));
              }),
              mp.events.add("render", () => {
                try {
                  -1 !== o.treeIndex &&
                    void 0 !== o.treePosition &&
                    2 != o.treeStage &&
                    (mp.game.controls.disableControlAction(
                      0,
                      a.g.Inputs.ATTACK,
                      !0
                    ),
                    mp.game.controls.disableControlAction(
                      0,
                      a.g.Inputs.VEH_ATTACK,
                      !0
                    ),
                    mp.game.controls.disableControlAction(
                      0,
                      a.g.Inputs.VEH_ATTACK2,
                      !0
                    ),
                    mp.game.controls.disableControlAction(
                      0,
                      a.g.Inputs.VEH_PASSENGER_ATTACK,
                      !0
                    ),
                    mp.game.controls.disableControlAction(
                      0,
                      a.g.Inputs.MELEE_ATTACK_LIGHT,
                      !0
                    ),
                    mp.game.controls.disableControlAction(
                      0,
                      a.g.Inputs.MELEE_ATTACK_HEAVY,
                      !0
                    ),
                    mp.game.controls.disableControlAction(
                      0,
                      a.g.Inputs.MELEE_ATTACK_ALTERNATE,
                      !0
                    ),
                    mp.game.controls.disableControlAction(
                      0,
                      a.g.Inputs.ATTACK2,
                      !0
                    ),
                    mp.game.controls.disableControlAction(
                      0,
                      a.g.Inputs.MELEE_ATTACK1,
                      !0
                    ),
                    mp.game.controls.disableControlAction(
                      0,
                      a.g.Inputs.MELEE_ATTACK2,
                      !0
                    ),
                    0 == o.treeStage
                      ? i(
                          1,
                          o.treePosition.x,
                          o.treePosition.y,
                          o.treePosition.z,
                          0.075,
                          0.015,
                          o.treeHP
                        )
                      : i(
                          2,
                          o.treePosition.x,
                          o.treePosition.y,
                          o.treePosition.z,
                          0.075,
                          0.015,
                          o.treeHP
                        ));
                } catch (e) {
                  if (
                    new Date().getTime() -
                      a.g.trycatchtime["player/lumberjack"] <
                    5e3
                  )
                    return;
                  (a.g.trycatchtime["player/lumberjack"] =
                    new Date().getTime()),
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/lumberjack",
                      "render",
                      e.toString()
                    );
                }
              });
          },
          1130: (e, t, a) => {
            a.g.menuOpened = !0;
            let o = 0;
            (a.g.menuCheck = () =>
              !!(
                a.g.menuOpened ||
                mp.game.ui.isPauseMenuActive() ||
                a.g.isBind ||
                a.g.isSartMetro
              )),
              (a.g.awaitMenuCheck = () =>
                new Promise(async (e, t) => {
                  try {
                    if (!a.g.menuCheck()) return e();
                    let t = 0;
                    for (; a.g.menuCheck(); ) {
                      if (t > 5e3) return e("Ошибка awaitMenuCheck.");
                      t++, await a.g.wait(0);
                    }
                    return e();
                  } catch (t) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/menus",
                      "render",
                      t.toString()
                    ),
                      e();
                  }
                }));
            let i = !1;
            (a.g.menuOpen = function (e = !1) {
              (o = Date.now() + 500),
                (mp.gui.cursor.visible = !0),
                e && mp.gui.cursor.show(!1, !0),
                (i = e),
                (a.g.menuOpened = !0);
            }),
              (a.g.menuClose = function () {
                (o = Date.now() + 150),
                  mp.gui.cursor.show(!0, !0),
                  mp.gui.cursor.visible && mp.game.ui.setPauseMenuActive(!1),
                  (mp.gui.cursor.visible = !1),
                  a.g.DiscordDefault(),
                  (a.g.menuOpened = !1),
                  (i = !1),
                  (a.g.isPopup = !1);
              }),
              mp.events.add("render", () => {
                try {
                  (a.g.menuOpened && mp.game.ui.isPauseMenuActive()) ||
                  o > Date.now()
                    ? mp.game.ui.setPauseMenuActive(!1)
                    : a.g.ANTIANIM &&
                      mp.game.controls.disableControlAction(
                        0,
                        a.g.Inputs.LOOK_BEHIND,
                        !0
                      ),
                    i &&
                      (mp.game.controls.disableAllControlActions(0),
                      mp.game.controls.enableControlAction(
                        0,
                        a.g.Inputs.MOVE_LR,
                        !0
                      ),
                      mp.game.controls.enableControlAction(
                        0,
                        a.g.Inputs.MOVE_UD,
                        !0
                      ),
                      mp.game.controls.enableControlAction(
                        0,
                        a.g.Inputs.MOVE_UP_ONLY,
                        !0
                      ),
                      mp.game.controls.enableControlAction(
                        0,
                        a.g.Inputs.MOVE_DOWN_ONLY,
                        !0
                      ),
                      mp.game.controls.enableControlAction(
                        0,
                        a.g.Inputs.MOVE_LEFT_ONLY,
                        !0
                      ),
                      mp.game.controls.enableControlAction(
                        0,
                        a.g.Inputs.MOVE_RIGHT_ONLY,
                        !0
                      ),
                      mp.game.controls.enableControlAction(
                        0,
                        a.g.Inputs.JUMP,
                        !0
                      ),
                      mp.game.controls.enableControlAction(
                        0,
                        a.g.Inputs.VEH_MOVE_LR,
                        !0
                      ),
                      mp.game.controls.enableControlAction(
                        0,
                        a.g.Inputs.VEH_MOVE_UD,
                        !0
                      ),
                      mp.game.controls.enableControlAction(
                        0,
                        a.g.Inputs.VEH_ACCELERATE,
                        !0
                      ),
                      mp.game.controls.enableControlAction(
                        0,
                        a.g.Inputs.VEH_BRAKE,
                        !0
                      ),
                      mp.game.controls.enableControlAction(
                        0,
                        a.g.Inputs.VEH_HANDBRAKE,
                        !0
                      ),
                      mp.keys.isDown(a.g.Keys.VK_RBUTTON) &&
                        (mp.game.controls.enableControlAction(
                          2,
                          a.g.Inputs.LOOK_LR,
                          !0
                        ),
                        mp.game.controls.enableControlAction(
                          2,
                          a.g.Inputs.LOOK_UD,
                          !0
                        ),
                        mp.game.controls.enableControlAction(
                          2,
                          a.g.Inputs.LOOK_UP_ONLY,
                          !0
                        ),
                        mp.game.controls.enableControlAction(
                          2,
                          a.g.Inputs.LOOK_DOWN_ONLY,
                          !0
                        ),
                        mp.game.controls.enableControlAction(
                          2,
                          a.g.Inputs.LOOK_LEFT_ONLY,
                          !0
                        ),
                        mp.game.controls.enableControlAction(
                          2,
                          a.g.Inputs.LOOK_RIGHT_ONLY,
                          !0
                        )));
                } catch (e) {
                  if (
                    new Date().getTime() - a.g.trycatchtime["player/menus"] <
                    6e4
                  )
                    return;
                  (a.g.trycatchtime["player/menus"] = new Date().getTime()),
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/menus",
                      "render",
                      e.toString()
                    );
                }
              });
          },
          3174: (e, t, a) => {
            const o = {
                markers: [],
                colshapes: [],
                gov_markers: [],
                gov_colshapes: [],
                gov_warehouse_marker: mp.markers.new(
                  1,
                  new mp.Vector3(-595.855, 2094.609, 126.9356),
                  5.25,
                  { visible: !0, dimension: 0, color: [255, 255, 255, 220] }
                ),
                gov_warehouse_shape: mp.colshapes.newSphere(
                  -595.855,
                  2094.609,
                  131.4356,
                  5
                ),
                can_press: -1,
                gov_place: !1,
                interval: void 0,
                mining_seconds: 0,
                mining_needful_time: 11,
                ore_carry_status: !1,
              },
              i = [
                { x: 1288, y: 2988, z: 41 },
                { x: 1314, y: 2986, z: 41 },
                { x: 1258, y: 2996, z: 42 },
                { x: 1282, y: 3022, z: 43 },
                { x: 1324, y: 3035, z: 42 },
                { x: 1890, y: 3252, z: 46 },
                { x: 1867, y: 3255, z: 44 },
                { x: 1863, y: 3288, z: 45 },
                { x: 1933, y: 3278, z: 46 },
                { x: 1909, y: 3279, z: 45 },
                { x: 1932, y: 3459, z: 45 },
                { x: 1897, y: 3456, z: 47 },
                { x: 1922, y: 3427, z: 44 },
                { x: 1916, y: 3459, z: 48 },
                { x: 1940, y: 3478, z: 44 },
                { x: 2224, y: 3206, z: 49 },
                { x: 2228, y: 3187, z: 50 },
                { x: 2235, y: 3158, z: 50 },
                { x: 2220, y: 3155, z: 51 },
                { x: 2190, y: 3216, z: 51 },
              ],
              n = [{ x: -588.0355, y: 2058.172, z: 130.7677 }];
            for (let e = 0; e < i.length; e++)
              o.markers.push(
                mp.markers.new(
                  1,
                  new mp.Vector3(i[e].x, i[e].y, i[e].z - 5.25),
                  6,
                  { visible: !0, dimension: 0, color: [255, 255, 255, 220] }
                )
              ),
                o.colshapes.push(
                  mp.colshapes.newSphere(i[e].x, i[e].y, i[e].z, 6)
                );
            for (let e = 0; e < n.length; e++)
              o.gov_markers.push(
                mp.markers.new(
                  1,
                  new mp.Vector3(n[e].x, n[e].y, n[e].z - 5.25),
                  6,
                  { visible: !0, dimension: 0, color: [255, 255, 255, 220] }
                )
              ),
                o.gov_colshapes.push(
                  mp.colshapes.newSphere(n[e].x, n[e].y, n[e].z, 6)
                );
            mp.game.entity.createModelHide(
              -596.0465,
              2088.56,
              130.587,
              3,
              mp.game.joaat("prop_mineshaft_door"),
              !0
            ),
              mp.events.add("playerEnterColshape", (e) => {
                for (let t = 0; t < o.colshapes.length; t++)
                  e === o.colshapes[t] &&
                    ((o.can_press = t),
                    (o.gov_place = !1),
                    (o.mining_seconds = 0),
                    mp.gui.emmit(
                      'window.events.callEvent("cef.hud.game.open", 69, 1, 8, false)'
                    ),
                    void 0 !== o.interval &&
                      (clearInterval(o.interval), (o.interval = void 0)));
                for (let t = 0; t < o.gov_colshapes.length; t++)
                  e === o.gov_colshapes[t] &&
                    ((!a.g.anti_flood ||
                      (a.g.anti_flood &&
                        new Date().getTime() - a.g.anti_flood >= 3e3)) &&
                      mp.events.callRemote("PlayerEnteredMineShape", t),
                    (a.g.anti_flood = new Date().getTime()));
                e === o.gov_warehouse_shape &&
                  !0 === o.ore_carry_status &&
                  mp.events.callRemote("PlayerPutGovResources");
              }),
              mp.events.add("playerExitColshape", (e) => {
                for (let t = 0; t < o.colshapes.length; t++)
                  e === o.colshapes[t] &&
                    ((o.can_press = -1),
                    (o.gov_place = !1),
                    mp.gui.emmit(
                      'window.events.callEvent("cef.hud.game.close")'
                    ),
                    !0 === a.g.startedMining &&
                      mp.events.call("mineJob_stopMining"));
                for (let t = 0; t < o.gov_colshapes.length; t++)
                  e === o.gov_colshapes[t] &&
                    ((o.can_press = -1),
                    (o.gov_place = !1),
                    mp.gui.emmit(
                      'window.events.callEvent("cef.hud.game.close")'
                    ),
                    !0 === a.g.startedMining &&
                      mp.events.call("mineJob_stopMining"));
              }),
              mp.events.add("confirmPlayerEnteredMineShape", (e) => {
                try {
                  (o.can_press = e),
                    (o.gov_place = !0),
                    (o.mining_seconds = 0),
                    mp.gui.emmit(
                      'window.events.callEvent("cef.hud.game.open", 69, 1, 8, false)'
                    ),
                    void 0 !== o.interval &&
                      (clearInterval(o.interval), (o.interval = void 0));
                } catch (e) {
                  if (
                    new Date().getTime() - a.g.trycatchtime["player/mine_job"] <
                    5e3
                  )
                    return;
                  (a.g.trycatchtime["player/mine_job"] = new Date().getTime()),
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/mine_job",
                      "confirmPlayerEnteredMineShape",
                      e.toString()
                    );
                }
              }),
              mp.events.add("mineJob_updateToolInfo", (e) => {
                try {
                  1 == e
                    ? (o.mining_needful_time = 15)
                    : 2 == e
                    ? (o.mining_needful_time = 13)
                    : 3 == e && (o.mining_needful_time = 11);
                } catch (e) {
                  if (
                    new Date().getTime() - a.g.trycatchtime["player/mine_job"] <
                    5e3
                  )
                    return;
                  (a.g.trycatchtime["player/mine_job"] = new Date().getTime()),
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/mine_job",
                      "mineJob_updateToolInfo",
                      e.toString()
                    );
                }
              }),
              mp.events.add("mineJob_updateOreCarryStatus", (e) => {
                o.ore_carry_status = e;
              }),
              mp.events.add("mineJob_startMining", () => {
                try {
                  (a.g.startedMining = !0),
                    a.g.localplayer.freezePosition(!0),
                    (a.g.menuOpened = !0),
                    mp.discord.update(
                      "Копает руду на шахте",
                      `на RedAge под ID ${a.g.localplayer.remoteId}`
                    ),
                    mp.gui.emmit(
                      'window.events.callEvent("cef.hud.game.close")'
                    ),
                    mp.gui.emmit(
                      'window.events.callEvent("cef.hud.game.open", 69, 1, 8, false)'
                    ),
                    void 0 !== o.interval &&
                      (clearInterval(o.interval), (o.interval = void 0)),
                    (o.mining_seconds = 0),
                    (o.interval = setInterval(() => {
                      a.g.localplayer.vehicle ||
                      a.g.cuffed ||
                      !0 === a.g.isDeath ||
                      a.g.isDemorgan
                        ? mp.events.call("mineJob_stopMining")
                        : ((o.mining_seconds += 0.5),
                          mp.gui.emmit(
                            `window.events.callEvent("cef.hud.game.updateProgress", ${
                              (o.mining_seconds + 0.5) / o.mining_needful_time
                            })`
                          ),
                          o.mining_seconds >= o.mining_needful_time &&
                            ((o.mining_seconds = 0),
                            mp.gui.emmit(
                              `window.events.callEvent("cef.hud.game.updateProgress", ${
                                0 / o.mining_needful_time
                              })`
                            ),
                            !0 === o.gov_place
                              ? ((a.g.startedMining = !1),
                                void 0 !== o.interval &&
                                  (clearInterval(o.interval),
                                  (o.interval = void 0)),
                                a.g.localplayer.freezePosition(!1),
                                (a.g.menuOpened = !1),
                                mp.events.callRemote("PlayerMinedGovResources"))
                              : mp.events.callRemote("PlayerMinedResources")));
                    }, 500));
                } catch (e) {
                  if (
                    new Date().getTime() - a.g.trycatchtime["player/mine_job"] <
                    5e3
                  )
                    return;
                  (a.g.trycatchtime["player/mine_job"] = new Date().getTime()),
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/mine_job",
                      "mineJob_startMining",
                      e.toString()
                    );
                }
              }),
              mp.keys.bind(69, !0, () => {
                try {
                  if (
                    o.can_press > -1 &&
                    !a.g.startedMining &&
                    !o.ore_carry_status &&
                    !a.g.menuCheck()
                  ) {
                    if (a.g.localplayer.vehicle)
                      return (
                        (!a.g.anti_flood ||
                          (a.g.anti_flood &&
                            new Date().getTime() - a.g.anti_flood >= 3e3)) &&
                          mp.events.call(
                            "notify",
                            1,
                            9,
                            "Вы должны выйти из транспорта.",
                            3e3
                          ),
                        void (a.g.anti_flood = new Date().getTime())
                      );
                    (!a.g.anti_flood ||
                      (a.g.anti_flood &&
                        new Date().getTime() - a.g.anti_flood >= 500)) &&
                      a.g.GetItems(s),
                      (a.g.anti_flood = new Date().getTime());
                  }
                  o.can_press > -1 &&
                    !0 === a.g.startedMining &&
                    mp.events.call("mineJob_stopMining");
                } catch (e) {
                  if (
                    new Date().getTime() - a.g.trycatchtime["player/mine_job"] <
                    3e3
                  )
                    return;
                  (a.g.trycatchtime["player/mine_job"] = new Date().getTime()),
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/mine_job",
                      "mp.keys.bind_0x45",
                      e.toString()
                    );
                }
              }),
              mp.events.add("mineJob_stopMining", () => {
                try {
                  (a.g.startedMining = !1),
                    void 0 !== o.interval &&
                      (clearInterval(o.interval), (o.interval = void 0)),
                    a.g.localplayer.freezePosition(!1),
                    (a.g.menuOpened = !1),
                    mp.events.callRemote("PlayerFinishedMining"),
                    mp.gui.emmit(
                      `window.events.callEvent("cef.hud.game.updateProgress", ${
                        0 / o.mining_needful_time
                      })`
                    );
                } catch (e) {
                  if (
                    new Date().getTime() - a.g.trycatchtime["player/mine_job"] <
                    5e3
                  )
                    return;
                  (a.g.trycatchtime["player/mine_job"] = new Date().getTime()),
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/mine_job",
                      "mineJob_stopMining",
                      e.toString()
                    );
                }
              });
            const s = [236, 235, 234];
            mp.events.add("render", () => {
              try {
                !0 === o.ore_carry_status &&
                  (a.g.localplayer.isFalling() ||
                    a.g.localplayer.isCuffed() ||
                    a.g.localplayer.isFatallyInjured() ||
                    a.g.localplayer.isShooting() ||
                    a.g.localplayer.isSwimming() ||
                    a.g.localplayer.isClimbing()) &&
                  ((!a.g.anti_flood ||
                    (a.g.anti_flood &&
                      new Date().getTime() - a.g.anti_flood >= 3e3)) &&
                    (mp.events.call(
                      "notify",
                      1,
                      9,
                      "Вы уронили добытый ресурс.",
                      3e3
                    ),
                    mp.events.callRemote("PlayerStopCarryOre")),
                  (a.g.anti_flood = new Date().getTime()));
              } catch (e) {
                if (
                  new Date().getTime() - a.g.trycatchtime["player/mine_job"] <
                  5e3
                )
                  return;
                (a.g.trycatchtime["player/mine_job"] = new Date().getTime()),
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/mine_job",
                    "render",
                    e.toString()
                  );
              }
            }),
              mp.events.add("client.inventory.GetItem", (e, t) => {
                try {
                  if (
                    ((e) => {
                      let t = !1;
                      return (
                        s.forEach((a) => {
                          e.includes(a) && (t = !0);
                        }),
                        t
                      );
                    })((e = JSON.parse(e))) &&
                    t
                  ) {
                    if (e.includes(s[0])) o.mining_needful_time = 11;
                    else if (e.includes(s[1])) o.mining_needful_time = 13;
                    else {
                      if (!e.includes(s[2]))
                        return mp.events.call(
                          "notify",
                          1,
                          9,
                          "У Вас нет кирки.",
                          3e3
                        );
                      o.mining_needful_time = 15;
                    }
                    mp.events.callRemote("PlayerStartedMining");
                  } else
                    mp.events.call("notify", 1, 9, "У Вас нет кирки.", 3e3);
                } catch (e) {}
              }),
              mp.events.add("resourceSell_playerSell", (e, t, a) => {
                0 == e
                  ? mp.events.callRemote("PlayerSellOres", t, a)
                  : 1 == e && mp.events.callRemote("PlayerSellTrees", t, a);
              }),
              mp.events.add("resourceSell_openMenu", (e, t) => {
                a.g.menuCheck() ||
                  (a.g.menuOpen(),
                  1 == e &&
                    (t = JSON.stringify({
                      0: { Price: 9, ItemId: 245 },
                      1: { Price: 19, ItemId: 246 },
                      2: { Price: 30, ItemId: 247 },
                    })),
                  mp.gui.emmit(
                    `window.router.setView("PlayerOresSale", [${e}, '${t}']);`
                  ),
                  mp.discord.update(
                    "Продаёт руду",
                    `на RedAge под ID ${a.g.localplayer.remoteId}`
                  ));
              }),
              mp.events.add("resourceSell_closeMenu", () => {
                mp.gui.emmit("window.router.setHud();"), a.g.menuClose();
              });
          },
          3038: (e, t, a) => {
            a.g.questNameToPeds = {};
            let o = {};
            const i = {
              u_m_y_chip: {
                animDictionary:
                  "amb@world_human_bum_slumped@male@laying_on_left_side@base",
                animationName: "base",
              },
            };
            mp.events.add("pedStreamIn", (e) => {
              try {
                if (e) {
                  const t = e.getVariable("questName");
                  if (null != t) {
                    i[t] &&
                      a.g.requestAnimDict(i[t].animDictionary).then(() => {
                        e.taskPlayAnim(
                          i[t].animDictionary,
                          i[t].animationName,
                          8,
                          8,
                          -1,
                          1,
                          0,
                          !1,
                          !1,
                          !1
                        );
                      });
                    const n = Natives.GET_CLOCK_HOURS();
                    [22, 23, 24, 0, 1, 2, 3, 4, 5, 6, 7].includes(n) &&
                      (o[e.remoteId] = e.position);
                  }
                }
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/npc_dialogs",
                  "pedStreamIn",
                  e.toString()
                );
              }
            }),
              mp.events.add("pedStreamOut", (e) => {
                e && o[e.remoteId] && delete o[e.remoteId];
              }),
              mp.events.add("render", () => {
                a.g.loggedin &&
                  Object.values(o).forEach((e) => {
                    mp.game.graphics.drawSpotLight(
                      e.x,
                      e.y,
                      e.z + 8,
                      0,
                      0,
                      -1,
                      255,
                      255,
                      255,
                      35,
                      0.3,
                      5,
                      4.5,
                      5
                    );
                  });
              }),
              mp.events.add("client.questStore.init", (e) => {
                mp.gui.emmit(`window.questStore.init('${e}')`),
                  mp.peds.forEach((e) => {
                    if (e && "ped" === e.type) {
                      const t = e.getVariable("questName");
                      "string" == typeof t &&
                        t.length > 3 &&
                        (questNameToPeds[t] = e);
                    }
                  });
              });
            let n = !1,
              s = !1;
            const r = {
              npc_tracy: "Трейси",
              npc_doctor: "Доктором Шульцем",
              npc_granny: "Бабушкой Granny",
              npc_fd_dada: "Дядюшкой",
              npc_fd_edward: "Эдвардом",
              npc_fd_zak: "Заком Цукербергом",
              npc_airdrop: "Хуаном Де Картелем",
              npc_oressale: "Марком",
              npc_fracpolic: "Работником полиции",
              npc_fracsheriff: "Шерифом",
              npc_fracnews: "Дженнифер",
              npc_fracems: "Эммануэлем",
              npc_premium: "Клементином",
              npc_stock: "Александром",
              npc_huntingshop: "Беаром Гриллсом",
              npc_treessell: "Дмитрием",
              npc_donateautoroom: "Донатой Редбаксовной",
              npc_cityhall: "Эльнарой Каримовой",
              npc_wedding: "Отцом Никитой",
              npc_pet: "Михаилом",
              npc_petshop: "Продавцом питомцев",
              npc_zdobich: "Виталием Здобичем",
              npc_rieltor: "Илоном Таском",
              npc_furniture: "Иваном",
              npc_carevac: "Робертом",
              npc_airshop: "Продавцом воздушного транспорта",
              npc_eliteroom: "Продавцом элитного транспорта",
            };
            mp.events.add("client.quest.open", (e, t, o, i, l, m) => {
              if (a.g.menuCheck()) return;
              if (n) return;
              const c = mp.peds.atRemoteId(e);
              c &&
                0 !== c.handle &&
                ((c.questName = t),
                (s = c),
                a.g.localplayer.setAlpha(0),
                (a.g.speedCamera = m),
                a.g.createCamera("peds", c),
                mp.events.call("client.quest.startSpeech"),
                r[c.questName] &&
                  mp.discord.update(
                    `Болтает с ${r[c.questName]}`,
                    `на RedAge под ID ${a.g.localplayer.remoteId}`
                  ),
                mp.gui.emmit(
                  `window.router.setView("QuestsDialog", { aName: '${t}', qId: ${o}, status: ${i}, compility: ${l} })`
                ),
                (n = !0),
                a.g.menuOpen());
            });
            const l = [
              "npc_eliteroom",
              "npc_airdrop",
              "npc_wedding",
              "npc_carevac",
              "npc_airshop",
              "npc_huntingshop",
              "npc_treessell",
              "npc_fd_dada",
            ];
            mp.events.add("sounds.playQuest", (e, t) => {
              if (s && mp.peds.exists(s)) {
                let o = a.g.VolumeQuest;
                -1 !== l.indexOf(s.questName) && (o *= 3.5),
                  new soundApi.Sounds3DPos(
                    "ped_" + s.remoteId,
                    e,
                    s.getBoneCoords(12844, 0, 0, 0),
                    {
                      volume: soundApi.getVolume(t, o),
                      looped: !1,
                      maxDistance: 5,
                      rolloffFactor: 1,
                      refDistance: 1,
                      startOffsetPercent: 0,
                      fade: 1e3,
                      syncAudio: 0,
                    }
                  );
              }
            }),
              mp.events.add("sounds.stopQuest", () => {
                s &&
                  mp.peds.exists(s) &&
                  mp.events.call(
                    "sounds.trigger",
                    "stopQuest",
                    "ped_" + s.remoteId
                  );
              }),
              mp.events.add("client.quest.startSpeech", () => {
                s &&
                  mp.peds.exists(s) &&
                  s.playFacialAnim("mic_chatter", "mp_facial");
              }),
              mp.events.add("client.quest.close", (e = !0) => {
                n &&
                  (a.g.localplayer.setAlpha(255),
                  a.g.cameraManager.deleteCamera("peds", !0, 500),
                  (n = !1),
                  a.g.menuClose(),
                  mp.gui.emmit("window.router.setHud();"),
                  mp.events.call("sounds.stopQuest"),
                  s &&
                    mp.peds.exists(s) &&
                    s.playFacialAnim(
                      "mood_normal_1",
                      "facials@gen_male@variations@normal"
                    ),
                  (s = !1),
                  e && mp.events.callRemote("server.quest.clear"));
              }),
              mp.events.add("client.quest.perform", (e) => {
                n &&
                  (mp.events.callRemote("server.quest.perform", e),
                  e && mp.events.call("client.quest.close", !1));
              }),
              mp.events.add("client.quest.action", (e) => {
                n &&
                  (mp.events.callRemote("server.quest.action", e),
                  e && mp.events.call("client.quest.close", !1));
              }),
              mp.events.add("client.quest.take", (e = 0) => {
                n &&
                  (mp.events.callRemote("server.quest.take", e),
                  mp.events.call("client.quest.close", !1));
              }),
              mp.events.add("client.quest.router", (e) => {
                try {
                  e &&
                    questNameToPeds[e] &&
                    mp.peds.exists(questNameToPeds[e]) &&
                    (mp.events.call(
                      "notify",
                      2,
                      9,
                      "Вы поставили метку на карте!",
                      3e3
                    ),
                    mp.events.call(
                      "createWaypoint",
                      questNameToPeds[e].position.x,
                      questNameToPeds[e].position.y
                    ));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "quests",
                    "client.quest.router",
                    e.toString()
                  );
                }
              });
            let m = {};
            mp.events.add("client.quest.selectQuest.Add", (e, t) => {
              try {
                e &&
                  questNameToPeds[e] &&
                  mp.peds.exists(questNameToPeds[e]) &&
                  (m[e] = { position: questNameToPeds[e].position, isEnd: t });
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "quests",
                  "client.quest.selectQuest.Add",
                  e.toString()
                );
              }
            }),
              mp.events.add("client.quest.selectQuest.Clear", () => {
                try {
                  m = {};
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "quests",
                    "client.quest.selectQuest.Clear",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.quest.selectQuest", (e) => {
                mp.events.callRemote("server.quest.selectQuest", e);
              }),
              mp.events.add("client.quest.selectedQuest", (e) => {
                mp.gui.emmit(`window.questStore.selectQuest('${e}')`);
              });
            const c = [255, 255, 255, 255];
            mp.events.add("render", () => {
              try {
                if (!a.g.loggedin) return;
                const e = Object.values(m);
                if (e.length > 0) {
                  const t = a.g.localplayer.position;
                  e.forEach((e) => {
                    if (
                      mp.game.system.vdist(
                        e.position.x,
                        e.position.y,
                        e.position.z,
                        t.x,
                        t.y,
                        t.z
                      ) < 10
                    ) {
                      const t = mp.game.graphics.world3dToScreen2d(
                        e.position.x,
                        e.position.y,
                        e.position.z + 1
                      );
                      if (!t) return !1;
                      e.isEnd
                        ? a.g.DrawSprite(
                            "redage_textures_001",
                            "quest_take",
                            c,
                            t.x,
                            t.y
                          )
                        : a.g.DrawSprite(
                            "redage_textures_001",
                            "quest_perform",
                            c,
                            t.x,
                            t.y
                          );
                    }
                  });
                }
              } catch (e) {
                if (new Date().getTime() - a.g.trycatchtime.quests < 6e4)
                  return;
                (a.g.trycatchtime.quests = new Date().getTime()),
                  mp.events.callRemote(
                    "client_trycatch",
                    "quests",
                    "render",
                    e.toString()
                  );
              }
            });
            const p = [
                { x: 3325.742, y: 5154.111, z: 18.26104 },
                { x: -3296.77, y: 967.5144, z: 8.291529 },
                { x: 478.7054, y: 5584.981, z: 791.2987 },
                { x: -320.168, y: 2804.835, z: 72.27036 },
                { x: -545.7715, y: 310.9334, z: 83.02084 },
              ],
              g = {
                blip: void 0,
                area_shape: void 0,
                item_shape: void 0,
                object: void 0,
                collected: 0,
              };
            mp.events.add("client.start.collecting_items", (e) => {
              if (
                ((g.collected = e),
                mp.events.call("hud.cEnter"),
                (a.g.selectBear = -1),
                void 0 !== g.blip && (g.blip.destroy(), (g.blip = void 0)),
                void 0 !== g.area_shape &&
                  (g.area_shape.destroy(), (g.area_shape = void 0)),
                void 0 !== g.item_shape &&
                  (g.item_shape.destroy(), (g.item_shape = void 0)),
                void 0 !== g.object &&
                  (g.object.destroy(), (g.object = void 0)),
                p[e])
              ) {
                let t = p[e];
                (g.blip = mp.blips.new(489, new mp.Vector3(t.x, t.y), {
                  alpha: 255,
                  color: 75,
                  name: "Мишка",
                })),
                  (g.item_shape = mp.colshapes.newSphere(t.x, t.y, t.z, 1)),
                  (g.area_shape = mp.colshapes.newSphere(t.x, t.y, t.z, 25)),
                  (g.object = mp.objects.new(
                    mp.game.joaat("v_ilev_mr_rasberryclean"),
                    new mp.Vector3(t.x, t.y, t.z - 1.05),
                    { rotation: new mp.Vector3(0, 0, 30), dimension: -1 }
                  ));
              }
            }),
              (a.g.selectBear = -1),
              mp.events.add("playerEnterColshape", (e) => {
                try {
                  e &&
                    e === g.area_shape &&
                    (mp.gui.chat.push(
                      "Где то в этой местности есть Плюшевый Мишка, найди и забери его."
                    ),
                    mp.events.call(
                      "notify",
                      2,
                      9,
                      "Где то в этой местности есть Плюшевый Мишка, найди и забери его.",
                      3e3
                    )),
                    e &&
                      e === g.item_shape &&
                      (mp.events.call("hud.oEnter", "Bear"),
                      (a.g.selectBear = g.collected)),
                    e &&
                      e === d.shape &&
                      (1 == d.type
                        ? (mp.events.call("hud.oEnter", "BoatFix"),
                          (a.g.dfdayMissionCanPress = !0))
                        : 2 == d.type &&
                          mp.events.call("client.update.npc_dfday_mission"));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "events/halloween",
                    "playerEnterColshape2",
                    e.toString()
                  );
                }
              }),
              mp.events.add("playerExitColshape", (e) => {
                try {
                  e &&
                    e === g.item_shape &&
                    (mp.events.call("hud.cEnter"), (a.g.selectBear = -1)),
                    e &&
                      e === d.shape &&
                      (mp.events.call("hud.oEnter"),
                      (a.g.dfdayMissionCanPress = !1));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "events/halloween",
                    "playerExitColshape2",
                    e.toString()
                  );
                }
              });
            const _ = [
                { x: 591.237, y: 2744.368, z: 42.04274 },
                { x: -2963.751, y: 432.2156, z: 15.27653 },
                { x: -701.0593, y: -883.822, z: 23.78847 },
                { x: 108.0191, y: -204.2509, z: 54.70723 },
                { x: -87.65588, y: 6494.705, z: 32.10069 },
              ],
              d = {
                blip: void 0,
                shape: void 0,
                marker: void 0,
                type: 0,
                collected: 0,
              };
            function h() {
              try {
                mp.events.call("hud.oEnter"),
                  (a.g.dfdayMissionCanPress = !1),
                  (d.type = 0),
                  (d.collected = 0),
                  void 0 !== d.blip && (d.blip.destroy(), (d.blip = void 0)),
                  void 0 !== d.shape && (d.shape.destroy(), (d.shape = void 0)),
                  void 0 !== d.marker &&
                    (d.marker.destroy(), (d.marker = void 0));
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/npc_dialogs",
                  "clearDFDayMissionInfo",
                  e.toString()
                );
              }
            }
            mp.events.add("client.create.npc_dfday_mission", (e) => {
              if ((h(), (d.type = e), 1 == e))
                (d.shape = mp.colshapes.newSphere(
                  3822.291,
                  4477.015,
                  3.144983,
                  1
                )),
                  (d.marker = mp.markers.new(
                    1,
                    new mp.Vector3(3822.291, 4477.015, 3.144983 - 1.25),
                    1,
                    { visible: !0, dimension: 0, color: [255, 255, 255, 220] }
                  ));
              else if (2 == e) {
                let e = _[d.collected];
                (d.blip = mp.blips.new(764, new mp.Vector3(e.x, e.y), {
                  alpha: 255,
                  color: 17,
                  name: "Документы",
                })),
                  (d.shape = mp.colshapes.newSphere(e.x, e.y, e.z, 3)),
                  (d.marker = mp.markers.new(
                    1,
                    new mp.Vector3(e.x, e.y, e.z - 1.25),
                    3,
                    { visible: !0, dimension: 0, color: [255, 255, 255, 220] }
                  )),
                  mp.events.call(
                    "notify",
                    1,
                    9,
                    "На карте отмечены документы, которые ты должен собрать.",
                    3e3
                  );
              }
            }),
              mp.events.add("client.update.npc_dfday_mission", () => {
                try {
                  if (1 == d.type) {
                    if (d.collected > 0)
                      return void mp.events.call(
                        "notify",
                        0,
                        9,
                        "Вы уже начали чинить лодку.",
                        3e3
                      );
                    (d.collected = 1),
                      mp.events.call("freeze", !0),
                      a.g
                        .requestAnimDict("amb@world_human_hammering@male@base")
                        .then(() => {
                          a.g.localplayer.taskPlayAnim(
                            "amb@world_human_hammering@male@base",
                            "base",
                            8,
                            -8,
                            -1,
                            1,
                            0,
                            !1,
                            !1,
                            !1
                          );
                        }),
                      setTimeout(() => {
                        h(),
                          a.g.localplayer.clearTasksImmediately(),
                          mp.events.call("freeze", !1),
                          mp.events.call(
                            "notify",
                            2,
                            9,
                            "Ты починил лодку, поговори с Дядюшкой.",
                            3e3
                          ),
                          mp.events.callRemote(
                            "server.update.npc_dfday_mission"
                          );
                      }, 1e4);
                  } else if (2 == d.type) {
                    if (d.collected + 1 >= 5)
                      return (
                        h(),
                        mp.events.call(
                          "notify",
                          2,
                          9,
                          "Вы развезли все документы, поговорите с Эдвардом снова.",
                          3e3
                        ),
                        mp.events.call("createWaypoint", 2.710338, -708.8864),
                        void mp.events.callRemote("server.update.npc_fd_edward")
                      );
                    (d.collected += 1),
                      void 0 !== d.blip &&
                        (d.blip.destroy(), (d.blip = void 0)),
                      void 0 !== d.shape &&
                        (d.shape.destroy(), (d.shape = void 0)),
                      void 0 !== d.marker &&
                        (d.marker.destroy(), (d.marker = void 0));
                    let e = _[d.collected];
                    (d.blip = mp.blips.new(764, new mp.Vector3(e.x, e.y), {
                      alpha: 255,
                      color: 17,
                      name: "Документы",
                    })),
                      (d.shape = mp.colshapes.newSphere(e.x, e.y, e.z, 3)),
                      (d.marker = mp.markers.new(
                        1,
                        new mp.Vector3(e.x, e.y, e.z - 1.25),
                        3,
                        {
                          visible: !0,
                          dimension: 0,
                          color: [255, 255, 255, 220],
                        }
                      )),
                      mp.events.call(
                        "notify",
                        2,
                        9,
                        "Вы привезли документы. Двигайтесь к следующему месту!",
                        3e3
                      );
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/npc_dialogs",
                    "client.update.npc_dfday_mission",
                    e.toString()
                  );
                }
              });
          },
          8717: (e, t, a) => {
            let o = null,
              i = null,
              n = { model: null, entity: null, dimension: 0 };
            function s(e, t) {
              mp.gui.emmit(`window.petshop.setVariable("${e}", '${t}')`);
            }
            mp.events.add("openPetshop", async (e, t, r, l) => {
              try {
                if (a.g.menuCheck()) return;
                (o = JSON.parse(e)),
                  (i = JSON.parse(t)),
                  a.g.menuOpen(),
                  mp.gui.emmit('window.router.setView("BusinessPetShop")'),
                  await a.g.wait(50),
                  s("models", e),
                  s("hashes", t),
                  s("prices", r),
                  (n.entity = mp.peds.new(
                    i[0],
                    new mp.Vector3(-758.2859, 320.9569, 175.2784),
                    218.8,
                    l
                  )),
                  (n.dimension = l),
                  a.g.localplayer.setRotation(0, 0, 0, 2, !0),
                  (n.model = o[0]),
                  a.g.createCamera("petshop");
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/petshop",
                  "openPetshop",
                  e.toString()
                );
              }
            }),
              mp.events.add("closePetshop", () => {
                try {
                  if (new Date().getTime() - a.g.lastCheck < 50) return;
                  (a.g.lastCheck = new Date().getTime()),
                    mp.events.callRemote("petshopCancel"),
                    r();
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/petshop",
                    "closePetshop",
                    e.toString()
                  );
                }
              }),
              mp.events.add("petshop", (e, t) => {
                try {
                  "model" === e &&
                    ((n.model = o[t]),
                    null != n.entity &&
                      (n.entity.destroy(),
                      (n.entity = mp.peds.new(
                        i[t],
                        new mp.Vector3(-758.2859, 320.9569, 175.2784),
                        218.8,
                        n.dimension
                      ))));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/petshop",
                    "petshop",
                    e.toString()
                  );
                }
              }),
              mp.events.add("buyPet", () => {
                try {
                  if (new Date().getTime() - a.g.lastCheck < 50) return;
                  (a.g.lastCheck = new Date().getTime()),
                    mp.events.callRemote("petshopBuy", n.model),
                    r();
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/petshop",
                    "buyPet",
                    e.toString()
                  );
                }
              });
            const r = () => {
              a.g.menuClose(),
                mp.gui.emmit("window.router.setHud()"),
                a.g.cameraManager.stopCamera(),
                null != n.entity && (n.entity.destroy(), (n.entity = null));
            };
          },
          8498: (e, t, a) => {
            const o = {
              AllowVehicleClass: [0, 1, 2, 3, 4, 5, 6, 9, 18],
              MaxVehicleCubedSize: 25,
              AllowVehicleSteering: !0,
            };
            let i = !1,
              n = !1,
              s = null,
              r = null,
              l = new Date().getTime();
            function m(e) {
              const t = mp.game.gameplay.getModelDimensions(e.model),
                a = e.getRotation(2),
                o = 0 - t.min.x + t.max.x,
                i = 0 - t.min.y + t.max.y,
                n = (function (e, t, a, o, i, n, s) {
                  const r = Math.cos(e),
                    l = Math.sin(e);
                  return [
                    [(o -= t) * r - (i -= a) * l + t, o * l + i * r + a],
                    [(o + n) * r - i * l + t, (o + n) * l + i * r + a],
                    [
                      (o + n) * r - (i + s) * l + t,
                      (o + n) * l + (i + s) * r + a,
                    ],
                    [o * r - (i + s) * l + t, o * l + (i + s) * r + a],
                  ];
                })(
                  ((a.z + 180) * Math.PI) / 180,
                  e.position.x,
                  e.position.y,
                  e.position.x - t.max.x,
                  e.position.y - t.max.y,
                  o,
                  i
                );
              return {
                front: {
                  x: n[0][0] + (n[1][0] - n[0][0]) / 2,
                  y: n[0][1] + (n[1][1] - n[0][1]) / 2,
                },
                back: {
                  x: n[2][0] + (n[3][0] - n[2][0]) / 2,
                  y: n[2][1] + (n[3][1] - n[2][1]) / 2,
                },
                center: { x: e.position.x, y: e.position.y },
                size: {
                  lengthX: o,
                  lengthY: i,
                  min: { x: t.min.x, y: t.min.y },
                  max: { x: t.max.x, y: t.max.y },
                  z: t.min.z,
                },
              };
            }
            (a.g.binderFunctions.pushVehicleToggle = () => {
              try {
                if (
                  a.g.localplayer.vehicle ||
                  a.g.cuffed ||
                  !0 === a.g.isDeath ||
                  !0 === a.g.isDemorgan
                )
                  return;
                if (
                  (mp.gui.chat.push("pushVehicleToggle 1"),
                  !i &&
                    null !== a.g.entity &&
                    mp.vehicles.exists(a.g.entity) &&
                    0 !== a.g.entity.handle)
                ) {
                  const e = a.g.entity;
                  if (!e.isOnAllWheels()) return !1;
                  mp.gui.chat.push("pushVehicleToggle 2");
                  const t = e.getClass();
                  if (
                    null !== o.AllowVehicleClass &&
                    !1 !== o.AllowVehicleClass &&
                    -1 === o.AllowVehicleClass.indexOf(t)
                  )
                    return !1;
                  if (new Date().getTime() - l < 1e3)
                    return void mp.events.call(
                      "notify",
                      4,
                      9,
                      "Слишком быстро.",
                      1500
                    );
                  mp.gui.chat.push("pushVehicleToggle 3"),
                    (l = new Date().getTime());
                  const i = m(e),
                    n = Math.round(
                      mp.game.system.vdist2(
                        i.front.x,
                        i.front.y,
                        e.position.z,
                        a.g.localplayer.position.x,
                        a.g.localplayer.position.y,
                        a.g.localplayer.position.z
                      ) / 3
                    ),
                    s = Math.round(
                      mp.game.system.vdist2(
                        i.back.x,
                        i.back.y,
                        e.position.z,
                        a.g.localplayer.position.x,
                        a.g.localplayer.position.y,
                        a.g.localplayer.position.z
                      ) / 3
                    );
                  mp.gui.chat.push("pushVehicleToggle 4"),
                    (e.IsInFront = n < s),
                    (e.distanceFront = n),
                    (e.distanceBack = s),
                    (e.vehicleSize = i),
                    mp.gui.chat.push("pushVehicleToggle 5"),
                    (n <= 1.5 || s <= 1.5) &&
                      i.size.lengthY * i.size.lengthX <=
                        o.MaxVehicleCubedSize &&
                      (mp.gui.chat.push("pushVehicleToggle 6"),
                      mp.events.callRemote("StartPushVehicle", e));
                } else
                  i &&
                    (a.g.localplayer.detach(!0, !1),
                    a.g.localplayer.stopAnimTask(
                      "missfinale_c2ig_11",
                      "pushcar_offcliff_m",
                      2
                    ),
                    setTimeout(function () {
                      a.g.localplayer.freezePosition(!1);
                    }, 100),
                    (n = !1),
                    (i = !1),
                    mp.events.callRemote("StopPushVehicle"));
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/push_car",
                  "global.binderFunctions.pushVehicleToggle",
                  e.toString()
                );
              }
            }),
              mp.events.add("StartPushVehicle_client", (e) => {
                try {
                  mp.gui.chat.push("StartPushVehicle_client 1");
                  const t = m(e),
                    o = Math.round(
                      mp.game.system.vdist2(
                        t.front.x,
                        t.front.y,
                        e.position.z,
                        a.g.localplayer.position.x,
                        a.g.localplayer.position.y,
                        a.g.localplayer.position.z
                      ) / 3
                    ),
                    l = Math.round(
                      mp.game.system.vdist2(
                        t.back.x,
                        t.back.y,
                        e.position.z,
                        a.g.localplayer.position.x,
                        a.g.localplayer.position.y,
                        a.g.localplayer.position.z
                      ) / 3
                    );
                  (e.IsInFront = o < l),
                    (e.vehicleSize = t),
                    mp.gui.chat.push("StartPushVehicle_client 2"),
                    n ||
                      a.g.localplayer.isInAnyVehicle(!1) ||
                      ((n = !0),
                      mp.gui.chat.push("StartPushVehicle_client 3"),
                      a.g.localplayer.freezePosition(!0),
                      e.IsInFront
                        ? a.g.localplayer.attachTo(
                            e.handle,
                            6286,
                            0,
                            e.vehicleSize.size.max.y + 0.35,
                            e.vehicleSize.size.z + 0.95,
                            0,
                            0,
                            180,
                            !1,
                            !1,
                            !1,
                            !1,
                            0,
                            !0
                          )
                        : a.g.localplayer.attachTo(
                            e.handle,
                            6286,
                            0,
                            e.vehicleSize.size.min.y - 0.6,
                            e.vehicleSize.size.z + 0.95,
                            0,
                            0,
                            0,
                            !1,
                            !1,
                            !1,
                            !1,
                            0,
                            !0
                          ),
                      (r = e.IsInFront),
                      (s = e),
                      mp.game.streaming.requestAnimDict("missfinale_c2ig_11"),
                      a.g.localplayer.taskPlayAnim(
                        "missfinale_c2ig_11",
                        "pushcar_offcliff_m",
                        2,
                        -8,
                        -1,
                        35,
                        0,
                        !1,
                        !1,
                        !1
                      ),
                      a.g.localplayer.freezePosition(!1),
                      mp.discord.update(
                        "Толкает машину",
                        `на RedAge под ID ${a.g.localplayer.remoteId}`
                      ),
                      (n = !0),
                      (i = !1),
                      setTimeout(() => {
                        i = !0;
                      }, 400));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/push_car",
                    "StartPushVehicle_client",
                    e.toString()
                  );
                }
              }),
              mp.events.add("render", () => {
                try {
                  if (i) {
                    let e = 0,
                      t = a.g.localplayer.position;
                    (e =
                      mp.vehicles.exists(s) && 0 !== s.handle
                        ? mp.game.system.vdist(
                            t.x,
                            t.y,
                            t.z,
                            s.position.x,
                            s.position.y,
                            s.position.z
                          )
                        : 10),
                      e < 5 &&
                      a.g.localplayer.isPlayingAnim(
                        "missfinale_c2ig_11",
                        "pushcar_offcliff_m",
                        3
                      )
                        ? (mp.keys.isDown(65) &&
                            o.AllowVehicleSteering &&
                            a.g.localplayer.taskVehicleTempAction(
                              s.handle,
                              11,
                              500
                            ),
                          mp.keys.isDown(68) &&
                            o.AllowVehicleSteering &&
                            a.g.localplayer.taskVehicleTempAction(
                              s.handle,
                              10,
                              500
                            ),
                          s.hasCollidedWithAnything() &&
                            s.setOnGroundProperly(),
                          r ? s.setForwardSpeed(-1) : s.setForwardSpeed(1),
                          mp.game.graphics.drawText(
                            "Чтобы менять направление движения, используйте A и D.",
                            [0.5, 0.9],
                            {
                              font: 4,
                              color: [255, 255, 255, 255],
                              scale: [0.4, 0.4],
                              centre: !0,
                            }
                          ),
                          mp.game.graphics.drawText(
                            `\nЧтобы перестать толкать транспорт, нажмите ${
                              a.g.Keys[a.g.userBinder[53].keyCode]
                            }.`,
                            [0.5, 0.9],
                            {
                              font: 4,
                              color: [255, 255, 255, 255],
                              scale: [0.4, 0.4],
                              centre: !0,
                            }
                          ))
                        : (e > 5 ||
                            !a.g.localplayer.isPlayingAnim(
                              "missfinale_c2ig_11",
                              "pushcar_offcliff_m",
                              3
                            ) ||
                            !mp.vehicles.exists(s)) &&
                          ((!a.g.anti_flood ||
                            (a.g.anti_flood &&
                              new Date().getTime() - a.g.anti_flood >= 5e3)) &&
                            (a.g.localplayer.detach(!0, !1),
                            a.g.localplayer.stopAnimTask(
                              "missfinale_c2ig_11",
                              "pushcar_offcliff_m",
                              2
                            ),
                            setTimeout(function () {
                              a.g.localplayer.freezePosition(!1);
                            }, 100),
                            (n = !1),
                            (i = !1),
                            mp.events.callRemote("StopPushVehicle")),
                          (a.g.anti_flood = new Date().getTime()));
                  }
                } catch (e) {
                  if (
                    new Date().getTime() - a.g.trycatchtime["player/push_car"] <
                    6e4
                  )
                    return;
                  (a.g.trycatchtime["player/push_car"] = new Date().getTime()),
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/push_car",
                      "render",
                      e.toString()
                    );
                }
              });
          },
          1827: (e, t, a) => {
            (a.g.entity = null),
              (a.g.nearestObject = null),
              (a.g.boosted = !1),
              (a.g.cuffed = !1),
              (a.g.isInSafeZone = !1),
              (a.g.isInCity = !1);
            var o = new Date().getTime(),
              i = new Date().getTime();
            mp.events.add("CUFFED", function (e) {
              try {
                a.g.cuffed = e;
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/render",
                  "CUFFED",
                  e.toString()
                );
              }
            });
            var n = null;
            mp.events.add("safeZone", function (e) {
              try {
                if (
                  ((a.g.isInSafeZone = e),
                  mp.gui.emmit(`window.hudStore.greenZone (${e})`),
                  !0 === a.g.isAdmin)
                )
                  return;
                if (!e)
                  return (
                    null != n && (clearTimeout(n), (n = null)),
                    a.g.localplayer.setInvincible(!1),
                    void mp.events.callRemote("IsSafeZone", !1)
                  );
                null == n &&
                  (n = setTimeout(function () {
                    a.g.isInSafeZone &&
                      (a.g.localplayer.setInvincible(!0),
                      mp.events.callRemote("IsSafeZone", !0)),
                      null != n && (clearTimeout(n), (n = null));
                  }, 15e3));
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/render",
                  "safeZone",
                  e.toString()
                );
              }
            }),
              mp.events.add("insideCity", function (e) {
                a.g.isInCity = e;
              }),
              (a.g.binderFunctions.openCircleMenu = () => {
                try {
                  if (
                    a.g.menuCheck() ||
                    1 == a.g.isDemorgan ||
                    a.g.attachedtotrunk ||
                    1 == a.g.isDeath ||
                    (void 0 !== a.g.inAirsoftLobby &&
                      a.g.inAirsoftLobby >= 0) ||
                    new Date().getTime() - a.g.lastCheck < 1e3
                  )
                    return;
                  if (a.g.localplayer.vehicle)
                    return (
                      (a.g.entity = a.g.localplayer.vehicle),
                      void a.g.OpenCircle("В машине", 0, a.g.entity)
                    );
                  if (
                    ((a.g.entity = c(!1, !0)),
                    !a.g.loggedin ||
                      a.g.chatActive ||
                      null == a.g.entity ||
                      !a.g.entity.doesExist())
                  )
                    return void a.g.OpenCircle("Я", 0);
                  switch (
                    ((a.g.lastCheck = new Date().getTime()), a.g.entity.type)
                  ) {
                    case "object":
                      return void (
                        null != a.g.entity &&
                        a.g.entity.doesExist() &&
                        a.g.entity.isAnObject() &&
                        a.g.entity.dropData &&
                        void 0 !== a.g.entity.dropData.pId &&
                        (249 === a.g.entity.dropData.ItemId
                          ? a.g.OpenCircle("Кальян", 0, a.g.entity)
                          : (mp.gui.cursor.visible = !0))
                      );
                    case "player":
                      return void (
                        -1 !== a.g.GetGender(a.g.entity) &&
                        ((mp.gui.cursor.visible = !0),
                        a.g.OpenCircle("Игрок", 0, a.g.entity))
                      );
                    case "vehicle":
                      return (
                        (mp.gui.cursor.visible = !0),
                        void a.g.OpenCircle("Машина", 0, a.g.entity)
                      );
                    default:
                      return void a.g.OpenCircle("Я", 0);
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/render",
                    "global.binderFunctions.openCircleMenu",
                    e.toString()
                  );
                }
              }),
              (a.g.binderFunctions.dropObject = () => {
                try {
                  if (
                    a.g.menuCheck() ||
                    1 == a.g.isDeath ||
                    1 == a.g.isDemorgan ||
                    a.g.attachedtotrunk
                  )
                    return;
                  if (a.g.circleOpen) return void a.g.CloseCircle();
                  if (
                    ((a.g.entity = c(!0, !0)),
                    !a.g.loggedin ||
                      a.g.chatActive ||
                      null == a.g.entity ||
                      new Date().getTime() - a.g.lastCheck < 1e3)
                  )
                    return;
                  (a.g.lastCheck = new Date().getTime()),
                    null != a.g.entity &&
                      a.g.entity.doesExist() &&
                      "object" == a.g.entity.type &&
                      a.g.entity.isAnObject() &&
                      (a.g.entity.furniture
                        ? mp.events.callRemote("oSelected", a.g.entity.remoteId)
                        : a.g.entity.dropData &&
                          void 0 === a.g.entity.dropData.pId &&
                          mp.events.callRemote("server.raise", a.g.entity));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/render",
                    "global.binderFunctions.dropObject",
                    e.toString()
                  );
                }
              });
            var s = 0,
              r = 1;
            mp.events.add("svem", (e, t) => {
              (s = e), (r = t);
            }),
              mp.events.add("render", () => {
                try {
                  if (!a.g.loggedin) return;
                  if (
                    (a.g.freeze &&
                      (a.g.ToggleFightControls(), a.g.ToggleMovementControls()),
                    mp.game.player.restoreStamina(100),
                    a.g.localplayer.setRagdollFlag(2),
                    a.g.localplayer.setAccuracy(0),
                    mp.game.player.setHealthRechargeMultiplier(0),
                    mp.game.player.setLockonRangeOverride(1.5),
                    mp.game.controls.disableControlAction(1, 7, !0),
                    mp.game.invoke(getNative("IS_CUTSCENE_ACTIVE")) &&
                      mp.game.invoke(getNative("STOP_CUTSCENE_IMMEDIATELY")),
                    mp.game.invoke(getNative("GET_RANDOM_EVENT_FLAG")) &&
                      mp.game.invoke(getNative("SET_RANDOM_EVENT_FLAG"), !1),
                    mp.game.invoke(getNative("GET_MISSION_FLAG")) &&
                      mp.game.invoke(getNative("SET_MISSION_FLAG"), !1),
                    pocketEnabled &&
                      mp.game.controls.disableControlAction(2, 0, !0),
                    ([7, 9].includes(a.g.fractionId) &&
                      [911657153].includes(a.g.weaponData.weapon)) ||
                      [600439132, 126349499].includes(a.g.weaponData.weapon) ||
                      !(
                        a.g.isInSafeZone ||
                        1 == a.g.isDemorgan ||
                        a.g.attachedtotrunk ||
                        a.g.dmgdisabled
                      ) ||
                      (mp.game.controls.disableControlAction(2, 24, !0),
                      mp.game.controls.disableControlAction(2, 69, !0),
                      mp.game.controls.disableControlAction(2, 70, !0),
                      mp.game.controls.disableControlAction(2, 92, !0),
                      mp.game.controls.disableControlAction(2, 114, !0),
                      mp.game.controls.disableControlAction(2, 121, !0),
                      mp.game.controls.disableControlAction(2, 140, !0),
                      mp.game.controls.disableControlAction(2, 141, !0),
                      mp.game.controls.disableControlAction(2, 142, !0),
                      mp.game.controls.disableControlAction(2, 257, !0),
                      mp.game.controls.disableControlAction(2, 263, !0),
                      mp.game.controls.disableControlAction(2, 264, !0),
                      mp.game.controls.disableControlAction(2, 331, !0),
                      mp.game.player.disableFiring(!0)),
                    a.g.localplayer.isInAnyVehicle(!1) &&
                      a.g.localplayer.vehicle)
                  ) {
                    let e = a.g.localplayer.vehicle;
                    if (e.getPedInSeat(-1) == a.g.localplayer.handle) {
                      let t = e.getClass();
                      e.setTyresCanBurst(!0),
                        1 != r && e.setEngineTorqueMultiplier(r),
                        0 == s
                          ? new Date().getTime() - i >= 1e3 &&
                            ((i = new Date().getTime()),
                            8 != t &&
                            13 != t &&
                            (e.isTyreBurst(4, !0) || e.isTyreBurst(5, !0))
                              ? e.setEnginePowerMultiplier(-90)
                              : a.g.isInCity
                              ? e.setEnginePowerMultiplier(-40)
                              : a.g.boosted
                              ? e.setEnginePowerMultiplier(20)
                              : e.setEnginePowerMultiplier(0))
                          : e.setEnginePowerMultiplier(s),
                        e.isInAir() &&
                          a.g.localplayer.isInAnyPlane() &&
                          mp.game.controls.disableControlAction(
                            0,
                            a.g.Inputs.VEH_FLY_THROTTLE_DOWN,
                            !0
                          );
                    }
                  } else
                    a.g.cuffed &&
                      !a.g.localplayer.vehicle &&
                      new Date().getTime() - o >= 3e3 &&
                      (mp.events.callRemote("cuffUpdate"),
                      (o = new Date().getTime()));
                  a.g.AFK_STATUS &&
                    mp.game.graphics.drawText(
                      "Вам установлен статус AFK",
                      [0.5, 0.9],
                      {
                        font: 4,
                        color: [255, 255, 255, 255],
                        scale: [0.4, 0.4],
                        centre: !0,
                      }
                    );
                } catch (e) {
                  if (
                    new Date().getTime() - a.g.trycatchtime["player/render"] <
                    6e4
                  )
                    return;
                  (a.g.trycatchtime["player/render"] = new Date().getTime()),
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/render",
                      "render",
                      e.toString()
                    );
                }
              });
            const l = mp.game.graphics.getScreenActiveResolution(1, 1);
            (a.g.clearScript = (e) => {
              "number" == typeof e &&
                0 !== e &&
                mp.game.shapetest.releaseScriptGuidFromEntity(e);
            }),
              mp.events.add(a.g.renderName["500ms"], () => {
                a.g.loggedin && c();
              }),
              mp.events.add(a.g.renderName["2.5ms"], () => {
                a.g.loggedin && c(!0);
              });
            let m = 0;
            const c = (e = !1, t = !1) => {
                try {
                  if (!a.g.loggedin) return null;
                  if (m > new Date().getTime()) return a.g.entity;
                  if (!t && null !== a.g.entity && a.g.entity.doesExist()) {
                    const e = a.g.entity.position,
                      t = localplayer.position;
                    if (
                      mp.game.gameplay.getDistanceBetweenCoords(
                        e.x,
                        e.y,
                        e.z,
                        t.x,
                        t.y,
                        t.z,
                        !0
                      ) <= 5
                    )
                      return a.g.entity;
                  }
                  if (
                    ((m = new Date().getTime() + 250), !a.g.localplayer.vehicle)
                  ) {
                    let o = null;
                    if (
                      (e ||
                        (o = (() => {
                          try {
                            const e = ((e) => {
                              const t = mp.players.local.getBoneCoords(
                                  12844,
                                  0.5,
                                  0,
                                  0
                                ),
                                a = mp.game.graphics.screen2dToWorld3d([
                                  l.x / 2,
                                  l.y / 2,
                                  14,
                                ]);
                              if (!a) return null;
                              t.z -= 0.3;
                              const o = mp.raycasting.testPointToPoint(
                                t,
                                a,
                                mp.players.local,
                                e
                              );
                              return o
                                ? void 0 === o.entity.type
                                  ? null
                                  : o.entity
                                : null;
                            })(
                              a.g.RAYCASTING_FLAGS.vehicles |
                                a.g.RAYCASTING_FLAGS.players |
                                a.g.RAYCASTING_FLAGS.players2 |
                                a.g.RAYCASTING_FLAGS.objects
                            );
                            if (e) {
                              if ("player" !== e.type && "vehicle" !== e.type)
                                return null;
                              const t = e.position,
                                a = localplayer.position;
                              return mp.game.gameplay.getDistanceBetweenCoords(
                                t.x,
                                t.y,
                                t.z,
                                a.x,
                                a.y,
                                a.z,
                                !0
                              ) > 6
                                ? null
                                : e;
                            }
                          } catch (e) {
                            mp.events.callRemote(
                              "client_trycatch",
                              "player/render",
                              "getLookingAtEntity",
                              e.toString()
                            );
                          }
                          return null;
                        })()),
                      (o ||
                        ((e || t) &&
                          (o = (() => {
                            try {
                              let e = localplayer.getBoneCoords(
                                12844,
                                0.5,
                                0,
                                0
                              );
                              const t = mp.game.graphics.screen2dToWorld3d([
                                l.x / 2,
                                l.y / 2,
                                14,
                              ]);
                              if (!t) return null;
                              e.z -= 0.3;
                              const o = mp.raycasting.testPointToPoint(
                                e,
                                t,
                                a.g.localplayer,
                                -1
                              );
                              if (!o) return null;
                              const i = o.position,
                                n = [];
                              mp.objects.forEachInStreamRangeItems((e) => {
                                const t = e.getCoords(!0),
                                  o = a.g.vdist2(i, t),
                                  s = a.g.vdist2(a.g.localplayer.position, t);
                                o <= 2.2 &&
                                  s <= 3 &&
                                  n.push({ distance: o, entity: e });
                              });
                              const s = n.sort(
                                (e, t) => e.distance - t.distance
                              )[0];
                              return s ? s.entity : null;
                            } catch (e) {
                              mp.events.callRemote(
                                "client_trycatch",
                                "player/render",
                                "getNearestLookingObject",
                                e.toString()
                              );
                            }
                          })()))) &&
                        o &&
                        o.type &&
                        ["vehicle", "object", "player"].includes(o.type))
                    )
                      return o === a.g.entity
                        ? o
                        : "player" !== o.type ||
                          a.g.localplayer.hasClearLosTo(o.handle, 17)
                        ? ("vehicle" === o.type && o.getVariable("isDrone")) ||
                          ("player" === o.type && o.INVISIBLE) ||
                          ("player" === o.type && -1 === a.g.GetGender(o))
                          ? ((a.g.entity = null), null)
                          : ((a.g.entity = o), o)
                        : ((a.g.entity = null), null);
                  }
                  a.g.entity = null;
                } catch (e) {
                  if (
                    new Date().getTime() - a.g.trycatchtime["player/render1"] <
                    6e4
                  )
                    return;
                  (a.g.trycatchtime["player/render1"] = new Date().getTime()),
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/render",
                      "time.5s",
                      e.toString()
                    );
                }
                return null;
              },
              p = [[255, 255, 255]];
            let g = null,
              _ = 360,
              d = null;
            mp.events.add("render", () => {
              try {
                if (!a.g.loggedin) return;
                if (!a.g.showhud) return;
                if (
                  (g && (g.destroy(), (g = null)),
                  a.g.entity &&
                    (!a.g.entity.doesExist() ||
                      a.g.entity.INVISIBLE ||
                      mp.game.gameplay.getDistanceBetweenCoords(
                        a.g.entity.position.x,
                        a.g.entity.position.y,
                        a.g.entity.position.z,
                        localplayer.position.x,
                        localplayer.position.y,
                        localplayer.position.z,
                        !0
                      ) > 6))
                )
                  return void c();
                if (a.g.circleOpen) return void a.g.UpdateCircle(a.g.entity);
                if (a.g.entity) {
                  const e = a.g.entity.type,
                    t = a.g.entity.position;
                  if ("player" == e)
                    if (a.g.localplayer.isInAnyVehicle(!1))
                      mp.game.graphics.drawText(
                        a.g.Keys[a.g.userBinder[32].keyCode],
                        [t.x, t.y, t.z],
                        {
                          font: 0,
                          color: [255, 255, 255, 185],
                          scale: [0.4, 0.4],
                          outline: !0,
                        }
                      );
                    else {
                      const e = 0;
                      --_ < 0 && (_ = 380),
                        (g = mp.markers.new(
                          27,
                          new mp.Vector3(t.x, t.y, t.z - 0.975),
                          1,
                          {
                            rotation: new mp.Vector3(0, 0, _),
                            color: [p[e][0], p[e][1], p[e][2], 185],
                            visible: !0,
                            dimension: a.g.localplayer.dimension,
                          }
                        )),
                        mp.game.graphics.drawText(
                          a.g.Keys[a.g.userBinder[31].keyCode],
                          [t.x, t.y, t.z],
                          {
                            font: 0,
                            color: [255, 255, 255, 185],
                            scale: [0.4, 0.4],
                            outline: !0,
                          }
                        );
                    }
                  else if (
                    "vehicle" == a.g.entity.type &&
                    a.g.entity != localplayer.vehicle
                  )
                    mp.game.graphics.drawText(
                      a.g.Keys[a.g.userBinder[31].keyCode],
                      [t.x, t.y, t.z],
                      {
                        font: 0,
                        color: [255, 255, 255, 185],
                        scale: [0.4, 0.4],
                        outline: !0,
                      }
                    );
                  else if ("object" == a.g.entity.type)
                    if (
                      (a.g.entity !== d
                        ? (a.g.GetItemData(a.g.entity), (d = a.g.entity))
                        : mp.gui.emmit("window.hudItem.dropFocus ()"),
                      !a.g.entity.dropData ||
                        (null == a.g.entity.dropData.pId &&
                          null == a.g.entity.dropData.fId))
                    )
                      mp.game.graphics.drawText(
                        a.g.Keys[a.g.userBinder[32].keyCode],
                        [t.x, t.y, t.z],
                        {
                          font: 0,
                          color: [255, 255, 255, 185],
                          scale: [0.4, 0.4],
                          outline: !0,
                        }
                      );
                    else {
                      let e = a.g.Keys[a.g.userBinder[31].keyCode];
                      if (a.g.isAdmin && null != a.g.entity.dropData.pId) {
                        const t = mp.players.atRemoteId(
                          a.g.entity.dropData.pId
                        );
                        t && (e += `\n(( ${t.name} ))`);
                      }
                      mp.game.graphics.drawText(e, [t.x, t.y, t.z], {
                        font: 0,
                        color: [255, 255, 255, 185],
                        scale: [0.4, 0.4],
                        outline: !0,
                      });
                    }
                }
              } catch (e) {
                if (
                  new Date().getTime() - a.g.trycatchtime["player/render1"] <
                  6e4
                )
                  return;
                (a.g.trycatchtime["player/render1"] = new Date().getTime()),
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/render",
                    "render",
                    e.toString()
                  );
              }
            });
          },
          4859: (e, t, a) => {
            (a.g.reportactive = !1),
              mp.events.add("addreport", (e, t, o) => {
                mp.gui.emmit(
                  `window.reportsStore.addReport(${e},'${t}','${o}')`
                ),
                  a.g.adminLVL <= 8 &&
                    mp.events.call("notify", 0, 2, "Пришел новый репорт!", 3e3);
              }),
              mp.events.add("setreport", (e, t) => {
                mp.gui.emmit(`window.reportsStore.setStatus(${e}, '${t}')`);
              }),
              mp.events.add("delreport", (e) => {
                mp.gui.emmit(`window.reportsStore.deleteReport(${e})`);
              }),
              mp.events.add("takereport", (e) => {
                mp.events.callRemote("takereport", e);
              }),
              mp.events.add("sendreport", (e, t) => {
                mp.events.callRemote("sendreport", e, t);
              }),
              mp.events.add("funcreport", (e, t) => {
                a.g.binderFunctions.c_reports(),
                  mp.events.callRemote("funcreport", e, t);
              }),
              mp.events.add("exitreport", () => {
                a.g.binderFunctions.c_reports();
              }),
              (a.g.binderFunctions.c_reports = () => {
                mp.gui.emmit("window.router.setHud();"),
                  a.g.menuClose(),
                  (a.g.reportactive = !1),
                  (mp.gui.cursor.visible = !1);
              }),
              (a.g.binderFunctions.o_reports = () => {
                !a.g.loggedin ||
                  a.g.chatActive ||
                  a.g.editing ||
                  a.g.advertsactive ||
                  new Date().getTime() - a.g.lastCheck < 1e3 ||
                  (1 == a.g.isAdmin &&
                    (a.g.menuCheck()
                      ? a.g.reportactive && a.g.binderFunctions.c_reports()
                      : (a.g.menuOpen(),
                        (mp.gui.cursor.visible = !0),
                        (a.g.reportactive = !0),
                        mp.gui.emmit(
                          "window.router.setView('PlayerReports');"
                        ))));
              });
            var o = new Date().getTime();
            mp.events.add("f10report", (e) => {
              !a.g.loggedin ||
                new Date().getTime() - o < 3e3 ||
                ((o = new Date().getTime()),
                mp.events.callRemote("f10helpreport", e),
                a.g.closeHelpMenu());
            });
          },
          1693: (e, t, a) => {
            let o;
            function i(e, t, a) {
              var o = mp.game.object.getObjectOffsetFromCoords(
                e.x,
                e.y,
                e.z,
                t,
                a.x,
                a.y,
                a.z
              );
              mp.game.graphics.drawLightWithRange(
                o.x,
                o.y,
                o.z,
                255,
                255,
                255,
                10,
                1
              );
            }
            let n = !1;
            mp.events.add("render", () => {
              try {
                if (!a.g.loggedin) return;
                if (!n) return;
                if (!o && !s && !m) return;
                !(function () {
                  for (
                    var e = (o || s || m).position, t = 25, a = 0;
                    a <= 271;
                    a += 90
                  ) {
                    i(e, a, new mp.Vector3(20, 20, 20));
                    var n = mp.game.object.getObjectOffsetFromCoords(
                        e.x,
                        e.y,
                        e.z,
                        a,
                        t,
                        t,
                        -25
                      ),
                      r = mp.game.object.getObjectOffsetFromCoords(
                        e.x,
                        e.y,
                        e.z,
                        a,
                        t,
                        t,
                        t
                      ),
                      l = mp.game.object.getObjectOffsetFromCoords(
                        e.x,
                        e.y,
                        e.z,
                        a,
                        -25,
                        t,
                        -25
                      ),
                      c = mp.game.object.getObjectOffsetFromCoords(
                        e.x,
                        e.y,
                        e.z,
                        a,
                        -25,
                        t,
                        t
                      );
                    mp.game.graphics.drawPoly(
                      n.x,
                      n.y,
                      n.z,
                      r.x,
                      r.y,
                      r.z,
                      c.x,
                      c.y,
                      c.z,
                      0,
                      255,
                      0,
                      255
                    ),
                      mp.game.graphics.drawPoly(
                        c.x,
                        c.y,
                        c.z,
                        l.x,
                        l.y,
                        l.z,
                        n.x,
                        n.y,
                        n.z,
                        0,
                        255,
                        0,
                        255
                      );
                  }
                  i(e, 0, new mp.Vector3(0, 0, 20)),
                    i(e, 0, new mp.Vector3(0, 0, -20));
                })(),
                  (a.g.AFK_STATUS = !1);
              } catch (e) {
                if (new Date().getTime() - a.g.trycatchtime.index < 6e4) return;
                (a.g.trycatchtime.index = new Date().getTime()),
                  mp.events.callRemote(
                    "client_trycatch",
                    "index",
                    "render",
                    e.toString()
                  );
              }
            });
            let s,
              r = -1;
            mp.events.add("screen", async (e, t) => {
              switch (
                ((a.g.localplayer.position = new mp.Vector3(0, 0, 0)),
                a.g.localplayer.setHeading(0),
                a.g.localplayer.freezePosition(!0),
                await a.g.requestAnimDict(
                  "amb@code_human_wander_idles_fat@male@static"
                ),
                await a.g.wait(100),
                e)
              ) {
                case "char":
                  (o = mp.peds.new(
                    t
                      ? mp.game.joaat("mp_m_freemode_01")
                      : mp.game.joaat("mp_f_freemode_01"),
                    new mp.Vector3(0, 0, 150),
                    0,
                    0
                  )),
                    o.taskPlayAnim(
                      "amb@code_human_wander_idles_fat@male@static",
                      "static",
                      0,
                      1,
                      -1,
                      39,
                      0,
                      !1,
                      !1,
                      !1
                    ),
                    await a.g.wait(100),
                    o.freezePosition(!0),
                    o.setPropIndex(Number(0), Number(0), Number(0), !0),
                    a.g.createCamera("char", o),
                    a.g.updateCameraToBone("top", o);
                  break;
                case "veh":
                  await l("issi3", !0);
                  break;
                case "obj":
                  (m = mp.objects.new(
                    mp.game.joaat("redagelogo"),
                    new mp.Vector3(0, 0, 150),
                    { rotation: new mp.Vector3(0, 0, 180), dimension: -1 }
                  )),
                    await a.g.wait(50),
                    a.g.createCamera("autoshop", m);
              }
              n = !0;
            }),
              mp.events.add("startVariationCam", async (e) => {
                mp.gui.emmit("window.router.close()"), a.g.menuOpen();
                const t = [0, 1, 2, 6, 7];
                for (let e = 0; e < 8; e++) t.includes(e) && o.clearProp(e);
                for (let e = 0; e < 12; e++)
                  o.setComponentVariation(e, -1, 0, 0);
                switch (e) {
                  case 11:
                  case 8:
                  case 9:
                  case 3:
                  case 5:
                  case 7:
                    a.g.updateCameraToBone("top", o);
                    break;
                  case 6:
                    a.g.updateCameraToBone("shoes", o);
                    break;
                  case 4:
                    a.g.updateCameraToBone("legs", o);
                    break;
                  case 2:
                  case 1:
                    a.g.updateCameraToBone("hat", o);
                }
              }),
              mp.events.add("startVariation", async (e, t, i, n) => {
                (r = new Date().getTime() + 5e3),
                  -1 === e && (r = new Date().getTime() + 15e3),
                  o.setComponentVariation(Number(t), Number(i), Number(n), 0),
                  await a.g.wait(100),
                  -1 !== e &&
                    mp.gui.takeScreenshot(
                      `${Number(e)}_${Number(n)}.png`,
                      1,
                      100,
                      0
                    );
              }),
              mp.events.add("startPropCam", async (e) => {
                switch (
                  (mp.gui.emmit("window.router.close()"), a.g.menuOpen(), e)
                ) {
                  case 0:
                  case 1:
                  case 2:
                    a.g.updateCameraToBone("hat", o);
                    break;
                  case 6:
                  case 7:
                    a.g.updateCameraToBone("top", o);
                }
                for (let e = 0; e < 12; e++)
                  o.setComponentVariation(e, -1, 0, 0);
                o.setComponentVariation(5, 88, 0, 0);
                const t = [0, 1, 2, 6, 7];
                for (let e = 0; e < 8; e++) t.includes(e) && o.clearProp(e);
              }),
              mp.events.add("startProp", async (e, t, i, n) => {
                (r = new Date().getTime() + 5e3),
                  -1 === e && (r = new Date().getTime() + 15e3),
                  o.setPropIndex(Number(t), Number(i), Number(n), !0),
                  await a.g.wait(100),
                  -1 !== e &&
                    mp.gui.takeScreenshot(
                      `${Number(e)}_${Number(n)}.png`,
                      1,
                      100,
                      0
                    );
              });
            const l = async (e, t = !1) => {
              s && mp.vehicles.exists(s) && s.destroy(),
                (s = mp.vehicles.new(
                  mp.game.joaat(e),
                  new mp.Vector3(0, 0, 150),
                  {
                    heading: 0,
                    numberPlate: "RedAge",
                    alpha: 255,
                    color: [
                      [0, 0, 0],
                      [0, 0, 0],
                    ],
                    locked: !1,
                    engine: !1,
                    dimension: -1,
                  }
                )),
                s.freezePosition(!0),
                await a.g.IsLoadEntity(s),
                s.freezePosition(!0),
                await a.g.IsLoadEntity(s),
                s.freezePosition(!0),
                await a.g.wait(50),
                s.freezePosition(!0),
                s.setDirtLevel(0);
              const o = [255, 255, 255];
              return (
                s.setCustomPrimaryColour(o[0], o[1], o[2]),
                s.setCustomSecondaryColour(o[0], o[1], o[2]),
                t && a.g.createCamera("autoshop", s),
                !0
              );
            };
            let m;
            mp.events.add("startVeh", async (e, t = !1) => {
              mp.gui.emmit("window.router.close()"),
                a.g.menuOpen(),
                (r = new Date().getTime() + 5e3),
                await l(e),
                await a.g.wait(150),
                mp.gui.takeScreenshot(`${e}.png`, 1, 100, 0);
            }),
              mp.events.add("render", () => {
                -1 != r &&
                  new Date().getTime() > r &&
                  ((r = -1),
                  mp.gui.emmit("window.router.setHud();"),
                  a.g.menuClose());
              }),
              mp.events.add("startTestV", async (e) => {
                o.setComponentVariation(e, -1, 0, 0);
              }),
              mp.events.add("startObj", async (e, t) => {
                mp.gui.emmit("window.router.close()"),
                  a.g.menuOpen(),
                  (r = new Date().getTime() + 5e3),
                  m && mp.objects.exists(m) && m.destroy(),
                  (m = mp.objects.new(t, new mp.Vector3(0, 0, 150), {
                    rotation: new mp.Vector3(0, 0, 0),
                    dimension: -1,
                  })),
                  await a.g.wait(100),
                  mp.gui.takeScreenshot(`${e}.png`, 1, 100, 0);
              });
          },
          1991: (e, t, a) => {
            let o = 0;
            mp.events.add("client.sm.open", async (e, t, i) => {
              try {
                if (a.g.menuCheck()) return;
                mp.gui.emmit('window.router.setView("BusinessMenu")'),
                  a.g.menuOpen(),
                  (o = 0),
                  await a.g.wait(50),
                  mp.gui.emmit(
                    `window.smOpen('${e}', '${t}', 'blue', '${i}', 1);`
                  ),
                  mp.discord.update(
                    "Закупается",
                    `на RedAge под ID ${a.g.localplayer.remoteId}`
                  );
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/simplemenu",
                  "client.sm.open",
                  e.toString()
                );
              }
            }),
              mp.events.add("client.sm.openBlack", async (e) => {
                try {
                  if (a.g.menuCheck()) return;
                  mp.gui.emmit('window.router.setView("BusinessMenu")'),
                    a.g.menuOpen(),
                    (o = 1),
                    await a.g.wait(50),
                    mp.gui.emmit(
                      `window.smOpen('Черный рынок', 'sm-icon-logo-gang', 'green', '${e}');`
                    ),
                    mp.discord.update(
                      "Изучает черный рынок",
                      `на RedAge под ID ${a.g.localplayer.remoteId}`
                    );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/simplemenu",
                    "client.sm.openBlack",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.sm.openShop", async (e) => {
                try {
                  if (a.g.menuCheck()) return;
                  mp.gui.emmit('window.router.setView("BusinessMenu")'),
                    a.g.menuOpen(),
                    (o = 2),
                    await a.g.wait(50),
                    mp.gui.emmit(
                      `window.smOpen('Магазин', 'sm-icon-logo-shop', 'green', '${e}');`
                    ),
                    mp.discord.update(
                      "Закупается в 24/7",
                      `на RedAge под ID ${a.g.localplayer.remoteId}`
                    );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/simplemenu",
                    "client.sm.openShop",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.sm.openSaluteShop", async (e) => {
                try {
                  if (a.g.menuCheck()) return;
                  mp.gui.emmit('window.router.setView("BusinessMenu")'),
                    a.g.menuOpen(),
                    (o = 3),
                    await a.g.wait(50),
                    mp.gui.emmit(
                      `window.smOpen('Магазин фейерверков', 'inv-item-Firework4', 'green', '${e}');`
                    ),
                    mp.discord.update(
                      "Покупает салюты",
                      `на RedAge под ID ${a.g.localplayer.remoteId}`
                    );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/simplemenu",
                    "client.sm.openSaluteShop",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.sm.openHuntingShop", async (e) => {
                try {
                  if (a.g.menuCheck()) return;
                  mp.gui.emmit('window.router.setView("BusinessMenu")'),
                    a.g.menuOpen(),
                    (o = 4),
                    await a.g.wait(50),
                    mp.gui.emmit(
                      `window.smOpen('Охотничий магазин', 'inv-item-pickaxe1', 'green', '${e}');`
                    ),
                    mp.discord.update(
                      "В магазине охотника",
                      `на RedAge под ID ${a.g.localplayer.remoteId}`
                    );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/simplemenu",
                    "client.sm.openHuntingShop",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.sm.click", (e) => {
                try {
                  switch (o) {
                    case 0:
                      mp.events.callRemote("server.sm.fraction", e);
                      break;
                    case 1:
                      mp.events.callRemote("server.sm.black", e);
                      break;
                    case 2:
                      mp.events.callRemote("server.sm.shop", e);
                      break;
                    case 3:
                      mp.events.callRemote("server.sm.saluteShop", e);
                      break;
                    case 4:
                      mp.events.callRemote("server.sm.huntingShop", e);
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/simplemenu",
                    "client.sm.click",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.sm.exit", () => {
                a.g.closeSM();
              }),
              (a.g.closeSM = () => {
                a.g.mp.gui.emmit("window.router.setHud();"), a.g.menuClose();
              });
          },
          2003: (e, t, a) => {
            let o = !1,
              i = new Date().getTime();
            (a.g.binderFunctions.SitWalkSyle = () => {
              !a.g.loggedin ||
                a.g.chatActive ||
                a.g.menuCheck() ||
                1 == a.g.isDeath ||
                1 == a.g.isDemorgan ||
                a.g.attachedtotrunk ||
                a.g.localplayer.isInAnyVehicle(!1) ||
                a.g.localplayer.isFalling() ||
                a.g.localplayer.isCuffed() ||
                a.g.localplayer.isFatallyInjured() ||
                a.g.localplayer.isShooting() ||
                a.g.localplayer.isSwimming() ||
                a.g.localplayer.isClimbing() ||
                (new Date().getTime() - i > 2e3 &&
                  ((i = new Date().getTime()),
                  (o = !o),
                  mp.events.callRemote("SitWalkSyle", o)));
            }),
              mp.events.add("setClientRotation", function (e, t) {
                try {
                  (e = mp.players.atRemoteId(e)),
                    mp.players.exists(e) && e.setRotation(0, 0, t, 2, !0);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/sync",
                    "setClientRotation",
                    e.toString()
                  );
                }
              }),
              (a.g.followedfor = null),
              mp.events.add("setFollow", function (e, t) {
                try {
                  e
                    ? t &&
                      mp.players.exists(t) &&
                      (localplayer.taskFollowToOffsetOf(
                        t.handle,
                        0,
                        0,
                        0,
                        1,
                        -1,
                        1,
                        !0
                      ),
                      (a.g.followedfor = t))
                    : (localplayer.clearTasks(), (a.g.followedfor = null));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/sync",
                    "setFollow",
                    e.toString()
                  );
                }
              });
            var n = null;
            mp.events.add("playerStartEnterVehicle", (e, t) => {
              try {
                null != a.g.followedfor &&
                  mp.players.exists(a.g.followedfor) &&
                  (localplayer.taskFollowToOffsetOf(
                    a.g.followedfor.handle,
                    0,
                    0,
                    0,
                    1,
                    -1,
                    1,
                    !0
                  ),
                  null == n &&
                    (n = setTimeout(() => {
                      (n = null),
                        null != a.g.followedfor &&
                          mp.players.exists(a.g.followedfor) &&
                          localplayer.taskFollowToOffsetOf(
                            a.g.followedfor.handle,
                            0,
                            0,
                            0,
                            1,
                            -1,
                            1,
                            !0
                          );
                    }, 1e3)));
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "vehicle/vehiclesync",
                  "playerStartEnterVehicle",
                  e.toString()
                );
              }
            });
          },
          2196: (e, t, a) => {
            (mp.game.controls.useDefaultVehicleEntering = !1),
              (a.g.VehicleSeatFix = 0);
            const o = [
                "seat_dside_f",
                "seat_pside_f",
                "seat_dside_r",
                "seat_pside_r",
                "seat_dside_r1",
                "seat_pside_r1",
                "seat_pside_r2",
                "seat_dside_r2",
                "seat_dside_r3",
                "seat_pside_r3",
                "seat_dside_r4",
                "seat_pside_r4",
                "seat_dside_r5",
                "seat_pside_r5",
                "seat_dside_r6",
                "seat_pside_r6",
                "seat_dside_r7",
                "seat_pside_r7",
              ],
              i = -1;
            let n = new (class {
                constructor(e) {
                  (this.maxDistEnter = e),
                    (this.inVehicle = null),
                    (this.doorsId = -1),
                    (this.dist = e),
                    (this.status = i),
                    (this.intervalId = null),
                    (this.timerId = null),
                    (this.antiSpam = 0),
                    (this.time = 0),
                    (this.delay = 0),
                    (this.SitDist = 0),
                    (this.SitTime = 0),
                    (this.SitToggle = 0);
                }
                clear(e = !1) {
                  try {
                    if (this.status === i) return;
                    (a.g.VehicleSeatFix = e ? new Date().getTime() + 250 : 0),
                      this.delInterval(),
                      this.delTimer(),
                      (this.status = i),
                      (this.dist = this.maxDistEnter),
                      (this.SitToggle = 0),
                      (this.delay = 0);
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/veh",
                      "clear",
                      e.toString()
                    );
                  }
                }
                delInterval() {
                  try {
                    null !== this.intervalId &&
                      (clearInterval(this.intervalId),
                      (this.intervalId = null));
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/veh",
                      "delInterval",
                      e.toString()
                    );
                  }
                }
                delTimer() {
                  try {
                    null !== this.timerId &&
                      (clearTimeout(this.timerId), (this.timerId = null));
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/veh",
                      "delTimer",
                      e.toString()
                    );
                  }
                }
                stop(e = !1) {
                  try {
                    if (this.status === i) return;
                    if (this.delay > new Date().getTime()) return;
                    this.clear(e),
                      a.g.localplayer.taskEnterVehicle(-1, 0, -1, 3, 3, 1),
                      a.g.localplayer.clearTasks();
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/veh",
                      "stop",
                      e.toString()
                    );
                  }
                }
                distance(e, t) {
                  var a = e.x - t.x,
                    o = e.y - t.y,
                    i = e.z - t.z;
                  return Math.sqrt(a * a + o * o + i * i);
                }
                getVehicle() {
                  try {
                    const e = a.g.localplayer.position;
                    let t;
                    mp.vehicles.forEachInStreamRange((a) => {
                      (t = this.getVehicleDoor(a, e)),
                        t < this.maxDistEnter &&
                          a.isDriveable(!1) &&
                          mp.vehicles.exists(a) &&
                          2 !== a.getDoorLockStatus() &&
                          t < this.dist &&
                          ((this.inVehicle = a), (this.dist = t), (t = null));
                    });
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/veh",
                      "getVehicle",
                      e.toString()
                    );
                  }
                }
                getVehicleDoor(e, t) {
                  try {
                    const a = [
                      "door_dside_f",
                      "door_dside_r",
                      "door_pside_f",
                      "door_pside_r",
                    ];
                    let o = this.distance(t, e.position),
                      i = 0;
                    return (
                      a.forEach((a) => {
                        (i = this.distance(
                          t,
                          e.getWorldPositionOfBone(e.getBoneIndexByName(a))
                        )),
                          i < o && (o = i);
                      }),
                      o
                    );
                  } catch (e) {
                    return (
                      mp.events.callRemote(
                        "client_trycatch",
                        "player/veh",
                        "getVehicleDoor",
                        e.toString()
                      ),
                      0
                    );
                  }
                }
                getVehicleDoorPos(e, t) {
                  try {
                    const a = [
                      "door_dside_f",
                      "door_dside_r",
                      "door_pside_f",
                      "door_pside_r",
                    ];
                    let o = e.position,
                      i = 0,
                      n = this.distance(t, o),
                      s = 0;
                    return (
                      a.forEach((a) => {
                        (i = e.getWorldPositionOfBone(e.getBoneIndexByName(a))),
                          (s = this.distance(t, i)),
                          s < n && ((n = s), (o = i));
                      }),
                      o
                    );
                  } catch (e) {
                    return (
                      mp.events.callRemote(
                        "client_trycatch",
                        "player/veh",
                        "getVehicleDoorPos",
                        e.toString()
                      ),
                      a.g.localplayer.position
                    );
                  }
                }
                getUnBind() {
                  try {
                    (this.status = 0),
                      (this.timerId = setTimeout(() => {
                        (this.timerId = null),
                          (this.status = 3),
                          this.enter(!1);
                      }, 1e3));
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/veh",
                      "getUnBind",
                      e.toString()
                    );
                  }
                }
                up() {
                  try {
                    a.g.localplayer.getIsTaskActive(160) &&
                      null != this.inVehicle &&
                      mp.vehicles.exists(this.inVehicle) &&
                      this.distance(
                        this.getVehicleDoorPos(
                          this.inVehicle,
                          a.g.localplayer.position
                        ),
                        a.g.localplayer.position
                      ) > 2 &&
                      (a.g.localplayer.isInWater() ||
                      (0 !== this.inVehicle.getPedInSeat(this.doorsId) &&
                        this.inVehicle.getPedInSeat(this.doorsId) !==
                          a.g.localplayer.handle)
                        ? this.stop()
                        : ((this.status = 3 === this.status ? 4 : 2),
                          this.doorsId < 4
                            ? a.g.localplayer.taskEnterVehicle(
                                this.inVehicle.handle,
                                -1,
                                this.doorsId,
                                3,
                                1,
                                0
                              )
                            : a.g.localplayer.taskEnterVehicle(
                                this.inVehicle.handle,
                                -1,
                                -2,
                                3,
                                1,
                                0
                              )));
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/veh",
                      "up",
                      e.toString()
                    );
                  }
                }
                enter(e) {
                  try {
                    if (3 === this.status && e) return;
                    if (1 === this.status && !e) return;
                    if (
                      null != this.inVehicle &&
                      mp.vehicles.exists(this.inVehicle) &&
                      this.dist < this.maxDistEnter &&
                      this.inVehicle.getSpeed() < 6
                    ) {
                      let i = a.g.localplayer.getVariable("ANIM_USE");
                      if (null != i && "null" != i)
                        this.clear(),
                          mp.events.call(
                            "notify",
                            1,
                            9,
                            "Чтобы сесть в транспортное средство Вам нужно отменить анимацию.",
                            3e3
                          );
                      else if (2 == this.inVehicle.getDoorLockStatus())
                        this.clear(),
                          mp.events.call("notify", 1, 9, "Двери закрыты", 1e3);
                      else if (
                        e &&
                        (this.inVehicle.isSeatFree(-1) ||
                          this.inVehicle.getPedInSeat(-1) ==
                            a.g.localplayer.handle ||
                          0 == this.inVehicle.getPedInSeat(-1))
                      )
                        (this.SitToggle = !1),
                          (this.status = 1),
                          (this.doorsId = -1),
                          (this.delay = new Date().getTime() + 200),
                          (a.g.VehicleSeatFix = new Date().getTime() + 3e4),
                          a.g.localplayer.taskEnterVehicle(
                            this.inVehicle.handle,
                            -1,
                            this.doorsId,
                            a.g.localplayer.isInWater() ? 2 : 1,
                            1,
                            0
                          );
                      else {
                        const e = a.g.localplayer.position;
                        this.doorsId = -1;
                        let i = this.maxDistEnter;
                        for (
                          var t = 0;
                          t < this.inVehicle.getMaxNumberOfPassengers();
                          t++
                        )
                          if (this.inVehicle.isSeatFree(t))
                            if (o[t + 1]) {
                              let a = this.distance(
                                this.inVehicle.getWorldPositionOfBone(
                                  this.inVehicle.getBoneIndexByName(o[t + 1])
                                ),
                                e
                              );
                              a < i
                                ? ((i = a), (this.doorsId = t))
                                : t ===
                                    this.inVehicle.getMaxNumberOfPassengers() -
                                      1 &&
                                  -1 === this.doorsId &&
                                  (this.doorsId = t);
                            } else {
                              if (-1 === this.doorsId) {
                                (i = this.distance(this.inVehicle.position, e)),
                                  (this.doorsId = t);
                                break;
                              }
                              if (-1 !== this.doorsId) break;
                            }
                        -1 === this.doorsId
                          ? (this.stop(),
                            mp.events.call("notify", 1, 9, "Мест нет", 1e3))
                          : -1 !== this.doorsId &&
                            (a.g.localplayer.clearTasks(),
                            (this.SitToggle = 0),
                            (this.status = 3),
                            (this.delay = this.SitTime =
                              new Date().getTime() + 100),
                            (this.SitDist = a.g.localplayer.position),
                            a.g.localplayer.taskEnterVehicle(
                              this.inVehicle.handle,
                              -1,
                              this.doorsId,
                              a.g.localplayer.isInWater() ? 2 : 1,
                              1,
                              0
                            ));
                      }
                    } else this.clear();
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/veh",
                      "enter",
                      e.toString()
                    );
                  }
                }
                Interval() {
                  try {
                    if (
                      (a.g.localplayer.isSittingInAnyVehicle() &&
                        (this.antiSpam = new Date().getTime() + 250),
                      this.status === i &&
                        0 === this.status &&
                        a.g.localplayer.getIsTaskActive(160))
                    )
                      a.g.localplayer.taskEnterVehicle(-1, 0, -1, 3, 3, 1),
                        a.g.localplayer.clearTasks(),
                        (a.g.VehicleSeatFix = 0);
                    else {
                      if (this.status === i || 0 === this.status) return;
                      if (
                        null !== this.inVehicle &&
                        mp.vehicles.exists(this.inVehicle)
                      )
                        if (
                          a.g.localplayer.vehicle &&
                          a.g.localplayer.isSittingInAnyVehicle() &&
                          -1 === this.doorsId &&
                          0 !== this.inVehicle.getPedInSeat(this.doorsId) &&
                          this.inVehicle.getPedInSeat(this.doorsId) ===
                            a.g.localplayer.handle
                        )
                          this.stop(!0);
                        else if (
                          0 !== this.inVehicle.getPedInSeat(this.doorsId) &&
                          this.inVehicle.getPedInSeat(this.doorsId) !==
                            a.g.localplayer.handle
                        )
                          this.stop();
                        else if (2 === this.inVehicle.getDoorLockStatus())
                          this.stop();
                        else if (
                          null !== this.inVehicle &&
                          this.distance(
                            this.getVehicleDoorPos(
                              this.inVehicle,
                              a.g.localplayer.position
                            ),
                            a.g.localplayer.position
                          ) > this.maxDistEnter
                        )
                          this.stop();
                        else if (
                          (3 === this.status || 4 === this.status) &&
                          a.g.localplayer.getIsTaskActive(160) &&
                          1 === this.SitToggle &&
                          this.distance(
                            this.getVehicleDoorPos(
                              this.inVehicle,
                              a.g.localplayer.position
                            ),
                            a.g.localplayer.position
                          ) < 1
                        ) {
                          this.stop();
                          const e = this.inVehicle.handle,
                            t = this.doorsId;
                          a.g.localplayer.taskWarpIntoVehicle(e, t);
                        } else if (
                          (3 !== this.status && 4 !== this.status) ||
                          0 !== this.SitToggle ||
                          !a.g.localplayer.getIsTaskActive(160) ||
                          (!a.g.localplayer.getIsTaskActive(35) &&
                            !a.g.localplayer.getIsTaskActive(195))
                        ) {
                          if (
                            (3 === this.status || 4 === this.status) &&
                            this.SitTime < new Date().getTime() &&
                            0 === this.SitToggle &&
                            a.g.localplayer.getIsTaskActive(160) &&
                            !a.g.localplayer.getIsTaskActive(35) &&
                            !a.g.localplayer.getIsTaskActive(195)
                          )
                            if (
                              ((this.SitToggle = 1),
                              this.distance(
                                this.getVehicleDoorPos(
                                  this.inVehicle,
                                  a.g.localplayer.position
                                ),
                                a.g.localplayer.position
                              ) > 2)
                            )
                              a.g.localplayer.taskEnterVehicle(
                                this.inVehicle.handle,
                                -1,
                                -2,
                                a.g.localplayer.isInWater() ? 2 : 1,
                                1,
                                0
                              );
                            else {
                              this.stop();
                              const e = this.inVehicle.handle,
                                t = this.doorsId;
                              a.g.localplayer.taskWarpIntoVehicle(e, t);
                            }
                        } else this.SitToggle = -1;
                      else this.stop();
                    }
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/veh",
                      "Interval",
                      e.toString()
                    );
                  }
                }
                bind(e) {
                  try {
                    !a.g.localplayer.isSittingInAnyVehicle() &&
                      this.antiSpam < new Date().getTime() &&
                      (e
                        ? (0 === this.status && this.clear(),
                          this.status === i
                            ? (this.clear(),
                              this.getVehicle(),
                              this.getUnBind())
                            : 4 === this.status || 2 === this.status
                            ? this.stop()
                            : (1 !== this.status && 3 !== this.status) ||
                              this.up())
                        : 0 === this.status &&
                          (this.delTimer(), (this.status = 1), this.enter(!0)));
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/veh",
                      "bind",
                      e.toString()
                    );
                  }
                }
              })(10),
              s = 0;
            var r = !0;
            mp.keys.bind(70, !0, () => {
              !0 !== a.g.loggedin ||
                a.g.freeze ||
                a.g.menuCheck() ||
                !1 !== a.g.chatActive ||
                1 == a.g.ANTIANIM ||
                a.g.attachedtotrunk ||
                a.g.localplayer.carryngData ||
                !0 !== r ||
                n.bind(!0);
            }),
              mp.keys.bind(70, !1, () => {
                !0 !== a.g.loggedin ||
                a.g.menuCheck() ||
                !1 !== a.g.chatActive ||
                1 == a.g.ANTIANIM ||
                a.g.attachedtotrunk ||
                a.g.localplayer.carryngData
                  ? !0 === a.g.loggedin &&
                    !a.g.menuCheck() &&
                    !1 === a.g.chatActive &&
                    s < new Date().getTime() &&
                    a.g.attachedtotrunk &&
                    ((s = new Date().getTime() + 1500),
                    mp.events.callRemote("server.vehicle.detachPlayer"))
                  : n.bind(!1);
              }),
              mp.events.add("VehicleEnterToggle", (e) => {
                r = e;
              }),
              mp.events.add("render", () => {
                try {
                  if (!a.g.loggedin) return;
                  mp.game.controls.disableControlAction(
                    0,
                    a.g.Inputs.THROW_GRENADE,
                    !0
                  ),
                    mp.game.controls.disableControlAction(
                      0,
                      a.g.Inputs.ENTER,
                      !0
                    ),
                    a.g.cuffed &&
                      mp.game.controls.disableControlAction(
                        0,
                        a.g.Inputs.VEH_EXIT,
                        !0
                      ),
                    n.Interval(),
                    !1 === r ||
                    mp.game.controls.isControlPressed(
                      0,
                      a.g.Inputs.MOVE_UP_ONLY
                    ) ||
                    mp.game.controls.isControlPressed(
                      0,
                      a.g.Inputs.MOVE_DOWN_ONLY
                    ) ||
                    mp.game.controls.isControlPressed(
                      0,
                      a.g.Inputs.MOVE_LEFT_ONLY
                    ) ||
                    mp.game.controls.isControlPressed(
                      0,
                      a.g.Inputs.MOVE_RIGHT_ONLY
                    ) ||
                    mp.game.controls.isControlPressed(0, a.g.Inputs.JUMP)
                      ? n.status !== i && 0 !== n.status && n.stop()
                      : (1 !== n.status && 3 !== n.status) ||
                        !mp.game.controls.isControlPressed(
                          0,
                          a.g.Inputs.SPRINT
                        ) ||
                        n.up();
                } catch (e) {
                  if (
                    new Date().getTime() - a.g.trycatchtime["player/veh"] <
                    6e4
                  )
                    return;
                  (a.g.trycatchtime["player/veh"] = new Date().getTime()),
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/veh",
                      "render",
                      e.toString()
                    );
                }
              });
          },
          2369: (e, t, a) => {
            let o = !1,
              i = !1;
            a.g.binderFunctions.enableRadioVoice = () => {
              try {
                if (
                  a.g.chatActive ||
                  a.g.localplayer.vmuted ||
                  !a.g.loggedin ||
                  i ||
                  a.g.reportactive ||
                  (a.g.startedMafiaGame && 1 == a.g.mafiaGameProcess) ||
                  (a.g.startedMafiaGame && 3 == a.g.mafiaGameProcess) ||
                  a.g.isDeaf ||
                  (a.g.menuCheck() &&
                    !a.g.walkieTalkieMenu &&
                    !a.g.mafiaMenuActive)
                )
                  return;
                mp.events.callRemote("addRadio");
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/voice",
                  "global.binderFunctions.enableVoice",
                  e.toString()
                );
              }
            };
            let n = [];
            mp.events.add("StartRadio", (e) => {
              try {
                (o = !0),
                  (mp.voiceChat.muted = !1),
                  mp.events.call("PlayAnimToKey", a.g.localplayer, !0, "radio"),
                  mp.gui.emmit("window.hudStore.radio (1)"),
                  mp.events.call("sounds.playInterface", "radio/on", 0.02, !1),
                  a.g.localplayer.playFacialAnim("mic_chatter", "mp_facial"),
                  (n = JSON.parse(e));
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/voice",
                  "AddRadio",
                  e.toString()
                );
              }
            }),
              (a.g.binderFunctions.disableRadioVoice = () => {
                try {
                  if (!a.g.loggedin || mp.voiceChat.muted || !o) return;
                  let e;
                  (o = !1),
                    mp.events.callRemote("disableRadio"),
                    (mp.voiceChat.muted = !0),
                    mp.gui.emmit("window.hudStore.radio (0)"),
                    mp.events.call(
                      "sounds.playInterface",
                      "radio/off",
                      0.02,
                      !1
                    ),
                    a.g.localplayer.playFacialAnim(
                      "mood_normal_1",
                      "facials@gen_male@variations@normal"
                    ),
                    n.forEach((t) => {
                      (e = mp.players.atRemoteId(t)), e && p.remove(e, !1);
                    }),
                    (n = []);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/voice",
                    "global.binderFunctions.disableVoice",
                    e.toString()
                  );
                }
              }),
              mp.events.add("AddRadio", (e) => {
                try {
                  if (a.g.MaxVolumeRadio > 0) {
                    let t = "";
                    const o = mp.players.atRemoteId(e);
                    if (o) {
                      if (a.g.pplMuted[o.name] || a.g.pplMutedMe[o.name])
                        return !1;
                      if (2 == o.isListening) return !1;
                      if (a.g.isDeaf && !o.ALVL) return !1;
                      if (a.g.FirstLVLMute && o.DMGDisable) return !1;
                      p.remove(o, !1),
                        (o.isListening = 3),
                        (o.voice3d = !1),
                        (o.voiceVolume = a.g.getSoundRadioVolume(100)),
                        (t = a.g.getName(o)),
                        mp.gui.emmit(`window.voice.add('${t}', ${e})`),
                        mp.gui.emmit(
                          `window.events.callEvent('cef.walkietalkie.addPlayerInfo', '${t}', ${e})`
                        ),
                        mp.game.audio.playSoundFrontend(
                          -1,
                          "Start_Squelch",
                          "CB_RADIO_SFX",
                          !0
                        );
                    }
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/voice",
                    "AddRadio",
                    e.toString()
                  );
                }
              }),
              mp.events.add("RemoveRadio", (e) => {
                try {
                  mp.gui.emmit(`window.voice.dell(${e})`),
                    mp.gui.emmit(
                      `window.events.callEvent('cef.walkietalkie.removePlayerInfo', ${e})`
                    );
                  const t = mp.players.atRemoteId(e);
                  t &&
                    (mp.events.call("PlayAnimToKey", t, !1, "radio"),
                    (t.isListening = 0));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/voice",
                    "AddRadio",
                    e.toString()
                  );
                }
              }),
              mp.events.add("LeaveRadio", () => {
                mp.players.forEach((e) => {
                  e &&
                    3 == e.isListening &&
                    (mp.gui.emmit(`window.voice.dell(${e.remoteId})`),
                    mp.gui.emmit(
                      `window.events.callEvent("cef.walkietalkie.removePlayerInfo", ${e.remoteId})`
                    ),
                    mp.events.callRemote("remove_voice_listener", e));
                });
              }),
              mp.events.add("UpdateVoiceRadio", () => {
                mp.players.forEach((e) => {
                  e &&
                    3 == e.isListening &&
                    (e.voiceVolume = a.g.getSoundRadioVolume(100));
                });
              }),
              (a.g.getSoundRadioVolume = (e) =>
                Number(
                  parseFloat(
                    0.01 * Number(a.g.MaxVolumeRadio) * (0.01 * Number(e))
                  ).toFixed(2)
                )),
              mp.events.add("openWalkieTalkieMenu", async (e, t) => {
                try {
                  if (
                    !a.g.loggedin ||
                    a.g.chatActive ||
                    a.g.editing ||
                    a.g.isDemorgan ||
                    a.g.menuCheck() ||
                    a.g.localplayer.getVariable("InDeath")
                  )
                    return;
                  a.g.walkieTalkieMenu ||
                    (mp.gui.emmit("window.hudStore.isWalkietalkie (true)"),
                    mp.gui.emmit(
                      `window.events.callEvent("cef.walkietalkie.updateMainInfo", '${
                        a.g.Keys[a.g.userBinder[50].keyCode]
                      }', ${e}, ${t})`
                    ),
                    a.g.menuOpen(!0),
                    mp.discord.update(
                      "Настраивает рацию",
                      `на RedAge под ID ${a.g.localplayer.remoteId}`
                    ),
                    (a.g.walkieTalkieMenu = !0));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/voice",
                    "openWalkieTalkieMenu",
                    e.toString()
                  );
                }
              }),
              mp.events.add("closeWalkieTalkieMenu", () => {
                try {
                  !0 === a.g.walkieTalkieMenu &&
                    (mp.gui.emmit("window.hudStore.isWalkietalkie (false)"),
                    a.g.menuClose(),
                    (a.g.walkieTalkieMenu = !1));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/voice",
                    "closeWalkieTalkieMenu",
                    e.toString()
                  );
                }
              }),
              mp.events.add("UpdateWalkieTalkieVolume_client", (e) => {
                try {
                  (a.g.MaxVolumeRadio = e), mp.events.call("UpdateVoiceRadio");
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/voice",
                    "UpdateWalkieTalkieVolume_client",
                    e.toString()
                  );
                }
              }),
              mp.events.add("UpdateWalkieTalkieFrequency_client", (e) => {
                try {
                  mp.events.callRemote("UpdateWalkieTalkieFrequency", e);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/voice",
                    "UpdateWalkieTalkieFrequency_client",
                    e.toString()
                  );
                }
              }),
              mp.events.add("PressedDangerButton_client", () => {
                try {
                  (7 != a.g.fractionId &&
                    9 != a.g.fractionId &&
                    18 != a.g.fractionId) ||
                    mp.events.callRemote("PressedDangerButton");
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/voice",
                    "PressedDangerButton_client",
                    e.toString()
                  );
                }
              }),
              mp.events.add("StartDangerButtonSound_client", (e) => {
                try {
                  a.g.MaxVolumeRadio > 0 &&
                    mp.events.call(
                      "sounds.play2DRadio",
                      e,
                      a.g.getSoundRadioVolume(80)
                    );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/voice",
                    "StartDangerButtonSound_client",
                    e.toString()
                  );
                }
              });
            let s = new Date().getTime();
            (a.g.binderFunctions.takeWalkieTalkie = () => {
              try {
                if (
                  !a.g.loggedin ||
                  a.g.chatActive ||
                  a.g.editing ||
                  a.g.menuCheck()
                )
                  return;
                if (a.g.walkieTalkieMenu)
                  mp.events.call("closeWalkieTalkieMenu");
                else {
                  if (new Date().getTime() - s < 1e3)
                    return void mp.events.call(
                      "notify",
                      4,
                      9,
                      "Слишком быстро.",
                      1500
                    );
                  (s = new Date().getTime()),
                    mp.events.callRemote("TakeWalkieTalkie_server");
                }
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/voice",
                  "global.binderFunctions.takeWalkieTalkie",
                  e.toString()
                );
              }
            }),
              (a.g.binderFunctions.enableVoice = () => {
                try {
                  if (
                    a.g.phoneMute ||
                    a.g.chatActive ||
                    a.g.localplayer.vmuted ||
                    !a.g.loggedin ||
                    o ||
                    a.g.reportactive ||
                    (a.g.startedMafiaGame && 1 == a.g.mafiaGameProcess) ||
                    (a.g.startedMafiaGame && 3 == a.g.mafiaGameProcess) ||
                    a.g.isDeaf
                  )
                    return;
                  mp.voiceChat.muted
                    ? ((i = !0),
                      (mp.voiceChat.muted = !1),
                      mp.gui.emmit("window.hudStore.microphone (1)"),
                      a.g.localplayer.playFacialAnim(
                        "mic_chatter",
                        "mp_facial"
                      ))
                    : a.g.binderFunctions.disableVoice(!1);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/voice",
                    "global.binderFunctions.enableVoice",
                    e.toString()
                  );
                }
              }),
              (a.g.binderFunctions.disableVoice = (e = !0) => {
                try {
                  if (!a.g.loggedin || mp.voiceChat.muted) return;
                  (i = !1),
                    (mp.voiceChat.muted = !0),
                    mp.gui.emmit("window.hudStore.microphone (0)"),
                    a.g.localplayer.playFacialAnim(
                      "mood_normal_1",
                      "facials@gen_male@variations@normal"
                    );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/voice",
                    "global.binderFunctions.disableVoice",
                    e.toString()
                  );
                }
              });
            let r = 0;
            (a.g.binderFunctions.voiceReload = () => {
              try {
                if (r >= new Date().getTime()) return;
                (r = new Date().getTime() + 2e3),
                  mp.gui.chat.push(
                    "Вы успешно перезагрузили голосовой чат для себя."
                  ),
                  mp.voiceChat.cleanupAndReload(!0, !0, !0),
                  (a.g.pplMuted = []),
                  mp.events.callRemote("unmuteAll");
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/voice",
                  "global.binderFunctions.voiceReload",
                  e.toString()
                );
              }
            }),
              mp.events.add("v_reload", () => {
                try {
                  mp.voiceChat.cleanupAndReload(!0, !0, !0),
                    (a.g.pplMuted = []);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/voice",
                    "v_reload",
                    e.toString()
                  );
                }
              });
            let l = a.g.localplayer.position,
              m = a.g.localplayer.position,
              c = null;
            mp.events.addDataHandler("PhoneTalk", (e, t, o) => {
              try {
                if (
                  e &&
                  mp.players.exists(e) &&
                  "player" === e.type &&
                  e === a.g.localplayer
                )
                  if (t) {
                    mp.events.call("client.phone.callAccept");
                    let e = mp.players.atRemoteId(t - 1);
                    e &&
                      ((c = e),
                      p.remove(e, !1),
                      (e.isListening = 2),
                      (e.voice3d = !1),
                      (e.voiceVolume = a.g.getSoundVolume(100)));
                  } else
                    c &&
                      mp.players.exists(c) &&
                      (mp.events.callRemote("remove_voice_listener", c),
                      (c.isListening = 0)),
                      (c = null);
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/voice",
                  "PhoneTalk",
                  e.toString()
                );
              }
            }),
              mp.events.add("playerStartTalking", (e) => {
                try {
                  e &&
                    mp.players.exists(e) &&
                    "player" === e.type &&
                    e.playFacialAnim("mic_chatter", "mp_facial");
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/voice",
                    "playerStartTalking",
                    e.toString()
                  );
                }
              }),
              mp.events.add("playerStopTalking", (e) => {
                try {
                  e &&
                    mp.players.exists(e) &&
                    "player" === e.type &&
                    e.playFacialAnim(
                      "mood_normal_1",
                      "facials@gen_male@variations@normal"
                    );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/voice",
                    "playerStopTalking",
                    e.toString()
                  );
                }
              }),
              mp.events.add("clientSyncHandle", (e) => {
                try {
                  e
                    ? mp.players.forEach((e) => {
                        e && 1 == e.isListening && p.remove(e, !0);
                      })
                    : mp.players.forEach((e) => {
                        e &&
                          1 == e.isListening &&
                          (p.remove(e, !1),
                          mp.events.callRemote(
                            "remove_voice_listener_sync",
                            e
                          ));
                      });
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/voice",
                    "clientSyncHandle",
                    e.toString()
                  );
                }
              });
            let p = {
              listeners: [],
              add: function (e, t) {
                try {
                  -1 === this.listeners.indexOf(e) &&
                    ((e.voiceVolume = 0),
                    (e.voice3d = !0),
                    (e.isListening = 1),
                    t &&
                      !n.includes(e.remoteId) &&
                      mp.events.callRemote("add_voice_listener", e),
                    this.listeners.push(e));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/voice",
                    "add",
                    e.toString()
                  );
                }
              },
              remove: function (e, t) {
                try {
                  let a = this.listeners.indexOf(e);
                  if (-1 !== a)
                    return (
                      this.listeners.splice(a, 1),
                      (e.voiceVolume = 0),
                      (e.isListening = 0),
                      t &&
                        !n.includes(e.remoteId) &&
                        mp.events.callRemote("remove_voice_listener", e),
                      !0
                    );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/voice",
                    "remove",
                    e.toString()
                  );
                }
                return !1;
              },
            };
            mp.events.add("playerQuit", (e) => {
              e.isListening && p.remove(e, !1);
            }),
              (a.g.getSoundVolume = (e) =>
                Number(
                  parseFloat(
                    0.01 * Number(a.g.MaxVoiceVolume) * (0.01 * Number(e))
                  ).toFixed(2)
                )),
              mp.events.addDataHandler("VoiceDist", (e, t, a) => {
                try {
                  e &&
                    mp.players.exists(e) &&
                    "player" === e.type &&
                    (e.voiceDist = Number(t));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "synchronization/state",
                    "ALVL",
                    e.toString()
                  );
                }
              }),
              mp.events.add(a.g.renderName["350ms"], () => {
                try {
                  (l = a.g.localplayer.position),
                    a.g.isDeath ||
                      mp.players.forEachInStreamRange((e) => {
                        if (
                          ((e) => {
                            try {
                              if (!e) return !1;
                              if (0 === e.handle) return !1;
                              if (e === a.g.localplayer) return !1;
                              if (e.isListening) return !1;
                              if (
                                a.g.pplMuted[e.name] ||
                                a.g.pplMutedMe[e.name]
                              )
                                return !1;
                              if (e.InDeath) return !1;
                              if (a.g.isDeaf && !e.ALVL) return !1;
                              if (!a.g.isAdmin && e.isDeaf) return !1;
                              if (a.g.FirstLVLMute && e.DMGDisable) return !1;
                              if (
                                a.g.localplayer.VoiceZone &&
                                !e.ALVL &&
                                a.g.localplayer.VoiceZone !== e.VoiceZone
                              )
                                return !1;
                            } catch (e) {
                              return (
                                mp.events.callRemote(
                                  "client_trycatch",
                                  "player/voice",
                                  "IsVoiceToPlayer",
                                  e.toString()
                                ),
                                !1
                              );
                            }
                            return !0;
                          })(e)
                        ) {
                          m = e.position;
                          const t = mp.game.system.vdist(
                            m.x,
                            m.y,
                            m.z,
                            l.x,
                            l.y,
                            l.z
                          );
                          ((a.g.localplayer.voiceDist &&
                            t <= a.g.localplayer.voiceDist) ||
                            (e.voiceDist && t <= e.voiceDist) ||
                            t <= 12) &&
                            p.add(e, !0);
                        }
                      }),
                    p.listeners.forEach((e) => {
                      if (
                        ((e) => {
                          try {
                            if (!e) return !1;
                            if (a.g.isDeath) return !1;
                            if (0 === e.handle) return !1;
                            if (!e.isListening) return !1;
                            if (a.g.pplMuted[e.name] || a.g.pplMutedMe[e.name])
                              return !1;
                            if (e.InDeath) return !1;
                            if (a.g.isDeaf && !e.ALVL) return !1;
                            if (!a.g.isAdmin && e.isDeaf) return !1;
                            if (a.g.FirstLVLMute && e.DMGDisable) return !1;
                            if (
                              a.g.localplayer.VoiceZone &&
                              !e.ALVL &&
                              a.g.localplayer.VoiceZone !== e.VoiceZone
                            )
                              return !1;
                          } catch (e) {
                            return (
                              mp.events.callRemote(
                                "client_trycatch",
                                "player/voice",
                                "IsVoiceListenerToPlayer",
                                e.toString()
                              ),
                              !1
                            );
                          }
                          return !0;
                        })(e)
                      ) {
                        m = e.position;
                        const t = mp.game.system.vdist(
                          m.x,
                          m.y,
                          m.z,
                          l.x,
                          l.y,
                          l.z
                        );
                        a.g.localplayer.voiceDist &&
                        t <= a.g.localplayer.voiceDist
                          ? (e.voiceVolume =
                              t <= 12
                                ? a.g.getSoundVolume(100 * (1 - t / 12))
                                : 0)
                          : e.voiceDist && t <= e.voiceDist
                          ? (e.voiceVolume = a.g.getSoundVolume(
                              100 * (1 - t / e.voiceDist)
                            ))
                          : t <= 12
                          ? (e.voiceVolume = a.g.getSoundVolume(
                              100 * (1 - t / 12)
                            ))
                          : p.remove(e, !0);
                      } else p.remove(e, !0);
                    });
                } catch (e) {
                  if (
                    new Date().getTime() - a.g.trycatchtime["player/voice"] <
                    6e4
                  )
                    return;
                  (a.g.trycatchtime["player/voice"] = new Date().getTime()),
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/voice",
                      "voiceUpdate",
                      e.toString()
                    );
                }
              });
          },
          4509: (e, t, a) => {
            mp.events.add("client.weapon.give", (e, t, o = !1, i = 0) => {
              try {
                (e = parseInt(e)), (t = (t = parseInt(t)) >= 9999 ? 9999 : t);
                const n = a.g.localplayer.handle;
                o
                  ? (t += a.g.weaponData.ammo)
                  : mp.game.invoke(getNative("REMOVE_ALL_PED_WEAPONS"), n, !0),
                  mp.game.invoke(getNative("SET_PED_AMMO"), n, e, 0),
                  mp.game.invoke(getNative("SET_AMMO_IN_CLIP"), n, e, 0),
                  (a.g.weaponData.weapon = e),
                  (a.g.weaponData.group = mp.game.weapon.getWeapontypeGroup(
                    a.g.weaponData.weapon
                  )),
                  (a.g.weaponData.isMelee = [
                    a.g.weaponGroup.Unarmed,
                    a.g.weaponGroup.Melee,
                  ].includes(a.g.weaponData.group)),
                  (a.g.weaponData.ammo = t),
                  mp.gui.emmit(`window.hudStore.weaponItemId (${i})`),
                  mp.gui.emmit(
                    `window.hudStore.clipSize (${mp.game.weapon.getWeaponClipSize(
                      e
                    )})`
                  ),
                  mp.gui.emmit(`window.hudStore.ammo (${t})`),
                  mp.game.invoke(
                    getNative("GIVE_WEAPON_TO_PED"),
                    n,
                    e,
                    t,
                    !1,
                    !0
                  ),
                  o && mp.game.invoke(getNative("MAKE_PED_RELOAD"), n);
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/weapon",
                  "client.weapon.give",
                  e.toString()
                );
              }
            }),
              (a.g.IsWeaponSniper = function () {
                return (
                  100416529 == a.g.weaponData.weapon ||
                  205991906 == a.g.weaponData.weapon ||
                  -952879014 == a.g.weaponData.weapon ||
                  177293209 == a.g.weaponData.weapon ||
                  1785463520 == a.g.weaponData.weapon
                );
              }),
              (a.g.binderFunctions.playerReload = () => {
                try {
                  if (
                    !a.g.loggedin ||
                    a.g.chatActive ||
                    new Date().getTime() - a.g.lastCheck < 1e3 ||
                    mp.gui.cursor.visible
                  )
                    return;
                  if (
                    -1569615261 == a.g.weaponData.weapon ||
                    911657153 == a.g.weaponData.weapon
                  )
                    return;
                  if (
                    mp.game.weapon.getWeaponClipSize(a.g.weaponData.weapon) ==
                    a.g.weaponData.ammo
                  )
                    return;
                  mp.events.callRemote(
                    "server.weapon.reload",
                    a.g.pInt(a.g.weaponData.ammo)
                  ),
                    (a.g.lastCheck = new Date().getTime());
                } catch (e) {}
              }),
              (a.g.binderFunctions.changeweap_1 = () => {
                (!a.g.binocularsEnabled &&
                  (!a.g.loggedin ||
                    a.g.chatActive ||
                    new Date().getTime() - a.g.lastCheck < 1e3 ||
                    a.g.menuCheck() ||
                    mp.gui.cursor.visible ||
                    1 == a.g.isDemorgan ||
                    a.g.attachedtotrunk ||
                    (void 0 !== a.g.inAirsoftLobby &&
                      a.g.inAirsoftLobby >= 0))) ||
                  (mp.events.callRemote(
                    "changeweap",
                    1,
                    a.g.pInt(a.g.weaponData.ammo)
                  ),
                  (a.g.lastCheck = new Date().getTime()));
              }),
              (a.g.binderFunctions.changeweap_2 = () => {
                (!a.g.binocularsEnabled &&
                  (!a.g.loggedin ||
                    a.g.chatActive ||
                    new Date().getTime() - a.g.lastCheck < 1e3 ||
                    a.g.menuCheck() ||
                    mp.gui.cursor.visible ||
                    1 == a.g.isDemorgan ||
                    a.g.attachedtotrunk ||
                    (void 0 !== a.g.inAirsoftLobby &&
                      a.g.inAirsoftLobby >= 0))) ||
                  (mp.events.callRemote(
                    "changeweap",
                    2,
                    a.g.pInt(a.g.weaponData.ammo)
                  ),
                  (a.g.lastCheck = new Date().getTime()));
              }),
              (a.g.binderFunctions.changeweap_3 = () => {
                (!a.g.binocularsEnabled &&
                  (!a.g.loggedin ||
                    a.g.chatActive ||
                    new Date().getTime() - a.g.lastCheck < 1e3 ||
                    a.g.menuCheck() ||
                    mp.gui.cursor.visible ||
                    1 == a.g.isDemorgan ||
                    a.g.attachedtotrunk ||
                    (void 0 !== a.g.inAirsoftLobby &&
                      a.g.inAirsoftLobby >= 0))) ||
                  (mp.events.callRemote(
                    "changeweap",
                    3,
                    a.g.pInt(a.g.weaponData.ammo)
                  ),
                  (a.g.lastCheck = new Date().getTime()));
              }),
              (a.g.binderFunctions.changeweap_4 = () => {
                (!a.g.binocularsEnabled &&
                  (!a.g.loggedin ||
                    a.g.chatActive ||
                    new Date().getTime() - a.g.lastCheck < 1e3 ||
                    a.g.menuCheck() ||
                    mp.gui.cursor.visible ||
                    1 == a.g.isDemorgan ||
                    a.g.attachedtotrunk ||
                    (void 0 !== a.g.inAirsoftLobby &&
                      a.g.inAirsoftLobby >= 0))) ||
                  (mp.events.callRemote(
                    "changeweap",
                    4,
                    a.g.pInt(a.g.weaponData.ammo)
                  ),
                  (a.g.lastCheck = new Date().getTime()));
              }),
              (a.g.binderFunctions.changeweap_5 = () => {
                (!a.g.binocularsEnabled &&
                  (!a.g.loggedin ||
                    a.g.chatActive ||
                    new Date().getTime() - a.g.lastCheck < 1e3 ||
                    a.g.menuCheck() ||
                    mp.gui.cursor.visible ||
                    1 == a.g.isDemorgan ||
                    a.g.attachedtotrunk ||
                    (void 0 !== a.g.inAirsoftLobby &&
                      a.g.inAirsoftLobby >= 0))) ||
                  (mp.events.callRemote(
                    "changeweap",
                    5,
                    a.g.pInt(a.g.weaponData.ammo)
                  ),
                  (a.g.lastCheck = new Date().getTime()));
              }),
              mp.events.add("client.weapon.take", (e) => {
                try {
                  e &&
                    mp.events.callRemote(
                      "server.weapon.ammoin",
                      a.g.weaponData.weapon,
                      a.g.pInt(a.g.weaponData.ammo)
                    ),
                    (a.g.weaponData.ammo = 0),
                    (a.g.weaponData.weapon = -1569615261),
                    (a.g.weaponData.group = mp.game.weapon.getWeapontypeGroup(
                      a.g.weaponData.weapon
                    )),
                    (a.g.weaponData.isMelee = [
                      a.g.weaponGroup.Unarmed,
                      a.g.weaponGroup.Melee,
                    ].includes(a.g.weaponData.group)),
                    mp.gui.emmit("window.hudStore.ammo (0)"),
                    mp.gui.emmit("window.hudStore.clipSize (0)"),
                    mp.game.invoke(
                      getNative("REMOVE_ALL_PED_WEAPONS"),
                      a.g.localplayer.handle,
                      !0
                    );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/weapon",
                    "client.weapon.take",
                    e.toString()
                  );
                }
              }),
              mp.events.add("playerWeaponShot", function (e, t) {
                try {
                  if (911657153 == a.g.weaponData.weapon) return;
                  mp.game.cam.shakeGameplayCam("SMALL_EXPLOSION_SHAKE", 0.005),
                    a.g.weaponData.ammo--,
                    mp.gui.emmit(
                      `window.hudStore.ammo (${a.g.weaponData.ammo})`
                    ),
                    a.g.weaponData.ammo <= 0 &&
                      ((a.g.weaponData.ammo = 0),
                      localplayer.taskSwapWeapon(!1),
                      mp.gui.emmit("window.hudStore.ammo (0)"),
                      mp.gui.emmit("window.hudStore.clipSize (0)")),
                    mp.events.callRemote("server.weaponShot");
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/weapon",
                    "playerWeaponShot",
                    e.toString()
                  );
                }
              }),
              mp.events.add("removeAllWeapons", function () {
                try {
                  (a.g.weaponData.ammo = 0),
                    (a.g.weaponData.weapon = -1569615261),
                    (a.g.weaponData.group = mp.game.weapon.getWeapontypeGroup(
                      a.g.weaponData.weapon
                    )),
                    (a.g.weaponData.isMelee = [
                      a.g.weaponGroup.Unarmed,
                      a.g.weaponGroup.Melee,
                    ].includes(a.g.weaponData.group)),
                    mp.gui.emmit("window.hudStore.ammo (0)"),
                    mp.gui.emmit("window.hudStore.clipSize (0)");
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/weapon",
                    "removeAllWeapons",
                    e.toString()
                  );
                }
              }),
              mp.events.add("playerDeath", function (e, t, o) {
                try {
                  if (!a.g.loggedin) return;
                  if (e !== a.g.localplayer) return;
                  (a.g.weaponData.ammo = 0),
                    (a.g.weaponData.weapon = -1569615261),
                    (a.g.weaponData.group = mp.game.weapon.getWeapontypeGroup(
                      a.g.weaponData.weapon
                    )),
                    (a.g.weaponData.isMelee = [
                      a.g.weaponGroup.Unarmed,
                      a.g.weaponGroup.Melee,
                    ].includes(a.g.weaponData.group)),
                    mp.gui.emmit("window.hudStore.ammo (0)"),
                    mp.gui.emmit("window.hudStore.clipSize (0)");
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/weapon",
                    "playerDeath",
                    e.toString()
                  );
                }
              });
            var o = { 0: 0, 1: 0.05, 2: 0.07, 3: 0.1 };
            mp.events.add("setResistStage", function (e) {
              mp.game.player.setMeleeWeaponDefenseModifier(0.25 + o[e]),
                mp.game.player.setWeaponDefenseModifier(1.3 + o[e]);
            });
          },
          1264: (e, t, a) => {
            let o = 0;
            mp.events.add("client.craft.create", (e, t) => {
              try {
                if (new Date().getTime() - a.g.lastCheck < 50) return;
                (a.g.lastCheck = new Date().getTime()),
                  mp.events.callRemote("server.craft.create", o, e, t);
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/weaponcraft",
                  "client.craft.create",
                  e.toString()
                );
              }
            }),
              mp.events.add("client.craft.createAmmo", (e, t) => {
                try {
                  if (new Date().getTime() - a.g.lastCheck < 50) return;
                  (a.g.lastCheck = new Date().getTime()),
                    mp.events.callRemote("server.craft.createAmmo", o, e, t);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/weaponcraft",
                    "client.craft.createAmmo",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.craft.close", () => {
                try {
                  mp.gui.emmit("window.router.setHud();"),
                    a.g.menuClose(),
                    (o = 0);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/weaponcraft",
                    "client.craft.close",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.fraction.craft.open", async (e, t, i) => {
                try {
                  (o = e),
                    mp.gui.emmit(
                      `window.router.setView("FractionsCraft", ['${t}','${i}'])`
                    ),
                    a.g.menuOpen();
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/weaponcraft",
                    "client.fraction.craft.open",
                    e.toString()
                  );
                }
              });
          },
          2186: (e, t, a) => {
            let o = !1;
            mp.events.add("wshop", async (e, t, i) => {
              try {
                if (new Date().getTime() - a.g.lastCheck < 50) return;
                switch (((a.g.lastCheck = new Date().getTime()), e)) {
                  case "cat":
                    if (3 == t || 4 == t) return;
                    (wshop.tab = t),
                      (o = !0),
                      mp.gui.emmit(
                        'window.router.setView("BusinessWeaponShop")'
                      ),
                      await a.g.wait(50),
                      mp.gui.emmit(
                        `window.weaponshop.setData(${t},'${JSON.stringify(
                          wshop.data[t]
                        )}')`
                      );
                    break;
                  case "buy":
                    mp.events.callRemote("wshop", wshop.tab, t);
                    break;
                  case "rangebuy":
                    mp.events.callRemote("wshopammo", t, i);
                }
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "player/weaponshop",
                  "wshop",
                  e.toString()
                );
              }
            }),
              mp.events.add("client.weaponshop.buy", (e, t) => {
                try {
                  if (new Date().getTime() - a.g.lastCheck < 50) return;
                  (a.g.lastCheck = new Date().getTime()),
                    mp.events.callRemote("server.weaponshop.buy", e, t);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/weaponshop",
                    "client.weaponshop.buy",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.weaponshop.buyAmmo", (e, t) => {
                try {
                  if (new Date().getTime() - a.g.lastCheck < 50) return;
                  (a.g.lastCheck = new Date().getTime()),
                    mp.events.callRemote("server.weaponshop.buyAmmo", e, t);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/weaponshop",
                    "client.weaponshop.buyAmmo",
                    e.toString()
                  );
                }
              }),
              (a.g.weaponComponentPrice = 0),
              mp.events.add("client.gunshop.open", async (e, t, i) => {
                a.g.menuCheck() ||
                  (a.g.menuOpen(),
                  (a.g.weaponComponentPrice = i),
                  (o = !0),
                  mp.gui.emmit('window.router.setView("BusinessWeaponShop")'),
                  await a.g.wait(50),
                  mp.gui.emmit(`window.weaponshop('${e}','${t}')`));
              }),
              mp.events.add("client.weaponshop.close", () => {
                a.g.binderFunctions.c_weaponshop();
              }),
              (a.g.binderFunctions.c_weaponshop = () => {
                o &&
                  (a.g.menuClose(),
                  mp.gui.emmit("window.router.setHud()"),
                  (o = !1));
              });
          },
          4687: (e, t, a) => {
            let o = !1;
            mp.events.add("client.wedding.married", (e, t) => {
              mp.events.callRemote("server.wedding.married", e, t),
                a.g.binderFunctions.closeWedding();
            }),
              mp.events.add("client.wedding.open", (e, t) => {
                a.g.menuCheck() ||
                  (a.g.menuOpen(),
                  (o = !0),
                  mp.gui.emmit(
                    `window.router.setView("PlayerWedding", {type: ${e}, price: ${t}});`
                  ),
                  mp.discord.update(
                    "Общается со священником",
                    `на RedAge под ID ${a.g.localplayer.remoteId}`
                  ));
              }),
              (a.g.binderFunctions.closeWedding = () => {
                o &&
                  (mp.gui.emmit("window.router.setHud();"),
                  (o = !1),
                  a.g.menuClose());
              });
          },
          1090: (e, t, a) => {
            setInterval(() => {
              try {
                if (!a.g.loggedin) return;
                const { position: e, dimension: t } = a.g.localplayer;
                mp.polygons.pool.map((a) => {
                  a.colliding
                    ? mp.polygons.isPositionWithinPolygon(e, a, t) ||
                      ((a.colliding = !1),
                      mp.events.call("playerLeavePolygon", a))
                    : mp.polygons.isPositionWithinPolygon(e, a, t) &&
                      ((a.colliding = !0),
                      mp.events.call("playerEnterPolygon", a));
                });
              } catch (e) {
                if (
                  new Date().getTime() - a.g.trycatchtime["polygons/events"] <
                  5e3
                )
                  return;
                (a.g.trycatchtime["polygons/events"] = new Date().getTime()),
                  mp.events.callRemote(
                    "client_trycatch",
                    "polygons/events",
                    "setInterval",
                    e.toString()
                  );
              }
            }, 500);
          },
          7992: (e, t, a) => {
            const o = (e) => Math.sqrt(e.x * e.x + e.y * e.y + e.z * e.z),
              i = (e, t) => {
                let a,
                  i,
                  n,
                  s,
                  r = 0;
                for (a = 0; a < t.length; a++) {
                  const l = new mp.Vector3(
                      t[a].x - e.x,
                      t[a].y - e.y,
                      t[a].z - e.z
                    ),
                    m = new mp.Vector3(
                      t[(a + 1) % t.length].x - e.x,
                      t[(a + 1) % t.length].y - e.y,
                      t[(a + 1) % t.length].z - e.z
                    );
                  if (((i = o(l)), (n = o(m)), i * n <= 1e-7))
                    return 6.283185307179586;
                  (s = (l.x * m.x + l.y * m.y + l.z * m.z) / (i * n)),
                    (r += Math.acos(s));
                }
                return r;
              };
            a(1090),
              (mp.polygons = {
                pool: [],
                add: (
                  e,
                  t,
                  a,
                  o = {
                    visible: !1,
                    lineColorRGBA: [255, 255, 255, 255],
                    dimension: 0,
                  }
                ) => {
                  const i = {
                    id: e,
                    vertices: t,
                    height: a,
                    visible: o.visible,
                    lineColorRGBA: o.lineColorRGBA,
                    dimension: o.dimension,
                    colliding: !1,
                  };
                  return mp.polygons.pool.push(i), i;
                },
                remove: (e) => {
                  const t = mp.polygons.pool.findIndex((t) => t.id === e.id);
                  -1 !== t && mp.polygons.pool.splice(t, 1);
                },
                exists: (e) => mp.polygons.pool.some((t) => t.id === e.id),
                isPositionWithinPolygon: (e, t, a) => {
                  if (a && t.dimension !== a && -1 !== t.dimension) return !1;
                  const { vertices: o } = t,
                    n = [];
                  for (let a in o) {
                    if (
                      !(
                        (e.z >= o[a].z && e.z <= o[a].z + t.height) ||
                        i(e, o) >= 5.8
                      )
                    )
                      return !1;
                    n.push([o[a].x, o[a].y]);
                  }
                  return ((e, t) => {
                    let a = e[0],
                      o = e[1],
                      i = !1;
                    for (let e = 0, n = t.length - 1; e < t.length; n = e++) {
                      let s = t[e][0],
                        r = t[e][1],
                        l = t[n][0],
                        m = t[n][1];
                      r > o != m > o &&
                        a < ((l - s) * (o - r)) / (m - r) + s &&
                        (i = !i);
                    }
                    return i;
                  })([e.x, e.y], n);
                },
              }),
              mp.events.add("playerEnterPolygon", (e) => {
                mp.events.callRemote("set_polygon", e.id),
                  mp.gui.emmit("window.hudStore.polygon (1)");
              }),
              mp.events.add("playerLeavePolygon", () => {
                mp.events.callRemote("set_polygon", 0),
                  mp.gui.emmit("window.hudStore.polygon (0)");
              });
          },
          9358: (e, t, a) => {
            let o = 1,
              i = "",
              n = 0,
              s = 0,
              r = !1,
              l = { 1: {}, 0: {} };
            mp.events.add("client.clothesEditor.data", function (e, t) {
              l[e] = JSON.parse(t);
            }),
              mp.events.add("client.clothesEditor.open", function () {
                try {
                  a.g.localplayer.freezePosition(!0),
                    a.g.createCamera("char", a.g.localplayer),
                    (a.g.localplayer.model = mp.game.joaat("mp_m_freemode_01")),
                    p(),
                    mp.gui.emmit(
                      "window.router.setView('PlayerClothesEditor')"
                    ),
                    a.g.menuOpen(),
                    (i = ""),
                    (r = !0);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "shop/clothes/clothesEditor",
                    "client.clothesEditor.open",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.clothesEditor.close", () => {
                try {
                  a.g.cameraManager.stopCamera(!0, 1e3),
                    mp.game.ui.displayRadar(!0),
                    a.g.localplayer.freezePosition(!1),
                    mp.gui.emmit("window.router.setHud();"),
                    a.g.menuClose(),
                    mp.events.callRemote("server.clothesEditor.close"),
                    (r = !1);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "shop/clothes/clothesEditor",
                    "client.clothesEditor.close",
                    e.toString()
                  );
                }
              });
            let m = 1;
            mp.events.add("client.clothesEditor.update", (e, t, o, r) => {
              try {
                if (
                  (t
                    ? a.g.localplayer.setPropIndex(
                        Number(e),
                        Number(o),
                        Number(r),
                        !0
                      )
                    : ((n = Number(o)),
                      (s = Number(r)),
                      Number(e),
                      (i = ""),
                      a.g.localplayer.setComponentVariation(
                        Number(e),
                        Number(o),
                        Number(r),
                        0
                      )),
                  m == e)
                )
                  return;
                (m = e),
                  (t || (!t && 3 !== e && 8 !== e)) && p(),
                  (t || (1 != e && 2 != e)) &&
                  (!t || (0 != e && 1 != e && 2 != e && 1 != e && 1 != e))
                    ? (t || (7 != e && 11 != e && 5 != e)) &&
                      (!t || (7 != e && 6 != e))
                      ? t || 4 != e
                        ? t || 6 != e || a.g.updateCameraToBone(4)
                        : a.g.updateCameraToBone(3)
                      : a.g.updateCameraToBone("top")
                    : a.g.updateCameraToBone("hat");
              } catch (e) {
                mp.events.call(
                  "notify",
                  4,
                  9,
                  "clothesEditor " + e.name + ":" + e.message,
                  3e3
                );
              }
            });
            let c = "";
            function p() {
              a.g.localplayer.clearProp(0),
                a.g.localplayer.clearProp(1),
                a.g.localplayer.clearProp(2),
                a.g.localplayer.clearProp(6),
                a.g.localplayer.clearProp(7),
                a.g.localplayer.setComponentVariation(
                  1,
                  clothesEmpty[o][1],
                  0,
                  0
                ),
                a.g.localplayer.setComponentVariation(
                  3,
                  clothesEmpty[o][3],
                  0,
                  0
                ),
                a.g.localplayer.setComponentVariation(
                  4,
                  clothesEmpty[o][4],
                  0,
                  0
                ),
                a.g.localplayer.setComponentVariation(
                  5,
                  clothesEmpty[o][5],
                  0,
                  0
                ),
                a.g.localplayer.setComponentVariation(
                  6,
                  clothesEmpty[o][6],
                  0,
                  0
                ),
                a.g.localplayer.setComponentVariation(
                  7,
                  clothesEmpty[o][7],
                  0,
                  0
                ),
                a.g.localplayer.setComponentVariation(
                  8,
                  clothesEmpty[o][8],
                  0,
                  0
                ),
                a.g.localplayer.setComponentVariation(
                  9,
                  clothesEmpty[o][9],
                  0,
                  0
                ),
                a.g.localplayer.setComponentVariation(
                  10,
                  clothesEmpty[o][10],
                  0,
                  0
                ),
                a.g.localplayer.setComponentVariation(
                  11,
                  clothesEmpty[o][11],
                  0,
                  0
                );
            }
            mp.events.add("render", () => {
              if (a.g.loggedin && r && l[o] && l[o][i] && l[o][i][n]) {
                const e = l[o][i][n],
                  t = e[4][s] ? e[4][s] : s;
                (c =
                  1 == i
                    ? `\n/additem -11 1 ${n}_${t}_${o ? "True" : "False"}`
                    : 2 == i
                    ? `\n/additem -8 1 ${n}_${t}_${o ? "True" : "False"}`
                    : 3 == i
                    ? `\n/additem -4 1 ${n}_${t}_${o ? "True" : "False"}`
                    : 4 == i
                    ? `\n/additem -6 1 ${n}_${t}_${o ? "True" : "False"}`
                    : ""),
                  e[5] > 0
                    ? mp.game.graphics.drawText(
                        `ID #${e[0]}\nВ магазине ${
                          e[5] ? "Есть" : "Нет"
                        } - Цена: ${e[5]}$` + c,
                        [0.5, 0.8],
                        {
                          font: 0,
                          color: [255, 255, 255, 200],
                          scale: [0.35, 0.35],
                          outline: !0,
                        }
                      )
                    : e[6] > 0 &&
                      mp.game.graphics.drawText(
                        `ID #${e[0]}\nВ магазине ${
                          e[6] ? "Есть" : "Нет"
                        } - Цена: ${e[6]}$` + c,
                        [0.5, 0.8],
                        {
                          font: 0,
                          color: [255, 255, 255, 200],
                          scale: [0.35, 0.35],
                          outline: !0,
                        }
                      );
              }
            }),
              mp.events.add("client.clothesEditor.gender", (e) => {
                try {
                  "men" === e
                    ? ((o = 1),
                      (a.g.localplayer.model =
                        mp.game.joaat("mp_m_freemode_01")))
                    : ((o = 0),
                      (a.g.localplayer.model =
                        mp.game.joaat("mp_f_freemode_01"))),
                    p();
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "shop/clothes/clothesEditor",
                    "client.clothesEditor.gender",
                    e.toString()
                  );
                }
              });
          },
          7521: (e, t, a) => {
            "use strict";
            a.r(t);
            const o = {
                Spoiler: 0,
                FrontBumper: 1,
                RearBumper: 2,
                SideSkirt: 3,
                Muffler: 4,
                Frame: 5,
                Lattice: 6,
                Hood: 7,
                Wings: 8,
                RightWings: 9,
                Roof: 10,
                Engine: 11,
                Brakes: 12,
                Transmission: 13,
                Horn: 14,
                Suspension: 15,
                Armor: 16,
                Turbo: 18,
                UtilShadowSilver: 20,
                Xenon: 22,
                FrontWheels: 23,
                BackWheels: 24,
                Plateholders: 25,
                TrimDesign: 27,
                Ornaments: 28,
                DialDesign: 30,
                SteeringWheel: 33,
                ShiftLever: 34,
                Plaques: 35,
                Hydraulics: 38,
                Boost: 40,
                Vinyls: 48,
                WindowTint: 55,
                NumberPlate: 62,
              },
              i = o,
              n = [
                mp.game.joaat("Brutus"),
                mp.game.joaat("Imperator"),
                mp.game.joaat("ZR380"),
                mp.game.joaat("Deathbike"),
                mp.game.joaat("Comet4"),
                mp.game.joaat("Savestra"),
                mp.game.joaat("Viseris"),
                mp.game.joaat("Revolter"),
                mp.game.joaat("Speedo4"),
                mp.game.joaat("Mule4"),
                mp.game.joaat("Pounder2"),
                mp.game.joaat("Issi4"),
                mp.game.joaat("vapidse"),
                mp.game.joaat("Havok"),
                mp.game.joaat("Seasparrow"),
                mp.game.joaat("Seasparrow2"),
              ],
              s = [
                {
                  title: "Спойлер",
                  category: "Spoiler",
                  desc: "Обеспечивает лучшую управляемость, за счет давления воздуха на заднюю часть авто",
                },
                {
                  title: "Передний бампер",
                  category: "FrontBumper",
                  desc: "Позволяет установить на Ваш автомобиль спортивные бамперы",
                },
                {
                  title: "Задний бампер",
                  category: "RearBumper",
                  desc: "Позволяет установить на Ваш автомобиль спортивные бамперы",
                },
                { title: "Пороги", category: "SideSkirt", desc: "" },
                {
                  title: "Глушитель",
                  category: "Muffler",
                  desc: "Позволяет осуществить замену стандартного глушителя на более продвинутый",
                },
                {
                  title: "Каркас безопасности",
                  category: "Frame",
                  desc: "Позволяет установить защиту в салоне, как на раллийных авто",
                },
                {
                  title: "Решетка радиатора",
                  category: "Lattice",
                  desc: "Позволяет изменить оформление радиаторной решетки Вашего авто",
                },
                {
                  title: "Капот",
                  category: "Hood",
                  desc: "Позволяет изменить стиль капота и добавить воздухозаборники",
                },
                {
                  title: "Крыло",
                  category: "Wings",
                  desc: "Позволяет установить фирменные крылья на Ваше авто",
                },
                {
                  title: "Крыша",
                  category: "Roof",
                  desc: "Позволяет модифицировать крышу Вашего авто",
                },
                {
                  title: "Колёса",
                  category: "FrontWheels",
                  desc: "Позволяет изменить дизайн шин и поставить новые диски",
                },
                {
                  title: "Клаксон",
                  category: "Horn",
                  desc: "Вы можете заменить стоковый сигнал своего автомобиля на новый",
                },
                { title: "Неоновые трубки", category: "Xenon", desc: "" },
                { title: "Цвет фар", category: "Headlights", desc: "" },
                {
                  title: "Двигатель",
                  category: "Engine",
                  desc: "Увеличение мощности двигателя,засчет установки чип - тюнинга",
                },
                {
                  title: "Турбо",
                  category: "Turbo",
                  desc: "Позволяет увеличить динамику набора скорости Вашего ТС",
                },
                {
                  title: "Коробка передач",
                  category: "Transmission",
                  desc: "Сокращает время передачи крутящего момента от двигателя к колесам",
                },
                {
                  title: "Подвеска",
                  category: "Suspension",
                  desc: "Улучшает управляемость ТС за счет установки более жесткой подвески",
                },
                {
                  title: "Тормоза",
                  category: "Brakes",
                  desc: "Сокращает тормозной путь, за счет установки новых тормозных дисков",
                },
                { title: "Тонировка", category: "WindowTint", desc: "" },
                {
                  title: "Основной цвет",
                  category: "Color1",
                  desc: "Покраска основных деталей кузова",
                },
                {
                  title: "Дополнительный цвет",
                  category: "Color2",
                  desc: "Покраска мелких деталей кузова",
                },
                {
                  title: "Градиент",
                  category: "ColorAdditional",
                  desc: "Градиент позволяет сделать Ваш основной цвет уникальным, накладываясь на него",
                },
                { title: "Покрытие", category: "Cover", desc: "" },
                {
                  title: "Винилы",
                  category: "Vinyls",
                  desc: "Усовершенствуйте внешний вид своего авто путем нанесения на него винила",
                },
                {
                  title: "Номер",
                  category: "NumberPlate",
                  desc: "Позволяет изменить оформление Ваших номерных знаков",
                },
              ],
              r = {
                Spoiler: 5,
                FrontBumper: 5,
                RearBumper: 5,
                SideSkirt: 5,
                Muffler: 5,
                Frame: 5,
                Lattice: 5,
                Hood: 5,
                Wings: 5,
                Roof: 5,
                FrontWheels: 6,
                Horn: 4,
                Xenon: 10,
                Headlights: 10,
                Engine: 25,
                Turbo: 25,
                Transmission: 20,
                Suspension: 25,
                Brakes: 25,
                WindowTint: 15,
                Color1: 5,
                Color2: 5,
                ColorAdditional: 10,
                Cover: 10,
                Vinyls: 10,
                NumberPlate: 10,
              },
              l = {
                Spoiler: "Спойлер #",
                FrontBumper: "Передний бампер #",
                RearBumper: "Задний бампер #",
                SideSkirt: "Боковая юбка #",
                Muffler: "Глушитель #",
                Frame: "Каркас безопасности #",
                Lattice: "Решетка радиатора #",
                Hood: "Капот #",
                Wings: "Крыло #",
                Roof: "Крыша #",
                FrontWheels: "Колёса #",
                Horn: "Клаксон #",
                Xenon: "Неон #",
                Headlights: "Цвет фар #",
                Engine: "Двигатель #",
                Turbo: "Турбо #",
                Transmission: "Коробка передач #",
                Suspension: "Подвеска #",
                Brakes: "Тормоза #",
                WindowTint: "Тонировка #",
                Color1: "Основной цвет #",
                Color2: "Дополнительный цвет #",
                ColorAdditional: "Градиент #",
                Cover: "Покрытие #",
                Vinyls: "Винилы #",
                NumberPlate: "Номер #",
              },
              m = [
                o.Spoiler,
                o.FrontBumper,
                o.RearBumper,
                o.SideSkirt,
                o.Muffler,
                o.Frame,
                o.Lattice,
                o.Hood,
                o.Wings,
                o.Roof,
                o.Armor,
                o.Vinyls,
              ],
              c = (e, t) => {
                switch (e) {
                  case o.SideSkirt:
                    return `CMOD_SKI_${t + 1}`;
                  case o.Engine:
                    return 0 === t ? "collision_55wey9g" : `CMOD_ENG_${t + 2}`;
                  case o.Brakes:
                    return `CMOD_BRA_${t + 1}`;
                  case o.Transmission:
                    return `CMOD_GBX_${t + 1}`;
                  case o.Suspension:
                    return 3 === t ? "collision_84hts2y" : `CMOD_SUS_${t + 1}`;
                  case o.Armor:
                    return `CMOD_ARM_${t + 1}`;
                }
                return !1;
              },
              p = ["WTD_V_COM_MG", "WT_V_AKU_MN"],
              g = (e) => {
                switch (e) {
                  case o.FrontWheels:
                    return [
                      { title: "Назад", category: "back", desc: "" },
                      { title: "Эксклюзивные", category: 7, desc: "" },
                      { title: "Лоурайдер", category: 2, desc: "" },
                      { title: "Маслкар", category: 1, desc: "" },
                      { title: "Вездеход", category: 3, desc: "" },
                      { title: "Спорт", category: 0, desc: "" },
                      { title: "Внедорожник", category: 4, desc: "" },
                      { title: "Тюнер", category: 5, desc: "" },
                    ];
                  case o.Horn:
                    return [
                      { title: "Назад", category: "back", desc: "" },
                      { title: "Стандарт", category: 0, desc: "" },
                      { title: "Музыкальные", category: 1, desc: "" },
                      { title: "С повтором", category: 2, desc: "" },
                    ];
                  case o.Cover:
                    return [
                      { title: "Назад", category: "back", desc: "" },
                      { title: "Убрать", category: -1, desc: "" },
                      { title: "Normal", category: 0, desc: "" },
                      { title: "Metallic", category: 1, desc: "" },
                      { title: "Pearl", category: 2, desc: "" },
                      { title: "Matte", category: 3, desc: "" },
                      { title: "Metal", category: 4, desc: "" },
                      { title: "Chrome", category: 5, desc: "" },
                    ];
                }
                return !1;
              },
              _ = (e, t) => {
                switch (e) {
                  case "Xenon":
                    return [
                      { name: "Нет", index: 0 },
                      { name: "Передний", index: 1 },
                      { name: "Назад", index: 2 },
                      { name: "По бокам", index: 3 },
                      { name: "Спереди и сзади", index: 4 },
                      { name: "Спереди и по бокам", index: 5 },
                      { name: "Сзади и по бокам", index: 6 },
                      { name: "Спереди, сзади и по бокам", index: 7 },
                    ];
                  case "Cover":
                    return [
                      { name: "Убрать", index: -1 },
                      { name: "Normal", index: 0 },
                      { name: "Metallic", index: 1 },
                      { name: "Pearl", index: 2 },
                      { name: "Matte", index: 3 },
                      { name: "Metal", index: 4 },
                      { name: "Chrome", index: 5 },
                    ];
                  case "Horn":
                    return [
                      [
                        {
                          name: "Стандартный клаксон",
                          index: -1,
                          duration: 1960,
                        },
                        { name: "Клаксон грузовика", index: 0, duration: 1e3 },
                        {
                          name: "Полицейский клаксон",
                          index: 1,
                          duration: 1e3,
                        },
                        { name: "Клоунский клаксон", index: 2, duration: 1e3 },
                        { name: "Клаксон 1", index: 52, duration: 1e3 },
                        { name: "Клаксон 2", index: 54, duration: 1e3 },
                        { name: "Клаксон 3", index: 56, duration: 1e3 },
                      ],
                      [
                        { name: "Джаз-клаксон 1", index: 24, duration: 2e3 },
                        { name: "Джаз-клаксон 2", index: 25, duration: 2e3 },
                        { name: "Джаз-клаксон 3", index: 26, duration: 1500 },
                        { name: "Нота - До", index: 16, duration: 1e3 },
                        { name: "Нота - Ре", index: 17, duration: 1e3 },
                        { name: "Нота - Ми", index: 18, duration: 1e3 },
                        { name: "Нота - Фа", index: 19, duration: 1e3 },
                        { name: "Нота - Соль", index: 20, duration: 1e3 },
                        { name: "Нота - Ля", index: 21, duration: 1e3 },
                        { name: "Нота - Си", index: 22, duration: 1e3 },
                        { name: "Нота - До (Выс.)", index: 23, duration: 1e3 },
                        {
                          name: "Классический клаксон 1",
                          index: 9,
                          duration: 5500,
                        },
                        {
                          name: "Классический клаксон 2",
                          index: 10,
                          duration: 5500,
                        },
                        {
                          name: "Классический клаксон 3",
                          index: 11,
                          duration: 5500,
                        },
                        {
                          name: "Классический клаксон 4",
                          index: 12,
                          duration: 4500,
                        },
                        {
                          name: "Классический клаксон 5",
                          index: 13,
                          duration: 4500,
                        },
                        {
                          name: "Классический клаксон 6",
                          index: 14,
                          duration: 4500,
                        },
                        {
                          name: "Классический клаксон 7",
                          index: 15,
                          duration: 4500,
                        },
                        {
                          name: "Классический клаксон 8",
                          index: 33,
                          duration: 4e3,
                        },
                        {
                          name: "Музыкальный клаксон 1",
                          index: 3,
                          duration: 3500,
                        },
                        {
                          name: "Музыкальный клаксон 2",
                          index: 4,
                          duration: 5500,
                        },
                        {
                          name: "Музыкальный клаксон 3",
                          index: 5,
                          duration: 4500,
                        },
                        {
                          name: "Музыкальный клаксон 4",
                          index: 6,
                          duration: 4500,
                        },
                        {
                          name: "Музыкальный клаксон 5",
                          index: 7,
                          duration: 4500,
                        },
                        { name: "Печальная труба", index: 8, duration: 4500 },
                      ],
                      [
                        {
                          name: "Джаз-клаксон (повтор)",
                          index: 27,
                          duration: 2500,
                        },
                        {
                          name: "Классический 1 (повтор)",
                          index: 32,
                          duration: 2500,
                        },
                        {
                          name: "Классический 2 (повтор)",
                          index: 34,
                          duration: 5e3,
                        },
                        {
                          name: "Сан-Андреас (повтор)",
                          index: 43,
                          duration: 5500,
                        },
                        {
                          name: "Либерти-Сити (повтор)",
                          index: 45,
                          duration: 9500,
                        },
                      ],
                    ][t];
                  case "WindowTint":
                    return [
                      { name: "Нет", index: -1 },
                      { name: "Слабое затемнение", index: 3 },
                      { name: "Среднее затемнение", index: 2 },
                      { name: "Лимузин", index: 1 },
                    ];
                  case "NumberPlate":
                    return [
                      { name: "Синий на белом - 1", index: 0 },
                      { name: "Жёлтый на чёрном", index: 1 },
                      { name: "Жёлтый на синем", index: 2 },
                      { name: "Синий на белом - 2", index: 3 },
                      { name: "Синий на белом - 3", index: 4 },
                    ];
                  case "Turbo":
                    return [
                      { name: "Нет", index: -1 },
                      { name: "Турбо-тюнинг", index: 0 },
                    ];
                  case "Engine":
                    return [
                      { name: "Стандартный", index: -1 },
                      { name: "Улучшенный 1", index: 0 },
                      { name: "Улучшенный 1", index: 1 },
                      { name: "Улучшенный 2", index: 2 },
                      { name: "Улучшенный 3", index: 3 },
                    ];
                  case "Brakes":
                    return [
                      { name: "Стандартные", index: -1 },
                      { name: "Уличные тормоза", index: 0 },
                      { name: "Спортивные тормоза", index: 1 },
                      { name: "Гоночные тормоза", index: 2 },
                    ];
                  case "Transmission":
                    return [
                      { name: "Стандартная", index: -1 },
                      { name: "Уличная коробка передач", index: 0 },
                      { name: "Спортивная коробка передач", index: 1 },
                      { name: "Гоночная коробка передач", index: 2 },
                    ];
                  case "Suspension":
                    return [
                      { name: "Стандартная", index: -1 },
                      { name: "Простая подвеска", index: 0 },
                      { name: "Уличная подвеска", index: 1 },
                      { name: "Спортивная подвеска", index: 2 },
                      { name: "Гоночная подвеска", index: 3 },
                    ];
                }
                return !1;
              },
              d = [
                {
                  Position: new mp.Vector3(-338.5271, -136.7135, 39.06718),
                  Ratation: new mp.Vector3(0.07063885, -0.2866833, 285.2643),
                },
                {
                  Position: new mp.Vector3(731.7056, -1088.896, 22.2262),
                  Ratation: new mp.Vector3(0.003280999, -0.3730852, 269.6414),
                },
                {
                  Position: new mp.Vector3(-1155.194, -2005.489, 13.24107),
                  Ratation: new mp.Vector3(-0.1381256, 0.1076123, 165.1146),
                },
                {
                  Position: new mp.Vector3(-212.5238, -1323.189, 30.94811),
                  Ratation: new mp.Vector3(-0.2359019, 0.2521333, 130.1107),
                },
                {
                  Position: new mp.Vector3(110.9264, 6626.196, 31.84457),
                  Ratation: new mp.Vector3(0.2491093, 0.2717469, 46.90005),
                },
              ];
            let h = !1,
              u = {},
              y = 0,
              v = { red: 255, green: 255, blue: 255, otherIndex: 0, index: 0 },
              f = 0,
              w = 0,
              S = !1;
            d.forEach((e, t) => {
              mp.colshapes.newSphere(
                e.Position.x,
                e.Position.y,
                e.Position.z,
                2
              ).customIndex = t;
            }),
              mp.events.add({
                playerEnterColshape: (e) => {
                  e &&
                    void 0 !== e.customIndex &&
                    a.g.localplayer.vehicle &&
                    !S &&
                    (a.g.localplayer.vehicle,
                    mp.events.callRemote(
                      "server.ls_customs.start",
                      !1,
                      e.customIndex
                    ));
                },
                playerExitColshape: (e) => {
                  e &&
                    void 0 !== e.customIndex &&
                    a.g.localplayer.vehicle &&
                    (S = !1);
                },
              }),
              mp.events.add("client.custom.open", async (e, t, o, i = 0) => {
                try {
                  if ((await a.g.IsSeatVehicle(), !a.g.localplayer.vehicle))
                    return;
                  a.g.FadeScreen(!0, 50),
                    (f = e / 100),
                    (w = t / 100),
                    (u = JSON.parse(o)),
                    (y = i),
                    (S = !0);
                  const n = a.g.localplayer.vehicle;
                  n.setOnGroundProperly(),
                    n.setForwardSpeed(0),
                    a.g.menuOpen(),
                    mp.gui.emmit('window.router.setView("VehicleLsCustom");'),
                    await a.g.wait(50),
                    mp.discord.update(
                      "Подбирает тюнинг на авто",
                      `на RedAge под ID ${a.g.localplayer.remoteId}`
                    ),
                    C();
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "shop/custom/index",
                    "client.custom.open",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.custom.category", (e) => {
                try {
                  if (!a.g.localplayer.vehicle) return;
                  "back" === e
                    ? ((v.otherIndex = 0),
                      (v = {
                        red: 0,
                        green: 0,
                        blue: 0,
                        otherIndex: 0,
                        index: 0,
                      }),
                      C())
                    : "FrontWheels" === h
                    ? E(e)
                    : "Horn" === h
                    ? F(e)
                    : I(e);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "shop/custom/index",
                    "client.custom.category",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.custom.item", (e) => {
                z(e);
              }),
              mp.events.add("client.custom.coloritem", (e) => {
                B(e);
              }),
              mp.events.add("client.custom.color", (e, t, a) => {
                L(e, t, a);
              }),
              mp.events.add("client.custom.updatecomponents", (e) => {
                u = JSON.parse(e);
              }),
              mp.events.add("client.custom.buy", () => {
                try {
                  if (!a.g.localplayer.vehicle || 0 == h) return;
                  if (
                    "FrontWheels" === h &&
                    u.WheelsType == v.otherIndex &&
                    void 0 !== u.FrontWheels &&
                    u.FrontWheels === v.index
                  )
                    return mp.events.call(
                      "notify",
                      1,
                      9,
                      "У Вас уже установлена данная модификация",
                      3e3
                    );
                  if (
                    "FrontWheels" !== h &&
                    "ColorAdditional" !== h &&
                    "Headlights" !== h &&
                    "Xenon" !== h &&
                    "Color1" !== h &&
                    "Color2" !== h &&
                    void 0 !== u[h] &&
                    u[h] === v.index
                  )
                    return mp.events.call(
                      "notify",
                      1,
                      9,
                      "У Вас уже установлена данная модификация",
                      3e3
                    );
                  let e;
                  (e =
                    "Color1" == h || "Color2" == h
                      ? "Вы действительно хотите покрасить машину в данный цвет?"
                      : "Вы действительно хотите установить данную модификацию?"),
                    mp.events.call("openDialog", "tuningbuy", e);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "shop/custom/index",
                    "client.custom.buy",
                    e.toString()
                  );
                }
              });
            const M = [
              "server.custom.buy",
              "server.custom.orgBuy",
              "server.custom.gosBuy",
            ];
            mp.events.add("client.custom.sbuy", (e) => {
              try {
                if (!a.g.localplayer.vehicle || 0 == h) return;
                e &&
                  mp.events.callRemote(
                    M[y],
                    h,
                    v.index,
                    v.otherIndex,
                    v.red,
                    v.green,
                    v.blue
                  );
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "shop/custom/index",
                  "client.custom.sbuy",
                  e.toString()
                );
              }
            }),
              mp.keys.bind(a.g.Keys.VK_ESCAPE, !1, () => {
                b();
              });
            const b = () => {
              if (f || w)
                return "FrontWheels" === h || "Horn" === h
                  ? ((v.otherIndex = 0),
                    (v = {
                      red: 0,
                      green: 0,
                      blue: 0,
                      otherIndex: 0,
                      index: 0,
                    }),
                    void C())
                  : void T();
            };
            mp.events.add("client.custom.exit", () => {
              T();
            });
            const T = () => {
                mp.events.callRemote("server.custom.exit", y),
                  W("Headlights"),
                  W("Xenon"),
                  (h = !1),
                  (u = {}),
                  (y = 0),
                  (v = { red: 0, green: 0, blue: 0, otherIndex: 0, index: 0 }),
                  (f = 0),
                  (w = 0),
                  mp.gui.emmit("window.router.setHud();"),
                  a.g.cameraManager.stopCamera(),
                  a.g.menuClose();
              },
              C = () => {
                h = !1;
                let e = [];
                const t = a.g.localplayer.vehicle;
                s.forEach((o, s) => {
                  const r = i[o.category];
                  ((e, t) =>
                    !(
                      (!["Color1", "Color2", i.WindowTint].includes(t) &&
                        a.g.AirCarList.includes(e)) ||
                      (t === i.Roof && n.includes(e)) ||
                      (t === i.FrontWheels &&
                        [
                          mp.game.joaat("journey"),
                          mp.game.joaat("Buzzard2"),
                          mp.game.joaat("Seasparrow"),
                          mp.game.joaat("Havok"),
                          mp.game.joaat("Seasparrow2"),
                          mp.game.joaat("Supervolito"),
                          mp.game.joaat("Frogger"),
                          mp.game.joaat("Maverick"),
                        ].includes(e)) ||
                      (t === i.NumberPlate &&
                        [
                          mp.game.joaat("Buzzard2"),
                          mp.game.joaat("Seasparrow"),
                          mp.game.joaat("Havok"),
                          mp.game.joaat("Seasparrow2"),
                          mp.game.joaat("Supervolito"),
                          mp.game.joaat("Frogger"),
                          mp.game.joaat("Maverick"),
                          mp.game.joaat("Volatus"),
                          mp.game.joaat("Swift"),
                        ].includes(e)) ||
                      (t === i.FrontBumper &&
                        [mp.game.joaat("Havok")].includes(e)) ||
                      (t === i.Horn &&
                        [
                          mp.game.joaat("Buzzard2"),
                          mp.game.joaat("Seasparrow"),
                          mp.game.joaat("Havok"),
                          mp.game.joaat("Seasparrow2"),
                          mp.game.joaat("Supervolito"),
                          mp.game.joaat("Frogger"),
                          mp.game.joaat("Maverick"),
                          mp.game.joaat("Volatus"),
                          mp.game.joaat("Swift"),
                        ].includes(e)) ||
                      (t === i.Xenon &&
                        [
                          mp.game.joaat("Buzzard2"),
                          mp.game.joaat("Seasparrow"),
                          mp.game.joaat("Havok"),
                          mp.game.joaat("Seasparrow2"),
                          mp.game.joaat("Supervolito"),
                          mp.game.joaat("Frogger"),
                          mp.game.joaat("Maverick"),
                          mp.game.joaat("Volatus"),
                          mp.game.joaat("Swift"),
                        ].includes(e))
                    ))(t.model, r || o.category) &&
                    (void 0 !== r && m.includes(r) && t.getNumMods(r)
                      ? e.push(o)
                      : void 0 === r || m.includes(r)
                      ? void 0 === r && e.push(o)
                      : e.push(o));
                }),
                  mp.gui.emmit(
                    `window.events.callEvent("cef.custom.categories", '${JSON.stringify(
                      e
                    )}');`
                  ),
                  P(),
                  setTimeout(() => {
                    a.g.createCamera("autoshop", t), a.g.FadeScreen(!1, 50);
                  }, 500);
              },
              D = () => {
                const e = a.g.localplayer.vehicle;
                mp.gui.emmit(
                  `window.events.callEvent("cef.custom.vehicleStats", ${Math.round(
                    mp.game.vehicle.getVehicleModelMaxSpeed(e.model) / 1.2
                  )}, ${100 * e.getMaxBraking()}, ${
                    100 * e.getAcceleration()
                  }, ${10 * e.getMaxTraction()});`
                );
              },
              P = () => {
                const e = a.g.localplayer.vehicle;
                e.setMod(i.Engine, 3),
                  e.setMod(i.Turbo, 0),
                  e.setMod(i.Transmission, 2),
                  e.setMod(i.Suspension, 3),
                  e.setMod(i.Brakes, 2),
                  mp.gui.emmit(
                    `window.events.callEvent("cef.custom.vehicleMaxStats", ${Math.round(
                      mp.game.vehicle.getVehicleModelMaxSpeed(e.model) / 1.2
                    )}, ${100 * e.getMaxBraking()}, ${
                      100 * e.getAcceleration()
                    }, ${10 * e.getMaxTraction()});`
                  ),
                  W("Engine"),
                  W("Turbo"),
                  W("Transmission"),
                  W("Suspension"),
                  W("Brakes"),
                  D();
              },
              E = (e) => {
                const t = a.g.localplayer.vehicle;
                (v.otherIndex = e),
                  t.setWheelType(e),
                  j(h),
                  mp.gui.emmit(
                    'window.events.callEvent("cef.custom.color", true, 1);'
                  );
              },
              F = (e) => {
                let t = [];
                (v.otherIndex = e),
                  _("Horn", e).forEach((e, a) => {
                    t.push({
                      name: e.name,
                      index: a,
                      price: G("Horn", e.index),
                    });
                  }),
                  t && t.length >= 1
                    ? mp.gui.emmit(
                        `window.events.callEvent("cef.custom.lists", '${JSON.stringify(
                          t
                        )}')`
                      )
                    : z(0);
              },
              I = (e) => {
                if (!a.g.localplayer.vehicle) return;
                if ((W(h), h === e)) return void (h = !1);
                (h = e),
                  (v = { red: 0, green: 0, blue: 0, otherIndex: 0, index: 0 });
                const t = i[e],
                  o = a.g.localplayer.vehicle;
                void 0 !== t && m.includes(t)
                  ? j(e)
                  : "Color1" == e || "Color2" == e
                  ? (mp.gui.emmit(
                      'window.events.callEvent("cef.custom.color", true, 0)'
                    ),
                    mp.gui.emmit(
                      `window.events.callEvent("cef.custom.lists", '${JSON.stringify(
                        [{ name: "Покрасить", index: 0, price: G(e) }]
                      )}')`
                    ))
                  : "Cover" == e
                  ? V()
                  : "Xenon" == e
                  ? H()
                  : "ColorAdditional" == e
                  ? (mp.gui.emmit(
                      'window.events.callEvent("cef.custom.color", true, 1)'
                    ),
                    mp.gui.emmit(
                      `window.events.callEvent("cef.custom.lists", '${JSON.stringify(
                        [
                          {
                            name: "Купить",
                            index: 0,
                            price: G("ColorAdditional"),
                          },
                        ]
                      )}')`
                    ))
                  : "Headlights" == e
                  ? (o.setLights(2),
                    mp.gui.emmit(
                      'window.events.callEvent("cef.custom.color", true, 2)'
                    ),
                    mp.gui.emmit(
                      `window.events.callEvent("cef.custom.lists", '${JSON.stringify(
                        [{ name: "Купить", index: 0, price: G("Headlights") }]
                      )}')`
                    ))
                  : "FrontWheels" == e
                  ? R()
                  : "Horn" == e
                  ? N()
                  : "Turbo" == e ||
                    "Engine" == e ||
                    "Brakes" == e ||
                    "Transmission" == e ||
                    "Suspension" == e
                  ? x(e)
                  : "WindowTint" == e
                  ? A()
                  : "NumberPlate" == e && k();
              },
              R = () => {
                let e = [];
                (v = { red: 0, green: 0, blue: 0, otherIndex: 0, index: 0 }),
                  g(i.FrontWheels).forEach((t, a) => {
                    e.push(t);
                  }),
                  mp.gui.emmit(
                    `window.events.callEvent("cef.custom.categories", '${JSON.stringify(
                      e
                    )}');`
                  );
              },
              N = () => {
                let e = [];
                (v = { red: 0, green: 0, blue: 0, otherIndex: 0, index: 0 }),
                  g(i.Horn).forEach((t, a) => {
                    e.push(t);
                  }),
                  mp.gui.emmit(
                    `window.events.callEvent("cef.custom.categories", '${JSON.stringify(
                      e
                    )}');`
                  );
              },
              V = () => {
                let e = [];
                _("Cover").forEach((t, a) => {
                  e.push({
                    name: t.name,
                    index: t.index,
                    price: G("Cover", t.index),
                  });
                }),
                  mp.gui.emmit(
                    `window.events.callEvent("cef.custom.lists", '${JSON.stringify(
                      e
                    )}')`
                  );
              },
              x = (e) => {
                let t = [];
                _(e).forEach((a, o) => {
                  t.push({
                    name: a.name,
                    index: a.index,
                    price: G(e, a.index),
                  });
                }),
                  mp.gui.emmit(
                    `window.events.callEvent("cef.custom.lists", '${JSON.stringify(
                      t
                    )}')`
                  );
              },
              A = () => {
                let e = [];
                const t = { "-1": -1, 3: 1, 2: 2, 1: 3 };
                _("WindowTint").forEach((a, o) => {
                  e.push({
                    name: a.name,
                    index: a.index,
                    price: G("WindowTint", t[a.index]),
                  });
                }),
                  mp.gui.emmit(
                    `window.events.callEvent("cef.custom.lists", '${JSON.stringify(
                      e
                    )}')`
                  );
              },
              k = () => {
                let e = [];
                _("NumberPlate").forEach((t, a) => {
                  e.push({
                    name: t.name,
                    index: t.index,
                    price: G("NumberPlate", t.index),
                  });
                }),
                  mp.gui.emmit(
                    `window.events.callEvent("cef.custom.lists", '${JSON.stringify(
                      e
                    )}')`
                  );
              },
              H = () => {
                a.g.localplayer.vehicle.setLights(2);
                let e = [];
                _("Xenon").forEach((t, a) => {
                  e.push({
                    name: t.name,
                    index: t.index,
                    price: G("Xenon", t.index),
                  });
                }),
                  mp.gui.emmit(
                    'window.events.callEvent("cef.custom.color", true, 0)'
                  ),
                  mp.gui.emmit(
                    `window.events.callEvent("cef.custom.lists", '${JSON.stringify(
                      e
                    )}')`
                  );
              };
            let O = 0;
            const j = (e) => {
                try {
                  O = 0;
                  const t = a.g.localplayer.vehicle,
                    n = i[e];
                  O = 1;
                  let s = [];
                  const r = ((e) => {
                    switch (e) {
                      case o.FrontBumper:
                        return "CMOD_BUM_0";
                      case o.RearBumper:
                        return "CMOD_BUM_3";
                      case o.SideSkirt:
                        return "CMOD_SKI_0";
                      case o.Muffler:
                        return "CMOD_EXH_0";
                      case o.Frame:
                        return "CMOD_DEF_RC";
                      case o.Lattice:
                        return "CMOD_GRL_0";
                      case o.Hood:
                        return "CMOD_BON_0";
                      case o.Roof:
                        return "CMOD_ROF_0";
                      case o.Brakes:
                        return "collision_9ld0k5x";
                      case o.Transmission:
                        return "collision_34vak0";
                      case o.Suspension:
                        return "CMOD_SUS_0";
                      case o.Armor:
                      case o.Spoiler:
                      case o.Wings:
                      case o.Vinyls:
                      case o.FrontWheels:
                        return "HO_NONE";
                    }
                    return !1;
                  })(n);
                  (O = 2),
                    "string" == typeof r &&
                      s.push({
                        name: a.g.escapeHtml(mp.game.ui.getLabelText(r)),
                        index: -1,
                        price: G(e, -1),
                      }),
                    (O = 3);
                  const m = t.getNumMods(n);
                  for (let o = 0; o < m; o++) {
                    let i = Natives.GET_MOD_TEXT_LABEL(t.handle, n, o);
                    if (p.indexOf(i) >= 0) continue;
                    if (t.model == mp.game.joaat("vapidse") && 48 == n)
                      continue;
                    ("string" != typeof i || i.length < 1) && (i = c(n, o));
                    const r = mp.game.ui.getLabelText(i);
                    s.push({
                      name:
                        "null" !== r.toLowerCase()
                          ? a.g.escapeHtml(r)
                          : `${l[e]}${o}`,
                      index: o,
                      price: G(e, o),
                    });
                  }
                  if (((O = 4), s && s.length >= 1))
                    return void mp.gui.emmit(
                      `window.events.callEvent("cef.custom.lists", '${JSON.stringify(
                        s
                      )}')`
                    );
                  z(0);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "shop/custom/index",
                    "OpenComponentToMod - " + O,
                    e.toString()
                  );
                }
              },
              L = (e, t, o) => {
                if (!a.g.localplayer.vehicle || 0 == h) return;
                (v.red = e), (v.green = t), (v.blue = o);
                const i = a.g.localplayer.vehicle;
                "Color1" == h
                  ? i.setCustomPrimaryColour(e, t, o)
                  : "Color2" == h
                  ? i.setCustomSecondaryColour(e, t, o)
                  : "Xenon" == h && i.setNeonLightsColour(e, t, o);
              },
              B = (e) => {
                if (!a.g.localplayer.vehicle || 0 == h) return;
                const t = a.g.localplayer.vehicle;
                (v.red = e),
                  "Headlights" == h
                    ? (t.toggleMod(22, !0), SetVehicleLightColor(t, e - 1))
                    : "ColorAdditional" == h
                    ? t.setExtraColours(e, u.FrontWheels ? u.FrontWheels : 0)
                    : "FrontWheels" == h &&
                      t.setExtraColours(
                        u.ColorAdditional ? u.ColorAdditional : 0,
                        e
                      );
              },
              z = (e) => {
                if (!a.g.localplayer.vehicle || 0 == h) return;
                const t = a.g.localplayer.vehicle;
                if (((v.index = e), "WindowTint" == h)) t.setWindowTint(e);
                else if ("NumberPlate" == h) t.setNumberPlateTextIndex(e);
                else if ("Horn" == h) {
                  const a = _("Horn", v.otherIndex)[e];
                  t.setMod(i.Horn, a.index),
                    (v.index = a.index),
                    t.startHorn(a.duration, mp.game.joaat("NORMAL"), !1);
                } else
                  "Cover" == h
                    ? t.setModColor1(parseInt(e), 1, 0)
                    : "Xenon" == h
                    ? setNeonLight(t, getNeonValuesByIndex(e))
                    : void 0 !== i[h] &&
                      (t.setMod(i[h], e),
                      "Wings" == h && t.setMod(i.RightWings, e));
                D();
              };
            (a.g.getNeonValuesByIndex = (e) => {
              switch (e) {
                case 0:
                default:
                  return [];
                case 1:
                  return [2];
                case 2:
                  return [3];
                case 3:
                  return [0, 1];
                case 4:
                  return [2, 3];
                case 5:
                  return [0, 1, 2];
                case 6:
                  return [0, 1, 3];
                case 7:
                  return [0, 1, 2, 3];
              }
            }),
              (a.g.setNeonLight = (e, t) => {
                try {
                  if (e && mp.vehicles.exists(e))
                    for (let a = 0; a < 4; a++)
                      e.setNeonLightEnabled(a, t.indexOf(a) >= 0);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "shop/custom/index",
                    "setNeonLight",
                    e.toString()
                  );
                }
              });
            const W = (e) => {
              if (!a.g.localplayer.vehicle || 0 == e) return;
              const t = a.g.localplayer.vehicle;
              "WindowTint" == e
                ? t.setWindowTint(u.WindowTint ? u.WindowTint : 0)
                : "NumberPlate" == e
                ? t.setNumberPlateTextIndex(u.NumberPlate ? u.NumberPlate : 0)
                : "Cover" == e
                ? t.setModColor1(parseInt(u.Cover ? u.Cover : 0), 1, 0)
                : "Headlights" == e
                ? (t.setLights(1),
                  SetVehicleLightColor(t, u.Headlights ? u.Headlights : -1))
                : "Color1" == e || "Color2" == e
                ? -1 === u.PrimModColor && -1 === u.SecModColor
                  ? (t.setCustomPrimaryColour(
                      u.PrimColor.Red,
                      u.PrimColor.Green,
                      u.PrimColor.Blue
                    ),
                    t.setCustomSecondaryColour(
                      u.SecColor.Red,
                      u.SecColor.Green,
                      u.SecColor.Blue
                    ))
                  : t.setColours(u.PrimModColor, u.SecModColor)
                : "Xenon" == e
                ? (t.setLights(1),
                  setNeonLight(
                    t,
                    getNeonValuesByIndex(u.NeonIndex ? u.NeonIndex : 0)
                  ),
                  0 != u.NeonColor.Alpha
                    ? t.setNeonLightsColour(
                        u.NeonColor.Red,
                        u.NeonColor.Green,
                        u.NeonColor.Blue
                      )
                    : t.setNeonLightsColour(0, 0, 0))
                : void 0 !== i[e] &&
                  (t.setMod(i[e], u[e] ? u[e] : 0),
                  "Wings" == e && t.setMod(i.RightWings, u[e] ? u[e] : 0)),
                ("ColorAdditional" != e && "FrontWheels" != e) ||
                  t.setExtraColours(
                    u.ColorAdditional ? u.ColorAdditional : 0,
                    u.FrontWheels ? u.FrontWheels : 0
                  ),
                D();
            };
            a.g.SetVehicleLightColor = (e, t) => {
              e &&
                mp.vehicles.exists(e) &&
                mp.game.invoke("0xE41033B25D003A07", e.handle, parseInt(t));
            };
            const G = (e, t = 0) =>
              -1 == t
                ? Math.round(f * w * r[e] * 0.005)
                : (0 == t && (t = 1), Math.round(f * w * r[e] * (t / 100)));
          },
          6851: (e, t, a) => {
            "use strict";
            a.r(t),
              a.d(t, {
                barberPlacesData: () => o,
                hairIDList: () => i,
                barberIdsNew: () => n,
                HeadOverlayData: () => s,
                topsComponentsToRemove: () => r,
              });
            const o = [
                {
                  interior: 165377,
                  animDict: "misshair_shop@hair_dressers",
                  interaction: {
                    origin: new mp.Vector3(-817.9705, -184.5802, 36.56892),
                    edge: new mp.Vector3(-812.0129, -181.2539, 38.56892),
                    angle: 5.8,
                  },
                  pedModel: 1099825042,
                  chair: {
                    position: new mp.Vector3(-816.22, -182.97, 36.57),
                    heading: -238.969,
                  },
                  cam: {
                    position: new mp.Vector3(-816.306, -182.914, 37.8927),
                    offset: new mp.Vector3(0.586, -1.1006, -0.1042),
                    heading: 180,
                  },
                  scissorsPosition: new mp.Vector3(-815.86, -183.75, 36.5689),
                  exit: {
                    position: new mp.Vector3(-820.53, -186.87, 37.57),
                    heading: 120,
                  },
                },
                {
                  interior: 198657,
                  animDict: "misshair_shop@barbers",
                  interaction: {
                    origin: new mp.Vector3(139.6911, -1706.982, 28.29159),
                    edge: new mp.Vector3(136.3526, -1710.825, 30.30162),
                    angle: 5.4,
                  },
                  pedModel: 373000027,
                  chair: {
                    position: new mp.Vector3(138.3646, -1709.252, 28.3182),
                    heading: -399.97,
                  },
                  cam: {
                    position: new mp.Vector3(138.4104, -1709.326, 29.8074),
                    offset: new mp.Vector3(1.0109, -0.8391, -0.1795),
                    heading: 0,
                  },
                  scissorsPosition: new mp.Vector3(
                    135.0426,
                    -1707.733,
                    28.2916
                  ),
                  exit: {
                    position: new mp.Vector3(134.51, -1710.22, 29.29),
                    heading: 135,
                  },
                },
                {
                  interior: 171009,
                  animDict: "misshair_shop@barbers",
                  interaction: {
                    origin: new mp.Vector3(-1280.183, -1118.613, 5.99159),
                    edge: new mp.Vector3(-1285.273, -1118.539, 8.001621),
                    angle: 5.4,
                  },
                  pedModel: 373000027,
                  chair: {
                    position: new mp.Vector3(-1282.774, -1119.063, 6.018199),
                    heading: -449.8173,
                  },
                  cam: {
                    position: new mp.Vector3(-1282.801, -1119.146, 7.5074),
                    offset: new mp.Vector3(1.0109, -0.8391, -0.1795),
                    heading: -49.84734,
                  },
                  scissorsPosition: new mp.Vector3(
                    -1283.755,
                    -1115.544,
                    5.9916
                  ),
                  exit: {
                    position: new mp.Vector3(-1285.999, -1116.741, 6.990001),
                    heading: 85.15266,
                  },
                },
                {
                  interior: 199937,
                  animDict: "misshair_shop@barbers",
                  interaction: {
                    origin: new mp.Vector3(1931.628, 3733.236, 31.84159),
                    edge: new mp.Vector3(1934.09, 3728.78, 33.85162),
                    angle: 5.4,
                  },
                  pedModel: 373000027,
                  chair: {
                    position: new mp.Vector3(1933.304, 3731.21, 31.8682),
                    heading: -330.0692,
                  },
                  cam: {
                    position: new mp.Vector3(1933.389, 3731.227, 33.3574),
                    offset: new mp.Vector3(1.0109, -0.8391, -0.1795),
                    heading: 69.90086,
                  },
                  scissorsPosition: new mp.Vector3(1930.736, 3728.612, 31.8416),
                  exit: {
                    position: new mp.Vector3(1932.889, 3727.257, 32.84),
                    heading: 204.9009,
                  },
                },
                {
                  interior: 155905,
                  animDict: "misshair_shop@barbers",
                  interaction: {
                    origin: new mp.Vector3(1214.553, -474.7919, 65.20159),
                    edge: new mp.Vector3(1209.653, -473.4121, 67.21162),
                    angle: 5.4,
                  },
                  pedModel: 373000027,
                  chair: {
                    position: new mp.Vector3(1211.934, -474.5607, 65.2282),
                    heading: -464.7142,
                  },
                  cam: {
                    position: new mp.Vector3(1211.887, -474.6337, 66.7174),
                    offset: new mp.Vector3(1.0109, -0.8391, -0.1795),
                    heading: -64.74422,
                  },
                  scissorsPosition: new mp.Vector3(
                    1211.891,
                    -470.9081,
                    65.2016
                  ),
                  exit: {
                    position: new mp.Vector3(1209.414, -471.4875, 66.2),
                    heading: 70.25578,
                  },
                },
                {
                  interior: 140545,
                  animDict: "misshair_shop@barbers",
                  interaction: {
                    origin: new mp.Vector3(-35.2074, -154.372, 56.07159),
                    edge: new mp.Vector3(-33.38145, -149.6202, 58.08162),
                    angle: 5.4,
                  },
                  pedModel: 373000027,
                  chair: {
                    position: new mp.Vector3(-34.73554, -151.7856, 56.0982),
                    heading: -200.0077,
                  },
                  cam: {
                    position: new mp.Vector3(-34.80389, -151.7316, 57.5874),
                    offset: new mp.Vector3(1.0109, -0.8391, -0.1795),
                    heading: 199.9623,
                  },
                  scissorsPosition: new mp.Vector3(
                    -31.09458,
                    -152.0791,
                    56.0716
                  ),
                  exit: {
                    position: new mp.Vector3(-31.44301, -149.5598, 57.07),
                    heading: 334.9623,
                  },
                },
                {
                  interior: 180225,
                  animDict: "misshair_shop@barbers",
                  interaction: {
                    origin: new mp.Vector3(-277.3488, 6225.342, 30.69159),
                    edge: new mp.Vector3(-280.9155, 6228.975, 32.70162),
                    angle: 5.4,
                  },
                  pedModel: 373000027,
                  chair: {
                    position: new mp.Vector3(-279.5066, 6226.844, 30.7182),
                    heading: -494.508,
                  },
                  cam: {
                    position: new mp.Vector3(-279.5841, 6226.805, 32.2074),
                    offset: new mp.Vector3(1.0109, -0.8391, -0.1795),
                    heading: -94.53801,
                  },
                  scissorsPosition: new mp.Vector3(
                    -277.7296,
                    6230.036,
                    30.6916
                  ),
                  exit: {
                    position: new mp.Vector3(-280.1666, 6230.764, 31.69),
                    heading: 40.46199,
                  },
                },
              ],
              i = [
                [
                  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
                  18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 73, 41, 79, 80, 81,
                  82, 84, 85, 89, 74, 91, 94, 98, 99, 108, 109, 110, 75, 90, 92,
                  93, 95, 97, 101, 102, 103, 105, 106, 107, 111, 112, 113, 114,
                  115, 116, 77, 78, 83, 100, 104,
                ],
                [
                  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
                  18, 19, 20, 21, 22, 31, 32, 33, 34, 76, 77, 95, 96, 97, 98,
                  99, 94, 79, 80, 82, 84, 85, 86, 100, 101, 103, 104, 105, 106,
                  107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
                  119, 120, 121, 122, 81, 83, 87, 88, 89, 90, 91, 92, 93, 102,
                ],
              ],
              n = [
                "hair",
                "beard",
                "eyebrows",
                "chesthair",
                "lenses",
                "lipstick",
                "blush",
                "makeup",
              ],
              s = {
                beard: 1,
                eyebrows: 2,
                chesthair: 10,
                lipstick: 8,
                blush: 5,
                makeup: 4,
              },
              r = [3, 5, 7, 8, 9, 10, 11];
          },
          5203: (e, t, a) => {
            (a.g.clothesEmpty = {
              0: {
                1: 0,
                3: 15,
                4: 15,
                5: 0,
                6: 35,
                7: 0,
                8: 6,
                9: 0,
                10: 0,
                11: 15,
              },
              1: {
                1: 0,
                3: 15,
                4: 21,
                5: 0,
                6: 34,
                7: 0,
                8: 15,
                9: 0,
                10: 0,
                11: 15,
              },
            }),
              (a.g.GetGender = (e) => {
                try {
                  if (e) {
                    if (1885233650 == e.model) return !0;
                    if (2627665880 == e.model) return !1;
                  }
                  return -1;
                } catch (e) {
                  return -1;
                }
              });
            const { barberPlacesData: o } = a(6851);
            let i = {
              ped: null,
              type: "",
              isDonate: !1,
              isOpen: !1,
              price: 0,
              tattoos: [],
              fractionClothes: [],
              isTest: !1,
            };
            const n = o.map((e) => e.interior);
            mp.events.add(
              "client.shop.open",
              async (e, t, s, r, l, m = "", c = !1) => {
                try {
                  if (a.g.menuCheck()) return;
                  (i.type = e),
                    (i.isDonate = r),
                    (i.price = s),
                    (i.isOpen = !0),
                    (i.fractionClothes = m),
                    (i.isTest = c);
                  const p = a.g.localplayer.position,
                    g = a.g.localplayer.dimension,
                    _ = a.g.localplayer.getHeading();
                  switch (
                    ((i.ped = mp.peds.new(a.g.localplayer.model, p, _, g)),
                    await a.g.IsLoadEntity(i.ped),
                    a.g.localplayer.cloneToTarget(i.ped.handle),
                    a.g.localplayer.freezePosition(!0),
                    a.g.localplayer.setAlpha(0),
                    a.g.localplayer.setCollision(!1, !1),
                    mp.discord.update(
                      "Выбирает одежду в магазине",
                      `на RedAge под ID ${a.g.localplayer.remoteId}`
                    ),
                    a.g.menuOpen(),
                    mp.gui.emmit(
                      `window.router.setView("BusinessClothes", {type: '${e}', json: '${t}', isDonate: ${r}, fractionClothes: '${m}', gender: ${a.g.GetGender(
                        a.g.localplayer
                      )}});`
                    ),
                    e)
                  ) {
                    case "barber":
                      const e = mp.game.invoke(
                        "0x2107BA504071A6BB",
                        a.g.localplayer.handle
                      );
                      let t;
                      if (0 === e || (t = n.indexOf(e)) < 0) return;
                      let s = o[t];
                      (i.ped.position = new mp.Vector3(
                        s.exit.position.x,
                        s.exit.position.y,
                        s.exit.position.z
                      )),
                        i.ped.setHeading(s.exit.heading),
                        i.ped.setCollision(!1, !0),
                        a.g.requestAnimDict(s.animDict).then(async () => {
                          i.ped.taskPlayAnimAdvanced(
                            s.animDict,
                            "player_enterchair",
                            s.chair.position.x,
                            s.chair.position.y,
                            s.chair.position.z,
                            0,
                            0,
                            s.chair.heading,
                            1e3,
                            -1e3,
                            -1,
                            5642,
                            0,
                            2,
                            1
                          ),
                            a.g.createCamera("barbershop"),
                            (a.g.cameraPosition.poistionPoint = s.cam.position),
                            (a.g.cameraInfo.polarAngleDeg = s.cam.heading),
                            mp.discord.update(
                              "Выбирает прическу",
                              `на RedAge под ID ${a.g.localplayer.remoteId}`
                            );
                        });
                      break;
                    case "tattoo":
                      a.g.createCamera("char", i.ped),
                        (i.tattoos = JSON.parse(l)),
                        mp.discord.update(
                          "Присматривает новое тату",
                          `на RedAge под ID ${a.g.localplayer.remoteId}`
                        );
                      break;
                    default:
                      a.g.createCamera("char", i.ped);
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "shop/newshop/index",
                    "client.shop.open",
                    e.toString()
                  );
                }
              }
            ),
              mp.events.add("client.shop.tattoos", (e) => {
                i.tattoos = JSON.parse(e);
              }),
              mp.events.add("client.shop.close", () => {
                i.isOpen &&
                  (i.ped.doesExist() && i.ped.destroy(),
                  a.g.menuClose(),
                  mp.events.callRemote("server.shop.close"),
                  mp.gui.emmit("window.router.setHud();"),
                  a.g.cameraManager.stopCamera(),
                  a.g.localplayer.freezePosition(!1),
                  a.g.localplayer.setAlpha(255),
                  a.g.localplayer.setCollision(!0, !0),
                  (i = {
                    ped: null,
                    type: "",
                    isDonate: !1,
                    isOpen: !1,
                    price: 0,
                  }));
              });
            const s = (e, t, o, i) => {
              try {
                if (t && t.length > 1) {
                  const e = mp.game.ui.getLabelText(`${t}${o}`);
                  if (e && "null" !== e.toLowerCase() && e.length > 3)
                    return a.g.escapeHtml(e) + `[${i}]`;
                }
                return e && e.length > 1 ? a.g.escapeHtml(e) + `[${i}]` : i;
              } catch (e) {
                return (
                  mp.events.callRemote(
                    "client_trycatch",
                    "shop/clothes/index",
                    "getIndexToTextureName",
                    e.toString()
                  ),
                  i
                );
              }
            };
            mp.events.add("client.clothes.getDictionary", (e) => {
              (e = JSON.parse(e)), (e = Object.values(e));
              let t,
                o,
                n = [];
              e.forEach((e, r) => {
                ((!i.isDonate && e.Price > 0) ||
                  (i.isDonate && e.Donate > 0) ||
                  (i.fractionClothes && i.fractionClothes.length) ||
                  i.isTest) &&
                  ((t = e),
                  (o = t.Textures && t.Textures[0] ? t.Textures[0] : 0),
                  (t.Price = Math.round((e.Price / 100) * i.price)),
                  (t.descName = s(t.Name, t.TName, o, t.Id)),
                  t.Name &&
                    t.Name.length > 1 &&
                    (t.Name = a.g.escapeHtml(t.Name)),
                  n.push(t));
              }),
                mp.gui.emmit(
                  `window.events.callEvent("cef.clothes.updateDictionary", '${JSON.stringify(
                    n
                  )}')`
                );
            }),
              mp.events.add(
                "client.shop.getIndexToTextureName",
                (e, t, a, o) => {
                  const i = s(e, t, a, o);
                  mp.gui.emmit(
                    `window.events.callEvent("cef.clothes.setName", '${i}')`
                  );
                }
              ),
              mp.events.add(
                "client.clothes.setComponentVariation",
                (e, t, o, n = !0) => {
                  n && a.g.localplayer.cloneToTarget(i.ped.handle),
                    i.ped.setComponentVariation(
                      Number(e),
                      Number(t),
                      Number(o),
                      0
                    );
                }
              ),
              mp.events.add(
                "client.clothes.setPropIndex",
                (e, t, o, n = !0) => {
                  n && a.g.localplayer.cloneToTarget(i.ped.handle),
                    -1 !== Number(t)
                      ? i.ped.setPropIndex(Number(e), Number(t), Number(o), !0)
                      : r(Number(e));
                }
              );
            const r = (e) => {
              i.ped.clearProp(Number(e));
            };
            mp.events.add("client.clothes.clearProp", r),
              mp.events.add("client.clothes.clearMask", () => {
                i.ped.setFaceFeature(0, -1.5),
                  i.ped.setFaceFeature(2, 1.5),
                  i.ped.setFaceFeature(9, -1.5),
                  i.ped.setFaceFeature(10, -1.5),
                  i.ped.setFaceFeature(13, -1.5),
                  i.ped.setFaceFeature(14, -1.5),
                  i.ped.setFaceFeature(15, -1.5),
                  i.ped.setFaceFeature(16, -1.5),
                  i.ped.setFaceFeature(17, -1.5),
                  i.ped.setFaceFeature(18, 1.5);
              }),
              mp.events.add("client.clothes.setHairColor", (e, t) => {
                i.ped.setHairColor(Number(e), Number(t));
              }),
              mp.events.add("client.clothes.setHeadOverlay", (e, t, o) => {
                a.g.localplayer.cloneToTarget(i.ped.handle),
                  i.ped.setHeadOverlay(Number(e), Number(t), Number(o));
              }),
              mp.events.add("client.clothes.setHeadOverlayColor", (e, t, a) => {
                i.ped.setHeadOverlayColor(Number(e), Number(t), Number(a), 0);
              }),
              mp.events.add("client.clothes.setEyeColor", (e) => {
                a.g.localplayer.cloneToTarget(i.ped.handle),
                  i.ped.setEyeColor(Number(e));
              });
            let l = -1;
            mp.events.add("client.clothes.updateCameraToBone", (e) => {
              l != e && ((l = e), a.g.updateCameraToBone(e, i.ped));
            }),
              mp.events.add("client.clothes.setDecoration", (e, t, o, n) => {
                a.g.localplayer.cloneToTarget(i.ped.handle),
                  i.ped.setDecoration(mp.game.joaat(o), mp.game.joaat(n));
              }),
              mp.events.add("client.clothes.getTorso", () => {
                const e = a.g.localplayer.getDrawableVariation(3),
                  t = a.g.localplayer.getTextureVariation(3);
                mp.gui.emmit(
                  `window.events.callEvent("cef.clothes.getTorso", ${e}, ${t})`
                );
              }),
              mp.events.add("client.clothes.getTop", () => {
                const e = a.g.localplayer.getDrawableVariation(11);
                mp.gui.emmit(
                  `window.events.callEvent("cef.clothes.getTop", ${e})`
                );
              });
            const m = (e) => {
                const t = [0],
                  a = [0],
                  o = [0];
                return (
                  Natives._GET_PED_MAKEUP_RGB_COLOR(e, t, a, o),
                  { r: t[0], g: a[0], b: o[0], a: 1 }
                );
              },
              c = (e) => {
                const t = [0],
                  a = [0],
                  o = [0];
                return (
                  Natives._GET_PED_HAIR_RGB_COLOR(e, t, a, o),
                  { r: t[0], g: a[0], b: o[0], a: 1 }
                );
              };
            mp.events.add("client.clothes.getColor", (e = !1) => {
              let t = [];
              if (e)
                for (let e = 0; e < Natives._GET_NUM_HAIR_COLORS(); e++) {
                  let a = c(e);
                  (a.gtaid = e), t.push(a);
                }
              else {
                t.push({ r: 0, g: 0, b: 0, a: 0, gtaid: 0 });
                let e = 0;
                for (let a = 0; a < Natives._GET_NUM_MAKEUP_COLORS(); a++) {
                  if (55 == a) continue;
                  (e = a), a > 55 && (e = a - 1);
                  let o = m(a);
                  (o.gtaid = e + 1), t.push(o);
                }
              }
              mp.gui.emmit(
                `window.events.callEvent("cef.clothes.getColor", '${JSON.stringify(
                  t
                )}')`
              );
            }),
              mp.events.add("client.clothes.buy", (e, t, a) => {
                mp.events.callRemote("server.clothes.buy", e, t, a, i.isDonate);
              }),
              mp.events.add("client.barber.buy", (e, t, a, o, n) => {
                mp.events.callRemote(
                  "server.barber.buy",
                  e,
                  t,
                  a,
                  o,
                  n,
                  i.isDonate
                );
              }),
              mp.events.add("client.tattoo.buy", (e, t) => {
                mp.events.callRemote("server.tattoo.buy", e, t, i.isDonate);
              });
          },
          2986: (e, t, a) => {
            a(6127),
              a(4526),
              mp.events.add("client.weaponshop.components", (e) => {
                try {
                  if (
                    ((e = a.g.WeaponNameToHash[e]),
                    !a.g.ComponentsData[e] || !e)
                  )
                    return void mp.events.call(
                      "notify",
                      4,
                      9,
                      "На данное оружие нет модификаций!",
                      3e3
                    );
                  if (!a.g.ComponentsData[e].Components)
                    return void mp.events.call(
                      "notify",
                      4,
                      9,
                      "На данное оружие нет модификаций!",
                      3e3
                    );
                  let t = [],
                    o = [];
                  for (let i in a.g.ComponentsData[e].Components) {
                    const n = a.g.ComponentsData[e].Components[i];
                    o.includes(n.Type) || o.push(n.Type),
                      t.push({
                        Name: a.g.escapeHtml(mp.game.ui.getLabelText(n.Name)),
                        Desc: a.g.escapeHtml(mp.game.ui.getLabelText(n.Desc)),
                        Mats: Math.round(
                          (n.Price / 100) * a.g.weaponComponentPrice
                        ),
                        type: n.Type,
                        hash: i,
                      });
                  }
                  mp.gui.emmit(
                    `window.weaponshopcomponents('${JSON.stringify(
                      t
                    )}','${JSON.stringify(o)}')`
                  );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "shop/weapon/weaponComponents",
                    "client.weaponshop.components",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.weaponshop.buyComponent", (e, t, o) => {
                try {
                  if (new Date().getTime() - a.g.lastCheck < 50) return;
                  (a.g.lastCheck = new Date().getTime()),
                    mp.events.callRemote(
                      "server.weaponshop.buyComponent",
                      Number(e),
                      Number(t),
                      o.toString()
                    );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "shop/weapon/weaponComponents",
                    "client.weaponshop.buyComponent",
                    e.toString()
                  );
                }
              });
          },
          6127: (e, t, a) => {
            a.g.ComponentsData = {
              100416529: {
                Count: 4,
                Components: {
                  1077065191: {
                    Name: "WCT_VAR_WOOD",
                    Desc: "WCD_VAR_WOOD",
                    Price: 3e4,
                    Type: 1,
                  },
                  2805810788: {
                    Name: "WCT_SUPP",
                    Desc: "WCD_AR_SUPP2",
                    Price: 9e3,
                    Type: 3,
                  },
                  3159677559: {
                    Name: "WCT_SCOPE_MAX",
                    Desc: "WCD_SCOPE_MAX",
                    Price: 17e3,
                    Type: 4,
                  },
                  3527687644: {
                    Name: "WCT_SCOPE_LRG",
                    Desc: "WCD_SCOPE_LRG",
                    Price: 13e3,
                    Type: 4,
                  },
                },
              },
              171789620: {
                Count: 3,
                Components: {
                  202788691: {
                    Name: "WCT_GRIP",
                    Desc: "WCD_GRIP",
                    Price: 900,
                    Type: 8,
                  },
                  2076495324: {
                    Name: "WCT_FLASH",
                    Desc: "WCD_FLASH",
                    Price: 1200,
                    Type: 7,
                  },
                  2855028148: {
                    Name: "WCT_SCOPE_SML",
                    Desc: "WCD_SCOPE_SML",
                    Price: 1500,
                    Type: 4,
                  },
                },
              },
              324215364: {
                Count: 4,
                Components: {
                  899381934: {
                    Name: "WCT_FLASH",
                    Desc: "WCD_FLASH",
                    Price: 800,
                    Type: 7,
                  },
                  1215999497: {
                    Name: "WCT_VAR_GOLD",
                    Desc: "WCD_VAR_GOLD",
                    Price: 900,
                    Type: 1,
                  },
                  2637152041: {
                    Name: "WCT_SCOPE_MAC",
                    Desc: "WCD_SCOPE_MAC",
                    Price: 1100,
                    Type: 4,
                  },
                  2805810788: {
                    Name: "WCT_SUPP",
                    Desc: "WCD_AR_SUPP2",
                    Price: 1e3,
                    Type: 3,
                  },
                },
              },
              453432689: {
                Count: 3,
                Components: {
                  899381934: {
                    Name: "WCT_FLASH",
                    Desc: "WCD_FLASH",
                    Price: 400,
                    Type: 7,
                  },
                  1709866683: {
                    Name: "WCT_SUPP",
                    Desc: "WCD_PI_SUPP",
                    Price: 600,
                    Type: 3,
                  },
                  3610841222: {
                    Name: "WCT_VAR_GOLD",
                    Desc: "WCD_VAR_GOLD",
                    Price: 500,
                    Type: 1,
                  },
                },
              },
              487013001: {
                Count: 3,
                Components: {
                  2076495324: {
                    Name: "WCT_FLASH",
                    Desc: "WCD_FLASH",
                    Price: 500,
                    Type: 7,
                  },
                  2732039643: {
                    Name: "WCT_VAR_GOLD",
                    Desc: "WCD_VAR_GOLD",
                    Price: 600,
                    Type: 1,
                  },
                  3859329886: {
                    Name: "WCT_SUPP",
                    Desc: "WCD_SR_SUPP",
                    Price: 700,
                    Type: 3,
                  },
                },
              },
              584646201: {
                Count: 3,
                Components: {
                  899381934: {
                    Name: "WCT_FLASH",
                    Desc: "WCD_FLASH",
                    Price: 900,
                    Type: 7,
                  },
                  2608252716: {
                    Name: "WCT_VAR_METAL",
                    Desc: "WCD_VAR_METAL",
                    Price: 1e3,
                    Type: 1,
                  },
                  3271853210: {
                    Name: "WCT_SUPP",
                    Desc: "WCD_PI_SUPP",
                    Price: 1100,
                    Type: 3,
                  },
                },
              },
              736523883: {
                Count: 5,
                Components: {
                  202788691: {
                    Name: "WCT_GRIP",
                    Desc: "WCD_GRIP",
                    Price: 900,
                    Type: 8,
                  },
                  663170192: {
                    Name: "WCT_VAR_GOLD",
                    Desc: "WCD_VAR_GOLD",
                    Price: 900,
                    Type: 1,
                  },
                  1019656791: {
                    Name: "WCT_SCOPE_MAC",
                    Desc: "WCD_SCOPE_MAC",
                    Price: 1100,
                    Type: 4,
                  },
                  2076495324: {
                    Name: "WCT_FLASH",
                    Desc: "WCD_FLASH",
                    Price: 1200,
                    Type: 7,
                  },
                  2637152041: {
                    Name: "WCT_SCOPE_MAC",
                    Desc: "WCD_SCOPE_MAC",
                    Price: 1100,
                    Type: 4,
                  },
                  3271853210: {
                    Name: "WCT_SUPP",
                    Desc: "WCD_PI_SUPP",
                    Price: 1400,
                    Type: 3,
                  },
                },
              },
              1593441988: {
                Count: 3,
                Components: {
                  899381934: {
                    Name: "WCT_FLASH",
                    Desc: "WCD_FLASH",
                    Price: 400,
                    Type: 7,
                  },
                  3271853210: {
                    Name: "WCT_SUPP",
                    Desc: "WCD_PI_SUPP",
                    Price: 600,
                    Type: 3,
                  },
                  3328527730: {
                    Name: "WCT_VAR_GOLD",
                    Desc: "WCD_VAR_GOLD",
                    Price: 500,
                    Type: 1,
                  },
                },
              },
              2017895192: {
                Count: 1,
                Components: {
                  2242268665: {
                    Name: "WCT_VAR_METAL",
                    Desc: "WCD_VAR_METAL",
                    Price: 600,
                    Type: 1,
                  },
                },
              },
              2132975508: {
                Count: 5,
                Components: {
                  202788691: {
                    Name: "WCT_GRIP",
                    Desc: "WCD_GRIP",
                    Price: 900,
                    Type: 8,
                  },
                  2076495324: {
                    Name: "WCT_FLASH",
                    Desc: "WCD_FLASH",
                    Price: 1200,
                    Type: 7,
                  },
                  2205435306: {
                    Name: "WCT_SUPP",
                    Desc: "WCD_AR_SUPP",
                    Price: 700,
                    Type: 3,
                  },
                  2824322168: {
                    Name: "WCT_VAR_METAL",
                    Desc: "WCD_VAR_BPR",
                    Price: 1600,
                    Type: 1,
                  },
                  2855028148: {
                    Name: "WCT_SCOPE_SML",
                    Desc: "WCD_SCOPE_SML",
                    Price: 900,
                    Type: 4,
                  },
                },
              },
              3249783761: {
                Count: 1,
                Components: {
                  384708672: {
                    Name: "WCT_REV_VARB",
                    Desc: "WCD_REV_VARB",
                    Price: 1300,
                    Type: 1,
                  },
                  2492708877: {
                    Name: "WCT_REV_VARG",
                    Desc: "WCD_REV_VARG",
                    Price: 1e3,
                    Type: 1,
                  },
                },
              },
              3675956304: {
                Count: 1,
                Components: {
                  3271853210: {
                    Name: "WCT_SUPP",
                    Desc: "WCD_PI_SUPP",
                    Price: 900,
                    Type: 3,
                  },
                },
              },
              3523564046: {
                Count: 3,
                Components: {
                  899381934: {
                    Name: "WCT_FLASH",
                    Desc: "WCD_FLASH",
                    Price: 900,
                    Type: 7,
                  },
                  2053798779: {
                    Name: "WCT_VAR_WOOD",
                    Desc: "WCD_VAR_HPST",
                    Price: 1e3,
                    Type: 1,
                  },
                  3271853210: {
                    Name: "WCT_SUPP",
                    Desc: "WCD_PI_SUPP",
                    Price: 1100,
                    Type: 3,
                  },
                },
              },
              3342088282: {
                Count: 6,
                Components: {
                  202788691: {
                    Name: "WCT_GRIP",
                    Desc: "WCD_GRIP",
                    Price: 9e3,
                    Type: 8,
                  },
                  371102273: {
                    Name: "WCT_VAR_GOLD",
                    Desc: "WCD_VAR_MKRF",
                    Price: 35e3,
                    Type: 1,
                  },
                  471997210: {
                    Name: "WCT_SCOPE_LRG",
                    Desc: "WCD_SCOPE_LRF",
                    Price: 16e3,
                    Type: 4,
                  },
                  2076495324: {
                    Name: "WCT_FLASH",
                    Desc: "WCD_FLASH",
                    Price: 11e3,
                    Type: 7,
                  },
                  2205435306: {
                    Name: "WCT_SUPP",
                    Desc: "WCD_AR_SUPP",
                    Price: 14e3,
                    Type: 3,
                  },
                },
              },
              2578377531: {
                Count: 3,
                Components: {
                  899381934: {
                    Name: "WCT_FLASH",
                    Desc: "WCD_FLASH",
                    Price: 400,
                    Type: 7,
                  },
                  2008591151: {
                    Name: "WCT_VAR_SIL",
                    Desc: "WCD_VAR_SIL",
                    Price: 500,
                    Type: 1,
                  },
                  2805810788: {
                    Name: "WCT_SUPP",
                    Desc: "WCD_AR_SUPP2",
                    Price: 600,
                    Type: 3,
                  },
                },
              },
              3220176749: {
                Count: 5,
                Components: {
                  202788691: {
                    Name: "WCT_GRIP",
                    Desc: "WCD_GRIP",
                    Price: 1200,
                    Type: 8,
                  },
                  1319990579: {
                    Name: "WCT_VAR_GOLD",
                    Desc: "WCD_VAR_GOLD",
                    Price: 2e3,
                    Type: 1,
                  },
                  2076495324: {
                    Name: "WCT_FLASH",
                    Desc: "WCD_FLASH",
                    Price: 900,
                    Type: 7,
                  },
                  2637152041: {
                    Name: "WCT_SCOPE_MAC",
                    Desc: "WCD_SCOPE_MAC",
                    Price: 1400,
                    Type: 4,
                  },
                  2805810788: {
                    Name: "WCT_SUPP",
                    Desc: "WCD_AR_SUPP2",
                    Price: 1100,
                    Type: 3,
                  },
                },
              },
              2210333304: {
                Count: 5,
                Components: {
                  202788691: {
                    Name: "WCT_GRIP",
                    Desc: "WCD_GRIP",
                    Price: 1300,
                    Type: 8,
                  },
                  2076495324: {
                    Name: "WCT_FLASH",
                    Desc: "WCD_FLASH",
                    Price: 900,
                    Type: 7,
                  },
                  2205435306: {
                    Name: "WCT_SUPP",
                    Desc: "WCD_AR_SUPP",
                    Price: 1100,
                    Type: 3,
                  },
                  2698550338: {
                    Name: "WCT_SCOPE_LRG",
                    Desc: "WCD_SCOPE_LRG",
                    Price: 1400,
                    Type: 4,
                  },
                  3634075224: {
                    Name: "WCT_VAR_GOLD",
                    Desc: "WCD_VAR_GOLD",
                    Price: 2e3,
                    Type: 1,
                  },
                },
              },
              2937143193: {
                Count: 4,
                Components: {
                  930927479: {
                    Name: "WCT_VAR_METAL",
                    Desc: "WCD_VAR_METAL",
                    Price: 2e3,
                    Type: 1,
                  },
                  2076495324: {
                    Name: "WCT_FLASH",
                    Desc: "WCD_FLASH",
                    Price: 900,
                    Type: 7,
                  },
                  2205435306: {
                    Name: "WCT_SUPP",
                    Desc: "WCD_AR_SUPP",
                    Price: 1100,
                    Type: 3,
                  },
                  2855028148: {
                    Name: "WCT_SCOPE_SML",
                    Desc: "WCD_SCOPE_SML",
                    Price: 1400,
                    Type: 4,
                  },
                },
              },
              2640438543: {
                Count: 3,
                Components: {
                  202788691: {
                    Name: "WCT_GRIP",
                    Desc: "WCD_GRIP",
                    Price: 400,
                    Type: 8,
                  },
                  2076495324: {
                    Name: "WCT_FLASH",
                    Desc: "WCD_FLASH",
                    Price: 600,
                    Type: 7,
                  },
                  2805810788: {
                    Name: "WCT_SUPP",
                    Desc: "WCD_AR_SUPP2",
                    Price: 800,
                    Type: 3,
                  },
                },
              },
              1432025498: {
                Count: 5,
                Components: {
                  1108334355: {
                    Name: "WCT_HOLO",
                    Desc: "WCD_HOLO",
                    Price: 1200,
                    Type: 4,
                  },
                  77277509: {
                    Name: "WCT_SCOPE_MAC2",
                    Desc: "WCD_SCOPE_MAC",
                    Price: 1200,
                    Type: 4,
                  },
                  1060929921: {
                    Name: "WCT_SCOPE_SML2",
                    Desc: "WCD_SCOPE_SML",
                    Price: 1200,
                    Type: 4,
                  },
                  2076495324: {
                    Name: "WCT_FLASH",
                    Desc: "WCD_FLASH",
                    Price: 600,
                    Type: 7,
                  },
                  2890063729: {
                    Name: "WCT_SUPP",
                    Desc: "WCD_SR_SUPP",
                    Price: 800,
                    Type: 3,
                  },
                  1602080333: {
                    Name: "WCT_MUZZ8",
                    Desc: "WCD_MUZZ_SR",
                    Price: 1800,
                    Type: 5,
                  },
                  3820854852: {
                    Name: "WCT_CAMO_1",
                    Desc: "WCD_INVALID",
                    Price: 1100,
                    Type: 9,
                  },
                  387223451: {
                    Name: "WCT_CAMO_2",
                    Desc: "WCD_INVALID",
                    Price: 1100,
                    Type: 9,
                  },
                  617753366: {
                    Name: "WCT_CAMO_3",
                    Desc: "WCD_INVALID",
                    Price: 1100,
                    Type: 9,
                  },
                  4072589040: {
                    Name: "WCT_CAMO_4",
                    Desc: "WCD_INVALID",
                    Price: 1100,
                    Type: 9,
                  },
                  8741501: {
                    Name: "WCT_CAMO_5",
                    Desc: "WCD_INVALID",
                    Price: 1100,
                    Type: 9,
                  },
                  3693681093: {
                    Name: "WCT_CAMO_6",
                    Desc: "WCD_INVALID",
                    Price: 1100,
                    Type: 9,
                  },
                  3783533691: {
                    Name: "WCT_CAMO_7",
                    Desc: "WCD_INVALID",
                    Price: 1100,
                    Type: 9,
                  },
                  3639579478: {
                    Name: "WCT_CAMO_8",
                    Desc: "WCD_INVALID",
                    Price: 1100,
                    Type: 9,
                  },
                  4012490698: {
                    Name: "WCT_CAMO_9",
                    Desc: "WCD_INVALID",
                    Price: 1100,
                    Type: 9,
                  },
                  1739501925: {
                    Name: "WCT_CAMO_10",
                    Desc: "WCD_INVALID",
                    Price: 1100,
                    Type: 9,
                  },
                  1178671645: {
                    Name: "WCT_CAMO_IND",
                    Desc: "WCD_INVALID",
                    Price: 1100,
                    Type: 9,
                  },
                },
              },
              2024373456: {
                Count: 6,
                Components: {
                  2076495324: {
                    Name: "WCT_FLASH",
                    Desc: "WCD_FLASH",
                    Price: 1200,
                    Type: 7,
                  },
                  2681951826: {
                    Name: "WCT_HOLO",
                    Desc: "WCD_HOLO",
                    Price: 1500,
                    Type: 4,
                  },
                  3842157419: {
                    Name: "WCT_SCOPE_MAC2",
                    Desc: "WCD_SCOPE_MAC",
                    Price: 1500,
                    Type: 4,
                  },
                  1038927834: {
                    Name: "WCT_SCOPE_SML2",
                    Desc: "WCD_SCOPE_SML",
                    Price: 1500,
                    Type: 4,
                  },
                  3271853210: {
                    Name: "WCT_SUPP",
                    Desc: "WCD_PI_SUPP",
                    Price: 1e3,
                    Type: 3,
                  },
                  3113485012: {
                    Name: "WCT_MUZZ1",
                    Desc: "WCD_MUZZ",
                    Price: 1800,
                    Type: 5,
                  },
                  3362234491: {
                    Name: "WCT_MUZZ2",
                    Desc: "WCD_MUZZ",
                    Price: 1800,
                    Type: 5,
                  },
                  3725708239: {
                    Name: "WCT_MUZZ3",
                    Desc: "WCD_MUZZ",
                    Price: 1800,
                    Type: 5,
                  },
                  3968886988: {
                    Name: "WCT_MUZZ4",
                    Desc: "WCD_MUZZ",
                    Price: 1800,
                    Type: 5,
                  },
                  48731514: {
                    Name: "WCT_MUZZ5",
                    Desc: "WCD_MUZZ",
                    Price: 1800,
                    Type: 5,
                  },
                  880736428: {
                    Name: "WCT_MUZZ6",
                    Desc: "WCD_MUZZ",
                    Price: 1800,
                    Type: 5,
                  },
                  1303784126: {
                    Name: "WCT_MUZZ7",
                    Desc: "WCD_MUZZ",
                    Price: 1800,
                    Type: 5,
                  },
                  3641720545: {
                    Name: "WCT_BARR",
                    Desc: "WCD_BARR",
                    Price: 2100,
                    Type: 6,
                  },
                  2774849419: {
                    Name: "WCT_BARR2",
                    Desc: "WCD_BARR2",
                    Price: 2100,
                    Type: 6,
                  },
                  3298267239: {
                    Name: "WCT_CAMO_1",
                    Desc: "WCD_INVALID",
                    Price: 1100,
                    Type: 9,
                  },
                  940943685: {
                    Name: "WCT_CAMO_2",
                    Desc: "WCD_INVALID",
                    Price: 1100,
                    Type: 9,
                  },
                  1263226800: {
                    Name: "WCT_CAMO_3",
                    Desc: "WCD_INVALID",
                    Price: 1100,
                    Type: 9,
                  },
                  3966931456: {
                    Name: "WCT_CAMO_4",
                    Desc: "WCD_INVALID",
                    Price: 1100,
                    Type: 9,
                  },
                  1224100642: {
                    Name: "WCT_CAMO_5",
                    Desc: "WCD_INVALID",
                    Price: 1100,
                    Type: 9,
                  },
                  899228776: {
                    Name: "WCT_CAMO_6",
                    Desc: "WCD_INVALID",
                    Price: 1100,
                    Type: 9,
                  },
                  616006309: {
                    Name: "WCT_CAMO_7",
                    Desc: "WCD_INVALID",
                    Price: 1100,
                    Type: 9,
                  },
                  2733014785: {
                    Name: "WCT_CAMO_8",
                    Desc: "WCD_INVALID",
                    Price: 1100,
                    Type: 9,
                  },
                  572063080: {
                    Name: "WCT_CAMO_9",
                    Desc: "WCD_INVALID",
                    Price: 1100,
                    Type: 9,
                  },
                  1170588613: {
                    Name: "WCT_CAMO_10",
                    Desc: "WCD_INVALID",
                    Price: 1100,
                    Type: 9,
                  },
                  966612367: {
                    Name: "WCT_CAMO_IND",
                    Desc: "WCD_INVALID",
                    Price: 1100,
                    Type: 9,
                  },
                },
              },
            };
          },
          4526: (e, t, a) => {
            a.g.WeaponNameToHash = {
              SniperRifle: 100416529,
              FireExtinguisher: 101631238,
              CompactGrenadeLauncher: 125959754,
              Snowball: 126349499,
              VintagePistol: 137902532,
              CombatPDW: 171789620,
              HeavySniperMk2: 177293209,
              HeavySniper: 205991906,
              SweeperShotgun: 317205821,
              MicroSMG: 324215364,
              Wrench: 419712736,
              Pistol: 453432689,
              PumpShotgun: 487013001,
              APPistol: 584646201,
              Ball: 600439132,
              Molotov: 615608432,
              CeramicPistol: 727643628,
              SMG: 736523883,
              StickyBomb: 741814745,
              PetrolCan: 883325847,
              StunGun: 911657153,
              StoneHatchet: 940833800,
              AssaultRifleMk2: 961495388,
              MilitaryRifle: -1658906650,
              HeavyShotgun: 984333226,
              Minigun: 1119849093,
              GolfClub: 1141786504,
              RayCarbine: 1198256469,
              FlareGun: 1198879012,
              Flare: 1233104067,
              GrenadeLauncherSmoke: 1305664598,
              Hammer: 1317494643,
              PumpShotgunMk2: 1432025498,
              CombatPistol: 1593441988,
              Gusenberg: 1627465347,
              CompactRifle: 1649403952,
              HomingLauncher: 1672152130,
              Nightstick: 1737195953,
              MarksmanRifleMk2: 1785463520,
              Railgun: 1834241177,
              SawnOffShotgun: 2017895192,
              SMGMk2: 2024373456,
              BullpupRifle: 2132975508,
              Firework: 2138347493,
              CombatMG: 2144741730,
              CarbineRifle: 2210333304,
              Crowbar: 2227010557,
              BullpupRifleMk2: 2228681469,
              SNSPistolMk2: 2285322324,
              Flashlight: 2343591895,
              NavyRevolver: 2441047180,
              Dagger: 2460120199,
              Grenade: 2481070269,
              PoolCue: 2484171525,
              Bat: 2508868239,
              SpecialCarbineMk2: 2526821735,
              DoubleAction: 2548703416,
              Pistol50: 2578377531,
              Knife: 2578778090,
              MG: 2634544996,
              BullpupShotgun: 2640438543,
              BZGas: 2694266206,
              GrenadeLauncher: 2726580491,
              Musket: 2828843422,
              ProximityMine: 2874559379,
              AdvancedRifle: 2937143193,
              RayPistol: 2939590305,
              RPG: 2982836145,
              Widowmaker: 3056410471,
              PipeBomb: 3125143736,
              MiniSMG: 3173288789,
              SNSPistol: 3218215474,
              PistolMk2: 3219281620,
              AssaultRifle: 3220176749,
              SpecialCarbine: 3231910285,
              Revolver: 3249783761,
              MarksmanRifle: 3342088282,
              RevolverMk2: 3415619887,
              BattleAxe: 3441901897,
              HeavyPistol: 3523564046,
              KnuckleDuster: 3638508604,
              MachinePistol: 3675956304,
              CombatMGMk2: 3686625920,
              MarksmanPistol: 3696079510,
              Machete: 3713923289,
              SwitchBlade: 3756226112,
              AssaultShotgun: 3800352039,
              DoubleBarrelShotgun: 4019527611,
              AssaultSMG: 4024951519,
              Hatchet: 4191993645,
              Bottle: 4192643659,
              CarbineRifleMk2: 4208062921,
              SmokeGrenade: 4256991824,
            };
          },
          1935: (e, t, a) => {
            Object.defineProperty(mp.game.graphics, "bloodVfxMode", {
              get() {
                return this._vfxMode || 0;
              },
              async set(e) {
                switch (e) {
                  case 1:
                    await a.g.requestNamedPtfxAsset("scr_rcbarry1"),
                      mp.game.graphics.enableClownBloodVfx(!1),
                      mp.game.graphics.enableAlienBloodVfx(!0);
                    break;
                  case 2:
                    await a.g.requestNamedPtfxAsset("scr_rcbarry2"),
                      mp.game.graphics.enableAlienBloodVfx(!1),
                      mp.game.graphics.enableClownBloodVfx(!0);
                    break;
                  default:
                    (e = 0),
                      mp.game.graphics.enableAlienBloodVfx(!1),
                      mp.game.graphics.enableClownBloodVfx(!1);
                }
                this._vfxMode = e;
              },
            });
          },
          4796: (e, t, a) => {
            a.g.requestAnimDict = (e, t = !1) =>
              new Promise(async (o, n) => {
                if (mp.game.streaming.hasAnimDictLoaded(e)) return o(!0);
                mp.game.streaming.requestAnimDict(e);
                let s = 0;
                for (; !mp.game.streaming.hasAnimDictLoaded(e); ) {
                  if (s > 5e3) return o("Ошибка requestAnimDict. Dict: " + e);
                  s++, await a.g.wait(0);
                }
                return t || i("requestAnimDict", e), o(!0);
              });
            let o = { requestAnimDict: {}, requestNamedPtfxAsset: {} };
            const i = (e, t) => {
                o[e][t] ||
                  (o[e][t] = a.g.wait(6e4).then(() => {
                    n(e, t), delete o[e][t];
                  }));
              },
              n = (e, t) => {
                if ("string" == typeof t)
                  switch (e) {
                    case "requestAnimDict":
                      mp.game.streaming.removeAnimDict(t);
                      break;
                    case "requestNamedPtfxAsset":
                      mp.game.streaming.removeNamedPtfxAsset(t);
                  }
              };
            a.g.ANTIANIM = !1;
            const s = (e, t) => {
              try {
                if (
                  e &&
                  mp.players.exists(e) &&
                  "player" === e.type &&
                  0 !== e.handle &&
                  !e.vehicle
                ) {
                  if (
                    (t || (t = e.getVariable("ANIM_USE")),
                    null != t &&
                      "null" != t &&
                      (t = t.split("|")) &&
                      t.length >= 3)
                  ) {
                    if (!mp.game.streaming.doesAnimDictExist(t[0])) return;
                    return void a.g.requestAnimDict(t[0]).then(async () => {
                      e.handle === a.g.localplayer.handle &&
                        (a.g.ANTIANIM = !0),
                        e.taskPlayAnim(
                          t[0],
                          t[1],
                          2,
                          e.handle === a.g.localplayer.handle ? 8 : 0,
                          -1,
                          Number(t[2]),
                          0,
                          !1,
                          !1,
                          !1
                        ),
                        mp.game.streaming.removeAnimDict(t[0]),
                        t[3] &&
                          e.handle === a.g.localplayer.handle &&
                          mp.attachments.addLocal(t[3]);
                    });
                  }
                  e.handle === a.g.localplayer.handle &&
                    (mp.gui.emmit("window.UpdateButtonText('', '');"),
                    (a.g.ANTIANIM = !1));
                }
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "synchronization/animation",
                  "setAnim",
                  e.toString()
                );
              }
            };
            mp.events.addDataHandler("ANIM_USE", (e, t, a) => {
              s(e, t);
            }),
              mp.events.add("playerStreamIn", (e) => {
                s(e, null);
              }),
              mp.events.add("client.setAnim", (e) => {
                s(e, null);
              }),
              mp.events.add("taskPlayAnim", async (e, t, o, i, n, s) => {
                try {
                  if (
                    e &&
                    mp.players.exists(e) &&
                    "player" === e.type &&
                    0 !== e.handle &&
                    !e.vehicle
                  ) {
                    if (!mp.game.streaming.doesAnimDictExist(t)) return;
                    a.g
                      .requestAnimDict(t)
                      .then(async () => {
                        e.taskPlayAnim(
                          t,
                          o,
                          2,
                          e.handle === a.g.localplayer.handle ? 8 : 0,
                          -1,
                          Number(i),
                          0,
                          !1,
                          !1,
                          !1
                        ),
                          mp.game.streaming.removeAnimDict(t),
                          e.handle === a.g.localplayer.handle &&
                            ((a.g.ANTIANIM = !0),
                            s && mp.attachments.addLocal(s));
                        const r = mp.game.entity.getEntityAnimDuration(t, o);
                        r > 0 &&
                          (await a.g.wait(1e3 * r - 10),
                          e.isPlayingAnim(t, o, 3)
                            ? n
                              ? (e.stopAnimTask(t, o, 3),
                                e.clearTasksImmediately())
                              : e.stopAnimTask(t, o, 3)
                            : (e.handle === a.g.localplayer.handle ||
                                e.isInAnyVehicle(!1)) &&
                              e.clearTasksImmediately()),
                          e.handle === a.g.localplayer.handle &&
                            (mp.events.callRemote("OffAnim"),
                            (a.g.ANTIANIM = !1),
                            mp.gui.emmit("window.UpdateButtonText('', '');"),
                            s && mp.attachments.removeLocal(s));
                      })
                      .catch((e) => console.log("ANIM ERR: " + e));
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "synchronization/animation",
                    "mp.events.add('taskPlayAnim'",
                    e.toString()
                  );
                }
              });
            const r = {
              mineJob: {
                animDictionary: "anim@heists@box_carry@",
                animationName: "idle",
                flag: 49,
                playbackRate: 0,
                attachmentName: "radio",
              },
              radio: {
                animDictionary: "random@arrests",
                animationName: "generic_radio_enter",
                flag: 50,
                playbackRate: 2,
              },
              pushVeh: {
                animDictionary: "missfinale_c2ig_11",
                animationName: "pushcar_offcliff_m",
                flag: 35,
                playbackRate: 0,
              },
              vape: {
                animDictionary: "mp_player_inteat@burger",
                animationName: "mp_player_int_eat_burger",
                flag: 49,
                playbackRate: 0,
                attachmentName: "vape",
              },
              handshake: {
                animDictionary: "mp_ped_interaction",
                animationName: "handshake_guy_a",
                flag: 39,
                playbackRate: 0,
                attachmentName: "handshake",
              },
              drink: {
                animDictionary: "amb@world_human_drinking@beer@male@idle_a",
                animationName: "idle_c",
                flag: 49,
                playbackRate: 0,
                attachmentName: "drink",
              },
              healthkit: {
                animDictionary:
                  "amb@code_human_wander_texting_fat@female@enter",
                animationName: "enter",
                flag: 49,
                playbackRate: 0,
                attachmentName: "healthkit",
              },
              smokeloop: {
                animDictionary: "anim@heists@humane_labs@finale@keycards",
                animationName: "ped_a_enter_loop",
                flag: 49,
                playbackRate: 0,
                attachmentName: "smokeloop",
              },
              bong: {
                animDictionary:
                  "amb@code_human_in_car_mp_actions@smoke@std@rps@base",
                animationName: "idle_c",
                flag: 49,
                playbackRate: 0,
                attachmentName: "bong",
              },
              rose: {
                animDictionary: "anim@heists@humane_labs@finale@keycards",
                animationName: "ped_b_enter_loop",
                flag: 49,
                playbackRate: 0,
                attachmentName: "rose",
              },
              barbell: {
                animDictionary:
                  "amb@world_human_muscle_free_weights@male@barbell@idle_a",
                animationName: "idle_a",
                flag: 49,
                playbackRate: 0,
                attachmentName: "barbell",
              },
              binoculars: {
                animDictionary: "oddjobs@hunter",
                animationName: "binoculars_loop",
                flag: 49,
                playbackRate: 0,
                attachmentName: "binoculars",
              },
              umbrella: {
                animDictionary: "anim@heists@humane_labs@finale@keycards",
                animationName: "ped_b_enter_loop",
                flag: 49,
                playbackRate: 0,
                attachmentName: "umbrella",
              },
              mic: {
                animDictionary: "anim@heists@humane_labs@finale@keycards",
                animationName: "ped_b_enter_loop",
                flag: 49,
                playbackRate: 0,
                attachmentName: "mic",
              },
              guitar: {
                animDictionary: "amb@lo_res_idles@",
                animationName: "world_human_musician_guitar_lo_res_base",
                flag: 49,
                playbackRate: 0,
                attachmentName: "guitar",
              },
              camera: {
                animDictionary: "misscarsteal4@meltdown",
                animationName: "_rehearsal_camera_man",
                flag: 49,
                playbackRate: 0,
                attachmentName: "camera",
              },
              eat: {
                animDictionary:
                  "amb@code_human_wander_eating_donut@male@idle_a",
                animationName: "idle_b",
                flag: 49,
                playbackRate: 0,
                attachmentName: "eat",
              },
              joint: {
                animDictionary: "amb@code_human_wander_smoking@male@idle_a",
                animationName: "idle_a",
                flag: 49,
                playbackRate: 0,
                attachmentName: "joint",
              },
              cola: {
                animDictionary: "amb@code_human_wander_drinking@male@idle_a",
                animationName: "idle_c",
                flag: 49,
                playbackRate: 0,
                attachmentName: "cola",
              },
              enterpet: {
                animDictionary: "amb@world_human_sunbathe@male@back@base",
                animationName: "base",
                flag: 39,
                playbackRate: 0,
                attachmentName: "enterpet",
              },
              creatorcam: {
                animDictionary: "amb@world_human_stand_guard@male@base",
                animationName: "base",
                flag: 39,
                playbackRate: 0,
                attachmentName: "creatorcam",
              },
              sit: {
                animDictionary: "switch@michael@sitting",
                animationName: "idle",
                flag: 39,
                playbackRate: 0,
                attachmentName: "sit",
              },
              lezhat: {
                animDictionary: "amb@world_human_sunbathe@male@back@base",
                animationName: "base",
                flag: 39,
                playbackRate: 0,
                attachmentName: "lezhat",
              },
              olezhat: {
                animDictionary: "missheistfbi3b_ig8_2",
                animationName: "cower_loop_victim",
                flag: 39,
                playbackRate: 0,
                attachmentName: "olezhat",
              },
              pguitar: {
                animDictionary: "amb@world_human_musician@guitar@male@base",
                animationName: "base",
                flag: 49,
                playbackRate: 0,
                attachmentName: "pguitar",
              },
              pbongo: {
                animDictionary: "amb@world_human_musician@bongos@male@base",
                animationName: "base",
                flag: 49,
                playbackRate: 0,
                attachmentName: "pbongo",
              },
              jim: {
                animDictionary: "amb@prop_human_seat_muscle_bench_press@idle_a",
                animationName: "idle_a",
                flag: 39,
                playbackRate: 0,
                attachmentName: "jim",
              },
              tyag: {
                animDictionary: "amb@prop_human_muscle_chin_ups@male@base",
                animationName: "base",
                flag: 39,
                playbackRate: 0,
                attachmentName: "tyag",
              },
              jimstoya: {
                animDictionary:
                  "amb@world_human_muscle_free_weights@male@barbell@base",
                animationName: "base",
                flag: 39,
                playbackRate: 0,
                attachmentName: "jimstoya",
              },
              press: {
                animDictionary: "amb@world_human_sit_ups@male@base",
                animationName: "base",
                flag: 39,
                playbackRate: 0,
                attachmentName: "press",
              },
              otjim: {
                animDictionary: "amb@world_human_push_ups@male@base",
                animationName: "base",
                flag: 39,
                playbackRate: 0,
                attachmentName: "otjim",
              },
              playeguitar: {
                animDictionary: "amb@world_human_musician@guitar@male@base",
                animationName: "base",
                flag: 49,
                playbackRate: 0,
                attachmentName: "playeguitar",
              },
              vzlommeb: {
                animDictionary: "amb@code_human_wander_texting@male@base",
                animationName: "static",
                flag: 39,
                playbackRate: 0,
                attachmentName: "vzlommeb",
              },
              bagazhnik: {
                animDictionary: "timetable@floyd@cryingonbed@base",
                animationName: "base",
                flag: 33,
                playbackRate: 0,
                attachmentName: "bagazhnik",
              },
              vzlomsafe: {
                animDictionary: "mini@safe_cracking",
                animationName: "idle_base",
                flag: 39,
                playbackRate: 0,
                attachmentName: "vzlomsafe",
              },
              repaircar: {
                animDictionary: "anim@amb@garage@chassis_repair@",
                animationName: "base_amy_skater_01",
                flag: 39,
                playbackRate: 0,
                attachmentName: "repaircar",
              },
              revive: {
                animDictionary: "amb@medic@standing@tendtodead@idle_a",
                animationName: "idle_a",
                flag: 49,
                playbackRate: 0,
                attachmentName: "revive",
              },
              airdropvzlom: {
                animDictionary: "mp_weapons_deal_sting",
                animationName: "crackhead_bag_loop",
                flag: 39,
                playbackRate: 0,
                attachmentName: "vzlomsafe",
              },
              pickup_snowball: {
                animDictionary: "anim@mp_snowball",
                animationName: "pickup_snowball",
                flag: 39,
                playbackRate: 0,
                attachmentName: "pickup_snowball",
              },
              dead: { flag: 39, playbackRate: 0, attachmentName: "dead" },
              arresting: {
                animDictionary: "mp_arresting",
                animationName: "idle",
                flag: 49,
                playbackRate: 0,
                attachmentName: "arresting",
              },
              vzlomhouse: {
                animDictionary: "mini@safe_cracking",
                animationName: "idle_base",
                flag: 39,
                playbackRate: 0,
                attachmentName: "vzlomhouse",
              },
              itemraise: {
                animDictionary: "random@domestic",
                animationName: "pickup_low",
                flag: 39,
                playbackRate: 0,
                attachmentName: "itemraise",
              },
              electric: {
                animDictionary: "amb@prop_human_movie_studio_light@base",
                animationName: "base",
                flag: 39,
                playbackRate: 0,
                attachmentName: "electric",
              },
              gopostal: {
                animDictionary: "anim@heists@narcotics@trash",
                animationName: "drop_side",
                flag: -1,
                playbackRate: 0,
                attachmentName: "gopostal",
              },
              lumberjack: {
                animDictionary: "melee@large_wpn@streamed_core",
                animationName: "car_side_attack_a",
                flag: 1,
                playbackRate: 0,
                attachmentName: "lumberjack",
              },
              miner: {
                animDictionary: "melee@large_wpn@streamed_core",
                animationName: "car_side_attack_a",
                flag: 1,
                playbackRate: 0,
                attachmentName: "miner",
              },
              cuff: {
                animDictionary: "mp_arresting",
                animationName: "idle",
                flag: 49,
                playbackRate: 0,
                attachmentName: "lumberjack",
              },
              phonecall: {
                animDictionary: "anim@cellphone@in_car@ds",
                animationName: "cellphone_call_listen_base",
                flag: 49,
                playbackRate: 0,
                attachmentName: "phonecall",
              },
              casino1: {
                animDictionary: "anim_casino_b@amb@casino@games@shared@player@",
                animationName: "sit_enter_left",
                flag: 3,
                playbackRate: 0,
                attachmentName: "casino1",
              },
              casino2: {
                animDictionary: "anim_casino_b@amb@casino@games@shared@player@",
                animationName: "idle_a",
                flag: 3,
                playbackRate: 0,
                attachmentName: "casino2",
              },
              casinobet: {
                animDictionary:
                  "anim_casino_b@amb@casino@games@blackjack@player",
                animationName: "place_bet_small",
                flag: 3,
                playbackRate: 0,
                attachmentName: "casinobet",
              },
              casinobet1: {
                animDictionary: "anim_casino_b@amb@casino@games@shared@player@",
                animationName: "idle_var_01",
                flag: 3,
                playbackRate: 0,
                attachmentName: "casinobet1",
              },
              animationgameend: {
                animDictionary: "anim_casino_b@amb@casino@games@shared@player@",
                flag: 3,
                playbackRate: 0,
                attachmentName: "animationgameend",
              },
              exitcasino: {
                animDictionary: "anim_casino_b@amb@casino@games@shared@player@",
                animationName: "sit_exit_left",
                flag: 39,
                playbackRate: 0,
                attachmentName: "exitcasino",
              },
              sitting: {
                animDictionary: "anim_casino_b@amb@casino@games@shared@player@",
                animationName: "sit_enter_left_side",
                flag: 3,
                playbackRate: 0,
                attachmentName: "sitting",
              },
              sitting1: {
                animDictionary: "anim_casino_b@amb@casino@games@shared@player@",
                animationName: "idle_a",
                flag: 3,
                playbackRate: 0,
                attachmentName: "sitting1",
              },
              sitting2: {
                animDictionary: "anim_casino_b@amb@casino@games@shared@player@",
                animationName: "sit_exit_left",
                flag: 3,
                playbackRate: 0,
                attachmentName: "sitting2",
              },
              spin2: {
                animDictionary: "anim_casino_b@amb@casino@games@shared@player@",
                animationName: "idle_a",
                flag: 3,
                playbackRate: 0,
                attachmentName: "spin2",
              },
              spinenter: {
                animDictionary: "anim_casino_b@amb@casino@games@shared@player@",
                animationName: "sit_enter_left_side",
                flag: 3,
                playbackRate: 0,
                attachmentName: "spinenter",
              },
              spinleft: {
                animDictionary: "anim_casino_b@amb@casino@games@shared@player@",
                animationName: "sit_exit_left",
                flag: 39,
                playbackRate: 0,
                attachmentName: "spinleft",
              },
              eatpet: {
                animDictionary: "mp_weapons_deal_sting",
                animationName: "crackhead_bag_loop",
                flag: 39,
                playbackRate: 0,
                attachmentName: "eatpet",
              },
              phonecall: {
                animDictionary: "anim@cellphone@in_car@ds",
                animationName: "cellphone_call_listen_base",
                flag: 49,
                playbackRate: 0,
              },
              microphone: {
                animDictionary: "anim@heists@humane_labs@finale@keycards",
                animationName: "ped_b_enter_loop",
                flag: 49,
                playbackRate: 0,
                attachmentName: "microphone",
              },
              sit: {
                animDictionary: "switch@michael@sitting",
                animationName: "idle",
                flag: 35,
                playbackRate: 0,
                freeze: !0,
                collision: !0,
              },
            };
            mp.events.add("PlayAnimToKey", (e, t, a) => {
              l(e, t, a);
            }),
              mp.events.addDataHandler("AnimToKey", (e, t, a) => {
                e &&
                  mp.players.exists(e) &&
                  "player" === e.type &&
                  (l(e, -1, t), (e.AnimToKey = t));
              }),
              mp.events.add("playerStreamIn", (e) => {
                l(e, -1, -1);
              });
            const l = (e, t, o) => {
              try {
                if (
                  e &&
                  mp.players.exists(e) &&
                  "player" === e.type &&
                  0 !== e.handle &&
                  !e.vehicle
                ) {
                  if (!r[o] && !r[e.AnimToKey]) return;
                  -1 != o && !r[o] && r[e.AnimToKey] && (t = !1),
                    r[o] || (o = e.AnimToKey),
                    -1 == t && (t = !!r[o]),
                    t
                      ? (r[o].collision && e.setCollision(!1, !0),
                        r[o].freeze && e.freezePosition(!0),
                        a.g
                          .requestAnimDict(r[o].animDictionary)
                          .then(async () => {
                            e.taskPlayAnim(
                              r[o].animDictionary,
                              r[o].animationName,
                              2,
                              e.handle === a.g.localplayer.handle ? 8 : 0,
                              -1,
                              r[o].flag,
                              0,
                              !1,
                              !1,
                              !1
                            ),
                              mp.game.streaming.removeAnimDict(
                                r[o].animDictionary
                              ),
                              e.handle === a.g.localplayer.handle &&
                                ((a.g.ANTIANIM = !0),
                                r[o].attachmentName &&
                                  mp.attachments.addLocal(r[o].attachmentName));
                          }))
                      : (r[o].collision && e.setCollision(!0, !0),
                        r[o].freeze && e.freezePosition(!1),
                        e.isPlayingAnim(
                          r[o].animDictionary,
                          r[o].animationName,
                          3
                        ) &&
                          e.stopAnimTask(
                            r[o].animDictionary,
                            r[o].animationName,
                            3
                          ),
                        e.handle === a.g.localplayer.handle &&
                          ((a.g.ANTIANIM = !1),
                          mp.gui.emmit("window.UpdateButtonText('', '');"),
                          r[o].attachmentName &&
                            mp.attachments.removeLocal(r[o].attachmentName)));
                }
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "synchronization/animation",
                  "PlayAnimToKey",
                  e.toString()
                );
              }
            };
          },
          9339: (e, t, a) => {
            a(4796), a(7044), a(8732), a(336), a(1935);
          },
          336: (e, t, a) => {
            let o = -1;
            mp.events.add("render", () => {
              if (!a.g.loggedin) return;
              const e = a.g.localplayer.getParachuteState();
              o !== e &&
                ((o = e),
                o >= -1 &&
                  o <= 1 &&
                  mp.events.callRemote("server.parachute.state", o));
            }),
              mp.events.add("client.parachute.state", (e, t) => {
                (async (e, t) => {
                  e &&
                    mp.players.exists(e) &&
                    0 !== e.handle &&
                    e.handle !== a.g.localplayer.handle &&
                    (-1 === Number(t) && e.parachuteObject
                      ? (e.taskParachute(!1),
                        mp.objects.exists(e.parachuteObject) &&
                          (e.parachuteObject.destroy(),
                          delete e.parachuteObject))
                      : 0 === Number(t)
                      ? e.taskParachute(!0)
                      : 1 === Number(t) &&
                        (e.parachuteObject &&
                          mp.objects.exists(e.parachuteObject) &&
                          (e.parachuteObject.destroy(),
                          delete e.parachuteObject),
                        (e.parachuteObject = mp.objects.new(
                          mp.game.joaat("p_parachute1_mp_s"),
                          e.position,
                          {
                            rotation: new mp.Vector3(0, 0, 0),
                            dimension: e.dimension,
                          }
                        )),
                        await a.g.IsLoadEntity(e.parachuteObject),
                        e.parachuteObject.setCollision(!1, !1),
                        Natives.SET_ENTITY_LOD_DIST(
                          e.parachuteObject,
                          a.g.getLodDist(a.g.DistancePlayer)
                        ),
                        e.parachuteObject.attachTo(
                          e.handle,
                          57717,
                          0,
                          0,
                          3,
                          0,
                          0,
                          0,
                          !0,
                          !0,
                          !0,
                          !1,
                          0,
                          !0
                        )));
                })(e, t);
              }),
              mp.events.add("playerStreamOut", (e) => {
                try {
                  e &&
                    e.parachuteObject &&
                    mp.objects.exists(e.parachuteObject) &&
                    (e.parachuteObject.destroy(), delete e.parachuteObject);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "synchronization/weaponsComponents",
                    "playerStreamOut",
                    e.toString()
                  );
                }
              });
          },
          8127: (e, t, a) => {
            a.g.requestNamedPtfxAsset = (e) =>
              new Promise(async (t, o) => {
                try {
                  if (mp.game.streaming.hasNamedPtfxAssetLoaded(e))
                    return t(!0);
                  mp.game.streaming.requestNamedPtfxAsset(e);
                  let o = 0;
                  for (; !mp.game.streaming.hasNamedPtfxAssetLoaded(e); ) {
                    if (o > 500)
                      return t("Ошибка requestNamedPtfxAsset. asset: " + e);
                    o++, await a.g.wait(10);
                  }
                  return t(!0);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "synchronization/animation",
                    "requestNamedPtfxAsset",
                    e.toString()
                  ),
                    t();
                }
              });
            class o {
              constructor(e, t, a = {}) {
                try {
                  (this.fxLib = e),
                    (this.fxName = t),
                    (this.scale = a && null != a.scale ? a.scale : 1),
                    (this.rgb = a && null != a.r ? [a.r, a.g, a.b] : [0, 0, 0]),
                    (this.xOffset = a && null != a.xOffset ? a.xOffset : 0),
                    (this.yOffset = a && null != a.yOffset ? a.yOffset : 0),
                    (this.zOffset = a && null != a.zOffset ? a.zOffset : 0),
                    (this.xRot = a && null != a.xRot ? a.xRot : 0),
                    (this.yRot = a && null != a.yRot ? a.yRot : 0),
                    (this.zRot = a && null != a.zRot ? a.zRot : 0),
                    this.fxCall,
                    this.fxHandle,
                    this.load();
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "synchronization/particleFx",
                    "constructor",
                    e.toString()
                  );
                }
              }
              async load() {
                try {
                  return new Promise(
                    async (e, t) => (
                      await a.g.requestNamedPtfxAsset(this.fxLib), e()
                    )
                  );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "synchronization/particleFx",
                    "load",
                    e.toString()
                  );
                }
              }
              async timeoutRemove(e) {
                try {
                  await a.g.wait(e),
                    mp.game.graphics.doesParticleFxLoopedExist(this.fxHandle) &&
                      mp.game.graphics.stopParticleFxLooped(this.fxHandle, !0),
                    this.entity &&
                      Natives.REMOVE_PARTICLE_FX_FROM_ENTITY(this.entity),
                    mp.game.graphics.removeParticleFx(this.fxHandle, !0);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "synchronization/particleFx",
                    "timeoutRemove",
                    e.toString()
                  );
                }
              }
              remove(e, t) {
                try {
                  mp.game.graphics.doesParticleFxLoopedExist(t) &&
                    mp.game.graphics.stopParticleFxLooped(t, !0),
                    this.entity &&
                      Natives.REMOVE_PARTICLE_FX_FROM_ENTITY(this.entity),
                    mp.game.graphics.removeParticleFx(t, !0),
                    delete e.fxHandle;
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "synchronization/particleFx",
                    "remove",
                    e.toString()
                  );
                }
              }
              async playOnCoords(e, t, a, o = 1e3) {
                try {
                  await this.load(),
                    (this.fxCall = mp.game.graphics.setPtfxAssetNextCall(
                      this.fxLib
                    )),
                    mp.game.graphics.setParticleFxNonLoopedColour(
                      this.rgb[0],
                      this.rgb[1],
                      this.rgb[2]
                    ),
                    (this.fxHandle =
                      mp.game.graphics.startParticleFxLoopedAtCoord(
                        this.fxName,
                        e,
                        t,
                        a,
                        0,
                        0,
                        0,
                        this.scale,
                        !1,
                        !1,
                        !1,
                        !1
                      )),
                    -1 != o && this.timeoutRemove(o);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "synchronization/particleFx",
                    "playOnCoords",
                    e.toString()
                  );
                }
              }
              async playOnCoordsOnce(e, t, a, o = 1e3) {
                try {
                  await this.load(),
                    (this.fxCall = mp.game.graphics.setPtfxAssetNextCall(
                      this.fxLib
                    )),
                    mp.game.graphics.setParticleFxNonLoopedColour(
                      this.rgb[0],
                      this.rgb[1],
                      this.rgb[2]
                    ),
                    (this.fxHandle =
                      mp.game.graphics.startParticleFxNonLoopedAtCoord(
                        this.fxName,
                        e,
                        t,
                        a,
                        0,
                        0,
                        0,
                        this.scale,
                        !1,
                        !1,
                        !1,
                        !1
                      )),
                    -1 != o && this.timeoutRemove(o);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "synchronization/particleFx",
                    "playOnCoordsOnce",
                    e.toString()
                  );
                }
              }
              async playOnEntity(e, t = 1e3) {
                try {
                  await this.load(),
                    (this.entity = e),
                    e.fxHandle && this.remove(e, e.fxHandle),
                    (this.fxCall = mp.game.graphics.setPtfxAssetNextCall(
                      this.fxLib
                    )),
                    mp.game.graphics.setParticleFxNonLoopedColour(
                      this.rgb[0],
                      this.rgb[1],
                      this.rgb[2]
                    ),
                    (this.fxHandle =
                      mp.game.graphics.startParticleFxLoopedOnEntity(
                        this.fxName,
                        e.handle,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        this.scale,
                        !1,
                        !1,
                        !1
                      )),
                    (e.fxHandle = this.fxHandle),
                    this.timeoutRemove(t);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "synchronization/particleFx",
                    "playOnEntity",
                    e.toString()
                  );
                }
              }
              async playOnEntityOnce(e) {
                try {
                  await this.load(),
                    (this.entity = e),
                    e.fxHandle && this.remove(e, e.fxHandle),
                    (this.fxCall = mp.game.graphics.setPtfxAssetNextCall(
                      this.fxLib
                    )),
                    mp.game.graphics.setParticleFxNonLoopedColour(
                      this.rgb[0],
                      this.rgb[1],
                      this.rgb[2]
                    ),
                    (this.fxHandle =
                      mp.game.graphics.startParticleFxNonLoopedOnEntity(
                        this.fxName,
                        e.handle,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        this.scale,
                        !1,
                        !1,
                        !1
                      )),
                    (e.fxHandle = this.fxHandle),
                    this.timeoutRemove(1e3);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "synchronization/particleFx",
                    "playOnEntityOnce",
                    e.toString()
                  );
                }
              }
              async playOnEntityBone(e, t, a = 1e3) {
                try {
                  await this.load(),
                    (this.entity = e),
                    e.fxHandle && this.remove(e, e.fxHandle),
                    (this.fxCall = mp.game.graphics.setPtfxAssetNextCall(
                      this.fxLib
                    )),
                    mp.game.graphics.setParticleFxNonLoopedColour(
                      this.rgb[0],
                      this.rgb[1],
                      this.rgb[2]
                    ),
                    (this.fxHandle =
                      mp.game.graphics.startParticleFxLoopedOnEntityBone(
                        this.fxName,
                        e.handle,
                        this.xOffset,
                        this.yOffset,
                        this.zOffset,
                        this.xRot,
                        this.yRot,
                        this.zRot,
                        "string" == typeof t
                          ? e.getBoneIndexByName(t)
                          : e.getBoneIndex(t),
                        this.scale,
                        !1,
                        !1,
                        !1
                      )),
                    (e.fxHandle = this.fxHandle),
                    this.timeoutRemove(a);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "synchronization/particleFx",
                    "playOnEntityBone",
                    e.toString()
                  );
                }
              }
            }
            (a.g.playFXonPos = async (e, t, a, i, n, s = 1e3, r = {}) => {
              try {
                new o(i, n, r).playOnCoords(e, t, a, s);
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "synchronization/particleFx",
                  "playFXonPos",
                  e.toString()
                );
              }
            }),
              mp.events.add(
                "client.playFXonPos",
                (e, t, o, i, n, s = 1e3, r = {}) => {
                  a.g.playFXonPos(e, t, o, i, n, s, r);
                }
              ),
              (a.g.playFXonPosOnce = async (e, t, a, i, n, s = 1e3, r = {}) => {
                try {
                  new o(i, n, r).playOnCoordsOnce(e, t, a, s);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "synchronization/particleFx",
                    "playFXonPosOnce",
                    e.toString()
                  );
                }
              }),
              mp.events.add(
                "client.playFXonPosOnce",
                (e, t, o, i, n, s = 1e3, r = {}) => {
                  a.g.playFXonPosOnce(e, t, o, i, n, s, r);
                }
              ),
              (a.g.playFXonEntity = async (e, t, a, i = 1e3, n = {}) => {
                try {
                  if (!e) return;
                  new o(t, a, n).playOnEntity(e, i);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "synchronization/particleFx",
                    "playFXonEntity",
                    e.toString()
                  );
                }
              }),
              mp.events.add(
                "client.playFXonEntity",
                (e, t, o, i = 1e3, n = {}) => {
                  (mp.players.exists(e) ||
                    mp.vehicles.exists(e) ||
                    mp.objects.exists(e)) &&
                    a.g.playFXonEntity(e, t, o, i, n);
                }
              ),
              (a.g.playFXonEntityOnce = async (e, t, a, i = {}) => {
                try {
                  if (!e) return;
                  new o(t, a, i).playOnEntityOnce(e);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "synchronization/particleFx",
                    "playFXonEntityOnce",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.playFXonEntityOnce", (e, t, o, i = {}) => {
                (mp.players.exists(e) ||
                  mp.vehicles.exists(e) ||
                  mp.objects.exists(e)) &&
                  a.g.playFXonEntityOnce(e, t, o, i);
              }),
              (a.g.playFXonEntityBone = async (e, t, a, i, n = 1e3, s = {}) => {
                try {
                  if (!e) return;
                  new o(a, i, s).playOnEntityBone(e, t, n);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "synchronization/particleFx",
                    "playFXonEntityBone",
                    e.toString()
                  );
                }
              }),
              mp.events.add(
                "client.playFXonEntityBone",
                (e, t, o, i, n = 1e3, s = {}) => {
                  (mp.players.exists(e) ||
                    mp.vehicles.exists(e) ||
                    mp.objects.exists(e)) &&
                    a.g.playFXonEntityBone(e, t, o, i, n, s);
                }
              );
          },
          3469: (e, t, a) => {
            (a.g.isSeat = !1),
              (a.g.sitData = new (class {
                constructor() {
                  (this.disableControls = [
                    266, 267, 268, 269, 30, 31, 32, 33, 34, 35, 75, 22, 258, 21,
                    44,
                  ]),
                    (this.objectsActions = {
                      text: "Сесть",
                      anim: { dict: "switch@michael@sitting", name: "idle" },
                    }),
                    (this.defaultData = {
                      None: 0,
                      yMinus: 1,
                      yPlus: 2,
                      xMinus: 4,
                      xPlus: 8,
                    }),
                    (this.objectsInfo = {
                      [mp.game.joaat("xm_prop_x17_Corp_OffChair")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("apa_mp_h_din_chair_04")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("apa_mp_h_din_chair_08")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("apa_mp_h_din_chair_09")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("apa_mp_h_din_chair_12")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("apa_mp_h_din_stool_04")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("apa_mp_h_stn_chairarm_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("apa_mp_h_stn_chairarm_02")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("apa_mp_h_stn_chairarm_03")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("apa_mp_h_stn_chairarm_09")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("apa_mp_h_stn_chairarm_11")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("apa_mp_h_stn_chairarm_12")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("apa_mp_h_stn_chairarm_13")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("apa_mp_h_stn_chairarm_23")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("apa_mp_h_stn_chairarm_24")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("apa_mp_h_stn_chairarm_25")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("apa_mp_h_stn_chairarm_26")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("apa_mp_h_stn_chairstrip_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("apa_mp_h_stn_chairstrip_02")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("apa_mp_h_stn_chairstrip_03")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("apa_mp_h_stn_chairstrip_04")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("apa_mp_h_stn_chairstrip_05")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("apa_mp_h_stn_chairstrip_06")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("apa_mp_h_stn_chairstrip_07")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("apa_mp_h_stn_chairstrip_08")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("apa_mp_h_yacht_armchair_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("apa_mp_h_yacht_armchair_03")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("apa_mp_h_yacht_armchair_04")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("apa_mp_h_yacht_barstool_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("apa_mp_h_yacht_strip_chair_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("bkr_prop_biker_barstool_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("bkr_prop_biker_barstool_02")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("bkr_prop_biker_barstool_03")]: {},
                      [mp.game.joaat("bkr_prop_biker_barstool_04")]: {
                        typeFlags:
                          this.defaultData.yMinus |
                          this.defaultData.yPlus |
                          this.defaultData.xMinus |
                          this.defaultData.xPlus,
                      },
                      [mp.game.joaat("bkr_prop_biker_boardchair01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("bkr_prop_biker_chairstrip_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("bkr_prop_biker_chairstrip_02")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("bkr_prop_clubhouse_armchair_01a")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("bkr_prop_clubhouse_chair_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("bkr_prop_clubhouse_chair_03")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("bkr_prop_clubhouse_offchair_01a")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("bkr_prop_clubhouse_sofa_01a")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("bkr_prop_weed_chair_01a")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("ex_mp_h_din_stool_04")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("ex_mp_h_off_chairstrip_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("ex_mp_h_off_easychair_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("ex_mp_h_stn_chairarm_03")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("ex_mp_h_stn_chairarm_24")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("ex_mp_h_stn_chairstrip_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("ex_mp_h_stn_chairstrip_010")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("ex_mp_h_stn_chairstrip_011")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("ex_mp_h_stn_chairstrip_05")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("ex_mp_h_stn_chairstrip_07")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("ex_prop_offchair_exec_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("ex_prop_offchair_exec_02")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("ex_prop_offchair_exec_03")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("ex_prop_offchair_exec_04")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("hei_heist_din_chair_02")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("hei_heist_din_chair_03")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("hei_heist_din_chair_04")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("hei_heist_din_chair_05")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("hei_heist_din_chair_06")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("hei_heist_din_chair_08")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("hei_heist_din_chair_09")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("hei_heist_stn_benchshort")]: {
                        typeFlags:
                          this.defaultData.yMinus | this.defaultData.yPlus,
                        zOffset: 0.25,
                      },
                      [mp.game.joaat("hei_heist_stn_chairarm_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("hei_heist_stn_chairarm_03")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("hei_heist_stn_chairarm_04")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("hei_heist_stn_chairarm_06")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("hei_heist_stn_chairstrip_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("hei_prop_yah_lounger")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("hei_prop_yah_seat_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("hei_prop_yah_seat_02")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("hei_prop_yah_seat_03")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("lr_prop_clubstool_01")]: {
                        typeFlags:
                          this.defaultData.yMinus |
                          this.defaultData.yPlus |
                          this.defaultData.xMinus |
                          this.defaultData.xPlus,
                      },
                      [mp.game.joaat("p_dinechair_01_s")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("p_patio_lounger1_s")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("p_v_med_p_sofa_s")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("p_yacht_chair_01_s")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("p_yacht_sofa_01_s")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_air_bench_01")]: {
                        typeFlags: this.defaultData.yPlus,
                      },
                      [mp.game.joaat("prop_air_bench_02")]: {
                        typeFlags:
                          this.defaultData.yMinus | this.defaultData.yPlus,
                      },
                      [mp.game.joaat("prop_armchair_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_bar_stool_01")]: {
                        typeFlags:
                          this.defaultData.yMinus |
                          this.defaultData.yPlus |
                          this.defaultData.xMinus |
                          this.defaultData.xPlus,
                      },
                      [mp.game.joaat("prop_couch_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_couch_03")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_couch_04")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_couch_lg_02")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_couch_lg_05")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_couch_lg_06")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_couch_lg_08")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_couch_sm2_07")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_couch_sm_02")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_couch_sm_05")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_couch_sm_06")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_couch_sm_07")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_cs_office_chair")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_direct_chair_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_direct_chair_02")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_fib_3b_bench")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_gc_chair02")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_hwbowl_pseat_6x1")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_ld_farm_chair01")]: {
                        typeFlags: this.defaultData.yPlus,
                      },
                      [mp.game.joaat("v_ilev_ph_bench")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("v_res_fh_benchlong")]: {
                        typeFlags:
                          this.defaultData.yMinus | this.defaultData.yPlus,
                      },
                      [mp.game.joaat("v_ret_chair")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("v_ret_chair_white")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("v_ret_fh_chair01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("v_ret_gc_chair01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("v_ret_gc_chair02")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("v_ret_gc_chair03")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("v_ret_ps_chair")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("xm_lab_chairarm_02")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("xm_lab_chairarm_03")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("xm_lab_chairarm_11")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("xm_lab_chairarm_12")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("xm_lab_chairarm_24")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("xm_lab_chairarm_25")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("xm_lab_chairarm_26")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_bench_01a")]: {
                        typeFlags: this.defaultData.yMinus,
                        zOffset: 0.25,
                      },
                      [mp.game.joaat("prop_bench_01b")]: {
                        typeFlags: this.defaultData.yMinus,
                        zOffset: 0.25,
                      },
                      [mp.game.joaat("prop_bench_01c")]: {
                        typeFlags: this.defaultData.yMinus,
                        zOffset: 0.25,
                      },
                      [mp.game.joaat("prop_bench_02")]: {
                        typeFlags: this.defaultData.yMinus,
                        zOffset: 0.25,
                      },
                      [mp.game.joaat("prop_bench_03")]: {
                        typeFlags: this.defaultData.yMinus,
                        zOffset: 0.25,
                      },
                      [mp.game.joaat("prop_bench_04")]: {
                        typeFlags: this.defaultData.yMinus,
                        zOffset: 0.25,
                      },
                      [mp.game.joaat("prop_bench_05")]: {
                        typeFlags: this.defaultData.yMinus,
                        zOffset: 0.25,
                      },
                      [mp.game.joaat("prop_bench_06")]: {
                        typeFlags: this.defaultData.yMinus,
                        zOffset: 0.25,
                      },
                      [mp.game.joaat("prop_bench_07")]: {
                        typeFlags: this.defaultData.yMinus,
                        zOffset: 0.25,
                      },
                      [mp.game.joaat("prop_bench_08")]: {
                        typeFlags: this.defaultData.yMinus,
                        zOffset: 0.25,
                      },
                      [mp.game.joaat("prop_bench_09")]: {
                        typeFlags: this.defaultData.yMinus,
                        zOffset: 0.25,
                      },
                      [mp.game.joaat("prop_bench_10")]: {
                        typeFlags: this.defaultData.yMinus,
                        zOffset: 0.25,
                      },
                      [mp.game.joaat("prop_bench_11")]: {
                        typeFlags: this.defaultData.yMinus,
                        zOffset: 0.25,
                      },
                      [mp.game.joaat("prop_wait_bench_01")]: {
                        typeFlags:
                          this.defaultData.yMinus | this.defaultData.yPlus,
                      },
                      [mp.game.joaat("hei_prop_heist_off_chair")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("hei_prop_hei_skid_chair")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_chair_01a")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_chair_01b")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_chair_02")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_chair_03")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_chair_04a")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_chair_04b")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_chair_05")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_chair_06")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_chair_07")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_chair_08")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_chair_09")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_chair_10")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_chateau_chair_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_clown_chair")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_off_chair_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_off_chair_03")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_off_chair_04")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_off_chair_04b")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_off_chair_04_s")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_off_chair_05")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_old_deck_chair")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_old_wood_chair")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_rock_chair_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_skid_chair_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_skid_chair_02")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_skid_chair_03")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_sol_chair")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_wheelchair_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_wheelchair_01_s")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("p_armchair_01_s")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("p_clb_officechair_s")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("p_ilev_p_easychair_s")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("v_club_officechair")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("v_corp_bk_chair3")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("v_corp_cd_chair")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("v_corp_offchair")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("v_ilev_chair02_ped")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("v_ilev_hd_chair")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("v_ilev_p_easychair")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_table_04_chr")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_table_05_chr")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_table_06_chr")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("v_ilev_leath_chr")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_table_01_chr_a")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_table_01_chr_b")]: {
                        typeFlags: this.defaultData.xPlus,
                      },
                      [mp.game.joaat("prop_table_02_chr")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_table_03b_chr")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_table_03_chr")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_torture_ch_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("v_ilev_fh_dineeamesa")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("v_ilev_fh_kitchenstool")]: {
                        typeFlags:
                          this.defaultData.yMinus |
                          this.defaultData.yPlus |
                          this.defaultData.xMinus |
                          this.defaultData.xPlus,
                      },
                      [mp.game.joaat("v_ilev_tort_stool")]: {
                        typeFlags:
                          this.defaultData.yMinus |
                          this.defaultData.yPlus |
                          this.defaultData.xMinus |
                          this.defaultData.xPlus,
                      },
                      [mp.game.joaat("prop_waiting_seat_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_yacht_seat_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_yacht_seat_02")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_yacht_seat_03")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_hobo_seat_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_rub_couch01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("miss_rub_couch_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_ld_farm_couch01")]: {
                        typeFlags: this.defaultData.xPlus,
                      },
                      [mp.game.joaat("prop_ld_farm_couch02")]: {
                        typeFlags: this.defaultData.xPlus,
                      },
                      [mp.game.joaat("prop_rub_couch02")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_rub_couch03")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_rub_couch04")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("p_res_sofa_l_s")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("v_ilev_m_sofa")]: {},
                      [mp.game.joaat("v_tre_sofa_mess_a_s")]: {},
                      [mp.game.joaat("v_tre_sofa_mess_b_s")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_muscle_bench_03")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_pris_bench_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_weight_bench_02")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_patio_lounger1")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_patio_lounger_2")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_patio_lounger_3")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_chair_pile_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("v_med_bed2")]: {
                        typeFlags:
                          this.defaultData.xMinus | this.defaultData.xPlus,
                      },
                      [mp.game.joaat("v_med_bed1")]: {
                        typeFlags:
                          this.defaultData.xMinus | this.defaultData.xPlus,
                      },
                      [mp.game.joaat("v_med_emptybed")]: {
                        typeFlags:
                          this.defaultData.xMinus | this.defaultData.xPlus,
                      },
                      [mp.game.joaat("v_med_cor_medstool")]: {
                        typeFlags:
                          this.defaultData.yMinus |
                          this.defaultData.yPlus |
                          this.defaultData.xMinus |
                          this.defaultData.xPlus,
                        zOffset: 0.5,
                      },
                      [mp.game.joaat("v_ind_meatbench")]: {
                        typeFlags:
                          this.defaultData.yMinus | this.defaultData.yPlus,
                      },
                      [mp.game.joaat("v_corp_lngestool")]: {
                        typeFlags:
                          this.defaultData.yMinus |
                          this.defaultData.yPlus |
                          this.defaultData.xMinus |
                          this.defaultData.xPlus,
                      },
                      [mp.game.joaat("v_corp_lngestoolfd")]: {
                        typeFlags:
                          this.defaultData.yMinus |
                          this.defaultData.yPlus |
                          this.defaultData.xMinus |
                          this.defaultData.xPlus,
                      },
                      [mp.game.joaat("prop_bench_07")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("v_corp_lazychair")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_ven_market_stool")]: {
                        typeFlags:
                          this.defaultData.yMinus | this.defaultData.yPlus,
                      },
                      [mp.game.joaat("ba_prop_int_edgy_stool")]: {
                        typeFlags:
                          this.defaultData.yMinus |
                          this.defaultData.yPlus |
                          this.defaultData.xMinus |
                          this.defaultData.xPlus,
                      },
                      [mp.game.joaat("apa_mp_h_yacht_stool_01")]: {
                        typeFlags:
                          this.defaultData.yMinus |
                          this.defaultData.yPlus |
                          this.defaultData.xMinus |
                          this.defaultData.xPlus,
                      },
                      [mp.game.joaat("v_ilev_m_dinechair")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_chair_07")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("gr_prop_gr_chair02_ped")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("xm_prop_x17_avengerchair_02")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("xm_lab_easychair_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("xm_int_lev_sub_chair_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("vw_prop_vw_offchair_03")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("sm_prop_smug_offchair_01a")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("sm_prop_offchair_smug_02")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("sm_prop_offchair_smug_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("prop_yaught_chair_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("imp_prop_impexp_offchair_01a")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("ch_prop_casino_track_chair_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("ba_prop_battle_club_chair_03")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("ba_prop_battle_club_chair_02")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                      [mp.game.joaat("ba_prop_battle_club_chair_01")]: {
                        typeFlags: this.defaultData.yMinus,
                      },
                    }),
                    (this.currentObjectHandler = null),
                    (this.raycastingModel = null),
                    (this.currentModel = null),
                    mp.events.add("client.seat", () =>
                      this.isCanSitDown()
                        ? this.sitDown()
                        : this.isCanStandUp()
                        ? this.standUp()
                        : void 0
                    ),
                    mp.events.add("client.seat.yes", (e, t, o, i) => {
                      mp.players.local.setPosition(new mp.Vector3(e, t, o)),
                        mp.players.local.setHeading(i),
                        mp.events.call("hud.oEnter", "SeatingUp"),
                        (a.g.isSeat = !0),
                        (a.g.freeze = !0),
                        (this.sitting = !0),
                        mp.discord.update(
                          "Сидит",
                          `на RedAge под ID ${a.g.localplayer.remoteId}`
                        );
                    });
                }
                sitDown() {
                  try {
                    if (!this.isCanSitDown()) return !1;
                    if (a.g.ANTIANIM) return;
                    this.raycastingModel = this.currentModel;
                    const e = this.getNearSitInfo(this.currentObjectHandler);
                    if (!e) return !1;
                    const t = Natives.GET_ENTITY_ROTATION(
                      this.currentObjectHandler,
                      2
                    );
                    return (
                      (e.position.z = mp.players.local.position.z),
                      mp.events.callRemote(
                        "server.landing.sit",
                        e.position.x,
                        e.position.y,
                        e.position.z,
                        t.z + e.angleOffset
                      ),
                      !0
                    );
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "synchronization/sit",
                      "render",
                      e.toString()
                    );
                  }
                  return !1;
                }
                standUp() {
                  try {
                    this.isCanStandUp() &&
                      ((this.sitting = !1),
                      (a.g.freeze = !1),
                      mp.events.callRemote("server.landing.end"),
                      this.currentObject &&
                        mp.events.call("hud.oEnter", "Seating"));
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "synchronization/sit",
                      "standUp",
                      e.toString()
                    );
                  }
                  return !0;
                }
                isNearSitPosition(e) {
                  try {
                    if (null === e) return !1;
                    const t = this.getNearSitInfo(e);
                    return (
                      !!t &&
                      utils.getDistance(mp.players.local.position, t.position) <
                        1
                    );
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "synchronization/sit",
                      "isNearSitPosition",
                      e.toString()
                    );
                  }
                  return !1;
                }
                getNearSitInfo(e) {
                  try {
                    let t;
                    if (null === e) return null;
                    const o = Natives.GET_ENTITY_ROTATION(e, 2);
                    if (o.x > 30 || o.x < -30 || o.y > 30 || o.y < -30)
                      return null;
                    const i = this.raycastingModel,
                      n =
                        null !== this.currentObject &&
                        void 0 !== this.currentObject
                          ? this.currentObject
                          : this.objectsInfo[i];
                    if (!n) return null;
                    const { x: s, y: r, z: l } = mp.players.local.position,
                      m = Natives.GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS(
                        e,
                        s,
                        r,
                        l
                      ),
                      c = mp.game.gameplay.getModelDimensions(i),
                      p = Math.abs(c.min.x) + Math.abs(c.max.x),
                      g = Math.abs(c.min.y) + Math.abs(c.max.y),
                      _ = Math.min(0.4, p / 2),
                      d = Math.min(0.4, g / 2);
                    (m.x = a.g.clamp(m.x, c.min.x + _, c.max.x - _)),
                      (m.y = a.g.clamp(m.y, c.min.y + d, c.max.y - d));
                    const h =
                        null !== (t = null == n ? void 0 : n.zOffset) &&
                        void 0 !== t
                          ? t
                          : 0,
                      u = this.getInteractionObjectTypeOffsets(n, m, c),
                      y = this.getNearestPositionAndOffset(e, h, u);
                    if (!y) return null;
                    let v = 0;
                    return (
                      y.offset.x !== m.x &&
                        (y.offset.x <= 0
                          ? (v = 90)
                          : y.offset.x > 0 && (v -= 90)),
                      y.offset.y !== m.y && y.offset.y < 0 && (v = 180),
                      (y.angleOffset = v),
                      y
                    );
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "synchronization/sit",
                      "getNearSitInfo",
                      e.toString()
                    );
                  }
                  return null;
                }
                getNearestPositionAndOffset(e, t, a) {
                  try {
                    let o = null,
                      i = null,
                      n = Number.MAX_SAFE_INTEGER;
                    return (
                      a.forEach((a) => {
                        const s =
                            Natives.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(
                              e,
                              a.x,
                              a.y,
                              a.z
                            ),
                          r = new mp.Vector3(s.x, s.y, s.z + t),
                          l = utils.getDistance(r, mp.players.local.position);
                        l < n && ((n = l), (o = r), (i = a));
                      }),
                      o ? { position: o, offset: i } : null
                    );
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "synchronization/sit",
                      "getNearestPositionAndOffset",
                      e.toString()
                    );
                  }
                  return null;
                }
                getInteractionObjectTypeOffsets(e, t, a) {
                  try {
                    if (!e) return [];
                    const o = Math.abs(a.min.z) + Math.abs(a.max.z),
                      i = [];
                    return (
                      e.typeFlags & this.defaultData.yMinus &&
                        i.push(new mp.Vector3(t.x, -0.2 + a.min.y, o / 2)),
                      e.typeFlags & this.defaultData.yPlus &&
                        i.push(new mp.Vector3(t.x, 0.2 + a.max.y, o / 2)),
                      e.typeFlags & this.defaultData.xMinus &&
                        i.push(new mp.Vector3(-0.2 + a.min.x, t.y, o / 2)),
                      e.typeFlags & this.defaultData.xPlus &&
                        i.push(new mp.Vector3(0.2 + a.max.x, t.y, o / 2)),
                      i
                    );
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "synchronization/sit",
                      "getInteractionObjectTypeOffsets",
                      e.toString()
                    );
                  }
                  return [];
                }
                isCanSitDown(e = !1) {
                  return !(
                    this.isCanStandUp() ||
                    (!e && !this.currentObject) ||
                    mp.players.local.vehicle ||
                    mp.players.local.isFaint ||
                    mp.players.local.isJailed
                  );
                }
                isCanStandUp() {
                  return this.sitting;
                }
                start() {
                  try {
                    if (!a.g.loggedin) return;
                    if (this.isCanStandUp()) return;
                    if (!this.isCanSitDown(!0)) return;
                    const { x: e, y: t, z: o } = mp.players.local.position,
                      i = new mp.Vector3(e, t, o - 0.4),
                      n = mp.players.local.getHeading(),
                      s = a.g.utils.getFrontVector(i, n, 0.3),
                      r = a.g.utils.getFrontVector(i, n, 1),
                      l = mp.raycasting.testCapsule(
                        s,
                        r,
                        0.5,
                        mp.players.local,
                        17
                      );
                    let m,
                      c = null,
                      p = null;
                    if (l) {
                      let e = !1;
                      if (
                        ("object" == typeof l.entity
                          ? ((p = l.entity.handle), (m = l.entity.model))
                          : "number" == typeof l.entity &&
                            0 !== l.entity &&
                            ((p = l.entity),
                            (m = a.g.utils.fixHash(
                              Natives.GET_ENTITY_MODEL(l.entity)
                            )),
                            (e = !0)),
                        (c = this.objectsInfo[m]),
                        c &&
                          ((this.raycastingModel = m),
                          this.isNearSitPosition(p)))
                      )
                        return (
                          (this.currentModel = this.raycastingModel),
                          (this.currentObject = c),
                          (this.currentObjectHandler = p),
                          mp.events.call("hud.oEnter", "Seating"),
                          void (a.g.isSeat = !0)
                        );
                      e &&
                        mp.game.shapetest.releaseScriptGuidFromEntity(l.entity);
                    }
                    this.currentObject &&
                      ((this.currentObject = null),
                      (this.currentObjectHandler = null),
                      mp.events.call("hud.cEnter"),
                      (a.g.isSeat = !1));
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "synchronization/sit",
                      "start",
                      e.toString()
                    );
                  }
                }
              })()),
              mp.events.add(a.g.renderName["500ms"], () => {
                a.g.sitData.start();
              }),
              (a.g.utils = new (class {
                fixHash(e) {
                  return this.toInt64(e);
                }
                toInt32(e) {
                  return e >= 2147483647 ? e - 4294967295 - 1 : e;
                }
                toInt64(e) {
                  return e < 0 ? e + 4294967295 + 1 : e;
                }
                isFloatEqual(e, t, a = 1e-5) {
                  return Math.abs(e - t) < a;
                }
                getCoordsInFront(e, t, a, o) {
                  const i = this.degreesToRadians(a);
                  return { x: e - o * Math.sin(i), y: t + o * Math.cos(i) };
                }
                getFrontVector(e, t, a) {
                  const { x: o, y: i } = this.getCoordsInFront(e.x, e.y, t, a);
                  return new mp.Vector3(o, i, e.z);
                }
                radiansToDegrees(e) {
                  return e * (180 / Math.PI);
                }
                degreesToRadians(e) {
                  return e * (Math.PI / 180);
                }
                getDistance(e, t) {
                  return Math.hypot(e.x - t.x, e.y - t.y, e.z - t.z);
                }
              })());
            let o = [
                mp.game.joaat("ex_office_swag_counterfeit2"),
                mp.game.joaat("xm_prop_x17_Corp_OffChair"),
                mp.game.joaat("apa_mp_h_din_chair_04"),
                mp.game.joaat("apa_mp_h_din_chair_08"),
                mp.game.joaat("apa_mp_h_din_chair_09"),
                mp.game.joaat("apa_mp_h_din_chair_12"),
                mp.game.joaat("apa_mp_h_din_stool_04"),
                mp.game.joaat("apa_mp_h_stn_chairarm_01"),
                mp.game.joaat("apa_mp_h_stn_chairarm_02"),
                mp.game.joaat("apa_mp_h_stn_chairarm_03"),
                mp.game.joaat("apa_mp_h_stn_chairarm_09"),
                mp.game.joaat("apa_mp_h_stn_chairarm_11"),
                mp.game.joaat("apa_mp_h_stn_chairarm_12"),
                mp.game.joaat("apa_mp_h_stn_chairarm_13"),
                mp.game.joaat("apa_mp_h_stn_chairarm_23"),
                mp.game.joaat("apa_mp_h_stn_chairarm_24"),
                mp.game.joaat("apa_mp_h_stn_chairarm_25"),
                mp.game.joaat("apa_mp_h_stn_chairarm_26"),
                mp.game.joaat("apa_mp_h_stn_chairstrip_01"),
                mp.game.joaat("apa_mp_h_stn_chairstrip_02"),
                mp.game.joaat("apa_mp_h_stn_chairstrip_03"),
                mp.game.joaat("apa_mp_h_stn_chairstrip_04"),
                mp.game.joaat("apa_mp_h_stn_chairstrip_05"),
                mp.game.joaat("apa_mp_h_stn_chairstrip_06"),
                mp.game.joaat("apa_mp_h_stn_chairstrip_07"),
                mp.game.joaat("apa_mp_h_stn_chairstrip_08"),
                mp.game.joaat("apa_mp_h_yacht_armchair_01"),
                mp.game.joaat("apa_mp_h_yacht_armchair_03"),
                mp.game.joaat("apa_mp_h_yacht_armchair_04"),
                mp.game.joaat("apa_mp_h_yacht_barstool_01"),
                mp.game.joaat("apa_mp_h_yacht_strip_chair_01"),
                mp.game.joaat("bkr_prop_biker_barstool_01"),
                mp.game.joaat("bkr_prop_biker_barstool_02"),
                mp.game.joaat("bkr_prop_biker_barstool_03"),
                mp.game.joaat("bkr_prop_biker_barstool_04"),
                mp.game.joaat("bkr_prop_biker_boardchair01"),
                mp.game.joaat("bkr_prop_biker_chair_01"),
                mp.game.joaat("bkr_prop_biker_chairstrip_01"),
                mp.game.joaat("bkr_prop_biker_chairstrip_02"),
                mp.game.joaat("bkr_prop_clubhouse_armchair_01a"),
                mp.game.joaat("bkr_prop_clubhouse_blackboard_01a"),
                mp.game.joaat("bkr_prop_clubhouse_chair_01"),
                mp.game.joaat("bkr_prop_clubhouse_chair_03"),
                mp.game.joaat("bkr_prop_clubhouse_offchair_01a"),
                mp.game.joaat("bkr_prop_clubhouse_sofa_01a"),
                mp.game.joaat("bkr_prop_weed_chair_01a"),
                mp.game.joaat("ex_mp_h_din_chair_04"),
                mp.game.joaat("ex_mp_h_din_chair_08"),
                mp.game.joaat("ex_mp_h_din_chair_09"),
                mp.game.joaat("ex_mp_h_din_chair_12"),
                mp.game.joaat("ex_mp_h_din_stool_04"),
                mp.game.joaat("ex_mp_h_off_chairstrip_01"),
                mp.game.joaat("ex_mp_h_off_easychair_01"),
                mp.game.joaat("ex_mp_h_stn_chairarm_03"),
                mp.game.joaat("ex_mp_h_stn_chairarm_24"),
                mp.game.joaat("ex_mp_h_stn_chairstrip_01"),
                mp.game.joaat("ex_mp_h_stn_chairstrip_010"),
                mp.game.joaat("ex_mp_h_stn_chairstrip_010"),
                mp.game.joaat("ex_mp_h_stn_chairstrip_011"),
                mp.game.joaat("ex_mp_h_stn_chairstrip_05"),
                mp.game.joaat("ex_mp_h_stn_chairstrip_07"),
                mp.game.joaat("ex_prop_offchair_exec_01"),
                mp.game.joaat("ex_prop_offchair_exec_02"),
                mp.game.joaat("ex_prop_offchair_exec_03"),
                mp.game.joaat("ex_prop_offchair_exec_04"),
                mp.game.joaat("hei_heist_din_chair_01"),
                mp.game.joaat("hei_heist_din_chair_02"),
                mp.game.joaat("hei_heist_din_chair_03"),
                mp.game.joaat("hei_heist_din_chair_04"),
                mp.game.joaat("hei_heist_din_chair_05"),
                mp.game.joaat("hei_heist_din_chair_06"),
                mp.game.joaat("hei_heist_din_chair_08"),
                mp.game.joaat("hei_heist_din_chair_09"),
                mp.game.joaat("hei_heist_stn_benchshort"),
                mp.game.joaat("hei_heist_stn_chairarm_01"),
                mp.game.joaat("hei_heist_stn_chairarm_03"),
                mp.game.joaat("hei_heist_stn_chairarm_04"),
                mp.game.joaat("hei_heist_stn_chairarm_06"),
                mp.game.joaat("hei_heist_stn_chairstrip_01"),
                mp.game.joaat("hei_heist_stn_chairstrip_01"),
                mp.game.joaat("hei_prop_yah_lounger"),
                mp.game.joaat("hei_prop_yah_seat_01"),
                mp.game.joaat("hei_prop_yah_seat_02"),
                mp.game.joaat("hei_prop_yah_seat_03"),
                mp.game.joaat("lr_prop_clubstool_01"),
                mp.game.joaat("p_dinechair_01_s"),
                mp.game.joaat("p_patio_lounger1_s"),
                mp.game.joaat("p_solooffchair_s"),
                mp.game.joaat("p_v_med_p_sofa_s"),
                mp.game.joaat("p_yacht_chair_01_s"),
                mp.game.joaat("p_yacht_sofa_01_s"),
                mp.game.joaat("prop_air_bench_01"),
                mp.game.joaat("prop_air_bench_02"),
                mp.game.joaat("prop_armchair_01"),
                mp.game.joaat("prop_bar_stool_01"),
                mp.game.joaat("prop_busstop_02"),
                mp.game.joaat("prop_busstop_04"),
                mp.game.joaat("prop_busstop_05"),
                mp.game.joaat("prop_couch_01"),
                mp.game.joaat("prop_couch_03"),
                mp.game.joaat("prop_couch_04"),
                mp.game.joaat("prop_couch_lg_02"),
                mp.game.joaat("prop_couch_lg_05"),
                mp.game.joaat("prop_couch_lg_06"),
                mp.game.joaat("prop_couch_lg_07"),
                mp.game.joaat("prop_couch_lg_08"),
                mp.game.joaat("prop_couch_sm2_07"),
                mp.game.joaat("prop_couch_sm_02"),
                mp.game.joaat("prop_couch_sm_05"),
                mp.game.joaat("prop_couch_sm_06"),
                mp.game.joaat("prop_couch_sm_07"),
                mp.game.joaat("prop_cs_office_chair"),
                mp.game.joaat("prop_direct_chair_01"),
                mp.game.joaat("prop_direct_chair_02"),
                mp.game.joaat("prop_fib_3b_bench"),
                mp.game.joaat("prop_gc_chair02"),
                mp.game.joaat("prop_hwbowl_pseat_6x1"),
                mp.game.joaat("prop_ld_farm_chair01"),
                mp.game.joaat("v_ilev_ph_bench"),
                mp.game.joaat("v_res_fh_benchlong"),
                mp.game.joaat("v_res_fh_benchshort"),
                mp.game.joaat("v_res_fh_dineemesa"),
                mp.game.joaat("v_res_fh_dineemesb"),
                mp.game.joaat("v_res_fh_dineemesc"),
                mp.game.joaat("v_res_fh_easychair"),
                mp.game.joaat("v_res_fh_singleseat"),
                mp.game.joaat("v_res_j_dinechair"),
                mp.game.joaat("v_res_j_stool"),
                mp.game.joaat("v_res_m_armchair"),
                mp.game.joaat("v_res_m_dinechair"),
                mp.game.joaat("v_res_m_h_sofa"),
                mp.game.joaat("v_res_m_h_sofa_sml"),
                mp.game.joaat("v_res_m_l_chair1"),
                mp.game.joaat("v_res_mbchair"),
                mp.game.joaat("v_res_mbottoman"),
                mp.game.joaat("v_res_mp_stripchair"),
                mp.game.joaat("v_res_study_chair"),
                mp.game.joaat("v_res_tre_chair"),
                mp.game.joaat("v_res_tre_officechair"),
                mp.game.joaat("v_res_tre_sofa"),
                mp.game.joaat("v_res_tre_sofa_mess_b"),
                mp.game.joaat("v_res_tre_sofa _s"),
                mp.game.joaat("v_res_tre_stool"),
                mp.game.joaat("v_res_tre_stool_leather"),
                mp.game.joaat("v_ret_chair"),
                mp.game.joaat("v_ret_chair_white"),
                mp.game.joaat("v_ret_fh_chair01"),
                mp.game.joaat("v_ret_gc_chair01"),
                mp.game.joaat("v_ret_gc_chair02"),
                mp.game.joaat("v_ret_gc_chair03"),
                mp.game.joaat("v_ret_ps_chair"),
                mp.game.joaat("xm_lab_chairarm_02"),
                mp.game.joaat("xm_lab_chairarm_03"),
                mp.game.joaat("xm_lab_chairarm_11"),
                mp.game.joaat("xm_lab_chairarm_12"),
                mp.game.joaat("xm_lab_chairarm_24"),
                mp.game.joaat("xm_lab_chairarm_25"),
                mp.game.joaat("xm_lab_chairarm_26"),
                mp.game.joaat("v_res_fh_barcchair"),
                mp.game.joaat("v_res_fh_dineeamesb"),
                mp.game.joaat("v_res_fh_dineeamesa"),
                mp.game.joaat("v_res_fh_easychair"),
                mp.game.joaat("prop_bench_01a"),
                mp.game.joaat("prop_bench_01b"),
                mp.game.joaat("prop_bench_01c"),
                mp.game.joaat("prop_bench_02"),
                mp.game.joaat("prop_bench_03"),
                mp.game.joaat("prop_bench_04"),
                mp.game.joaat("prop_bench_05"),
                mp.game.joaat("prop_bench_06"),
                mp.game.joaat("prop_bench_05"),
                mp.game.joaat("prop_bench_08"),
                mp.game.joaat("prop_bench_09"),
                mp.game.joaat("prop_bench_10"),
                mp.game.joaat("prop_bench_11"),
                mp.game.joaat("prop_fib_3b_bench"),
                mp.game.joaat("prop_ld_bench01"),
                mp.game.joaat("prop_wait_bench_01"),
                mp.game.joaat("hei_prop_heist_off_chair"),
                mp.game.joaat("hei_prop_hei_skid_chair"),
                mp.game.joaat("prop_chair_01a"),
                mp.game.joaat("prop_chair_01b"),
                mp.game.joaat("prop_chair_02"),
                mp.game.joaat("prop_chair_03"),
                mp.game.joaat("prop_chair_04a"),
                mp.game.joaat("prop_chair_04b"),
                mp.game.joaat("prop_chair_05"),
                mp.game.joaat("prop_chair_06"),
                mp.game.joaat("prop_chair_05"),
                mp.game.joaat("prop_chair_08"),
                mp.game.joaat("prop_chair_09"),
                mp.game.joaat("prop_chair_10"),
                mp.game.joaat("prop_chateau_chair_01"),
                mp.game.joaat("prop_clown_chair"),
                mp.game.joaat("prop_cs_office_chair"),
                mp.game.joaat("prop_direct_chair_01"),
                mp.game.joaat("prop_direct_chair_02"),
                mp.game.joaat("prop_gc_chair02"),
                mp.game.joaat("prop_off_chair_01"),
                mp.game.joaat("prop_off_chair_03"),
                mp.game.joaat("prop_off_chair_04"),
                mp.game.joaat("prop_off_chair_04b"),
                mp.game.joaat("prop_off_chair_04_s"),
                mp.game.joaat("prop_off_chair_05"),
                mp.game.joaat("prop_old_deck_chair"),
                mp.game.joaat("prop_old_wood_chair"),
                mp.game.joaat("prop_rock_chair_01"),
                mp.game.joaat("prop_skid_chair_01"),
                mp.game.joaat("prop_skid_chair_02"),
                mp.game.joaat("prop_skid_chair_03"),
                mp.game.joaat("prop_sol_chair"),
                mp.game.joaat("prop_wheelchair_01"),
                mp.game.joaat("prop_wheelchair_01_s"),
                mp.game.joaat("p_armchair_01_s"),
                mp.game.joaat("p_clb_officechair_s"),
                mp.game.joaat("p_dinechair_01_s"),
                mp.game.joaat("p_ilev_p_easychair_s"),
                mp.game.joaat("p_soloffchair_s"),
                mp.game.joaat("p_yacht_chair_01_s"),
                mp.game.joaat("v_club_officechair"),
                mp.game.joaat("v_corp_bk_chair3"),
                mp.game.joaat("v_corp_cd_chair"),
                mp.game.joaat("v_corp_offchair"),
                mp.game.joaat("v_ilev_chair02_ped"),
                mp.game.joaat("v_ilev_hd_chair"),
                mp.game.joaat("v_ilev_p_easychair"),
                mp.game.joaat("v_ret_gc_chair03"),
                mp.game.joaat("prop_ld_farm_chair01"),
                mp.game.joaat("prop_table_04_chr"),
                mp.game.joaat("prop_table_05_chr"),
                mp.game.joaat("prop_table_06_chr"),
                mp.game.joaat("v_ilev_leath_chr"),
                mp.game.joaat("prop_table_01_chr_a"),
                mp.game.joaat("prop_table_01_chr_b"),
                mp.game.joaat("prop_table_02_chr"),
                mp.game.joaat("prop_table_03b_chr"),
                mp.game.joaat("prop_table_03_chr"),
                mp.game.joaat("prop_torture_ch_01"),
                mp.game.joaat("v_ilev_fh_dineeamesa"),
                mp.game.joaat("v_ilev_fh_kitchenstool"),
                mp.game.joaat("v_ilev_tort_stool"),
                mp.game.joaat("v_ilev_fh_kitchenstool"),
                mp.game.joaat("v_ilev_fh_kitchenstool"),
                mp.game.joaat("v_ilev_fh_kitchenstool"),
                mp.game.joaat("v_ilev_fh_kitchenstool"),
                mp.game.joaat("hei_prop_yah_seat_01"),
                mp.game.joaat("hei_prop_yah_seat_02"),
                mp.game.joaat("hei_prop_yah_seat_03"),
                mp.game.joaat("prop_waiting_seat_01"),
                mp.game.joaat("prop_yacht_seat_01"),
                mp.game.joaat("prop_yacht_seat_02"),
                mp.game.joaat("prop_yacht_seat_03"),
                mp.game.joaat("prop_hobo_seat_01"),
                mp.game.joaat("prop_rub_couch01"),
                mp.game.joaat("miss_rub_couch_01"),
                mp.game.joaat("prop_ld_farm_couch01"),
                mp.game.joaat("prop_ld_farm_couch02"),
                mp.game.joaat("prop_rub_couch02"),
                mp.game.joaat("prop_rub_couch03"),
                mp.game.joaat("prop_rub_couch04"),
                mp.game.joaat("p_lev_sofa_s"),
                mp.game.joaat("p_res_sofa_l_s"),
                mp.game.joaat("p_v_med_p_sofa_s"),
                mp.game.joaat("p_yacht_sofa_01_s"),
                mp.game.joaat("v_ilev_m_sofa"),
                mp.game.joaat("v_res_tre_sofa_s"),
                mp.game.joaat("v_tre_sofa_mess_a_s"),
                mp.game.joaat("v_tre_sofa_mess_b_s"),
                mp.game.joaat("v_tre_sofa_mess_c_s"),
                mp.game.joaat("prop_roller_car_01"),
                mp.game.joaat("prop_roller_car_02"),
                mp.game.joaat("prop_a_base_bars_01"),
                mp.game.joaat("prop_beach_bars_02"),
                mp.game.joaat("prop_pris_bars_01"),
                mp.game.joaat("prop_beach_bars_01"),
                mp.game.joaat("prop_muscle_bench_03"),
                mp.game.joaat("prop_pris_bench_01"),
                mp.game.joaat("prop_weight_bench_02"),
                mp.game.joaat("prop_patio_lounger1"),
                mp.game.joaat("prop_patio_lounger_2"),
                mp.game.joaat("prop_patio_lounger_3"),
                mp.game.joaat("prop_chair_pile_01"),
                mp.game.joaat("v_med_bed2"),
                mp.game.joaat("v_med_bed1"),
                mp.game.joaat("v_med_emptybed"),
                mp.game.joaat("v_med_cor_medstool"),
                mp.game.joaat("v_ind_meatbench"),
                mp.game.joaat("v_corp_lngestool"),
                mp.game.joaat("v_corp_lngestoolfd"),
                mp.game.joaat("prop_bench_07"),
                mp.game.joaat("v_corp_lazychair"),
                mp.game.joaat("prop_ven_market_stool"),
                mp.game.joaat("ba_prop_int_edgy_stool"),
                mp.game.joaat("apa_mp_h_yacht_stool_01"),
                mp.game.joaat("v_ilev_m_dinechair"),
                mp.game.joaat("prop_chair_07"),
                mp.game.joaat("gr_prop_gr_chair02_ped"),
                mp.game.joaat("xm_prop_x17_avengerchair_02"),
                mp.game.joaat("xm_lab_easychair_01"),
                mp.game.joaat("xm_int_lev_sub_chair_01"),
                mp.game.joaat("vw_prop_vw_offchair_03"),
                mp.game.joaat("sm_prop_smug_offchair_01a"),
                mp.game.joaat("sm_prop_offchair_smug_02"),
                mp.game.joaat("sm_prop_offchair_smug_01"),
                mp.game.joaat("prop_yaught_chair_01"),
                mp.game.joaat("imp_prop_impexp_offchair_01a"),
                mp.game.joaat("ch_prop_casino_track_chair_01"),
                mp.game.joaat("ba_prop_battle_club_chair_03"),
                mp.game.joaat("ba_prop_battle_club_chair_02"),
                mp.game.joaat("ba_prop_battle_club_chair_01"),
              ],
              i = 0,
              n = null,
              s = null,
              r = null;
            mp.events.add("client.editor.sit", () => {
              try {
                n && mp.objects.exists(n) && n.destroy(),
                  a.g.OnObjectEditor(o[i], null, (e, t, l) => {
                    (n = mp.objects.new(o[i], e, {
                      rotation: new mp.Vector3(0, 0, t),
                      dimension: a.g.localplayer.dimension,
                    })),
                      (s = e),
                      (r = t);
                  });
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "inventory/dropEditor",
                  "client.editor.start",
                  e.toString()
                );
              }
            }),
              mp.keys.bind(a.g.Keys.VK_Q, !0, function () {
                --i < 0 && (i = 0), n && mp.objects.exists(n) && n.destroy();
                const e = mp.game.gameplay.getGroundZFor3dCoord(
                  s.x,
                  s.y,
                  s.z + 50,
                  0,
                  !1
                );
                (s.z = e),
                  (n = mp.objects.new(o[i], s, {
                    rotation: new mp.Vector3(0, 0, r),
                    dimension: a.g.localplayer.dimension,
                  })),
                  n.placeOnGroundProperly(),
                  (s = n.getCoords(!0)),
                  (objectEditor.entity.position = new mp.Vector3(
                    s.x,
                    s.y,
                    s.z
                  ));
              }),
              mp.keys.bind(a.g.Keys.VK_E, !0, function () {
                ++i >= o.length && (i = o.length - 1),
                  n && mp.objects.exists(n) && n.destroy();
                const e = mp.game.gameplay.getGroundZFor3dCoord(
                  s.x,
                  s.y,
                  s.z + 50,
                  0,
                  !1
                );
                (s.z = e),
                  (n = mp.objects.new(o[i], s, {
                    rotation: new mp.Vector3(0, 0, r),
                    dimension: a.g.localplayer.dimension,
                  })),
                  n.placeOnGroundProperly(),
                  (s = n.getCoords(!0)),
                  (objectEditor.entity.position = new mp.Vector3(
                    s.x,
                    s.y,
                    s.z
                  ));
              }),
              mp.keys.bind(a.g.Keys.VK_LEFT, !0, function () {
                sitData.objectsInfo[o[i]].zOffset ||
                  (sitData.objectsInfo[o[i]].zOffset = 0),
                  (sitData.objectsInfo[o[i]].zOffset -= 0.1),
                  sitData.objectsInfo[o[i]].zOffset < -5 &&
                    (sitData.objectsInfo[o[i]].zOffset = 0);
              }),
              mp.keys.bind(a.g.Keys.VK_RIGHT, !0, function () {
                sitData.objectsInfo[o[i]].zOffset ||
                  (sitData.objectsInfo[o[i]].zOffset = 0),
                  (sitData.objectsInfo[o[i]].zOffset += 0.1),
                  sitData.objectsInfo[o[i]].zOffset > 15 &&
                    (sitData.objectsInfo[o[i]].zOffset = 0);
              });
            let l = 0;
            mp.keys.bind(a.g.Keys.VK_UP, !0, function () {
              switch ((l--, l)) {
                case 1:
                  sitData.objectsInfo[o[i]].typeFlags =
                    sitData.defaultData.yMinus;
                  break;
                case 2:
                  sitData.objectsInfo[o[i]].typeFlags =
                    sitData.defaultData.yPlus;
                  break;
                case 3:
                  sitData.objectsInfo[o[i]].typeFlags =
                    sitData.defaultData.xMinus;
                  break;
                case 4:
                  sitData.objectsInfo[o[i]].typeFlags =
                    sitData.defaultData.xPlus;
                  break;
                default:
                  (l = 0), delete sitData.objectsInfo[o[i]].typeFlags;
              }
            }),
              mp.keys.bind(a.g.Keys.VK_DOWN, !0, function () {
                switch ((l++, l)) {
                  case 1:
                    sitData.objectsInfo[o[i]].typeFlags =
                      sitData.defaultData.yMinus;
                    break;
                  case 2:
                    sitData.objectsInfo[o[i]].typeFlags =
                      sitData.defaultData.yPlus;
                    break;
                  case 3:
                    sitData.objectsInfo[o[i]].typeFlags =
                      sitData.defaultData.xMinus;
                    break;
                  case 4:
                    sitData.objectsInfo[o[i]].typeFlags =
                      sitData.defaultData.xPlus;
                    break;
                  default:
                    (l = 0), delete sitData.objectsInfo[o[i]].typeFlags;
                }
              }),
              mp.events.add("render", () => {
                try {
                  if (!n) return;
                  mp.game.graphics.drawText(
                    `index - ${i}~n~zOffset: ${
                      sitData.objectsInfo[o[i]].zOffset
                    }~n~typeFlags: ${sitData.objectsInfo[o[i]].typeFlags}`,
                    [0.5, 0.9],
                    {
                      font: 4,
                      color: [255, 255, 255, 255],
                      scale: [0.4, 0.4],
                      centre: !0,
                    }
                  );
                } catch (e) {
                  if (
                    new Date().getTime() - a.g.trycatchtime["player/render"] <
                    6e4
                  )
                    return;
                  (a.g.trycatchtime["player/render"] = new Date().getTime()),
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/render",
                      "render",
                      e.toString()
                    );
                }
              });
          },
          8732: (e, t, a) => {
            const o = mp.browsers.new(
                "https://cloud.redage.net/soundapi/index.html"
              ),
              i = (e, t) => {
                o.execute(`${e}('${JSON.stringify(t)}')`);
              },
              n = (e) => {
                o.execute(e);
              },
              s = {};
            (a.g.VolumeInterface = 100),
              (a.g.VolumeQuest = 100),
              (a.g.VolumeAmbient = 100),
              (a.g.VolumePhoneRadio = 100),
              mp.events.add("sounds.playInterface", (e, t) => {
                soundApi.playInterface(e, t);
              }),
              mp.events.add("sounds.playAmbient", (e, t) => {
                (t.volume = soundApi.getVolume(t.volume, a.g.VolumeAmbient)),
                  soundApi.playAmbient(e, t);
              }),
              mp.events.add("sounds.playPosAmbient", (e, t, o, i) => {
                const n = i && null != i.dimension ? i.dimension : 0;
                o &&
                  null != t &&
                  n === a.g.localplayer.dimension &&
                  ((i.volume = soundApi.getVolume(i.volume, a.g.VolumeAmbient)),
                  new soundApi.Sounds3DPos(e, t, o, i));
              }),
              mp.events.add("sounds.playEntityAmbient", (e, t, o) => {
                if (
                  t &&
                  t.doesExist() &&
                  null != e &&
                  t.dimension === a.g.localplayer.dimension
                ) {
                  if (
                    "player" === t.type &&
                    t.remoteId === a.g.localplayer.remoteId
                  )
                    return;
                  (o.volume = soundApi.getVolume(o.volume, a.g.VolumeAmbient)),
                    new soundApi.Sounds3DEntity(e, t, o);
                }
              }),
              mp.events.add("sounds.play2DRadio", (e, t) => {
                soundApi.play2DRadio(e, t);
              }),
              mp.events.add("sounds.stop2DRadio", () => {
                soundApi.stop2DRadio();
              }),
              mp.events.add("sounds.stop", (e) => {
                soundApi.stopSound(e);
              }),
              mp.events.add("sounds.trigger", (e, t) => {
                if ("onEnd" !== e) return;
                const a = s[t];
                a && a.destroy();
              }),
              (soundApi.getVolume = (e, t) => (t <= 0 ? 0 : (e / 100) * t)),
              (soundApi.play2DRadio = (e, t) => {
                i("play2DRadio", {
                  url: e,
                  volume: soundApi.getVolume(t, a.g.VolumePhoneRadio),
                });
              }),
              (soundApi.stop2DRadio = () => n("window.stop2DRadio()")),
              (soundApi.stopSound = (e) => n(`window.stopSound('${e}')`)),
              (soundApi.playInterface = (e, t) => {
                new r(e, {
                  volume: soundApi.getVolume(t, a.g.VolumeInterface),
                });
              }),
              (soundApi.playAmbient = (e, t) => {
                new r(e, t);
              }),
              (soundApi.Sounds3DPos = class {
                constructor(e, t, a, o = {}) {
                  (this.id = e),
                    (this.sound = t),
                    (this.position = a),
                    (this.volume = o && null != o.volume ? o.volume : 1),
                    (this.looped = !(!o || null == o.looped) && o.looped),
                    (this.maxDistance =
                      o && null != o.maxDistance ? o.maxDistance : 10),
                    (this.dimension =
                      o && null != o.dimension ? o.dimension : 0),
                    (this.rolloffFactor =
                      o && null != o.rolloffFactor ? o.rolloffFactor : 1),
                    (this.refDistance =
                      o && null != o.refDistance ? o.refDistance : 1),
                    (this.startOffsetPercent = o.startOffsetPercent),
                    (this.pannerAttr = o.pannerAttr),
                    (this.fade = o.fade),
                    (this.syncAudio = o.syncAudio),
                    (this.startedTime = Date.now());
                  const n = {};
                  (n.id = e),
                    (n.sound = t),
                    (n.volume = this.volume),
                    (n.loop = this.looped),
                    (n.rolloffFactor = this.rolloffFactor),
                    (n.refDistance = this.refDistance),
                    (n.startOffsetPercent = this.startOffsetPercent),
                    (n.pannerAttr = this.pannerAttr),
                    (n.fade = this.fade),
                    (n.syncAudio = this.syncAudio),
                    (n.maxDistance = this.maxDistance),
                    (n.x = a.x),
                    (n.y = a.y),
                    (n.z = a.z),
                    i("play3DSound", n);
                }
                destroy() {
                  soundApi.stopSound(this.id), delete s[this.id];
                }
              }),
              (soundApi.Sounds3DEntity = class {
                constructor(e, t, a = {}) {
                  if (
                    !(
                      mp.players.exists(t) ||
                      mp.vehicles.exists(t) ||
                      mp.objects.exists(t) ||
                      mp.peds.exists(t)
                    )
                  )
                    return;
                  (this.id = a && null != a.id ? a.id : new Date().getTime()),
                    (this.sound = e),
                    (this.entity = t),
                    (this.volume = a && null != a.volume ? a.volume : 1),
                    (this.looped = !(!a || null == a.looped) && a.looped),
                    (this.maxDistance =
                      a && null != a.maxDistance ? a.maxDistance : 10),
                    (this.rolloffFactor =
                      a && null != a.rolloffFactor ? a.rolloffFactor : 1),
                    (this.refDistance =
                      a && null != a.refDistance ? a.refDistance : 1),
                    (this.startOffsetPercent = a.startOffsetPercent),
                    (this.pannerAttr = a.pannerAttr),
                    (this.fade = a.fade),
                    (this.startedTime = Date.now());
                  const o = t.position,
                    n = {};
                  (n.id = this.id),
                    (n.sound = e),
                    (n.volume = this.volume),
                    (n.loop = this.looped),
                    (n.rolloffFactor = this.rolloffFactor),
                    (n.refDistance = this.refDistance),
                    (n.startOffsetPercent = this.startOffsetPercent),
                    (n.pannerAttr = this.pannerAttr),
                    (n.fade = this.fade),
                    (n.maxDistance = this.maxDistance),
                    (n.x = o.x),
                    (n.y = o.y),
                    (n.z = o.z),
                    i("play3DSound", n),
                    (s[this.id] = this);
                }
                destroy() {
                  soundApi.stopSound(this.id), delete s[this.id];
                }
              });
            class r {
              constructor(e, t) {
                (this.sound = e),
                  (this.id = t && null != t.id ? t.id : new Date().getTime()),
                  (this.volume = t && null != t.volume ? t.volume : 1),
                  (this.loop = !(!t || null == t.loop) && t.loop);
                const a = {};
                (a.sound = e),
                  (a.id = this.id),
                  (a.volume = this.volume),
                  (a.loop = this.loop),
                  i("playSound", a);
              }
            }
            (soundApi.Sounds2D = r),
              mp.events.add(a.g.renderName.soundRot, () => {
                if (!a.g.loggedin) return;
                const e = a.g.cameraManager.gameplayCam(),
                  t = mp.players.local.position,
                  o = e.getCoord(),
                  n = e.getRot(2),
                  s = a.g.midVector(t, o),
                  { forward: r, up: l } = a.g.principalAxesToOrientation(
                    n.x,
                    n.y,
                    n.z
                  ),
                  m = a.g.roundNumber(s.x),
                  c = a.g.roundNumber(s.y),
                  p = a.g.roundNumber(s.z),
                  g = a.g.roundNumber(r.x),
                  _ = a.g.roundNumber(r.y),
                  d = a.g.roundNumber(r.z);
                i("updatePlayerSoundPos", {
                  px: m,
                  py: c,
                  pz: p,
                  ofx: g,
                  ofy: _,
                  ofz: d,
                  oux: 0,
                  ouy: 1,
                  ouz: 0,
                });
              }),
              mp.events.add(a.g.renderName.sound, () => {
                Object.values(s).forEach((e) => {
                  if (
                    !e.looped &&
                    e.startedTime > 0 &&
                    Date.now() - e.startedTime > 12e5
                  )
                    return e.destroy();
                  e.maxDistance > 0 &&
                  !e.isMutedFarAway &&
                  e.position &&
                  a.g.vdist2(pPos, e.position) > 2 * e.maxDistance
                    ? ((e.isMutedFarAway = !0),
                      i("setMuted", { id: e.id, mute: !0 }))
                    : e.isMutedFarAway &&
                      ((e.isMutedFarAway = !1),
                      i("setMuted", { id: e.id, mute: !1 }));
                  const t = e.entity;
                  if (t)
                    if (
                      mp.players.exists(t) ||
                      mp.vehicles.exists(t) ||
                      mp.objects.exists(t) ||
                      mp.peds.exists(t)
                    ) {
                      const o = new mp.Vector3(
                        a.g.roundNumber(t.position.x),
                        a.g.roundNumber(t.position.y),
                        a.g.roundNumber(t.position.z)
                      );
                      i("updateSoundPos", {
                        id: e.id,
                        x: o.x,
                        y: o.y,
                        z: o.z,
                        hasLos: mp.players.local.hasClearLosTo(t.handle, 17),
                      });
                    } else e.destroy();
                });
              }),
              (a.g.principalAxesToOrientation = (e = 0, t = 0, a = 0) => {
                const {
                    yaw: o = 0,
                    pitch: i = 0,
                    roll: n = 0,
                  } = "object" == typeof e ? e : { yaw: e, pitch: t, roll: a },
                  s = { x: 0, y: 0, z: 0 },
                  r = { x: 0, y: 0, z: 0 },
                  l = o * (Math.PI / 180);
                (s.x = Math.sin(l)), (s.z = Math.cos(l + Math.PI));
                const m = i * (Math.PI / 180);
                (s.y = Math.sin(m)), (r.y = Math.cos(m));
                const c = n * (Math.PI / 180);
                return (
                  (r.x = Math.sin(c)),
                  (r.z = Math.sin(c)),
                  { forward: s, up: r }
                );
              });
          },
          4217: (e, t, a) => {
            (a.g.isAdmin = !1),
              (a.g.adminLVL = 0),
              mp.events.addDataHandler("ALVL", (e, t, o) => {
                try {
                  e &&
                    mp.players.exists(e) &&
                    "player" === e.type &&
                    e.remoteId === a.g.localplayer.remoteId &&
                    ((a.g.adminLVL = Number(t)),
                    (a.g.isAdmin = 0 != a.g.adminLVL));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "synchronization/state",
                    "ALVL",
                    e.toString()
                  );
                }
              }),
              mp.events.addDataHandler("REDNAME", (e, t, a) => {
                try {
                  e &&
                    mp.players.exists(e) &&
                    "player" === e.type &&
                    0 !== e.handle &&
                    (t ? e.setAlpha(100) : e.setAlpha(255));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "synchronization/state",
                    "REDNAME",
                    e.toString()
                  );
                }
              }),
              (a.g.fractionId = 0),
              mp.events.addDataHandler("fraction", (e, t, o) => {
                try {
                  e &&
                    mp.players.exists(e) &&
                    "player" === e.type &&
                    e.remoteId === a.g.localplayer.remoteId &&
                    ((a.g.fractionId = t),
                    mp.events.call("client.charStore.FractionID", t),
                    Number(t) ||
                      (mp.events.call("client.charStore.FractionLVL", 0),
                      mp.gui.emmit("window.charStore.charRanksName('[]')")));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "synchronization/state",
                    "fraction",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.update.fId", (e, t) => {
                mp.events.call("client.charStore.FractionLVL", e),
                  mp.gui.emmit(`window.charStore.charRanksName('${t}')`);
              }),
              (a.g.isLeader = !1),
              mp.events.addDataHandler("leader", (e, t, o) => {
                try {
                  e &&
                    mp.players.exists(e) &&
                    "player" === e.type &&
                    e.remoteId === a.g.localplayer.remoteId &&
                    (mp.events.call("client.charStore.IsLeader", t),
                    (a.g.isLeader = t));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "synchronization/state",
                    "leader",
                    e.toString()
                  );
                }
              }),
              mp.events.addDataHandler("vmuted", (e, t, o) => {
                try {
                  e &&
                    mp.players.exists(e) &&
                    "player" === e.type &&
                    e.remoteId === a.g.localplayer.remoteId &&
                    (mp.gui.emmit(`window.hudStore.isMute (${t})`),
                    a.g.binderFunctions.disableVoice());
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "synchronization/state",
                    "vmuted",
                    e.toString()
                  );
                }
              }),
              (a.g.organizationId = 0),
              mp.events.addDataHandler("organization", (e, t, o) => {
                try {
                  e &&
                    mp.players.exists(e) &&
                    "player" === e.type &&
                    e.remoteId === a.g.localplayer.remoteId &&
                    ((a.g.organizationId = t),
                    mp.events.call("client.charStore.OrganizationID", t),
                    Number(t) ||
                      (mp.events.call("client.charStore.OrganizationLVL", 0),
                      mp.gui.emmit(
                        "window.charStore.charFamilyRanksName('[]')"
                      )));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "synchronization/state",
                    "organization",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.update.oId", (e, t) => {
                mp.events.call("client.charStore.OrganizationLVL", e),
                  mp.gui.emmit(`window.charStore.charFamilyRanksName('${t}')`);
              }),
              (a.g.isDeath = !1),
              mp.events.addDataHandler("InDeath", (e, t, o) => {
                try {
                  e &&
                  mp.players.exists(e) &&
                  "player" === e.type &&
                  e.remoteId === a.g.localplayer.remoteId
                    ? (a.g.isDeath = t)
                    : e &&
                      mp.players.exists(e) &&
                      "player" === e.type &&
                      e.remoteId !== a.g.localplayer.remoteId &&
                      !e.ALVL &&
                      mp.game.system.vdist(
                        e.position.x,
                        e.position.y,
                        e.position.z,
                        a.g.localplayer.position.x,
                        a.g.localplayer.position.y,
                        a.g.localplayer.position.z
                      ) < 70 &&
                      ((0 != a.g.fractionId && a.g.fractionId == e.fraction) ||
                        (0 != a.g.organizationId &&
                          a.g.organizationId == e.organization)) &&
                      (void 0 !== a.g.playersBlips &&
                      void 0 !== a.g.playersBlips[e.remoteId]
                        ? t
                          ? Natives.SET_BLIP_COLOUR(
                              a.g.playersBlips[e.remoteId],
                              70
                            )
                          : e.leader
                          ? Natives.SET_BLIP_COLOUR(
                              a.g.playersBlips[e.remoteId],
                              1
                            )
                          : a.g.fractionId == e.fraction
                          ? Natives.SET_BLIP_COLOUR(
                              a.g.playersBlips[e.remoteId],
                              0
                            )
                          : Natives.SET_BLIP_COLOUR(
                              a.g.playersBlips[e.remoteId],
                              18
                            )
                        : ((a.g.playersBlips[e.remoteId] =
                            Natives.ADD_BLIP_FOR_ENTITY(e.handle)),
                          a.g.playersBlips[e.remoteId] &&
                            (t
                              ? Natives.SET_BLIP_COLOUR(
                                  a.g.playersBlips[e.remoteId],
                                  70
                                )
                              : e.leader
                              ? Natives.SET_BLIP_COLOUR(
                                  a.g.playersBlips[e.remoteId],
                                  1
                                )
                              : a.g.fractionId == e.fraction
                              ? Natives.SET_BLIP_COLOUR(
                                  a.g.playersBlips[e.remoteId],
                                  0
                                )
                              : Natives.SET_BLIP_COLOUR(
                                  a.g.playersBlips[e.remoteId],
                                  18
                                ),
                            Natives.SET_BLIP_CATEGORY(
                              a.g.playersBlips[e.remoteId],
                              7
                            ),
                            Natives.SHOW_HEADING_INDICATOR_ON_BLIP(
                              a.g.playersBlips[e.remoteId],
                              !0
                            ))));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "synchronization/state",
                    "InDeath",
                    e.toString()
                  );
                }
              }),
              (a.g.isDeaf = !1),
              mp.events.addDataHandler("isDeaf", (e, t, o) => {
                try {
                  e &&
                    mp.players.exists(e) &&
                    "player" === e.type &&
                    e.remoteId === a.g.localplayer.remoteId &&
                    (a.g.isDeaf = t);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "synchronization/state",
                    "isDeaf",
                    e.toString()
                  );
                }
              }),
              (a.g.isDemorgan = !1),
              mp.events.add("client.demorgan", (e) => {
                a.g.isDemorgan = e;
              }),
              (a.g.isArmor = !1),
              mp.events.add("client.isArmor", (e) => {
                a.g.isArmor = e;
              }),
              mp.events.add("client.updateJobSkills", (e, t, a) => {
                try {
                  if (e.length < 1) return;
                  let o = [
                    {
                      name: "Электрик",
                      max: 15e3,
                      nextLevel: 700,
                      currentLevel: 0,
                      current: 0,
                    },
                    {
                      name: "Газонокосильщик",
                      max: 4e4,
                      nextLevel: 2e3,
                      currentLevel: 0,
                      current: 0,
                    },
                    {
                      name: "Почтальон",
                      max: 4e3,
                      nextLevel: 200,
                      currentLevel: 0,
                      current: 0,
                    },
                    {
                      name: "Таксист",
                      max: 1e3,
                      nextLevel: 25,
                      currentLevel: 0,
                      current: 0,
                    },
                    {
                      name: "Водитель автобуса",
                      max: 7e4,
                      nextLevel: 3e3,
                      currentLevel: 0,
                      current: 0,
                    },
                    {
                      name: "Автомеханик",
                      max: 250,
                      nextLevel: 10,
                      currentLevel: 0,
                      current: 0,
                    },
                    {
                      name: "Дальнобойщик",
                      max: 700,
                      nextLevel: 30,
                      currentLevel: 0,
                      current: 0,
                    },
                    {
                      name: "Инкассатор",
                      max: 3e3,
                      nextLevel: 150,
                      currentLevel: 0,
                      current: 0,
                    },
                  ];
                  (e = JSON.parse(e)), (t = JSON.parse(t)), (a = JSON.parse(a));
                  for (let i = 0; i < o.length; i++)
                    void 0 !== e[i] && (o[i].current = e[i]),
                      void 0 !== t[i] && (o[i].nextLevel = t[i]),
                      void 0 !== a[i] && (o[i].currentLevel = a[i]);
                  mp.gui.emmit(
                    `window.charStore.updateNameWithJSON('JobsSkills', '${JSON.stringify(
                      o
                    )}')`
                  );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "synchronization/state",
                    "client.updateJobSkills",
                    e.toString()
                  );
                }
              });
            const o = [
              null,
              "move_m@brave",
              "move_m@confident",
              "move_m@drunk@verydrunk",
              "move_m@shadyped@a",
              "move_m@sad@a",
              "move_f@sexy@a",
              "move_m@fire",
              "MOVE_M@FEMME@",
              "MOVE_M@TOUGH_GUY@",
              "move_ped_crouched",
            ];
            a.g.wait(5e3).then(() => {
              o.forEach((e) => {
                null != e && mp.game.streaming.requestClipSet(e);
              });
            }),
              mp.events.addDataHandler("WalkStyle", (e, t, o) => {
                a.g.SetWalkStyle(e, t);
              }),
              (a.g.SetWalkStyle = (e, t) => {
                try {
                  e &&
                    mp.players.exists(e) &&
                    "player" === e.type &&
                    0 !== e.handle &&
                    (null === t && (t = e.getVariable("WalkStyle")),
                    0 == t || null == o[t]
                      ? e.resetMovementClipset(0)
                      : e.setMovementClipset(o[t], 0));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "synchronization/state",
                    "SetWalkStyle",
                    e.toString()
                  );
                }
              });
            const i = [
              null,
              "mood_aiming_1",
              "mood_angry_1",
              "mood_drunk_1",
              "mood_happy_1",
              "mood_injured_1",
              "mood_stressed_1",
            ];
            mp.events.addDataHandler("FacialClipset", (e, t, o) => {
              a.g.SetFacialClipset(e, t);
            }),
              (a.g.SetFacialClipset = (e, t) => {
                try {
                  e &&
                    mp.players.exists(e) &&
                    "player" === e.type &&
                    0 !== e.handle &&
                    (null === t && (t = e.getVariable("FacialClipset")),
                    0 == t || null == i[t]
                      ? e.clearFacialIdleAnimOverride(0)
                      : mp.game.invoke(
                          "0xFFC24B988B938B38",
                          e.handle,
                          i[t],
                          0
                        ));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "synchronization/state",
                    "SetFacialClipset",
                    e.toString()
                  );
                }
              }),
              mp.events.add("playerStreamIn", (e) => {
                a.g.SetWalkStyle(e, null), a.g.SetFacialClipset(e, null);
              }),
              (a.g.AFK_STATUS = !1),
              mp.events.addDataHandler("AFK_STATUS", (e, t, o) => {
                try {
                  e &&
                    mp.players.exists(e) &&
                    "player" === e.type &&
                    e.remoteId === a.g.localplayer.remoteId &&
                    (a.g.AFK_STATUS = t);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "synchronization/state",
                    "AFK_STATUS",
                    e.toString()
                  );
                }
              }),
              mp.events.addDataHandler("AGM", (e, t, o) => {
                try {
                  e &&
                    mp.players.exists(e) &&
                    "player" === e.type &&
                    e.remoteId === a.g.localplayer.remoteId &&
                    ((t = Boolean(t)),
                    (a.g.admingm = t),
                    a.g.localplayer.setInvincible(t),
                    mp.game.graphics.notify(
                      t ? "GM: ~g~Enabled" : "GM: ~r~Disabled"
                    ));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "synchronization/state",
                    "AGM",
                    e.toString()
                  );
                }
              });
          },
          7044: (e, t, a) => {
            const o = (e, t) => {
                try {
                  if (
                    e &&
                    mp.players.exists(e) &&
                    "player" === e.type &&
                    0 !== e.handle
                  )
                    if (
                      (t || (t = e.getVariable("weaponComponents")),
                      t && "undefined" != t && "null" != t && t.split("|"))
                    ) {
                      let [o, n] = t.split("|");
                      if (((o = parseInt(o)), !a.g.ComponentsData[o])) return;
                      if (!a.g.ComponentsData[o].Components) return;
                      (e.__weaponHash = o),
                        (n = n && n.length > 0 ? JSON.parse(n) : []),
                        e.handle != a.g.localplayer.handle &&
                          e.giveWeapon(o, -1, !0);
                      for (let t of n) i(e, o, t);
                      mp.game.invoke(
                        "0xADF692B254977C0C",
                        e.handle,
                        o >> 0,
                        !0
                      );
                    } else n(e);
                } catch (e) {
                  if (
                    new Date().getTime() -
                      a.g.trycatchtime["synchronization/weaponsComponents"] <
                    5e3
                  )
                    return;
                  (a.g.trycatchtime["synchronization/weaponsComponents"] =
                    new Date().getTime()),
                    mp.events.callRemote(
                      "client_trycatch",
                      "synchronization/weaponsComponents",
                      "setComponentsToPlayer",
                      e.toString()
                    );
                }
              },
              i = (e, t, a) => {
                try {
                  e &&
                    mp.players.exists(e) &&
                    "player" === e.type &&
                    (e.hasOwnProperty("__weaponComponentData") ||
                      (e.__weaponComponentData = new Set()),
                    e.__weaponComponentData.add(a),
                    mp.game.invoke(
                      "0xD966D51AA5B28BB9",
                      e.handle,
                      t >> 0,
                      a >> 0
                    ));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "synchronization/weaponsComponents",
                    "addComponentToPlayer",
                    e.toString()
                  );
                }
              },
              n = (e) => {
                try {
                  if (e && mp.players.exists(e) && "player" === e.type) {
                    if (!e.hasOwnProperty("__weaponHash")) return;
                    if (!e.hasOwnProperty("__weaponComponentData")) return;
                    for (let t of e.__weaponComponentData)
                      mp.game.invoke(
                        "0x1E8BE90C74FB4C09",
                        e.handle,
                        e.__weaponHash >> 0,
                        t >> 0
                      );
                    (e.__weaponComponentData = new Set()),
                      delete e.__weaponComponentData;
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "synchronization/weaponsComponents",
                    "removeAllComponentFromPlayer",
                    e.toString()
                  );
                }
              };
            mp.events.addDataHandler("weaponComponents", (e, t, a) => {
              o(e, t);
            }),
              mp.events.add("playerStreamIn", (e) => {
                try {
                  o(e, null);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "synchronization/weaponsComponents",
                    "playerStreamIn",
                    e.toString()
                  );
                }
              }),
              mp.events.add("playerStreamOut", (e) => {
                try {
                  e &&
                    e.hasOwnProperty("__weaponComponentData") &&
                    ((e.__weaponComponentData = new Set()),
                    delete e.__weaponComponentData);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "synchronization/weaponsComponents",
                    "playerStreamOut",
                    e.toString()
                  );
                }
              });
          },
          8620: (e, t, a) => {
            let o = !1,
              i = [],
              n = !1,
              s = !1,
              r = null;
            mp.events.add("client.init", async (e) => {
              try {
                (mp.gui.cursor.visible = !0),
                  mp.game.ui.setPauseMenuActive(!1),
                  mp.gui.chat.show(!1),
                  (r = mp.browsers.new(e)),
                  r.markAsChat();
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "utils/cef",
                  "client.init",
                  e.toString()
                );
              }
            }),
              (mp.gui.emmit = (e, t = 0) => {
                try {
                  if (t) {
                    const t = `[cef debug] ${e}`;
                    o
                      ? r.execute(`console.log(${JSON.stringify(t)})`)
                      : i.push(`console.log(${JSON.stringify(t)})`);
                  }
                  o ? r.execute(e) : i.push(e);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "utils/cef",
                    "mp.gui.emmit",
                    e.toString()
                  );
                }
              }),
              (mp.gui.json = (e, t) => {
                try {
                  o
                    ? r.execute(`${e}('${JSON.stringify(t)}')`)
                    : i.push(execute);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "utils/cef",
                    "mp.gui.emmit",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client:AuthInit", () => {
                (o = !0),
                  i.length &&
                    (i.forEach((e) => {
                      r.execute(e);
                    }),
                    (i = []));
              }),
              mp.events.add("client:OnBrowserInit", () => {
                try {
                  0 == n && mp.game.ui.isPauseMenuActive()
                    ? ((n = !0),
                      (s = mp.gui.cursor.visible),
                      (mp.gui.cursor.visible = !1))
                    : 1 != n ||
                      mp.game.ui.isPauseMenuActive() ||
                      ((n = !1), (mp.gui.cursor.visible = s));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "utils/cef",
                    "client:OnBrowserInit",
                    e.toString()
                  );
                }
              }),
              (a.g.IsJsonString = (e) => {
                try {
                  JSON.parse(e);
                } catch (e) {
                  return !1;
                }
                return !0;
              });
          },
          7065: () => {
            var e = [];
            mp.events.add(
              "createCheckpoint",
              function (t, a, o, i, n, s, r, l, m) {
                try {
                  void 0 !== e[t] && (e[t].destroy(), (e[t] = void 0)),
                    (e[t] =
                      null != m
                        ? mp.checkpoints.new(a, o, i, {
                            direction: m,
                            color: [s, r, l, 200],
                            visible: !0,
                            dimension: n,
                          })
                        : mp.markers.new(a, o, i, {
                            visible: !0,
                            dimension: n,
                            color: [s, r, l, 255],
                          }));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "utils/checkpoints",
                    "createCheckpoint",
                    e.toString()
                  );
                }
              }
            ),
              mp.events.add("deleteCheckpoint", function (t) {
                try {
                  if (void 0 === e[t]) return;
                  e[t].destroy(), (e[t] = void 0);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "utils/checkpoints",
                    "deleteCheckpoint",
                    e.toString()
                  );
                }
              }),
              mp.events.add("createWaypoint", async (e, t) => {
                try {
                  mp.game.ui.setNewWaypoint(e, t);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "utils/checkpoints",
                    "createWaypoint",
                    e.toString()
                  );
                }
              });
            var t = null;
            mp.events.add("createWorkBlip", function (e, a = 49) {
              try {
                null != t && t.destroy(),
                  (t = mp.blips.new(0, e, {
                    name: "Чекпоинт",
                    scale: 1,
                    color: a,
                    alpha: 255,
                    drawDistance: 100,
                    shortRange: !1,
                    rotation: 0,
                    dimension: 0,
                  }));
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "utils/checkpoints",
                  "createWorkBlip",
                  e.toString()
                );
              }
            }),
              mp.events.add("deleteWorkBlip", function () {
                try {
                  null != t && (t.destroy(), (t = null));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "utils/checkpoints",
                    "deleteWorkBlip",
                    e.toString()
                  );
                }
              });
            var a = null;
            mp.events.add("createGarageBlip", function (e) {
              try {
                null != a && a.destroy(),
                  (a = mp.blips.new(473, e, {
                    name: "Гараж",
                    scale: 1,
                    color: 45,
                    alpha: 255,
                    drawDistance: 100,
                    shortRange: !0,
                    rotation: 0,
                    dimension: 0,
                  }));
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "utils/checkpoints",
                  "createGarageBlip",
                  e.toString()
                );
              }
            }),
              mp.events.add("deleteGarageBlip", function () {
                try {
                  null != a && a.destroy(), (a = null);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "utils/checkpoints",
                    "deleteGarageBlip",
                    e.toString()
                  );
                }
              }),
              mp.events.add("changeBlipColor", function (e, t) {
                try {
                  if (null == e) return;
                  e.setColour(t);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "utils/checkpoints",
                    "changeBlipColor",
                    e.toString()
                  );
                }
              }),
              mp.events.add("changeBlipAlpha", function (e, t) {
                try {
                  if (null == e) return;
                  e.setAlpha(t);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "utils/checkpoints",
                    "changeBlipAlpha",
                    e.toString()
                  );
                }
              });
            let o = {};
            mp.events.add(
              "createBlip",
              function (e, t, a, i, n = 1, s = 49, r = 255, l) {
                mp.events.call("deleteBlip", e),
                  (o[e] = mp.blips.new(a, i, {
                    name: t,
                    scale: n,
                    color: s,
                    alpha: r,
                    drawDistance: 100,
                    shortRange: !1,
                    rotation: 0,
                    dimension: 0,
                  })),
                  null != l && o[e].setDisplay(l);
              }
            ),
              mp.events.add("deleteBlip", function (e) {
                o[e] && (o[e].destroy(), delete o[e]);
              });
          },
          664: (e, t, a) => {
            !(function (e) {
              var t = {};
              function a(o) {
                if (t[o]) return t[o].exports;
                var i = (t[o] = { i: o, l: !1, exports: {} });
                return (
                  e[o].call(i.exports, i, i.exports, a), (i.l = !0), i.exports
                );
              }
              (a.m = e),
                (a.c = t),
                (a.d = function (e, t, o) {
                  a.o(e, t) ||
                    Object.defineProperty(e, t, { enumerable: !0, get: o });
                }),
                (a.r = function (e) {
                  "undefined" != typeof Symbol &&
                    Symbol.toStringTag &&
                    Object.defineProperty(e, Symbol.toStringTag, {
                      value: "Module",
                    }),
                    Object.defineProperty(e, "__esModule", { value: !0 });
                }),
                (a.t = function (e, t) {
                  if ((1 & t && (e = a(e)), 8 & t)) return e;
                  if (4 & t && "object" == typeof e && e && e.__esModule)
                    return e;
                  var o = Object.create(null);
                  if (
                    (a.r(o),
                    Object.defineProperty(o, "default", {
                      enumerable: !0,
                      value: e,
                    }),
                    2 & t && "string" != typeof e)
                  )
                    for (var i in e)
                      a.d(
                        o,
                        i,
                        function (t) {
                          return e[t];
                        }.bind(null, i)
                      );
                  return o;
                }),
                (a.n = function (e) {
                  var t =
                    e && e.__esModule
                      ? function () {
                          return e.default;
                        }
                      : function () {
                          return e;
                        };
                  return a.d(t, "a", t), t;
                }),
                (a.o = function (e, t) {
                  return Object.prototype.hasOwnProperty.call(e, t);
                }),
                (a.p = ""),
                a((a.s = 0));
            })([
              function (e, t, o) {
                "use strict";
                var i;
                o.r(t),
                  (function (e) {
                    (e[(e.None = 0)] = "None"),
                      (e[(e.BronzeMedal = 1)] = "BronzeMedal"),
                      (e[(e.GoldMedal = 2)] = "GoldMedal"),
                      (e[(e.SilverMedal = 3)] = "SilverMedal"),
                      (e[(e.Alert = 4)] = "Alert"),
                      (e[(e.Crown = 5)] = "Crown"),
                      (e[(e.Ammo = 6)] = "Ammo"),
                      (e[(e.Armour = 7)] = "Armour"),
                      (e[(e.Barber = 8)] = "Barber"),
                      (e[(e.Clothes = 9)] = "Clothes"),
                      (e[(e.Franklin = 10)] = "Franklin"),
                      (e[(e.Bike = 11)] = "Bike"),
                      (e[(e.Car = 12)] = "Car"),
                      (e[(e.Gun = 13)] = "Gun"),
                      (e[(e.Heart = 14)] = "Heart"),
                      (e[(e.Makeup = 15)] = "Makeup"),
                      (e[(e.Mask = 16)] = "Mask"),
                      (e[(e.Michael = 17)] = "Michael"),
                      (e[(e.Star = 18)] = "Star"),
                      (e[(e.Tatoo = 19)] = "Tatoo"),
                      (e[(e.Trevor = 20)] = "Trevor"),
                      (e[(e.Lock = 21)] = "Lock"),
                      (e[(e.Tick = 22)] = "Tick");
                  })(i || (i = {}));
                var n,
                  s = i;
                !(function (e) {
                  (e[(e.ChaletLondon = 0)] = "ChaletLondon"),
                    (e[(e.HouseScript = 1)] = "HouseScript"),
                    (e[(e.Monospace = 2)] = "Monospace"),
                    (e[(e.CharletComprimeColonge = 4)] =
                      "CharletComprimeColonge"),
                    (e[(e.Pricedown = 7)] = "Pricedown");
                })(n || (n = {}));
                var r = n;
                class l {
                  constructor(e, t, a, o = 255) {
                    (this.R = e), (this.G = t), (this.B = a), (this.A = o);
                  }
                }
                (l.Empty = new l(0, 0, 0, 0)),
                  (l.Transparent = new l(0, 0, 0, 0)),
                  (l.Black = new l(0, 0, 0, 255)),
                  (l.White = new l(255, 255, 255, 255)),
                  (l.WhiteSmoke = new l(245, 245, 245, 255));
                const m = mp.game.graphics.getScreenActiveResolution(0, 0),
                  c = { width: m.x, height: m.y };
                class p {
                  constructor(e, t, a, o, i = 0, n = new l(255, 255, 255)) {
                    (this.TextureDict = e),
                      (this.TextureName = t),
                      (this.pos = a),
                      (this.size = o),
                      (this.heading = i),
                      (this.color = n),
                      (this.visible = !0);
                  }
                  LoadTextureDictionary() {
                    for (
                      mp.game.graphics.requestStreamedTextureDict(
                        this._textureDict,
                        !0
                      );
                      !this.IsTextureDictionaryLoaded;

                    )
                      mp.game.wait(0);
                  }
                  set TextureDict(e) {
                    (this._textureDict = e),
                      this.IsTextureDictionaryLoaded ||
                        this.LoadTextureDictionary();
                  }
                  get TextureDict() {
                    return this._textureDict;
                  }
                  get IsTextureDictionaryLoaded() {
                    return mp.game.graphics.hasStreamedTextureDictLoaded(
                      this._textureDict
                    );
                  }
                  Draw(e, t, a, o, i, n, s) {
                    (e = e || this.TextureDict),
                      (t = t || this.TextureName),
                      (a = a || this.pos),
                      (o = o || this.size),
                      (i = i || this.heading),
                      (n = n || this.color),
                      (s = s || !0) &&
                        (mp.game.graphics.hasStreamedTextureDictLoaded(e) ||
                          mp.game.graphics.requestStreamedTextureDict(e, !0));
                    const r = 1080,
                      l = r * (c.width / c.height),
                      m = this.size.Width / l,
                      p = this.size.Height / r,
                      g = this.pos.X / l + 0.5 * m,
                      _ = this.pos.Y / r + 0.5 * p;
                    mp.game.graphics.drawSprite(
                      e,
                      t,
                      g,
                      _,
                      m,
                      p,
                      i,
                      n.R,
                      n.G,
                      n.B,
                      n.A
                    );
                  }
                }
                class g {
                  constructor() {
                    this.handlers = [];
                  }
                  on(e) {
                    this.handlers.push(e);
                  }
                  off(e) {
                    this.handlers = this.handlers.filter((t) => t !== e);
                  }
                  emit(...e) {
                    this.handlers.slice(0).forEach((t) => t(...e));
                  }
                  expose() {
                    return this;
                  }
                }
                class _ {
                  constructor(e, t) {
                    (this.X = 0), (this.Y = 0), (this.X = e), (this.Y = t);
                  }
                  static Parse(e) {
                    if ("object" == typeof e) {
                      if (e.length) return new _(e[0], e[1]);
                      if (e.X && e.Y) return new _(e.X, e.Y);
                    } else if ("string" == typeof e && -1 !== e.indexOf(",")) {
                      const t = e.split(",");
                      return new _(parseFloat(t[0]), parseFloat(t[1]));
                    }
                    return new _(0, 0);
                  }
                }
                class d {
                  constructor(e = 0, t = 0) {
                    (this.Width = e), (this.Height = t);
                  }
                }
                class h {
                  constructor() {
                    this.enabled = !0;
                  }
                }
                class u extends h {
                  constructor(e, t, a) {
                    super(),
                      (this.enabled = !0),
                      (this.pos = e),
                      (this.size = t),
                      (this.color = a);
                  }
                  Draw(e, t, a) {
                    e || (e = new d(0, 0)),
                      t ||
                        a ||
                        ((e = new _(
                          this.pos.X + e.Width,
                          this.pos.Y + e.Height
                        )),
                        (t = this.size),
                        (a = this.color));
                    const o = t.Width / 1280,
                      i = t.Height / 720,
                      n = e.X / 1280 + 0.5 * o,
                      s = e.Y / 720 + 0.5 * i;
                    mp.game.graphics.drawRect(n, s, o, i, a.R, a.G, a.B, a.A);
                  }
                }
                class y extends u {
                  constructor(e, t, a) {
                    super(e, t, a);
                  }
                  Draw(e, t, a) {
                    e || (e = new d()),
                      !e ||
                        t ||
                        a ||
                        ((e = new _(
                          this.pos.X + e.Width,
                          this.pos.Y + e.Height
                        )),
                        (t = this.size),
                        (a = this.color));
                    const o = 1080,
                      i = o * (c.width / c.height),
                      n = t.Width / i,
                      s = t.Height / o,
                      r = e.X / i + 0.5 * n,
                      l = e.Y / o + 0.5 * s;
                    mp.game.graphics.drawRect(r, l, n, s, a.R, a.G, a.B, a.A);
                  }
                }
                class v extends h {
                  constructor(e, t, a, o, i, n) {
                    super(),
                      (this.caption = e),
                      (this.pos = t),
                      (this.scale = a),
                      (this.color = o || new l(255, 255, 255, 255)),
                      (this.font = i || 0),
                      (this.centered = n || !1);
                  }
                  Draw(e, t, a, o, i, n) {
                    !e ||
                      t ||
                      a ||
                      o ||
                      i ||
                      n ||
                      ((t = new _(this.pos.X + e.Width, this.pos.Y + e.Height)),
                      (a = this.scale),
                      (o = this.color),
                      (i = this.font),
                      (n = this.centered));
                    const s = t.X / 1280,
                      r = t.Y / 720;
                    mp.game.ui.setTextFont(parseInt(i)),
                      mp.game.ui.setTextScale(a, a),
                      mp.game.ui.setTextColour(o.R, o.G, o.B, o.A),
                      mp.game.ui.setTextCentre(n),
                      mp.game.ui.setTextEntry("STRING"),
                      w.AddLongString(e),
                      mp.game.ui.drawText(s, r);
                  }
                }
                var f;
                !(function (e) {
                  (e[(e.Left = 0)] = "Left"),
                    (e[(e.Centered = 1)] = "Centered"),
                    (e[(e.Right = 2)] = "Right");
                })(f || (f = {}));
                class w extends v {
                  constructor(e, t, a, o, i, n) {
                    super(e, t, a, o || new l(255, 255, 255), i || 0, !1),
                      (this.TextAlignment = f.Left),
                      n && (this.TextAlignment = n);
                  }
                  Draw(e, t, a, o, i, n, s, r, l) {
                    let m = e,
                      p = n,
                      g = n;
                    e || (e = new d(0, 0)),
                      e &&
                        !t &&
                        ((g = this.TextAlignment),
                        (m = this.caption),
                        (t = new _(
                          this.pos.X + e.Width,
                          this.pos.Y + e.Height
                        )),
                        (a = this.scale),
                        (o = this.color),
                        (i = this.font),
                        1 == p || 0 == p
                          ? (p = this.centered)
                          : ((p = void 0),
                            (s = this.DropShadow),
                            (r = this.Outline),
                            (l = this.WordWrap)));
                    const h = (c.width / c.height) * 1080,
                      u = this.pos.X / h,
                      y = this.pos.Y / 1080;
                    if (
                      (mp.game.ui.setTextFont(parseInt(i)),
                      mp.game.ui.setTextScale(1, a),
                      mp.game.ui.setTextColour(o.R, o.G, o.B, o.A),
                      void 0 !== p)
                    )
                      mp.game.ui.setTextCentre(p);
                    else {
                      switch (
                        (s && mp.game.ui.setTextDropshadow(2, 0, 0, 0, 0),
                        r && console.warn("not working!"),
                        g)
                      ) {
                        case f.Centered:
                          mp.game.ui.setTextCentre(!0);
                          break;
                        case f.Right:
                          mp.game.ui.setTextRightJustify(!0),
                            mp.game.ui.setTextWrap(0, u);
                      }
                      if (l) {
                        const e = (this.pos.X + l.Width) / h;
                        mp.game.ui.setTextWrap(u, e);
                      }
                    }
                    mp.game.ui.setTextEntry("STRING"),
                      w.AddLongString(m),
                      mp.game.ui.drawText(u, y);
                  }
                  static AddLongString(e) {
                    for (var t = 0; t < e.length; t += 99) {
                      const a = e.substr(t, Math.min(99, e.length - t));
                      mp.game.ui.addTextComponentSubstringPlayerName(a);
                    }
                  }
                }
                function S() {
                  var e,
                    t = "";
                  for (e = 0; e < 32; e += 1)
                    switch (e) {
                      case 8:
                      case 20:
                        (t += "-"),
                          (t += ((16 * Math.random()) | 0).toString(16));
                        break;
                      case 12:
                        (t += "-"), (t += "4");
                        break;
                      case 16:
                        (t += "-"),
                          (t += ((4 * Math.random()) | 8).toString(16));
                        break;
                      default:
                        t += ((16 * Math.random()) | 0).toString(16);
                    }
                  return t;
                }
                class M {
                  constructor(e, t = "") {
                    (this.Id = S()),
                      (this.BackColor = M.DefaultBackColor),
                      (this.HighlightedBackColor =
                        M.DefaultHighlightedBackColor),
                      (this.ForeColor = M.DefaultForeColor),
                      (this.HighlightedForeColor =
                        M.DefaultHighlightedForeColor),
                      (this.RightLabel = ""),
                      (this.LeftBadge = s.None),
                      (this.RightBadge = s.None),
                      (this.Enabled = !0),
                      (this._rectangle = new y(
                        new _(0, 0),
                        new d(431, 38),
                        new l(150, 0, 0, 0)
                      )),
                      (this._text = new w(
                        e,
                        new _(8, 0),
                        0.33,
                        l.WhiteSmoke,
                        r.ChaletLondon,
                        f.Left
                      )),
                      (this.Description = t),
                      (this._selectedSprite = new p(
                        "commonmenu",
                        "gradient_nav",
                        new _(0, 0),
                        new d(431, 38)
                      )),
                      (this._badgeLeft = new p(
                        "commonmenu",
                        "",
                        new _(0, 0),
                        new d(40, 40)
                      )),
                      (this._badgeRight = new p(
                        "commonmenu",
                        "",
                        new _(0, 0),
                        new d(40, 40)
                      )),
                      (this._labelText = new w(
                        "",
                        new _(0, 0),
                        0.35,
                        l.White,
                        0,
                        f.Right
                      ));
                  }
                  get Text() {
                    return this._text.caption;
                  }
                  set Text(e) {
                    this._text.caption = e;
                  }
                  SetVerticalPosition(e) {
                    (this._rectangle.pos = new _(
                      this.Offset.X,
                      e + 144 + this.Offset.Y
                    )),
                      (this._selectedSprite.pos = new _(
                        0 + this.Offset.X,
                        e + 144 + this.Offset.Y
                      )),
                      (this._text.pos = new _(
                        8 + this.Offset.X,
                        e + 147 + this.Offset.Y
                      )),
                      (this._badgeLeft.pos = new _(
                        0 + this.Offset.X,
                        e + 142 + this.Offset.Y
                      )),
                      (this._badgeRight.pos = new _(
                        385 + this.Offset.X,
                        e + 142 + this.Offset.Y
                      )),
                      (this._labelText.pos = new _(
                        420 + this.Offset.X,
                        e + 148 + this.Offset.Y
                      ));
                  }
                  addEvent(e, ...t) {
                    this._event = { event: e, args: t };
                  }
                  fireEvent() {
                    this._event &&
                      mp.events.call(
                        this._event.event,
                        this,
                        ...this._event.args
                      );
                  }
                  Draw() {
                    (this._rectangle.size = new d(
                      431 + this.Parent.WidthOffset,
                      38
                    )),
                      (this._selectedSprite.size = new d(
                        431 + this.Parent.WidthOffset,
                        38
                      )),
                      this.Hovered &&
                        !this.Selected &&
                        ((this._rectangle.color = new l(255, 255, 255, 20)),
                        this._rectangle.Draw()),
                      (this._selectedSprite.color = this.Selected
                        ? this.HighlightedBackColor
                        : this.BackColor),
                      this._selectedSprite.Draw(),
                      (this._text.color = this.Enabled
                        ? this.Selected
                          ? this.HighlightedForeColor
                          : this.ForeColor
                        : new l(163, 159, 148)),
                      this.LeftBadge != s.None
                        ? ((this._text.pos = new _(
                            35 + this.Offset.X,
                            this._text.pos.Y
                          )),
                          (this._badgeLeft.TextureDict = this.BadgeToSpriteLib(
                            this.LeftBadge
                          )),
                          (this._badgeLeft.TextureName = this.BadgeToSpriteName(
                            this.LeftBadge,
                            this.Selected
                          )),
                          (this._badgeLeft.color = this.IsBagdeWhiteSprite(
                            this.LeftBadge
                          )
                            ? this.Enabled
                              ? this.Selected
                                ? this.HighlightedForeColor
                                : this.ForeColor
                              : new l(163, 159, 148)
                            : l.White),
                          this._badgeLeft.Draw())
                        : (this._text.pos = new _(
                            8 + this.Offset.X,
                            this._text.pos.Y
                          )),
                      this.RightBadge != s.None &&
                        ((this._badgeRight.pos = new _(
                          385 + this.Offset.X + this.Parent.WidthOffset,
                          this._badgeRight.pos.Y
                        )),
                        (this._badgeRight.TextureDict = this.BadgeToSpriteLib(
                          this.RightBadge
                        )),
                        (this._badgeRight.TextureName = this.BadgeToSpriteName(
                          this.RightBadge,
                          this.Selected
                        )),
                        (this._badgeRight.color = this.IsBagdeWhiteSprite(
                          this.RightBadge
                        )
                          ? this.Enabled
                            ? this.Selected
                              ? this.HighlightedForeColor
                              : this.ForeColor
                            : new l(163, 159, 148)
                          : l.White),
                        this._badgeRight.Draw()),
                      this.RightLabel &&
                        "" !== this.RightLabel &&
                        ((this._labelText.pos = new _(
                          420 + this.Offset.X + this.Parent.WidthOffset,
                          this._labelText.pos.Y
                        )),
                        (this._labelText.caption = this.RightLabel),
                        (this._labelText.color = this._text.color =
                          this.Enabled
                            ? this.Selected
                              ? this.HighlightedForeColor
                              : this.ForeColor
                            : new l(163, 159, 148)),
                        this._labelText.Draw()),
                      this._text.Draw();
                  }
                  SetLeftBadge(e) {
                    this.LeftBadge = e;
                  }
                  SetRightBadge(e) {
                    this.RightBadge = e;
                  }
                  SetRightLabel(e) {
                    this.RightLabel = e;
                  }
                  BadgeToSpriteLib(e) {
                    return "commonmenu";
                  }
                  BadgeToSpriteName(e, t) {
                    switch (e) {
                      case s.None:
                        return "";
                      case s.BronzeMedal:
                        return "mp_medal_bronze";
                      case s.GoldMedal:
                        return "mp_medal_gold";
                      case s.SilverMedal:
                        return "medal_silver";
                      case s.Alert:
                        return "mp_alerttriangle";
                      case s.Crown:
                        return "mp_hostcrown";
                      case s.Ammo:
                        return t ? "shop_ammo_icon_b" : "shop_ammo_icon_a";
                      case s.Armour:
                        return t ? "shop_armour_icon_b" : "shop_armour_icon_a";
                      case s.Barber:
                        return t ? "shop_barber_icon_b" : "shop_barber_icon_a";
                      case s.Clothes:
                        return t
                          ? "shop_clothing_icon_b"
                          : "shop_clothing_icon_a";
                      case s.Franklin:
                        return t
                          ? "shop_franklin_icon_b"
                          : "shop_franklin_icon_a";
                      case s.Bike:
                        return t
                          ? "shop_garage_bike_icon_b"
                          : "shop_garage_bike_icon_a";
                      case s.Car:
                        return t ? "shop_garage_icon_b" : "shop_garage_icon_a";
                      case s.Gun:
                        return t
                          ? "shop_gunclub_icon_b"
                          : "shop_gunclub_icon_a";
                      case s.Heart:
                        return t ? "shop_health_icon_b" : "shop_health_icon_a";
                      case s.Lock:
                        return "shop_lock";
                      case s.Makeup:
                        return t ? "shop_makeup_icon_b" : "shop_makeup_icon_a";
                      case s.Mask:
                        return t ? "shop_mask_icon_b" : "shop_mask_icon_a";
                      case s.Michael:
                        return t
                          ? "shop_michael_icon_b"
                          : "shop_michael_icon_a";
                      case s.Star:
                        return "shop_new_star";
                      case s.Tatoo:
                        return t ? "shop_tattoos_icon_b" : "shop_tattoos_icon_";
                      case s.Tick:
                        return "shop_tick_icon";
                      case s.Trevor:
                        return t ? "shop_trevor_icon_b" : "shop_trevor_icon_a";
                      default:
                        return "";
                    }
                  }
                  IsBagdeWhiteSprite(e) {
                    switch (e) {
                      case s.Lock:
                      case s.Tick:
                      case s.Crown:
                        return !0;
                      default:
                        return !1;
                    }
                  }
                  BadgeToColor(e, t) {
                    switch (e) {
                      case s.Lock:
                      case s.Tick:
                      case s.Crown:
                        return t
                          ? new l(255, 0, 0, 0)
                          : new l(255, 255, 255, 255);
                      default:
                        return new l(255, 255, 255, 255);
                    }
                  }
                }
                (M.DefaultBackColor = l.Empty),
                  (M.DefaultHighlightedBackColor = l.White),
                  (M.DefaultForeColor = l.WhiteSmoke),
                  (M.DefaultHighlightedForeColor = l.Black);
                class b extends M {
                  constructor(e, t = !1, a = "") {
                    super(e, a),
                      (this.OnCheckedChanged = new g()),
                      (this.Checked = !1),
                      (this._checkedSprite = new p(
                        "commonmenu",
                        "shop_box_blank",
                        new _(410, 95),
                        new d(50, 50)
                      )),
                      (this.Checked = t);
                  }
                  get CheckedChanged() {
                    return this.OnCheckedChanged.expose();
                  }
                  SetVerticalPosition(e) {
                    super.SetVerticalPosition(e),
                      (this._checkedSprite.pos = new _(
                        380 + this.Offset.X + this.Parent.WidthOffset,
                        e + 138 + this.Offset.Y
                      ));
                  }
                  Draw() {
                    super.Draw(),
                      (this._checkedSprite.pos = this._checkedSprite.pos =
                        new _(
                          380 + this.Offset.X + this.Parent.WidthOffset,
                          this._checkedSprite.pos.Y
                        ));
                    const e =
                      this.HighlightedForeColor ==
                      M.DefaultHighlightedForeColor;
                    this.Selected && e
                      ? (this._checkedSprite.TextureName = this.Checked
                          ? "shop_box_tickb"
                          : "shop_box_blankb")
                      : (this._checkedSprite.TextureName = this.Checked
                          ? "shop_box_tick"
                          : "shop_box_blank"),
                      (this._checkedSprite.color = this.Enabled
                        ? this.Selected && !e
                          ? this.HighlightedForeColor
                          : this.ForeColor
                        : new l(163, 159, 148)),
                      this._checkedSprite.Draw();
                  }
                  SetRightBadge(e) {
                    return this;
                  }
                  SetRightLabel(e) {
                    return this;
                  }
                }
                class T {
                  constructor(e = "", t = null) {
                    (this.Id = S()), (this.DisplayText = e), (this.Data = t);
                  }
                }
                class C {
                  constructor(e) {
                    if (0 === e.length)
                      throw new Error("ItemsCollection cannot be empty");
                    this.items = e;
                  }
                  length() {
                    return this.items.length;
                  }
                  getListItems() {
                    const e = [];
                    for (const t of this.items)
                      t instanceof T
                        ? e.push(t)
                        : "string" == typeof t && e.push(new T(t.toString()));
                    return e;
                  }
                }
                class D {
                  static MeasureStringWidthNoConvert(e) {
                    return (
                      mp.game.ui.setTextEntryForWidth("STRING"),
                      w.AddLongString(e),
                      mp.game.ui.setTextFont(0),
                      mp.game.ui.setTextScale(0.35, 0.35),
                      mp.game.ui.getTextScreenWidth(!1)
                    );
                  }
                  static MeasureString(e) {
                    const t = (c.width / c.height) * 1080;
                    return this.MeasureStringWidthNoConvert(e) * t;
                  }
                }
                class P extends M {
                  constructor(e, t = "", a = new C([]), o = 0) {
                    super(e, t),
                      (this.currOffset = 0),
                      (this.collection = []),
                      (this.ScrollingEnabled = !0),
                      (this.HoldTimeBeforeScroll = 200),
                      (this.OnListChanged = new g()),
                      (this._index = 0),
                      (this.Collection = a.getListItems()),
                      (this.Index = o),
                      (this._arrowLeft = new p(
                        "commonmenu",
                        "arrowleft",
                        new _(110, 105),
                        new d(30, 30)
                      )),
                      (this._arrowRight = new p(
                        "commonmenu",
                        "arrowright",
                        new _(280, 105),
                        new d(30, 30)
                      )),
                      (this._itemText = new w(
                        "",
                        new _(290, 104),
                        0.35,
                        l.White,
                        r.ChaletLondon,
                        f.Right
                      ));
                  }
                  get Collection() {
                    return this.collection;
                  }
                  set Collection(e) {
                    if (!e) throw new Error("The collection can't be null");
                    this.collection = e;
                  }
                  set SelectedItem(e) {
                    const t = this.Collection.findIndex((t) => t.Id === e.Id);
                    this.Index = t > 0 ? t : 0;
                  }
                  get SelectedItem() {
                    return this.Collection.length > 0
                      ? this.Collection[this.Index]
                      : null;
                  }
                  get SelectedValue() {
                    return null == this.SelectedItem
                      ? null
                      : null == this.SelectedItem.Data
                      ? this.SelectedItem.DisplayText
                      : this.SelectedItem.Data;
                  }
                  get ListChanged() {
                    return this.OnListChanged.expose();
                  }
                  get Index() {
                    return null == this.Collection ||
                      (null != this.Collection && 0 == this.Collection.length)
                      ? -1
                      : this._index % this.Collection.length;
                  }
                  set Index(e) {
                    if (null == this.Collection) return;
                    if (null != this.Collection && 0 == this.Collection.length)
                      return;
                    this._index = 1e5 - (1e5 % this.Collection.length) + e;
                    const t =
                      this.Collection.length >= this.Index
                        ? this.Collection[this.Index].DisplayText
                        : " ";
                    this.currOffset = D.MeasureString(t);
                  }
                  setCollection(e) {
                    this.Collection = e.getListItems();
                  }
                  setCollectionItem(e, t, a = !0) {
                    if (e > this.Collection.length)
                      throw new Error("Index out of bounds");
                    "string" == typeof t && (t = new T(t)),
                      this.Collection.splice(e, 1, t),
                      a && (this.Index = 0);
                  }
                  SetVerticalPosition(e) {
                    (this._arrowLeft.pos = new _(
                      300 + this.Offset.X + this.Parent.WidthOffset,
                      147 + e + this.Offset.Y
                    )),
                      (this._arrowRight.pos = new _(
                        400 + this.Offset.X + this.Parent.WidthOffset,
                        147 + e + this.Offset.Y
                      )),
                      (this._itemText.pos = new _(
                        300 + this.Offset.X + this.Parent.WidthOffset,
                        e + 147 + this.Offset.Y
                      )),
                      super.SetVerticalPosition(e);
                  }
                  SetRightLabel(e) {
                    return this;
                  }
                  SetRightBadge(e) {
                    return this;
                  }
                  Draw() {
                    super.Draw();
                    const e =
                        this.Collection.length >= this.Index
                          ? this.Collection[this.Index].DisplayText
                          : " ",
                      t = this.currOffset;
                    (this._itemText.color = this.Enabled
                      ? this.Selected
                        ? this.HighlightedForeColor
                        : this.ForeColor
                      : new l(163, 159, 148)),
                      (this._itemText.caption = e),
                      (this._arrowLeft.color = this.Enabled
                        ? this.Selected
                          ? this.HighlightedForeColor
                          : this.ForeColor
                        : new l(163, 159, 148)),
                      (this._arrowRight.color = this.Enabled
                        ? this.Selected
                          ? this.HighlightedForeColor
                          : this.ForeColor
                        : new l(163, 159, 148)),
                      (this._arrowLeft.pos = new _(
                        375 - t + this.Offset.X + this.Parent.WidthOffset,
                        this._arrowLeft.pos.Y
                      )),
                      this.Selected
                        ? (this._arrowLeft.Draw(),
                          this._arrowRight.Draw(),
                          (this._itemText.pos = new _(
                            405 + this.Offset.X + this.Parent.WidthOffset,
                            this._itemText.pos.Y
                          )))
                        : (this._itemText.pos = new _(
                            420 + this.Offset.X + this.Parent.WidthOffset,
                            this._itemText.pos.Y
                          )),
                      this._itemText.Draw();
                  }
                }
                class E extends M {
                  get Index() {
                    return this._index % this._items.length;
                  }
                  set Index(e) {
                    this._index = 1e8 - (1e8 % this._items.length) + e;
                  }
                  constructor(e, t, a, o = "", i = !1) {
                    super(e, o),
                      (this._items = t),
                      (this._arrowLeft = new p(
                        "commonmenutu",
                        "arrowleft",
                        new _(0, 105),
                        new d(15, 15)
                      )),
                      (this._arrowRight = new p(
                        "commonmenutu",
                        "arrowright",
                        new _(0, 105),
                        new d(15, 15)
                      )),
                      (this._rectangleBackground = new y(
                        new _(0, 0),
                        new d(150, 9),
                        new l(4, 32, 57, 255)
                      )),
                      (this._rectangleSlider = new y(
                        new _(0, 0),
                        new d(75, 9),
                        new l(57, 116, 200, 255)
                      )),
                      (this._rectangleDivider = new y(
                        new _(0, 0),
                        new d(2.5, 20),
                        i ? l.WhiteSmoke : l.Transparent
                      )),
                      (this.Index = a);
                  }
                  SetVerticalPosition(e) {
                    (this._rectangleBackground.pos = new _(
                      250 + this.Offset.X + this.Parent.WidthOffset,
                      e + 158.5 + this.Offset.Y
                    )),
                      (this._rectangleSlider.pos = new _(
                        250 + this.Offset.X + this.Parent.WidthOffset,
                        e + 158.5 + this.Offset.Y
                      )),
                      (this._rectangleDivider.pos = new _(
                        323.5 + this.Offset.X + this.Parent.WidthOffset,
                        e + 153 + this.Offset.Y
                      )),
                      (this._arrowLeft.pos = new _(
                        235 + this.Offset.X + this.Parent.WidthOffset,
                        155.5 + e + this.Offset.Y
                      )),
                      (this._arrowRight.pos = new _(
                        400 + this.Offset.X + this.Parent.WidthOffset,
                        155.5 + e + this.Offset.Y
                      )),
                      super.SetVerticalPosition(e);
                  }
                  IndexToItem(e) {
                    return this._items[e];
                  }
                  Draw() {
                    super.Draw(),
                      (this._arrowLeft.color = this.Enabled
                        ? this.Selected
                          ? l.Black
                          : l.WhiteSmoke
                        : new l(163, 159, 148)),
                      (this._arrowRight.color = this.Enabled
                        ? this.Selected
                          ? l.Black
                          : l.WhiteSmoke
                        : new l(163, 159, 148));
                    let e =
                      ((this._rectangleBackground.size.Width -
                        this._rectangleSlider.size.Width) /
                        (this._items.length - 1)) *
                      this.Index;
                    (this._rectangleSlider.pos = new _(
                      250 + this.Offset.X + e + +this.Parent.WidthOffset,
                      this._rectangleSlider.pos.Y
                    )),
                      this.Selected &&
                        (this._arrowLeft.Draw(), this._arrowRight.Draw()),
                      this._rectangleBackground.Draw(),
                      this._rectangleSlider.Draw(),
                      this._rectangleDivider.Draw();
                  }
                  SetRightBadge(e) {}
                  SetRightLabel(e) {}
                }
                class F extends u {
                  constructor(e, t, a) {
                    super(e, t, a), (this.Items = []);
                  }
                  addItem(e) {
                    this.Items.push(e);
                  }
                  Draw(e) {
                    if (!this.enabled) return;
                    e = e || new d();
                    const t = 1080,
                      a = t * (c.width / c.height),
                      o = this.size.Width / a,
                      i = this.size.Height / t,
                      n = (this.pos.X + e.Width) / a + 0.5 * o,
                      s = (this.pos.Y + e.Height) / t + 0.5 * i;
                    for (var r of (mp.game.graphics.drawRect(
                      n,
                      s,
                      o,
                      i,
                      this.color.R,
                      this.color.G,
                      this.color.B,
                      this.color.A
                    ),
                    this.Items))
                      r.Draw(
                        new d(this.pos.X + e.Width, this.pos.Y + e.Height)
                      );
                  }
                }
                class I {
                  static PlaySound(e, t) {
                    mp.game.audio.playSound(-1, e, t, !1, 0, !0);
                  }
                }
                o.d(t, "default", function () {
                  return R;
                });
                class R {
                  constructor(e, t, a, o, i) {
                    (this.Id = S()),
                      (this.counterPretext = ""),
                      (this.counterOverride = void 0),
                      (this.lastUpDownNavigation = 0),
                      (this.lastLeftRightNavigation = 0),
                      (this._activeItem = 1e3),
                      (this.extraOffset = 0),
                      (this.WidthOffset = 0),
                      (this.Visible = !0),
                      (this.MouseControlsEnabled = !1),
                      (this._justOpened = !0),
                      (this.safezoneOffset = new _(0, 0)),
                      (this.MaxItemsOnScreen = 9),
                      (this._maxItem = this.MaxItemsOnScreen),
                      (this.AUDIO_LIBRARY = "HUD_FRONTEND_DEFAULT_SOUNDSET"),
                      (this.AUDIO_UPDOWN = "NAV_UP_DOWN"),
                      (this.AUDIO_LEFTRIGHT = "NAV_LEFT_RIGHT"),
                      (this.AUDIO_SELECT = "SELECT"),
                      (this.AUDIO_BACK = "BACK"),
                      (this.AUDIO_ERROR = "ERROR"),
                      (this.MenuItems = []),
                      (this.IndexChange = new g()),
                      (this.ListChange = new g()),
                      (this.SliderChange = new g()),
                      (this.SliderSelect = new g()),
                      (this.CheckboxChange = new g()),
                      (this.ItemSelect = new g()),
                      (this.MenuOpen = new g()),
                      (this.MenuClose = new g()),
                      (this.MenuChange = new g()),
                      (this.MouseEdgeEnabled = !0),
                      a instanceof _ || (a = _.Parse(a)),
                      (this.title = e),
                      (this.subtitle = t),
                      (this.spriteLibrary = o || "commonmenu"),
                      (this.spriteName = i || "interaction_bgd"),
                      (this.offset = new _(a.X, a.Y)),
                      (this.Children = new Map()),
                      (this._mainMenu = new F(
                        new _(0, 0),
                        new d(700, 500),
                        new l(0, 0, 0, 0)
                      )),
                      (this._logo = new p(
                        this.spriteLibrary,
                        this.spriteName,
                        new _(0 + this.offset.X, 0 + this.offset.Y),
                        new d(431, 107)
                      )),
                      this._mainMenu.addItem(
                        (this._title = new w(
                          this.title,
                          new _(215 + this.offset.X, 20 + this.offset.Y),
                          1.15,
                          new l(255, 255, 255),
                          1,
                          f.Centered
                        ))
                      ),
                      "" !== this.subtitle &&
                        (this._mainMenu.addItem(
                          new y(
                            new _(0 + this.offset.X, 107 + this.offset.Y),
                            new d(431, 37),
                            new l(0, 0, 0, 255)
                          )
                        ),
                        this._mainMenu.addItem(
                          (this._subtitle = new w(
                            this.subtitle,
                            new _(8 + this.offset.X, 110 + this.offset.Y),
                            0.35,
                            new l(255, 255, 255),
                            0,
                            f.Left
                          ))
                        ),
                        this.subtitle.startsWith("~") &&
                          (this.counterPretext = this.subtitle.substr(0, 3)),
                        (this._counterText = new w(
                          "",
                          new _(425 + this.offset.X, 110 + this.offset.Y),
                          0.35,
                          new l(255, 255, 255),
                          0,
                          f.Right
                        )),
                        (this.extraOffset += 37)),
                      (this._upAndDownSprite = new p(
                        "commonmenu",
                        "shop_arrows_upanddown",
                        new _(
                          190 + this.offset.X,
                          147 +
                            37 * (this.MaxItemsOnScreen + 1) +
                            this.offset.Y -
                            37 +
                            this.extraOffset
                        ),
                        new d(50, 50)
                      )),
                      (this._extraRectangleUp = new y(
                        new _(
                          0 + this.offset.X,
                          144 +
                            38 * (this.MaxItemsOnScreen + 1) +
                            this.offset.Y -
                            37 +
                            this.extraOffset
                        ),
                        new d(431, 18),
                        new l(0, 0, 0, 200)
                      )),
                      (this._extraRectangleDown = new y(
                        new _(
                          0 + this.offset.X,
                          162 +
                            38 * (this.MaxItemsOnScreen + 1) +
                            this.offset.Y -
                            37 +
                            this.extraOffset
                        ),
                        new d(431, 18),
                        new l(0, 0, 0, 200)
                      )),
                      (this._descriptionBar = new y(
                        new _(this.offset.X, 123),
                        new d(431, 4),
                        l.Black
                      )),
                      (this._descriptionRectangle = new p(
                        "commonmenu",
                        "gradient_bgd",
                        new _(this.offset.X, 127),
                        new d(431, 30)
                      )),
                      (this._descriptionText = new w(
                        "Description",
                        new _(this.offset.X + 5, 125),
                        0.35,
                        new l(255, 255, 255, 255),
                        r.ChaletLondon,
                        f.Left
                      )),
                      (this._background = new p(
                        "commonmenu",
                        "gradient_bgd",
                        new _(
                          this.offset.X,
                          144 + this.offset.Y - 37 + this.extraOffset
                        ),
                        new d(290, 25)
                      )),
                      mp.events.add("render", this.render.bind(this)),
                      console.log(`Created Native UI! ${this.title}`);
                  }
                  get CurrentSelection() {
                    return this._activeItem % this.MenuItems.length;
                  }
                  set CurrentSelection(e) {
                    (this.MenuItems[
                      this._activeItem % this.MenuItems.length
                    ].Selected = !1),
                      (this._activeItem =
                        1e3 - (1e3 % this.MenuItems.length) + e),
                      this.CurrentSelection > this._maxItem
                        ? ((this._maxItem = this.CurrentSelection),
                          (this._minItem =
                            this.CurrentSelection - this.MaxItemsOnScreen))
                        : this.CurrentSelection < this._minItem &&
                          ((this._maxItem =
                            this.MaxItemsOnScreen + this.CurrentSelection),
                          (this._minItem = this.CurrentSelection));
                  }
                  RecalculateDescriptionPosition() {
                    (this._descriptionBar.pos = new _(
                      this.offset.X,
                      112 + this.extraOffset + this.offset.Y
                    )),
                      (this._descriptionRectangle.pos = new _(
                        this.offset.X,
                        112 + this.extraOffset + this.offset.Y
                      )),
                      (this._descriptionText.pos = new _(
                        this.offset.X + 8,
                        118 + this.extraOffset + this.offset.Y
                      )),
                      (this._descriptionBar.size = new d(
                        431 + this.WidthOffset,
                        4
                      )),
                      (this._descriptionRectangle.size = new d(
                        431 + this.WidthOffset,
                        30
                      ));
                    let e = this.MenuItems.length;
                    e > this.MaxItemsOnScreen + 1 &&
                      (e = this.MaxItemsOnScreen + 2),
                      (this._descriptionBar.pos = new _(
                        this.offset.X,
                        38 * e + this._descriptionBar.pos.Y
                      )),
                      (this._descriptionRectangle.pos = new _(
                        this.offset.X,
                        38 * e + this._descriptionRectangle.pos.Y
                      )),
                      (this._descriptionText.pos = new _(
                        this.offset.X + 8,
                        38 * e + this._descriptionText.pos.Y
                      ));
                  }
                  SetMenuWidthOffset(e) {
                    (this.WidthOffset = e),
                      null != this._logo &&
                        (this._logo.size = new d(431 + this.WidthOffset, 107)),
                      (this._mainMenu.Items[0].pos = new _(
                        (this.WidthOffset + this.offset.X + 431) / 2,
                        20 + this.offset.Y
                      )),
                      this._counterText &&
                        (this._counterText.pos = new _(
                          425 + this.offset.X + e,
                          110 + this.offset.Y
                        )),
                      this._mainMenu.Items.length >= 2 &&
                        (this._mainMenu.Items[1].size = new d(
                          431 + this.WidthOffset,
                          37
                        ));
                  }
                  AddItem(e) {
                    this._justOpened && (this._justOpened = !1),
                      (e.Offset = this.offset),
                      (e.Parent = this),
                      e.SetVerticalPosition(
                        25 * this.MenuItems.length - 37 + this.extraOffset
                      ),
                      this.MenuItems.push(e),
                      (e.Description = this.FormatDescription(e.Description)),
                      this.RefreshIndex(),
                      this.RecalculateDescriptionPosition();
                  }
                  RefreshIndex() {
                    if (0 == this.MenuItems.length)
                      return (
                        (this._activeItem = 1e3),
                        (this._maxItem = this.MaxItemsOnScreen),
                        void (this._minItem = 0)
                      );
                    for (let e = 0; e < this.MenuItems.length; e++)
                      this.MenuItems[e].Selected = !1;
                    (this._activeItem = 1e3 - (1e3 % this.MenuItems.length)),
                      (this._maxItem = this.MaxItemsOnScreen),
                      (this._minItem = 0);
                  }
                  Clear() {
                    (this.MenuItems = []),
                      this.RecalculateDescriptionPosition();
                  }
                  Open() {
                    I.PlaySound(this.AUDIO_BACK, this.AUDIO_LIBRARY),
                      (this.Visible = !0),
                      (this._justOpened = !0),
                      this.MenuOpen.emit();
                  }
                  Close() {
                    I.PlaySound(this.AUDIO_BACK, this.AUDIO_LIBRARY),
                      (this.Visible = !1),
                      this.RefreshIndex(),
                      this.MenuClose.emit();
                  }
                  set Subtitle(e) {
                    (this.subtitle = e), (this._subtitle.caption = e);
                  }
                  GoLeft() {
                    if (
                      this.MenuItems[this.CurrentSelection] instanceof P ||
                      this.MenuItems[this.CurrentSelection] instanceof E
                    )
                      if (this.MenuItems[this.CurrentSelection] instanceof P) {
                        const e = this.MenuItems[this.CurrentSelection];
                        if (0 == e.Collection.length) return;
                        e.Index--,
                          I.PlaySound(this.AUDIO_LEFTRIGHT, this.AUDIO_LIBRARY),
                          this.ListChange.emit(e, e.Index);
                      } else if (
                        this.MenuItems[this.CurrentSelection] instanceof E
                      ) {
                        const e = this.MenuItems[this.CurrentSelection];
                        (e.Index = e.Index - 1),
                          I.PlaySound(this.AUDIO_LEFTRIGHT, this.AUDIO_LIBRARY),
                          this.SliderChange.emit(
                            e,
                            e.Index,
                            e.IndexToItem(e.Index)
                          );
                      }
                  }
                  GoRight() {
                    if (
                      this.MenuItems[this.CurrentSelection] instanceof P ||
                      this.MenuItems[this.CurrentSelection] instanceof E
                    )
                      if (this.MenuItems[this.CurrentSelection] instanceof P) {
                        const e = this.MenuItems[this.CurrentSelection];
                        if (0 == e.Collection.length) return;
                        e.Index++,
                          I.PlaySound(this.AUDIO_LEFTRIGHT, this.AUDIO_LIBRARY),
                          this.ListChange.emit(e, e.Index);
                      } else if (
                        this.MenuItems[this.CurrentSelection] instanceof E
                      ) {
                        const e = this.MenuItems[this.CurrentSelection];
                        e.Index++,
                          I.PlaySound(this.AUDIO_LEFTRIGHT, this.AUDIO_LIBRARY),
                          this.SliderChange.emit(
                            e,
                            e.Index,
                            e.IndexToItem(e.Index)
                          );
                      }
                  }
                  SelectItem() {
                    if (!this.MenuItems[this.CurrentSelection].Enabled)
                      return void I.PlaySound(
                        this.AUDIO_ERROR,
                        this.AUDIO_LIBRARY
                      );
                    const e = this.MenuItems[this.CurrentSelection];
                    if (this.MenuItems[this.CurrentSelection] instanceof b)
                      (e.Checked = !e.Checked),
                        I.PlaySound(this.AUDIO_SELECT, this.AUDIO_LIBRARY),
                        this.CheckboxChange.emit(e, e.Checked);
                    else if (
                      (I.PlaySound(this.AUDIO_SELECT, this.AUDIO_LIBRARY),
                      this.ItemSelect.emit(e, this.CurrentSelection),
                      this.Children.has(e.Id))
                    ) {
                      const t = this.Children.get(e.Id);
                      (this.Visible = !1),
                        (t.Visible = !0),
                        (t._justOpened = !0),
                        t.MenuOpen.emit(),
                        this.MenuChange.emit(t, !0);
                    }
                    e.fireEvent();
                  }
                  getMousePosition(e = !1) {
                    const t = c.width,
                      a = c.height,
                      o = mp.gui.cursor.position;
                    let [i, n] = [o[0], o[1]];
                    return e && ([i, n] = [o[0] / t, o[1] / a]), [i, n];
                  }
                  GetScreenResolutionMantainRatio() {
                    return new d((c.width / c.height) * 1080, 1080);
                  }
                  IsMouseInBounds(e, t) {
                    this.GetScreenResolutionMantainRatio();
                    const [a, o] = this.getMousePosition();
                    return (
                      a >= e.X &&
                      a <= e.X + t.Width &&
                      o > e.Y &&
                      o < e.Y + t.Height
                    );
                  }
                  IsMouseInListItemArrows(e, t, a) {
                    mp.game.invoke(
                      "0x54ce8ac98e120cab".toUpperCase(),
                      "jamyfafi"
                    ),
                      mp.game.ui.addTextComponentSubstringPlayerName(e.Text);
                    var o = this.GetScreenResolutionMantainRatio(),
                      i = (o.Width / o.Height) * 1080;
                    const n =
                        5 +
                        mp.game.invoke("0x85f061da64ed2f67".toUpperCase(), 0) *
                          i *
                          0.35 +
                        10,
                      s = 431 - n;
                    return this.IsMouseInBounds(t, new d(n, 38))
                      ? 1
                      : this.IsMouseInBounds(new _(t.X + n, t.Y), new d(s, 38))
                      ? 2
                      : 0;
                  }
                  ProcessMouse() {
                    if (
                      !this.Visible ||
                      this._justOpened ||
                      0 == this.MenuItems.length ||
                      !this.MouseControlsEnabled
                    )
                      return void this.MenuItems.filter(
                        (e) => e.Hovered
                      ).forEach((e) => (e.Hovered = !1));
                    mp.gui.cursor.visible || (mp.gui.cursor.visible = !0);
                    let e = this.MenuItems.length - 1,
                      t = 0;
                    this.MenuItems.length > this.MaxItemsOnScreen + 1 &&
                      (e = this._maxItem),
                      this.IsMouseInBounds(new _(0, 0), new d(30, 1080)) &&
                      this.MouseEdgeEnabled
                        ? (mp.game.cam.setGameplayCamRelativeHeading(
                            mp.game.cam.getGameplayCamRelativeHeading() + 5
                          ),
                          mp.game.ui.setCursorSprite(6))
                        : this.IsMouseInBounds(
                            new _(
                              this.GetScreenResolutionMantainRatio().Width - 30,
                              0
                            ),
                            new d(30, 1080)
                          ) && this.MouseEdgeEnabled
                        ? (mp.game.cam.setGameplayCamRelativeHeading(
                            mp.game.cam.getGameplayCamRelativeHeading() - 5
                          ),
                          mp.game.ui.setCursorSprite(7))
                        : this.MouseEdgeEnabled &&
                          mp.game.ui.setCursorSprite(1);
                    for (let o = this._minItem; o <= e; o++) {
                      let e = this.offset.X,
                        i =
                          this.offset.Y + 144 - 37 + this.extraOffset + 38 * t,
                        n = 431 + this.WidthOffset;
                      const s = 38,
                        r = this.MenuItems[o];
                      if (this.IsMouseInBounds(new _(e, i), new d(n, s))) {
                        if (
                          ((r.Hovered = !0),
                          mp.game.controls.isControlJustPressed(0, 24) ||
                            mp.game.controls.isDisabledControlJustPressed(
                              0,
                              24
                            ))
                        )
                          if (r.Selected && r.Enabled)
                            if (
                              this.MenuItems[o] instanceof P &&
                              this.IsMouseInListItemArrows(
                                this.MenuItems[o],
                                new _(e, i),
                                0
                              ) > 0
                            )
                              switch (
                                this.IsMouseInListItemArrows(
                                  this.MenuItems[o],
                                  new _(e, i),
                                  0
                                )
                              ) {
                                case 1:
                                  I.PlaySound(
                                    this.AUDIO_SELECT,
                                    this.AUDIO_LIBRARY
                                  ),
                                    this.MenuItems[o].fireEvent(),
                                    this.ItemSelect.emit(this.MenuItems[o], o);
                                  break;
                                case 2:
                                  var a = this.MenuItems[o];
                                  (null == a.Collection
                                    ? a.Items.Count
                                    : a.Collection.Count) > 0 &&
                                    (a.Index++,
                                    I.PlaySound(
                                      this.AUDIO_LEFTRIGHT,
                                      this.AUDIO_LIBRARY
                                    ),
                                    this.ListChange.emit(a, a.Index));
                              }
                            else this.SelectItem();
                          else
                            r.Selected
                              ? !r.Enabled &&
                                r.Selected &&
                                I.PlaySound(
                                  this.AUDIO_ERROR,
                                  this.AUDIO_LIBRARY
                                )
                              : ((this.CurrentSelection = o),
                                I.PlaySound(
                                  this.AUDIO_UPDOWN,
                                  this.AUDIO_LIBRARY
                                ),
                                this.IndexChange.emit(this.CurrentSelection),
                                this.SelectItem());
                      } else r.Hovered = !1;
                      t++;
                    }
                    const o =
                        144 +
                        38 * (this.MaxItemsOnScreen + 1) +
                        this.offset.Y -
                        37 +
                        this.extraOffset +
                        this.safezoneOffset.Y,
                      i = this.safezoneOffset.X + this.offset.X;
                    this.MenuItems.length <= this.MaxItemsOnScreen + 1 ||
                      (this.IsMouseInBounds(
                        new _(i, o),
                        new d(431 + this.WidthOffset, 18)
                      )
                        ? ((this._extraRectangleUp.color = new l(
                            30,
                            30,
                            30,
                            255
                          )),
                          (mp.game.controls.isControlJustPressed(0, 24) ||
                            mp.game.controls.isDisabledControlJustPressed(
                              0,
                              24
                            )) &&
                            (this.MenuItems.length > this.MaxItemsOnScreen + 1
                              ? this.GoUpOverflow()
                              : this.GoUp()))
                        : (this._extraRectangleUp.color = new l(0, 0, 0, 200)),
                      this.IsMouseInBounds(
                        new _(i, o + 18),
                        new d(431 + this.WidthOffset, 18)
                      )
                        ? ((this._extraRectangleDown.color = new l(
                            30,
                            30,
                            30,
                            255
                          )),
                          (mp.game.controls.isControlJustPressed(0, 24) ||
                            mp.game.controls.isDisabledControlJustPressed(
                              0,
                              24
                            )) &&
                            (this.MenuItems.length > this.MaxItemsOnScreen + 1
                              ? this.GoDownOverflow()
                              : this.GoDown()))
                        : (this._extraRectangleDown.color = new l(
                            0,
                            0,
                            0,
                            200
                          )));
                  }
                  ProcessControl() {
                    this.Visible &&
                      (this._justOpened
                        ? (this._justOpened = !1)
                        : (mp.game.controls.isControlJustReleased(0, 177) &&
                            this.GoBack(),
                          0 != this.MenuItems.length &&
                            (mp.game.controls.isControlPressed(0, 172) &&
                            this.lastUpDownNavigation + 120 < Date.now()
                              ? ((this.lastUpDownNavigation = Date.now()),
                                this.MenuItems.length >
                                this.MaxItemsOnScreen + 1
                                  ? this.GoUpOverflow()
                                  : this.GoUp())
                              : mp.game.controls.isControlJustReleased(0, 172)
                              ? (this.lastUpDownNavigation = 0)
                              : mp.game.controls.isControlPressed(0, 173) &&
                                this.lastUpDownNavigation + 120 < Date.now()
                              ? ((this.lastUpDownNavigation = Date.now()),
                                this.MenuItems.length >
                                this.MaxItemsOnScreen + 1
                                  ? this.GoDownOverflow()
                                  : this.GoDown())
                              : mp.game.controls.isControlJustReleased(0, 173)
                              ? (this.lastUpDownNavigation = 0)
                              : mp.game.controls.isControlPressed(0, 174) &&
                                this.lastLeftRightNavigation + 100 < Date.now()
                              ? ((this.lastLeftRightNavigation = Date.now()),
                                this.GoLeft())
                              : mp.game.controls.isControlJustReleased(0, 174)
                              ? (this.lastLeftRightNavigation = 0)
                              : mp.game.controls.isControlPressed(0, 175) &&
                                this.lastLeftRightNavigation + 100 < Date.now()
                              ? ((this.lastLeftRightNavigation = Date.now()),
                                this.GoRight())
                              : mp.game.controls.isControlJustReleased(0, 175)
                              ? (this.lastLeftRightNavigation = 0)
                              : mp.game.controls.isControlJustPressed(0, 201) &&
                                this.SelectItem())));
                  }
                  FormatDescription(e) {
                    e.length > 99 && (e = e.slice(0, 99));
                    const t = 425 + this.WidthOffset;
                    let a = 0,
                      o = "";
                    const i = e.split(" ");
                    for (const e of i) {
                      const i = D.MeasureString(e);
                      (a += i),
                        a > t
                          ? ((o += "\n" + e + " "),
                            (a = i + D.MeasureString(" ")))
                          : ((o += e + " "), (a += D.MeasureString(" ")));
                    }
                    return o;
                  }
                  GoUpOverflow() {
                    this.MenuItems.length <= this.MaxItemsOnScreen + 1 ||
                      (this._activeItem % this.MenuItems.length <= this._minItem
                        ? this._activeItem % this.MenuItems.length == 0
                          ? ((this._minItem =
                              this.MenuItems.length -
                              this.MaxItemsOnScreen -
                              1),
                            (this._maxItem = this.MenuItems.length - 1),
                            (this.MenuItems[
                              this._activeItem % this.MenuItems.length
                            ].Selected = !1),
                            (this._activeItem =
                              1e3 - (1e3 % this.MenuItems.length)),
                            (this._activeItem += this.MenuItems.length - 1),
                            (this.MenuItems[
                              this._activeItem % this.MenuItems.length
                            ].Selected = !0))
                          : (this._minItem--,
                            this._maxItem--,
                            (this.MenuItems[
                              this._activeItem % this.MenuItems.length
                            ].Selected = !1),
                            this._activeItem--,
                            (this.MenuItems[
                              this._activeItem % this.MenuItems.length
                            ].Selected = !0))
                        : ((this.MenuItems[
                            this._activeItem % this.MenuItems.length
                          ].Selected = !1),
                          this._activeItem--,
                          (this.MenuItems[
                            this._activeItem % this.MenuItems.length
                          ].Selected = !0)),
                      I.PlaySound(this.AUDIO_UPDOWN, this.AUDIO_LIBRARY),
                      this.IndexChange.emit(this.CurrentSelection));
                  }
                  GoUp() {
                    this.MenuItems.length > this.MaxItemsOnScreen + 1 ||
                      ((this.MenuItems[
                        this._activeItem % this.MenuItems.length
                      ].Selected = !1),
                      this._activeItem--,
                      (this.MenuItems[
                        this._activeItem % this.MenuItems.length
                      ].Selected = !0),
                      I.PlaySound(this.AUDIO_UPDOWN, this.AUDIO_LIBRARY),
                      this.IndexChange.emit(this.CurrentSelection));
                  }
                  GoDownOverflow() {
                    this.MenuItems.length <= this.MaxItemsOnScreen + 1 ||
                      (this._activeItem % this.MenuItems.length >= this._maxItem
                        ? this._activeItem % this.MenuItems.length ==
                          this.MenuItems.length - 1
                          ? ((this._minItem = 0),
                            (this._maxItem = this.MaxItemsOnScreen),
                            (this.MenuItems[
                              this._activeItem % this.MenuItems.length
                            ].Selected = !1),
                            (this._activeItem =
                              1e3 - (1e3 % this.MenuItems.length)),
                            (this.MenuItems[
                              this._activeItem % this.MenuItems.length
                            ].Selected = !0))
                          : (this._minItem++,
                            this._maxItem++,
                            (this.MenuItems[
                              this._activeItem % this.MenuItems.length
                            ].Selected = !1),
                            this._activeItem++,
                            (this.MenuItems[
                              this._activeItem % this.MenuItems.length
                            ].Selected = !0))
                        : ((this.MenuItems[
                            this._activeItem % this.MenuItems.length
                          ].Selected = !1),
                          this._activeItem++,
                          (this.MenuItems[
                            this._activeItem % this.MenuItems.length
                          ].Selected = !0)),
                      I.PlaySound(this.AUDIO_UPDOWN, this.AUDIO_LIBRARY),
                      this.IndexChange.emit(this.CurrentSelection));
                  }
                  GoDown() {
                    this.MenuItems.length > this.MaxItemsOnScreen + 1 ||
                      ((this.MenuItems[
                        this._activeItem % this.MenuItems.length
                      ].Selected = !1),
                      this._activeItem++,
                      (this.MenuItems[
                        this._activeItem % this.MenuItems.length
                      ].Selected = !0),
                      I.PlaySound(this.AUDIO_UPDOWN, this.AUDIO_LIBRARY),
                      this.IndexChange.emit(this.CurrentSelection));
                  }
                  GoBack() {
                    I.PlaySound(this.AUDIO_BACK, this.AUDIO_LIBRARY),
                      (this.Visible = !1),
                      null != this.ParentMenu &&
                        ((this.ParentMenu.Visible = !0),
                        (this.ParentMenu._justOpened = !0),
                        this.ParentMenu.MenuOpen.emit(),
                        this.MenuChange.emit(this.ParentMenu, !1)),
                      this.MenuClose.emit();
                  }
                  BindMenuToItem(e, t) {
                    (e.ParentMenu = this),
                      (e.ParentItem = t),
                      this.Children.set(t.Id, e);
                  }
                  ReleaseMenuFromItem(e) {
                    if (!this.Children.has(e.Id)) return !1;
                    const t = this.Children.get(e.Id);
                    return (
                      (t.ParentItem = null),
                      (t.ParentMenu = null),
                      this.Children.delete(e.Id),
                      !0
                    );
                  }
                  render() {
                    if (this.Visible) {
                      if (
                        (this._justOpened &&
                          (null == this._logo ||
                            this._logo.IsTextureDictionaryLoaded ||
                            this._logo.LoadTextureDictionary(),
                          this._background.IsTextureDictionaryLoaded ||
                            this._background.LoadTextureDictionary(),
                          this._descriptionRectangle
                            .IsTextureDictionaryLoaded ||
                            this._descriptionRectangle.LoadTextureDictionary(),
                          this._upAndDownSprite.IsTextureDictionaryLoaded ||
                            this._upAndDownSprite.LoadTextureDictionary()),
                        this._mainMenu.Draw(),
                        this.ProcessMouse(),
                        this.ProcessControl(),
                        (this._background.size =
                          this.MenuItems.length > this.MaxItemsOnScreen + 1
                            ? new d(
                                431 + this.WidthOffset,
                                38 * (this.MaxItemsOnScreen + 1)
                              )
                            : new d(
                                431 + this.WidthOffset,
                                38 * this.MenuItems.length
                              )),
                        this._background.Draw(),
                        this.MenuItems.length > 0 &&
                          ((this.MenuItems[
                            this._activeItem % this.MenuItems.length
                          ].Selected = !0),
                          "" !==
                            this.MenuItems[
                              this._activeItem % this.MenuItems.length
                            ].Description.trim()))
                      ) {
                        this.RecalculateDescriptionPosition();
                        let e =
                          this.MenuItems[
                            this._activeItem % this.MenuItems.length
                          ].Description;
                        this._descriptionText.caption = e;
                        const t =
                          this._descriptionText.caption.split("\n").length;
                        (this._descriptionRectangle.size = new d(
                          431 + this.WidthOffset,
                          25 * t + 15
                        )),
                          this._descriptionBar.Draw(),
                          this._descriptionRectangle.Draw(),
                          this._descriptionText.Draw();
                      }
                      if (this.MenuItems.length <= this.MaxItemsOnScreen + 1) {
                        let e = 0;
                        for (const t of this.MenuItems)
                          t.SetVerticalPosition(38 * e - 37 + this.extraOffset),
                            t.Draw(),
                            e++;
                        this._counterText &&
                          this.counterOverride &&
                          ((this._counterText.caption =
                            this.counterPretext + this.counterOverride),
                          this._counterText.Draw());
                      } else {
                        let t = 0;
                        for (let a = this._minItem; a <= this._maxItem; a++) {
                          var e = this.MenuItems[a];
                          e.SetVerticalPosition(38 * t - 37 + this.extraOffset),
                            e.Draw(),
                            t++;
                        }
                        if (
                          ((this._extraRectangleUp.size = new d(
                            431 + this.WidthOffset,
                            18
                          )),
                          (this._extraRectangleDown.size = new d(
                            431 + this.WidthOffset,
                            18
                          )),
                          (this._upAndDownSprite.pos = new _(
                            190 + this.offset.X + this.WidthOffset / 2,
                            147 +
                              37 * (this.MaxItemsOnScreen + 1) +
                              this.offset.Y -
                              37 +
                              this.extraOffset
                          )),
                          this._extraRectangleUp.Draw(),
                          this._extraRectangleDown.Draw(),
                          this._upAndDownSprite.Draw(),
                          this._counterText)
                        ) {
                          if (this.counterOverride)
                            this._counterText.caption =
                              this.counterPretext + this.counterOverride;
                          else {
                            const e =
                              this.CurrentSelection +
                              1 +
                              " / " +
                              this.MenuItems.length;
                            this._counterText.caption = this.counterPretext + e;
                          }
                          this._counterText.Draw();
                        }
                      }
                      this._logo.Draw();
                    }
                  }
                }
                (a.g.NativeMenu = R),
                  (a.g.UIMenuItem = M),
                  (a.g.UIMenuListItem = P),
                  (a.g.UIMenuCheckboxItem = b),
                  (a.g.UIMenuSliderItem = E),
                  (a.g.BadgeStyle = s),
                  (a.g.Point = _),
                  (a.g.Size = d),
                  (a.g.Color = l),
                  (a.g.Font = r),
                  (a.g.ItemsCollection = C),
                  (a.g.ListItem = T);
              },
            ]);
          },
          3659: (e, t, a) => {
            mp.game.audio.setAudioFlag("DisableFlightMusic", !0),
              (a.g.getSafeZCoords = (e, t, o, i) => {
                try {
                  var n = 0,
                    s = 0,
                    r = setInterval(function () {
                      try {
                        if (
                          (s++,
                          mp.game.streaming.setFocusArea(e, t, 1e3, 0, 0, 0),
                          0 != o)
                        )
                          return (
                            (n = mp.game.gameplay.getGroundZFor3dCoord(
                              e,
                              t,
                              o,
                              0,
                              !1
                            )),
                            mp.game.invoke(
                              "0x198F77705FA0931D",
                              a.g.localplayer.handle
                            ),
                            i(n + 0.1),
                            void clearInterval(r)
                          );
                        for (var l = 800; l >= 0; l -= 20) {
                          var m = l + 0.1;
                          if (
                            (mp.game.streaming.requestCollisionAtCoord(e, t, m),
                            s >= 50 &&
                              a.g.localplayer.setCoordsNoOffset(
                                e,
                                t,
                                m,
                                !1,
                                !1,
                                !1
                              ),
                            0 !==
                              (n = mp.game.gameplay.getGroundZFor3dCoord(
                                e,
                                t,
                                m,
                                0,
                                !1
                              )))
                          )
                            return (
                              mp.game.invoke(
                                "0x198F77705FA0931D",
                                a.g.localplayer.handle
                              ),
                              i(n + 0.1),
                              void clearInterval(r)
                            );
                        }
                        if (s >= 100)
                          return (
                            s >= 50 &&
                              a.g.localplayer.setCoordsNoOffset(
                                e,
                                t,
                                10,
                                !1,
                                !1,
                                !1
                              ),
                            mp.game.invoke(
                              "0x198F77705FA0931D",
                              a.g.localplayer.handle
                            ),
                            void clearInterval(r)
                          );
                      } catch (e) {
                        mp.events.callRemote(
                          "client_trycatch",
                          "utils/other",
                          "setInterval",
                          e.toString()
                        );
                      }
                    }, 1);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "utils/other",
                    "getSafeZCoords",
                    e.toString()
                  );
                }
              });
          },
          7923: (e, t, a) => {
            var o = "";
            mp.events.add("startScreenEffect", function (e, t, a) {
              try {
                (o = e), mp.game.graphics.startScreenEffect(e, t, a);
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "utils/screeneffects",
                  "startScreenEffect",
                  e.toString()
                );
              }
            }),
              mp.events.add("stopScreenEffect", function (e) {
                try {
                  var t = null == e ? o : e;
                  mp.game.graphics.stopScreenEffect(t);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "utils/screeneffects",
                    "stopScreenEffect",
                    e.toString()
                  );
                }
              }),
              mp.events.add("stopAndStartScreenEffect", function (e, t, a, o) {
                try {
                  mp.game.graphics.stopScreenEffect(e),
                    mp.game.graphics.startScreenEffect(t, a, o);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "utils/screeneffects",
                    "stopAndStartScreenEffect",
                    e.toString()
                  );
                }
              }),
              mp.events.add("screenFadeOut", function (e) {
                try {
                  a.g.FadeScreen(!0, e);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "utils/screeneffects",
                    "screenFadeOut",
                    e.toString()
                  );
                }
              }),
              mp.events.add("screenFadeIn", function (e) {
                try {
                  a.g.FadeScreen(!1, e);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "utils/screeneffects",
                    "screenFadeIn",
                    e.toString()
                  );
                }
              });
          },
          2830: (e, t, a) => {
            a.g.formatIntZero = (e, t) => ("0" + e).slice(0 - t);
          },
          3611: (e, t, a) => {
            (a.g.isInvalidLogin = (e) => {
              try {
                return (
                  e.length > 32 || e.length < 3 || !/^[a-zA-Z1-9]*$/g.test(e)
                );
              } catch (e) {
                return (
                  mp.events.callRemote(
                    "client_trycatch",
                    "utils/validator",
                    "isInvalidLogin",
                    e.toString()
                  ),
                  !0
                );
              }
            }),
              (a.g.isInvalidEmail = (e) => {
                try {
                  return (
                    e.length > 32 ||
                    e.length < 3 ||
                    !/^[0-9a-z-_\.]+\@[0-9a-z-]{2,}\.[a-z]{2,}$/i.test(e)
                  );
                } catch (e) {
                  return (
                    mp.events.callRemote(
                      "client_trycatch",
                      "utils/validator",
                      "isInvalidEmail",
                      e.toString()
                    ),
                    !0
                  );
                }
              }),
              (a.g.checkName = (e) => !/^[a-zA-Z]*$/g.test(e)),
              (a.g.checkName2 = (e) => {
                try {
                  let t = e.charCodeAt(0);
                  if (t < 65 || t > 90) return !1;
                  let a = 0;
                  for (let o = 0; o != e.length; o++)
                    (t = e.charCodeAt(o)), t >= 65 && t <= 90 && a++;
                  return !(a > 2);
                } catch (e) {
                  return (
                    mp.events.callRemote(
                      "client_trycatch",
                      "utils/validator",
                      "checkName2",
                      e.toString()
                    ),
                    !1
                  );
                }
              });
          },
          4959: (e, t, a) => {
            let o = [
                "Черный",
                "Белый",
                "Красный",
                "Оранжевый",
                "Желтый",
                "Зеленый",
                "Голубой",
                "Синий",
                "Фиолетовый",
              ],
              i = null,
              n = "",
              s = {
                Черный: [0, 0, 0],
                Белый: [225, 225, 225],
                Красный: [230, 0, 0],
                Оранжевый: [255, 115, 0],
                Желтый: [240, 240, 0],
                Зеленый: [0, 230, 0],
                Голубой: [0, 205, 255],
                Синий: [0, 0, 230],
                Фиолетовый: [190, 60, 165],
              },
              r = { model: null, color: null, entity: null };
            const l = [[-973.6858, -3005.5195, 14.035086, 60]];
            (a.g.AirCarList = [
              mp.game.joaat("akula"),
              mp.game.joaat("annihilator"),
              mp.game.joaat("annihilator2"),
              mp.game.joaat("buzzard"),
              mp.game.joaat("buzzard2"),
              mp.game.joaat("cargobob"),
              mp.game.joaat("cargobob2"),
              mp.game.joaat("cargobob3"),
              mp.game.joaat("cargobob4"),
              mp.game.joaat("frogger"),
              mp.game.joaat("frogger"),
              mp.game.joaat("havok"),
              mp.game.joaat("hunter"),
              mp.game.joaat("maverick"),
              mp.game.joaat("savage"),
              mp.game.joaat("seasparrow"),
              mp.game.joaat("seasparrow2"),
              mp.game.joaat("seasparrow3"),
              mp.game.joaat("skylift"),
              mp.game.joaat("supervolito"),
              mp.game.joaat("supervolito2"),
              mp.game.joaat("swift"),
              mp.game.joaat("swift2"),
              mp.game.joaat("valkyrie"),
              mp.game.joaat("valkyrie2"),
              mp.game.joaat("volatus"),
            ]),
              mp.events.add("auto", async (e, t) => {
                try {
                  if (null == r.entity || !mp.vehicles.exists(r.entity)) return;
                  switch (e) {
                    case "model":
                      (r.model = i[t].modelName),
                        await a.g.loadModel(r.model).then((e) => {
                          if (e) {
                            r.entity.model = mp.game.joaat(r.model);
                            const e = mp.game.gameplay.getGroundZFor3dCoord(
                              l[0][0],
                              l[0][1],
                              l[0][2],
                              0,
                              !1
                            );
                            r.entity.setCoordsNoOffset(
                              l[0][0],
                              l[0][1],
                              e + 0.45,
                              !1,
                              !1,
                              !1
                            ),
                              r.entity.setRotation(0, 0, l[0][3], 2, !0),
                              r.entity.setOnGroundProperly(),
                              r.entity.setForwardSpeed(0);
                          }
                        });
                      break;
                    case "color":
                      (r.color = o[t]),
                        r.entity.setCustomPrimaryColour(
                          s[o[t]][0],
                          s[o[t]][1],
                          s[o[t]][2]
                        ),
                        r.entity.setCustomSecondaryColour(
                          s[o[t]][0],
                          s[o[t]][1],
                          s[o[t]][2]
                        );
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "vehicle/autoshop",
                    "auto",
                    e.toString()
                  );
                }
              }),
              mp.events.add("buyAuto", (e) => {
                try {
                  if (new Date().getTime() - a.g.lastCheck < 50) return;
                  (a.g.lastCheck = new Date().getTime()),
                    mp.events.callRemote(n, r.model, r.color, e),
                    m();
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "vehicle/autoshop",
                    "buyAuto",
                    e.toString()
                  );
                }
              }),
              mp.events.add("closeAuto", () => {
                try {
                  if (new Date().getTime() - a.g.lastCheck < 50) return;
                  (a.g.lastCheck = new Date().getTime()),
                    mp.events.callRemote("carroomCancel"),
                    m();
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "vehicle/autoshop",
                    "closeAuto",
                    e.toString()
                  );
                }
              }),
              mp.events.add("testDrive", (e) => {
                try {
                  if (new Date().getTime() - a.g.lastCheck < 50) return;
                  (a.g.lastCheck = new Date().getTime()),
                    mp.events.callRemote("testDrive", r.model, r.color, e),
                    m();
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "vehicle/autoshop",
                    "testDrive",
                    e.toString()
                  );
                }
              }),
              mp.events.add("startTestDrive", async (e) => {
                try {
                  if (!e) return;
                  await a.g.IsLoadEntity(e),
                    mp.events.call(
                      "notify",
                      1,
                      9,
                      "Вы получили транспортное средство на тест-драйв. Тест-драйв будет окончен через 2 минуты или при выходе из транспортного средства.",
                      3e3
                    ),
                    e &&
                      0 !== e.handle &&
                      a.g.localplayer.setIntoVehicle(e.handle, -1);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "vehicle/autoshop",
                    "startTestDrive",
                    e.toString()
                  );
                }
              }),
              mp.events.add("setIntoVehicle", async (e, t, o = !1) => {
                try {
                  await a.g.IsLoadEntity(e),
                    e &&
                      0 !== e.handle &&
                      (a.g.localplayer.setIntoVehicle(e.handle, t),
                      o && "string" == typeof o && mp.events.callRemote(o));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "vehicle/autoshop",
                    "startTestDrive",
                    e.toString()
                  );
                }
              });
            const m = () => {
              try {
                if (
                  (a.g.menuClose(),
                  mp.gui.emmit("window.router.setHud();"),
                  a.g.cameraManager.stopCamera(),
                  (c = !1),
                  null == r.entity)
                )
                  return;
                r.entity.destroy(), (r.entity = null);
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "vehicle/autoshop",
                  "destroyAutoShop",
                  e.toString()
                );
              }
            };
            let c = !1;
            mp.events.add("openAuto", async (e, t, s, m, c, p = !1) => {
              try {
                if (a.g.menuCheck()) return;
                (n = c),
                  mp.gui.emmit('window.router.setView("BusinessAutoShop");'),
                  mp.discord.update(
                    "В автосалоне",
                    `на RedAge под ID ${a.g.localplayer.remoteId}`
                  ),
                  (e = JSON.parse(e)),
                  (t = JSON.parse(t)),
                  (s = JSON.parse(s)),
                  (m = JSON.parse(m)),
                  (i = []),
                  e.forEach((e, a) => {
                    i = [
                      ...i,
                      {
                        index: a,
                        modelName: e,
                        price: t[a],
                        gosPrice: s[a],
                        speed: (
                          3.6 *
                          mp.game.vehicle.getVehicleModelMaxSpeed(
                            mp.game.joaat(e)
                          )
                        ).toFixed(1),
                        boost: mp.game.vehicle
                          .getVehicleModelAcceleration(mp.game.joaat(e))
                          .toFixed(2),
                        seat: Math.round(
                          mp.game.vehicle.getVehicleModelMaxNumberOfPassengers(
                            mp.game.joaat(e)
                          )
                        ),
                        invslots: m[a],
                      },
                    ];
                  }),
                  (a.g.localplayer.position = new mp.Vector3(
                    l[0][0],
                    l[0][1],
                    l[0][2]
                  )),
                  await a.g.wait(50),
                  mp.gui.emmit(
                    `window.authShop.data('${JSON.stringify(i)}', ${p});`
                  ),
                  (r.entity = mp.vehicles.new(
                    mp.game.joaat(i[0].modelName),
                    new mp.Vector3(l[0][0], l[0][1], l[0][2]),
                    {
                      heading: l[0][3],
                      numberPlate: "AUTOROOM",
                      alpha: 255,
                      color: [
                        [0, 0, 0],
                        [0, 0, 0],
                      ],
                      locked: !1,
                      engine: !1,
                      dimension: localplayer.dimension,
                    }
                  )),
                  r.entity.setInvincible(!0),
                  await a.g.IsLoadEntity(r.entity),
                  r.entity.setInvincible(!0),
                  r.entity &&
                    0 !== r.entity.handle &&
                    a.g.localplayer.setIntoVehicle(r.entity.handle, -1),
                  r.entity.freezePosition(!0),
                  r.entity.setRotation(0, 0, l[0][3], 2, !0),
                  r.entity.setDirtLevel(0),
                  (r.color = o[0]),
                  (r.model = i[0].modelName),
                  a.g.createCamera("autoshop", r.entity),
                  a.g.menuOpen();
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "vehicle/autoshop",
                  "openAuto",
                  e.toString()
                );
              }
            });
          },
          1258: (e, t, a) => {
            (a.g.binderFunctions.engineCarPressed = () => {
              try {
                if (
                  !a.g.loggedin ||
                  a.g.chatActive ||
                  a.g.editing ||
                  new Date().getTime() - a.g.lastCheck < 400 ||
                  a.g.menuCheck() ||
                  a.g.ap
                )
                  return;
                if (a.g.VehicleSeatFix > new Date().getTime()) return;
                a.g.localplayer.isInAnyVehicle(!1) &&
                  a.g.localplayer.vehicle.getSpeed() <= 3 &&
                  ((a.g.lastCheck = new Date().getTime()),
                  mp.events.callRemote("engineCarPressed"));
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "vehicle/control",
                  "engineCarPressed",
                  e.toString()
                );
              }
            }),
              (a.g.binderFunctions.lockCarPressed = () => {
                try {
                  if (
                    !a.g.loggedin ||
                    chatActive ||
                    a.g.editing ||
                    new Date().getTime() - a.g.lastCheck < 1e3 ||
                    a.g.menuCheck()
                  )
                    return;
                  if (a.g.VehicleSeatFix > new Date().getTime()) return;
                  const e = a.g.localplayer.position;
                  let t,
                    o,
                    i = -1,
                    n = 9999;
                  for (let s in a.g.DoorsDynamicDataToDist)
                    (o = a.g.DoorsDynamicDataToDist[s]),
                      o.hash &&
                        ((t = mp.game.gameplay.getDistanceBetweenCoords(
                          o.position.x,
                          o.position.y,
                          o.position.z,
                          e.x,
                          e.y,
                          e.z,
                          !0
                        )),
                        t < (o.distance ? o.distance : 2.1) &&
                          n > t &&
                          ((i = s), (n = t)));
                  -1 != i
                    ? mp.events.callRemote("server.doorControl", i)
                    : mp.events.callRemote("lockCarPressed"),
                    (a.g.lastCheck = new Date().getTime());
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "vehicle/control",
                    "lockCarPressed",
                    e.toString()
                  );
                }
              }),
              (a.g.binderFunctions.lightleft = () => {
                try {
                  if (mp.gui.cursor.visible || !a.g.loggedin) return;
                  if (a.g.VehicleSeatFix > new Date().getTime()) return;
                  if (a.g.localplayer.vehicle) {
                    if (
                      a.g.localplayer.vehicle.getPedInSeat(-1) !=
                      a.g.localplayer.handle
                    )
                      return;
                    new Date().getTime() - a.g.lastCheck > 500 &&
                      ((a.g.lastCheck = new Date().getTime()),
                      mp.events.callRemote(
                        "VehStream_SetIndicatorLightsData",
                        a.g.localplayer.vehicle,
                        !0,
                        !1
                      ));
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "vehicle/control",
                    "lightleft",
                    e.toString()
                  );
                }
              }),
              (a.g.binderFunctions.lightright = () => {
                try {
                  if (mp.gui.cursor.visible || !a.g.loggedin) return;
                  if (a.g.VehicleSeatFix > new Date().getTime()) return;
                  if (a.g.localplayer.vehicle) {
                    if (
                      a.g.localplayer.vehicle.getPedInSeat(-1) !=
                      a.g.localplayer.handle
                    )
                      return;
                    new Date().getTime() - a.g.lastCheck > 500 &&
                      ((a.g.lastCheck = new Date().getTime()),
                      mp.events.callRemote(
                        "VehStream_SetIndicatorLightsData",
                        a.g.localplayer.vehicle,
                        !1,
                        !0
                      ));
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "vehicle/control",
                    "lightright",
                    e.toString()
                  );
                }
              }),
              (a.g.binderFunctions.signaling = () => {
                try {
                  if (mp.gui.cursor.visible || !a.g.loggedin) return;
                  if (a.g.VehicleSeatFix > new Date().getTime()) return;
                  if (a.g.localplayer.vehicle) {
                    if (
                      a.g.localplayer.vehicle.getPedInSeat(-1) !=
                      a.g.localplayer.handle
                    )
                      return;
                    new Date().getTime() - a.g.lastCheck > 500 &&
                      ((a.g.lastCheck = new Date().getTime()),
                      mp.events.callRemote(
                        "VehStream_SetIndicatorLightsData",
                        a.g.localplayer.vehicle,
                        !0,
                        !0
                      ));
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "vehicle/control",
                    "signaling",
                    e.toString()
                  );
                }
              });
          },
          7482: (e, t, a) => {
            a.g.IsDrone = !1;
            let o = {},
              i = !1,
              n = null;
            mp.events.add("client.dron.init", (e, t, a) => {
              n = new mp.Vector3(e, t, a);
            }),
              mp.events.add("playerEnterVehicle", (e, t) => {
                try {
                  e &&
                    mp.vehicles.exists(e) &&
                    "vehicle" === e.type &&
                    0 !== e.handle &&
                    e.model === mp.game.joaat("rcbandito") &&
                    e.getVariable("isDrone") &&
                    ((i = !0), (a.g.IsDrone = !0));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/circle",
                    "playerEnterVehicle",
                    e.toString()
                  );
                }
              }),
              mp.events.add("playerLeaveVehicle", () => {
                o.exit();
              }),
              (o.exit = function () {
                a.g.loggedin &&
                  i &&
                  ((i = !1),
                  (l = 0),
                  (a.g.IsDrone = !1),
                  (n = null),
                  (m = 0),
                  (c = 10),
                  a.g.stopAllScreenEffect());
              }),
              (o.isDrone = function () {
                return i;
              }),
              (o.calculateDegSec = function (e, t, a, o) {
                return (
                  (200 / (1 - Math.abs(e) * a)) *
                  (e * e * e * o + e * (1 - o)) *
                  t
                );
              }),
              (o.calculateDegSecPitch = function (e) {
                return o.calculateDegSec(e, 1.5, 0.5, 0.8);
              }),
              (o.calculateDegSecRoll = function (e) {
                return o.calculateDegSec(e, 1.5, 0.5, 0.8);
              }),
              (o.calculateDegSecYaw = function (e) {
                return o.calculateDegSec(e, 1.5, 0.3, 0.8);
              }),
              (o.vectorMag = function (e) {
                return Math.sqrt(e.x * e.x + e.y * e.y);
              }),
              (o.vectorNorm = function (e) {
                return Math.sqrt(e.x * e.x + e.y * e.y);
              });
            let s = 0,
              r = 0,
              l = 0;
            (o.keyPressToggleVision = function () {
              try {
                i &&
                  (0 === l
                    ? (mp.game.graphics.setNightvision(!0), (l = 1))
                    : 1 === l
                    ? (mp.game.graphics.setNightvision(!1),
                      mp.game.graphics.setSeethrough(!0),
                      (l = 2))
                    : (mp.game.graphics.setNightvision(!1),
                      mp.game.graphics.setSeethrough(!1),
                      (l = 0)),
                  mp.game.audio.playSoundFrontend(
                    -1,
                    "SELECT",
                    "HUD_FRONTEND_DEFAULT_SOUNDSET",
                    !1
                  ));
              } catch (e) {}
            }),
              mp.keys.bind(27, !0, function () {
                i &&
                  (a.g.localplayer.clearTasks(),
                  a.g.localplayer.clearTasksImmediately());
              });
            let m = 0,
              c = 10;
            mp.events.add("render", () => {
              if (i)
                try {
                  let e = a.g.localplayer.vehicle;
                  if (e) {
                    if (n && new Date().getTime() >= m) {
                      const e = a.g.localplayer.position;
                      mp.game.system.vdist(n.x, n.y, n.z, e.x, e.y, e.z) > 150
                        ? ((m = new Date().getTime() + 1e3),
                          mp.gui.chat.push(
                            `Вы слишком далеко от места запуска коптера. Вернитесь ближе, иначе связь оборвётся через ${c} секунд.`
                          ),
                          c--,
                          c < 0 &&
                            (o.exit(),
                            a.g.localplayer.clearTasks(),
                            a.g.localplayer.clearTasksImmediately()))
                        : ((m = 0), (c = 10));
                    }
                    o.disableControls();
                    let t = mp.game.controls.isDisabledControlPressed(0, 32),
                      i = mp.game.controls.isDisabledControlPressed(0, 33),
                      l = mp.game.controls.isDisabledControlPressed(0, 34),
                      p = mp.game.controls.isDisabledControlPressed(0, 35),
                      g = t ? 0.4 : 0,
                      _ = i ? -0.4 : 0,
                      d = l ? 0.9 : 0,
                      h = p ? -0.9 : 0,
                      u = e.hasCollidedWithAnything(),
                      y = 0,
                      v = 0,
                      f = 0;
                    t && (v = -0.6),
                      i && (v = 0.6),
                      l && (s > 5 || s < -5) && (f = -2),
                      p && (s > 5 || s < -5) && (f = 2);
                    let w = 0,
                      S = 0;
                    mp.game.controls.isDisabledControlPressed(0, 44) &&
                      !u &&
                      (w = 0.004),
                      mp.game.controls.isDisabledControlPressed(0, 20) &&
                        !u &&
                        (w = -0.004),
                      mp.game.controls.isDisabledControlPressed(0, 20) ||
                        mp.game.controls.isDisabledControlPressed(0, 44) ||
                        u ||
                        (r < -0.1
                          ? (S = 0.004)
                          : r > 0.1
                          ? (S = -0.004)
                          : r < 0
                          ? (S = 0.001)
                          : r > 0 && (S = -0.001)),
                      l ||
                        p ||
                        (e.getRotation(0).y < -1
                          ? (f = 2)
                          : e.getRotation(0).y > 1
                          ? (f = -2)
                          : e.getRotation(0).y < 0
                          ? (f = 0.001)
                          : e.getRotation(0).y > 0 && (f = -0.001)),
                      t ||
                        i ||
                        0 === s ||
                        (s < -1
                          ? (y = 0.05)
                          : s > 1
                          ? (y = -0.05)
                          : s < 0
                          ? (y = 0.001)
                          : s > 0 && (y = -0.001),
                        e.getRotation(0).x < -1
                          ? (v = 0.6)
                          : e.getRotation(0).x > 1
                          ? (v = -0.6)
                          : e.getRotation(0).x < 0
                          ? (v = 0.001)
                          : e.getRotation(0).x > 0 && (v = -0.001));
                    let M = d + h;
                    (s += g + _ + y), e.isInWater() && (w = 0.01);
                    let b = 0;
                    s > 1 && (b = w + e.getRotation(0).x / -200),
                      s < -1 && (b = w + e.getRotation(0).x / 400),
                      (r += w + S),
                      r > 0.13 && (r = 0.13),
                      r < -0.13 && (r = -0.13),
                      13 < s && (s = 13),
                      -6.5 > s && (s = -6.5),
                      u && s > 5 && (s = 5);
                    let T = e.getOffsetFromInWorldCoords(0, s / 50, r + b),
                      C = e.getRotation(0).z;
                    e.setVelocity(0, s / 30, r + e.getRotation(0).x / -100);
                    let D = v + e.getRotation(0).x,
                      P = f + e.getRotation(0).y;
                    D > 25 && (D = 25),
                      D < -25 && (D = -25),
                      P > 50 && (P = 50),
                      P < -50 && (P = -50),
                      e.setRotation(D, P, C + M, 0, !1),
                      e.setCoordsNoOffset(T.x, T.y, T.z, !0, !0, !0);
                  }
                } catch (e) {}
            }),
              (o.disableControls = function () {
                mp.game.controls.disableControlAction(0, 85, !0),
                  mp.game.controls.disableControlAction(0, 8, !0),
                  mp.game.controls.disableControlAction(0, 9, !0),
                  mp.game.controls.disableControlAction(0, 30, !0),
                  mp.game.controls.disableControlAction(0, 31, !0),
                  mp.game.controls.disableControlAction(0, 32, !0),
                  mp.game.controls.disableControlAction(0, 33, !0),
                  mp.game.controls.disableControlAction(0, 34, !0),
                  mp.game.controls.disableControlAction(0, 35, !0),
                  mp.game.controls.disableControlAction(0, 36, !0),
                  mp.game.controls.disableControlAction(0, 63, !0),
                  mp.game.controls.disableControlAction(0, 64, !0),
                  mp.game.controls.disableControlAction(0, 71, !0),
                  mp.game.controls.disableControlAction(0, 72, !0),
                  mp.game.controls.disableControlAction(0, 77, !0),
                  mp.game.controls.disableControlAction(0, 78, !0),
                  mp.game.controls.disableControlAction(0, 78, !0),
                  mp.game.controls.disableControlAction(0, 87, !0),
                  mp.game.controls.disableControlAction(0, 88, !0),
                  mp.game.controls.disableControlAction(0, 89, !0),
                  mp.game.controls.disableControlAction(0, 90, !0),
                  mp.game.controls.disableControlAction(0, 129, !0),
                  mp.game.controls.disableControlAction(0, 130, !0),
                  mp.game.controls.disableControlAction(0, 133, !0),
                  mp.game.controls.disableControlAction(0, 134, !0),
                  mp.game.controls.disableControlAction(0, 136, !0),
                  mp.game.controls.disableControlAction(0, 139, !0),
                  mp.game.controls.disableControlAction(0, 146, !0),
                  mp.game.controls.disableControlAction(0, 147, !0),
                  mp.game.controls.disableControlAction(0, 148, !0),
                  mp.game.controls.disableControlAction(0, 149, !0),
                  mp.game.controls.disableControlAction(0, 150, !0),
                  mp.game.controls.disableControlAction(0, 151, !0),
                  mp.game.controls.disableControlAction(0, 232, !0),
                  mp.game.controls.disableControlAction(0, 266, !0),
                  mp.game.controls.disableControlAction(0, 267, !0),
                  mp.game.controls.disableControlAction(0, 268, !0),
                  mp.game.controls.disableControlAction(0, 269, !0),
                  mp.game.controls.disableControlAction(0, 278, !0),
                  mp.game.controls.disableControlAction(0, 279, !0),
                  mp.game.controls.disableControlAction(0, 338, !0),
                  mp.game.controls.disableControlAction(0, 339, !0),
                  mp.game.controls.disableControlAction(0, 44, !0),
                  mp.game.controls.disableControlAction(0, 20, !0),
                  mp.game.controls.disableControlAction(0, 47, !0);
              }),
              (a.g.stopAllScreenEffect = function () {
                Natives.ANIMPOSTFX_STOP_ALL(),
                  mp.game.graphics.setNightvision(!1),
                  mp.game.graphics.setSeethrough(!1),
                  mp.game.graphics.setTimecycleModifierStrength(0),
                  mp.game.graphics.setNoiseoveride(!1),
                  mp.game.graphics.setNoisinessoveride(0),
                  mp.game.graphics.transitionFromBlurred(0);
              }),
              mp.events.addDataHandler("isDrone", (e, t, a) => {
                p(e, t);
              }),
              mp.events.add("vehicleStreamIn", (e) => {
                p(e, null);
              });
            const p = (e, t) => {
              e &&
                mp.vehicles.exists(e) &&
                "vehicle" === e.type &&
                0 !== e.handle &&
                e.model === mp.game.joaat("rcbandito") &&
                (t || (t = e.getVariable("isDrone")),
                t &&
                  (e.setAlpha(0),
                  a.g.playSound(e, "Flight_Loop", "DLC_Arena_Drone_Sounds"),
                  e.setCanBeDamaged(!1),
                  e.setInvincible(!0)));
            };
            a.g.playSound = function (e, t, a = "") {
              try {
                if (void 0 !== e && mp.vehicles.exists(e)) {
                  let o = Natives.GET_SOUND_ID();
                  mp.game.audio.playSoundFromEntity(o, t, e.handle, a, !0, 0);
                }
              } catch (e) {
                methods.debug(e);
              }
            };
          },
          3880: (e, t, a) => {
            mp.events.addDataHandler("fbAttach", (e, t, n) => {
              try {
                e &&
                  mp.vehicles.exists(e) &&
                  "vehicle" === e.type &&
                  e.model == mp.game.joaat("flatbed") &&
                  ("string" == typeof t && a.g.IsJsonString(t)
                    ? ((e.fbAttach = t), 0 !== e.handle && i(e, t))
                    : e.fbAttach && (o(e), delete e.fbAttach));
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "synchronization/state",
                  "AGM",
                  e.toString()
                );
              }
            }),
              mp.events.add("vehicleStreamIn", async (e) => {
                e.model == mp.game.joaat("flatbed") &&
                  e.fbAttach &&
                  i(e, e.fbAttach);
              }),
              mp.events.add("vehicleStreamOut", (e) => {
                e.model == mp.game.joaat("flatbed") && e.fbAttach && o(e);
              });
            const o = async (e) => {
                e.attachedVehicle &&
                  (e.attachedVehicle.destroy(), delete e.attachedVehicle);
              },
              i = async (e, t) => {
                try {
                  if (a.g.IsJsonString(t)) {
                    t = JSON.parse(t);
                    const o = e.position;
                    o.z += 5;
                    const i = await a.g.loadModel(t.Hash),
                      n = mp.vehicles.new(i ? t.Hash : "adder", o, {
                        numberPlate: "Evac",
                        locked: !0,
                        engine: !1,
                        dimension: a.g.localplayer.dimension,
                      });
                    n.freezePosition(!0),
                      await a.g.IsLoadEntity(n),
                      n.freezePosition(!0),
                      n &&
                        mp.vehicles.exists(n) &&
                        "vehicle" === n.type &&
                        0 !== n.handle &&
                        ((e.attachedVehicle = n),
                        -1 === Number(t.PrimModColor) &&
                        -1 === Number(t.SecModColor)
                          ? (null != t.PrimColor &&
                              null != t.PrimColor.Red &&
                              n.setCustomPrimaryColour(
                                Number(t.PrimColor.Red),
                                Number(t.PrimColor.Green),
                                Number(t.PrimColor.Blue)
                              ),
                            null != t.SecColor &&
                              null != t.SecColor.Red &&
                              n.setCustomSecondaryColour(
                                Number(t.SecColor.Red),
                                Number(t.SecColor.Green),
                                Number(t.SecColor.Blue)
                              ))
                          : n.setColours(
                              Number(t.PrimModColor),
                              Number(t.SecModColor)
                            ),
                        null != t.Spoiler && n.setMod(0, Number(t.Spoiler)),
                        null != t.FrontBumper &&
                          n.setMod(1, Number(t.FrontBumper)),
                        null != t.RearBumper &&
                          n.setMod(2, Number(t.RearBumper)),
                        null != t.SideSkirt && n.setMod(3, Number(t.SideSkirt)),
                        null != t.Muffler && n.setMod(4, Number(t.Muffler)),
                        null != t.Frame && n.setMod(5, Number(t.Frame)),
                        null != t.Lattice && n.setMod(6, Number(t.Lattice)),
                        null != t.Hood && n.setMod(7, Number(t.Hood)),
                        null != t.Wings && n.setMod(8, Number(t.Wings)),
                        null != t.RWings && n.setMod(9, Number(t.RWings)),
                        null != t.Roof && n.setMod(10, Number(t.Roof)),
                        null != t.Vinyls && n.setMod(48, Number(t.Vinyls)),
                        null != t.WindowTint &&
                          n.setWindowTint(Number(t.WindowTint)),
                        null != t.NumberPlate &&
                          n.setNumberPlateTextIndex(Number(t.NumberPlate)),
                        null != t.WheelsType &&
                          n.setWheelType(Number(t.WheelsType)),
                        null != t.Wheels && n.setMod(23, Number(t.Wheels)),
                        t.Cover &&
                          (n.setModColor1(Number(t.Cover), 1, 0),
                          n.setModColor2(Number(t.Cover), 1)),
                        n.setExtraColours(
                          void 0 === t.ColorAdditional
                            ? 0
                            : Number(t.ColorAdditional),
                          void 0 === t.WheelsColor ? 0 : Number(t.WheelsColor)
                        ),
                        await a.g.wait(100),
                        (async (e, t) => {
                          if (e.handle && (!1 === t || t.handle))
                            if (!1 === t)
                              e.attachedVehicle.detach(!0, !1),
                                delete e.attachedVehicle;
                            else {
                              e.freezePosition(!0);
                              let o = getVehicleHeight(t);
                              t.freezePosition(!1),
                                t.attachTo(
                                  e.handle,
                                  e.getBoneIndexByName("chassis"),
                                  0,
                                  -3,
                                  o,
                                  0,
                                  0,
                                  180,
                                  !0,
                                  !1,
                                  !0,
                                  !1,
                                  0,
                                  !0
                                ),
                                (e.attachedVehicle = t),
                                await a.g.isAttached(t),
                                e.freezePosition(!1);
                            }
                        })(e, n));
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "vehicle/vehiclesync",
                    "client.SetVehicleCustomization",
                    e.toString()
                  );
                }
              };
            a.g.getVehicleHeight = (e) => {
              try {
                if (e && mp.vehicles.exists(e)) {
                  const t = mp.game.gameplay.getModelDimensions(e.model),
                    a = Math.abs(t.min.z),
                    o = Math.abs(t.max.z);
                  return a / o + (o - a) - 0.4 * (o - a);
                }
                return 1;
              } catch (e) {
                return (
                  mp.events.callRemote(
                    "client_trycatch",
                    "player/circle",
                    "getVehicleHeight",
                    e.toString()
                  ),
                  1
                );
              }
            };
          },
          6444: (e, t, a) => {
            const o = mp.players.local;
            mp.events.add(a.g.renderName["5s"], () => {
              const e = o.vehicle;
              o.mileageClass
                ? (e &&
                    e.getPedInSeat(-1) === o.handle &&
                    o.mileageClass.vehicle.handle === e.handle) ||
                  (o.mileageClass = null)
                : e &&
                  e.getPedInSeat(-1) === o.handle &&
                  (o.mileageClass = new i(e));
            }),
              mp.events.add(a.g.renderName["200ms"], () => {
                o.mileageClass && o.vehicle && o.mileageClass.calc();
              }),
              mp.events.add(a.g.renderName["10s"], () => {
                o.mileageClass && o.vehicle && o.mileageClass.update();
              }),
              mp.events.add("vehicles.mileage.onUpdate", (e) => {
                o.mileageClass && o.vehicle && o.mileageClass.reset(e);
              });
            class i {
              constructor(e) {
                (this.vehicle = e), (this.centimeters = 0);
              }
              calc() {
                const e = ((3.6 * this.vehicle.getSpeed() * 1e3) / 3600) * 100;
                this.centimeters += parseInt(e);
              }
              update() {
                this.centimeters > 0 &&
                  mp.vehicles.exists(this.vehicle) &&
                  this.vehicle.remoteId &&
                  (mp.events.callRemote(
                    "server.vehicle.updateMileage",
                    this.vehicle.remoteId,
                    this.centimeters
                  ),
                  (this.centimeters = 0));
              }
              reset(e) {
                mp.vehicles.exists(e) &&
                  e.handle === this.vehicle.handle &&
                  (this.centimeters = 0);
              }
            }
          },
          686: (e, t, a) => {
            mp.events.add("openPetrol", () => {
              try {
                if (a.g.menuCheck()) return;
                a.g.menuOpen(),
                  mp.gui.emmit('window.router.setView("PlayerGasStation");'),
                  mp.discord.update(
                    "Заправляется",
                    `на RedAge под ID ${a.g.localplayer.remoteId}`
                  );
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "vehicle/petrol",
                  "openPetrol",
                  e.toString()
                );
              }
            }),
              mp.events.add("petrol", (e) => {
                try {
                  mp.events.callRemote("petrol", e),
                    a.g.menuClose(),
                    mp.gui.emmit("window.router.setHud();");
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "vehicle/petrol",
                    "petrol",
                    e.toString()
                  );
                }
              }),
              mp.events.add("petrol.full", () => {
                try {
                  mp.events.callRemote("petrol", 9999),
                    a.g.menuClose(),
                    mp.gui.emmit("window.router.setHud();");
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "vehicle/petrol",
                    "petrol.full",
                    e.toString()
                  );
                }
              }),
              mp.events.add("petrol.gov", () => {
                try {
                  mp.events.callRemote("petrol", 99999),
                    a.g.menuClose(),
                    mp.gui.emmit("window.router.setHud();");
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "vehicle/petrol",
                    "petrol.gov",
                    e.toString()
                  );
                }
              }),
              mp.events.add("closePetrol", () => {
                try {
                  a.g.menuClose(), mp.gui.emmit("window.router.setHud();");
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "vehicle/petrol",
                    "closePetrol",
                    e.toString()
                  );
                }
              });
          },
          89: (e, t, a) => {
            const o = {
              started: !1,
              start_seconds: 0,
              marker: void 0,
              blip: void 0,
              colshape: void 0,
            };
            mp.events.add("client.streetrace.position", async () => {
              try {
                Natives.IS_WAYPOINT_ACTIVE(),
                  mp.events.call(
                    "notify",
                    3,
                    9,
                    "Поставьте метку на карте!",
                    3e3
                  ),
                  i((e) => {
                    mp.events.callRemote(
                      "server.streetrace.position",
                      e.x,
                      e.y,
                      e.z
                    );
                  });
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "vehicle/race_system",
                  "sendRaceOffer_client",
                  e.toString()
                );
              }
            });
            const i = (e) => {
              try {
                let t = setInterval(() => {
                  let o = a.g.GetWaypointCoords();
                  if (null !== o) {
                    const i = a.g.localplayer.position;
                    mp.game.system.vdist(i.x, i.y, i.z, o.x, o.y, o.z) > 50
                      ? (clearInterval(t), e(o))
                      : (mp.events.call(
                          "notify",
                          3,
                          9,
                          "Вы не молжете поставить так близко к себе!",
                          3e3
                        ),
                        clearInterval(t));
                  }
                }, 250);
              } catch (e) {
                return void mp.events.callRemote(
                  "client_trycatch",
                  "vehicle/race_system",
                  "getBlipPosition",
                  e.toString()
                );
              }
            };
            mp.events.add("client.streetrace.start", (e, t, i, n) => {
              try {
                (o.started = !0),
                  (o.blip = mp.blips.new(1, new mp.Vector3(e, t), {
                    alpha: 255,
                    color: 1,
                    name: "Финиш",
                  })),
                  o.blip.setRoute(!0),
                  o.blip.setRouteColour(1),
                  (o.colshape = mp.colshapes.newCircle(
                    e,
                    t,
                    10,
                    a.g.localplayer.dimension
                  )),
                  mp.events.call("freeze", !0),
                  (o.start_seconds = 5),
                  mp.gui.emmit(
                    `window.updateGameTime (${o.start_seconds}, "Гонка", "Цель: Доберитесь до финиша");`
                  ),
                  mp.discord.update(
                    "Участвует в уличной гонке",
                    `на RedAge под ID ${a.g.localplayer.remoteId}`
                  );
                let i = setInterval(() => {
                  (o.start_seconds -= 1),
                    mp.gui.emmit(
                      `window.updateGameTime (${o.start_seconds}, "Гонка", "Цель: Доберитесь до финиша");`
                    ),
                    o.start_seconds <= 0 &&
                      (clearInterval(i),
                      (o.start_seconds = 0),
                      mp.events.call("freeze", !1));
                }, 1e3);
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "vehicle/race_system",
                  "acceptRaceOffer_client",
                  e.toString()
                );
              }
            }),
              mp.events.add("playerEnterColshape", (e) => {
                try {
                  e === o.colshape &&
                    o.started &&
                    (mp.events.callRemote("server.streetrace.finished"),
                    mp.events.call("client.streetrace.clear"));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "vehicle/race_system",
                    "playerEnterColshape",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.streetrace.clear", () => {
                try {
                  o.started &&
                    ((o.started = !1),
                    (function () {
                      try {
                        void 0 !== o.marker &&
                          (o.marker.destroy(), (o.marker = void 0)),
                          void 0 !== o.blip &&
                            (o.blip.setRoute(!1),
                            o.blip.destroy(),
                            (o.blip = void 0)),
                          void 0 !== o.colshape &&
                            (o.colshape.destroy(), (o.colshape = void 0));
                      } catch (e) {
                        mp.events.callRemote(
                          "client_trycatch",
                          "vehicle/race_system",
                          "clearPlayerInfo",
                          e.toString()
                        );
                      }
                    })());
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "vehicle/race_system",
                    "clearRaceInfo",
                    e.toString()
                  );
                }
              });
          },
          6165: (e, t, a) => {
            var o,
              i = null;
            mp.events.add("playerEnterVehicle", (e, t) => {
              try {
                null != e &&
                  (null != i && clearInterval(i),
                  (i = setInterval(function () {
                    !(function (e) {
                      try {
                        if (e && mp.vehicles.exists(e)) {
                          if (a.g.localplayer.vehicle == e) {
                            let t = e.getVariable("vehradio");
                            (o = mp.game.invoke(
                              a.g.getNative("GET_PLAYER_RADIO_STATION_INDEX")
                            )),
                              e.getPedInSeat(-1) == a.g.localplayer.handle
                                ? t != o &&
                                  mp.events.callRemote(
                                    "VehStream_RadioChange",
                                    o
                                  )
                                : 255 == t
                                ? mp.game.audio.setRadioToStationName("OFF")
                                : t != o &&
                                  (mp.game.invoke(
                                    a.g.getNative("SET_FRONTEND_RADIO_ACTIVE"),
                                    !0
                                  ),
                                  mp.game.invoke(
                                    a.g.getNative("SET_RADIO_TO_STATION_INDEX"),
                                    t
                                  ));
                          }
                        } else null != i && (clearInterval(i), (i = null));
                      } catch (e) {
                        if (
                          new Date().getTime() -
                            a.g.trycatchtime["vehicle/radiosync"] <
                          5e3
                        )
                          return;
                        (a.g.trycatchtime["vehicle/radiosync"] =
                          new Date().getTime()),
                          mp.events.callRemote(
                            "client_trycatch",
                            "vehicle/radiosync",
                            "vehradio",
                            e.toString()
                          );
                      }
                    })(e);
                  }, 1e3)));
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "vehicle/radiosync",
                  "playerEnterVehicle",
                  e.toString()
                );
              }
            }),
              mp.events.add("playerLeaveVehicle", (e) => {
                try {
                  null != i && (clearInterval(i), (i = null));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "vehicle/radiosync",
                    "playerLeaveVehicle",
                    e.toString()
                  );
                }
              });
          },
          7773: (e, t, a) => {
            mp.events.add("client.rentcar.open", (e) => {
              a.g.menuCheck() ||
                (a.g.menuOpen(),
                mp.gui.emmit(`window.router.setView("PlayerRentCar", '${e}');`),
                mp.discord.update(
                  "Хочет арендовать транспорт",
                  `на RedAge под ID ${a.g.localplayer.remoteId}`
                ));
            }),
              mp.events.add("client.rentcar.exit", () => {
                mp.gui.emmit("window.router.setHud();"), a.g.menuClose();
              });
            let o = 0;
            mp.events.add("client.rentcar.buy", (e, t, a) => {
              new Date().getTime() - o < 1e3
                ? mp.events.call("notify", 4, 9, "Слишком быстро", 3e3)
                : ((o = new Date().getTime()),
                  mp.events.callRemote("server.rentcar.buy", e, t, a),
                  mp.events.call("client.rentcar.exit"));
            });
            let i = {
              marker: void 0,
              blip: void 0,
              colshape: void 0,
              vehicle: void 0,
              vehicleId: void 0,
              z: 1.2,
            };
            mp.events.add("client.rentcar.point", (e) => {
              n(), (i.vehicleId = e);
            }),
              mp.events.add("client.rentcar.func", (e) => {
                mp.events.callRemote("server.rentcar.func", e);
              }),
              mp.events.add("vehicleStreamIn", (e) => {
                try {
                  !i.vehicle &&
                    e &&
                    e.remoteId === i.vehicleId &&
                    ((i.vehicle = e),
                    (i.zDefault = getVehicleHeight(e) + 1),
                    mp.events.call(
                      "createBlip",
                      "rentcar",
                      "Аренда",
                      225,
                      e.position,
                      1.25,
                      4
                    ),
                    mp.events.call(
                      "client.showWithPicture",
                      "Арендодатель",
                      "Mors Mutual Insurance",
                      "Спасибо за использование наших услуг. Транспортное средство можно найти на парковке. Хорошего дня!",
                      "CHAR_MP_MORS_MUTUAL"
                    ),
                    mp.game.audio.playSoundFrontend(
                      -1,
                      "Boss_Message_Orange",
                      "GTAO_Boss_Goons_FM_Soundset",
                      !0
                    ),
                    mp.events.call(
                      "createWaypoint",
                      e.position.x,
                      e.position.y
                    ));
                } catch (e) {
                  return (
                    mp.events.callRemote(
                      "client_trycatch",
                      "player/gamertag",
                      "sdfsdf",
                      e.toString()
                    ),
                    mp.gui.chat.push(e.toString()),
                    0
                  );
                }
              });
            const n = () => {
              void 0 !== i.marker && (i.marker.destroy(), (i.marker = void 0)),
                void 0 !== i.blip &&
                  (i.blip.setRoute(!1), i.blip.destroy(), (i.blip = void 0)),
                void 0 !== i.colshape &&
                  (i.colshape.destroy(), (i.colshape = void 0)),
                (i.zDefault = 1),
                (i.z = 0.2),
                (i.vehicle = void 0),
                (i.vehicleId = void 0),
                mp.events.call("deleteBlip", "rentcar");
            };
            mp.events.add("render", () => {
              if (a.g.loggedin)
                if (i.vehicleId && i.vehicle && mp.vehicles.exists(i.vehicle)) {
                  const e = a.g.localplayer.position;
                  mp.game.system.vdist(
                    e.x,
                    e.y,
                    e.z,
                    i.vehicle.position.x,
                    i.vehicle.position.y,
                    i.vehicle.position.z
                  ) < 75 &&
                    (void 0 !== i.marker &&
                      (i.marker.destroy(), (i.marker = void 0)),
                    (i.z += 0.0015),
                    i.z > 0.3 && (i.z = 0.2),
                    (i.marker = mp.markers.new(
                      2,
                      new mp.Vector3(
                        i.vehicle.position.x,
                        i.vehicle.position.y,
                        i.vehicle.position.z + i.zDefault + i.z
                      ),
                      0.3,
                      {
                        visible: !0,
                        color: [255, 255, 255, 185],
                        rotation: new mp.Vector3(180, 0, 0),
                        dimension: a.g.localplayer.dimension,
                      }
                    )));
                } else
                  i.vehicleId &&
                    i.vehicle &&
                    !mp.vehicles.exists(i.vehicle) &&
                    n();
            }),
              mp.events.add("playerEnterVehicle", (e, t) => {
                i.vehicle &&
                  mp.vehicles.exists(i.vehicle) &&
                  i.vehicle.handle === e.handle &&
                  n();
              }),
              mp.events.add(
                "client.showWithPicture",
                (
                  e,
                  t,
                  a,
                  o,
                  i = 0,
                  n = !1,
                  s = -1,
                  r = -1,
                  l = [255, 255, 255, 200]
                ) => {
                  s > -1 && mp.game.invoke("0x39BBF623FC803EAC", s),
                    r > -1 && mp.game.invoke("0x92F0DA1E27DB96DC", r),
                    n &&
                      mp.game.ui.setNotificationFlashColor(
                        l[0],
                        l[1],
                        l[2],
                        l[3]
                      ),
                    mp.game.ui.setNotificationTextEntry("CELL_EMAIL_BCON");
                  for (let e = 0, t = a.length; e < t; e += 50)
                    mp.game.ui.addTextComponentSubstringPlayerName(
                      a.substr(e, Math.min(50, a.length - e))
                    );
                  mp.game.ui.setNotificationMessage(o, o, n, i, e, t),
                    mp.game.ui.drawNotification(!1, !0);
                }
              );
          },
          1031: (e, t, a) => {
            let o = !1;
            mp.events.add("client.ticket.open", (e) => {
              try {
                if (a.g.menuCheck()) return;
                ((e = JSON.parse(e)).model =
                  mp.game.vehicle.getDisplayNameFromVehicleModel(e.model)),
                  a.g.menuOpen(),
                  (o = !0),
                  mp.gui.emmit(
                    `window.router.setView("FractionsTicket", '${JSON.stringify(
                      e
                    )}');`,
                    1
                  );
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "vehicle/petrol",
                  "openPetrol",
                  e.toString()
                );
              }
            }),
              mp.events.add("client.ticket.close", () => {
                try {
                  if (!o) return;
                  (o = !1),
                    a.g.menuClose(),
                    mp.gui.emmit("window.router.setHud();");
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "vehicle/petrol",
                    "openPetrol",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.ticket.end", (e, t, a, i) => {
                try {
                  if (!o) return;
                  mp.events.callRemote("server.ticket.end", e, t, a, i);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "vehicle/petrol",
                    "openPetrol",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.ticket.myOpen", (e) => {
                try {
                  if (a.g.menuCheck()) return;
                  a.g.menuOpen(), (o = !0), (e = JSON.parse(e));
                  let t = [];
                  e.forEach((e) => {
                    isNaN(Number(e.Model)) ||
                      (e.Model = mp.game.vehicle.getDisplayNameFromVehicleModel(
                        Number(e.Model)
                      )),
                      t.push(e);
                  }),
                    mp.gui.emmit(
                      `window.router.setView("PlayerTickets", '${JSON.stringify(
                        t
                      )}');`,
                      1
                    ),
                    mp.discord.update(
                      "Оплачивает штрафы",
                      `на RedAge под ID ${a.g.localplayer.remoteId}`
                    );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "vehicle/petrol",
                    "openPetrol",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.ticket.payment", (e) => {
                try {
                  if (!o) return;
                  mp.events.callRemote("server.ticket.payment", e);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "vehicle/petrol",
                    "openPetrol",
                    e.toString()
                  );
                }
              });
            let i = !1;
            mp.events.add("client.ticket.addRender", () => {
              i || mp.events.add("render", n), (i = !0);
            }),
              mp.events.add("client.ticket.removeRender", () => {
                i && mp.events.remove("render", n), (i = !1);
              });
            const n = () => {
              try {
                if (!a.g.loggedin) return;
                const e = a.g.localplayer.position;
                let t, o;
                mp.vehicles.forEachInStreamRange((i) => {
                  if (
                    0 !== i.handle &&
                    i !== a.g.localplayer.vehicle &&
                    i.isTicket
                  ) {
                    if (!i.isOnScreen()) return;
                    (t = i.position),
                      (o = a.g.vdist2(e, t)),
                      o < 35 &&
                        ((t.z += getVehicleHeight(i) + 1),
                        (t = mp.game.graphics.world3dToScreen2d(t)),
                        a.g.DrawSprite(
                          "redage_textures_001",
                          "ticket",
                          [255, 255, 255, 255],
                          t.x,
                          t.y
                        ));
                  }
                });
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "vehicle/petrol",
                  "OnTicketRender",
                  e.toString()
                );
              }
            };
          },
          4925: (e, t, a) => {
            var o,
              i = null;
            (mp.game.vehicle.defaultEngineBehaviour = !1),
              mp.events.add("VehStream_SetSirenSound", (e, t) => {
                try {
                  e &&
                    mp.vehicles.exists(e) &&
                    18 == e.getClass() &&
                    e.setSirenSound(t);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "vehicle/vehiclesync",
                    "VehStream_SetSirenSound",
                    e.toString()
                  );
                }
              });
            let n = !1;
            mp.events.add("playerEnterVehicle", (e, t) => {
              try {
                -1 == t &&
                  ((n = e),
                  p(e, null),
                  (o = e.getDirtLevel()),
                  null != i && clearInterval(i),
                  (i = setInterval(function () {
                    !(function (e) {
                      try {
                        e &&
                        mp.vehicles.exists(e) &&
                        a.g.localplayer.vehicle == e &&
                        e.getPedInSeat(-1) == a.g.localplayer.handle
                          ? mp.events.call("VehStream_GetVehicleDirtLevel", e)
                          : null != i && (clearInterval(i), (i = null));
                      } catch (e) {
                        mp.events.callRemote(
                          "client_trycatch",
                          "vehicle/vehiclesync",
                          "dirtlevel",
                          e.toString()
                        );
                      }
                    })(e);
                  }, 2e4)),
                  1747439474 == e.model
                    ? e.setMaxSpeed(30)
                    : 2034235290 == e.model && e.setMaxSpeed(40),
                  null != e.getVariable("BOOST")
                    ? (a.g.boosted = !0)
                    : (a.g.boosted = !1),
                  mp.discord.update(
                    "За рулём",
                    `на RedAge под ID ${a.g.localplayer.remoteId}`
                  ));
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "vehicle/vehiclesync",
                  "playerEnterVehicle",
                  e.toString()
                );
              }
            }),
              mp.events.add("playerLeaveVehicle", async () => {
                try {
                  (a.g.boosted = !1),
                    null != i && (clearInterval(i), (i = null)),
                    n &&
                      mp.vehicles.exists(n) &&
                      (n.freezePosition(!1), p(n, null)),
                    (n = !1);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "vehicle/vehiclesync",
                    "playerLeaveVehicle",
                    e.toString()
                  );
                }
              }),
              mp.events.add("VehStream_GetVehicleDirtLevel", (e) => {
                try {
                  if (
                    e &&
                    mp.vehicles.exists(e) &&
                    e.getPedInSeat(-1) == a.g.localplayer.handle
                  ) {
                    let t = parseFloat(e.getDirtLevel()),
                      a = parseFloat(t - o);
                    if (a >= 0.01) {
                      a /= 3;
                      let t = parseFloat(o + a);
                      t > 15 && (t = 15),
                        (o = t),
                        mp.events.callRemote("VehStream_SetVehicleDirt", e, t);
                    }
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "vehicle/vehiclesync",
                    "VehStream_GetVehicleDirtLevel",
                    e.toString()
                  );
                }
              }),
              mp.events.add("vehicleStreamIn", (e) => {
                h(e),
                  l(e, null),
                  s(e, null),
                  r(e, null),
                  m(e, null),
                  c(e, null),
                  p(e, null),
                  d(e, null),
                  _(e, null),
                  g(e, null);
              }),
              mp.events.addDataHandler("vExtraColours", (e, t, a) => {
                s(e, t);
              });
            const s = (e, t) => {
              try {
                e &&
                  mp.vehicles.exists(e) &&
                  "vehicle" === e.type &&
                  0 !== e.handle &&
                  (t || (t = e.getVariable("vExtraColours")),
                  t &&
                    (t = t.split("|")) &&
                    t.length > 1 &&
                    e.setExtraColours(Number(t[0]), Number(t[1])));
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "vehicle/vehiclesync",
                  "setVehicleExtraColours",
                  e.toString()
                );
              }
            };
            mp.events.addDataHandler("vHeadlights", (e, t, a) => {
              r(e, t);
            });
            const r = (e, t) => {
              try {
                e &&
                  mp.vehicles.exists(e) &&
                  "vehicle" === e.type &&
                  0 !== e.handle &&
                  (t || (t = e.getVariable("vHeadlights")),
                  t &&
                    "number" == typeof t &&
                    (e.toggleMod(22, !0),
                    a.g.SetVehicleLightColor(e, Number(t))));
              } catch (e) {}
            };
            mp.events.addDataHandler("vCover", (e, t, a) => {
              l(e, t);
            });
            const l = (e, t) => {
              try {
                e &&
                  mp.vehicles.exists(e) &&
                  "vehicle" === e.type &&
                  0 !== e.handle &&
                  (t || (t = e.getVariable("vCover")),
                  null != t &&
                    "number" == typeof t &&
                    Number(t) > 0 &&
                    (e.setModColor1(Number(t), 1, 0),
                    e.setModColor2(Number(t), 1)));
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "vehicle/vehiclesync",
                  "setVehicleCover",
                  e.toString()
                );
              }
            };
            mp.events.addDataHandler("vNeon", (e, t, a) => {
              m(e, t);
            });
            const m = (e, t) => {
              try {
                e &&
                  mp.vehicles.exists(e) &&
                  "vehicle" === e.type &&
                  0 !== e.handle &&
                  (t || (t = e.getVariable("vNeon")),
                  t &&
                    (t = t.split("|")) &&
                    t.length > 2 &&
                    (a.g.setNeonLight(
                      e,
                      a.g.getNeonValuesByIndex(Number(t[0]))
                    ),
                    e.setNeonLightsColour(
                      Number(t[1]),
                      Number(t[2]),
                      Number(t[3])
                    )));
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "vehicle/vehiclesync",
                  "setVehicleNeon",
                  e.toString()
                );
              }
            };
            mp.events.addDataHandler("vDirt", (e, t, a) => {
              c(e, t);
            });
            const c = (e, t) => {
              try {
                e &&
                  mp.vehicles.exists(e) &&
                  "vehicle" === e.type &&
                  0 !== e.handle &&
                  (t || (t = e.getVariable("vDirt")),
                  null != t &&
                    "number" == typeof t &&
                    (e.setDirtLevel(parseFloat(t)),
                    e.getPedInSeat(-1) == a.g.localplayer.handle && (o = t)));
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "vehicle/vehiclesync",
                  "setVehicleDirt",
                  e.toString()
                );
              }
            };
            mp.events.addDataHandler("vEngine", (e, t, a) => {
              p(e, t);
            });
            const p = (e, t) => {
              try {
                e &&
                  mp.vehicles.exists(e) &&
                  "vehicle" === e.type &&
                  0 !== e.handle &&
                  (t || (t = e.getVariable("vEngine")),
                  null != t && "number" == typeof t && u(e, Boolean(t)));
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "vehicle/vehiclesync",
                  "setVehicleEngine",
                  e.toString()
                );
              }
            };
            mp.events.addDataHandler("vIL", (e, t, a) => {
              g(e, t);
            });
            const g = (e, t) => {
              try {
                e &&
                  mp.vehicles.exists(e) &&
                  "vehicle" === e.type &&
                  0 !== e.handle &&
                  (t || (t = e.getVariable("vIL")),
                  t &&
                    (t = t.split("|")) &&
                    t.length > 1 &&
                    ((t[0] = Number(t[0])),
                    t[0]
                      ? e.setIndicatorLights(0, !0)
                      : e.setIndicatorLights(0, !1),
                    (t[1] = Number(t[1])),
                    t[1]
                      ? e.setIndicatorLights(1, !0)
                      : e.setIndicatorLights(1, !1),
                    e.getPedInSeat(-1) == a.g.localplayer.handle &&
                      (t[0]
                        ? mp.gui.emmit("window.vehicleState.rightIL (true)")
                        : mp.gui.emmit("window.vehicleState.rightIL (false)"),
                      t[1]
                        ? mp.gui.emmit("window.vehicleState.leftIL (true)")
                        : mp.gui.emmit("window.vehicleState.leftIL (false)"))));
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "vehicle/vehiclesync",
                  "setVehicleIL",
                  e.toString()
                );
              }
            };
            mp.events.addDataHandler("vLock", (e, t, a) => {
              _(e, t);
            });
            const _ = (e, t) => {
              try {
                if (
                  e &&
                  mp.vehicles.exists(e) &&
                  "vehicle" === e.type &&
                  0 !== e.handle
                ) {
                  const o = null === t;
                  t || (t = e.getVariable("vLock")),
                    null != t &&
                      "number" == typeof t &&
                      ((t = Boolean(t))
                        ? e.setDoorsLocked(2)
                        : e.setDoorsLocked(1),
                      o ||
                        (t
                          ? mp.game.audio.playSoundFromEntity(
                              1,
                              "Remote_Control_Close",
                              e.handle,
                              "PI_Menu_Sounds",
                              !0,
                              0
                            )
                          : mp.game.audio.playSoundFromEntity(
                              1,
                              "Remote_Control_Open",
                              e.handle,
                              "PI_Menu_Sounds",
                              !0,
                              0
                            )),
                      e.getPedInSeat(-1) == a.g.localplayer.handle &&
                        (t
                          ? mp.gui.emmit("window.vehicleState.doors (true)")
                          : mp.gui.emmit("window.vehicleState.doors (false)")));
                }
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "vehicle/vehiclesync",
                  "setVehicleLock",
                  e.toString()
                );
              }
            };
            mp.events.add("client.vehicle.door", (e, t, a) => {
              try {
                e &&
                  mp.vehicles.exists(e) &&
                  "vehicle" === e.type &&
                  0 !== e.handle &&
                  (0 === a
                    ? e.setDoorShut(t, !1)
                    : 1 === a
                    ? e.setDoorOpen(t, !1, !1)
                    : e.setDoorBroken(t, !0));
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "vehicle/vehiclesync",
                  "VehStream_SetLockStatus",
                  e.toString()
                );
              }
            });
            const d = (e, t) => {
                try {
                  if (
                    e &&
                    mp.vehicles.exists(e) &&
                    "vehicle" === e.type &&
                    0 !== e.handle &&
                    (t || (t = e.getVariable("vDoor")), a.g.IsJsonString(t))
                  ) {
                    t = JSON.parse(t);
                    for (let a = 0; a < 6; a++)
                      t &&
                        void 0 !== t[a] &&
                        (0 === t[a]
                          ? e.setDoorShut(a, !1)
                          : 1 === t[a]
                          ? e.setDoorOpen(a, !1, !1)
                          : e.setDoorBroken(a, !0));
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "vehicle/vehiclesync",
                    "setVehicleDoor",
                    e.toString()
                  );
                }
              },
              h = (e) => {
                try {
                  if (
                    e &&
                    mp.vehicles.exists(e) &&
                    "vehicle" === e.type &&
                    0 !== e.handle
                  ) {
                    for (let t = 0; t < 8; t++) e.setDoorBreakable(t, !1);
                    if (
                      (setTimeout(function () {
                        for (let t = 0; t < 8; t++)
                          e &&
                            mp.vehicles.exists(e) &&
                            e.setDoorBreakable(t, !0);
                      }, 1500),
                      e.trackVisibility(),
                      18 == e.getClass())
                    ) {
                      let t = e.getVariable("SIRENSOUND");
                      void 0 !== t && e.setSirenSound(Boolean(t));
                    }
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "vehicle/vehiclesync",
                    "setVehicleSyncData",
                    e.toString()
                  );
                }
              };
            a.g.getVehicleIndicatorsInfo = (e) => {
              try {
                e.getVariable("vLock")
                  ? mp.gui.emmit("window.vehicleState.doors (false)")
                  : mp.gui.emmit("window.vehicleState.doors (true)"),
                  e.getVariable("vEngine")
                    ? mp.gui.emmit("window.vehicleState.engine (true)")
                    : mp.gui.emmit("window.vehicleState.engine (false)");
                let t = e.getVariable("vIL");
                t
                  ? ((t = t.split("|")),
                    t && t.length > 1
                      ? ((t[0] = Number(t[0])), (t[1] = Number(t[1])))
                      : (t = [0, 0]))
                  : (t = [0, 0]),
                  t[0]
                    ? mp.gui.emmit("window.vehicleState.rightIL (true)")
                    : mp.gui.emmit("window.vehicleState.rightIL (false)"),
                  t[1]
                    ? mp.gui.emmit("window.vehicleState.leftIL (true)")
                    : mp.gui.emmit("window.vehicleState.leftIL (false)");
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "vehicle/vehiclesync",
                  "getVehicleIndicatorsInfo",
                  e.toString()
                );
              }
            };
            const u = async (e, t) => {
              try {
                e &&
                  mp.vehicles.exists(e) &&
                  "vehicle" === e.type &&
                  e.getIsEngineRunning() !== t &&
                  (e.setEngineOn(t, !0, !0),
                  e.setUndriveable(!t),
                  e.setLights(t ? 0 : 1),
                  e.getPedInSeat(-1) == a.g.localplayer.handle &&
                    (t
                      ? mp.gui.emmit("window.vehicleState.engine (true)")
                      : mp.gui.emmit("window.vehicleState.engine (false)")));
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "vehicle/vehiclesync",
                  "UpdateVehicleEngine",
                  e.toString()
                );
              }
            };
            mp.events.addDataHandler("PETROL", (e, t, o) => {
              try {
                e &&
                  mp.vehicles.exists(e) &&
                  "vehicle" === e.type &&
                  e.getPedInSeat(-1) == a.g.localplayer.handle &&
                  ((a.g.Petrol = Number(t)),
                  mp.gui.emmit(
                    `window.vehicleState.fuel(${t}, ${e.getClass()})`
                  ));
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "vehicle/vehiclesync",
                  "PETROL",
                  e.toString()
                );
              }
            }),
              mp.events.addDataHandler("isTicket", (e, t, a) => {
                try {
                  e &&
                    mp.vehicles.exists(e) &&
                    "vehicle" === e.type &&
                    (e.isTicket = !!t);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "synchronization/state",
                    "AGM",
                    e.toString()
                  );
                }
              });
          },
          7161: (e, t, a) => {
            let o = null,
              i = {
                1: {
                  player: {
                    dict: "anim@heists@box_carry@",
                    name: "idle",
                    flag: 50,
                  },
                  target: {
                    dict: "amb@code_human_in_car_idles@generic@ps@base",
                    name: "base",
                    flag: 33,
                    bone: 9816,
                    positionOffset: new mp.Vector3(0.015, 0.38, 0.11),
                    rotationOffset: new mp.Vector3(0, 0, 90),
                  },
                },
                2: {
                  player: {
                    dict: "anim@arena@celeb@flat@paired@no_props@",
                    name: "piggyback_c_player_a",
                    flag: 49,
                  },
                  target: {
                    dict: "anim@arena@celeb@flat@paired@no_props@",
                    name: "piggyback_c_player_b",
                    flag: 33,
                    bone: 0,
                    positionOffset: new mp.Vector3(0, -0.07, 0.45),
                    rotationOffset: new mp.Vector3(0, 0, 0),
                  },
                },
                3: {
                  player: {
                    dict: "missfinale_c2mcs_1",
                    name: "fin_c2_mcs_1_camman",
                    flag: 49,
                  },
                  target: {
                    dict: "nm",
                    name: "firemans_carry",
                    flag: 33,
                    bone: 0,
                    positionOffset: new mp.Vector3(0.27, 0.15, 0.63),
                    rotationOffset: new mp.Vector3(0, 0, 0),
                  },
                },
                4: {
                  player: {
                    dict: "anim@gangops@hostage@",
                    name: "perp_idle",
                    flag: 49,
                  },
                  target: {
                    dict: "anim@gangops@hostage@",
                    name: "victim_idle",
                    flag: 49,
                    bone: 0,
                    positionOffset: new mp.Vector3(-0.24, 0.11, 0),
                    rotationOffset: new mp.Vector3(0, 0, 0),
                  },
                },
              };
            mp.events.add("clearCarryng", () => {
              a.g.localplayer.carryngData &&
                (mp.events.callRemote("carryng.stop"), n(a.g.localplayer));
            });
            const n = (e) => {
                try {
                  const { player: t, target: o } = e.carryngData;
                  (t !== a.g.localplayer && o !== a.g.localplayer) ||
                    (mp.gui.emmit("window.UpdateButtonText('', '');"),
                    o === a.g.localplayer &&
                      (0 == t.position.x &&
                      0 == t.position.y &&
                      0 == t.position.z
                        ? a.g.localplayer.setCoordsNoOffset(
                            a.g.localplayer.position.x,
                            a.g.localplayer.position.y,
                            a.g.localplayer.position.z + 0.35,
                            !0,
                            !1,
                            !1
                          )
                        : a.g.localplayer.setCoordsNoOffset(
                            t.position.x,
                            t.position.y,
                            t.position.z,
                            !0,
                            !1,
                            !1
                          ))),
                    t.detach(!0, !1),
                    t.clearTasksImmediately(),
                    o.detach(!0, !1),
                    o.clearTasksImmediately(),
                    delete t.carryngData,
                    delete o.carryngData;
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/anim",
                    "ClearData",
                    e.toString()
                  );
                }
              },
              s = async (e) => {
                try {
                  if (!e.carryngData) return;
                  const { player: t, target: o, type: n } = e.carryngData,
                    { player: s, target: r } = i[n];
                  if (
                    (s.dict !== r.dict
                      ? await Promise.all([
                          a.g.requestAnimDict(s.dict),
                          a.g.requestAnimDict(r.dict),
                        ])
                      : await a.g.requestAnimDict(s.dict),
                    t.isPlayingAnim(s.dict, s.name, 3) ||
                      t.taskPlayAnim(
                        s.dict,
                        s.name,
                        8,
                        -8,
                        -1,
                        s.flag,
                        0,
                        !1,
                        !1,
                        !1
                      ),
                    o.isPlayingAnim(r.dict, r.name, 3) ||
                      o.taskPlayAnim(
                        r.dict,
                        r.name,
                        8,
                        -8,
                        -1,
                        r.flag,
                        0,
                        !1,
                        !1,
                        !1
                      ),
                    !o.isAttachedTo(t.handle))
                  ) {
                    if (
                      0 == t.position.x &&
                      0 == t.position.y &&
                      0 == t.position.z
                    )
                      return;
                    o.detach(!0, !1),
                      o.attachTo(
                        t.handle,
                        r.bone,
                        r.positionOffset.x,
                        r.positionOffset.y,
                        r.positionOffset.z,
                        r.rotationOffset.x,
                        r.rotationOffset.y,
                        r.rotationOffset.z,
                        !1,
                        !1,
                        !1,
                        !1,
                        0,
                        !0
                      );
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/anim",
                    "UseAnim",
                    e.toString()
                  );
                }
              };
            mp.events.add("syncCarryng", (e, t) => {
              try {
                let i = e.carryngData;
                if (i && !t) return void n(e);
                if (i || !t) return;
                const { id: r, type: l } = t,
                  m = mp.players.atRemoteId(r);
                (i = { player: e, target: m, type: l }),
                  (m.carryngData = i),
                  (e.carryngData = i),
                  (e !== a.g.localplayer && m !== a.g.localplayer) ||
                    mp.gui.emmit(
                      "window.UpdateButtonText('hud__icon-Anim', 'Чтобы сбросить анимацию, нажмите \"Пробел\" дважды.');"
                    ),
                  (o = Date.now() + 2500),
                  s(e);
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "world/anim",
                  "syncCarryng",
                  e.toString()
                );
              }
            }),
              setInterval(() => {
                try {
                  const e = a.g.localplayer.carryngData;
                  if (!e) return;
                  const { player: t, target: o } = e,
                    i = t === a.g.localplayer ? o : t;
                  if (!mp.players.exists(i))
                    return mp.events.callRemote("carryng.stop");
                  (a.g.vdist2(a.g.localplayer.position, i.position) > 10 ||
                    i.dimension != a.g.localplayer.dimension ||
                    a.g.cuffed ||
                    1 == a.g.isDemorgan ||
                    a.g.attachedtotrunk) &&
                    (mp.events.callRemote("carryng.stop"), n(a.g.localplayer));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/anim",
                    "time.everySec",
                    e.toString()
                  );
                }
              }, 1e3),
              mp.events.add("entityStreamOut", (e) => {
                try {
                  if ("player" !== e.type) return;
                  const t = e.carryngData;
                  if (!t) return;
                  const { player: o, target: i } = t;
                  (o !== a.g.localplayer && i !== a.g.localplayer) ||
                    (mp.events.callRemote("carryng.stop"), n(e));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/anim",
                    "entityStreamOut",
                    e.toString()
                  );
                }
              }),
              mp.events.add("playerQuit", (e) => {
                try {
                  e && e.carryngData && n(e);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/anim",
                    "playerQuit",
                    e.toString()
                  );
                }
              }),
              mp.events.add("playerDeath", (e, t, o) => {
                try {
                  if (e !== a.g.localplayer) return;
                  a.g.localplayer &&
                    a.g.localplayer.carryngData &&
                    (mp.events.callRemote("carryng.stop"), n(a.g.localplayer));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/anim",
                    "playerQuit",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.animation.stop", () => {
                try {
                  a.g.localplayer.carryngData &&
                    !a.g.isDeath &&
                    (mp.events.callRemote("carryng.stop"), n(a.g.localplayer));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/anim",
                    "VK_SPACE",
                    e.toString()
                  );
                }
              });
            const r = mp.game.controls;
            mp.events.add("render", () => {
              try {
                const e = Date.now(),
                  t = a.g.localplayer.carryngData;
                t &&
                  (r.disableControlAction(0, 21, !0),
                  r.disableControlAction(0, 24, !0),
                  r.disableControlAction(0, 25, !0),
                  r.disableControlAction(0, 69, !0),
                  r.disableControlAction(0, 75, !0),
                  r.disableControlAction(0, 92, !0),
                  r.disableControlAction(0, 114, !0),
                  r.disableControlAction(0, 140, !0),
                  r.disableControlAction(0, 141, !0),
                  r.disableControlAction(0, 142, !0),
                  r.disableControlAction(0, 257, !0),
                  r.disableControlAction(0, 263, !0),
                  r.disableControlAction(0, 264, !0),
                  t.player === a.g.localplayer &&
                    (a.g.localplayer.isRagdoll() ||
                      a.g.localplayer.isInWater()) &&
                    (n(a.g.localplayer), mp.events.callRemote("carryng.stop"))),
                  (!o || e >= o) &&
                    ((o = e + 2500),
                    mp.players.forEachInStreamRange((e) => {
                      s(e);
                    }),
                    s(a.g.localplayer));
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "world/anim",
                  "render",
                  e.toString()
                );
              }
            }),
              (a.g.vdist2 = (e, t, a = !0) => {
                try {
                  if (!e || !t) return -1;
                  const o = e.y - t.y,
                    i = e.x - t.x;
                  if (a) {
                    const a = e.z - t.z;
                    return Math.sqrt(o * o + i * i + a * a);
                  }
                  return Math.sqrt(o * o + i * i);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/anim",
                    "vdist2",
                    e.toString()
                  );
                }
              }),
              mp.events.add("ta1", (e, t) => {
                e.attachTo(
                  t.handle,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  !0,
                  !1,
                  !1,
                  !1,
                  0,
                  !1
                );
              }),
              mp.events.add("ta3", () => {
                player.detach(!0, !0);
              }),
              mp.events.add("ta2", () => {
                mp.players.local.detach(!0, !0);
              }),
              mp.events.add("Client_CarryPlayer", function (e, t, a) {
                try {
                  e &&
                    mp.players.exists(e) &&
                    t &&
                    mp.players.exists(t) &&
                    (t && mp.players.exists(t) && t.detach(!0, !1),
                    1 == a
                      ? t.attachTo(
                          e.handle,
                          0,
                          0.2,
                          0.25,
                          0.3,
                          0,
                          0,
                          90,
                          !1,
                          !1,
                          !1,
                          !1,
                          0,
                          !1
                        )
                      : 2 == a
                      ? t.attachTo(
                          e.handle,
                          0,
                          0.2,
                          0.1,
                          0.6,
                          0,
                          0,
                          0,
                          !1,
                          !1,
                          !1,
                          !1,
                          0,
                          !1
                        )
                      : 3 == a &&
                        t.attachTo(
                          e.handle,
                          0,
                          0,
                          -0.07,
                          0.45,
                          0,
                          0,
                          0,
                          !1,
                          !1,
                          !1,
                          !1,
                          0,
                          !1
                        ));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/anim",
                    "Client_CarryPlayer",
                    e.toString()
                  );
                }
              });
          },
          8099: (e, t, a) => {
            const o = {
              pd_0: {
                id: 0,
                hash: mp.game.joaat("gabz_mrpd_door_04"),
                toggled: !1,
                position: new mp.Vector3(440.5201, -977.6011, 30.82319),
              },
              pd_1: {
                id: 1,
                hash: mp.game.joaat("gabz_mrpd_door_04"),
                toggled: !1,
                position: new mp.Vector3(445.4067, -984.2014, 30.82319),
              },
              pd_2: {
                id: 2,
                hash: mp.game.joaat("gabz_mrpd_door_05"),
                toggled: !1,
                position: new mp.Vector3(440.5201, -986.2335, 30.82319),
              },
              pd_3: {
                id: 3,
                hash: mp.game.joaat("gabz_mrpd_door_04"),
                toggled: !1,
                position: new mp.Vector3(458.6543, -976.8864, 30.82319),
              },
              pd_4: {
                id: 4,
                hash: mp.game.joaat("gabz_mrpd_door_05"),
                toggled: !1,
                position: new mp.Vector3(458.6543, -990.6498, 30.82319),
              },
              pd_5: {
                id: 5,
                hash: mp.game.joaat("gabz_mrpd_door_02"),
                toggled: !1,
                position: new mp.Vector3(458.0894, -995.5247, 30.82319),
              },
              pd_6: {
                id: 6,
                hash: mp.game.joaat("gabz_mrpd_door_05"),
                toggled: !1,
                position: new mp.Vector3(452.2663, -995.5254, 30.82319),
              },
              pd_7: {
                id: 7,
                hash: mp.game.joaat("gabz_mrpd_door_01"),
                toggled: !1,
                position: new mp.Vector3(438.1971, -996.3167, 30.82319),
              },
              pd_8: {
                id: 8,
                hash: mp.game.joaat("gabz_mrpd_door_01"),
                toggled: !1,
                position: new mp.Vector3(438.1971, -993.9113, 30.82319),
              },
              pd_9: {
                id: 9,
                hash: mp.game.joaat("gabz_mrpd_reception_entrancedoor"),
                toggled: !1,
                position: new mp.Vector3(440.7392, -998.7462, 30.8153),
              },
              pd_10: {
                id: 10,
                hash: mp.game.joaat("gabz_mrpd_reception_entrancedoor"),
                toggled: !1,
                position: new mp.Vector3(443.0618, -998.7462, 30.8153),
              },
              pd_11: {
                id: 11,
                hash: mp.game.joaat("gabz_mrpd_reception_entrancedoor"),
                toggled: !1,
                position: new mp.Vector3(458.2087, -972.2543, 30.81531),
              },
              pd_12: {
                id: 12,
                hash: mp.game.joaat("gabz_mrpd_reception_entrancedoor"),
                toggled: !1,
                position: new mp.Vector3(455.8862, -972.2543, 30.81531),
              },
              pd_13: {
                id: 13,
                hash: mp.game.joaat("gabz_mrpd_room13_parkingdoor"),
                toggled: !1,
                position: new mp.Vector3(464.1591, -974.6656, 26.3707),
              },
              pd_14: {
                id: 14,
                hash: mp.game.joaat("gabz_mrpd_room13_parkingdoor"),
                toggled: !1,
                position: new mp.Vector3(464.1566, -997.5093, 26.3707),
              },
              pd_15: {
                id: 15,
                hash: mp.game.joaat("gabz_mrpd_door_01"),
                toggled: !1,
                position: new mp.Vector3(469.9274, -1000.544, 26.40548),
              },
              pd_16: {
                id: 16,
                hash: mp.game.joaat("gabz_mrpd_door_01"),
                toggled: !1,
                position: new mp.Vector3(467.5222, -1000.544, 26.40548),
              },
              pd_17: {
                id: 17,
                hash: mp.game.joaat("gabz_mrpd_door_05"),
                toggled: !1,
                position: new mp.Vector3(471.3753, -987.4374, 26.40548),
              },
              pd_18: {
                id: 18,
                hash: mp.game.joaat("gabz_mrpd_door_04"),
                toggled: !1,
                position: new mp.Vector3(471.3753, -985.0319, 26.40548),
              },
              pd_19: {
                id: 116,
                hash: mp.game.joaat("gabz_mrpd_door_03"),
                toggled: !1,
                position: new mp.Vector3(467.3686, -1014.406, 26.48382),
              },
              pd_20: {
                id: 117,
                hash: mp.game.joaat("gabz_mrpd_door_03"),
                toggled: !1,
                position: new mp.Vector3(469.7743, -1014.406, 26.48382),
              },
              pd_21: {
                id: 118,
                hash: mp.game.joaat("gabz_mrpd_door_02"),
                toggled: !1,
                position: new mp.Vector3(471.3679, -1007.793, 26.40548),
              },
              pd_22: {
                id: 119,
                hash: mp.game.joaat("gabz_mrpd_door_02"),
                toggled: !1,
                position: new mp.Vector3(471.3758, -1010.198, 26.40548),
              },
              pd_23: {
                id: 120,
                hash: mp.game.joaat("gabz_mrpd_door_05"),
                toggled: !1,
                position: new mp.Vector3(448.9846, -995.5264, 35.10376),
              },
              pd_24: {
                id: 121,
                hash: mp.game.joaat("gabz_mrpd_door_04"),
                toggled: !1,
                position: new mp.Vector3(448.9868, -990.2007, 35.10376),
              },
              pd_25: {
                id: 122,
                hash: mp.game.joaat("gabz_mrpd_door_05"),
                toggled: !1,
                position: new mp.Vector3(448.9868, -981.5785, 35.10376),
              },
              pd_26: {
                id: 123,
                hash: mp.game.joaat("gabz_mrpd_door_05"),
                toggled: !1,
                position: new mp.Vector3(459.9454, -990.7053, 35.10398),
              },
              pd_27: {
                id: 124,
                hash: mp.game.joaat("gabz_mrpd_door_04"),
                toggled: !1,
                position: new mp.Vector3(459.9454, -981.0742, 35.10398),
              },
              pd_28: {
                id: 125,
                hash: mp.game.joaat("gabz_mrpd_cells_door"),
                toggled: !1,
                position: new mp.Vector3(481.0084, -1004.118, 26.48005),
              },
              pd_29: {
                id: 126,
                hash: mp.game.joaat("gabz_mrpd_door_02"),
                toggled: !1,
                position: new mp.Vector3(479.6638, -997.91, 26.4065),
              },
              pd_30: {
                id: 127,
                hash: mp.game.joaat("gabz_mrpd_door_02"),
                toggled: !1,
                position: new mp.Vector3(482.0686, -997.91, 26.4065),
              },
              pd_31: {
                id: 128,
                hash: mp.game.joaat("gabz_mrpd_door_02"),
                toggled: !1,
                position: new mp.Vector3(478.2892, -997.9101, 26.40548),
              },
              pd_32: {
                id: 129,
                hash: mp.game.joaat("gabz_mrpd_door_04"),
                toggled: !1,
                position: new mp.Vector3(482.6703, -995.7285, 26.40548),
              },
              pd_33: {
                id: 130,
                hash: mp.game.joaat("gabz_mrpd_door_04"),
                toggled: !1,
                position: new mp.Vector3(482.6699, -992.2991, 26.40548),
              },
              pd_34: {
                id: 131,
                hash: mp.game.joaat("gabz_mrpd_door_04"),
                toggled: !1,
                position: new mp.Vector3(482.6701, -987.5792, 26.40548),
              },
              pd_35: {
                id: 132,
                hash: mp.game.joaat("gabz_mrpd_door_04"),
                toggled: !1,
                position: new mp.Vector3(482.6694, -983.9868, 26.40548),
              },
              pd_36: {
                id: 133,
                hash: mp.game.joaat("gabz_mrpd_door_03"),
                toggled: !1,
                position: new mp.Vector3(475.8323, -990.4839, 26.40548),
              },
              pd_37: {
                id: 134,
                hash: mp.game.joaat("gabz_mrpd_door_01"),
                toggled: !1,
                position: new mp.Vector3(469.4406, -985.0313, 30.82319),
              },
              pd_38: {
                id: 135,
                hash: mp.game.joaat("gabz_mrpd_door_01"),
                toggled: !1,
                position: new mp.Vector3(469.4406, -987.4377, 30.82319),
              },
              pd_39: {
                id: 136,
                hash: mp.game.joaat("gabz_mrpd_door_05"),
                toggled: !1,
                position: new mp.Vector3(472.9777, -989.8247, 30.82319),
              },
              pd_40: {
                id: 137,
                hash: mp.game.joaat("gabz_mrpd_door_04"),
                toggled: !1,
                position: new mp.Vector3(475.3837, -989.8247, 30.82319),
              },
              pd_41: {
                id: 138,
                hash: mp.game.joaat("gabz_mrpd_door_04"),
                toggled: !1,
                position: new mp.Vector3(476.7512, -999.6307, 30.82319),
              },
              pd_42: {
                id: 139,
                hash: mp.game.joaat("gabz_mrpd_door_03"),
                toggled: !1,
                position: new mp.Vector3(485.6133, -1002.902, 30.78697),
              },
              pd_43: {
                id: 140,
                hash: mp.game.joaat("gabz_mrpd_door_03"),
                toggled: !1,
                position: new mp.Vector3(488.0184, -1002.902, 30.78697),
              },
              pd_44: {
                id: 141,
                hash: mp.game.joaat("gabz_mrpd_door_03"),
                toggled: !1,
                position: new mp.Vector3(487.4378, -1000.189, 30.78697),
              },
              pd_45: {
                id: 142,
                hash: mp.game.joaat("gabz_mrpd_door_05"),
                toggled: !1,
                position: new mp.Vector3(479.7534, -988.6204, 30.82319),
              },
              pd_46: {
                id: 143,
                hash: mp.game.joaat("gabz_mrpd_door_04"),
                toggled: !1,
                position: new mp.Vector3(479.7534, -986.2151, 30.82319),
              },
              pd_47: {
                id: 144,
                hash: mp.game.joaat("gabz_mrpd_door_03"),
                toggled: !1,
                position: new mp.Vector3(464.3086, -984.5284, 43.77124),
              },
              pd_48: {
                id: 145,
                hash: mp.game.joaat("gabz_mrpd_door_02"),
                toggled: !1,
                position: new mp.Vector3(472.9781, -984.3722, 30.82319),
              },
              pd_49: {
                id: 146,
                hash: mp.game.joaat("gabz_mrpd_door_02"),
                toggled: !1,
                position: new mp.Vector3(475.3837, -984.3722, 30.82319),
              },
              pd_50: {
                id: 147,
                hash: mp.game.joaat("gabz_mrpd_reception_entrancedoor"),
                toggled: !1,
                position: new mp.Vector3(434.7444, -980.7556, 30.8153),
              },
              pd_51: {
                id: 148,
                hash: mp.game.joaat("gabz_mrpd_reception_entrancedoor"),
                toggled: !1,
                position: new mp.Vector3(434.7444, -983.0781, 30.8153),
              },
              pd_52: {
                id: 149,
                hash: mp.game.joaat("gabz_mrpd_door_03"),
                toggled: !1,
                position: new mp.Vector3(479.7507, -999.629, 30.78917),
              },
              pd_53: {
                id: 150,
                hash: mp.game.joaat("gabz_mrpd_garage_door"),
                toggled: !1,
                position: new mp.Vector3(431.4119, -1000.772, 26.69661),
                distance: 3.1,
              },
              pd_54: {
                id: 151,
                hash: mp.game.joaat("gabz_mrpd_garage_door"),
                toggled: !1,
                position: new mp.Vector3(452.3005, -1000.772, 26.69661),
                distance: 3.1,
              },
              pd_55: {
                id: 152,
                hash: mp.game.joaat("gabz_mrpd_cells_door"),
                toggled: !1,
                position: new mp.Vector3(476.6157, -1008.875, 26.48005),
              },
              pd_56: {
                id: 153,
                hash: mp.game.joaat("gabz_mrpd_door_01"),
                toggled: !1,
                position: new mp.Vector3(475.9539, -1006.938, 26.40639),
              },
              pd_57: {
                id: 154,
                hash: mp.game.joaat("gabz_mrpd_door_04"),
                toggled: !1,
                position: new mp.Vector3(475.9539, -1010.819, 26.40639),
              },
              pd_58: {
                id: 155,
                hash: mp.game.joaat("gabz_mrpd_cells_door"),
                toggled: !1,
                position: new mp.Vector3(484.1764, -1007.734, 26.48005),
              },
              pd_59: {
                id: 156,
                hash: mp.game.joaat("gabz_mrpd_cells_door"),
                toggled: !1,
                position: new mp.Vector3(486.9131, -1012.189, 26.48005),
              },
              pd_60: {
                id: 157,
                hash: mp.game.joaat("gabz_mrpd_cells_door"),
                toggled: !1,
                position: new mp.Vector3(483.9127, -1012.189, 26.48005),
              },
              pd_61: {
                id: 158,
                hash: mp.game.joaat("gabz_mrpd_cells_door"),
                toggled: !1,
                position: new mp.Vector3(480.9128, -1012.189, 26.48005),
              },
              pd_62: {
                id: 159,
                hash: mp.game.joaat("gabz_mrpd_cells_door"),
                toggled: !1,
                position: new mp.Vector3(477.9126, -1012.189, 26.48005),
              },
              pd_63: {
                id: 160,
                hash: mp.game.joaat("gabz_mrpd_door_01"),
                toggled: !1,
                position: new mp.Vector3(479.06, -1003.173, 26.4065),
              },
              pd_64: {
                id: 161,
                hash: mp.game.joaat("gabz_mrpd_door_02"),
                toggled: !1,
                position: new mp.Vector3(479.0624, -985.0323, 26.40548),
              },
              pd_65: {
                id: 162,
                hash: mp.game.joaat("gabz_mrpd_door_02"),
                toggled: !1,
                position: new mp.Vector3(479.0624, -987.4376, 26.40548),
              },
              pd_66: {
                id: 163,
                hash: mp.game.joaat("gabz_mrpd_bollards1"),
                toggled: !1,
                position: new mp.Vector3(410.0258, -1020.15955, 29.2202),
                distance: 3.1,
              },
              pd_67: {
                id: 164,
                hash: mp.game.joaat("gabz_mrpd_bollards2"),
                toggled: !1,
                position: new mp.Vector3(410.0258, -1028.3286, 29.2202),
                distance: 3.1,
              },
              pd_68: {
                id: 165,
                hash: mp.game.joaat("hei_prop_station_gate"),
                toggled: !1,
                position: new mp.Vector3(488.8948, -1020.0441, 28.213678),
                distance: 3.1,
              },
              gov_0: {
                hash: mp.game.joaat("v_ilev_ph_door01"),
                toggled: !1,
                position: new mp.Vector3(-1299.579, -577.0803, 30.72524),
              },
              gov_1: {
                hash: mp.game.joaat("v_ilev_ph_door002"),
                toggled: !1,
                position: new mp.Vector3(-1297.908, -579.0725, 30.72524),
              },
              gov_2: {
                hash: mp.game.joaat("ex_p_mp_door_apart_door_black"),
                toggled: !1,
                position: new mp.Vector3(-1286.801, -584.6476, 34.52389),
              },
              gov_3: {
                hash: mp.game.joaat("ex_p_mp_door_apart_door_black"),
                toggled: !1,
                position: new mp.Vector3(-1291.357, -579.2186, 34.52389),
              },
              gov_4: {
                hash: mp.game.joaat("ex_p_mp_door_apart_door_black"),
                toggled: !1,
                position: new mp.Vector3(-1298.643, -570.5358, 34.52389),
              },
              gov_5: {
                hash: mp.game.joaat("ex_p_mp_door_apart_door_black"),
                toggled: !1,
                position: new mp.Vector3(-1286.799, -584.6511, 37.53782),
              },
              gov_6: {
                hash: mp.game.joaat("ex_p_mp_door_apart_door_black"),
                toggled: !1,
                position: new mp.Vector3(-1291.355, -579.2203, 37.53782),
              },
              gov_7: {
                hash: mp.game.joaat("ex_p_mp_door_apart_door_black"),
                toggled: !1,
                position: new mp.Vector3(-1298.648, -570.53, 37.53782),
              },
              gov_8: {
                hash: mp.game.joaat("ex_p_mp_door_apart_door_black"),
                toggled: !1,
                position: new mp.Vector3(-1288.131, -573.478, 41.33635),
              },
              gov_9: {
                hash: mp.game.joaat("ex_p_mp_door_apart_door_black"),
                toggled: !1,
                position: new mp.Vector3(-1290.119, -575.1461, 41.33635),
              },
              gov_10: {
                hash: mp.game.joaat("ex_p_mp_door_apart_door_black"),
                toggled: !1,
                position: new mp.Vector3(-1292.257, -568.2955, 41.33635),
              },
              gov_11: {
                hash: mp.game.joaat("ex_p_mp_door_apart_door_black"),
                toggled: !1,
                position: new mp.Vector3(-1295.632, -563.8185, 41.3347),
              },
              gov_12: {
                hash: mp.game.joaat("vw_prop_vw_casino_door_01c"),
                toggled: !1,
                position: new mp.Vector3(-1299.342, -562.3377, 30.7214),
              },
              gov_13: {
                hash: mp.game.joaat("ex_p_mp_door_apart_door_black"),
                toggled: !1,
                position: new mp.Vector3(-1291.947, -584.8716, 41.33246),
              },
              gov_14: {
                hash: mp.game.joaat("fluorine4305_cityholl_secdoor"),
                toggled: !1,
                position: new mp.Vector3(-1302.739, -569.4397, 40.18685),
              },
              fib_27: {
                hash: mp.game.joaat("q_fib2_maindoor_l"),
                toggled: !1,
                position: new mp.Vector3(2515.793, -355.7735, 93.09061),
              },
              fib_28: {
                hash: mp.game.joaat("q_fib2_maindoor_r"),
                toggled: !1,
                position: new mp.Vector3(2513.927, -357.5839, 93.09061),
              },
              fib_29: {
                hash: mp.game.joaat("q_fib_door2"),
                toggled: !1,
                position: new mp.Vector3(2497.479, -353.3627, 94.25587),
              },
              fib_30: {
                hash: mp.game.joaat("q_fib_door2"),
                toggled: !1,
                position: new mp.Vector3(2504.733, -360.6253, 94.25505),
              },
              fib_31: {
                hash: mp.game.joaat("q_fib_door2"),
                toggled: !1,
                position: new mp.Vector3(2506.565, -362.4732, 94.25505),
              },
              fib_32: {
                hash: mp.game.joaat("v_ilev_rc_door2"),
                toggled: !1,
                position: new mp.Vector3(2497.491, -353.3733, 82.45354),
              },
              fib_33: {
                hash: mp.game.joaat("q_fib_door2"),
                toggled: !1,
                position: new mp.Vector3(2517.747, -351.2896, 94.25505),
              },
              fib_34: {
                hash: mp.game.joaat("q_fib_door2"),
                toggled: !1,
                position: new mp.Vector3(2515.93, -349.4392, 94.25505),
              },
              fib_35: {
                hash: mp.game.joaat("v_ilev_rc_door2"),
                toggled: !1,
                position: new mp.Vector3(2487.148, -369.1625, 82.85587),
              },
              fib_36: {
                hash: mp.game.joaat("q_fib_door2"),
                toggled: !1,
                position: new mp.Vector3(2520.46, -336.167, 94.25505),
              },
              fib_37: {
                hash: mp.game.joaat("q_fib_door2"),
                toggled: !1,
                position: new mp.Vector3(2522.278, -338.0288, 94.25505),
              },
              fib_38: {
                hash: mp.game.joaat("q_fib_door2"),
                toggled: !1,
                position: new mp.Vector3(2497.479, -353.3627, 102.0569),
              },
              fib_39: {
                hash: mp.game.joaat("v_ilev_rc_door2"),
                toggled: !1,
                position: new mp.Vector3(2481.32, -380.7134, 82.85448),
              },
              fib_40: {
                hash: mp.game.joaat("v_ilev_rc_door2"),
                toggled: !1,
                position: new mp.Vector3(2483.16, -378.8804, 82.85448),
              },
              fib_41: {
                hash: mp.game.joaat("q_fib_door2"),
                toggled: !1,
                position: new mp.Vector3(2497.479, -353.3627, 105.8514),
              },
              fib_42: {
                hash: mp.game.joaat("q_fib2_maindoor_l"),
                toggled: !1,
                position: new mp.Vector3(2504.823, -349.5903, 100.8939),
              },
              fib_43: {
                hash: mp.game.joaat("q_fib2_maindoor_r"),
                toggled: !1,
                position: new mp.Vector3(2506.667, -347.7571, 100.8939),
              },
              fib_44: {
                hash: mp.game.joaat("q_fib_metalldoor2"),
                toggled: !1,
                position: new mp.Vector3(2505.883, -348.6725, 105.8514),
              },
              fib_45: {
                hash: mp.game.joaat("q_fib_door2"),
                toggled: !1,
                position: new mp.Vector3(2513.277, -341.0304, 102.0555),
              },
              fib_46: {
                hash: mp.game.joaat("q_fib_door2"),
                toggled: !1,
                position: new mp.Vector3(2511.452, -342.8816, 102.0571),
              },
              fib_47: {
                hash: mp.game.joaat("q_fib_door2"),
                toggled: !1,
                position: new mp.Vector3(2517.106, -342.7386, 105.8514),
              },
              fib_48: {
                hash: mp.game.joaat("q_fib_door2"),
                toggled: !1,
                position: new mp.Vector3(2508.845, -340.2705, 102.0571),
              },
              fib_49: {
                hash: mp.game.joaat("q_fib_door2"),
                toggled: !1,
                position: new mp.Vector3(2510.669, -338.4214, 102.0575),
              },
              fib_50: {
                hash: mp.game.joaat("v_ilev_rc_door2"),
                toggled: !1,
                position: new mp.Vector3(2507.461, -335.7412, 115.7478),
              },
              fib_51: {
                hash: mp.game.joaat("q_fib_door2"),
                toggled: !1,
                position: new mp.Vector3(2519.766, -334.5703, 102.0571),
              },
              fib_52: {
                hash: mp.game.joaat("q_fib_door2"),
                toggled: !1,
                position: new mp.Vector3(2521.595, -332.7202, 102.0563),
              },
              fib_53: {
                hash: mp.game.joaat("q_fib_door2"),
                toggled: !1,
                position: new mp.Vector3(2506.364, -357.1231, 94.25505),
              },
              fib_54: {
                hash: mp.game.joaat("q_fib_door2"),
                toggled: !1,
                position: new mp.Vector3(2518.958, -330.1115, 102.0583),
              },
              fib_55: {
                hash: mp.game.joaat("q_fib_door2"),
                toggled: !1,
                position: new mp.Vector3(2517.13, -331.9598, 102.0573),
              },
              fib_56: {
                hash: mp.game.joaat("q_fib_door2"),
                toggled: !1,
                position: new mp.Vector3(2516.454, -332.6185, 105.8652),
              },
              fib_57: {
                hash: mp.game.joaat("q_fib_door2"),
                toggled: !1,
                position: new mp.Vector3(2514.631, -334.4745, 105.8652),
              },
              fib_58: {
                hash: mp.game.joaat("q_fib2_maindoor_l"),
                toggled: !1,
                position: new mp.Vector3(2507.158, -347.0484, 93.09061),
              },
              fib_59: {
                hash: mp.game.joaat("q_fib2_maindoor_r"),
                toggled: !1,
                position: new mp.Vector3(2505.317, -348.8851, 93.09137),
              },
              news_0: {
                id: 23,
                hash: mp.game.joaat("int_doorqnxwn"),
                toggled: !1,
                position: new mp.Vector3(-597.9537, -931.1675, 23.98719),
              },
              news_1: {
                id: 24,
                hash: mp.game.joaat("int_doorqnxwn"),
                toggled: !1,
                position: new mp.Vector3(-597.9537, -928.5671, 23.98719),
              },
              news_2: {
                id: 25,
                hash: mp.game.joaat("int_doorqnxwn"),
                toggled: !1,
                position: new mp.Vector3(-592.9261, -912.9875, 23.92565),
              },
              news_3: {
                id: 26,
                hash: mp.game.joaat("int_doorqnxwn"),
                toggled: !1,
                position: new mp.Vector3(-590.3256, -912.9875, 23.92565),
              },
              news_4: {
                id: 27,
                hash: mp.game.joaat("apa_p_mp_yacht_door_01"),
                toggled: !1,
                position: new mp.Vector3(-592.9094, -917.332, 23.99554),
              },
              news_5: {
                id: 28,
                hash: mp.game.joaat("apa_p_mp_yacht_door_01"),
                toggled: !1,
                position: new mp.Vector3(-590.3318, -917.3271, 23.99625),
              },
              news_6: {
                id: 29,
                hash: mp.game.joaat("int_doorqnxwn"),
                toggled: !1,
                position: new mp.Vector3(-573.8361, -939.5793, 23.98866),
              },
              news_7: {
                id: 198,
                hash: mp.game.joaat("int_doorqnxwn"),
                toggled: !1,
                position: new mp.Vector3(-576.4365, -939.5793, 23.98866),
              },
              news_8: {
                id: 199,
                hash: mp.game.joaat("apa_p_mp_yacht_door_01"),
                toggled: !1,
                position: new mp.Vector3(-581.402, -933.0014, 24.00136),
              },
              news_9: {
                id: 200,
                hash: mp.game.joaat("apa_p_mp_yacht_door_01"),
                toggled: !1,
                position: new mp.Vector3(-574.9709, -938.3935, 28.3405),
              },
              news_10: {
                id: 201,
                hash: mp.game.joaat("apa_p_mp_yacht_door_01"),
                toggled: !1,
                position: new mp.Vector3(-574.9844, -935.8165, 28.3405),
              },
              news_11: {
                id: 202,
                hash: mp.game.joaat("apa_p_mp_yacht_door_01"),
                toggled: !1,
                position: new mp.Vector3(-579.2458, -928.5426, 28.3405),
              },
              news_12: {
                id: 203,
                hash: mp.game.joaat("apa_p_mp_yacht_door_01"),
                toggled: !1,
                position: new mp.Vector3(-573.3254, -926.6243, 28.3405),
              },
              news_13: {
                id: 204,
                hash: mp.game.joaat("apa_p_mp_yacht_door_01"),
                toggled: !1,
                position: new mp.Vector3(-580.0452, -918.1828, 28.3405),
              },
              news_14: {
                id: 205,
                hash: mp.game.joaat("apa_p_mp_yacht_door_01"),
                toggled: !1,
                position: new mp.Vector3(-576.4024, -918.7453, 28.3405),
              },
              news_15: {
                id: 206,
                hash: mp.game.joaat("apa_p_mp_yacht_door_01"),
                toggled: !1,
                position: new mp.Vector3(-594.1183, -931.8518, 32.6852),
              },
              news_16: {
                id: 207,
                hash: mp.game.joaat("apa_p_mp_yacht_door_01"),
                toggled: !1,
                position: new mp.Vector3(-584.1162, -934.3, 32.6852),
              },
              news_17: {
                id: 208,
                hash: mp.game.joaat("apa_p_mp_yacht_door_01"),
                toggled: !1,
                position: new mp.Vector3(-574.5792, -935.1076, 32.6852),
              },
              news_18: {
                id: 209,
                hash: mp.game.joaat("apa_p_mp_yacht_door_01"),
                toggled: !1,
                position: new mp.Vector3(-575.6975, -926.0967, 32.6852),
              },
              news_19: {
                id: 210,
                hash: mp.game.joaat("v_ilev_rc_door2"),
                toggled: !1,
                position: new mp.Vector3(-569.0736, -928.4166, 33.19804),
              },
              news_20: {
                id: 211,
                hash: mp.game.joaat("v_ilev_rc_door2"),
                toggled: !1,
                position: new mp.Vector3(-568.3461, -927.1174, 36.9892),
              },
              rm_0: {
                id: 273,
                hash: mp.game.joaat("dvere1"),
                toggled: !1,
                position: new mp.Vector3(-112.3048, 985.4119, 236.3505),
              },
              rm_1: {
                id: 274,
                hash: mp.game.joaat("dvere1"),
                toggled: !1,
                position: new mp.Vector3(-112.7981, 986.7715, 236.3505),
              },
              rm_2: {
                id: 275,
                hash: mp.game.joaat("dvere1"),
                toggled: !1,
                position: new mp.Vector3(-57.58525, 980.3419, 233.455),
              },
              rm_3: {
                id: 276,
                hash: mp.game.joaat("dvere1"),
                toggled: !1,
                position: new mp.Vector3(-58.94353, 979.8441, 233.455),
              },
              rm_4: {
                id: 277,
                hash: mp.game.joaat("dvere1"),
                toggled: !1,
                position: new mp.Vector3(-61.68702, 998.0019, 234.9928),
              },
              rm_5: {
                id: 278,
                hash: mp.game.joaat("dvere1"),
                toggled: !1,
                position: new mp.Vector3(-62.79199, 998.9296, 234.9928),
              },
              rm_6: {
                id: 279,
                hash: mp.game.joaat("dvere2"),
                toggled: !1,
                position: new mp.Vector3(-68.35663, 988.3166, 234.5232),
              },
              rm_7: {
                id: 280,
                hash: mp.game.joaat("dvere2"),
                toggled: !1,
                position: new mp.Vector3(-66.67601, 986.9324, 234.5232),
              },
              rm_8: {
                id: 281,
                hash: mp.game.joaat("dvere2"),
                toggled: !1,
                position: new mp.Vector3(-59.00682, 988.5123, 235.3498),
              },
              rm_9: {
                id: 282,
                hash: mp.game.joaat("dvere2"),
                toggled: !1,
                position: new mp.Vector3(-59.77669, 990.5541, 235.3498),
              },
              rm_10: {
                id: 283,
                hash: mp.game.joaat("dvere2"),
                toggled: !1,
                position: new mp.Vector3(-69.96351, 1008.098, 234.5199),
              },
              rm_11: {
                id: 284,
                hash: mp.game.joaat("dvere2"),
                toggled: !1,
                position: new mp.Vector3(-71.65341, 1009.482, 234.5199),
              },
              rm_12: {
                id: 285,
                hash: mp.game.joaat("dvere2"),
                toggled: !1,
                position: new mp.Vector3(-96.74586, 989.6261, 235.8943),
              },
              rm_13: {
                id: 286,
                hash: mp.game.joaat("dvere2"),
                toggled: !1,
                position: new mp.Vector3(-98.78287, 988.8587, 235.8943),
              },
              rm_14: {
                id: 287,
                hash: mp.game.joaat("dvere2"),
                toggled: !1,
                position: new mp.Vector3(-105.7796, 976.3494, 235.8943),
              },
              rm_15: {
                id: 288,
                hash: mp.game.joaat("dvere2"),
                toggled: !1,
                position: new mp.Vector3(-103.7409, 977.12, 235.8943),
              },
              rm_16: {
                id: 289,
                hash: mp.game.joaat("dvere2"),
                toggled: !1,
                position: new mp.Vector3(-110.1531, 999.5685, 235.8778),
              },
              rm_17: {
                id: 290,
                hash: mp.game.joaat("dvere2"),
                toggled: !1,
                position: new mp.Vector3(-112.1911, 998.7998, 235.8778),
              },
              rm_18: {
                id: 291,
                hash: mp.game.joaat("dvere2"),
                toggled: !1,
                position: new mp.Vector3(-102.27, 1010.245, 235.8778),
              },
              rm_19: {
                id: 292,
                hash: mp.game.joaat("dvere2"),
                toggled: !1,
                position: new mp.Vector3(-103.0371, 1012.285, 235.8778),
              },
              rm_20: {
                id: 293,
                hash: mp.game.joaat("dvere2"),
                toggled: !1,
                position: new mp.Vector3(-57.77551, 985.0511, 235.3498),
              },
              rm_21: {
                id: 294,
                hash: mp.game.joaat("dvere2"),
                toggled: !1,
                position: new mp.Vector3(-57.00851, 983.0106, 235.3498),
              },
              am_0: {
                id: 295,
                hash: mp.game.joaat("v_ilev_fh_door02"),
                toggled: !1,
                position: new mp.Vector3(-1786.244, 420.6706, 117.0606),
              },
              am_1: {
                id: 296,
                hash: mp.game.joaat("brofx_mansion08_dvere1"),
                toggled: !1,
                position: new mp.Vector3(-1788.572, 433.871, 128.4881),
              },
              am_2: {
                id: 297,
                hash: mp.game.joaat("brofx_mansion08_dvere1"),
                toggled: !1,
                position: new mp.Vector3(-1788.572, 435.876, 128.4881),
              },
              am_3: {
                id: 298,
                hash: mp.game.joaat("brofx_mansion08_dvere4"),
                toggled: !1,
                position: new mp.Vector3(-1805.387, 428.9408, 129.1351),
              },
              am_4: {
                id: 299,
                hash: mp.game.joaat("brofx_mansion08_dvere4"),
                toggled: !1,
                position: new mp.Vector3(-1804.171, 428.9404, 129.1351),
              },
              am_5: {
                id: 300,
                hash: mp.game.joaat("brofx_mansion08_dvere3"),
                toggled: !1,
                position: new mp.Vector3(-1805.543, 436.2214, 129.2271),
              },
              am_6: {
                id: 301,
                hash: mp.game.joaat("brofx_mansion08_dvere3"),
                toggled: !1,
                position: new mp.Vector3(-1804.334, 436.221, 129.2271),
              },
              am_7: {
                id: 302,
                hash: mp.game.joaat("brofx_mansion08_dvere1"),
                toggled: !1,
                position: new mp.Vector3(-1813.163, 447.9712, 128.7288),
              },
              am_8: {
                id: 303,
                hash: mp.game.joaat("brofx_mansion08_dvere1"),
                toggled: !1,
                position: new mp.Vector3(-1813.163, 445.9633, 128.7288),
              },
              am_9: {
                id: 304,
                hash: mp.game.joaat("brofx_mansion08_dvere1"),
                toggled: !1,
                position: new mp.Vector3(-1815.435, 428.556, 132.6102),
              },
              am_10: {
                id: 305,
                hash: mp.game.joaat("brofx_mansion08_dvere1"),
                toggled: !1,
                position: new mp.Vector3(-1817.442, 428.556, 132.6102),
              },
              am_11: {
                id: 306,
                hash: mp.game.joaat("brofx_mansion08_dvere1"),
                toggled: !1,
                position: new mp.Vector3(-1801.679, 411.8485, 128.5137),
              },
              am_12: {
                id: 307,
                hash: mp.game.joaat("brofx_mansion08_dvere3"),
                toggled: !1,
                position: new mp.Vector3(-1798.844, 409.2044, 114.0564),
              },
              am_13: {
                id: 308,
                hash: mp.game.joaat("brofx_mansion08_dvere3"),
                toggled: !1,
                position: new mp.Vector3(-1797.852, 409.8991, 114.0564),
              },
              am_14: {
                id: 309,
                hash: mp.game.joaat("brofx_mansion08_dvere1"),
                toggled: !1,
                position: new mp.Vector3(-1788.676, 426.3459, 122.8525),
              },
              am_15: {
                id: 310,
                hash: mp.game.joaat("brofx_mansion08_dvere1"),
                toggled: !1,
                position: new mp.Vector3(-1788.676, 424.3372, 122.8525),
              },
              yk_0: {
                id: 311,
                hash: mp.game.joaat("brofx_07_garaz2"),
                toggled: !1,
                position: new mp.Vector3(-1457.45, -49.35926, 55.2626),
              },
              yk_1: {
                id: 312,
                hash: mp.game.joaat("brofx_07_garaz1"),
                toggled: !1,
                position: new mp.Vector3(-1461.143, -52.45336, 55.23286),
              },
              yk_2: {
                id: 313,
                hash: mp.game.joaat("brofx_mansion07_dvere"),
                toggled: !1,
                position: new mp.Vector3(-1479.746, -41.42043, 56.99903),
              },
              yk_3: {
                id: 314,
                hash: mp.game.joaat("brofx_mansion07_dvere"),
                toggled: !1,
                position: new mp.Vector3(-1481.161, -39.7336, 56.99903),
              },
              yk_4: {
                id: 315,
                hash: mp.game.joaat("brofx_mansion07_dvere"),
                toggled: !1,
                position: new mp.Vector3(-1465.768, -47.66941, 54.75627),
              },
              yk_5: {
                id: 316,
                hash: mp.game.joaat("brofx_mansion07_dvere"),
                toggled: !1,
                position: new mp.Vector3(-1465.059, -35.05593, 55.21259),
              },
              yk_6: {
                id: 317,
                hash: mp.game.joaat("brofx_mansion07_dvere"),
                toggled: !1,
                position: new mp.Vector3(-1468.499, -58.79866, 54.75858),
              },
              yk_7: {
                id: 318,
                hash: mp.game.joaat("brofx_mansion07_dvere"),
                toggled: !1,
                position: new mp.Vector3(-1473.412, -57.73341, 54.75858),
              },
              yk_8: {
                id: 319,
                hash: mp.game.joaat("brofx_mansion07_dvere"),
                toggled: !1,
                position: new mp.Vector3(-1483.029, -48.73466, 54.75858),
              },
              yk_9: {
                id: 320,
                hash: mp.game.joaat("brofx_mansion07_dvere"),
                toggled: !1,
                position: new mp.Vector3(-1472.461, -48.85187, 54.75858),
              },
              yk_10: {
                id: 342,
                hash: mp.game.joaat("brofx_mansion08_dvere2"),
                toggled: !1,
                position: new mp.Vector3(-1814.444, 423.6464, 128.701),
              },
              yk_11: {
                id: 353,
                hash: mp.game.joaat("brofx_mansion08_dvere2"),
                toggled: !1,
                position: new mp.Vector3(-1817.443, 423.6464, 128.701),
              },
              yk_12: {
                id: 354,
                hash: mp.game.joaat("brofx_mansion07_dvere"),
                toggled: !1,
                position: new mp.Vector3(-1485.9, -22.07615, 54.75699),
              },
              lcn_0: {
                id: 321,
                hash: mp.game.joaat("v_ilev_ra_door1_l"),
                toggled: !1,
                position: new mp.Vector3(1402.688, 1128.314, 114.4836),
              },
              lcn_1: {
                id: 322,
                hash: mp.game.joaat("v_ilev_ra_door1_r"),
                toggled: !1,
                position: new mp.Vector3(1400.488, 1128.314, 114.4836),
              },
              lcn_2: {
                id: 323,
                hash: mp.game.joaat("v_ilev_ra_door1_l"),
                toggled: !1,
                position: new mp.Vector3(1400.489, 1128.314, 114.4836),
              },
              lcn_3: {
                id: 324,
                hash: mp.game.joaat("v_ilev_ra_door1_r"),
                toggled: !1,
                position: new mp.Vector3(1398.289, 1128.314, 114.4836),
              },
              lcn_4: {
                id: 325,
                hash: mp.game.joaat("v_ilev_ra_door1_l"),
                toggled: !1,
                position: new mp.Vector3(1390.666, 1131.117, 114.4808),
              },
              lcn_5: {
                id: 326,
                hash: mp.game.joaat("v_ilev_ra_door1_r"),
                toggled: !1,
                position: new mp.Vector3(1390.666, 1133.317, 114.4808),
              },
              lcn_6: {
                id: 327,
                hash: mp.game.joaat("v_ilev_ra_door1_r"),
                toggled: !1,
                position: new mp.Vector3(1390.488, 1163.438, 114.4817),
              },
              lcn_7: {
                id: 328,
                hash: mp.game.joaat("v_ilev_ra_door1_l"),
                toggled: !1,
                position: new mp.Vector3(1390.488, 1161.237, 114.4817),
              },
              lcn_8: {
                id: 329,
                hash: mp.game.joaat("v_ilev_ra_door1_r"),
                toggled: !1,
                position: new mp.Vector3(1408.578, 1165.833, 114.4827),
              },
              lcn_9: {
                id: 330,
                hash: mp.game.joaat("v_ilev_ra_door1_l"),
                toggled: !1,
                position: new mp.Vector3(1408.578, 1163.632, 114.4827),
              },
              lcn_10: {
                id: 331,
                hash: mp.game.joaat("v_ilev_ra_door1_l"),
                toggled: !1,
                position: new mp.Vector3(1408.58, 1158.967, 114.4827),
              },
              lcn_11: {
                id: 332,
                hash: mp.game.joaat("v_ilev_ra_door1_r"),
                toggled: !1,
                position: new mp.Vector3(1408.58, 1161.168, 114.4827),
              },
              lcn_12: {
                id: 333,
                hash: mp.game.joaat("v_ilev_ra_door1_r"),
                toggled: !1,
                position: new mp.Vector3(1409.292, 1150.654, 114.4869),
              },
              lcn_13: {
                id: 334,
                hash: mp.game.joaat("v_ilev_ra_door1_l"),
                toggled: !1,
                position: new mp.Vector3(1409.292, 1148.454, 114.4869),
              },
              lcn_14: {
                id: 335,
                hash: mp.game.joaat("v_ilev_ra_door1_r"),
                toggled: !1,
                position: new mp.Vector3(1409.292, 1148.454, 114.4869),
              },
              lcn_15: {
                id: 336,
                hash: mp.game.joaat("v_ilev_ra_door1_l"),
                toggled: !1,
                position: new mp.Vector3(1409.292, 1146.254, 114.4869),
              },
              lcn_16: {
                id: 337,
                hash: mp.game.joaat("v_ilev_ra_door1_r"),
                toggled: !1,
                position: new mp.Vector3(1409.292, 1146.254, 114.4869),
              },
              lcn_17: {
                id: 338,
                hash: mp.game.joaat("v_ilev_ra_door1_l"),
                toggled: !1,
                position: new mp.Vector3(1409.292, 1144.054, 114.4869),
              },
              lcn_18: {
                id: 339,
                hash: mp.game.joaat("q_rancho_door"),
                toggled: !1,
                position: new mp.Vector3(1395.906, 1142.904, 114.7907),
              },
              lcn_19: {
                id: 340,
                hash: mp.game.joaat("q_rancho_door"),
                toggled: !1,
                position: new mp.Vector3(1395.906, 1140.705, 114.7907),
              },
              lcn_20: {
                id: 341,
                hash: mp.game.joaat("v_ilev_ra_door2"),
                toggled: !1,
                position: new mp.Vector3(1407.688, 1128.333, 114.4977),
              },
              ballas_0: {
                id: 343,
                hash: mp.game.joaat("v_ilev_ra_door1_l"),
                toggled: !1,
                position: new mp.Vector3(1401.59, 1128.314, 114.4836),
              },
              ballas_1: {
                id: 344,
                hash: mp.game.joaat("v_ilev_bk_door"),
                toggled: !1,
                position: new mp.Vector3(115.0443, -1961.4, 21.4661),
              },
              ballas_2: {
                id: 345,
                hash: mp.game.joaat("v_ilev_bk_door"),
                toggled: !1,
                position: new mp.Vector3(112.8033, -1973.875, 21.46607),
              },
              ballas_3: {
                id: 346,
                hash: mp.game.joaat("v_ilev_ra_door4r"),
                toggled: !1,
                position: new mp.Vector3(117.1047, -1974.372, 21.47114),
              },
              ballas_4: {
                id: 347,
                hash: mp.game.joaat("v_ilev_ra_door4l"),
                toggled: !1,
                position: new mp.Vector3(119.1587, -1973.587, 21.47308),
              },
              ballas_5: {
                id: 348,
                hash: mp.game.joaat("ch_prop_ch_corridor_door_derelict"),
                toggled: !1,
                position: new mp.Vector3(111.4603, -1979.28, 20.01158),
              },
              ballas_6: {
                id: 349,
                hash: mp.game.joaat("ch_prop_ch_corridor_door_derelict"),
                toggled: !1,
                position: new mp.Vector3(104.682, -1977.296, 20.01325),
              },
              ballas_7: {
                id: 350,
                hash: mp.game.joaat("ch_prop_ch_corridor_door_derelict"),
                toggled: !1,
                position: new mp.Vector3(105.7961, -1964.971, 19.89338),
              },
              ballas_8: {
                id: 351,
                hash: mp.game.joaat("ch_prop_ch_corridor_door_derelict"),
                toggled: !1,
                position: new mp.Vector3(93.99518, -1984.479, 19.46129),
              },
              ballas_9: {
                id: 352,
                hash: mp.game.joaat("ch_prop_ch_corridor_door_derelict"),
                toggled: !1,
                position: new mp.Vector3(95.47963, -1986.103, 19.46143),
              },
              ems_0: {
                id: 41,
                hash: mp.game.joaat("pillbox_hospital_int_outside_door_l"),
                toggled: !1,
                position: new mp.Vector3(299.9594, -583.7608, 43.38006),
              },
              ems_1: {
                id: 42,
                hash: mp.game.joaat("pillbox_hospital_int_outside_door_r"),
                toggled: !1,
                position: new mp.Vector3(299.2119, -585.8145, 43.38006),
              },
              ems_2: {
                id: 43,
                hash: mp.game.joaat("pillbox_hospital_int_inner_door"),
                toggled: !1,
                position: new mp.Vector3(320.0437, -589.989, 43.39614),
              },
              ems_3: {
                id: 44,
                hash: mp.game.joaat("pillbox_hospital_int_inner_door_2"),
                toggled: !1,
                position: new mp.Vector3(323.0284, -596.172, 43.40874),
              },
              ems_4: {
                id: 45,
                hash: mp.game.joaat("pillbox_hospital_int_inner_door_2"),
                toggled: !1,
                position: new mp.Vector3(322.241, -598.3354, 43.40874),
              },
              ems_5: {
                id: 46,
                hash: mp.game.joaat("pillbox_hospital_int_inner_door"),
                toggled: !1,
                position: new mp.Vector3(321.8503, -593.6694, 43.39614),
              },
              ems_6: {
                id: 47,
                hash: mp.game.joaat("pillbox_hospital_int_inner_door"),
                toggled: !1,
                position: new mp.Vector3(351.689, -585.1584, 43.41933),
              },
              ems_7: {
                id: 48,
                hash: mp.game.joaat("pillbox_hospital_int_inner_door"),
                toggled: !1,
                position: new mp.Vector3(338.4273, -587.3625, 43.41933),
              },
              ems_8: {
                id: 49,
                hash: mp.game.joaat("pillbox_hospital_int_inner_door"),
                toggled: !1,
                position: new mp.Vector3(331.8665, -584.9745, 43.41933),
              },
              ems_9: {
                id: 50,
                hash: mp.game.joaat("pillbox_hospital_int_inner_door_3"),
                toggled: !1,
                position: new mp.Vector3(326.4615, -583.0106, 43.40737),
              },
              ems_10: {
                id: 51,
                hash: mp.game.joaat("pillbox_hospital_int_inner_door"),
                toggled: !1,
                position: new mp.Vector3(332.352, -586.1574, 48.50253),
              },
              ems_11: {
                id: 52,
                hash: mp.game.joaat("pillbox_hospital_int_inner_door"),
                toggled: !1,
                position: new mp.Vector3(333.7491, -592.5164, 48.50225),
              },
              ems_12: {
                id: 53,
                hash: mp.game.joaat("pillbox_hospital_int_inner_door"),
                toggled: !1,
                position: new mp.Vector3(335.3612, -588.0871, 48.50319),
              },
              ems_13: {
                id: 54,
                hash: mp.game.joaat("pillbox_hospital_int_inner_door"),
                toggled: !1,
                position: new mp.Vector3(336.8004, -584.1314, 48.50319),
              },
              jail_1: {
                id: 55,
                hash: 430324891,
                toggled: !1,
                position: new mp.Vector3(1771.664, 2585.184, 45.798),
              },
              jail_2: {
                id: 56,
                hash: 430324891,
                toggled: !1,
                position: new mp.Vector3(1771.604, 2581.25, 45.798),
              },
              jail_3: {
                id: 57,
                hash: 430324891,
                toggled: !1,
                position: new mp.Vector3(1771.667, 2577.257, 45.798),
              },
              jail_4: {
                id: 58,
                hash: 430324891,
                toggled: !1,
                position: new mp.Vector3(1771.638, 2573.459, 45.798),
              },
              jail_5: {
                id: 59,
                hash: 430324891,
                toggled: !1,
                position: new mp.Vector3(1787.586, 2586.262, 45.798),
              },
              jail_6: {
                id: 60,
                hash: 430324891,
                toggled: !1,
                position: new mp.Vector3(1787.635, 2582.377, 45.798),
              },
              jail_7: {
                id: 61,
                hash: 430324891,
                toggled: !1,
                position: new mp.Vector3(1787.636, 2578.53, 45.798),
              },
              jail_8: {
                id: 62,
                hash: 430324891,
                toggled: !1,
                position: new mp.Vector3(1787.624, 2574.61, 45.798),
              },
              jail_9: {
                id: 63,
                hash: 430324891,
                toggled: !1,
                position: new mp.Vector3(1771.749, 2597.095, 50.55),
              },
              jail_10: {
                id: 64,
                hash: 430324891,
                toggled: !1,
                position: new mp.Vector3(1771.75, 2593.128, 50.55),
              },
              jail_11: {
                id: 65,
                hash: 430324891,
                toggled: !1,
                position: new mp.Vector3(1771.711, 2589.228, 50.55),
              },
              jail_12: {
                id: 66,
                hash: 430324891,
                toggled: !1,
                position: new mp.Vector3(1771.629, 2585.274, 50.55),
              },
              jail_13: {
                id: 67,
                hash: 430324891,
                toggled: !1,
                position: new mp.Vector3(1771.677, 2581.328, 50.55),
              },
              jail_14: {
                id: 68,
                hash: 430324891,
                toggled: !1,
                position: new mp.Vector3(1771.67, 2577.303, 50.55),
              },
              jail_15: {
                id: 69,
                hash: 430324891,
                toggled: !1,
                position: new mp.Vector3(1771.72, 2573.488, 50.55),
              },
              jail_16: {
                id: 70,
                hash: 430324891,
                toggled: !1,
                position: new mp.Vector3(1774.58, 2570.033, 50.55),
              },
              jail_17: {
                id: 71,
                hash: 430324891,
                toggled: !1,
                position: new mp.Vector3(1778.438, 2570.082, 50.55),
              },
              jail_18: {
                id: 72,
                hash: 430324891,
                toggled: !1,
                position: new mp.Vector3(1782.324, 2570.088, 50.55),
              },
              jail_19: {
                id: 73,
                hash: 430324891,
                toggled: !1,
                position: new mp.Vector3(1786.265, 2570.171, 50.55),
              },
              jail_20: {
                id: 74,
                hash: 430324891,
                toggled: !1,
                position: new mp.Vector3(1787.505, 2574.625, 50.55),
              },
              jail_21: {
                id: 75,
                hash: 430324891,
                toggled: !1,
                position: new mp.Vector3(1787.541, 2578.476, 50.55),
              },
              jail_22: {
                id: 76,
                hash: 430324891,
                toggled: !1,
                position: new mp.Vector3(1787.615, 2582.435, 50.55),
              },
              jail_23: {
                id: 77,
                hash: 430324891,
                toggled: !1,
                position: new mp.Vector3(1787.52, 2586.374, 50.55),
              },
              jail_24: {
                id: 78,
                hash: 430324891,
                toggled: !1,
                position: new mp.Vector3(1787.484, 2590.322, 50.55),
              },
              jail_25: {
                id: 79,
                hash: 430324891,
                toggled: !1,
                position: new mp.Vector3(1787.48, 2594.271, 50.55),
              },
              jail_26: {
                id: 80,
                hash: 430324891,
                toggled: !1,
                position: new mp.Vector3(1787.472, 2598.18, 50.55),
              },
              jail_27: {
                id: 81,
                hash: 430324891,
                toggled: !1,
                position: new mp.Vector3(1785.142, 2599.872, 50.55),
              },
              jail_28: {
                id: 82,
                hash: 430324891,
                toggled: !1,
                position: new mp.Vector3(1772.936, 2571.948, 45.798),
              },
              jail_29: {
                id: 83,
                hash: 430324891,
                toggled: !1,
                position: new mp.Vector3(1785.124, 2571.967, 45.798),
              },
              jail_30: {
                id: 84,
                hash: 430324891,
                toggled: !1,
                position: new mp.Vector3(1786.499, 2589.905, 45.798),
              },
              jail_31: {
                id: 85,
                hash: 430324891,
                toggled: !1,
                position: new mp.Vector3(1773.733, 2590.078, 45.798),
              },
              jail_32: {
                id: 86,
                hash: 430324891,
                toggled: !1,
                position: new mp.Vector3(1763.446, 2587.624, 45.798),
              },
              jail_33: {
                id: 87,
                hash: 430324891,
                toggled: !1,
                position: new mp.Vector3(1767.297, 2606.692, 50.55),
              },
              jail_34: {
                id: 88,
                hash: 430324891,
                toggled: !1,
                position: new mp.Vector3(1763.76, 2600.293, 50.55),
              },
              jail_35: {
                id: 89,
                hash: 430324891,
                toggled: !1,
                position: new mp.Vector3(1768.413, 2570.038, 45.798),
              },
              jail_36: {
                id: 90,
                hash: 1028191914,
                toggled: !1,
                position: new mp.Vector3(1779.011, 2601.826, 50.711),
              },
              jail_37: {
                id: 91,
                hash: 1028191914,
                toggled: !1,
                position: new mp.Vector3(1780.235, 2601.946, 50.709),
              },
              jail_38: {
                id: 92,
                hash: 1028191914,
                toggled: !1,
                position: new mp.Vector3(1787.681, 2606.76, 50.592),
              },
              jail_39: {
                id: 93,
                hash: 1028191914,
                toggled: !1,
                position: new mp.Vector3(1782.051, 2614.27, 45.974),
              },
              jail_40: {
                id: 94,
                hash: 1028191914,
                toggled: !1,
                position: new mp.Vector3(1781.837, 2618.576, 45.974),
              },
              jail_41: {
                id: 95,
                hash: 1028191914,
                toggled: !1,
                position: new mp.Vector3(1769.07, 2618.559, 45.974),
              },
              jail_42: {
                id: 96,
                hash: 1028191914,
                toggled: !1,
                position: new mp.Vector3(1766.225, 2615.551, 45.974),
              },
              jail_43: {
                id: 97,
                hash: 1028191914,
                toggled: !1,
                position: new mp.Vector3(1769.333, 2614.249, 45.974),
              },
              jail_44: {
                id: 98,
                hash: 1645000677,
                toggled: !1,
                position: new mp.Vector3(1759.883, 2615.302, 45.776),
              },
              jail_45: {
                id: 99,
                hash: 262839150,
                toggled: !1,
                position: new mp.Vector3(1786.391, 2621.029, 45.808),
              },
              jail_46: {
                id: 100,
                hash: 1645000677,
                toggled: !1,
                position: new mp.Vector3(1785.872, 2600.357, 45.927),
              },
              jail_47: {
                id: 101,
                hash: 1645000677,
                toggled: !1,
                position: new mp.Vector3(1786.369, 2609.723, 46.142),
              },
              jail_48: {
                id: 102,
                hash: 262839150,
                toggled: !1,
                position: new mp.Vector3(1785.187, 2609.854, 46.141),
              },
              jail_49: {
                id: 103,
                hash: 262839150,
                toggled: !1,
                position: new mp.Vector3(1765.635, 2566.598, 45.812),
              },
              jail_50: {
                id: 104,
                hash: 1645000677,
                toggled: !1,
                position: new mp.Vector3(1776.17, 2551.969, 45.932),
              },
              jail_51: {
                id: 105,
                hash: 262839150,
                toggled: !1,
                position: new mp.Vector3(1791.549, 2552.163, 45.932),
              },
              jail_52: {
                id: 106,
                hash: 1028191914,
                toggled: !1,
                position: new mp.Vector3(1783.213, 2547.751, 45.798),
              },
              jail_53: {
                id: 107,
                hash: 1028191914,
                toggled: !1,
                position: new mp.Vector3(1785.151, 2566.831, 45.823),
              },
              jail_54: {
                id: 108,
                hash: 1028191914,
                toggled: !1,
                position: new mp.Vector3(1786.316, 2551.156, 49.58),
              },
              jail_55: {
                id: 109,
                hash: 1028191914,
                toggled: !1,
                position: new mp.Vector3(1781.753, 2552.656, 49.58),
              },
              jail_56: {
                id: 110,
                hash: 1028191914,
                toggled: !1,
                position: new mp.Vector3(1781.719, 2551.476, 49.58),
              },
              jail_57: {
                id: 111,
                hash: 262839150,
                toggled: !1,
                position: new mp.Vector3(1790.928, 2593.259, 46.143),
              },
              jail_58: {
                id: 112,
                hash: 1645000677,
                toggled: !1,
                position: new mp.Vector3(1791.033, 2594.326, 46.144),
              },
              jail_59: {
                id: 113,
                hash: 1028191914,
                toggled: !1,
                position: new mp.Vector3(1774.911, 2593.051, 45.798),
              },
              jail_60: {
                id: 114,
                hash: 1028191914,
                toggled: !1,
                position: new mp.Vector3(1783.984, 2598.325, 45.798),
              },
              jail_61: {
                id: 115,
                hash: 741314661,
                toggled: !1,
                position: new mp.Vector3(1845.332, 2608.361, 45.589),
              },
              jud_1: {
                id: 166,
                hash: mp.game.joaat("q_jud_door"),
                toggled: !1,
                position: new mp.Vector3(242.2193, -1074.643, 29.55341),
              },
              jud_2: {
                id: 167,
                hash: mp.game.joaat("q_jud_door"),
                toggled: !1,
                position: new mp.Vector3(244.6178, -1074.643, 29.55341),
              },
              jud_3: {
                id: 168,
                hash: mp.game.joaat("apa_prop_apa_bankdoor_new"),
                toggled: !1,
                position: new mp.Vector3(251.9079, -1093.266, 29.42789),
              },
              jud_4: {
                id: 169,
                hash: mp.game.joaat("apa_prop_apa_bankdoor_new"),
                toggled: !1,
                position: new mp.Vector3(249.3059, -1093.26, 29.42789),
              },
              jud_5: {
                id: 170,
                hash: mp.game.joaat("apa_prop_apa_bankdoor_new"),
                toggled: !1,
                position: new mp.Vector3(244.0013, -1101.253, 29.42782),
              },
              jud_6: {
                id: 171,
                hash: mp.game.joaat("apa_prop_apa_bankdoor_new"),
                toggled: !1,
                position: new mp.Vector3(244.0079, -1098.651, 29.42782),
              },
              jud_7: {
                id: 172,
                hash: mp.game.joaat("apa_prop_apa_bankdoor_new"),
                toggled: !1,
                position: new mp.Vector3(234.9886, -1093.26, 29.42783),
              },
              jud_8: {
                id: 173,
                hash: mp.game.joaat("apa_prop_apa_bankdoor_new"),
                toggled: !1,
                position: new mp.Vector3(237.5845, -1093.266, 29.42783),
              },
              jud_9: {
                id: 174,
                hash: mp.game.joaat("apa_prop_apa_bankdoor_new"),
                toggled: !1,
                position: new mp.Vector3(249.3059, -1093.26, 36.26669),
              },
              jud_10: {
                id: 175,
                hash: mp.game.joaat("apa_prop_apa_bankdoor_new"),
                toggled: !1,
                position: new mp.Vector3(251.9079, -1093.266, 36.26669),
              },
              jud_11: {
                id: 176,
                hash: mp.game.joaat("apa_prop_apa_bankdoor_new"),
                toggled: !1,
                position: new mp.Vector3(234.9886, -1093.26, 36.26731),
              },
              jud_12: {
                id: 177,
                hash: mp.game.joaat("apa_prop_apa_bankdoor_new"),
                toggled: !1,
                position: new mp.Vector3(237.5845, -1093.266, 36.26731),
              },
              sheriff_1: {
                id: 178,
                hash: mp.game.joaat("v_ilev_shrfdoor"),
                toggled: !1,
                position: new mp.Vector3(1855.709, 3683.933, 34.59364),
              },
              sheriff_2: {
                id: 179,
                hash: mp.game.joaat("v_ilev_shrfdoor"),
                toggled: !1,
                position: new mp.Vector3(1860.748, 3692.4, 34.59364),
              },
              sheriff_3: {
                id: 180,
                hash: mp.game.joaat("v_ilev_rc_door2"),
                toggled: !1,
                position: new mp.Vector3(1857.254, 3690.296, 34.41842),
              },
              sheriff_4: {
                id: 181,
                hash: mp.game.joaat("v_ilev_rc_door2"),
                toggled: !1,
                position: new mp.Vector3(1849.4, 3691.206, 34.41842),
              },
              sheriff_5: {
                id: 182,
                hash: mp.game.joaat("v_ilev_rc_door2"),
                toggled: !1,
                position: new mp.Vector3(1847.133, 3689.946, 34.41842),
              },
              sheriff_6: {
                id: 183,
                hash: mp.game.joaat("v_ilev_cd_entrydoor"),
                toggled: !1,
                position: new mp.Vector3(1844.264, 3694.152, 34.41656),
              },
              sheriff_7: {
                id: 184,
                hash: mp.game.joaat("v_ilev_rc_door2"),
                toggled: !1,
                position: new mp.Vector3(1848.648, 3693.448, 34.41656),
              },
              sheriff_8: {
                id: 185,
                hash: mp.game.joaat("v_ilev_rc_door2"),
                toggled: !1,
                position: new mp.Vector3(1852.503, 3694.175, 34.41656),
              },
              sheriff_9: {
                id: 186,
                hash: mp.game.joaat("v_ilev_rc_door2"),
                toggled: !1,
                position: new mp.Vector3(1849.982, 3684.115, 34.41656),
              },
              sheriff_10: {
                id: 187,
                hash: mp.game.joaat("v_ilev_rc_door2"),
                toggled: !1,
                position: new mp.Vector3(1851.288, 3681.87, 34.41656),
              },
              sheriff_11: {
                id: 189,
                hash: mp.game.joaat("v_ilev_rc_door2"),
                toggled: !1,
                position: new mp.Vector3(1849.679, 3683.854, 30.41207),
              },
              sheriff_12: {
                id: 190,
                hash: mp.game.joaat("v_ilev_rc_door2"),
                toggled: !1,
                position: new mp.Vector3(1850.982, 3681.609, 30.40699),
              },
              sheriff_13: {
                id: 191,
                hash: mp.game.joaat("v_ilev_rc_door2"),
                toggled: !1,
                position: new mp.Vector3(1848.657, 3683.925, 30.41104),
              },
              sheriff_14: {
                id: 192,
                hash: mp.game.joaat("v_ilev_rc_door2"),
                toggled: !1,
                position: new mp.Vector3(1846.414, 3682.625, 30.40913),
              },
              sheriff_15: {
                id: 193,
                hash: mp.game.joaat("v_ilev_arm_secdoor"),
                toggled: !1,
                position: new mp.Vector3(1852.921, 3686.407, 30.41389),
              },
              sheriff_16: {
                id: 194,
                hash: mp.game.joaat("v_ilev_arm_secdoor"),
                toggled: !1,
                position: new mp.Vector3(1856.16, 3688.268, 30.41389),
              },
              sheriff_17: {
                id: 195,
                hash: mp.game.joaat("v_ilev_rc_door2"),
                toggled: !1,
                position: new mp.Vector3(1848.657, 3683.925, 34.42036),
              },
              sheriff_18: {
                id: 196,
                hash: mp.game.joaat("v_ilev_rc_door2"),
                toggled: !1,
                position: new mp.Vector3(1846.414, 3682.625, 34.41827),
              },
              sheriff_19: {
                id: 197,
                hash: mp.game.joaat("v_ilev_rc_door2"),
                toggled: !1,
                position: new mp.Vector3(1850.504, 3697.692, 34.41656),
              },
              army_1: {
                id: 198,
                hash: mp.game.joaat("v_ilev_ct_doorl"),
                toggled: !1,
                position: new mp.Vector3(-2346.532, 3231.966, 35.08663),
              },
              army_2: {
                id: 199,
                hash: mp.game.joaat("v_ilev_ct_doorl"),
                toggled: !1,
                position: new mp.Vector3(-2344.46, 3225.483, 29.36729),
              },
              army_3: {
                id: 200,
                hash: mp.game.joaat("v_ilev_ct_doorl"),
                toggled: !1,
                position: new mp.Vector3(-2346.875, 3219.602, 29.36729),
              },
              army_4: {
                id: 201,
                hash: mp.game.joaat("v_ilev_ct_doorl"),
                toggled: !1,
                position: new mp.Vector3(-2355.899, 3210.461, 29.36729),
              },
              army_5: {
                id: 202,
                hash: mp.game.joaat("v_ilev_ct_doorl"),
                toggled: !1,
                position: new mp.Vector3(-2354.604, 3212.703, 29.36729),
              },
              army_6: {
                id: 203,
                hash: mp.game.joaat("v_ilev_cor_firedoor"),
                toggled: !1,
                position: new mp.Vector3(-2355.249, 3213.92, 29.23771),
              },
              army_7: {
                id: 204,
                hash: mp.game.joaat("v_ilev_cor_firedoor"),
                toggled: !1,
                position: new mp.Vector3(-2357.239, 3215.069, 29.23771),
              },
              army_8: {
                id: 205,
                hash: mp.game.joaat("v_ilev_cor_doorglassa"),
                toggled: !1,
                position: new mp.Vector3(-2360.871, 3212.599, 29.36729),
              },
              army_9: {
                id: 206,
                hash: mp.game.joaat("v_ilev_cor_doorglassa"),
                toggled: !1,
                position: new mp.Vector3(-2358.643, 3211.312, 29.36729),
              },
              army_10: {
                id: 207,
                hash: mp.game.joaat("v_ilev_ct_doorl"),
                toggled: !1,
                position: new mp.Vector3(-2347.994, 3208.887, 29.36729),
              },
              army_11: {
                id: 208,
                hash: mp.game.joaat("v_ilev_ct_doorl"),
                toggled: !1,
                position: new mp.Vector3(-2349.289, 3206.642, 29.36729),
              },
              army_12: {
                id: 209,
                hash: mp.game.joaat("v_ilev_ct_door02"),
                toggled: !1,
                position: new mp.Vector3(-2351.339, 3258.52, 32.95998),
              },
              army_13: {
                id: 210,
                hash: mp.game.joaat("v_ilev_ct_door01"),
                toggled: !1,
                position: new mp.Vector3(-2353.747, 3252.641, 32.95998),
              },
              army_14: {
                id: 211,
                hash: mp.game.joaat("v_ilev_ct_door01"),
                toggled: !1,
                position: new mp.Vector3(-2359.631, 3247.564, 93.05333),
              },
              army_15: {
                id: 212,
                hash: mp.game.joaat("v_ilev_ct_door03"),
                toggled: !1,
                position: new mp.Vector3(-2359.379, 3255.63, 93.05339),
              },
              army_16: {
                id: 213,
                hash: mp.game.joaat("int_doorroom8"),
                toggled: !1,
                position: new mp.Vector3(-2346.652, 3204.685, 29.37743),
              },
              army_17: {
                id: 214,
                hash: mp.game.joaat("int_doorroom8"),
                toggled: !1,
                position: new mp.Vector3(-2344.953, 3207.627, 29.37743),
              },
              army_18: {
                id: 215,
                hash: mp.game.joaat("v_ilev_ct_doorl"),
                toggled: !1,
                position: new mp.Vector3(-2354.604, 3212.703, 29.36729),
              },
              army_19: {
                id: 216,
                hash: mp.game.joaat("v_ilev_cor_firedoor"),
                toggled: !1,
                position: new mp.Vector3(-2357.239, 3215.069, 29.23771),
              },
              army_20: {
                id: 217,
                hash: mp.game.joaat("v_ilev_cor_doorglassa"),
                toggled: !1,
                position: new mp.Vector3(-2358.643, 3211.312, 29.36729),
              },
              army_21: {
                id: 218,
                hash: mp.game.joaat("v_ilev_ct_doorl"),
                toggled: !1,
                position: new mp.Vector3(-2349.289, 3206.642, 29.36729),
              },
              fib_0: {
                id: 219,
                hash: mp.game.joaat("q_fib_maindoor_l"),
                toggled: !1,
                position: new mp.Vector3(2520.102, -415.5432, 93.09401),
              },
              fib_1: {
                id: 220,
                hash: mp.game.joaat("q_fib_maindoor_r"),
                toggled: !1,
                position: new mp.Vector3(2521.942, -417.3828, 93.09401),
              },
              fib_2: {
                id: 221,
                hash: mp.game.joaat("v_ilev_rc_door2"),
                toggled: !1,
                position: new mp.Vector3(2502.143, -421.82, 94.74213),
              },
              fib_3: {
                id: 222,
                hash: mp.game.joaat("q_fib_door1"),
                toggled: !1,
                position: new mp.Vector3(2511.101, -416.0929, 99.27317),
              },
              fib_4: {
                id: 223,
                hash: mp.game.joaat("v_ilev_rc_door2"),
                toggled: !1,
                position: new mp.Vector3(2510.984, -413.0841, 87.47318),
              },
              fib_5: {
                id: 224,
                hash: mp.game.joaat("q_fib_door1"),
                toggled: !1,
                position: new mp.Vector3(2510.826, -435.6775, 99.2723),
              },
              fib_6: {
                id: 225,
                hash: mp.game.joaat("q_fib_door1"),
                toggled: !1,
                position: new mp.Vector3(2512.665, -433.8391, 99.2723),
              },
              fib_7: {
                id: 226,
                hash: mp.game.joaat("qnx_fib_ofdoor1"),
                toggled: !1,
                position: new mp.Vector3(2517.057, -436.3461, 99.25925),
              },
              fib_8: {
                id: 227,
                hash: mp.game.joaat("qnx_fib_ofdoor1"),
                toggled: !1,
                position: new mp.Vector3(2513.087, -439.839, 99.25925),
              },
              fib_9: {
                id: 228,
                hash: mp.game.joaat("q_fib_door1"),
                toggled: !1,
                position: new mp.Vector3(2519.376, -443.2673, 99.27287),
              },
              fib_10: {
                id: 229,
                hash: mp.game.joaat("q_fib_door1"),
                toggled: !1,
                position: new mp.Vector3(2519.603, -440.6789, 99.27287),
              },
              fib_11: {
                id: 230,
                hash: mp.game.joaat("q_fib_door1"),
                toggled: !1,
                position: new mp.Vector3(2499.238, -424.092, 99.2723),
              },
              fib_12: {
                id: 231,
                hash: mp.game.joaat("q_fib_door1"),
                toggled: !1,
                position: new mp.Vector3(2501.075, -422.2544, 99.2723),
              },
              fib_13: {
                id: 232,
                hash: mp.game.joaat("qnx_fib_ofdoor1"),
                toggled: !1,
                position: new mp.Vector3(2494.367, -420.7502, 99.25984),
              },
              fib_14: {
                id: 233,
                hash: mp.game.joaat("qnx_fib_ofdoor1"),
                toggled: !1,
                position: new mp.Vector3(2488.929, -415.3124, 99.25984),
              },
              fib_15: {
                id: 234,
                hash: mp.game.joaat("qnx_fib_ofdoor1"),
                toggled: !1,
                position: new mp.Vector3(2491.994, -409.1628, 99.25984),
              },
              fib_16: {
                id: 235,
                hash: mp.game.joaat("qnx_fib_ofdoor1"),
                toggled: !1,
                position: new mp.Vector3(2496.815, -404.3418, 99.25984),
              },
              fib_17: {
                id: 236,
                hash: mp.game.joaat("qnx_fib_ofdoor1"),
                toggled: !1,
                position: new mp.Vector3(2501.681, -406.9018, 99.25984),
              },
              fib_18: {
                id: 237,
                hash: mp.game.joaat("q_fib_door1"),
                toggled: !1,
                position: new mp.Vector3(2510.994, -413.1001, 107.0751),
              },
              fib_19: {
                id: 238,
                hash: mp.game.joaat("qnx_fib_ofdoor1"),
                toggled: !1,
                position: new mp.Vector3(2508.283, -415.9277, 107.0666),
              },
              fib_20: {
                id: 239,
                hash: mp.game.joaat("qnx_fib_ofdoor1"),
                toggled: !1,
                position: new mp.Vector3(2500.734, -423.4773, 107.0666),
              },
              fib_21: {
                id: 240,
                hash: mp.game.joaat("qnx_fib_ofdoor1"),
                toggled: !1,
                position: new mp.Vector3(2512.096, -417.5304, 107.0666),
              },
              fib_22: {
                id: 241,
                hash: mp.game.joaat("qnx_fib_ofdoor1"),
                toggled: !1,
                position: new mp.Vector3(2503.746, -426.3829, 107.0666),
              },
              fib_23: {
                id: 242,
                hash: mp.game.joaat("q_fib_door1"),
                toggled: !1,
                position: new mp.Vector3(2506.215, -426.3698, 107.0778),
              },
              fib_24: {
                id: 243,
                hash: mp.game.joaat("qnx_fib_ofdoor1"),
                toggled: !1,
                position: new mp.Vector3(2511.528, -438.3004, 107.0615),
              },
              fib_25: {
                id: 244,
                hash: mp.game.joaat("q_fib_door1"),
                toggled: !1,
                position: new mp.Vector3(2515.471, -435.6262, 107.0752),
              },
              fib_26: {
                id: 245,
                hash: mp.game.joaat("v_ilev_rc_door2"),
                toggled: !1,
                position: new mp.Vector3(2505.626, -426.6285, 115.8538),
              },
              sheriff_20: {
                id: 246,
                hash: mp.game.joaat("v_ilev_shrf2door"),
                toggled: !1,
                position: new mp.Vector3(-442.6569, 6015.222, 31.86523),
              },
              sheriff_21: {
                id: 247,
                hash: mp.game.joaat("v_ilev_shrf2door"),
                toggled: !1,
                position: new mp.Vector3(-444.5057, 6017.056, 31.86523),
              },
              sheriff_22: {
                id: 248,
                hash: mp.game.joaat("v_ilev_rc_door2"),
                toggled: !1,
                position: new mp.Vector3(-441.0185, 6012.795, 31.86523),
              },
              sheriff_23: {
                id: 249,
                hash: mp.game.joaat("v_ilev_rc_door2"),
                toggled: !1,
                position: new mp.Vector3(-442.8578, 6010.958, 31.86523),
              },
              sheriff_24: {
                id: 250,
                hash: mp.game.joaat("v_ilev_rc_door2"),
                toggled: !1,
                position: new mp.Vector3(-449.5656, 6008.538, 31.86523),
              },
              sheriff_25: {
                id: 251,
                hash: mp.game.joaat("v_ilev_rc_door2"),
                toggled: !1,
                position: new mp.Vector3(-447.7283, 6006.702, 31.86523),
              },
              sheriff_26: {
                id: 252,
                hash: mp.game.joaat("v_ilev_rc_door2"),
                toggled: !1,
                position: new mp.Vector3(-450.7136, 6016.371, 31.86523),
              },
              sheriff_27: {
                id: 253,
                hash: mp.game.joaat("v_ilev_fa_dinedoor"),
                toggled: !1,
                position: new mp.Vector3(-445.6461, 6006.508, 36.60855),
              },
              sheriff_28: {
                id: 254,
                hash: mp.game.joaat("v_ilev_fa_dinedoor"),
                toggled: !1,
                position: new mp.Vector3(-443.834, 6008.366, 36.61855),
              },
              sheriff_29: {
                id: 255,
                hash: mp.game.joaat("v_ilev_arm_secdoor"),
                toggled: !1,
                position: new mp.Vector3(-437.0416, 6003.705, 31.86815),
              },
              sheriff_30: {
                id: 256,
                hash: mp.game.joaat("v_ilev_arm_secdoor"),
                toggled: !1,
                position: new mp.Vector3(-439.1576, 5998.157, 31.86815),
              },
              sheriff_31: {
                id: 257,
                hash: mp.game.joaat("v_ilev_arm_secdoor"),
                toggled: !1,
                position: new mp.Vector3(-440.4216, 5998.604, 31.86815),
              },
              sheriff_32: {
                id: 258,
                hash: mp.game.joaat("v_ilev_rc_door2"),
                toggled: !1,
                position: new mp.Vector3(-440.8152, 6007.46, 31.87136),
              },
              sheriff_33: {
                id: 259,
                hash: mp.game.joaat("v_ilev_rc_door2"),
                toggled: !1,
                position: new mp.Vector3(-442.6553, 6009.3, 31.87136),
              },
              sheriff_34: {
                id: 260,
                hash: mp.game.joaat("v_ilev_arm_secdoor"),
                toggled: !1,
                position: new mp.Vector3(-447.7672, 6005.191, 31.87128),
              },
              sheriff_35: {
                id: 261,
                hash: mp.game.joaat("v_ilev_rc_door2"),
                toggled: !1,
                position: new mp.Vector3(-447.2363, 6002.317, 31.84003),
              },
              sheriff_36: {
                id: 262,
                hash: mp.game.joaat("v_ilev_rc_door2"),
                toggled: !1,
                position: new mp.Vector3(-450.9664, 6006.086, 31.99004),
              },
              sheriff_37: {
                id: 263,
                hash: mp.game.joaat("v_ilev_rc_door2"),
                toggled: !1,
                position: new mp.Vector3(-454.0435, 6010.243, 31.86106),
              },
              sheriff_38: {
                id: 264,
                hash: mp.game.joaat("v_ilev_ph_cellgate1"),
                toggled: !1,
                position: new mp.Vector3(-438.228, 6006.167, 28.13558),
              },
              sheriff_39: {
                id: 265,
                hash: mp.game.joaat("v_ilev_arm_secdoor"),
                toggled: !1,
                position: new mp.Vector3(-436.6276, 6002.548, 28.14062),
              },
              sheriff_40: {
                id: 266,
                hash: mp.game.joaat("v_ilev_arm_secdoor"),
                toggled: !1,
                position: new mp.Vector3(-433.9376, 6005.278, 28.14062),
              },
              sheriff_41: {
                id: 267,
                hash: mp.game.joaat("v_ilev_ph_gendoor002"),
                toggled: !1,
                position: new mp.Vector3(-436.5157, 6007.844, 28.13839),
              },
              sheriff_42: {
                id: 268,
                hash: mp.game.joaat("v_ilev_ph_gendoor002"),
                toggled: !1,
                position: new mp.Vector3(-434.6776, 6009.681, 28.13839),
              },
              sheriff_43: {
                id: 269,
                hash: mp.game.joaat("v_ilev_ph_cellgate1"),
                toggled: !1,
                position: new mp.Vector3(-442.1082, 6010.052, 28.13558),
              },
              sheriff_44: {
                id: 270,
                hash: mp.game.joaat("v_ilev_ph_cellgate1"),
                toggled: !1,
                position: new mp.Vector3(-444.3682, 6012.223, 28.13558),
              },
              sheriff_45: {
                id: 271,
                hash: mp.game.joaat("v_ilev_shrf2door"),
                toggled: !1,
                position: new mp.Vector3(-445.3312, 6010.396, 36.65693),
              },
              fam_0: {
                id: 272,
                hash: mp.game.joaat("imp_prop_impexp_door_vid"),
                toggled: !1,
                position: new mp.Vector3(-208.4574, -1601.138, 35.20551),
              },
            };
            (a.g.DoorsDynamicDataToDist = {}),
              mp.events.add("doorControl", (e, t) => {
                try {
                  o[e] &&
                    o[e].hash &&
                    ((o[e].toggled = t),
                    mp.game.object.doorControl(
                      o[e].hash,
                      o[e].position.x,
                      o[e].position.y,
                      o[e].position.z,
                      o[e].toggled,
                      0,
                      0,
                      0
                    ),
                    i());
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/doors",
                    "doorControl",
                    e.toString()
                  );
                }
              }),
              mp.events.add("doorsControl", (e) => {
                try {
                  e = JSON.parse(e);
                  for (let t in e)
                    void 0 !== e[t] &&
                      void 0 !== o[t] &&
                      ((o[t].toggled = e[t]),
                      mp.game.object.doorControl(
                        o[t].hash,
                        o[t].position.x,
                        o[t].position.y,
                        o[t].position.z,
                        o[t].toggled,
                        0,
                        0,
                        0
                      ));
                  i();
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/doors",
                    "doorsControl",
                    e.toString()
                  );
                }
              });
            const i = () => {
              try {
                const e = a.g.localplayer.position;
                let t,
                  i,
                  n = {};
                for (let a in o)
                  (t = o[a]),
                    t.hash &&
                      ((i = mp.game.gameplay.getDistanceBetweenCoords(
                        t.position.x,
                        t.position.y,
                        t.position.z,
                        e.x,
                        e.y,
                        e.z,
                        !0
                      )),
                      i < 50 && (n[a] = t));
                a.g.DoorsDynamicDataToDist = n;
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "world/doors",
                  "GetDistDoors",
                  e.toString()
                );
              }
            };
            mp.events.add(a.g.renderName["5s"], () => {
              i();
            }),
              mp.events.add("render", () => {
                try {
                  if (!a.g.loggedin) return;
                  const e = a.g.localplayer.position;
                  Object.values(DoorsDynamicDataToDist).forEach((t) => {
                    if (
                      t.hash &&
                      mp.game.system.vdist(
                        t.position.x,
                        t.position.y,
                        t.position.z,
                        e.x,
                        e.y,
                        e.z
                      ) <= 2.5
                    ) {
                      const e = mp.game.graphics.world3dToScreen2d(
                        t.position.x,
                        t.position.y,
                        t.position.z
                      );
                      if (!e) return !1;
                      a.g.DrawSprite(
                        "redage_textures_001",
                        t.toggled ? "door_close" : "door_open",
                        [255, 255, 255, 255],
                        e.x,
                        e.y
                      );
                    }
                  });
                } catch (e) {
                  if (
                    new Date().getTime() - a.g.trycatchtime["world/doors"] <
                    5e3
                  )
                    return;
                  (a.g.trycatchtime["world/doors"] = new Date().getTime()),
                    mp.events.callRemote(
                      "client_trycatch",
                      "world/doors",
                      "render",
                      e.toString()
                    );
                }
              });
            const n = [
              {
                hash: "prop_sm1_11_doorr",
                position: new mp.Vector3(-512.844, 107.658, 64.01761),
                toggled: !1,
              },
              {
                hash: "prop_sm1_11_doorl",
                position: new mp.Vector3(-510.4186, 107.9995, 64.01761),
                toggled: !1,
              },
              {
                hash: "v_ilev_moteldoorcso",
                position: new mp.Vector3(150.8389, -1008.352, -98.85),
                toggled: !1,
              },
              {
                hash: "v_ilev_trevtraildr",
                position: new mp.Vector3(1972.769, 3815.366, 33.66326),
                toggled: !1,
              },
              {
                hash: "v_ilev_fibl_door02",
                position: new mp.Vector3(106.3793, 742.6982, 46.18171),
                toggled: !1,
              },
              {
                hash: "v_ilev_fibl_door01",
                position: new mp.Vector3(105.7607, 746.646, 46.18266),
                toggled: !1,
              },
              {
                hash: "v_ilev_j2_door",
                position: new mp.Vector3(258.2093, 204.119, 106.4328),
                toggled: !1,
              },
              {
                hash: "v_ilev_j2_door",
                position: new mp.Vector3(260.6518, 203.2292, 106.4328),
                toggled: !1,
              },
              {
                hash: "v_ilev_j2_door",
                position: new mp.Vector3(259.985, 215.2464, 106.4328),
                toggled: !1,
              },
              {
                hash: "v_ilev_j2_door",
                position: new mp.Vector3(259.0951, 212.8039, 106.4328),
                toggled: !1,
              },
              {
                hash: "v_ilev_bk_gate",
                position: new mp.Vector3(256.3116, 220.6579, 106.4296),
                toggled: !1,
              },
              {
                hash: "v_ilev_bk_gate2",
                position: new mp.Vector3(262.1981, 222.5188, 106.4296),
                toggled: !1,
              },
              {
                hash: "v_ilev_bk_door",
                position: new mp.Vector3(237.7704, 227.87, 106.426),
                toggled: !1,
              },
              {
                hash: "v_ilev_bk_door",
                position: new mp.Vector3(236.5488, 228.3147, 110.4328),
                toggled: !1,
              },
              {
                hash: "v_ilev_bk_door",
                position: new mp.Vector3(266.3624, 217.5697, 110.4328),
                toggled: !1,
              },
              {
                hash: "v_ilev_bk_door2",
                position: new mp.Vector3(262.5366, 215.0576, 110.4328),
                toggled: !1,
              },
              {
                hash: "v_ilev_bk_door2",
                position: new mp.Vector3(260.8578, 210.4453, 110.4328),
                toggled: !1,
              },
              {
                hash: "v_ilev_bk_door",
                position: new mp.Vector3(256.6172, 206.1522, 110.4328),
                toggled: !1,
              },
              {
                hash: "v_ilev_gasdoor",
                position: new mp.Vector3(-53.96112, -1755.717, 29.57094),
                toggled: !1,
              },
              {
                hash: "v_ilev_gasdoor_r",
                position: new mp.Vector3(-51.96669, -1757.387, 29.57094),
                toggled: !1,
              },
              {
                hash: "v_ilev_247door",
                position: new mp.Vector3(27.81761, -1349.169, 29.64696),
                toggled: !1,
              },
              {
                hash: "v_ilev_247door_r",
                position: new mp.Vector3(30.4186, -1349.169, 29.64696),
                toggled: !1,
              },
              {
                hash: "v_ilev_gasdoor",
                position: new mp.Vector3(-713.0732, -916.5409, 19.36553),
                toggled: !1,
              },
              {
                hash: "v_ilev_gasdoor_r",
                position: new mp.Vector3(-710.4722, -916.5372, 19.36553),
                toggled: !1,
              },
              {
                hash: "v_ilev_247door",
                position: new mp.Vector3(375.3528, 323.8015, 103.7163),
                toggled: !1,
              },
              {
                hash: "v_ilev_247door_r",
                position: new mp.Vector3(377.8753, 323.1672, 103.7163),
                toggled: !1,
              },
              {
                hash: "v_ilev_ml_door1",
                position: new mp.Vector3(1141.038, -980.3225, 46.55986),
                toggled: !1,
              },
              {
                hash: "v_ilev_gasdoor",
                position: new mp.Vector3(1158.364, -326.8165, 69.35503),
                toggled: !1,
              },
              {
                hash: "v_ilev_gasdoor_r",
                position: new mp.Vector3(1160.925, -326.3612, 69.35503),
                toggled: !1,
              },
              {
                hash: "v_ilev_ml_door1",
                position: new mp.Vector3(1167.129, 2703.754, 38.30173),
                toggled: !1,
              },
              {
                hash: "v_ilev_247door",
                position: new mp.Vector3(1963.917, 3740.075, 32.49369),
                toggled: !1,
              },
              {
                hash: "v_ilev_247door_r",
                position: new mp.Vector3(1966.17, 3741.376, 32.49369),
                toggled: !1,
              },
              {
                hash: "v_ilev_247door",
                position: new mp.Vector3(-3240.128, -1003.157, 12.98064),
                toggled: !1,
              },
              {
                hash: "v_ilev_247door_r",
                position: new mp.Vector3(-3239.905, -1005.749, 12.98064),
                toggled: !1,
              },
              {
                hash: "v_ilev_ta_door",
                position: new mp.Vector3(1321.286, -1650.597, 52.36629),
                toggled: !1,
              },
              {
                hash: "v_ilev_ta_door",
                position: new mp.Vector3(-1155.454, -1424.008, 5.046147),
                toggled: !1,
              },
              {
                hash: "v_ilev_ta_door",
                position: new mp.Vector3(321.8085, 178.3599, 103.6782),
                toggled: !1,
              },
              {
                hash: "v_ilev_ta_door",
                position: new mp.Vector3(-3167.789, 1074.867, 20.92086),
                toggled: !1,
              },
              {
                hash: "v_ilev_ml_door1",
                position: new mp.Vector3(-289.1752, 6199.113, 31.63704),
                toggled: !1,
              },
              {
                hash: "v_ilev_bs_door",
                position: new mp.Vector3(-1287.857, -1115.742, 7.140073),
                toggled: !1,
              },
              {
                hash: "v_ilev_bs_door",
                position: new mp.Vector3(-29.86917, -148.1571, 57.22648),
                toggled: !1,
              },
              {
                hash: "v_ilev_bs_door",
                position: new mp.Vector3(1207.873, -470.0363, 66.358),
                toggled: !1,
              },
              {
                hash: "v_ilev_hd_door_l",
                position: new mp.Vector3(-823.2001, -187.0831, 37.81895),
                toggled: !1,
              },
              {
                hash: "v_ilev_hd_door_r",
                position: new mp.Vector3(-822.4442, -188.3924, 37.81895),
                toggled: !1,
              },
              {
                hash: "v_ilev_bs_door",
                position: new mp.Vector3(132.5569, -1710.996, 29.44157),
                toggled: !1,
              },
              {
                hash: "v_ilev_bs_door",
                position: new mp.Vector3(-280.7851, 6232.782, 31.84548),
                toggled: !1,
              },
              {
                hash: "v_ilev_bs_door",
                position: new mp.Vector3(1932.952, 3725.154, 32.9944),
                toggled: !1,
              },
              {
                hash: "v_ilev_cs_door01",
                position: new mp.Vector3(82.38156, -1392.752, 29.52609),
                toggled: !1,
              },
              {
                hash: "v_ilev_cs_door01_r",
                position: new mp.Vector3(82.38156, -1390.476, 29.52609),
                toggled: !1,
              },
              {
                hash: "v_ilev_clothmiddoor",
                position: new mp.Vector3(127.8201, -211.8274, 55.22751),
                toggled: !1,
              },
              {
                hash: "v_ilev_ch_glassdoor",
                position: new mp.Vector3(-157.1293, -306.4341, 39.99308),
                toggled: !1,
              },
              {
                hash: "v_ilev_ch_glassdoor",
                position: new mp.Vector3(-156.439, -304.4294, 39.99308),
                toggled: !1,
              },
              {
                hash: "v_ilev_ch_glassdoor",
                position: new mp.Vector3(-716.6755, -155.42, 37.67493),
                toggled: !1,
              },
              {
                hash: "v_ilev_ch_glassdoor",
                position: new mp.Vector3(-715.6154, -157.2561, 37.67493),
                toggled: !1,
              },
              {
                hash: "v_ilev_cs_door01",
                position: new mp.Vector3(1196.825, 2703.221, 38.37257),
                toggled: !1,
              },
              {
                hash: "v_ilev_cs_door01_r",
                position: new mp.Vector3(1199.101, 2703.221, 38.37257),
                toggled: !1,
              },
              {
                hash: "v_ilev_cs_door01",
                position: new mp.Vector3(-0.05637026, 6517.461, 32.02779),
                toggled: !1,
              },
              {
                hash: "v_ilev_cs_door01_r",
                position: new mp.Vector3(-1.725257, 6515.914, 32.02779),
                toggled: !1,
              },
              {
                hash: "v_ilev_cs_door01",
                position: new mp.Vector3(418.5713, -806.3979, 29.64108),
                toggled: !1,
              },
              {
                hash: "v_ilev_cs_door01_r",
                position: new mp.Vector3(418.5713, -808.674, 29.64108),
                toggled: !1,
              },
              {
                hash: "v_ilev_clothmiddoor",
                position: new mp.Vector3(-1201.435, -776.8566, 17.99184),
                toggled: !1,
              },
              {
                hash: "v_ilev_cs_door01",
                position: new mp.Vector3(-818.7643, -1079.545, 11.47806),
                toggled: !1,
              },
              {
                hash: "v_ilev_cs_door01_r",
                position: new mp.Vector3(-816.7932, -1078.406, 11.47806),
                toggled: !1,
              },
              {
                hash: "v_ilev_ch_glassdoor",
                position: new mp.Vector3(-1454.782, -231.7927, 50.05648),
                toggled: !1,
              },
              {
                hash: "v_ilev_ch_glassdoor",
                position: new mp.Vector3(-1456.201, -233.3682, 50.05648),
                toggled: !1,
              },
              {
                hash: "v_ilev_cs_door01",
                position: new mp.Vector3(1686.983, 4821.741, 42.21305),
                toggled: !1,
              },
              {
                hash: "v_ilev_cs_door01_r",
                position: new mp.Vector3(1687.282, 4819.484, 42.21305),
                toggled: !1,
              },
              {
                hash: "v_ilev_cs_door01",
                position: new mp.Vector3(-1096.661, 2705.446, 19.25781),
                toggled: !1,
              },
              {
                hash: "v_ilev_cs_door01_r",
                position: new mp.Vector3(-1094.965, 2706.964, 19.25781),
                toggled: !1,
              },
              {
                hash: "v_ilev_clothmiddoor",
                position: new mp.Vector3(-3167.75, 1055.536, 21.53288),
                toggled: !1,
              },
              {
                hash: "v_ilev_gc_door04",
                position: new mp.Vector3(-3164.845, 1081.392, 20.98866),
                toggled: !1,
              },
              {
                hash: "prop_bh1_48_gate_1",
                position: new mp.Vector3(-848.9343, 179.3079, 70.0247),
                toggled: !1,
              },
              {
                hash: "prop_lrggate_02_ld",
                position: new mp.Vector3(-844.051, 155.9619, 66.03221),
                toggled: !1,
              },
              {
                hash: "v_ilev_mm_doorm_l",
                position: new mp.Vector3(-816.716, 179.098, 72.82738),
                toggled: !1,
              },
              {
                hash: "v_ilev_mm_doorm_r",
                position: new mp.Vector3(-816.1068, 177.5109, 72.82738),
                toggled: !1,
              },
              {
                hash: "prop_ld_garaged_01",
                position: new mp.Vector3(-815.2816, 185.975, 72.99993),
                toggled: !1,
              },
              {
                hash: "prop_gate_cult_01_r",
                position: new mp.Vector3(-1044.749, 4914.972, 209.1932),
                toggled: !1,
              },
              {
                hash: "prop_gate_cult_01_l",
                position: new mp.Vector3(-1041.233, 4906.101, 209.2002),
                toggled: !1,
              },
              {
                hash: "pablito_lvabar_door2",
                position: new mp.Vector3(493.0992, -1541.718, 29.48248),
                toggled: !1,
              },
              {
                hash: "pablito_lvabar_door1",
                position: new mp.Vector3(486.8262, -1529.501, 29.52529),
                toggled: !1,
              },
              {
                hash: "v_ilev_cm_door1",
                position: new mp.Vector3(493.5219, -1527.536, 29.42187),
                toggled: !1,
              },
            ];
            setTimeout(() => {
              n.forEach((e) => {
                mp.game.object.doorControl(
                  mp.game.joaat(e.hash),
                  e.position.x,
                  e.position.y,
                  e.position.z,
                  e.toggled,
                  0,
                  0,
                  0
                );
              }),
                mp.polygons.add(
                  1,
                  [
                    new mp.Vector3(1113.042, -1236.115, 21.09185),
                    new mp.Vector3(1111.943, -1238.638, 20.96873),
                    new mp.Vector3(1110.983, -1241.32, 20.94639),
                    new mp.Vector3(1109.789, -1243.92, 20.94557),
                    new mp.Vector3(1108.32, -1246.36, 20.94507),
                  ],
                  2
                ),
                mp.polygons.add(
                  7,
                  [
                    new mp.Vector3(315.6049, -564.9975, 42.45059 + 0.12),
                    new mp.Vector3(311.5501, -575.8205, 42.26121),
                    new mp.Vector3(309.255, -575.3992, 42.29855),
                    new mp.Vector3(310.4486, -563.4799, 42.92852 + 0.12),
                  ],
                  2
                ),
                mp.polygons.add(
                  8,
                  [
                    new mp.Vector3(339.5966, -579.1045, 42.73717),
                    new mp.Vector3(324.8404, -571.7209, 42.26068),
                    new mp.Vector3(326.7254, -566.2316, 42.26068),
                    new mp.Vector3(342.3383, -572.0438, 42.26074),
                  ],
                  2
                ),
                mp.polygons.add(
                  9,
                  [
                    new mp.Vector3(340.9141, -579.6977, 42.14071 + 0.12),
                    new mp.Vector3(343.0812, -572.3118, 42.14071 + 0.12),
                    new mp.Vector3(351.6045, -575.3718, 42.23224),
                    new mp.Vector3(348.9979, -582.5307, 42.2607),
                  ],
                  2
                ),
                mp.polygons.add(
                  10,
                  [
                    new mp.Vector3(351.4391, -587.0585, 42.14122 + 0.12),
                    new mp.Vector3(355.3854, -577.6539, 42.10508),
                    new mp.Vector3(365.7201, -581.3804, 42.73423),
                    new mp.Vector3(362.6744, -590.405, 42.40226 + 0.12),
                  ],
                  2
                ),
                mp.polygons.add(
                  11,
                  [
                    new mp.Vector3(341.6498, -589.5436, 42.26123),
                    new mp.Vector3(338.3994, -597.1334, 41.925),
                    new mp.Vector3(326.5258, -593.2487, 41.86664),
                    new mp.Vector3(329.6247, -584.679, 41.85644),
                  ],
                  2
                ),
                mp.polygons.add(
                  12,
                  [
                    new mp.Vector3(319.7712, -591.998, 42.26123),
                    new mp.Vector3(321.9934, -585.8993, 43.12157),
                    new mp.Vector3(327.5618, -587.9268, 43.12412 + 0.12),
                    new mp.Vector3(325.1992, -594.3756, 42.13934 + 0.12),
                  ],
                  2
                ),
                mp.polygons.add(
                  13,
                  [
                    new mp.Vector3(341.0464, -592.3315, 46.30448 + 1.12),
                    new mp.Vector3(336.0068, -590.5549, 47.42447),
                    new mp.Vector3(334.5612, -590.8784, 46.3045 + 1.12),
                    new mp.Vector3(333.1888, -594.5042, 46.30448 + 1.12),
                    new mp.Vector3(339.3922, -596.8737, 47.42447),
                  ],
                  2
                ),
                mp.polygons.add(
                  14,
                  [
                    new mp.Vector3(333.0742, -581.988, 47.25868 + 0.12),
                    new mp.Vector3(329.268, -593.2637, 47.34856),
                    new mp.Vector3(321.1326, -590.3027, 47.36335),
                    new mp.Vector3(325.2606, -579.1515, 47.23902 + 0.12),
                  ],
                  2
                ),
                mp.polygons.add(
                  15,
                  [
                    new mp.Vector3(336.4686, -585.7498, 47.42447),
                    new mp.Vector3(335.2428, -588.8788, 47.42447),
                    new mp.Vector3(336.2151, -589.905, 46.30448 + 1.12),
                    new mp.Vector3(341.2379, -591.8182, 47.42447),
                    new mp.Vector3(342.6471, -588.0389, 47.42447),
                  ],
                  2
                ),
                mp.polygons.add(
                  16,
                  [
                    new mp.Vector3(338.3871, -580.4295, 47.42445),
                    new mp.Vector3(344.5835, -582.6675, 47.42447),
                    new mp.Vector3(342.8, -587.6549, 47.42447),
                    new mp.Vector3(336.5765, -585.472, 47.42447),
                  ],
                  2
                ),
                mp.polygons.add(
                  17,
                  [
                    new mp.Vector3(265.023, 209.9849, 108.3614),
                    new mp.Vector3(261.3374, 211.3073, 108.3991),
                    new mp.Vector3(262.9626, 215.7905, 108.3636),
                    new mp.Vector3(266.6626, 214.562, 108.3614),
                  ],
                  2
                ),
                mp.polygons.add(
                  18,
                  [
                    new mp.Vector3(261.3043, 210.8972, 108.3614),
                    new mp.Vector3(264.7881, 209.5638, 108.2549 + 0.12),
                    new mp.Vector3(262.3652, 202.7786, 108.239 + 0.12),
                    new mp.Vector3(258.8249, 204.0064, 108.239 + 0.12),
                  ],
                  2
                ),
                mp.polygons.add(
                  19,
                  [
                    new mp.Vector3(123.1502, -757.3854, 240.228),
                    new mp.Vector3(128.6254, -760.3926, 240.228),
                    new mp.Vector3(131.9438, -753.5497, 240.4648),
                    new mp.Vector3(125.6814, -750.9192, 240.228),
                  ],
                  2
                ),
                mp.polygons.add(
                  20,
                  [
                    new mp.Vector3(158.4738, -738.3853, 242.2739),
                    new mp.Vector3(157.0544, -742.1476, 242.2789),
                    new mp.Vector3(152.2691, -740.2751, 240.228),
                    new mp.Vector3(154.129, -735.9755, 240.1082 + 0.12),
                  ],
                  2
                ),
                mp.polygons.add(
                  21,
                  [
                    new mp.Vector3(152.2458, -741.1715, 240.228),
                    new mp.Vector3(156.7976, -742.8094, 240.228),
                    new mp.Vector3(156.8031, -742.8311, 240.228),
                    new mp.Vector3(154.8387, -748.4108, 242.2789),
                    new mp.Vector3(150.0137, -746.6754, 240.228),
                  ],
                  2
                ),
                mp.polygons.add(
                  22,
                  [
                    new mp.Vector3(147.6699, -754.0633, 242.2739),
                    new mp.Vector3(145.3745, -759.9457, 240.2279),
                    new mp.Vector3(149.0484, -761.5856, 240.228),
                    new mp.Vector3(152.1834, -755.439, 240.228),
                  ],
                  2
                ),
                mp.polygons.add(
                  23,
                  [
                    new mp.Vector3(139.709, -763.9958, 257.1518),
                    new mp.Vector3(141.0377, -758.4249, 257.1518),
                    new mp.Vector3(118.2396, -750.1272, 257.1521),
                    new mp.Vector3(115.687, -755.2542, 257.1521),
                  ],
                  2
                ),
                mp.polygons.add(
                  24,
                  [
                    new mp.Vector3(131.4106, -736.9372, 257.0316 + 0.12),
                    new mp.Vector3(131.6544, -768.0907, 240.228),
                    new mp.Vector3(134.8567, -768.9372, 240.2705),
                    new mp.Vector3(133.8456, -772.1047, 240.4361 + 0.12),
                    new mp.Vector3(130.2636, -770.7201, 240.7429),
                  ],
                  2
                ),
                mp.polygons.add(
                  25,
                  [
                    new mp.Vector3(-1054.501, -238.721, 37.81081),
                    new mp.Vector3(-1052.044, -243.3413, 37.80923),
                    new mp.Vector3(-1059.905, -247.4655, 39.58714 + 0.12),
                    new mp.Vector3(-1062.303, -242.8172, 37.8108),
                  ],
                  2
                ),
                mp.polygons.add(
                  26,
                  [
                    new mp.Vector3(-1058.91, -232.4768, 42.09721),
                    new mp.Vector3(-1056.719, -236.573, 42.09721),
                    new mp.Vector3(-1068.063, -242.5635, 42.09721),
                    new mp.Vector3(-1070.514, -238.567, 42.09721),
                  ],
                  2
                ),
                mp.polygons.add(
                  27,
                  [
                    new mp.Vector3(-1052.128, -228.9728, 42.09722),
                    new mp.Vector3(-1049.738, -227.7339, 42.09721),
                    new mp.Vector3(-1037.396, -237.823, 41.97714 + 0.12),
                    new mp.Vector3(-1045.375, -241.91, 41.97714 + 0.12),
                  ],
                  2
                ),
                mp.polygons.add(
                  2,
                  [
                    new mp.Vector3(463.81955, -976.2152, 29.765697),
                    new mp.Vector3(463.882, -983.60333, 28.635307 + 1.12),
                    new mp.Vector3(458.9425, -983.53235, 29.766479),
                    new mp.Vector3(458.92532, -976.2469, 28.645689 + 1.12),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  3,
                  [
                    new mp.Vector3(458.88785, -984.0406, 28.645693 + 1.12),
                    new mp.Vector3(463.92435, -983.91864, 29.734044),
                    new mp.Vector3(463.84137, -991.2844, 28.645689 + 1.12),
                    new mp.Vector3(458.94208, -991.3323, 29.813768),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  4,
                  [
                    new mp.Vector3(464.0739, -995.7645, 29.765521),
                    new mp.Vector3(464.15686, -1000.0229, 28.606705 + 1.12),
                    new mp.Vector3(457.00253, -1000.2925, 29.786092),
                    new mp.Vector3(456.9259, -997.11383, 29.765523),
                    new mp.Vector3(458.6314, -995.3678, 29.765523),
                    new mp.Vector3(464.0481, -995.65643, 28.645517 + 1.12),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  5,
                  [
                    new mp.Vector3(445.87546, -995.36816, 29.76555),
                    new mp.Vector3(445.93515, -998.46246, 29.765515),
                    new mp.Vector3(453.34833, -1000.2137, 29.799409),
                    new mp.Vector3(453.3095, -996.95746, 29.765515),
                    new mp.Vector3(451.75674, -995.3608, 28.645517 + 1.12),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  6,
                  [
                    new mp.Vector3(471.76892, -984.1787, 29.799125),
                    new mp.Vector3(471.59375, -979.7701, 28.645527 + 1.12),
                    new mp.Vector3(479.4254, -979.83105, 29.768428),
                    new mp.Vector3(479.46057, -984.165, 29.878556),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  28,
                  [
                    new mp.Vector3(476.53864, -999.85, 29.766223),
                    new mp.Vector3(471.8232, -999.98706, 29.765649),
                    new mp.Vector3(471.7486, -990.1492, 29.765649),
                    new mp.Vector3(476.3643, -990.0182, 29.76565),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  29,
                  [
                    new mp.Vector3(480.11102, -983.2806, 29.835958),
                    new mp.Vector3(488.32626, -983.22815, 29.747136),
                    new mp.Vector3(488.2883, -994.26, 29.90023),
                    new mp.Vector3(479.95035, -994.2003, 28.896833 + 1.12),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  30,
                  [
                    new mp.Vector3(488.36435, -1003.2119, 28.64552 + 1.12),
                    new mp.Vector3(488.33096, -1015.5712, 28.64552 + 1.12),
                    new mp.Vector3(472.71527, -1015.6113, 28.64552 + 1.12),
                    new mp.Vector3(472.6603, -1003.2197, 28.64552 + 1.12),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  31,
                  [
                    new mp.Vector3(439.5542, -999.98004, 34.046144),
                    new mp.Vector3(439.50385, -995.4786, 34.04615),
                    new mp.Vector3(448.3634, -995.364, 32.857037 + 1.12),
                    new mp.Vector3(450.04907, -996.8777, 34.046144),
                    new mp.Vector3(450.1702, -1000.04926, 34.046147),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  32,
                  [
                    new mp.Vector3(439.53775, -990.29767, 34.046212),
                    new mp.Vector3(439.6309, -981.2688, 34.037755),
                    new mp.Vector3(448.08765, -981.3758, 34.046212),
                    new mp.Vector3(450.09842, -983.2884, 34.046212),
                    new mp.Vector3(449.9822, -988.7847, 34.046212),
                    new mp.Vector3(448.17712, -990.4117, 34.04622),
                    new mp.Vector3(439.613, -990.37915, 34.046212),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  33,
                  [
                    new mp.Vector3(467.1256, -1014.1672, 25.462612),
                    new mp.Vector3(467.08347, -1001.0749, 25.34913),
                    new mp.Vector3(470.3706, -1000.95685, 25.349129),
                    new mp.Vector3(470.40738, -1006.06433, 25.34913),
                    new mp.Vector3(471.167, -1006.38446, 25.34914),
                    new mp.Vector3(471.1705, -1011.8402, 25.349133),
                    new mp.Vector3(470.2287, -1012.2793, 25.349133),
                    new mp.Vector3(470.28436, -1014.1373, 25.462606),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  34,
                  [
                    new mp.Vector3(471.7318, -1011.0575, 25.348703),
                    new mp.Vector3(471.77127, -1015.6693, 25.34931),
                    new mp.Vector3(476.21655, -1015.6406, 25.351078),
                    new mp.Vector3(476.34396, -1011.1463, 25.34932),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  35,
                  [
                    new mp.Vector3(476.87076, -1004.2775, 25.391588),
                    new mp.Vector3(476.7507, -1015.56464, 25.27499),
                    new mp.Vector3(488.2927, -1015.61945, 25.349155),
                    new mp.Vector3(488.3527, -1004.3589, 25.349155),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  36,
                  [
                    new mp.Vector3(471.62213, -989.53143, 24.226507 + 1.12),
                    new mp.Vector3(474.40317, -989.4912, 25.349286),
                    new mp.Vector3(476.0551, -991.10815, 25.349288),
                    new mp.Vector3(476.12326, -997.4998, 25.349284),
                    new mp.Vector3(471.71356, -997.6558, 25.349288),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  37,
                  [
                    new mp.Vector3(423.15097, -973.0328, 24.579817),
                    new mp.Vector3(463.71725, -973.0191, 24.579117),
                    new mp.Vector3(463.69263, -999.48956, 24.573435),
                    new mp.Vector3(423.18005, -1000.26624, 24.578838),
                  ],
                  3.5
                ),
                mp.polygons.add(
                  38,
                  [
                    new mp.Vector3(-574.2353, -931.5149, 31.600762),
                    new mp.Vector3(-565.28827, -931.48975, 31.600764),
                    new mp.Vector3(-565.33984, -939.57043, 31.600762),
                    new mp.Vector3(-574.20886, -939.5488, 31.600762),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  39,
                  [
                    new mp.Vector3(471.7006, -1003.8353, 25.349287),
                    new mp.Vector3(471.552, -998.2623, 25.349295),
                    new mp.Vector3(478.71957, -998.1427, 25.349287),
                    new mp.Vector3(478.85727, -1003.72925, 25.349287),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  40,
                  [
                    new mp.Vector3(483.02368, -983.22125, 25.360104),
                    new mp.Vector3(483.0548, -990.9809, 25.349285),
                    new mp.Vector3(488.29257, -990.9795, 25.349287),
                    new mp.Vector3(488.29068, -983.3943, 25.385654),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  41,
                  [
                    new mp.Vector3(-579.3085, -919.808, 27.294656),
                    new mp.Vector3(-576.6211, -919.7962, 27.256677),
                    new mp.Vector3(-572.21674, -919.0632, 27.187997),
                    new mp.Vector3(-572.7536, -911.50946, 27.256677),
                    new mp.Vector3(-576.6718, -911.5268, 27.256677),
                    new mp.Vector3(-581.4543, -911.47034, 27.268142),
                    new mp.Vector3(-581.3078, -915.94806, 26.136679 + 1.12),
                    new mp.Vector3(-579.24054, -918.68176, 27.256677),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  42,
                  [
                    new mp.Vector3(443.43756, -985.96515, 28.645555 + 1.12),
                    new mp.Vector3(435.0867, -986.0293, 28.645527 + 1.12),
                    new mp.Vector3(434.99252, -977.90515, 29.77035),
                    new mp.Vector3(443.43643, -977.8503, 28.64552 + 1.12),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  43,
                  [
                    new mp.Vector3(-578.9846, -931.9496, 27.256683),
                    new mp.Vector3(-571.6187, -931.90234, 27.306923),
                    new mp.Vector3(-571.6522, -926.99866, 27.256685),
                    new mp.Vector3(-572.86993, -927.03107, 27.256678),
                    new mp.Vector3(-572.8362, -923.2543, 27.256683),
                    new mp.Vector3(-578.2077, -923.1038, 27.256678),
                    new mp.Vector3(-578.3332, -926.31287, 27.25668),
                    new mp.Vector3(-578.1732, -927.0206, 27.256678),
                    new mp.Vector3(-578.8859, -926.8683, 27.25668),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  44,
                  [
                    new mp.Vector3(-574.738, -939.46246, 27.256685),
                    new mp.Vector3(-564.3467, -939.7504, 27.25668),
                    new mp.Vector3(-562.92065, -938.24634, 27.256683),
                    new mp.Vector3(-562.9882, -929.5217, 27.25668),
                    new mp.Vector3(-564.3437, -928.01385, 27.25668),
                    new mp.Vector3(-569.2061, -927.98615, 27.256681),
                    new mp.Vector3(-570.915, -929.3879, 27.25668),
                    new mp.Vector3(-570.9996, -934.4858, 27.256678),
                    new mp.Vector3(-574.6583, -934.4891, 27.256678),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  45,
                  [
                    new mp.Vector3(-597.61304, -931.58154, 31.555398),
                    new mp.Vector3(-591.4582, -931.66864, 31.555398),
                    new mp.Vector3(-591.48706, -925.65234, 31.555398),
                    new mp.Vector3(-597.5841, -925.6326, 31.555398),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  46,
                  [
                    new mp.Vector3(-573.84357, -921.6523, 31.644286),
                    new mp.Vector3(-579.1525, -921.59503, 31.644286),
                    new mp.Vector3(-579.205, -925.8314, 31.644286),
                    new mp.Vector3(-573.89575, -925.90076, 31.644286),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  47,
                  [
                    new mp.Vector3(454.9886, -983.28644, 34.046212),
                    new mp.Vector3(456.9852, -981.41254, 34.046212),
                    new mp.Vector3(461.85782, -981.29553, 34.046212),
                    new mp.Vector3(463.925, -983.3601, 34.046212),
                    new mp.Vector3(463.84546, -988.42993, 34.046212),
                    new mp.Vector3(461.92392, -990.4229, 34.046212),
                    new mp.Vector3(456.92587, -990.42365, 34.046212),
                    new mp.Vector3(454.9759, -988.40625, 34.046212),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  41,
                  [
                    new mp.Vector3(483.02747, -991.4592, 25.349382),
                    new mp.Vector3(482.9575, -998.96606, 25.349285),
                    new mp.Vector3(488.28412, -998.9798, 25.349287),
                    new mp.Vector3(488.30612, -991.6008, 25.388554),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  48,
                  [
                    new mp.Vector3(-1296.8745, -573.01935, 33),
                    new mp.Vector3(-1300.6438, -576.221, 33),
                    new mp.Vector3(-1306.7866, -569.0392, 33),
                    new mp.Vector3(-1303.0221, -565.7179, 33),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  49,
                  [
                    new mp.Vector3(-1293.5725, -577.0744, 33),
                    new mp.Vector3(-1297.2592, -580.25977, 33),
                    new mp.Vector3(-1291.4288, -587.17377, 33),
                    new mp.Vector3(-1287.7863, -583.863, 33),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  50,
                  [
                    new mp.Vector3(-1287.0134, -584.7201, 33),
                    new mp.Vector3(-1290.8452, -587.9595, 33),
                    new mp.Vector3(-1286.7443, -592.86804, 33),
                    new mp.Vector3(-1283.1353, -589.46387, 33),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  51,
                  [
                    new mp.Vector3(-1287.0134, -584.7201, 37),
                    new mp.Vector3(-1290.8452, -587.9595, 37),
                    new mp.Vector3(-1286.7443, -592.86804, 37),
                    new mp.Vector3(-1283.1353, -589.46387, 37),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  52,
                  [
                    new mp.Vector3(-1287.7928, -583.8429, 36.4),
                    new mp.Vector3(-1291.4908, -587.104, 36.4),
                    new mp.Vector3(-1295.3412, -582.4574, 36.4),
                    new mp.Vector3(-1291.6519, -579.2759, 36.4),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  53,
                  [
                    new mp.Vector3(-1298.6984, -570.74005, 36.4),
                    new mp.Vector3(-1303.492, -573.9662, 36.4),
                    new mp.Vector3(-1306.7535, -569.0234, 36.4),
                    new mp.Vector3(-1302.9742, -565.7555, 36.4),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  54,
                  [
                    new mp.Vector3(-1285.496, -571.5084, 40.2),
                    new mp.Vector3(-1281.6373, -575.826, 40.2),
                    new mp.Vector3(-1292.9008, -585.36316, 40.2),
                    new mp.Vector3(-1297.0779, -580.3809, 40.2),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  55,
                  [
                    new mp.Vector3(-1292.647, -585.718, 40.2),
                    new mp.Vector3(-1287.1697, -592.2836, 40.2),
                    new mp.Vector3(-1284.4331, -590.1323, 40.2),
                    new mp.Vector3(-1289.8628, -583.58057, 40.2),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  56,
                  [
                    new mp.Vector3(-1292.4384, -567.98535, 40.2),
                    new mp.Vector3(-1296.0514, -563.6697, 40.2),
                    new mp.Vector3(-1304.966, -571.1594, 40.2),
                    new mp.Vector3(-1300.7878, -576.1239, 40.2),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  57,
                  [
                    new mp.Vector3(-1302.6077, -568.4051, 40.2),
                    new mp.Vector3(-1306.4243, -564.4234, 40.2),
                    new mp.Vector3(-1308.8601, -566.37976, 40.2),
                    new mp.Vector3(-1305.2242, -570.42096, 40.2),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  58,
                  [
                    new mp.Vector3(-1295.3772, -563.75946, 40.2),
                    new mp.Vector3(-1292.7676, -561.5972, 40.2),
                    new mp.Vector3(-1289.5072, -565.6214, 40.2),
                    new mp.Vector3(-1292.0557, -567.7687, 40.2),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  59,
                  [
                    new mp.Vector3(234.15002, -1093.4779, 28),
                    new mp.Vector3(234.16595, -1103.5369, 28),
                    new mp.Vector3(243.68831, -1103.5447, 28),
                    new mp.Vector3(243.71852, -1094.0366, 28),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  60,
                  [
                    new mp.Vector3(244.38013, -1093.9453, 28),
                    new mp.Vector3(244.25426, -1111.4028, 28),
                    new mp.Vector3(259.94843, -1111.3873, 28),
                    new mp.Vector3(259.8753, -1094.0597, 28),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  61,
                  [
                    new mp.Vector3(254.52356, -1093.4827, 35),
                    new mp.Vector3(246.57808, -1093.4672, 35),
                    new mp.Vector3(246.60887, -1101.5516, 35),
                    new mp.Vector3(254.51984, -1101.5969, 35),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  62,
                  [
                    new mp.Vector3(233.48732, -1094.0405, 35),
                    new mp.Vector3(243.308, -1094.0693, 35),
                    new mp.Vector3(243.29169, -1101.5046, 35),
                    new mp.Vector3(233.49852, -1101.5721, 35),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  63,
                  [
                    new mp.Vector3(1855.1271, 3695.6245, 30.259407),
                    new mp.Vector3(1860.2059, 3686.8, 30.259424),
                    new mp.Vector3(1865.4286, 3689.911, 30.73259),
                    new mp.Vector3(1860.6471, 3698.4934, 30.186737),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  64,
                  [
                    new mp.Vector3(1854.5493, 3688.0305, 31.186308),
                    new mp.Vector3(1851.6293, 3693.1812, 30.259407),
                    new mp.Vector3(1853.6799, 3694.3872, 30.25941),
                    new mp.Vector3(1857.1948, 3689.6995, 30.145426),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  65,
                  [
                    new mp.Vector3(1844.6736, 3680.8982, 30.259415),
                    new mp.Vector3(1849.2716, 3683.7566, 30.259415),
                    new mp.Vector3(1850.6907, 3681.3096, 30.25941),
                    new mp.Vector3(1845.6818, 3678.4436, 30.25149),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  66,
                  [
                    new mp.Vector3(1859.1284, 3690.8494, 34.10884),
                    new mp.Vector3(1861.5464, 3692.2346, 34.262344),
                    new mp.Vector3(1863.6395, 3689.262, 34.266933),
                    new mp.Vector3(1861.0468, 3687.6497, 34.25934),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  67,
                  [
                    new mp.Vector3(-446.91508, 6016.0903, 36.86763),
                    new mp.Vector3(-441.6883, 6010.9663, 36.822784),
                    new mp.Vector3(-447.3137, 6005.462, 36.470142),
                    new mp.Vector3(-452.51514, 6010.304, 36.524986),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  68,
                  [
                    new mp.Vector3(-445.37418, 6007.4917, 27.985617),
                    new mp.Vector3(-449.39108, 6011.4683, 27.985512),
                    new mp.Vector3(-444.0255, 6016.611, 26.976952),
                    new mp.Vector3(-440.35925, 6012.81, 27.98561),
                  ],
                  2.5
                ),
                mp.polygons.add(
                  69,
                  [
                    new mp.Vector3(-435.0152, 6003.834, 28.771164),
                    new mp.Vector3(-431.07648, 6000.277, 28.026466),
                    new mp.Vector3(-428.18497, 6003.276, 27.955122),
                    new mp.Vector3(-431.98846, 6006.864, 27.549774),
                  ],
                  2.5
                );
            }, 500);
          },
          3959: (e, t, a) => {
            let o = !0,
              i = !0,
              n = 0,
              s = { hours: 0, minutes: 0 };
            (a.g.DateTime = null),
              mp.events.add("DateTime", (e) => {
                (a.g.DateTime = JSON.parse(e)),
                  mp.gui.emmit(`window.serverStore.serverDateTime (${e})`);
              }),
              mp.events.add("SetTime", (e, t, a) => {
                (s.hours = e),
                  (s.minutes = t),
                  o && mp.game.time.setClockTime(s.hours, s.minutes, 0),
                  (n = a),
                  p();
              });
            const r = [
              "EXTRASUNNY",
              "CLEAR",
              "CLOUDS",
              "SMOG",
              "FOGGY",
              "OVERCAST",
              "RAIN",
              "THUNDER",
              "CLEARING",
              "NEUTRAL",
              "SNOW",
              "BLIZZARD",
              "SNOWLIGHT",
              "XMAS",
              "HALLOWEEN",
            ];
            let l = null,
              m = null,
              c = null;
            mp.events.add("SetWeather", (e, t, a) => {
              (l = mp.game.gameplay.getHashKey(r[e])),
                (m = mp.game.gameplay.getHashKey(r[t])),
                (c = a),
                p();
            }),
              mp.events.add("weatherinfo", () => {
                let e = 0,
                  t = 0;
                for (let a = 0; a < r.length; a++)
                  mp.game.gameplay.getHashKey(r[a]) === l && (e = a),
                    mp.game.gameplay.getHashKey(r[a]) === m && (t = a);
                const a = c - n;
                let o = 1 - a / 1800;
                o > 1 ? (o = 1) : o < 0 && (o = 0),
                  mp.gui.chat.push(
                    `${r[e]} (${e}) | ${r[t]}  (${t}) | ${o} (${
                      1 - a / 1800
                    }) | ${c} - ${n} = ${a}`
                  );
              }),
              mp.events.add(a.g.renderName["1s"], () => {
                n -= 1;
              });
            const p = () => {
              if (!a.g.loggedin) return;
              if (!i) return void mp.game.gameplay.setWeatherTypeNow(r[0]);
              let e = 1 - (c - n) / 1800;
              e > 1 ? (e = 1) : e < 0 && (e = 0),
                mp.game.gameplay.setWeatherTypeTransition(l, m, e);
            };
            mp.events.add("render", () => {
              a.g.loggedin && p();
            }),
              mp.events.add("setTimeCmd", (e, t, a) => {
                -1 == e && -1 == t && -1 == a
                  ? ((o = !0), mp.game.time.setClockTime(s.hours, s.minutes, 0))
                  : ((o = !1), mp.game.time.setClockTime(e, t, a));
              }),
              mp.events.add("stopTime", () => {
                (o = !1), (i = !1), mp.game.time.setClockTime(0, 0, 0);
              }),
              mp.events.add("resumeTime", () => {
                (o = !0),
                  (i = !0),
                  mp.game.time.setClockTime(s.hours, s.minutes, 0);
              }),
              [
                { calls: [a.g.renderName.render], maxTime: 0 },
                {
                  calls: [a.g.renderName["1s"], a.g.renderName.sound],
                  maxTime: 1e3,
                },
                { calls: [a.g.renderName["2s"]], maxTime: 2e3 },
                { calls: [a.g.renderName["2.5ms"]], maxTime: 2500 },
                { calls: [a.g.renderName["5s"]], maxTime: 5e3 },
                { calls: [a.g.renderName["10s"]], maxTime: 1e4 },
                { calls: [a.g.renderName["50ms"]], maxTime: 50 },
                {
                  calls: [a.g.renderName["100ms"], a.g.renderName.soundRot],
                  maxTime: 100,
                },
                { calls: [a.g.renderName["125ms"]], maxTime: 125 },
                { calls: [a.g.renderName["150ms"]], maxTime: 150 },
                { calls: [a.g.renderName["250ms"]], maxTime: 250 },
                { calls: [a.g.renderName["200ms"]], maxTime: 200 },
                { calls: [a.g.renderName["350ms"]], maxTime: 350 },
                { calls: [a.g.renderName["500ms"]], maxTime: 500 },
              ].forEach((e) => {
                e.calls.forEach((t) => {
                  setInterval(() => {
                    mp.events.call(t);
                  }, e.maxTime);
                });
              });
          },
          8715: () => {
            setTimeout(() => {
              mp.game.streaming.requestIpl("hei_dlc_windows_casino"),
                mp.game.streaming.requestIpl("vw_casino_main"),
                mp.game.streaming.requestIpl("vw_casino_garage"),
                mp.game.streaming.requestIpl("vw_casino_carpark"),
                mp.game.streaming.requestIpl("vw_casino_penthouse"),
                mp.game.streaming.requestIpl("hei_dlc_casino_door"),
                mp.game.streaming.requestIpl("bh1_47_joshhse_unburnt"),
                mp.game.streaming.requestIpl("bh1_47_joshhse_unburnt_lod"),
                mp.game.streaming.requestIpl("CanyonRvrShallow"),
                mp.game.streaming.requestIpl("ch1_02_open"),
                mp.game.streaming.requestIpl("Carwash_with_spinners"),
                mp.game.streaming.requestIpl("sp1_10_real_interior"),
                mp.game.streaming.requestIpl("sp1_10_real_interior_lod"),
                mp.game.streaming.requestIpl("ferris_finale_Anim"),
                mp.game.streaming.removeIpl("hei_bi_hw1_13_door"),
                mp.game.streaming.requestIpl("fiblobby"),
                mp.game.streaming.requestIpl("fiblobby_lod"),
                mp.game.streaming.requestIpl(
                  "apa_ss1_11_interior_v_rockclub_milo_"
                ),
                mp.game.streaming.requestIpl(
                  "hei_sm_16_interior_v_bahama_milo_"
                ),
                mp.game.streaming.requestIpl(
                  "hei_hw1_blimp_interior_v_comedy_milo_"
                ),
                mp.game.streaming.requestIpl("gr_case6_bunkerclosed"),
                mp.game.streaming.requestIpl("apa_v_mp_h_05_b"),
                mp.game.streaming.requestIpl("imp_sm_15_cargarage_a"),
                mp.game.streaming.requestIpl("imp_sm_15_modgarage"),
                mp.game.streaming.requestIpl("ex_dt1_11_office_01a"),
                mp.game.streaming.requestIpl("ex_sm_13_office_02a"),
                mp.game.streaming.requestIpl("ex_dt1_02_office_03a"),
                mp.game.streaming.requestIpl("hei_dlc_casino_aircon"),
                mp.game.streaming.requestIpl("vw_dlc_casino_door");
            }, 500);
          },
          2708: (e, t, a) => {
            const o = [
                {
                  station: "LSIA Terminal",
                  id: 0,
                  position: new mp.Vector3(-1102.43, -2730.98, -7.41),
                  final: !0,
                },
                {
                  station: "LSIA Terminal",
                  id: 1,
                  position: new mp.Vector3(-1062.819, -2697.82, -7.41),
                  final: !1,
                },
                {
                  station: "LSIA Parking",
                  id: 2,
                  position: new mp.Vector3(-878.79, -2317.05, -11.73),
                  final: !1,
                },
                {
                  station: "LSIA Parking",
                  id: 3,
                  position: new mp.Vector3(-885.77, -2314.26, -7.41),
                  final: !1,
                },
                {
                  station: "Puerto Del Sol",
                  id: 4,
                  position: new mp.Vector3(-541.01, -1288.4, 26.9),
                  final: !1,
                },
                {
                  station: "Puerto Del Sol",
                  id: 5,
                  position: new mp.Vector3(-544.82, -1286.46, 26.9),
                  final: !1,
                },
                {
                  station: "Strawberry",
                  id: 6,
                  position: new mp.Vector3(279, -1207.1, 38.89),
                  final: !1,
                },
                {
                  station: "Strawberry",
                  id: 7,
                  position: new mp.Vector3(279.6, -1201.62, 38.89),
                  final: !1,
                },
                {
                  station: "Burton",
                  id: 8,
                  position: new mp.Vector3(-290.45, -331.06, 10.06),
                  final: !1,
                },
                {
                  station: "Burton",
                  id: 9,
                  position: new mp.Vector3(-298.05, -332.06, 10.06),
                  final: !1,
                },
                {
                  station: "Portola Drive",
                  id: 10,
                  position: new mp.Vector3(-816.3, -134.11, 19.95),
                  final: !1,
                },
                {
                  station: "Portola Drive",
                  id: 11,
                  position: new mp.Vector3(-812.45, -140.36, 19.95),
                  final: !1,
                },
                {
                  station: "Del Perro",
                  id: 12,
                  position: new mp.Vector3(-1355.43, -464.75, 15.04),
                  final: !1,
                },
                {
                  station: "Del Perro",
                  id: 13,
                  position: new mp.Vector3(-1349.18, -461.38, 15.04),
                  final: !1,
                },
                {
                  station: "Little Seoul",
                  id: 14,
                  position: new mp.Vector3(-502.46, -676.59, 11.8),
                  final: !1,
                },
                {
                  station: "Little Seoul",
                  id: 15,
                  position: new mp.Vector3(-502.76, -669.37, 11.8),
                  final: !1,
                },
                {
                  station: "Pillbox South",
                  id: 16,
                  position: new mp.Vector3(-217.11, -1038.77, 30.14),
                  final: !1,
                },
                {
                  station: "Pillbox South",
                  id: 17,
                  position: new mp.Vector3(-214.17, -1040.12, 30.13),
                  final: !1,
                },
                {
                  station: "Davis",
                  id: 18,
                  position: new mp.Vector3(110.09, -1718.53, 30.11),
                  final: !1,
                },
                {
                  station: "Davis",
                  id: 19,
                  position: new mp.Vector3(118.91, -1730.56, 30.11),
                  final: !0,
                },
              ],
              i = mp.colshapes.newSphere(178.289, -1779.05, 29.08, 10, -1);
            let n,
              s = { enterColshapes: [], exitColshapes: [], isUsingMetro: !1 },
              r = !1,
              l = !1;
            (() => {
              try {
                o.forEach((e) => {
                  if (!e.final) {
                    const t = mp.colshapes.newSphere(
                      e.position.x,
                      e.position.y,
                      e.position.z,
                      1,
                      -1
                    );
                    (t.name = e.station),
                      (t.cid = e.id),
                      (t.pos = e.position),
                      (t.isfinal = e.final),
                      mp.markers.new(
                        2,
                        new mp.Vector3(
                          e.position.x,
                          e.position.y,
                          e.position.z
                        ),
                        1,
                        [52, 152, 219, 255]
                      ),
                      s.enterColshapes.push(t);
                  }
                  const t = mp.colshapes.newSphere(
                    e.position.x,
                    e.position.y,
                    e.position.z,
                    6.5,
                    -1
                  );
                  (t.name = e.station),
                    (t.cid = e.id),
                    (t.pos = e.position),
                    (t.isfinal = e.final),
                    s.exitColshapes.push(t);
                });
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "world/other",
                  "CreateShape",
                  e.toString()
                );
              }
            })(),
              mp.events.add("metroEnter", () => {
                try {
                  if (s.enterColshapes.includes(s.metroColshape))
                    if (l) mp.events.call("client.metro.close");
                    else {
                      if (
                        !a.g.loggedin ||
                        a.g.chatActive ||
                        a.g.editing ||
                        a.g.cuffed ||
                        1 == a.g.isDeath ||
                        1 == a.g.isDemorgan ||
                        a.g.attachedtotrunk ||
                        a.g.menuCheck() ||
                        (void 0 !== a.g.inAirsoftLobby &&
                          a.g.inAirsoftLobby >= 0)
                      )
                        return;
                      (l = !0),
                        mp.gui.emmit(
                          `window.router.setView("PlayerMetro", '${s.metroColshape.name}');`
                        ),
                        a.g.menuOpen();
                    }
                  else r && mp.events.call("metro.clear");
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/other",
                    "metroEnter",
                    e.toString()
                  );
                }
              }),
              mp.events.add("playerEnterColshape", (e) => {
                try {
                  if (!a.g.loggedin) return;
                  s.enterColshapes.includes(e) &&
                    ((s.metroColshape = e),
                    mp.events.call("hud.oEnter", "buyMetro")),
                    s.exitColshapes.includes(e) && c && ((n = e), _(e.isFinal)),
                    i === e && s.isUsingMetro && _(!0);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/other",
                    "playerEnterColshape",
                    e.toString()
                  );
                }
              }),
              mp.events.add("playerExitColshape", (e) => {
                try {
                  if (!a.g.loggedin) return;
                  s.enterColshapes.includes(e) &&
                    ((s.metroColshape = null),
                    mp.events.call("client.metro.close")),
                    s.exitColshapes.includes(e) &&
                      ((n = null), (r = !1), mp.events.call("hud.cEnter"));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/other",
                    "playerExitColshape",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.metro.close", (e = !1) => {
                mp.gui.emmit("window.router.setHud();"),
                  a.g.menuClose(),
                  (l = !1),
                  e || mp.events.call("hud.cEnter");
              }),
              mp.events.add("client.metro.buyTicket", async (e, t) => {
                s.metroColshape &&
                  (s.metroColshape.name != e
                    ? mp.events.callRemote("metro.server.buyTicket", e, t)
                    : mp.events.call(
                        "notify",
                        4,
                        9,
                        "Вы и так находитесь на данной станции!",
                        3e3
                      ));
              });
            let m = "";
            mp.events.add("metro.server.buyTicketSuccess", async (e) => {
              try {
                (m = e), mp.events.call("client.metro.close");
                const t = o.find((t) => t.station === e),
                  a = o.filter(
                    (e) => e.station === s.metroColshape.name && !e.final
                  ),
                  i =
                    (t && t.id >= s.metroColshape.cid) || 1 == a.length
                      ? a[0]
                      : a[1];
                (s.isUsingMetro = !0), g(i);
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "world/other",
                  "buyTicketSuccess",
                  e.toString()
                );
              }
            }),
              (a.g.isSartMetro = !1);
            let c = !1,
              p = !1;
            const g = async (e) => {
                try {
                  if (!e) return void (s.isUsingMetro = !1);
                  (a.g.isSartMetro = !0),
                    mp.events.call("setTraffic", 3),
                    d(),
                    Natives.DELETE_ALL_TRAINS(),
                    await a.g.loadModel("metrotrain"),
                    await a.g.loadModel("s_m_m_lsmetro_01"),
                    (p = mp.game.vehicle.createMissionTrain(
                      24,
                      e.position.x,
                      e.position.y,
                      e.position.z,
                      !0
                    )),
                    a.g.localplayer.setIntoVehicle(p, 0),
                    p &&
                      (Natives.SET_TRAIN_SPEED(p, 14.5),
                      Natives.SET_TRAIN_CRUISE_SPEED(p, 14.5)),
                    await a.g.wait(1e3),
                    (c = !0);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/other",
                    "StartMetro",
                    e.toString()
                  );
                }
              },
              _ = async (e) => {
                try {
                  p &&
                    (Natives.SET_TRAIN_SPEED(p, 0),
                    Natives.SET_TRAIN_CRUISE_SPEED(p, 0)),
                    await a.g.wait(1e3),
                    (r = !0),
                    e || m === n.name
                      ? mp.events.call("metro.clear")
                      : (mp.events.call(
                          "notify",
                          2,
                          9,
                          `Вы на станции ${n.name}. Это еще не Ваша станция, но можете выйти здесь.`,
                          9e3
                        ),
                        mp.events.call("hud.oEnter", "exitMetro"),
                        await a.g.wait(1e4),
                        p &&
                          (Natives.SET_TRAIN_SPEED(p, 14.5),
                          Natives.SET_TRAIN_CRUISE_SPEED(p, 14.5)));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/other",
                    "StopMetro",
                    e.toString()
                  );
                }
              },
              d = () => {
                p &&
                  (mp.game.vehicle.deleteMissionTrain(p),
                  Natives.DELETE_ALL_TRAINS());
              };
            mp.events.add("metro.clear", async () => {
              try {
                (s.isUsingMetro = !1),
                  (a.g.isSartMetro = !1),
                  (c = !1),
                  (r = !1),
                  await a.g.wait(500),
                  d(),
                  n && (a.g.localplayer.position = n.pos),
                  mp.events.callRemote("metro.server.exit"),
                  (n = null),
                  (m = null),
                  mp.events.call("setTraffic", 0),
                  mp.events.call("cleartraffic"),
                  mp.events.call("hud.cEnter");
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "world/other",
                  "clear",
                  e.toString()
                );
              }
            }),
              mp.events.add("render", () => {
                s.isUsingMetro &&
                  mp.game.controls.disableControlAction(0, 75, !0);
              });
          },
          3808: () => {
            var e = !1,
              t = !1;
            mp.events.add("pentload", () => {
              try {
                if (0 == e) {
                  e = !0;
                  let t = mp.game.interior.getInteriorAtCoords(
                      976.636,
                      70.295,
                      115.164
                    ),
                    a = [
                      "Set_Pent_Tint_Shell",
                      "Set_Pent_Pattern_01",
                      "Set_Pent_Spa_Bar_Open",
                      "Set_Pent_Media_Bar_Open",
                      "Set_Pent_Dealer",
                      "Set_Pent_Arcade_Modern",
                      "Set_Pent_Bar_Clutter",
                      "Set_Pent_Clutter_01",
                      "set_pent_bar_light_01",
                      "set_pent_bar_party_0",
                    ];
                  for (const e of a)
                    mp.game.interior.enableInteriorProp(t, e),
                      mp.game.invoke("0xC1F1920BAF281317", t, e, 1);
                  mp.game.interior.refreshInterior(t);
                }
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "world/other",
                  "pentload",
                  e.toString()
                );
              }
            });
            const a = ["swag_guns", "swag_guns2", "swag_guns3"],
              o = [
                "swag_med",
                "swag_med2",
                "swag_med3",
                "swag_pills",
                "swag_pills2",
                "swag_pills3",
              ],
              i = [
                "swag_drugbags",
                "swag_drugbags2",
                "swag_drugbags3",
                "swag_drugstatue",
                "swag_drugstatue2",
                "swag_drugstatue3",
              ],
              n = [
                "cash_set_01",
                "cash_set_02",
                "cash_set_03",
                "cash_set_04",
                "cash_set_05",
                "cash_set_06",
                "cash_set_07",
                "cash_set_08",
                "cash_set_09",
                "cash_set_10",
                "cash_set_11",
                "cash_set_12",
                "cash_set_13",
                "cash_set_14",
                "cash_set_15",
                "cash_set_16",
                "cash_set_17",
                "cash_set_18",
                "cash_set_19",
                "cash_set_20",
                "cash_set_21",
                "cash_set_22",
                "cash_set_23",
                "cash_set_24",
              ];
            mp.events.add("OfficePropLoad", (e, t, s, r, l) => {
              try {
                if (r)
                  if (0 == t)
                    for (const t of n)
                      mp.game.interior.isInteriorPropEnabled(e, t) &&
                        (mp.game.interior.disableInteriorProp(e, t),
                        mp.game.interior.refreshInterior(e));
                  else if (1 == t)
                    for (const t of i)
                      mp.game.interior.isInteriorPropEnabled(e, t) &&
                        (mp.game.interior.disableInteriorProp(e, t),
                        mp.game.interior.refreshInterior(e));
                  else if (2 == t)
                    for (const t of o)
                      mp.game.interior.isInteriorPropEnabled(e, t) &&
                        (mp.game.interior.disableInteriorProp(e, t),
                        mp.game.interior.refreshInterior(e));
                  else if (3 == t)
                    for (const t of a)
                      mp.game.interior.isInteriorPropEnabled(e, t) &&
                        (mp.game.interior.disableInteriorProp(e, t),
                        mp.game.interior.refreshInterior(e));
                if (l) {
                  if (0 == s) return;
                  let r = !1,
                    l = 0;
                  if (0 == t) {
                    for (const t of n)
                      if (
                        (l++,
                        mp.game.interior.isInteriorPropEnabled(e, t) ||
                          ((r = !0),
                          mp.game.interior.enableInteriorProp(e, t),
                          mp.game.invoke("0xC1F1920BAF281317", e, t, 1)),
                        l == s)
                      )
                        break;
                  } else if (1 == t) {
                    for (const t of i)
                      if (
                        (l++,
                        mp.game.interior.isInteriorPropEnabled(e, t) ||
                          ((r = !0),
                          mp.game.interior.enableInteriorProp(e, t),
                          mp.game.invoke("0xC1F1920BAF281317", e, t, 1)),
                        l == s)
                      )
                        break;
                  } else if (2 == t) {
                    for (const t of o)
                      if (
                        (l++,
                        mp.game.interior.isInteriorPropEnabled(e, t) ||
                          ((r = !0),
                          mp.game.interior.enableInteriorProp(e, t),
                          mp.game.invoke("0xC1F1920BAF281317", e, t, 1)),
                        l == s)
                      )
                        break;
                  } else if (3 == t)
                    for (const t of a)
                      if (
                        (l++,
                        mp.game.interior.isInteriorPropEnabled(e, t) ||
                          ((r = !0),
                          mp.game.interior.enableInteriorProp(e, t),
                          mp.game.invoke("0xC1F1920BAF281317", e, t, 1)),
                        l == s)
                      )
                        break;
                  r && (mp.game.interior.refreshInterior(e), (r = !1));
                }
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "world/other",
                  "OfficePropLoad",
                  e.toString()
                );
              }
            }),
              mp.events.add("OfficeAllPropLoad", (e, t, s, r, l) => {
                try {
                  for (const t of n)
                    mp.game.interior.isInteriorPropEnabled(e, t) &&
                      (mp.game.interior.disableInteriorProp(e, t),
                      mp.game.interior.refreshInterior(e));
                  for (const t of i)
                    mp.game.interior.isInteriorPropEnabled(e, t) &&
                      (mp.game.interior.disableInteriorProp(e, t),
                      mp.game.interior.refreshInterior(e));
                  for (const t of o)
                    mp.game.interior.isInteriorPropEnabled(e, t) &&
                      (mp.game.interior.disableInteriorProp(e, t),
                      mp.game.interior.refreshInterior(e));
                  for (const t of a)
                    mp.game.interior.isInteriorPropEnabled(e, t) &&
                      (mp.game.interior.disableInteriorProp(e, t),
                      mp.game.interior.refreshInterior(e));
                  let m = !1,
                    c = 0;
                  if (t >= 1) {
                    c = 0;
                    for (const a of n)
                      if (
                        (c++,
                        mp.game.interior.isInteriorPropEnabled(e, a) ||
                          ((m = !0),
                          mp.game.interior.enableInteriorProp(e, a),
                          mp.game.invoke("0xC1F1920BAF281317", e, a, 1)),
                        c == t)
                      )
                        break;
                  }
                  if (s >= 1) {
                    c = 0;
                    for (const t of i)
                      if (
                        (c++,
                        mp.game.interior.isInteriorPropEnabled(e, t) ||
                          ((m = !0),
                          mp.game.interior.enableInteriorProp(e, t),
                          mp.game.invoke("0xC1F1920BAF281317", e, t, 1)),
                        c == s)
                      )
                        break;
                  }
                  if (r >= 1) {
                    c = 0;
                    for (const t of o)
                      if (
                        (c++,
                        mp.game.interior.isInteriorPropEnabled(e, t) ||
                          ((m = !0),
                          mp.game.interior.enableInteriorProp(e, t),
                          mp.game.invoke("0xC1F1920BAF281317", e, t, 1)),
                        c == r)
                      )
                        break;
                  }
                  if (l >= 1) {
                    c = 0;
                    for (const t of a)
                      if (
                        (c++,
                        mp.game.interior.isInteriorPropEnabled(e, t) ||
                          ((m = !0),
                          mp.game.interior.enableInteriorProp(e, t),
                          mp.game.invoke("0xC1F1920BAF281317", e, t, 1)),
                        c == l)
                      )
                        break;
                  }
                  m && (mp.game.interior.refreshInterior(e), (m = !1));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/other",
                    "OfficeAllPropLoad",
                    e.toString()
                  );
                }
              }),
              mp.events.add("garageload", () => {
                try {
                  if (0 == t) {
                    t = !0;
                    let e = mp.game.interior.getInteriorAtCoords(
                        -1386.466,
                        -477.74,
                        55.98
                      ),
                      a = [
                        "garage_decor_04",
                        "lighting_option09",
                        "numbering_style09_n1",
                      ];
                    for (const t of a)
                      mp.game.interior.enableInteriorProp(e, t),
                        mp.game.invoke("0xC1F1920BAF281317", e, t, 1);
                    mp.game.interior.refreshInterior(e),
                      (e = mp.game.interior.getInteriorAtCoords(
                        -1389.609,
                        -471.7082,
                        77.08
                      )),
                      mp.game.interior.enableInteriorProp(e, "floor_vinyl_01"),
                      mp.game.invoke(
                        "0xC1F1920BAF281317",
                        e,
                        "floor_vinyl_01",
                        1
                      ),
                      mp.game.interior.refreshInterior(e);
                  }
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/other",
                    "garageload",
                    e.toString()
                  );
                }
              });
            let s = null;
            mp.events.add("setmyview", (e) => {
              try {
                null !== s && s.destroy(),
                  0 == e
                    ? ((s = mp.cameras.new(
                        "default",
                        new mp.Vector3(-1393.059, -489.5243, 60.6802),
                        new mp.Vector3(0, 0, 0),
                        50
                      )),
                      s.pointAtCoord(-1382.944, -474.2304, 55.9804),
                      s.setActive(!0),
                      mp.game.cam.renderScriptCams(!0, !1, 0, !0, !1))
                    : 1 == e
                    ? ((s = mp.cameras.new(
                        "default",
                        new mp.Vector3(-58.88321, -808.342, 244.266),
                        new mp.Vector3(0, 0, 0),
                        50
                      )),
                      s.pointAtCoord(-73.4893, -807.94, 242.266),
                      s.setActive(!0),
                      mp.game.cam.renderScriptCams(!0, !1, 0, !0, !1))
                    : 2 == e
                    ? ((s = mp.cameras.new(
                        "default",
                        new mp.Vector3(-1573.404, -589.33, 109.52),
                        new mp.Vector3(0, 0, 0),
                        50
                      )),
                      s.pointAtCoord(-1564.884, -577.37, 108.523),
                      s.setActive(!0),
                      mp.game.cam.renderScriptCams(!0, !1, 0, !0, !1))
                    : 3 == e
                    ? ((s = mp.cameras.new(
                        "default",
                        new mp.Vector3(-147.934, -645.15, 169.82),
                        new mp.Vector3(0, 0, 0),
                        50
                      )),
                      s.pointAtCoord(-135.24, -639.37, 168.82),
                      s.setActive(!0),
                      mp.game.cam.renderScriptCams(!0, !1, 0, !0, !1))
                    : 4 == e &&
                      ((s = mp.cameras.new(
                        "default",
                        new mp.Vector3(-1385.194, -479.872, 80.2),
                        new mp.Vector3(0, 0, 0),
                        50
                      )),
                      s.pointAtCoord(-1391.366, -471.936, 77.91),
                      s.setActive(!0),
                      mp.game.cam.renderScriptCams(!0, !1, 0, !0, !1));
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "world/other",
                  "setmyview",
                  e.toString()
                );
              }
            }),
              mp.events.add("resetmyview", () => {
                try {
                  null !== s &&
                    (s.destroy(),
                    mp.game.cam.renderScriptCams(!1, !1, 3e3, !0, !0),
                    (s = null));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/other",
                    "resetmyview",
                    e.toString()
                  );
                }
              }),
              mp.events.add("loadprophere", (e, t, a, o, i) => {
                try {
                  let n;
                  (n =
                    null !== i
                      ? mp.game.interior.getInteriorAtCoordsWithType(e, t, a, i)
                      : mp.game.interior.getInteriorAtCoords(e, t, a)),
                    mp.game.interior.enableInteriorProp(n, o),
                    mp.game.invoke("0xC1F1920BAF281317", n, o, 1),
                    mp.game.interior.refreshInterior(n);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/other",
                    "loadprophere",
                    e.toString()
                  );
                }
              }),
              mp.events.add("loadpropbyint", (e, t) => {
                try {
                  mp.game.interior.enableInteriorProp(e, t),
                    mp.game.invoke("0xC1F1920BAF281317", e, t, 1),
                    mp.game.interior.refreshInterior(e);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/other",
                    "loadpropbyint",
                    e.toString()
                  );
                }
              }),
              mp.events.add("clearprophere", (e, t, a, o, i) => {
                try {
                  let n;
                  (n =
                    null !== i
                      ? mp.game.interior.getInteriorAtCoordsWithType(e, t, a, i)
                      : mp.game.interior.getInteriorAtCoords(e, t, a)),
                    mp.game.interior.isInteriorPropEnabled(n, o) &&
                      (mp.game.interior.disableInteriorProp(n, o),
                      mp.game.interior.refreshInterior(n));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/other",
                    "clearprophere",
                    e.toString()
                  );
                }
              }),
              mp.events.add("clearpropbyint", (e, t) => {
                try {
                  mp.game.interior.isInteriorPropEnabled(e, t) &&
                    (mp.game.interior.disableInteriorProp(e, t),
                    mp.game.interior.refreshInterior(e));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/other",
                    "clearpropbyint",
                    e.toString()
                  );
                }
              });
          },
          6175: (e, t, a) => {
            let o = {
              entity: null,
              blip: null,
              attack: null,
              attackPet: null,
              ballPosition: null,
              ballHandle: null,
              ballThrown: !1,
              toFollow: null,
              toSniff: null,
              toSniffTimer: 0,
              ball: null,
              isStop: !1,
              meTp: !1,
              followType: 0,
            };
            const i = {
              1462895032: "cat.png",
              351016938: "chop.png",
              1318032802: "husky.png",
              1125994524: "poodle.png",
              1832265812: "pug.png",
              882848737: "retriever.png",
              2506301981: "rottweiler.png",
              1126154828: "shepherd.png",
              2910340283: "westy.png",
              2971380566: "pig.png",
              3462393972: "boar.png",
              307287994: "panther.png",
              3877461608: "bpanther.png",
              1682622302: "coyote.png",
            };
            mp.events.add("client.initPet", (e, t) => {
              try {
                e &&
                  mp.peds.exists(e) &&
                  "ped" === e.type &&
                  ((e.freeze = !1),
                  (e.sit = !1),
                  (e.sleep = !1),
                  (e.gettingBall = !1),
                  mp.gui.emmit(`window.charStore.charIsPet ('${i[e.model]}')`),
                  mp.gui.emmit(
                    `window.events.callEvent("cef.pet.health", ${t})`
                  ),
                  (o.entity = e),
                  (o.blip = mp.blips.new(463, new mp.Vector3(), {
                    alpha: 255,
                    color: 75,
                    name: "Питомец",
                  })),
                  o.blip.setCoords(e.position),
                  (o.followType = 0),
                  M());
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "world/petSystem",
                  "initPet",
                  e.toString()
                );
              }
            }),
              mp.events.add("client.pet.health", (e) => {
                try {
                  o.entity &&
                    mp.peds.exists(o.entity) &&
                    mp.gui.emmit(
                      `window.events.callEvent("cef.pet.health", ${e})`
                    );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/petSystem",
                    "health",
                    e.toString()
                  );
                }
              }),
              mp.events.add("pedStreamIn", (e) => {
                ((e) => {
                  try {
                    e &&
                      mp.peds.exists(e) &&
                      "ped" === e.type &&
                      0 !== e.handle &&
                      e.getVariable("isPet") &&
                      (e.setCanBeDamaged(!0),
                      e.setInvincible(!0),
                      e.setOnlyDamagedByPlayer(!0),
                      e.setProofs(!0, !0, !0, !0, !0, !0, !0, !0),
                      e.setAsMission(!0, !0));
                  } catch (e) {
                    mp.events.callRemote(
                      "client_trycatch",
                      "synchronization/clothes",
                      "SetFollowPet",
                      e.toString()
                    );
                  }
                })(e);
              });
            const n = "creatures@rottweiler@amb@world_dog_sitting@exit",
              s = "exit",
              r = "creatures@rottweiler@amb@world_dog_sitting@base",
              l = "base",
              m = "creatures@rottweiler@amb@sleep_in_kennel@",
              c = "sleep_in_kennel";
            let p = !1;
            mp.events.add("client.pet.isUse", (e) => {
              p = e;
            }),
              mp.events.add("render", () => {
                try {
                  if (!a.g.loggedin) return;
                  o.blip &&
                    o.entity &&
                    o.entity.doesExist() &&
                    o.blip.setCoords(o.entity.getCoords(!0));
                  const e = a.g.localplayer.position;
                  mp.peds.forEachInStreamRange((t) => {
                    if (t && "ped" === t.type) {
                      const a = t.getVariable("petName");
                      if (a && a.length > 0) {
                        const o = mp.game.graphics,
                          i = t.getCoords(!0),
                          n = mp.game.system.vdist(
                            i.x,
                            i.y,
                            i.z,
                            e.x,
                            e.y,
                            e.z
                          );
                        if (n < 15) {
                          const e = t.getBoneCoords(12844, 0, 0, 0),
                            i = GetScale(n, 25);
                          let s = 0.3 * i;
                          o.drawText(a, [e.x, e.y, e.z + (1 - i) + 0.35], {
                            font: 0,
                            color: [255, 255, 255, 255],
                            scale: [s, s],
                            outline: !0,
                          });
                        }
                      }
                    }
                  });
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/petSystem",
                    "render",
                    e.toString()
                  );
                }
              });
            let g = 0;
            setInterval(() => {
              (async () => {
                try {
                  if (!a.g.loggedin) return;
                  if (o.entity && mp.peds.exists(o.entity))
                    if (
                      o.entity.isInMeleeCombat() &&
                      y.includes(o.entity.model)
                    )
                      u(!0);
                    else if (
                      o.entity.isInMeleeCombat() &&
                      o.entity.isInCombat(a.g.localplayer.handle)
                    )
                      u(!0);
                    else if (
                      null === o.attack &&
                      null === o.attackPet &&
                      o.entity.isInMeleeCombat()
                    )
                      mp.players.forEachInStreamRange((e) => {
                        o.entity.isInCombat(e.handle) && ((o.attack = e), M());
                      }),
                        mp.peds.forEachInStreamRange((e) => {
                          o.entity.isInCombat(e.handle) &&
                            ((o.attackPet = e), M());
                        }),
                        null === o.attack && null === o.attackPet && u(!0);
                    else {
                      if (
                        a.g.localplayer.vehicle &&
                        o.entity.isInAnyVehicle(!1)
                      )
                        return (o.entity.freeze = !1), void (o.followType = 0);
                      if (o.meTp && g < new Date().getTime())
                        (o.meTp = !1),
                          (o.entity.freeze = !1),
                          (o.followType = 0),
                          mp.events.callRemote("server.pet.topos"),
                          (g = new Date().getTime() + 1e4);
                      else if (null !== o.attack)
                        b(o.attack)
                          ? o.entity.taskCombat(o.attack.handle, 0, 16)
                          : u();
                      else if (null !== o.attackPet)
                        C(o.attackPet)
                          ? o.entity.taskCombat(o.attackPet.handle, 0, 16)
                          : u();
                      else if (o.entity.gettingBall && o.ballPosition) {
                        const e = o.entity.getCoords(!0),
                          t = mp.game.gameplay.getDistanceBetweenCoords(
                            e.x,
                            e.y,
                            e.z,
                            o.ballPosition.x,
                            o.ballPosition.y,
                            o.ballPosition.z,
                            !0
                          );
                        if (Natives.DOES_ENTITY_EXIST(o.ballHandle))
                          if (t <= 1.5)
                            (o.entity.freeze = !1),
                              (o.followType = 0),
                              mp.events.callRemote(
                                "server.pet.dellball",
                                o.entity,
                                o.ballPosition.x,
                                o.ballPosition.y,
                                o.ballPosition.z
                              ),
                              (o.ballPosition = null),
                              (o.ballHandle = null),
                              (o.entity.gettingBall = !1),
                              (o.ballThrown = !0);
                          else {
                            let e;
                            (e = t > 4 ? 3 : 1),
                              o.entity.taskGoToCoordAndAimAtHatedEntitiesNearCoord(
                                o.ballPosition.x,
                                o.ballPosition.y,
                                o.ballPosition.z + 0.4,
                                o.ballPosition.x,
                                o.ballPosition.y,
                                o.ballPosition.z + 0.4,
                                e,
                                !1,
                                0,
                                0,
                                !1,
                                0,
                                !1,
                                mp.game.joaat("a_c_chop")
                              );
                          }
                        else
                          (o.entity.freeze = !1),
                            (o.followType = 0),
                            (o.ballPosition = null),
                            (o.ballHandle = null),
                            (o.entity.gettingBall = !1),
                            (o.ballThrown = !1);
                      } else
                        o.entity.freeze || null === o.toFollow
                          ? o.entity.freeze || null === o.toSniff
                            ? o.entity.freeze ||
                              o.entity.gettingBall ||
                              null !== o.attack ||
                              null !== o.attackPet ||
                              _(a.g.localplayer, "me")
                            : b(o.toSniff)
                            ? _(o.toSniff, "sniff")
                            : u()
                          : b(o.toFollow)
                          ? _(o.toFollow, "follow")
                          : u();
                    }
                  else
                    o.entity &&
                      !mp.peds.exists(o.entity) &&
                      (o.blip && o.blip.destroy(),
                      (o = { entity: null, blip: null, attack: null }),
                      mp.gui.emmit("window.charStore.charIsPet (false)"),
                      mp.gui.emmit("window.hudStore.isAnimal (false)"),
                      mp.gui.emmit("window.SetBindToKey (-1)"));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/petSystem",
                    "OnTimer",
                    e.toString()
                  );
                }
              })();
            }, 500);
            const _ = (e, t) => {
              try {
                if (!o.entity || !mp.peds.exists(o.entity)) return;
                const i = o.entity.getCoords(!0),
                  n = mp.game.gameplay.getDistanceBetweenCoords(
                    i.x,
                    i.y,
                    i.z,
                    e.position.x,
                    e.position.y,
                    e.position.z,
                    !0
                  );
                if (
                  n <= 2 &&
                  o.entity.dimension === a.g.localplayer.dimension
                ) {
                  if (o.isStop || o.entity.isInAnyVehicle(!1)) return;
                  (o.isStop = !0),
                    (o.followType = 0),
                    o.entity.setKeepTask(!1),
                    d(o.entity),
                    "me" == t && o.ballThrown
                      ? ((o.ballThrown = !1),
                        mp.events.callRemote("server.pet.getBall", o.entity),
                        o.ball && mp.objects.exists(o.ball) && o.ball.destroy())
                      : "sniff" == t &&
                        ((o.entity.freeze = !0),
                        0 != o.toSniffTimer && clearTimeout(o.toSniffTimer),
                        (o.toSniffTimer = setTimeout(() => {
                          (o.toSniffTimer = 0),
                            (o.entity.freeze = !1),
                            u(),
                            mp.events.callRemote("server.pet.sniff", e);
                        }, 2500)));
                } else if (
                  ((o.isStop = !1),
                  o.entity.dimension !== a.g.localplayer.dimension &&
                    g < new Date().getTime())
                )
                  (g = new Date().getTime() + 1e4),
                    mp.events.callRemote("server.pet.updateDim");
                else {
                  if (e.vehicle && !o.entity.isInAnyVehicle(!1))
                    return (
                      mp.events.call("client.pet.setInVehicle"),
                      void (o.entity.freeze = !0)
                    );
                  if (!e.vehicle && o.entity.isInAnyVehicle(!1))
                    return (
                      o.entity.taskLeaveVehicle(
                        o.entity.getVehicleIsIn(!1),
                        16
                      ),
                      void (o.followType = 0)
                    );
                  !o.ballThrown &&
                  n > 50 &&
                  !o.entity.isInAnyVehicle(!1) &&
                  !a.g.fly.flying
                    ? ((o.entity.freeze = !0),
                      o.entity.clearTasks(),
                      o.entity.clearTasksImmediately(),
                      d(o.entity),
                      (o.meTp = !0))
                    : o.entity.isInAnyVehicle(!1) ||
                      0 != o.followType ||
                      (o.entity.taskFollowToOffsetOf(
                        e.handle,
                        0.5,
                        0,
                        0,
                        5,
                        -1,
                        0,
                        !0
                      ),
                      o.entity.setKeepTask(!0),
                      (o.followType = 1));
                }
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "world/petSystem",
                  "onToFollow",
                  e.toString()
                );
              }
            };
            function d(e) {
              try {
                e &&
                  a.g.requestAnimDict(n).then(async () => {
                    e.taskPlayAnim(n, s, 1, 1, -1, 0, 1, !1, !1, !1);
                  });
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "world/petSystem",
                  "freezePet",
                  e.toString()
                );
              }
            }
            function h(e, t, o = !0) {
              try {
                e &&
                  (t
                    ? (a.g.requestAnimDict(r).then(async () => {
                        e.taskPlayAnim(r, l, 1, 1, -1, 1, 1, !1, !1, !1);
                      }),
                      o && mp.events.call("notify", 4, 9, "Питомец сел.", 3e3))
                    : (a.g.requestAnimDict(n).then(async () => {
                        e.taskPlayAnim(n, s, 1, 1, -1, 0, 1, !1, !1, !1);
                      }),
                      o &&
                        mp.events.call("notify", 4, 9, "Питомец встал.", 3e3)));
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "world/petSystem",
                  "sitPet",
                  e.toString()
                );
              }
            }
            mp.events.add("client.pet.dellball", (e, t, a) => {
              try {
                let o = mp.game.object.getClosestObjectOfType(
                  e,
                  t,
                  a,
                  100,
                  mp.game.joaat("w_am_baseball"),
                  !1,
                  !0,
                  !0
                );
                o &&
                  (Natives.SET_ENTITY_AS_MISSION_ENTITY(o, !0, !0),
                  mp.game.object.deleteObject(o));
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "world/petSystem",
                  "dellball",
                  e.toString()
                );
              }
            }),
              mp.events.add("client.pet.follow", () => {
                try {
                  if (!o.entity || !mp.peds.exists(o.entity)) return;
                  const e = o.entity.getCoords(!0);
                  if (
                    mp.game.gameplay.getDistanceBetweenCoords(
                      e.x,
                      e.y,
                      e.z,
                      a.g.localplayer.position.x,
                      a.g.localplayer.position.y,
                      a.g.localplayer.position.z,
                      !0
                    ) >= 7
                  )
                    return void mp.events.call(
                      "notify",
                      4,
                      9,
                      "Подойдите ближе к питомцу, чтобы отдавать ему команды.",
                      3e3
                    );
                  u(),
                    (o.entity.freeze = !o.entity.freeze),
                    (o.entity.sit = !1),
                    (o.entity.sleep = !1),
                    d(o.entity),
                    o.entity.freeze
                      ? mp.events.call(
                          "notify",
                          4,
                          9,
                          "Питомец будет ждать тут.",
                          3e3
                        )
                      : mp.events.call(
                          "notify",
                          4,
                          9,
                          "Питомец будет следовать за Вами.",
                          3e3
                        ),
                    M();
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/petSystem",
                    "follow",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.pet.sit", async () => {
                try {
                  if (!o.entity || !mp.peds.exists(o.entity)) return;
                  const e = o.entity.getCoords(!0);
                  if (
                    (mp.discord.update(
                      "Играет с питомцем",
                      `на RedAge под ID ${a.g.localplayer.remoteId}`
                    ),
                    mp.game.gameplay.getDistanceBetweenCoords(
                      e.x,
                      e.y,
                      e.z,
                      a.g.localplayer.position.x,
                      a.g.localplayer.position.y,
                      a.g.localplayer.position.z,
                      !0
                    ) >= 10)
                  )
                    return void mp.events.call(
                      "notify",
                      4,
                      9,
                      "Подойдите ближе к питомцу, чтобы отдавать ему команды.",
                      3e3
                    );
                  if (o.entity.sleep)
                    return void mp.events.call(
                      "notify",
                      4,
                      9,
                      "Чтобы выполнить это действие, питомец не должен лежать.",
                      3e3
                    );
                  u(),
                    (o.entity.freeze = !0),
                    (o.entity.sit = !o.entity.sit),
                    h(o.entity, o.entity.sit),
                    M();
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/petSystem",
                    "initPet",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.pet.getBall", async () => {
                try {
                  if (!o.entity || !mp.peds.exists(o.entity)) return;
                  const e = o.entity.getCoords(!0);
                  if (
                    (mp.discord.update(
                      "Играет с питомцем",
                      `на RedAge под ID ${a.g.localplayer.remoteId}`
                    ),
                    mp.game.gameplay.getDistanceBetweenCoords(
                      e.x,
                      e.y,
                      e.z,
                      a.g.localplayer.position.x,
                      a.g.localplayer.position.y,
                      a.g.localplayer.position.z,
                      !0
                    ) >= 15)
                  )
                    return void mp.events.call(
                      "notify",
                      4,
                      9,
                      "Подойдите ближе к питомцу, чтобы отдавать ему команды.",
                      3e3
                    );
                  u(),
                    (o.entity.freeze = !1),
                    (o.entity.sleep = !1),
                    (o.entity.sit = !1),
                    (o.followType = 0),
                    (function (e) {
                      try {
                        if (e) {
                          const t = e.getCoords(!0);
                          let a = mp.game.object.getClosestObjectOfType(
                            t.x,
                            t.y,
                            t.z,
                            100,
                            mp.game.joaat("w_am_baseball"),
                            !1,
                            !0,
                            !0
                          );
                          a &&
                            weaponData.weapon != mp.game.joaat("weapon_ball") &&
                            ((o.ballHandle = a),
                            Natives.FREEZE_ENTITY_POSITION(a, !0),
                            (o.ballPosition = Natives.GET_ENTITY_COORDS(a, !1)),
                            (e.gettingBall = !0));
                        }
                      } catch (e) {
                        mp.events.callRemote(
                          "client_trycatch",
                          "world/petSystem",
                          "findBall",
                          e.toString()
                        );
                      }
                    })(o.entity),
                    M();
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/petSystem",
                    "getBall",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.pet.sleep", async () => {
                try {
                  if (!o.entity || !mp.peds.exists(o.entity)) return;
                  mp.discord.update(
                    "Играет с питомцем",
                    `на RedAge под ID ${a.g.localplayer.remoteId}`
                  );
                  const e = o.entity.getCoords(!0);
                  if (
                    mp.game.gameplay.getDistanceBetweenCoords(
                      e.x,
                      e.y,
                      e.z,
                      a.g.localplayer.position.x,
                      a.g.localplayer.position.y,
                      a.g.localplayer.position.z,
                      !0
                    ) >= 10
                  )
                    return void mp.events.call(
                      "notify",
                      4,
                      9,
                      "Подойдите ближе к питомцу, чтобы отдавать ему команды.",
                      3e3
                    );
                  u(),
                    (o.entity.freeze = !1),
                    (o.entity.sit = !1),
                    (o.entity.sleep = !o.entity.sleep),
                    (o.followType = 0),
                    (function (e, t, o = !0) {
                      try {
                        e &&
                          (t
                            ? (a.g.requestAnimDict(m).then(async () => {
                                e.taskPlayAnim(
                                  m,
                                  c,
                                  1,
                                  1,
                                  -1,
                                  1,
                                  1,
                                  !1,
                                  !1,
                                  !1
                                );
                              }),
                              o &&
                                mp.events.call(
                                  "notify",
                                  4,
                                  9,
                                  "Питомец лёг.",
                                  3e3
                                ))
                            : (a.g.requestAnimDict(n).then(async () => {
                                e.taskPlayAnim(
                                  n,
                                  s,
                                  1,
                                  1,
                                  -1,
                                  0,
                                  1,
                                  !1,
                                  !1,
                                  !1
                                );
                              }),
                              o &&
                                mp.events.call(
                                  "notify",
                                  4,
                                  9,
                                  "Питомец встал.",
                                  3e3
                                )));
                      } catch (e) {
                        mp.events.callRemote(
                          "client_trycatch",
                          "world/petSystem",
                          "sleepPet",
                          e.toString()
                        );
                      }
                    })(o.entity, o.entity.sleep),
                    M();
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/petSystem",
                    "sleep",
                    e.toString()
                  );
                }
              });
            const u = (e = !1) => {
              try {
                (null !== o.attack || null !== o.attackPet || e) &&
                  (o.entity.clearTasks(),
                  o.entity.clearTasksImmediately(),
                  d(o.entity),
                  (o.attack = null),
                  (o.attackPet = null),
                  M(),
                  (o.followType = 0)),
                  null !== o.toFollow &&
                    (d(o.entity), (o.toFollow = null), M(), (o.followType = 0)),
                  null !== o.toSniff &&
                    (0 != o.toSniffTimer && clearTimeout(o.toSniffTimer),
                    d(o.entity),
                    (o.toSniff = null),
                    (o.toSniffTimer = 0),
                    M(),
                    (o.followType = 0),
                    (o.entity.freeze = !1)),
                  (o.entity.gettingBall || o.ballThrown) &&
                    ((o.entity.freeze = !1),
                    (o.followType = 0),
                    (o.ballPosition = null),
                    (o.ballHandle = null),
                    (o.entity.gettingBall = !1),
                    (o.ballThrown = !1));
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "world/petSystem",
                  "ClearAttackInterval",
                  e.toString()
                );
              }
            };
            mp.events.add("client.pet.attack", (e) => {
              try {
                if (!o.entity || !mp.peds.exists(o.entity)) return;
                const t = mp.players.atRemoteId(e);
                if (!t) return;
                if (o.entity.isInCombat(t.handle)) return;
                if (t.vehicle) return;
                const i = o.entity.getCoords(!0);
                if (
                  mp.game.gameplay.getDistanceBetweenCoords(
                    i.x,
                    i.y,
                    i.z,
                    a.g.localplayer.position.x,
                    a.g.localplayer.position.y,
                    a.g.localplayer.position.z,
                    !0
                  ) >= 35
                )
                  return;
                (o.entity.freeze = !1), (o.attack = t), (o.followType = 0), M();
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "world/petSystem",
                  "attack",
                  e.toString()
                );
              }
            }),
              mp.events.add("client.pet.sniff", (e) => {
                try {
                  if (!o.entity || !mp.peds.exists(o.entity)) return;
                  const t = mp.players.atRemoteId(e);
                  if (!t) return;
                  if (o.entity.isInCombat(t.handle)) return;
                  if (t.vehicle) return;
                  const i = o.entity.getCoords(!0);
                  if (
                    mp.game.gameplay.getDistanceBetweenCoords(
                      i.x,
                      i.y,
                      i.z,
                      a.g.localplayer.position.x,
                      a.g.localplayer.position.y,
                      a.g.localplayer.position.z,
                      !0
                    ) >= 35
                  )
                    return void mp.events.call(
                      "notify",
                      4,
                      9,
                      "Подойдите ближе к питомцу, чтобы отдавать ему команды.",
                      3e3
                    );
                  (o.entity.freeze = !1),
                    (o.toSniff = t),
                    (o.followType = 0),
                    M();
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/petSystem",
                    "sniff",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.pet.toFollow", (e) => {
                try {
                  if (!o.entity || !mp.peds.exists(o.entity)) return;
                  const t = mp.players.atRemoteId(e);
                  if (!t) return;
                  if (o.entity.isInCombat(t.handle)) return;
                  if (t.vehicle) return;
                  const i = o.entity.getCoords(!0);
                  if (
                    mp.game.gameplay.getDistanceBetweenCoords(
                      i.x,
                      i.y,
                      i.z,
                      a.g.localplayer.position.x,
                      a.g.localplayer.position.y,
                      a.g.localplayer.position.z,
                      !0
                    ) >= 35
                  )
                    return void mp.events.call(
                      "notify",
                      4,
                      9,
                      "Подойдите ближе к питомцу, чтобы отдавать ему команды.",
                      3e3
                    );
                  (o.entity.freeze = !1),
                    (o.toFollow = t),
                    (o.followType = 0),
                    M();
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/petSystem",
                    "toFollow",
                    e.toString()
                  );
                }
              }),
              mp.events.add("client.pet.clear", () => {
                o.entity && mp.peds.exists(o.entity) && u();
              });
            const y = [
                1462895032, 2910340283, 1125994524, 1832265812, 2971380566,
                3462393972,
              ],
              v = [2506301981, 1318032802, 1126154828],
              f = [
                2971380566, 2506301981, 1318032802, 1126154828, 307287994,
                3877461608,
              ],
              w = [
                2971380566, 2506301981, 1318032802, 1126154828, 307287994,
                3877461608,
              ],
              S = [],
              M = () => {
                try {
                  if (!o.entity || !mp.peds.exists(o.entity)) return;
                  let e = [
                    {
                      name: o.entity.freeze ? "Следовать" : "Ждать",
                      event: "client.pet.follow",
                    },
                  ];
                  v.includes(o.entity.model) &&
                    (e.push({
                      name: null === o.attack ? "Атаковать" : "Отменить атаку",
                      event:
                        null === o.attack
                          ? "client.pet.getPlayers.attack"
                          : "client.pet.clear",
                    }),
                    e.push({
                      name:
                        null === o.attackPet
                          ? "Атаковать Питомцев"
                          : "Отменить атаку",
                      event:
                        null === o.attackPet
                          ? "client.pet.getPet.attack"
                          : "client.pet.clear",
                    })),
                    w.includes(o.entity.model) &&
                      e.push({
                        name: o.entity.sit ? "Встать" : "Сесть",
                        event: "client.pet.sit",
                      }),
                    f.includes(o.entity.model) &&
                      e.push({
                        name: o.entity.sleep ? "Встать" : "Лечь",
                        event: "client.pet.sleep",
                      }),
                    (e = [
                      ...e,
                      { name: "Принести мяч", event: "client.pet.getBall" },
                      {
                        name: "Обнюхать",
                        event:
                          null === o.toSniff
                            ? "client.pet.getPlayers.sniff"
                            : "client.pet.clear",
                      },
                    ]),
                    S.includes(o.entity.model) &&
                      e.push({
                        name: "Преследовать",
                        event:
                          null === o.toFollow
                            ? "client.pet.getPlayers.follow"
                            : "client.pet.clear",
                      }),
                    e.push({ name: "Накормить", event: "client.pet.setEat" }),
                    mp.gui.emmit(
                      `window.events.callEvent("cef.pet.menu", '${JSON.stringify(
                        e
                      )}')`
                    );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/petSystem",
                    "updateMenu",
                    e.toString()
                  );
                }
              };
            mp.events.add("client.pet.setEat", async () => {
              try {
                if (!o.entity || !mp.peds.exists(o.entity)) return;
                mp.events.callRemote("server.pet.setEat"),
                  mp.discord.update(
                    "Кормит питомца",
                    `на RedAge под ID ${a.g.localplayer.remoteId}`
                  );
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "world/petSystem",
                  "updateMenu",
                  e.toString()
                );
              }
            }),
              mp.events.add("client.pet.getPlayers.attack", () => {
                o.entity && mp.peds.exists(o.entity) && T("client.pet.attack");
              }),
              mp.events.add("client.pet.getPlayers.sniff", () => {
                o.entity && mp.peds.exists(o.entity) && T("client.pet.sniff");
              }),
              mp.events.add("client.pet.getPlayers.follow", () => {
                o.entity &&
                  mp.peds.exists(o.entity) &&
                  T("client.pet.toFollow");
              });
            const b = (e) => {
                try {
                  return !(
                    !e ||
                    !mp.players.exists(e) ||
                    !e.handle ||
                    e == a.g.localplayer ||
                    e.AGM ||
                    e.InDeath ||
                    e.INVISIBLE ||
                    e.getHealth() < 1 ||
                    e.isInAnyVehicle(!1)
                  );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/petSystem",
                    "updateMenu",
                    e.toString()
                  );
                }
                return !1;
              },
              T = (e) => {
                try {
                  const t = a.g.localplayer.position;
                  let o = [];
                  mp.players.forEachInStreamRange((e) => {
                    if (b(e)) {
                      let i = e.position,
                        n = mp.game.system.vdist(i.x, i.y, i.z, t.x, t.y, t.z);
                      o.push({
                        name: a.g.getName(e),
                        dist: n,
                        pId: e.remoteId,
                      });
                    }
                  }),
                    o.sort(function (e, t) {
                      return e.dist > t.dist ? 1 : e.dist < t.dist ? -1 : 0;
                    }),
                    (o = o.splice(0, 9)),
                    o.push({ name: "Назад", isEnd: !0 }),
                    mp.gui.emmit(
                      `window.events.callEvent("cef.pet.player", '${JSON.stringify(
                        o
                      )}', '${e}')`
                    );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/petSystem",
                    "getPlayers",
                    e.toString()
                  );
                }
              };
            mp.events.add("client.pet.getPet.attack", () => {
              o.entity && mp.peds.exists(o.entity) && D("client.pet.attackPet");
            }),
              mp.events.add("client.pet.attackPet", (e) => {
                try {
                  if (!o.entity || !mp.peds.exists(o.entity)) return;
                  const t = mp.peds.atRemoteId(e);
                  if (!t) return;
                  if (o.entity.isInCombat(t.handle)) return;
                  if (t.vehicle) return;
                  const i = o.entity.getCoords(!0);
                  if (
                    mp.game.gameplay.getDistanceBetweenCoords(
                      i.x,
                      i.y,
                      i.z,
                      a.g.localplayer.position.x,
                      a.g.localplayer.position.y,
                      a.g.localplayer.position.z,
                      !0
                    ) >= 35
                  )
                    return void mp.events.call(
                      "notify",
                      4,
                      9,
                      "Подойдите ближе к питомцу, чтобы отдавать ему команды.",
                      3e3
                    );
                  (o.entity.freeze = !1),
                    (o.attack = null),
                    (o.attackPet = t),
                    (o.followType = 0),
                    M();
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/petSystem",
                    "attack",
                    e.toString()
                  );
                }
              });
            const C = (e) => {
                try {
                  return !!(
                    e &&
                    mp.peds.exists(e) &&
                    e.handle &&
                    e != o.entity &&
                    e.getVariable("isPet")
                  );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/petSystem",
                    "updateMenu",
                    e.toString()
                  );
                }
                return !1;
              },
              D = (e) => {
                try {
                  const t = a.g.localplayer.position;
                  let o = [];
                  mp.peds.forEachInStreamRange((e) => {
                    if (C(e)) {
                      let a = e.position,
                        i = mp.game.system.vdist(a.x, a.y, a.z, t.x, t.y, t.z);
                      o.push({
                        name: e.getVariable("petName"),
                        dist: i,
                        pId: e.remoteId,
                      });
                    }
                  }),
                    o.sort(function (e, t) {
                      return e.dist > t.dist ? 1 : e.dist < t.dist ? -1 : 0;
                    }),
                    (o = o.splice(0, 9)),
                    o.push({ name: "Назад", isEnd: !0 }),
                    mp.gui.emmit(
                      `window.events.callEvent("cef.pet.player", '${JSON.stringify(
                        o
                      )}', '${e}')`
                    );
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/petSystem",
                    "getPeds",
                    e.toString()
                  );
                }
              };
            mp.events.add("client.pet.setInVehicle", () => {
              try {
                if (!o.entity || !mp.peds.exists(o.entity)) return;
                if (!a.g.localplayer.vehicle) return;
                mp.discord.update(
                  "Катается с питомцем",
                  `на RedAge под ID ${a.g.localplayer.remoteId}`
                ),
                  u();
                const t = a.g.localplayer.vehicle;
                for (var e = 0; e < t.getMaxNumberOfPassengers(); e++)
                  if (t.isSeatFree(e))
                    return void o.entity.taskEnterVehicle(
                      t.handle,
                      15,
                      e,
                      1,
                      1,
                      0
                    );
                mp.events.call(
                  "notify",
                  4,
                  9,
                  "Вы ушли слишком далеко от своего питомца. Он ждёт вас там, где вы последний раз его видели.",
                  7e3
                ),
                  (o.entity.freeze = !0),
                  d(o.entity),
                  (o.entity.sit = !0),
                  h(o.entity, o.entity.sit, !1),
                  M();
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "world/petSystem",
                  "setInVehicle",
                  e.toString()
                );
              }
            });
            let P = !1;
            mp.events.add("client.petshop.open", async () => {
              try {
                if (a.g.menuCheck()) return;
                a.g.menuOpen(),
                  (P = !0),
                  mp.gui.emmit('window.router.setView("BusinessNewPetShop");'),
                  mp.discord.update(
                    "Присматривает себе питомца",
                    `на RedAge под ID ${a.g.localplayer.remoteId}`
                  );
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "shop/newshop/index",
                  "client.shop.open",
                  e.toString()
                );
              }
            }),
              mp.events.add("client.petshop.buy", (e) => {
                mp.events.callRemote("server.petshop.buy", e);
              }),
              mp.events.add("client.petshop.close", () => {
                P &&
                  (a.g.menuClose(),
                  mp.gui.emmit("window.router.setHud();"),
                  (P = !1));
              }),
              mp.events.add("client.pet.follow", () => {
                try {
                  if (!o.entity || !mp.peds.exists(o.entity)) return;
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "shop/newshop/index",
                    "client.shop.open",
                    e.toString()
                  );
                }
              });
          },
          8879: (e, t, a) => {
            mp.events.add("entityStreamIn", (e) => {
              try {
                e &&
                  ("player" === e.type && mp.players.exists(e)
                    ? (e.setLodDist(a.g.getLodDist(a.g.DistancePlayer)),
                      mp.events.call("pPlayerStreamIn", e),
                      mp.events.call("playerStreamIn", e))
                    : "vehicle" === e.type && mp.vehicles.exists(e)
                    ? (e.setLodDist(a.g.getLodDist(a.g.DistanceVehicle)),
                      mp.events.call("vehicleStreamIn", e))
                    : "ped" === e.type && mp.peds.exists(e)
                    ? (e.setLodDist(a.g.getLodDist(a.g.DistancePlayer)),
                      mp.events.call("pedStreamIn", e))
                    : "object" === e.type &&
                      mp.objects.exists(e) &&
                      mp.events.call("objectStreamIn", e));
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "world/stream",
                  "entityStreamIn",
                  e.toString()
                );
              }
            }),
              mp.events.add("entityStreamOut", (e) => {
                try {
                  e &&
                    ("player" === e.type && mp.players.exists(e)
                      ? (mp.events.call("allStreamOut", e),
                        mp.events.call("playerStreamOut", e))
                      : "vehicle" === e.type && mp.vehicles.exists(e)
                      ? (mp.events.call("allStreamOut", e),
                        mp.events.call("vehicleStreamOut", e))
                      : "ped" === e.type && mp.peds.exists(e)
                      ? mp.events.call("pedStreamOut", e)
                      : "object" === e.type &&
                        mp.objects.exists(e) &&
                        mp.events.call("objectStreamOut", e));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/stream",
                    "entityStreamOut",
                    e.toString()
                  );
                }
              }),
              (a.g.objectsItemsStreamed = new Set()),
              (mp.objects.forEachInStreamRangeItems = (e) => {
                const t = [...a.g.objectsItemsStreamed.values()];
                for (let o = 0; o < t.length; o++) {
                  const i = t[o];
                  if (mp.objects.exists(i))
                    try {
                      e(i);
                    } catch (e) {}
                  else a.g.objectsItemsStreamed.delete(i);
                }
              }),
              mp.events.add("playerReady", () => {
                try {
                  let e;
                  mp.objects.forEach((t) => {
                    t.hasVariable("furniture")
                      ? ((t.notifyStreaming = !0), i(t))
                      : (e = t.getVariable("DropData")) &&
                        ((t.notifyStreaming = !0), o(t, e));
                  });
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/stream",
                    "playerReady",
                    e.toString()
                  );
                }
              }),
              mp.events.addDataHandler("DropData", (e, t) => {
                e &&
                  mp.objects.exists(e) &&
                  ((e.notifyStreaming = !0), o(e, t));
              });
            const o = (e, t) => {
              try {
                e &&
                  ((e.dropData = JSON.parse(t)),
                  e.handle && (e.setCollision(!1, !1), n(e)));
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "world/stream",
                  "addObjectDropData",
                  e.toString()
                );
              }
            };
            mp.events.addDataHandler("furniture", (e) => {
              e && mp.objects.exists(e) && ((e.notifyStreaming = !0), i(e));
            });
            const i = (e) => {
                try {
                  e && ((e.furniture = !0), n(e));
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/stream",
                    "addObjectFurnitureData",
                    e.toString()
                  );
                }
              },
              n = (e) => {
                try {
                  e &&
                    e.handle &&
                    !a.g.objectsItemsStreamed.has(e) &&
                    a.g.objectsItemsStreamed.add(e);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/stream",
                    "addObjectData",
                    e.toString()
                  );
                }
              };
            mp.events.add("objectStreamIn", (e) => {
              e &&
                mp.objects.exists(e) &&
                (e.furniture
                  ? n(e)
                  : e.dropData && (e.setCollision(!1, !1), n(e)));
            }),
              mp.events.add("objectStreamOut", (e) => {
                try {
                  ((e) => {
                    try {
                      e &&
                        mp.objects.exists(e) &&
                        a.g.objectsItemsStreamed.has(e) &&
                        a.g.objectsItemsStreamed.delete(e);
                    } catch (e) {
                      mp.events.callRemote(
                        "client_trycatch",
                        "world/stream",
                        "addObjectData",
                        e.toString()
                      );
                    }
                  })(e);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/stream",
                    "objectStreamOut",
                    e.toString()
                  );
                }
              });
          },
          6880: () => {
            mp.events.add("setWorldLights", function (e) {
              try {
                mp.game.graphics.resetLightsState();
                for (let t = 0; t <= 16; t++)
                  6 != t && 7 != t && mp.game.graphics.setLightsState(t, e);
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "world/sync",
                  "setWorldLights",
                  e.toString()
                );
              }
            }),
              mp.events.add("setDoorLocked", function (e, t, a, o, i, n) {
                try {
                  mp.game.object.doorControl(e, t, a, o, i, 0, 0, n);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "world/sync",
                    "setDoorLocked",
                    e.toString()
                  );
                }
              });
          },
        },
        t = {};
      function a(o) {
        var i = t[o];
        if (void 0 !== i) return i.exports;
        var n = (t[o] = { exports: {} });
        return e[o](n, n.exports, a), n.exports;
      }
      return (
        (a.n = (e) => {
          var t = e && e.__esModule ? () => e.default : () => e;
          return a.d(t, { a: t }), t;
        }),
        (a.d = (e, t) => {
          for (var o in t)
            a.o(t, o) &&
              !a.o(e, o) &&
              Object.defineProperty(e, o, { enumerable: !0, get: t[o] });
        }),
        (a.g = (function () {
          if ("object" == typeof globalThis) return globalThis;
          try {
            return this || new Function("return this")();
          } catch (e) {
            if ("object" == typeof window) return window;
          }
        })()),
        (a.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t)),
        (a.r = (e) => {
          "undefined" != typeof Symbol &&
            Symbol.toStringTag &&
            Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }),
            Object.defineProperty(e, "__esModule", { value: !0 });
        }),
        (() => {
          (a.g.soundApi = {}),
            (a.g.chatActive = !1),
            (a.g.loggedin = !1),
            (a.g.localplayer = mp.players.local),
            a.g.localplayer.freezePosition(!1),
            (a.g.RAYCASTING_FLAGS = {
              map: 1,
              vehicles: 2,
              players: 4,
              players2: 8,
              objects: 16,
              vegetation: 256,
            }),
            (a.g.Natives = {}),
            (Natives.ADD_TEXT_ENTRY = (e, t) =>
              mp.game.invoke("0x32CA01C3", e, t)),
            (Natives.CLEAR_PED_SECONDARY_TASK = (e) =>
              mp.game.invoke("0x176CECF6F920D707", e)),
            (Natives.ADD_BLIP_FOR_ENTITY = (e) =>
              mp.game.invoke("0x5CDE92C702A8FCE7", e)),
            (Natives.REMOVE_BLIP = (e) =>
              mp.game.invoke("0x86A652570E5F25DD", e)),
            (Natives.SET_BLIP_CATEGORY = (e, t) =>
              mp.game.invoke("0x234CDD44D996FD9A", e, t)),
            (Natives.SHOW_HEADING_INDICATOR_ON_BLIP = (e, t) =>
              mp.game.invoke("0x5FBCA48327B914DF", e, t)),
            (Natives.SET_BLIP_COLOUR = (e, t) =>
              mp.game.invoke("0x03D7FB09E75D6B7E", e, t)),
            (Natives.SET_BLIP_AS_FRIENDLY = (e, t) =>
              mp.game.invoke("0x6F6F290102C02AB4", e, t)),
            (Natives.SET_BLIP_SPRITE = (e, t) =>
              mp.game.invoke("0xDF735600A4696DAF", e, t)),
            (Natives.SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT = (
              e
            ) => mp.game.invoke("0xB98236CAAECEF897", e)),
            (Natives.GET_NUMBER_OF_ACTIVE_BLIPS = () =>
              mp.game.invoke("0x9A3FF3DE163034E8")),
            (Natives.IS_WAYPOINT_ACTIVE = () =>
              mp.game.invoke("0x1DD1F58F493F1DA5")),
            (Natives._DELETE_WAYPOINT = () =>
              mp.game.invoke("0xD8E694757BCEA8E9")),
            (Natives.GET_WAYPOINT_BLIP_ENUM_ID = () =>
              mp.game.invoke("0x186E5D252FA50E7D")),
            (Natives.GET_FIRST_BLIP_INFO_ID = (e) =>
              mp.game.invoke("0x1BEDE233E6CD2A1F", e)),
            (Natives.GET_NEXT_BLIP_INFO_ID = (e) =>
              mp.game.invoke("0x14F96AA50D6FBEA7", e)),
            (Natives.DOES_BLIP_EXIST = (e) =>
              mp.game.invoke("0xA6DB27D19ECBB7DA", e)),
            (Natives.GET_BLIP_INFO_ID_TYPE = (e) =>
              mp.game.invoke("0xBE9B0959FFD0779B", e)),
            (Natives.GET_BLIP_SPRITE = (e) =>
              mp.game.invoke("0x1FC877464A04FC4F", e)),
            (Natives.ANIMPOSTFX_STOP_ALL = () =>
              mp.game.invoke("0xB4EDDC19532BFB85")),
            (Natives.GET_SOUND_ID = () => mp.game.invoke("0x430386FE9BF80B45")),
            (Natives.GET_SOUND_ID = () => mp.game.invoke("0x430386FE9BF80B45")),
            (Natives.DOES_ENTITY_EXIST = (e) =>
              mp.game.invoke("0x7239B21A38F536BA", e)),
            (Natives.SET_ENTITY_LOD_DIST = (e, t) =>
              mp.game.invoke("0x5927F96A78577363", e, t)),
            (Natives.ACTIVATE_PHYSICS = (e) =>
              mp.game.invoke("0x710311ADF0E20730", e)),
            (Natives.SET_DAMPING = (e, t, a) =>
              mp.game.invoke("0xEEA3B200A6FEB65B", e, t, a)),
            (Natives.SET_ENTITY_VELOCITY = (e, t, a, o) =>
              mp.game.invoke("0x1C99BB7B6E96D16F", e, t, a, o)),
            (Natives.SET_ENTITY_INVINCIBLE = (e, t) =>
              mp.game.invoke("0x3882114BDE571AD4", e, t)),
            (Natives.SET_ENTITY_PROOFS = (e, t, a, o, i, n, s, r, l) =>
              mp.game.invoke("0xFAEE099C6F890BB8", e, t, a, o, i, n, s, r, l)),
            (Natives.ATTACH_ENTITY_TO_ENTITY = (
              e,
              t,
              a,
              o,
              i,
              n,
              s,
              r,
              l,
              m,
              c,
              p,
              g,
              _,
              d
            ) =>
              mp.game.invoke(
                "0x6B9BBD38AB0796DF",
                e,
                t,
                a,
                o,
                i,
                n,
                s,
                r,
                l,
                m,
                c,
                p,
                g,
                _,
                d
              )),
            (Natives.FREEZE_ENTITY_POSITION = (e, t) =>
              mp.game.invoke("0x428CA6DBD1094446", e, t)),
            (Natives.GET_CLOCK_HOURS = () =>
              mp.game.invoke("0x25223CA6B4D20B7F")),
            (Natives.GET_INTERIOR_FROM_ENTITY = (e) =>
              mp.game.invoke("0x2107BA504071A6BB", e)),
            (Natives.SET_TV_CHANNEL_PLAYLIST = (e, t, a) =>
              mp.game.invoke("0xF7B38B8305F1FE8B", e, t, a)),
            (Natives.SET_SCRIPT_GFX_DRAW_ORDER = (e) =>
              mp.game.invoke("0x61BB1D9B3A95D802", e)),
            (Natives.SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU = (e) =>
              mp.game.invoke("0xC6372ECD45D73BCD", e)),
            (Natives._DRAW_INTERACTIVE_SPRITE = (
              e,
              t,
              a,
              o,
              i,
              n,
              s,
              r,
              l,
              m,
              c
            ) =>
              mp.game.invoke(
                "0x2BC54A8188768488",
                e,
                t,
                a,
                o,
                i,
                n,
                s,
                r,
                l,
                m,
                c
              )),
            (Natives.REMOVE_PARTICLE_FX_FROM_ENTITY = (e) =>
              mp.game.invoke("0xB8FEAEEBCC127425", e)),
            (Natives.IS_RADAR_HIDDEN = () =>
              mp.game.invoke("0x157F93B036700462")),
            (Natives.HIDE_HUD_AND_RADAR_THIS_FRAME = () =>
              mp.game.invoke("0x719FF505F097FD20")),
            (Natives.HIDE_MINIMAP_EXTERIOR_MAP_THIS_FRAME = () =>
              mp.game.invoke("0x5FBAE526203990C9")),
            (Natives._PLAY_AMBIENT_SPEECH1 = (e, t, a) =>
              mp.game.invoke("0x8E04FEDD28D42462", e, t, a)),
            (Natives.SET_TIMECYCLE_MODIFIER = (e) =>
              mp.game.invoke("0x2C933ABF17A1DF41", e)),
            (Natives.SET_TIMECYCLE_MODIFIER_STRENGTH = (e) =>
              mp.game.invoke("0x82E7FFCD5B2326B3", e)),
            (Natives.CLEAR_TIMECYCLE_MODIFIER = () =>
              mp.game.invoke("0x0F07E7745A236711")),
            (Natives.CLEAR_PED_SECONDARY_TASK = (e) =>
              mp.game.invoke("0x176CECF6F920D707", e)),
            (Natives.IS_VEHICLE_ATTACHED_TO_TRAILER = (e) =>
              mp.game.invoke("0xE7CF3C4F9F489F0C", e)),
            (Natives.IS_ENTITY_ATTACHED_TO_ANY_VEHICLE = (e) =>
              mp.game.invoke("0x26AA915AD89BFB4B", e)),
            (Natives.GET_VEHICLE_TRAILER_VEHICLE = (e, t) =>
              mp.game.invoke("0x1CDD6BADC297830D", e, t)),
            (Natives.DETACH_VEHICLE_FROM_TRAILER = (e) =>
              mp.game.invoke("0x90532EDF0D2BDD86", e)),
            (Natives.ATTACH_VEHICLE_TO_TRAILER = (e, t, a) =>
              mp.game.invoke("0x3C7D42D58F770B54", e, t, a)),
            (Natives.GET_FRAME_COUNT = () =>
              mp.game.invoke("0xFC8202EFC642E6F2")),
            (Natives.GET_GAME_TIMER = () =>
              mp.game.invoke("0x9CD27B0045628463")),
            (Natives.SET_TRAIN_SPEED = (e, t) =>
              mp.game.invoke("0xAA0BC91BE0B796E3", e, t)),
            (Natives.SET_TRAIN_CRUISE_SPEED = (e, t) =>
              mp.game.invoke("0x16469284DB8C62B5", e, t)),
            (Natives.DELETE_ALL_TRAINS = () =>
              mp.game.invoke("0x736A718577F39C7D")),
            (Natives.SET_MISSION_TRAIN_COORDS = (e, t, a, o) =>
              mp.game.invoke("0x591CA673AA6AB736", e, t, a, o)),
            (Natives.SWITCH_TRAIN_TRACK = (e, t) =>
              mp.game.invoke("0xFD813BB7DB977F20", e, t)),
            (Natives.SET_ENTITY_AS_MISSION_ENTITY = (e, t, a) =>
              mp.game.invoke("0xAD738C3085FE7E11", e, t, a)),
            (Natives.SET_ENTITY_QUATERNION = (e, t, a, o, i) =>
              mp.game.invoke("0x77B21BE7AC540F07", e, t, a, o, i)),
            (Natives.GET_PED_STEALTH_MOVEMENT = (e) =>
              mp.game.invoke("0x7C2AC9CA66575FBF", e)),
            (Natives.GET_ENTITY_COORDS = (e, t) =>
              mp.game.invokeVector3("0x3FEF770D40960D5A", e, t)),
            (Natives.FREEZE_ENTITY_POSITION = (e, t) =>
              mp.game.invoke("0x428CA6DBD1094446", e, t)),
            (Natives.DELETE_ENTITY = (e) =>
              mp.game.invoke("0xAE3CBE5BF394C9C9", e)),
            (Natives.SET_ENTITY_COORDS_NO_OFFSET = (e, t, a, o, i, n, s) =>
              mp.game.invoke("0x239A3351AC1DA385", e, t, a, o, i, n, s)),
            (Natives.DELETE_OBJECT = (e) =>
              mp.game.invoke("0x539E0AE3E6634B9F", e)),
            (Natives.DELETE_ENTITY = (e) =>
              mp.game.invoke("0xAE3CBE5BF394C9C9", e)),
            (Natives.SET_PED_NEVER_LEAVES_GROUP = (e, t) =>
              mp.game.invoke("0x3DBFC55D5C9BB447", e, t)),
            (Natives.SET_PED_AS_GROUP_MEMBER = (e, t) =>
              mp.game.invoke("0x9F3480FE65DB31B5", e, t)),
            (Natives.GET_PLAYER_GROUP = (e) =>
              mp.game.invoke("0x0D127585F77030AF", e)),
            (Natives._GET_NUM_HAIR_COLORS = () =>
              mp.game.invoke("0xE5C0CF872C2AD150")),
            (Natives._GET_PED_HAIR_RGB_COLOR = (e, t, a, o) =>
              mp.game.invoke("0x4852FC386E2E1BB5", e, t, a, o)),
            (Natives._GET_NUM_MAKEUP_COLORS = () =>
              mp.game.invoke("0xD1F7CA1535D22818")),
            (Natives._GET_PED_MAKEUP_RGB_COLOR = (e, t, a, o) =>
              mp.game.invoke("0x013E5CFC38CD5387", e, t, a, o)),
            (Natives.TASK_GO_TO_ENTITY = (e, t, a, o, i, n, s) =>
              mp.game.invoke("0x6A071245EB0D1882", e, t, a, o, i, n, s)),
            (Natives.GET_VEHICLE_NUMBER_PLATE_TEXT = (e) =>
              mp.game.invokeString("0x7CE1CCB9B293020E", e)),
            (Natives.GET_MOD_TEXT_LABEL = (e, t, a) =>
              mp.game.invokeString("0x8935624F8C5592CC", e, t, a)),
            (Natives.IS_ENTITY_AN_OBJECT = (e) =>
              mp.game.invoke("0x8D68C8FD0FACA94E", e)),
            (Natives.GET_ENTITY_MODEL = (e) =>
              mp.game.invoke("0x9F47B058362C84B5", e)),
            (Natives.GET_ENTITY_ROTATION = (e, t) =>
              mp.game.invokeVector3("0xAFBD61CC738D9EB9", e, t)),
            (Natives.GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS = (e, t, a, o) =>
              mp.game.invokeVector3("0x2274BC1C4885E333", e, t, a, o)),
            (Natives.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS = (e, t, a, o) =>
              mp.game.invokeVector3("0x1899F328B0E12848", e, t, a, o)),
            (Natives.ReplaceHudColourWithRgba = (e, t, a, o, i) =>
              mp.game.invoke("0xF314CF4F0211894E", e, t, a, o, i)),
            (a.g.renderName = {
              render: "cRender",
              "1s": "t.1s",
              "2s": "t.2s",
              "2.5ms": "t.2.5ms",
              "5s": "t.5s",
              "10s": "t.10s",
              "50ms": "t.50ms",
              "100ms": "t.100ms",
              "125ms": "t.125ms",
              "150ms": "t.150ms",
              "250ms": "t.250ms",
              "200ms": "t.200ms",
              "350ms": "t.350ms",
              "500ms": "t.500ms",
              time: "t.time",
              sound: "t.sound",
              soundRot: "t.soundRot",
            }),
            (a.g.wait = (e) => new Promise((t) => setTimeout(t, e))),
            (a.g.passports = []),
            (a.g.friends = []),
            (a.g.binderFunctions = []),
            (a.g.pAdmin = 0),
            a(3031),
            a(8620),
            a(6794),
            a(7068),
            a(6975),
            a(311),
            a(4608),
            a(4945),
            a(7065),
            a(664),
            a(3659),
            a(7923),
            a(2830),
            a(3611),
            a(8154),
            a(231),
            a(8776),
            a(8243),
            a(2472),
            a(7185),
            a(584),
            a(9001),
            a(8077),
            a(3863),
            a(6804),
            a(4528),
            a(2014),
            a(6496),
            a(3698),
            a(9667),
            a(5753),
            a(8172),
            a(8075),
            a(846),
            a(3380),
            a(5971),
            a(9691),
            a(4735),
            a(3601),
            a(303),
            a(5754),
            a(8496),
            a(9958),
            a(6545),
            a(2154),
            a(1040),
            a(310),
            a(9389),
            a(4207),
            a(4865),
            a(5198),
            a(2725),
            a(3848),
            a(1494),
            a(1130),
            a(8717),
            a(1827),
            a(4859),
            a(1693),
            a(1991),
            a(2003),
            a(2196),
            a(2369),
            a(4509),
            a(1264),
            a(2186),
            a(3038),
            a(3174),
            a(8498),
            a(9174),
            a(7625),
            a(4687),
            a(7077),
            a(9728),
            a(89),
            a(4959),
            a(1258),
            a(686),
            a(6165),
            a(4925),
            a(7773),
            a(7482),
            a(3880),
            a(1031),
            a(6444),
            a(7335),
            a(7715),
            a(1043),
            a(1089),
            a(5998),
            a(6540),
            a(705),
            a(6857),
            a(7161),
            a(8099),
            a(3959),
            a(8715),
            a(3808),
            a(6880),
            a(2708),
            a(8879),
            a(6175),
            a(2220),
            a(1725),
            a(9339),
            a(2986),
            a(9358),
            a(7521),
            a(4217),
            a(8127),
            a(3469),
            a(5203),
            a(7413),
            a(4059),
            a(1239),
            a(1203),
            a(2931),
            a(1818),
            a(6210),
            a(3785),
            a(7992),
            a(9684),
            a(861),
            mp.events.add("setFriendList", function (e, t) {
              try {
                e && (a.g.friends = []);
                for (let e in t) a.g.friends[e] = t[e];
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "index",
                  "setFriendList",
                  e.toString()
                );
              }
            }),
            mp.events.add("setFriend", function (e, t) {
              try {
                a.g.friends[e] = t;
              } catch (e) {
                mp.events.callRemote(
                  "client_trycatch",
                  "index",
                  "setFriend",
                  e.toString()
                );
              }
            }),
            (a.g.spectating = !1),
            (a.g.sptarget = null);
          var e = null;
          mp.events.add("petinhouse", (t, a, o, i, n, s) => {
            try {
              switch ((null != e && (e.destroy(), (e = null)), t)) {
                case "Husky":
                  t = 1318032802;
                  break;
                case "Poodle":
                  t = 1125994524;
                  break;
                case "Pug":
                  t = 1832265812;
                  break;
                case "Retriever":
                  t = 882848737;
                  break;
                case "Rottweiler":
                  t = 2506301981;
                  break;
                case "Shepherd":
                  t = 1126154828;
                  break;
                case "Westy":
                  t = 2910340283;
                  break;
                case "Cat":
                  t = 1462895032;
                  break;
                case "Rabbit":
                  t = 3753204865;
              }
              e = mp.peds.new(t, new mp.Vector3(a, o, i), n, s);
            } catch (e) {
              mp.events.callRemote(
                "client_trycatch",
                "index",
                "petinhouse",
                e.toString()
              );
            }
          }),
            mp.events.add("render", () => {
              try {
                if (!a.g.loggedin) return;
                mp.game.controls.disableControlAction(0, 48, !0),
                  mp.game.controls.disableControlAction(2, 45, !0),
                  mp.game.controls.disableControlAction(1, 243, !0);
              } catch (e) {
                if (new Date().getTime() - a.g.trycatchtime.index < 6e4) return;
                (a.g.trycatchtime.index = new Date().getTime()),
                  mp.events.callRemote(
                    "client_trycatch",
                    "index",
                    "render",
                    e.toString()
                  );
              }
            });
          const t = {
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#39;",
            "/": "&#x2F;",
            "`": "&#x60;",
            "=": "&#x3D;",
          };
          (a.g.escapeHtml = (e) =>
            String(e).replace(/[&<>"'`=\/]/g, function (e) {
              return t[e];
            })),
            (a.g.loadModel = (e) =>
              new Promise(async (t, o) => {
                try {
                  if (
                    ("string" == typeof e && (e = mp.game.joaat(e)),
                    mp.game.streaming.hasModelLoaded(e))
                  )
                    return t(!0);
                  mp.game.streaming.requestModel(e);
                  let o = 0;
                  for (; !mp.game.streaming.hasModelLoaded(e); ) {
                    if (o > 5e3) return t(!1);
                    o++, await a.g.wait(0);
                  }
                  return t(!0);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "events/airdrop",
                    "loadModel",
                    e.toString()
                  ),
                    t(!1);
                }
              })),
            (a.g.isAttached = (e) =>
              new Promise(async (t, o) => {
                try {
                  if (e && 0 !== e.handle && e.isAttached()) return t(!0);
                  let o = 0;
                  for (; !e || 0 !== !e.handle || !e.isAttached(); ) {
                    if (o > 500) return t(!1);
                    o++, await a.g.wait(10);
                  }
                  return t(!0);
                } catch (e) {
                  mp.events.callRemote(
                    "client_trycatch",
                    "events/airdrop",
                    "isAttached",
                    e.toString()
                  ),
                    t(!1);
                }
              })),
            mp.events.add("setTraffic", (e) => {
              mp.game.streaming.setPedPopulationBudget(e);
            }),
            mp.events.add("cleartraffic", () => {
              const e = a.g.localplayer.position;
              mp.game.gameplay.clearArea(e.x, e.y, e.z, 1e4, !0, !1, !0, !1),
                mp.game.gameplay.clearAreaOfPeds(e.x, e.y, e.z, 1e4, 1);
            });
          let o = 0;
          mp.keys.bind(a.g.Keys.VK_INSERT, !0, function () {
            if (new Date().getTime() - o < 3e4) return;
            let e = !0;
            a.g.userBinder.forEach((t) => {
              parseInt(a.g.Keys.VK_INSERT) !== parseInt(t.keyCode) || (e = !1);
            }),
              !0 === e &&
                ((o = new Date().getTime()), mp.events.callRemote("keyinsert"));
          });
          let i = !1,
            n = [];
          mp.events.add("advertisement", (e, t) => {
            i
              ? mp.gui.emmit(`window.inAdvertisement('${e}', '${t}')`)
              : n.push(`window.inAdvertisement('${e}', '${t}')`);
          }),
            mp.events.add("ready", function () {
              (i = !0),
                n.forEach((e) => {
                  mp.gui.emmit(e);
                });
            }),
            rpc.register("rpc.getPosition", () => {
              const e = a.g.localplayer.position;
              return JSON.stringify(e);
            }),
            mp.events.add("hud.info", (e, t, a, o) => {
              mp.gui.emmit(
                `window.missionComplite ('${e}', '${t}', '${a}', '${o}');`
              ),
                mp.events.call(
                  "sounds.playInterface",
                  "cloud/sound/missionComplite.ogg",
                  0.005
                );
            }),
            mp.events.add("check.stream", () => {
              let e = 0;
              mp.players.forEachInStreamRange(() => {
                e++;
              }),
                mp.gui.chat.push("player stream - " + e),
                (e = 0),
                mp.vehicles.forEachInStreamRange(() => {
                  e++;
                }),
                mp.gui.chat.push("vehicles stream - " + e),
                (e = 0),
                mp.objects.forEachInStreamRange(() => {
                  e++;
                }),
                mp.gui.chat.push("objects stream - " + e),
                (e = 0),
                mp.objects.forEachInStreamRange(() => {
                  e++;
                }),
                mp.gui.chat.push("objects stream - " + e);
            });
        })(),
        {}
      );
    })();
  });
}
