{

const lang_de = {
    "window_login": {
        "registerUpperCase": "Registrieren",
        "loginUpperCase": "Login",
        "passwordsecurity": "Passwortsicherheit",
        "YourPasswordMustMeetAtLeastThreeOfTheseConditions": "Dein Passwort muss mindestends drei dieser Bedingungen erfuellen",
        "anUppercase": "einen Grossbuchstaben",
        "aLowercase": "einen Kleinbuchstaben",
        "aNumber": "eine Zahl",
        "aSpecialCharacter": "eine Sonderzeichen",
        "ANDmin8CharsLong": "UND mind. 8 Zeichen lang sein",
        "repeatPassword": "Passwort wiederholen",
        "yourPasswordIsConsistent": "Dein Passwort stimmt ueberein",
        "yourPasswordIsInconsistent": "Dein Passwort stimmt nicht ueberein",
        "yourPasswoPrivacyPolicy": "Ich akzeptiere die Datenschutzerklaerung",
        "privacyPolicy": "Datenschutzerklaerung",
        "patchnotes": "Patchnotes",
        "successUpperCase": "Erfolg",
        "overview": "Uebersicht",
        "email": "Email",
        "password": "Passwort",
        "username": "Benutzername",
        "completeFieldsCorrect": "Bitte fuelle alle Felder korrekt aus!",
        "registerSurveyQuestion": "Eine letzte Sache: Wir wuerden gerne erfahren, wie du den Weg zu uns gefunden hast.",
        "youtube": "YouTube",
        "userForUser": "User werben User",
        "miscellaneous": "Sonstiges",
        "pleaseChoose": "Bitte auswaehlen"
    },

    "window_settings": {
        "1": "Spiel",
        "2": "Grafik",
        "3": "Audio",
        "4": "Account",
        "einstellungen": "Spieleinstellungen",
        "old_pw": "Altes Passwort",
        "new_pw": "Neues Passwort"
    },

    "window_gasstation": {
        "gasstation": "Tankstelle",
        "tankup": "Volltanken",
        "liter": "Liter",
        "tank": "Tanken",
        "buycanister": "Kanister kaufen",
        "buysnack": "Snack kaufen"
    },

    "account": {
        "wrongPW": "~r~Falsches Passwort!",
        "Bonus": " Vielen Dank für deinen Support!",
        "Bonus1": "+ 20.000 $ (Bankkonto)",
        "Bonus2": "+ 50 Lagerplatz im Inventar",
        "Bonus2_1": "+ 1 Fahrzeugslot",
        "Bonus3": "+ 1 Bonusfahrzeug (Abholbar bei HayesAutos)",
        "changedPW": "~g~Du hast dein Passwort erfolgreich geändert!",
        "changedEMail": "~g~Du hast deine E-Mail Adresse erfolgreich geändert!"
    },

    "items": {
        "inventory": "Inventar",
        "group": "Gruppe",
        "color": "Farbauswahl",
        "seccolor": "Nebenfarbe",
        "primcolor": "Hauptfarbe",
        "house": "Haus",
        "object": "Objekte",
        "removeItem": "{1} hat {2} x {3} weggeworfen!",
        "no_money": "Du hast nicht genug Geld! Kosten:",
        "no_mats": "Du hast nicht genug Metallteile! Kosten:",
        "take_illegal": "Deine illegalen Gegenstände wurden entfernt!",
        "inventory_full": "Dein Inventar ist zu voll, daher hast du nicht alle Items erhalten!",
        "inventory_too_full": "Dein Inventar ist zu voll!",
        "buy": "Kaufen",
        "rent": "CarFlex (Mieten)",
        "HayesAutos": "HayesAutos",
        "barber": "Friseur",
        "storage": "Lager",
        "carshop": "Fahrzeugladen",
        "save": "Speichern",
        "item.0": "Bargeld",
        "desc.0": "Dein Bargeld was du mit dir trägst",
        "legal.0": "1",
        "weight.0": "0.00025",
        "item.1": "Haus",
        "desc.1": "Dein Haus",
        "legal.1": "1",
        "weight.1": "0",
        "item.2": "Haftbombe",
        "desc.2": "Eine Bombe aus 680g Nitroglycerin und Cellulosenitrat",
        "legal.2": "0",
        "weight.2": "4",
        "item.3": "Aceton (ml)",
        "desc.3": "Aceton ist eine farblose Flüssigkeit und findet Verwendung als polares, aprotisches Lösungsmittel und als Ausgangsstoff für viele Synthesen der organischen Chemie",
        "legal.3": "0",
        "weight.3": "0.5",
        "item.4": "Benzol (ml)",
        "desc.4": "Benzol ist ein flüssiger organischer Kohlenwasserstoff mit der Summenformel C6H6",
        "legal.4": "0",
        "weight.4": "0.5",
        "item.5": "40%tiges Methylamin (ml)",
        "desc.5": "Methylamin ist das einfachste organische Amin und enthält eine primäre Aminogruppe. Es kommt als 40%ige wässrige Lösung und als druckverflüssigtes Gas in den Handel",
        "legal.5": "0",
        "weight.5": "0.5",
        "item.6": "Phenylaceton (ml)",
        "desc.6": "Phenylaceton ist eine farblose bis schwach gelbe Flüssigkeit mit einem starken, charakteristischen Geruch, die in der chemischen und pharmazeutischen Industrie Verwendung findet. Wird aus 10(ml) Aceton und aus 10(ml) Benzol hergestellt",
        "legal.6": "0",
        "weight.6": "0.5",
        "item.7": "Methamphetamin (g)",
        "desc.7": "Methamphetamin gehört zur Substanzklasse der Amphetamine. Es wird aus 10(ml) Phenylaceton und aus 10(ml) 40%tiges Methylamin hergestellt",
        "legal.7": "0",
        "weight.7": "1",
        "item.8": "Schokoriegel",
        "desc.8": "Ein leckerer Schokoriegel der dir das Wasser im Mund zerfließen lässt",
        "legal.8": "1",
        "weight.8": "0.5",
        "food.8": "15",
        "item.9": "Beschlagnahmte Gegenstände",
        "desc.9": "Illegale Gegenstände die von Straftätern abgenommen wurden",
        "legal.9": "1",
        "weight.9": "0.5",
        "item.10": "Metallteile",
        "item.10_1": "Metallteil",
        "desc.10": "Verschiedene Metallbauteile um Waffen, Munition und Rüstung herzustellen",
        "legal.10": "0",
        "weight.10": "1",
        "item.11": "EC-Karte",
        "desc.11": "Dies ist deine Bankkarte womit du an ATM's dein Geld verwalten kannst",
        "legal.11": "1",
        "weight.11": "0",
        "item.12": "Treibstoffkanister",
        "desc.12": "Ein 5l Treibstoffkanister",
        "legal.12": "1",
        "weight.12": "8",
        "item.13": "Reparaturkit",
        "desc.13": "Mit diesem Reparaturkit kannst du dein Auto von außen reparieren",
        "legal.13": "1",
        "weight.13": "8",
        "item.14": "Spitzhacke",
        "desc.14": "Mit einer Spitzhacke kannst du in Minen Gestein aus der Wand schlagen. Dieses Werkzeug kann abbrechen.",
        "legal.14": "1",
        "weight.14": "5",
        "item.15": "Presslufthammer",
        "desc.15": "Dieser Presslufthammer mit motorgetriebenen Kompressor wurde von der Regierung auf Grund der hohen CO2 Emissionen ab dem 01.01.2022 verboten! Bereits erworbene Presslufthammer können eine umweltbewusste Alternative eingetauscht werden!",
        "legal.15": "1",
        "weight.15": "10",
        "item.16": "Eisenerz",
        "desc.16": "Eisenerz ist ein Gemenge aus natürlich vorkommenden chemischen Verbindungen des Eisens und nicht- oder kaum eisenhaltigem Gestein.",
        "legal.16": "1",
        "weight.16": "1",
        "item.17": "Golderz",
        "desc.17": "Golderz ist ein Gemenge aus natürlich vorkommenden chemischen Verbindungen des Goldes und nicht- oder kaum eisenhaltigem Gestein.",
        "legal.17": "1",
        "weight.17": "4",
        "item.18": "Kaliumnitrat",
        "desc.18": "Kaliumnitrat bildet farblose Kristalle, die sich in Wasser unter starker Abkühlung lösen. Es ist der Hauptbestandteil von Schwarzpulver.",
        "legal.18": "1",
        "weight.18": "0.5",
        "item.19": "MediKit",
        "desc.19": "Mit MediKits können Sanitäter einen Spieler wiederbeleben oder bei Nutzung erhöht sich das Leben stark.",
        "legal.19": "1",
        "weight.19": "1",
        "heal.19": "100",
        "item.20": "Gangmedaille",
        "desc.20": "Mit Gangmedaillen ist es möglich Erweiterungen für Gruppen freizuschalten!",
        "legal.20": "1",
        "weight.20": "0",
        "item.21": "Schwarzpulver",
        "desc.21": "Schwarzpulver wird zusammen mit Metallteilen zur Herstellung von Haftbomben benötigt!",
        "legal.21": "0",
        "weight.21": "1",
        "item.22": "Hanf-Steckling",
        "desc.22": "Abgeschnittener Teil einer Mutterpflanze um ohne den Keimprozess eine neue Hanfpflanze zu züchten",
        "legal.22": "0",
        "weight.22": "0.5",
        "item.23": "Hanf",
        "desc.23": "Die Blüte der Hanfpflanze. Wird aufgrund der berauschenden und schmerzstillenden Wirkung geraucht.",
        "legal.23": "0",
        "weight.23": "1",
        "item.24": "Angelrute",
        "desc.24": "Die Angelrute hat die Aufgabe, den Haken mit Köder gut zu positionieren und den Anhieb sicher zu setzen. Sie kann brechen, falls ein zu großer Fisch angebissen hat.",
        "legal.24": "1",
        "weight.24": "1",
        "item.25": "Angelhaken",
        "desc.25": "Er dient zur Befestigung des Angelköders sowie dazu, einen gefangenen Fisch an der Schnur zu halten. Er reißt manchmal ab.",
        "legal.25": "1",
        "weight.25": "0.2",
        "item.26": "Fischernetz",
        "desc.26": "Ein Fischernetz ist ein engmaschiges, netzförmiges textiles Flächengebilde, das zum Fischfang genutzt wird.",
        "legal.26": "1",
        "weight.26": "1",
        "item.27": "Holzkiste",
        "desc.27": "Eine verzierte Holzkiste, die alle möglichen Gegenstände beinhalten kann.",
        "legal.27": "1",
        "weight.27": "10",
        "item.28": "Forelle",
        "desc.28": "Eine frisch gefangene Forelle, eignet sich perfekt um diese beim Fischhändler zu verkaufen.",
        "legal.28": "1",
        "weight.28": "0.5",
        "item.29": "Munition A",
        "desc.29": "Munition A wird für Handfeuerwaffen (zB: Pistol, Revolver) benötigt",
        "legal.29": "1",
        "weight.29": "0.1",
        "item.30": "Munition B",
        "desc.30": "Munition B wird für leichte Maschinengewehre (zB: SMG, MiniSMG) benötigt",
        "legal.30": "1",
        "weight.30": "0.1",
        "item.31": "Munition C",
        "desc.31": "Munition C wird für Maschinengewehre (zB: MG, CombatMG) benötigt",
        "legal.31": "1",
        "weight.31": "0.1",
        "item.32": "Munition D",
        "desc.32": "Munition D wird für schwere Maschinengewehre (zB: CarbineRifle, CompactRifle) benötigt",
        "legal.32": "1",
        "weight.32": "0.1",
        "item.33": "Munition E",
        "desc.33": "Munition E wird für Präzisionswaffen (zB: SniperRifle, HeavySniper) benötigt",
        "legal.33": "1",
        "weight.33": "0.1",
        "item.34": "Munition F",
        "desc.34": "Munition F wird für Schrotflinten (zB: PumpShotgun, AssaultShotgun) benötigt",
        "legal.34": "1",
        "weight.34": "0.1",
        "item.35": "Muschel",
        "desc.35": "Muscheln ( ugs. Mupfel ) können beim Öffnen Perlen beinhalten",
        "legal.35": "1",
        "weight.35": "0.5",
        "item.36": "Krabbe",
        "desc.36": "Eine frisch gefangene Krabbe, die sich aufgrund ihres harten Panzers nicht zum Verzehr eignet. ",
        "legal.36": "1",
        "weight.36": "0.5",
        "item.37": "Kürbisse",
        "desc.37": "Kürbisse können geöffnet werden! [Ablaufdatum: 07.11.2021]",
        "legal.37": "1",
        "weight.37": "0",
        "item.38": "Rucksack",
        "desc.38": "Ein Rucksack erweitert dein Inventar um 150. Sollte dein Rucksack ablaufen, so gehen keine Items verloren! \n Ablaufdatum: #1#",
        "legal.38": "1",
        "weight.38": "0",
        "item.39": "Credits",
        "desc.39": "Im Bonusshop kannst du mit Credits einige sehr hilfreiche Inhalte freischalten! Aufladen kannst du diese unter http://shop.vio-v.com",
        "legal.39": "1",
        "weight.39": "0",
        "item.40": "Brechstange",
        "desc.40": "Eine Brechstange wird zum Aufbrechen von Türen benötigt",
        "legal.40": "0",
        "weight.40": "8",
        "item.41": "Chips",
        "desc.41": "Der Casino Chip ist die Währung im Casino und wird zum Spielen als Einsatz benötigt",
        "legal.41": "1",
        "weight.41": "0.0025",
        "item.42": "Perle",
        "desc.42": "Eine Perle ist ein fester Fremdkörper aus Perlmutt, der in bestimmten perlbildenden Muscheln heranwächst. Perlen werden sehr gerne vom Exporthändler entgegengenommen",
        "legal.42": "1",
        "weight.42": "0.25",
        "item.43": "Kartoffel",
        "desc.43": "Kartoffeln sind der Ertrag einer erfolgreichen Ernte des Farmer Jobs. Den Farmer Job findet ihr beim blauen F in Paleto Bay",
        "legal.43": "1",
        "weight.43": "0.5",
        "food.43": "35",
        "item.44": "Zwiebel",
        "desc.44": "Zwiebeln sind der Ertrag einer erfolgreichen Ernte des Farmer Jobs. Den Farmer Job findet ihr beim blauen F in Paleto Bay",
        "legal.44": "1",
        "weight.44": "0.4",
        "food.44": "25",
        "item.45": "Karotte",
        "desc.45": "Karotten sind der Ertrag einer erfolgreichen Ernte des Farmer Jobs. Den Farmer Job findet ihr beim blauen F in Paleto Bay",
        "legal.45": "1",
        "weight.45": "0.25",
        "food.45": "10",
        "item.46": "Salat",
        "desc.46": "Kopfsalate sind der Ertrag einer erfolgreichen Ernte des Farmer Jobs. Den Farmer Job findet ihr beim blauen F in Paleto Bay",
        "legal.46": "1",
        "weight.46": "0.35",
        "food.46": "20",
        "item.47": "Gurke",
        "desc.47": "Gurken sind der Ertrag einer erfolgreichen Ernte des Farmer Jobs. Den Farmer Job findet ihr beim blauen F in Paleto Bay",
        "legal.47": "1",
        "weight.47": "0.50",
        "food.47": "30",
        "item.48": "Weizen",
        "desc.48": "Weizen ist der Ertrag einer erfolgreichen Ernte des Farmer Jobs. Den Farmer Job findet ihr beim blauen F in Paleto Bay",
        "legal.48": "1",
        "weight.48": "0.7",
        "item.49": "Kürbis",
        "desc.49": "Kürbisse sind der Ertrag einer erfolgreichen Ernte des Farmer Jobs. Den Farmer Job findet ihr beim blauen F in Paleto Bay",
        "legal.49": "1",
        "weight.49": "1",
        "item.50": "Dünger",
        "desc.50": "Durch die Zufuhr von Dünger wird der Ertrag des Bodens erhöht",
        "legal.50": "1",
        "weight.50": "1",
        "item.51": "Ei",
        "desc.51": "Eier sind der Ertrag von erfolgreicher Tierhaltung des Farmer Jobs. Den Farmer Job findet ihr beim blauen F in Paleto Bay",
        "legal.51": "1",
        "weight.51": "1",
        "food.51": "50",
        "heal.51": "35",
        "item.52": "Fleisch",
        "desc.52": "Fleisch ist der Ertrag von erfolgreicher Tierhaltung des Farmer Jobs. Den Farmer Job findet ihr beim blauen F in Paleto Bay",
        "legal.52": "1",
        "weight.52": "1",
        "food.52": "75",
        "heal.52": "55",
        "item.53": "Milch",
        "desc.53": "Milch ist der Ertrag von erfolgreicher Tierhaltung des Farmer Jobs. Den Farmer Job findet ihr beim blauen F in Paleto Bay",
        "legal.53": "1",
        "weight.53": "1",
        "food.53": "40",
        "heal.53": "60",
        "item.54": "Keycard",
        "desc.54": "Die Keycard wird benötigt, um das Sicherheitssystem des FIB-Towers zu deaktivieren. Gültig bis: #1#!",
        "legal.54": "0",
        "weight.54": "0",
        "item.55": "Schutzweste",
        "desc.55": "Eine Schutzweste verhindert das Durchdringen eines Geschosses, somit hältst du in einem Kampf deutlich mehr aus",
        "legal.55": "1",
        "weight.55": "12",
        "item.56": "Schadsoftware",
        "desc.56": "Mit dieser Schadsoftware kannst du ein Sicherheitssystem zwischen 2 bis 4 Minuten außer Gefecht setzen",
        "legal.56": "0",
        "weight.56": "0.5",
        "item.57": "Adventskalender",
        "desc.57": "Der Adventskalender bietet dir jeden Tag vom ersten bis zum vierundzwanzigsten Dezember ein kleines Geschenk. Lass dich überraschen und genieße die bewundernswerte Zeit.",
        "legal.57": "1",
        "weight.57": "0",
        "item.58": "Weihnachtslos",
        "desc.58": "Das Weihnachtslos kann bei der Weihnachtslotterie am Pier bis zum 30.12.21 eingelöst werden. Es erhöht deine Chance bei der nächsten Ziehung auf einen traumhaften Gewinn!",
        "legal.58": "1",
        "weight.58": "0",
        "item.59": "Feuerwerksbatterie",
        "desc.59": "Die Feuerwerksbatterie ist ein muss für jedes Event! Ob zur partygeladenen Silvesternacht am Würfelpark oder zum legendären Abschluss einer jeden Party. Hiermit erlebt Ihr ein atemberaubendes Feuerwerk, welches Ihr nicht so schnell vergessen werdet!",
        "legal.59": "1",
        "weight.59": "15",
        "item.60": "Bauplan (Combat MG Mk II)",
        "desc.60": "Mit diesem Item kannst du eine Combat MG Mk II in der Werkbank craften.",
        "legal.60": "0",
        "weight.60": "0.5",
        "item.61": "Verwunschene Kugel",
        "desc.61": "Diese verwunschene Kugel enthält legendäre Brillen oder ein paar Credits.",
        "legal.61": "1",
        "weight.61": "0",
        "item.62": "Verwunschene Kugel",
        "desc.62": "Diese verwunschene Kugel enthält legendäre Uhren oder ein paar Credits.",
        "legal.62": "1",
        "weight.62": "0",
    },

    "house": {
        "tooSell": "Mit /buyhouse kannst du dieses Haus kaufen",
        "waypoint": "Standort markiert",
        "spawnchange": "Spawnpunkt angepasst",
        "notForRent": "Das Haus wurde vom Besitzer nicht zum Vermieten freigegeben!",
        "tooCreateGang": "Mit /creategang kannst du hier eine Gang erstellen!",
        "houseOwner": "Du hast bereits ein Haus!",
        "houseRentDetail": "Du wohnst hier zur Miete Kosten: {1} $/Stunde",
        "houseUnRentDetail": "Um den Mietvertrag zu kündigen, ändere deinen Spawnpunkt unter F3",
        "newHouseOwner": "Herzlichen Glueckwunsch! Du bist nun Hausbesitzer!",
        "openHouse": "Haus aufgeschlossen",
        "closeHouse": "Haus abgeschlossen",
        "rentPrice": "Die Miete muss zwischen 0 und 250 $ betragen!",
        "setHouseToRent": "Der Vermietungsmodus deines Hauses ist aktuell deaktivert. Aktivieren diesen um dein Haus vermieten zu können.",
        "setRentPrice": "Die Miete wurde erfolgreich gesetzt",
        "howToRent": "Nutze /rent um dich in dieses Haus einzumieten",
        "setRent": "Nutze /setrent {1} [Preis] um die Miete festzulegen",
        "notIfForRent": "Du kannst die Türe nicht zuschließen, solange du das Haus vermietest!",
        "sellHouseUsage": "Nutze /sellhouse {1} um dein Haus zu verkaufen.",
        "sellHousePrice": "Verkaufspreis:",
        "soldHouseServer": "Du hast dein Haus an den Server verkauft!"
    },

    "vehicle": {
        "respawned": "Fahrzeug respawnt",
        "respawnedVehicles": "Fahrzeuge respawnt",
        "wrongParked": "Da dein Fahrzeug falsch geparkt ist, kannst du es im Moment nicht nutzen!",
        "spawnWrongParkedVehicle": "Nutze /spawnVehicle {1} um dein Fahrzeug wieder zu erstellen!",
        "markWrongParkedVehicle": "Begib dich zur markieren Stelle um dein Fahrzeug umzuparken.",
        "markWrongParkedVehicle1": "Sollte sich dein Fahrzeug nicht an der markierten Stelle befinden nutze den Befehl erneut!",
        "locked": "Fahrzeug abgeschlossen",
        "slot": "Weiterer Fahrzeugslot",
        "locked_failed": "Dieses Fahrzeug hat keine Türen!",
        "seatbelt_on": "Du hast dich angeschnallt",
        "seatbelt_off": "Du hast dich abgeschnallt",
        "warning_on": "Warnblinker aktiviert",
        "warning_off": "Warnblinker deaktiviert",
        "howToPark": "Nutze /park um dein Fahrzeug umzuparken",
        "engineNeedOut": "Der Motor des Fahrzeuges muss ausgeschaltet sein!",
        "noRepairKit": "Du benötigst ein Reparaturkit",
        "noFuelCan": "Du benötigst einen Treibstoffkanister",
        "unlocked": "Fahrzeug aufgeschlossen",
        "waypoint": "Fahrzeug markiert",
        "noVehicle": "Du befindest dich in keinem Fahrzeug",
        "onlySellPrivateVehicle": "Du kannst nur Privatfahrzeuge verkaufen",
        "onlySellOwnVehicle": "Du kannst nur dein eigenes Privatfahrzeug verkaufen",
        "parked": "Fahrzeug geparkt",
        "toofast": "Das Fahrzeug bewegt sich!",
        "targetToFarAway": "Der Handelspartner ist zu weit entfernt!",
        "toofastVehicle": "Das Fahrzeug ist zu schnell!",
        "sellVehicleUsage": "Nutze /sellvehicle {1} um dein Fahrzeug an den Server zu verkaufen.",
        "checkSellVehicleTo": "Handelsanfrage an {1} | Fahrzeug: {2} | Preis: {3} $",
        "checkSellVehicleToAnswer": "Sind alle Angaben richtig? ~g~/sendRequest~w~ um das Angebot zu senden andernfalls ~r~/cancelRequest",
        "sellVehiclePrice": "Server-Verkaufspreis:",
        "sellVehicleToUsage": "Oder nutze /sellto [Name] [Preis] um dein Fahrzeug an einen Spieler zu verkaufen!",
        "stopSendRequest": "Anfrage abgebrochen!",
        "cancleRequest": "Handelsanfrage abgelehnt!",
        "soldVehicleServer": "Du hast dein Fahrzeug an den Server verkauft!",
        "limitReached": "Du hast das Fahrzeuglimit erreicht!",
        "repaired": "Fahrzeug repariert!",
        "notEmty": "Fahrzeug nicht leer!",
        "FuelLow": "Der Tank des Fahrzeugs ist leer! Du kannst das Fahrzeug mit einem Benzinkanister betanken!",
        "pleaseReconnect": "Verbinde dich erneut auf dem Server und parke dein Fahrzeug dann direkt um!",
        "carflex_end_1": "Deine Mietzeit ist fast abgelaufen. Nutze /updaterent um deine",
        "carflex_end_2": "Fahrzeugmietdauer um 10 Minuten zu erhöhen. Kosten : ",
        "carflex_double": "Du hast bereits ein Fahrzeug bei uns angemietet!",
        "carflex_renew": "Der Mietvertrag wurde um 10 Minuten verlängert!!",
        "carflex_renew_time": "Dein Mietvertrag kann noch nicht verlängert werden!",
        "carflex_nocar": "Auf dich ist kein Mietfahrzeug registiert!",
        "carflex_finalend": "Der Mietvertrag ist ausgelaufen!",
        "noKey": "~r~Du hast keinen Schlüssel!",
        "gasFilled": "Fahrzeug betankt!",
        "gasFull": "Fahrzeugtank zu voll!",
        "HayesAutos_noCar": "Du hast kein Fahrzeug, welches bei mir abgegeben wurde.",
        "HayesAutos_Car": "Eines oder mehrere deiner Fahrzeuge stehen bei Hayes Autos. Hole es dort ab.",
        "HayesAutos_CarExploded": "Dein Fahrzeug wurde zerstört und in Hayes Werkstatt geschleppt.",
        "HayesAutos_CarExploded1": "Dort kannst du es gegen eine Gebühr abholen.",
        "HayesAutos_CarBuySpawn": "Fahrzeug repariert. Es befindet sich an der Parkposition"
    },

    "mission": {
        "missionAccomplished": "+ {1} {2}",
        "noGunLicens": "~r~Du besitzt den erforderlichen Waffenschein nicht!",
        "toFootSelectedPositionRentCar": "Begebe dich zu der makierten Position um dir ein Fahrezug zu mieten.",
        "toSelectedPosition": "Bringe das Fahrzeug zur markierten Position.",
        "toSearchPeace": "Dort kannst du es in Ruhe durchsuchen.",
        "howToCraft": "Drücke in deinem Inventar auf eine Chemikalie um diese zu verwenden!",
        "mission_3_dialog_1": "Gestern ist mein Vater bei einer Verfolgungsjagd gestorben",
        "mission_3_dialog_2": "Ich brauche dringend Stoff. Dafür kannst du den alten Journey haben.",
        "mission_3_dialog_3": "Bring mir 130 g Methamphetamin & 20.000 $ und er ist deiner.",
        "mission_3_dialog_4": "Nutze /buyjourney",
        "mission_5_dialog_1": "Das Lager ist voll!",
        "mission_5_dialog_2": "Lieferung abgegeben!",
        "mission_5_dialog_3": "Wir haben aktuell nichts zum verkaufen",
        "craftPhenylacetonMissingRes": "Synthese : 10mL Aceton & 10mL Benzol",
        "vehicleEngineOff": "Der Motor des Journey ist ausgeschaltet!",
        "vehicleNoDriverSeat": "Du befindest dich nicht auf dem Fahrersitz!",
        "craftMethamphetaminMissingRes": "Synthese : 10mL 40%tiges Methylamin und 10mL Phenylaceton",
        "craftSchwarzpulverMissingRes": "Synthese : 10 Kaliumnitrat",
        "craftHaftbombeMissingRes": "Synthese : 15 Schwarzpulver und 5 Metallteile",
        "craftPhenylacetonNoJourney": "Du musst dich in einem Journey oder einem Labor befinden!",
        "mission_5_dialog_4_1": "~b~[Department] ~r~Es wurde ein Truck mit einer Menge illegaler Gegenstände beladen",
        "mission_5_dialog_4_2": "~b~[Department] ~r~Es wurde ein Fahrzeug mit einigen illegalen Gegenstände beladen",
        "mission_5_dialog_4_3": "~b~[Department] ~r~Es wurde ein Fahrzeug mit ein paar illegalen Gegenstände beladen",
        "mission_5_dialog_5_1": "~b~[Department] ~r~Ein Truck mit einer Menge illegaler Gegenstände wurde entladen",
        "mission_5_dialog_5_2": "~b~[Department] ~r~Ein Fahrzeug mit einigen illegalen Gegenstände wurde entladen",
        "mission_5_dialog_5_3": "~b~[Department] ~r~Ein Fahrzeug mit ein paar illegalen Gegenstände wurde entladen",
        "mission_5_dialog_6": "~r~{1} hat ein Fahrzeug mit illegalen Gegenständen beladen",
        "mission_6_dialog_1": "~b~Es wurde ein Asservatentruck beladen!",
        "mission_6_dialog_2": "~r~Es wurde ein Asservatentruck entladen!",
        "errorSubmitQuest": "~r~Du kannst diese Quest nicht abschließen!"
    },

    "faction": {
        "untiedBy": "{1} hat {2} entfesselt",
        "tiedBy": "{1} hat {2} gefesselt",
        "removedIllegalItems": "{1} hat {2} illegale Gegenstände aus dem Fahrzeug entfernt!",
        "searchedIllegalItems": "{1} hat das Fahrzeug nach illegalen Gegenständen durchsucht!",
        "freeFromJail": "Du wurdest freigelassen!",
        "jailTime": "Du befindest dich noch 1 Minute im Knast!",
        "jailTimes": "Du befindest dich noch {1} Minuten im Knast!",
        "lottoNumbers": "Die Lottozahlen : {1} , {2} , {3}",
        "lottoNumbersWinner": "Gewinner : {1} : {2} $",
        "eventSystemActive": "{1} hat das Eventsystem aktiviert!",
        "eventSystemDeactive": "{1} hat das Eventsystem deaktiviert!",
        "newWeather": "Das Wetter wird {1}",
        "thunderstormWarning": "~r~Meteorologen warnen vor einem kommenden starkem Unwetter!",
        "notInGanghouse": "Du musst dich im Ganghaus befinden!",
        "unrestPlayer": "~b~[Department] ~g~{1} hat {2} aus dem Knast entlassen.",
        "lockedPDNPC": "~b~[Department] ~g~{1} hat den PD - NPC deaktiviert.",
        "unlockedPDNPC": "~b~[Department] ~g~Der PD - NPC wurde aktiviert.",
        "someoneIsInBank": "~b~[Department] ~b~Eine unbekannte Person wurde am Tresor einer Bank gesichtet.",
        "bankIsGettingRobbedFromGang": "~b~[Department] ~r~Die {1} wird von {2} ausgeraubt!",
        "yourGroupRobsABank": "~r~Deine Gang raubt die {1} aus!",
        "arrestedPlayer": "Du hast ~r~{1}~w~ eingesperrt.",
        "arrestedBy": "~r~Du wurdest von ~b~{1}~w~ eingesperrt.",
        "bankrobFromGangStopped": "~b~[Department] ~g~Die Gang {1} hat den Bank-Raub gestoppt und ist auf der Flucht!",
        "yourGangsBankrobStopped": "~g~Deine Gang hat die Bank verlassen.",
        "Lotto1": "~b~In 15 Minuten findet die Lottoziehung an der Base der Lifeinvader statt!",
        "Lotto2": "~b~Die letzte Chance einen Lottoschein zu kaufen. In 5 Minuten findet die Lottoziehung statt!",
        "LottoPot": "~g~Aktuell im Checkpot : 50.000 $",
        "theGangRobsAShop": "~b~[Department] ~r~Es wurde ein Raub gemeldet!",
        "yourGangRobsThePD": "~r~Deine Gang raubt die Polizei-Station aus!",
        "yourGangRobsTheAmmo": "~r~Deine Gang raubt das Ammunation aus!",
        "theGangRobsTheAmmo": "~b~[Department] ~r~Die Gang {1} raubt das Ammunation aus!",
        "yourGangCaptureGangShop": "~r~Deine Gang nimmt einen Gangshop ein!",
        "theGangCapturesGangShop": "~r~Die Gang {1} nimmt euren Gangshop ein!",
        "theGangRobsThePD": "~b~[Department] ~r~Die Gang {1} raubt die Polizei-Station aus!",
        "theGangStopsTheShopRob": "~b~[Department] ~g~Der Räuber flieht!",
        "yourGangStopsThePoliceRob": "~g~Deine Gang hat mit dem Polizei-Raub aufgehoert und flieht!",
        "yourGangStopsTheAmmoRob": "~g~Deine Gang hat mit dem Ammunation-Raub aufgehoert und flieht!",
        "theGangStopsThePoliceRob": "~b~[Department] ~g~Die Gang {1} hat mit dem Polizei-Raub aufgehoert und flieht!",
        "theGangStopsTheAmmoRob": "~b~[Department] ~g~Die Gang {1} hat mit dem Ammunation-Raub aufgehoert und flieht!",
        "userHasBeenOfflineRemoved": "Der Spieler ist online und wurde entfernt!",
        "userHasBeenOnlineRemoved": "Der Spieler ist offline und wurde entfernt!",
        "userRemoved": "Du wurdest aus deiner Gruppe geworfen!",
        "userIsLeader": "Der Spieler ist Leader!",
        "userNotinTheGroup": "Der Spieler ist nicht in der Gruppe",
        "userHasBeenPromoted": "{1} wurde von {2} auf den Rang {3} befördert!",
        "userHasBeenRelegated": "{1} wurde von {2} auf den Rang {3} degradiert!",
        "userHasHighestRank": "Der Spieler hat bereits den höchsten freigschalteten Rang",
        "userHaslowestRank": "Der Spieler hat bereits den niedrigsten freigschalteten Rang",
        "playerChangedRights": "Du hast die Berechtigung angepasst!",
        "playerChangedRankName": "Du hast die Rangbezeichnung angepasst!",
        "playerChangedRankBonus": "Du hast den Rangbonus angepasst!",
        "noSpecialCharakterRankName": "Die Rangbezeichnung darf keine Sonderzeichen enthalten!",
        "limitRankName": "Die Rangbezeichnung muss zwischen 4 und 15 Zeichen enthalten!",
        "limitRankBonus": "Der Rangbonus muss zwischen 0 und 1000 Dollar liegen!",
        "playerChangedGangName": "Du hast den Gangnamen angepasst!",
        "playerChangedGangColor": "Du hast die Gangfarbe angepasst! (Anpassung wird erst nach einem Serverneustart wirksam !!!)",
        "noSpecialCharakterGangName": "Der Gangname darf keine Sonderzeichen enthalten!",
        "limitGangName": "Der Gangname muss zwischen 4 und 15 Zeichen enthalten!",
        "gangColorUsed": "Diese Gangfarbe wird bereits von einer anderen Gang genutzt!",
        "newGangVehicle": "Deine Gang hat jetzt ein neues Gangfahrzeug! (Nutze /park)",
        "vehicleRemoved": "Fahrzeug {1} wurde entfernt!",
        "gangPromoted": "Eure Gang ist von Level {1} auf {2} gestiegen!",
        "memberLimit": "Memberlimit {1}",
        "vehicleLimit": "Fahrzeuglimit {1}",
        "gangForumAccess": "Eurer Gang wurde ein Forumbereich erstellt, die Erstellung kann bis zu 24 Stunden dauern!",
        "putRobBagOn": "Aktionstasche aufgenommen",
        "putRobBagOff": "Aktionstasche abgelegt",
        "clearPlayerWanteds": "~g~{1} ~w~hat die Akte von ~r~{2} ~w~entfernt!",
        "addPlayerWanteds": "~g~{1} ~w~hat ~r~{2} ~w~ Wanteds gegeben Grund: {3}!",
        "addPlayerToPrison": "~g~{1} ~w~hat ~r~{2} ~w~ eingesperrt!",
        "freeFromWanteds": "~g~{1} hat deine Akte entfernt!",
        "haveToBeInGang": "Dazu musst du in einer Gang sein!",
        "onlyOneGangshop": "Wir haben bereits einen Gangshop!",
        "noBagError": "... und wo willst du die Ware verstauen? Hol dir eine Tasche!",
        "noPermission": "Du bist nicht befugt!",
        "notInGroup": "Du bist nicht in der Gruppe!",
        "leaveGroup": "Du hast die Gruppe verlassen!",
        "playerChangedMsg": "Pinnwand bearbeitet!",
        "needNoBag": "Komme ohne Aktionstasche wieder!",
        "takeIllegal": "Du hast {1} {2} illegale Gegenstaende abgenommen.",
        "foundIllegal": "Du hast bei {1} {2} illegale Gegenstaende gefunden.",
        "noIllegal": "{1} besitzt keine illegale Gegenstaende.",
        "checkKiller": "{1} sucht Spuren warum du gestorben bist.",
        "checkedKiller": "Spurensuche bei {1} abgeschlossen.",
        "noSkin": "Eure Gruppe hat keinen Gruppenskin!",
        "useSkin": "Gruppenskin angenommen!",
        "changedSkin": "Gruppenskin angepasst!",
        "evidenceroomInfo": "Asservatenkammer {1}/{2}",
        "surrenderWeapon": "Das Stellen ist nur ohne angelegte Waffe möglich!",
        "evidenceroomNotFull": "Die Asservatenkammer ist nicht voll genug!",
        "medicHealDone": "~b~{1} hat {2} behandelt!",
        "medicRevive": "~b~{1} hat {2} aufgenommen!",
        "medicToPickup": "~r~{1} ist schwer verletzt!",
        "medicName": "San Andreas Rescue Unit",
        "medicDescription": "Willkommen bei der San Andreas Rescue Unit. Für nur 75$ kannst du dich von einem Arzt behandeln lassen!.",
        "medicInfo": "Wir behandeln nur Personen, welche nicht als gesucht gemeldet sind!",
        "medicHeal": "Arzt aufsuchen",
        "medicNoHeal": "Du benötigst im Moment noch keine ärztliche Hilfe.",
        "respawnedBy": "{1} hat alle Gruppenfahrzeuge respawned.",
        "targetInHouse": "Der Spieler befindet sich in einem Gebäude",
        "sosStart": "~r~{1} hat sofortige Unterstützung angefordert!",
        "sosError": "Unterstützungsanfrage abgebrochen.",
        "sosAlready": "Es existiert bereits eine Unterstützungsanfrage!",
        "wrongPositionUnjail": "Diese Aktion ist nur am Computer im Zellentrakt des L.S.P.D möglich!",
        "targetDead": "Für diese Aktion muss der Spieler am Leben sein!",
        "targetNotInJail": "Der Spieler befindet sich nicht im Gefängnis!",
        "putWeaponAway": "Ich verkaufe nur an Personen ohne Waffe!",
        "howToSaveMoney": "Du musst min. 3 Minuten überleben um das Geld zu behalten!",
        "bombFactory": "~b~Es wurde eine Person in der Umgebung eines Lagers gesichtet!",
        "robFactory": "~r~Eure Fabrik wird ausgeraubt!",
        "captureFactory": "~r~Eure Fabrik wird eingenommen!",
        "lostFactory": "~r~Eure Fabrik wurde eingenommen! Ihr seid nun nicht mehr Besitzer der Fabrik!",
        "capturedFactory": "~g~Ihr habt eine Fabrik erobert! Denkt daran, diese vor Diebstahl und Eroberungen zu verteidigen!",

        "actions": {
            "pedrobs": {
                "shoprob": {
                    "incooldown": "Verkäufer: Ich wurde doch erst vor kurzem ausgeraubt.",
                    "nocops": "Es sind nicht genug Cops online!",
                    "end": "Der Shop-Rob ist vorbei!",
                    "collected": "Du konntest ${1} sammeln.",
                    "start": "Shop-Rob gestartet!\nZiele weiter auf den NPC,\num das Geld zu bekommen."
                },
                "policerob": {
                    "incooldown": "Polizist: Wir haben hier keine Waffen mehr! Alles weg!",
                    "nocops": "Es sind nicht genug Cops online!",
                    "end": "Der Police-Rob ist vorbei!",
                    "collected": "Du konntest ein(e) {1} in die Tasche bekommen.",
                    "start": "Police-Rob gestartet!\nZiele weiter auf den NPC,\num die Waffe zu bekommen."
                },
                "ammorob": {
                    "incooldown": "NPC: Wir haben hier keine Waffen mehr! Alles weg!",
                    "nocops": "Es sind nicht genug Cops online!",
                    "end": "Der Ammunation-Rob ist vorbei!",
                    "collected": "Du konntest ein(e) {1} in die Tasche bekommen.",
                    "start": "Ammunation-Rob gestartet!\nZiele weiter auf den NPC,\num die Waffe zu bekommen."
                },
                "gangseller": {
                    "incooldown": "Hilfe ... Ich habe nichts!",
                    "nogangs": "Es sind nicht genug Gangler online!",
                    "end": "",
                    "collected": "Gangshop eingenommen! Ihr koennt nun einen Matstruck am Gangshop abgeben!",
                    "start": "Gangshop-Capture gestartet!\nZiele weiter auf den NPC,\num den Shop einzunehmen!"
                }
            },
            "bankrob": {
                "end": "Du konntest ${1} sammeln.",
                "player": {
                    "collected": "Gesammelt: ",
                    "seconds": " Sekunden"
                }
            }
        }
    },

    "vehiclemods": {
        "item.0": "Spoiler",
        "item.1": "Front Stoßstange",
        "item.2": "Heck Stoßstange",
        "item.3": "Seitenschweller",
        "item.4": "Auspuff",
        "item.5": "Fahrgestell",
        "item.6": "Kühlergrill",
        "item.7": "Motorhaube",
        "item.8": "Kotflügel",
        "item.9": "Rechter Kotflügel",
        "item.10": "Erweiterungen",
        "item.11": "Motor",
        "item.12": "Bremsen",
        "item.13": "Getriebe",
        "item.14": "Hupe",
        "item.15": "Federung",
        "item.16": "Panzerung",
        "item.18": "Turbolader",
        "item.22": "Xenon Scheinwerfer",
        "item.23": "Vorderräder",
        "item.24": "Hinterräder",
        "item.25": "Nummernschild",
        "item.27": "Innenraum Details",
        "item.28": "Amaturenfigur",
        "item.30": "Instrumente",
        "item.33": "Lenkrad",
        "item.34": "Schaltknüppel",
        "item.35": "Nummerschilddesign",
        "item.38": "Hydrauik",
        "item.48": "Design",
        "item.55": "Scheibentönung",
        "item.62": "Nummernschildfarbe",
        "item.200": "Unterbodenbeleuchtung",
        "item.300": "Lackierung"
    },

    "admin": {
        "chat_muted": "Du kannst keine Nachricht schreiben, du wurdest gemutet!",
        "noAccount": "Es gibt keinen Spieler mit diesem Namen!",
        "noBan": "Der Spieler ist nicht gebannt!",
        "noWarn": "Es gibt keinen Warn mit diesem Namen!",
        "noWarns": "Der Spieler hat keine aktiven Verwarnungen!",
        "noWarnWithID": "Der Spieler hat keinen Warn mit dieser ID!",
        "get_warn": "Du hast von {1} {2} Warnpunkte bekommen | Grund : {3}",
        "del_warn": "Du hast den Warn von {1} mit {2} Warnpunkte entfernt!",
        "del_sanction": "Du hast die Sanktion von {1} entfernt!",
        "del_warn_by": "Admin {1} hat dir einen Warn entfernt!",
        "warn": "Grund: {1} Ablaufdatum: {2} Punkte: {3}",
        "warns_total": "Warnpunkte :",
        "warns_view": "Verwarnungsübersicht: ",
        "set_warn": "Du hast {1} {2} Warnpunkte gegeben | Grund : {3}",
        "set_freeze_true": "Du hast {1} gefreezt",
        "get_freeze_true": "Du wurdest von Admin {1} gefreezt",
        "set_freeze_false": "Du hast {1} entfreezt",
        "get_freeze_false": "Du wurdest von Admin {1} entfreezt",
        "set_mute_true": "Du hast {1} gemutet",
        "get_mute_true": "Du wurdest von Admin {1} gemutet",
        "set_mute_false": "Du hast {1} entmutet",
        "get_mute_false": "Du wurdest von Admin {1} entmutet",
        "vehicle": "Du befindest dich in einem Fahrzeug",
        "novehicle": "Du befindest dich in keinem Fahrzeug",
        "mark": "Du hast einen Marker gesetzt",
        "goto": "Du hast dich zu {1} teleportiert!",
        "goto_target": "Admin {1} hat sich zu dir teleportiert!",
        "gethere": "Du hast {1} zu dir teleportiert!",
        "gethere_target": "Admin {1} hat dich teleportiert!",
        "gotomark": "Du hast dich zu einem Marker teleportiert!",
        "help": "Willkommen bei Vio-V solltest du einen Fehler entdecken, melde diesen einem Admin.",
        "helpCmds": "F1 - FAQ | F2 - Wichtige Orte | F3 - Einstellungen"
    },

    "storage": {
        "error_invalid": "Es konnten einige Items nicht verschoben werden!",
        "trade_failed": "Handel abgebrochen!",
        "trade_too_full_target": "Das Inventar von deinem Handelspartner ist zu voll!",
        "trade_too_full": "Dein Inventar ist zu voll!",
        "trade_done": "Handel abgeschlossen!",
        "trade_request_done": "Handelsanfrage gesendet!",
        "trade_request_vehicle": "Handelsanfrage von {1} | Fahrzeug: {2} (Das Fahrzeug wurde markiert!) | Preis: {3} $",
        "trade_request_vehicle_marked": "Nutze ~g~/buyvehicle~w~ um das Fahrzeug zu kaufen oder ~r~/skipvehicle~w~ um das Angebot abzulehnen!",
        "trade_request_error": "Der Spieler kann aktuell nicht handeln!",
        "trade_request": "Handelsanfrage von {1} | Nutze /atrade",
        "trade_no_space": "Kein freier Slot!",
        "trade_no_storage": "[ERROR] Es konnte kein Storage gefunden werden",
        "payOutMoneyBank": "Auszahlung",
        "medicBonus": "Krankenhausbehandlung",
        "transferTarget": "Du hast von {1} {2} $ erhalten!",
        "transferPlayer": "Du hast {1} {2} $ überwiesen!",
        "transferMin": "Überweisungen werden erst ab 250 $ entgegen genommen!",
        "transferOffline": "Offlineüberweisung aktuell nicht möglich!",
        "transfer": "Überweisung",
        "lotto": "Lottogewinn",
        "payInMoneyBank": "Einzahlung",
        "Bonus": "Bonussystem",
        "payFactionMoneyBank": "PayDay",
        "payFactionBonus": "Bonus",
        "payRent": "Miete",
        "payVehicleTax": "Fahrzeugsteuern",
        "target_istrading": "Der Spieler handelt bereits!",
        "trade_target_notReady": "Der Spieler kann aktuell nicht handeln!",
        "trade_no_request": "Keine Handelsanfrage offen!"
    },

    "guns": {
        "lastDmg": "Du wurdest von einen Spieler verletzt und kannst dich deshalb noch nicht heilen.",
        "WeaponLicenseA": "Kleiner Waffenschein",
        "WeaponLicenseB": "Mittlerer Waffenschein",
        "WeaponLicenseC": "Großer Waffenschein",
        "WeaponLicenseATime": "Kleiner Waffenschein (7 h)",
        "WeaponLicenseBTime": "Mittlerer Waffenschein (30 h)",
        "WeaponLicenseCTime": "Großer Waffenschein (150 h)"
    },

    "window_gang": {
        "select_1": "Gruppe",
        "select_2": "Mitglieder",
        "select_3": "Einstellungen",
        "select_4": "Logs",
        "select_5": "Boosts",
        "einstellungen": "Gruppensystem",
        "getbag": "Aktionstasche",
        "heal": "Heilen",
        "storage": "Lager",
        "shop": "Shop",
        "equip": "Gruppenskin",
        "upgrade_to": "Upgraden auf Level",
        "max_lvl": "Maximales Level erreicht!",
        "gangweapon": "Gangwaffe",
        "member_name": "Spielername",
        "member_rang": "Spielerrang",
        "desc": "Name",
        "vehicles": "Fahrzeuge",
        "sure": "Sicher?",
        "delete": "Entfernen",
        "insert": "Einfuegen",
        "delete_gang": "Gruppe entfernen",
        "updateskin": "Gruppenskin aendern",
        "devare": "Aufloesen",
        "devare_gang": "Gruppe loeschen"
    },

    "wanteds": {
        "NoDmKill": "Mord (DM)",
        "bv": "Befehlsverweigerung",
        "befehlsverweigerung": "Befehlsverweigerung",
        "bei": "Beihilfe",
        "beihilfe": "Beihilfe",
        "belei": "Beleidigung",
        "beleidigung": "Beleidigung",
        "stech": "Bestechungsversuch",
        "bestech": "Bestechungsversuch",
        "bestechung": "Bestechungsversuch",
        "bestechungsversuch": "Bestechungsversuch",
        "droh": "Drohung",
        "drohung": "Drohung",
        "press": "Erpressung",
        "erpressung": "Erpressung",
        "einsatz": "Einsatzbehinderung",
        "behind": "Einsatzbehinderung",
        "einsatzbehinderung": "Einsatzbehinderung",
        "dieb": "Fahrzeugdiebstahl",
        "diebstahl": "Fahrzeugdiebstahl",
        "fahrzeugdiebstahl": "Fahrzeugdiebstahl",
        "rennen": "Illegales Straßenrennen",
        "strassenrennen": "Illegales Straßenrennen",
        "kpv": "Körperverletzung",
        "verletzung": "Körperverletzung",
        "koerperverletzung": "Körperverletzung",
        "owaffe": "Offenes Waffentragen",
        "offenwaffe": "Offenes Waffentragen",
        "sb": "Sachbeschädigung",
        "sach": "Sachbeschädigung",
        "beschaedigung": "Sachbeschädigung",
        "sachbeschädigung": "Sachbeschädigung",
        "tat": "Vortäuschen falscher Tatsachen",
        "tatsachen": "Vortäuschen falscher Tatsachen",
        "vortäuschen": "Vortäuschen falscher Tatsachen",
        "sperr": "Betreten von Sperrzonen",
        "pd": "Betreten von Sperrzonen",
        "sperrzonen": "Betreten von Sperrzonen",
        "konsum": "Drogenkonsum",
        "dkonsum": "Drogenkonsum",
        "anbau": "Drogenabbau/ -anbau",
        "beraub": "Freiheitsberaubung",
        "freiheitsberaubung": "Freiheitsberaubung",
        "flucht": "Flucht vor/aus Kontrolle",
        "kontrolle": "Flucht vor/aus Kontrolle",
        "vkk": "Flucht vor/aus Kontrolle",
        "sraub": "Ladenüberfall",
        "laden": "Ladenüberfall",
        "ladenüberfall": "Ladenüberfall",
        "waffe": "Schusswaffengebrauch",
        "waffengebrauch": "Schusswaffengebrauch",
        "schusswaffengebrauch": "Schusswaffengebrauch",
        "verweig": "Verweigerung der Durchsuchung",
        "durchsuchung": "Verweigerung der Durchsuchung",
        "it": "Illegaler Transport",
        "transport": "Illegaler Transport",
        "mord": "Mord",
        "br": "Bankraub",
        "bank": "Bankraub",
        "geisel": "Geiselnahme",
        "geiselnahme": "Geiselnahme",
        "raub": "Raubüberfall beim PD/Ammu",
        "pdraub": "Raubüberfall beim Police Dept.",
        "ammuraub": "Raubüberfall beim Ammunation",
        "refusal": "Befehlsverweigerung",
        "abetting": "Beihilfe",
        "insult": "Beleidigung",
        "bribery": "Bestechungsversuch",
        "threat": "Drohung",
        "extorsion": "Erpressung",
        "blackmail": "Erpressung",
        "obstruction": "Einsatzbehinderung",
        "theft": "Fahrzeugdiebstahl",
        "race": "Illegales Straßenrennen",
        "injury": "Körperverletzung",
        "opengun": "Offenes Waffentragen",
        "mischief": "Sachbeschädigung",
        "property": "Sachbeschädigung",
        "facts": "Vortäuschen falscher Tatsachen",
        "feigning": "Vortäuschen falscher Tatsachen",
        "restricted": "Betreten von Sperrzonen",
        "zone": "Betreten von Sperrzonen",
        "druguse": "Drogenkonsum",
        "consumption": "Drogenkonsum",
        "plant": "Drogenabbau/ -anbau",
        "harvest": "Drogenabbau/ -anbau",
        "drugp": "Drogenabbau/ -anbau",
        "detention": "Freiheitsberaubung",
        "detent": "Freiheitsberaubung",
        "escape": "Flucht vor/aus Kontrolle",
        "control": "Flucht vor/aus Kontrolle",
        "srob": "Ladenüberfall",
        "shop": "Ladenüberfall",
        "gun": "Schusswaffengebrauch",
        "arms": "Schusswaffengebrauch",
        "trunk": "Verweigerung der Durchsuchung",
        "searching": "Verweigerung der Durchsuchung",
        "truck": "Illegaler Transport",
        "wt": "Illegaler Transport",
        "murder": "Mord",
        "homicide": "Mord",
        "bankrob": "Bankraub",
        "heist": "Bankraub",
        "hostages": "Geiselnahme",
        "hostage": "Geiselnahme",
        "ammurob": "Raubüberfall beim Ammunation",
        "pdrob": "Raubüberfall beim Police Dept.",
        "wantedReduced": "Dein Fahndungslevel hat sich reduziert!"
    },

    "window_quest": {
        "quest_submit": "Quest abschließen",
        "quest_start": "Quest starten",
        "quest_info_1": "Diese Quest kann nur von einem Spieler abgeschlossen werden. Du solltest dir also nicht soviel Zeit lassen!",
        "quest_1": "Bringe mir schnellstmöglich {1}g Methamphetamin, als Belohnung erhälst du {2}$ in bar auf die Hand.",
        "quest_2": "Belade dein Gangfahrzeug mit {1} Metallteilen für {2}$.",
        "quest_info_2": "Bringe die Metallteile zu deinem Ganghaus. Achte darauf, dass dein Fahrzeug weder respawnt noch zerstört wird.",
        "quest_3_name": "Mission Row Police Department",
        "quest_3": "Willkommen im Mission Row Police Department. Vielen Dank, dass du dich dafür entschieden hast, deine krimminelle Vergangenheit hinter dir zu lassen.",
        "quest_info_3": "Dir werden wenn du dich stellst alle illegalen Gegenstände abgenommen!",
        "quest_surrender": "Stellen",
        "quest_4_name": "Eclipse Medical Tower",
        "quest_4": "Willkommen im Eclipse Medical Tower. Für 10.000 $ kannst du dich einer Schönheitsoperation unterziehen.",
        "quest_info_4": "WICHTIG: Es gehen beim Wechsel des Geschlechts alle Kleidungsstücke verloren!",
        "quest_submit_4": "Operieren",
        "quest_5_name": "Peter Millerson",
        "quest_5_1": "Ich habe Informationen, wo eine Gang Ihre illegalen Gegenstände versteckt. Für diesen Tipp möchte ich jedoch 145 $!",
        "quest_5_2": "Ein paar Freunde haben an diesen Orten schon einmal was gefunden. Teilweise sogar einen ganzen Truck! Unter 200 $ bekommst du nichts aus mir raus!",
        "quest_5_3": "Ich kenne ein verlassenes Drogenlabor, dort kannst du aus deinen Chemikalien Drogen herstellen! Falls dich jemand fragen sollte, den Tipp hast du nicht von mir!",
        "quest_info_5": "WICHTIG: Halte dich von den Cops fern, sonst kannst du deine illegalen Gegenstände vergessen!",
        "quest_submit_5": "Tipp annehmen!",
        "quest_6_name": "Humane Labs and Research",
        "quest_6": "Wir die Humane Labs and Research verkaufen MediKits zum Preis von nur 25 $ pro Stück! Eine Lieferung beinhaltet immer 30 MediKits (750 $)",
        "quest_info_6": "Die Lieferung muss beim Central Medical Center entladen werden!",
        "quest_submit_6": "Transport starten!",
        "quest_weedcorn_name": "Ronnys Hanf-Stecklinge",
        "quest_weedcorn": "Hey mein Name ist Ronny, hier auf der Farm ist es so langweilig... Darum verdiene ich mir mit ein paar Hanf-Stecklinge etwas Geld hinzu. Für 5 Hanf-Stecklinge verlange ich {1} $.",
        "quest_info_weedcorn": "WICHTIG: Halte dich von den Cops fern, sonst kannst du deine illegalen Gegenstände vergessen!",
        "quest_submit_weedcorn": "Hanf-Stecklinge kaufen",
        "quest_weedseller_name": "Helmuts Kitchen",
        "quest_weedseller": "Auf dem Land sind alle ganz verrückt nach meinen Keksen. Dafür benötige ich jedoch ein paar spezielle Zutaten. Für ein Beutel Hanf zahle ich {1} $",
        "quest_info_weedseller": "WICHTIG: Beim Verkaufen wird dein gesamtes Hanf für {1} $ verkauft!",
        "quest_submit_weedseller": "Hanf verkaufen",
        "quest_fishshop_name": "Millars Fishery",
        "quest_fishshop": "Seit BSE und der Schweinegrippe ist die Nachfrage nach Fisch massiv gestiegen! Diese Mengen an Fisch können wir unmöglich selbt fischen. Daher kaufen wir Fische für {1} $ pro Stück zu.",
        "quest_info_fishshop": "WICHTIG: Beim Verkaufen werden deine gesamten Fische für {1} $ verkauft!",
        "quest_submit_fishshop": "Fische verkaufen"
    },

    "job": {
        "trash_start_tut": "Fahre zu den markierten Häusern und sammel den Müll (Taste E) auf.",
        "trash_collect_tut": "Werfe den Müllsack (Taste E) in den Müllwagen!",
        "trash_collect_full": "Der Muellwagen ist voll. Fahre zurück zur Deponie um ihn zu entleeren.",
        "trash_wait_for_player": "Bitte habe einen Augenblick Geduld, da es sich um einen Mehrspielerjob handelt!",
        "how_to_quit_job": "Mit /quitjob kannst du den Job beenden!",
        "dailyQuestBonus": "~g~ + $1.000 | Täglicher Bonus",
        "dailyQuestReady": "Täglicher Bonus | Bereit",
        "dailyQuestReadyAt": "Täglicher Bonus | ",
        "wanteds": "Wir beschäftigen keine Flüchtigen!"
    },

    "window_jobbrowser": [
        {
            "jobbrowser": "Jobbrowser",
            "overview": "Navigation",
            "navigation": "Navigation",
            "maxLevelReached": "Maximallevel erreicht",
            "jobs": {
                "logistic": {
                    "jobname": "Logistik",
                    "btn": ["Gabelstapler", "Benson", "Freiberufler"],
                    "desc": "Du bist diese eine Person, die nie an einem Ort bleiben kann. Du musst unterwegs sein und durch ganz San Andreas deine Touren fahren, ob mit dem Roller, dem Van oder dem grossen Tanker. Du lernst alle Strassen und Gaesschen von San Andreas kennen und verdienst so deinen Lebensunterhalt."
                },
                "bus": {
                    "jobname": "Busfahrer",
                    "btn": ["Stadtlinie", "Fernlinie"],
                    "desc": "Ueberall laufen Bewohner von San Andreas von einem Ort zum Anderen. Nachdem die Strassenbahnen leicht zu verpassen sind, gibt es 4 Buslinien. 2 durch Los Santos und 2 durch ganz San Andreas, um es allen anderen zu erleichtern von A nach B zu kommen. Du bist der Transportservice auf den der Staat gewartet hat."
                },
                "pizzadelivery": {
                    "jobname": "Pizza-Lieferant",
                    "btn": ["Praktikant", "Mitarbeiter"],
                    "desc": "Die Leute haben Hunger und können sich eine Pizza bestellen, doch wer liefert sie? Du musst mit deinem Fahrzeug die Pizza frisch und warm an die Kundschaft bringen. Dafür hast du je Level verschiedene Fahrzeuge, also versuch hoch zu kommen. Das Geld bekommst du, wenn du zurück kommst."
                },
                "packagecourier": {
                    "jobname": "Kurier-Dienst",
                    "btn": ["Postbote", "Paket-Zusteller", "Spezial-Pakete"],
                    "desc": "Die Bewohner von Los Santos brauchen ihre morgentliche Post und ihre vom Internet oder per Anruf bestellten Pakete. Damit sie diese bekommen, bist du zuständig. Fahre als Postbote mit dem Fahrrad zu den Häusen und liefer ihre Post. Fahre mit dem Boxville durch die Stadt und liefere die Pakete ab. Spezielle Pakete lieferst du mit dem Burrito, dafür musst du jedoch erst die nötige Erfahrung besitzen."
                },
                "harbor": {
                    "jobname": "Hafenarbeiter",
                    "btn": ["Fischer", "Coming Soon"],
                    "desc": "Lecker ein Fisch. Du bist nun Hafenarbeiter und musst mit einem Schiff auf das Meer und die Fische fangen, damit die Einwohner frischen Fisch bekommen."
                },
                "trash": {
                    "jobname": "Abfallentsorgung",
                    "btn": ["Abfallentsorgung"],
                    "desc": "Wohin mit dem Müll? Mit deinen Kollegen fährst du zu den makierten Häusern und holst den Müll der Einwohner ab. Ihr sorgt für saubere Straßen."
                },
                "taxi": {
                    "jobname": "Taxifahrer",
                    "btn": ["Taxi mieten", "Taxi kaufen"],
                    "desc": "In San Andreas schnell an den richtigen Zielort zu gelangen kann oftmals schwer sein. Gerade, wenn man kein eigenes Auto hat. Daher sind Taxifahrer sehr beliebt unter Pendlern. Setz dich in einer unserer Taxi-Fahrzeuge und warte auf eine Transportanfrage. Begib dich dann an den Standort des Kunden und fahre ihn zu seinem gewünschten Zielort. Bezahlt wirst du durch den Fahrgast. Dieser bezahlt ab Fahrtbeginn den von dir bestimmten Fahrpreis/min."
                },
                "farmer": {
                    "jobname": "Landwirtschaft",
                    "btn": ["Farm beitreten", "Farm erstellen"],
                    "desc": "Du hast Lust auf körperliche Anstrengung? Dann ist der Farmer-Job das richtige fuer dich. Hier lernst du nicht nur das einhalten von Zeiten und das Füttern von Tieren, sondern auch das Handeln mit Gemüse, tierischen Produkten oder Getreide. Baue dir jetzt deine eigene Farm auf  auf und werde einer der erfolgreichsten Bauern auf Vio-V!"
                },
            },
            "overviewtext": "Willkommen im Jobcenter. Hier findest du alle wichtigen Informationen ueber all deine verfuegbaren Berufe.",
            "locked": "Gesperrt",
            "joblevel": "Level",
            "missingExp": "Fehlende Erfahrung",
            "showLocation": "Position anzeigen"
        }
    ],

    "jobs": {
        "pizzadelivery": {
            "start": "Fahre die Pizzen zu den Kunden!",
            "end": "Pizza-Lieferanten Job beendet"
        },
        "packagecourier": {
            "start": "Fahre die Ware zu den Kunden!",
            "end": "Kurier-Dienst Job beendet"
        },
        "harbor": {
            "start": "Fange im angezeigten Gebiet die Fische ein!",
            "end": "Hafenarbeiter Job beendet"
        }
    },

    "antiAFK": {
        "youAreAFK": "Du wurdest AFK gesetzt!",
        "youAreNotAFK": "AFK gestoppt!",
        "AFKIn30Seconds": "Du wirst in 30 Sekunden AFK gesetzt!"
    },

    "window_bank": {
        "bank": "Bank",
        "payin": "Einzahlen",
        "payout": "Auszahlen",
        "cash": "Bar",
        "username": "Spielername",
        "summe": "Summe",
        "uerberweisen": "Überweisen",
        "account": "Konto"
    },
    "window_userpanel": {
        "nav_overview": "Übersicht",
        "nav_skills": "Skills",
        "nav_warnings": "Verwarnungen",
        "playerName": "Spielername",
        "playingTime": "Spielzeit",
        "phoneNumber": "Handynummer",
        "academyGrade": "Academy Note",
        "group": "Gruppe",
        "rang": "Rank",
        "activeSlots": "aktive Fahrzeugslots",
        "passiveSlots": "passive Fahrzeugslots",
        "votingInfo": "soon",
        "bills_licences": "Scheine / Lizenzen",
        "level": "Level",
        "warningsActive": "aktiv",
        "warningsExpired": "abgelaufen",
        "warningsDeleted": "gelöscht",
        "warningPoints": "Punkte",
        "warningsTimeFrom": "vom",
        "warningsTimeTo": "bis",
        "warningsReason": "Grund",
        "activity_info": "Aktivitätspunkte erhältst du für jeden Tag, welchen du in Folge auf unserem Server spielst. Für den ersten PayDay am Tag erhälst du einen Aktivitätspunkt. Die einmalige Belohnung deiner Aktivitätspunkte erhältst du automatisch mit deinem nächsten PayDay.",
        "pros": "Vorteile",
        "cons": "Nachteile"
    },
    "townhall": {
        "WeaponLicenseA": {
            "name": "Waffenschein A",
            "description": "Durch den Kauf des Waffenscheins der Klasse A bekommst du Zugang zu Pistolen, welche im Ammunation erwerblich sind.",
            "icon": "WeaponA.svg",
        },
        "WeaponLicenseB": {
            "name": "Waffenschein B",
            "description": "Durch den Kauf des Waffenscheins der Klasse B bekommst du Zugang zu Maschinenpistolen und Schrotflinten.",
            "icon": "WeaponB.svg",
        },
        "WeaponLicenseC": {
            "name": "Waffenschein C",
            "description": "Durch den Kauf des Waffenscheins der Klasse C bekommst du Zugang zu Sturmgewehren.",
            "icon": "WeaponC.svg",
        },
        "Slot4": {
            "name": "Fahrzeug Slot 4",
            "description": "Durch den Kauf eines vierten Fahrzeugslots bekommst du die Möglichkeit ein weiteres Fahrzeug zu besitzen.",
            "icon": "CarSlot4.svg",
        },
        "Slot5": {
            "name": "Fahrzeug Slot 5",
            "description": "Durch den Kauf eines fünften Fahrzeugslots bekommst du die Möglichkeit ein weiteres Fahrzeug zu besitzen.",
            "icon": "CarSlot5.svg",
        },
        "Slot6": {
            "name": "Fahrzeug Slot 6",
            "description": "Durch den Kauf eines sechsten Fahrzeugslots bekommst du die Möglichkeit ein weiteres Fahrzeug zu besitzen.",
            "icon": "CarSlot6.svg",
        },
        "DrivingSchoolT": {
            "name": "Theorieprüfung",
            "description": "Durch Abgabe dieser Prüfungsgebühr erhälst du einmalig die Möglichkeit an der Theorieprüfung teilzunehmen. Das Bestehen dieser Prüfung ist Vorraussetzung um den praktischen Teil anzutreten.",
            "icon": "tschool.svg",
        },
        "DrivingSchoolP": {
            "name": "Praktische",
            "description": "Durch Abgabe dieser Prüfungsgebühr erhälst du einmalig die Möglichkeit an dem praktischen Teil der Prüfung teilzunehmen. Solltest du diese erfolgreich absolvieren, erhälst du deinen Führerschein.",
            "icon": "dschool.svg",
        },
        "DrivingSchoolR": {
            "name": "Fahrverbot",
            "description": "Hier hast du die Möglichkeit, nach Ablauf deines Fahrverbotes, deinen Führerschein wieder abzuholen.",
            "icon": "dlicence.svg",
        }
    }
}

/* Ersteller: Kai                                                                                 */
/* Datum:     09.12.2019                                                                          */
/* Zweck:     Funktionssammlung für allgemeine Funktionen die ggf. auch häufiger verwendet werden */
/*            Auch ergänzungen / Erweiterungen von Javascript Funktionen gehören hier rein        */

var Utility = class {
    static PadNumber(pNumber, pLength, pCharacter = "0") {
        // Fügt X Zeichen vor einem String ein, bis die Länge erreicht wird
        var s = String(pNumber);

        while (s.length < pLength)
            s = pCharacter + s;

        return s;
    }

    static GetRandomArbitrary(min, max) {
        return Math.random() * (max - min) + min;
    }

    static Round(number, digits) {
        if (digits <= 0) return number;
        let multiplier = Math.pow(10, digits); // 1 bis X stellen
        return (Math.round(number * multiplier) / multiplier);
    }

    static GetTimestamp() {
        let ts = Math.floor(Date.now() / 1000);
        return ts;
    }

    static makeid(length) {
        let result = '';
        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        const charactersLength = characters.length;
        for (let i = 0; i < length; i++) {
            result += characters.charAt(Math.floor(Math.random() * charactersLength));
        }
        return result;
    }

    /**
     * @param {number} originX
     * @param {number} originY
     * @param {number} radiusX
     * @param {number} radiusY
     * @param {number} amountOfPoints
     * @return {{x: number, y:number}[]}
     */
    static getPointsOfEllipse(originX, originY, radiusX, radiusY, amountOfPoints) {
        const points = [];
        for (let i = 1; i <= amountOfPoints; i++) {
            const functionValue = (i / amountOfPoints) * (2 * Math.PI);
            points.push(
                {
                    x: Math.cos(functionValue) * radiusX + originX,
                    y: Math.sin(functionValue) * radiusY + originY
                }
            );
        }
        return points;
    }

    /**
     *
     * @param  {number} rotation
     * @return {number}
     */
    static getRealRotation(rotation) {
        rotation %= 360;
        if (rotation < 0) {
            rotation = 360 + rotation;
        }
        return rotation;
    }

    static calcMeterToVDist2Unit(meter) {
        return mp.game.system.vdist2(
            0,0,0,
            meter,0,0
        );
    }

    /**
     * Normalizes a Vector§
     * @param {Vector3Mp} vector
     * @return {Vector3Mp}
     */
    static getNormalizedVector(vector) {
        const mag = Utility.getVectorMagnitude(vector);
        vector.x = vector.x / mag;
        vector.y = vector.y / mag;
        vector.z = vector.z / mag;
        return vector;
    }

    static getVectorMagnitude(vector) {
        return Math.sqrt(
            vector.x * vector.x + vector.y * vector.y + vector.z * vector.z
        );
    }

    static diffVector(v1, v2) {
        const vector = new mp.Vector3(0,0,0);
        vector.x = v2.x - v1.x;
        vector.y = v2.y - v1.y;
        vector.z = v2.z - v1.z;
        return vector;
    }

    static sumVector(v1, v2) {
        const vector = new mp.Vector3(0,0,0);
        vector.x = v2.x + v1.x;
        vector.y = v2.y + v1.y;
        vector.z = v2.z + v1.z;
        return vector;
    }

    static multiplyVector(v1, number) {
        const vector = new mp.Vector3(0,0,0);
        vector.x = v1.x * number;
        vector.y = v1.y * number;
        vector.z = v1.z * number;
        return vector;
    }

    /**
     * @param {Vector3Mp} v1
     * @param {Vector3Mp} v2
     * @return {Vector3Mp}
     */
    static getCrossProduct(v1, v2) {
        const vector = new mp.Vector3(0, 0, 0);
        vector.x = v1.y * v2.z - v1.z * v2.y;
        vector.y = v1.z * v2.x - v1.x * v2.z;
        vector.z = v1.x * v2.y - v1.y * v2.x;
        return vector;
    }

}


const Base64 = {

    // private property
    _keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",

    // public method for encoding
    encode : function (input) {
        var output = "";
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;

        input = Base64._utf8_encode(input);

        while (i < input.length) {

            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);

            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;

            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            } else if (isNaN(chr3)) {
                enc4 = 64;
            }

            output = output +
                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);
        }
        return output;
    },

    // public method for decoding
    decode : function (input) {
        var output = "";
        var chr1, chr2, chr3;
        var enc1, enc2, enc3, enc4;
        var i = 0;

        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

        while (i < input.length) {

            enc1 = this._keyStr.indexOf(input.charAt(i++));
            enc2 = this._keyStr.indexOf(input.charAt(i++));
            enc3 = this._keyStr.indexOf(input.charAt(i++));
            enc4 = this._keyStr.indexOf(input.charAt(i++));

            chr1 = (enc1 << 2) | (enc2 >> 4);
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
            chr3 = ((enc3 & 3) << 6) | enc4;

            output = output + String.fromCharCode(chr1);

            if (enc3 != 64) {
                output = output + String.fromCharCode(chr2);
            }
            if (enc4 != 64) {
                output = output + String.fromCharCode(chr3);
            }
        }

        output = Base64._utf8_decode(output);

        return output;
    },

    // private method for UTF-8 encoding
    _utf8_encode : function (string) {
        string = string.replace(/\r\n/g,"\n");
        var utftext = "";

        for (var n = 0; n < string.length; n++) {

            var c = string.charCodeAt(n);

            if (c < 128) {
                utftext += String.fromCharCode(c);
            }
            else if((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            }
            else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }
        }
        return utftext;
    },

    // private method for UTF-8 decoding
    _utf8_decode : function (utftext) {
        var string = "";
        var i = 0;
        var c = c1 = c2 = 0;

        while ( i < utftext.length ) {

            c = utftext.charCodeAt(i);

            if (c < 128) {
                string += String.fromCharCode(c);
                i++;
            }
            else if((c > 191) && (c < 224)) {
                c2 = utftext.charCodeAt(i+1);
                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                i += 2;
            }
            else {
                c2 = utftext.charCodeAt(i+1);
                c3 = utftext.charCodeAt(i+2);
                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                i += 3;
            }
        }
        return string;
    }
}

var ServerTriggerKey = "";
var Webwindow = [];
var Marketplace = null;
var WebwindowMeta = [];
var TempArguments = [];
var LastTeleportPosition;
var HouseTable = {};
var LocalCharacterID = -1;
var LocalGroupID = -1;
var LocalPlayerFoodStatus = -1;
var LocalPlayerPhoneNumber = -1
var LocalPlayerLastIncomingHit = 0;
var LoadAntiCheatGroup = -1;
var GangShopBlip = null;
var FactoryBlip = {};
var FactoryBlipPosition = {};
var TempBarricade = null;
var login = false;
var startTime = new Date().getTime();
var canWearHelmet = null;
var temp_obj_1;
var vioObjects = {}
var vioPeds = {}
var AC_NPC_SKIN = {}
var HasOpenRaceInvitation = false;
var voiceChat;
var InitPlayerMoneyHUD = false;
var PlayerMoneyHUD = false;
var RenderBusStop = {};
var Tacho; // Tacho
var InHouse = false;
var InGroupHouse = false;
var Selection; // X Menü
var DrivingSchool = null;
var IsPlayerInFightClub = false;
var FightClubItems = [];
var FightClubSpawnProtection = {};
var FightClubSpectatorCam = null;
var FightClubLastHit = 0;
var PlayerWeaponAmmoInClip = {};
let hudStatus = false;
let LeaveVehicleTimestamp = 0;
const tempVoiceCommands = [];

var SetSkyCameraNoAction = false;
var SetSkyCameraWay = "-";

var IsInHalloweenHouse = false;
var HalloweenHouseWaiting = false;

var MaxTimeUnderwater = 30;

var temp_marker = false;
var temp_blip = false;

var CEF_Master_Link = "Live"; // Live für Liveserver!

// Object welches an einen Spieler Attached ist zB Müllsack
var ObjectAttachedToPlayer = null

// Klassen //
var GangwarScoreboard;
var HQPoliceRadio = {
    set Status(value) {
        voiceChat?.call("setPoliceHqState", value);
        this._Status = value;
        if (LocalGroupID != 3) {
            if (value == 9 || value == 0 || value == 7) { // 0 = SOS, 7 = Abholung, 9 = Nicht einsatzbereit
                RemoveInformationsFromInformationWindowById("PoliceStatus9Warning");
                setTimeout(() => {
                    CreateInformationWindow("PoliceStatus9Warning", 6, `PoliceHQ Status: ${value} <br /> Du kannst keinen Aktionen zugewiesen werden!`, 0);
                }, 100);
            } else {
                RemoveInformationsFromInformationWindowById("PoliceStatus9Warning");
            }
        }
    },
    get Status() {
        return this._Status;
    },
};
var teleportCheck = {};

// Hitmarker //
var timerHitmarker = 0;
var timerHitmarkerVehicle = 0;
var timerHitmarkerKill = 0;
var timerEnterDisable = 0;

// Controls //
var isPlayerOnVacationIsland = false;
var disableAllControls = true;
var disableSprintJump = false;
var disableJumpFight = false;
var isPlayerCuffed = false;
var isPlayerFrozen = false;
var isPlayerTypingInTextChat = false;
var isLocalPlayerInSquad = false;
var isPlayerInDrivingSchool = false;
var isPlayerFishing = false;
var isPlayerCarryingAction = false;
var PlayerTempObjects = {};
var isPlayerOnTuningPlace = false
var hasPlayerSeatbelt = false
var isPlayerInNoDMZone = false;

// Launcher Bridge //
let BridgeWindow;
let BridgeConnectionState = false;

// Better Positions //
let PositionsLocatedPosition;
let PositionsLocatedPositionBlip;

let VioSyncTrailers = {};

// Trucker Job //
let PlayerTruckerJobMission = null;

let CommunicationManager = {
    TriggerServer: function (...args) {
        if (CommunicationManager.g_whitelist.includes(args[0].toString()) == false) {
            if (++this.g_triggersCount > 5) {
                let currentDate = Date.now();
                if ((currentDate - this.g_triggerSwapDate) > 1000) {
                    this.g_triggerSwapDate = currentDate;
                    this.g_triggersCount = 0;
                } else {
                    mp.events.callRemote("AntiCheatCommunicationManager", "trigger", args[0].toString());
                    this.g_triggerSwapDate = currentDate;
                    this.g_triggersCount = 0;
                }
            }
        }
        mp.events.callRemote.apply(null, arguments);
        // VioRageManager.ConsoleLog("info", `Client to Server: ${args[0]}`);
    },
    addSafeServerEvent: function (eventName, callback) {

        mp.events.add(eventName, (...serverArguments) => {
            let sentKey = "";

            if (serverArguments.length >= 1) {
                sentKey = serverArguments[0];

                if (sentKey == ServerTriggerKey || ServerTriggerKey == "") {
                    serverArguments.shift();
                    callback(...serverArguments);
                    // VioRageManager.ConsoleLog("info", `Server to Client Save: ${eventName}`);
                }
            }
        });
    },
    AddServerEvent: function (eventName, callback) {
        mp.events.add(eventName, (...serverArguments) => {
            callback(...serverArguments);
            // VioRageManager.ConsoleLog("info", `Server to Client: ${eventName}`);
        });
    },
    AddWebBrowserEvent: function (eventName, callback, BrowserWindow) {
        mp.events.add(eventName, (...webArguments) => {
            // VioRageManager.ConsoleLog("info", `CEF Called: ${eventName}`);
            if (BrowserWindow) {
                if (AntiCheatCEF(BrowserWindow, eventName)) {
                    callback(...webArguments);
                }else{
                    VioRageManager.ConsoleLog("info", `CEF ERROR: ${webArguments}`);
                }
            } else {
                callback(...webArguments);
            }
        });
    }
}

CommunicationManager.g_triggerSwapDate = Date.now();
CommunicationManager.g_commandSwapDate = Date.now();
CommunicationManager.g_triggersCount = 0;
CommunicationManager.g_commandCount = 0;
CommunicationManager.g_commandCountAntiCheat = 0;
CommunicationManager.g_whitelist = ["OnClientRequestDisableVoiceTo", "OnClientRequestEnableVoiceTo", "onPlayerHitOtherPlayer", "onPlayerHitOtherVehicle", "onClientWeaponFired"];

mp.events.add("playerCommand", (command) => {
    const args = command.split(/[ ]+/);
    const commandName = args[0];
    if (++CommunicationManager.g_commandCount > 3) {
        let currentDate = Date.now();
        if ((currentDate - CommunicationManager.g_commandSwapDate) > 5000) {
            CommunicationManager.g_commandSwapDate = currentDate;
            CommunicationManager.g_commandCount = 0;
        } else {
            CommunicationManager.g_commandCountAntiCheat++;
            CreateNotify("~r~Warnung: Das Spammen von Befehlen ist nicht erwünscht!")
            CommunicationManager.TriggerServer("AntiCheatCommunicationManager", "command", commandName);
        }
    }
});

CommunicationManager.g_chatCount = 0;
CommunicationManager.g_chatSwapDate = Date.now();

mp.events.add("playerChat", (text) => {
    if (++CommunicationManager.g_chatCount > 6) {
        let currentDate = Date.now();
        if ((currentDate - CommunicationManager.g_chatSwapDate) > 3000) {
            CommunicationManager.g_chatSwapDate = currentDate;
            CommunicationManager.g_chatCount = 0;
        } else {
            CommunicationManager.g_chatSwapDate = currentDate;
            CommunicationManager.g_chatCount = 0;
            CommunicationManager.TriggerServer("ClientSentACEvent1", "ANTI_SPAM", "chat");
        }
    }
});


// CommunicationManager.TriggerServer("onClientRequestChangeSetting", 1, "1", "{"1":1}");

let WeatherTable = {
    0: "EXTRASUNNY",
    1: "CLEAR",
    2: "CLOUDS",
    3: "SMOG",
    4: "FOGGY",
    5: "OVERCAST",
    6: "RAIN",
    7: "THUNDER",
    8: "CLEARING",
    9: "NEUTRAL",
    10: "SNOW",
    11: "BLIZZARD",
    12: "SNOWLIGHT",
    13: "XMAS",
    14: "HALLOWEEN"
}
let currentWeather = "";
let oldWeather = "";

function SetWorldWeather() {
    mp.game.gameplay.setWeatherTypeNowPersist(currentWeather);
}

function SetWeather(weather, time) {
    currentWeather = weather;
    if(time === 0) {
        mp.game.gameplay.setWeatherTypeNowPersist(weather);
        oldWeather = currentWeather;
    } else {
        if(oldWeather != currentWeather) {
            let i = 0;
            let interval = setInterval(() => {
                i++;
                if(i < 100) {
                    mp.game.gameplay.setWeatherTypeTransition(mp.game.gameplay.getHashKey(oldWeather), mp.game.gameplay.getHashKey(currentWeather), (i / 100));
                } else {
                    mp.game.gameplay.setWeatherTypeNowPersist(currentWeather);
                    oldWeather = currentWeather;
                    clearInterval(interval);
                }
            }, (time * 10));
        }
        if(weather === 'XMAS') {
            //native.setForceVehicleTrails(true);
            //native.setForcePedFootstepsTracks(true);
        } else {
            //native.setForceVehicleTrails(false);
            //native.setForcePedFootstepsTracks(false);
        }
    }
}

mp.events.add("SetWeather", (wID) => {
    
    if(currentWeather != ""){
        SetWeather(WeatherTable[wID], 30)
    }else{
        SetWeather(WeatherTable[wID], 0)
    }
})

function RemoveInformationsFromInformationWindowByTyp(type) {
    if (Webwindow["Infobox"] != null) {
        Webwindow["Infobox"].call('infoboxtypdelete', type);
    }
}
function RemoveInformationsFromInformationWindowById(id) {
    if (Webwindow["Infobox"] != null) {
        Webwindow["Infobox"].call('infoboxdelete', id);
    }
}

const InfoBoxForceInGameDisplayKeys = ["PoliceStatus9Warning"];
function CreateInformationWindow(name, type, msg, time) {
    type = Number(type);

    if (mp.storage.data.drawQuests == "0" && type == "4") {
        return;
    }

    var tempArgs = {};
    tempArgs['id'] = name;
    tempArgs['typ'] = type;
    tempArgs['msg'] = msg;
    tempArgs['time'] = time;

    if (Webwindow["Infobox"] != null) {
        Webwindow["Infobox"].call('infoboxadd', JSON.stringify(tempArgs));
    } else {
        Webwindow["Infobox"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/infobox/infobox.html", false);
        Webwindow["Infobox"].start('infoboxadd', JSON.stringify(tempArgs));
    }
}

CommunicationManager.AddServerEvent("CreateInformationWindowForClient", (name, type, msg, time) => {
    CreateInformationWindow(name, type, msg, time)
})

CommunicationManager.AddServerEvent("RemoveInformationWindowByTyp", (...args) => {
    RemoveInformationsFromInformationWindowByTyp(args[0]);
})

CommunicationManager.AddServerEvent("SendNotificationToPlayer", (msg, time) => {
    CreateNotify(msg, time);
})

function CreateNotify(msg, time) {
    if (time == null) {
        time = 10;
    }
    let dt = new Date();
    let infobox_typ = 5;

    if (msg.includes("~g~")) {
        infobox_typ = 7;
        msg = msg.replace("~g~", "");
    }
    if (msg.includes("~b~")) {
        infobox_typ = 8;
        msg = msg.replace("~b~", "");
    }
    if (msg.includes("~r~")) {
        infobox_typ = 6;
        msg = msg.replace("~r~", "");
    }
    if (msg.includes("\n")) {
        msg = msg.replace("\n", "<br>");
    }

    CreateInformationWindow("Notify" + dt.getTime(), infobox_typ.toString(), msg, time.toString())
}

class CamAnimation {
    /**
     * constructor
     * @param {string} name
     * @param {number} speed - meters per second (m/s)
     */
    constructor(name, speed) {
        this.name = name;
        this.cams_raw = [];
        this.cams = [];
        this.indexNow = 0;
        this.speed = speed;
        this.resolveTimeout = null;
        this.stopAll = true;
    }

    /**
     * creates an Positionmarker for the camera Animation path
     * @param {mp.Vector3} position
     * @param {mp.Vector3} rotation
     * @param {number} fov
     * @param {number} speed - optional
     * @returns {CamAnimation}
     */
    addMarker(position, rotation, fov) {
        this.cams_raw.push(
            {
                position,
                rotation,
                fov,
            }
        );
        return this;
    }

    /**
     * @private
     */
    intervalTask(index) {
        return new Promise(async (resolve) => {
            if (this.stopAll) {
                resolve(true);
                return;
            }
            this.indexNow = index;

            const lastCamIndex = this.indexNow - 1;

            const {x: x1, y: y1, z: z1} = this.cams[this.indexNow].position;
            const {x: x2, y: y2, z: z2} = this.cams[lastCamIndex].position;

            const dist = mp.game.system.vdist(x1, y1, z1, x2, y2, z2);
            const travelTime = (dist / this.speed) * 1000;

            this.setPlayerToCamPosition(lastCamIndex);
            setTimeout(() => {
                this.setPlayerToCamPosition(this.indexNow);
            }, travelTime / 2);

            this.cams[this.indexNow].cam.setActiveWithInterp(this.cams[lastCamIndex].cam.handle, parseInt(travelTime), 0, 0);

            await setTimeout(() => {
                resolve(true);
            }, travelTime);
        });
    }

    /**
     * @private
     * @param cameraIndex
     */
    setPlayerToCamPosition(cameraIndex) {
        if (this.stopAll) return;
        const camHeightOffset = 50;
        if (login) {
            teleportCheck.freezeTimer(8);
        }
        mp.players.local.position = new mp.Vector3(this.cams[cameraIndex].position.x, this.cams[cameraIndex].position.y, this.cams[cameraIndex].position.z - camHeightOffset);
        LastTeleportPosition = mp.players.local.position;
    }

    /**
     * start
     * resolves Promise when animation is finished
     */
    run() {
        return new Promise(async (resolve) => {
            this.stopAll = false;
            // mp.players.local.freezePosition(true);
            VioRageManager.FreezePosition(mp.players.local, true);
            mp.players.local.setAlpha(255);

            // create mp cameras
            this.cams = this.cams_raw
                .map(obj => {
                    const {position, rotation, fov, speed} = obj;
                    return {
                        cam: mp.cameras.new(`${this.name}_${this.cams.length}`, position, rotation, fov),
                        position,
                        speed,
                    };
                });

            this.cams[0].cam.setActive(true);
            mp.game.cam.renderScriptCams(true, false, 0, true, false);

            for (let i = 1; i < this.cams.length; i++) {
                if (!this.stopAll) {
                    await this.intervalTask(i);
                }
            }
            resolve(true);
        });
    }

    stop() {
        if (this.stopAll) return;
        this.stopAll = true;
        VioRageManager.FreezePosition(mp.players.local, false);
        mp.players.local.setAlpha(255);
        mp.game.cam.renderScriptCams(false, false, 0, true, true);

        // destroy mp cameras
        for (let i = 0; i < this.cams.length; i++) {
            this.cams[i].cam.setActive(false);
            this.cams[i].cam.destroy(true);
        }

        this.cams = [];
    }
}

class CameraAnimationLoop {
    constructor() {
        this.animations = [];
        this.currentAnimation = null;
        this.run = false;
        this.lastAnimationName = "";
    }

    /**
     * addCameraAnimation
     * @param {CamAnimation} camAnimation
     * @returns {CameraAnimationLoop}
     */
    addCameraAnimation(camAnimation) {
        this.animations.push(camAnimation);
        return this;
    }

    /**
     * @private
     */
    async loopTask() {
        if (!this.run) return;
        if (this.animations.length > 1) {
            do {
                this.currentAnimation = this.animations[Math.floor(Math.random() * this.animations.length)];
            } while (this.currentAnimation.name === this.lastAnimationName);
        } else {
            this.currentAnimation = this.animations[0];
        }
        this.lastAnimationName = this.currentAnimation.name;
        await this.currentAnimation.run();
        this.currentAnimation.stop();
        this.loopTask();
    }

    start() {
        this.run = true;
        this.lastAnimationName = "";
        this.loopTask();
    }

    stop() {
        this.run = false;
        this.currentAnimation.stop();
    }
}

var isCayoPericoIsland = null;

function ToggleCayoPericoIsland(new_status) {
    if (isCayoPericoIsland != new_status) {
        isCayoPericoIsland = new_status
        mp.game.invoke("0x9A9D1BA639675CF1", "HeistIsland", isCayoPericoIsland);
        mp.game.invoke("0x5E1460624D194A38", isCayoPericoIsland);
        isPlayerOnVacationIsland = isCayoPericoIsland;
    }
}

CommunicationManager.AddServerEvent("LoadCayoPericoIslandForPlayer", () => {
    ToggleCayoPericoIsland(true);
    isPlayerOnVacationIsland = true;
})

CommunicationManager.AddServerEvent("UnloadCayoPericoIslandForPlayer", () => {
    ToggleCayoPericoIsland(false);
    isPlayerOnVacationIsland = false;
})

class HitObject {
    amount;
    position;
    count = 0;

    constructor(amount, position) {
        this.amount = amount;
        this.position = position;
    }
}

class HitText {
    list = [];

    add(amount, position) {
        this.list.push(new HitObject(amount, position));
    }

    render() {
        this.list.forEach((element) => {

            mp.game.graphics.drawText(element.amount.toString(), [element.position.x, element.position.y, element.position.z + 1.4], {
                font: 2,
                centre: true,
                color: [255, 255, 255, 155 - element.count],
                scale: [0.4, 0.4],
                outline: true
            });
            element.count += 1;
            element.position.z += 0.01;

            if (element.count > 155) {
                var find = Hits.list.findIndex(elemen => elemen == element);

                Hits.list.splice(find, 1);
            }
        });

    }
}

var Hits = new HitText();

mp.events.add("render", () => {
    if (mp.storage.data.hitSettings.dmgmarker == 1) {
        Hits.render();
    }
});

/* Ersteller: Kai                                                                                */
/* Datum:     09.11.2019                                                                         */
/* Zweck:     Wrapper Definitionen für rage.mp Clientside functions um flexibler zu werden       */
/*            e.g. beim auslesen von jeden "SEAT" einzugreifen oder mit deutlich weniger aufwand */
/*            auf einem neuen Multiplayer Mod aufzusetzen                                        */

/*
var VehicleSeatData = {
    "0": "seat_dside_f",
    "1": "seat_pside_f",
    "2": "seat_dside_r",
    "3": "seat_pside_r",
    "4": "seat_dside_r1",
    "5": "seat_pside_r1",
    "6": "seat_dside_r2",
    "7": "seat_pside_r2",
    "8": "seat_dside_r3",
    "9": "seat_pside_r3",
    "10": "seat_dside_r4",
    "11": "seat_pside_r4",
    "12": "seat_dside_r5",
    "13": "seat_pside_r5",
    "14": "seat_dside_r6",
    "15": "seat_pside_r6",
    "16": "seat_dside_r7",
    "17": "seat_pside_r7"
}
*/

const registeredConsoleCommands = {};
var VehicleSeatData = {
    "-1": "seat_dside_f",
    "0": "seat_pside_f",
    "1": "seat_dside_r",
    "2": "seat_pside_r",
    "3": "seat_dside_r1",
    "4": "seat_pside_r1",
    "5": "seat_dside_r2",
    "6": "seat_pside_r2",
    "7": "seat_dside_r3",
    "8": "seat_pside_r3",
    "9": "seat_dside_r4",
    "10": "seat_pside_r4",
    "11": "seat_dside_r5",
    "12": "seat_pside_r5",
    "13": "seat_dside_r6",
    "14": "seat_pside_r6",
    "15": "seat_dside_r7",
    "16": "seat_pside_r7"
}

var VioRageManager = class {

    /**
     * get JOAAT hash
     * @param {string} pName - string to hash
     * @returns {Hash} - Hashvalue e.g. WeaponHash, SkinHash, ...
     */
    static joaat(pName) {
        return mp.game.joaat(pName);
    }

    /**
     * Ersetzt alle aufrufe für mp.peds.new
     * @param {Hash} skin - skin from JOAAT
     * @param {Vector3Mp} pos
     * @param {number} heading - rotaion in degrees
     * @param {number} dim - dimension (-X => 0 & -X || X => X !0)
     * @param {boolean} isstatic - is frozen, can ignore physics
     * @returns {PedMp}
     */
    static CreatePed(skin, pos, heading, dim, isstatic) {
        //let ped = mp.game.ped.createPed(1, skin, pos.x, pos.y, pos.z, rot, true, true);
        let ped = mp.peds.new(skin, pos, heading, dim);
        ped.isStatic = isstatic;
        return ped;
    }

    /**
     * @param {EntityMp} tEntity
     * @param {boolean} status
     */
    static FreezePosition(tEntity, status) {
        tEntity.freezePosition(status);

        /*if (mp.players.local.name == "EYCER") {
            const stack = new Error().stack;
            let caller_name;
            // N.B. stack === "Error\n  at Hello ...\n  at main ... \n...."
            const m = stack.match(/.*?FreezePosition.*?\n(.*?)\n/);
            if (m) {
                caller_name = m[1];
            }

            VioRageManager.ConsoleLog("info", `[FreezeEntity] ${tEntity.type} : ${status ? "TRUE" : "FALSE"} from ${caller_name}`, true);
        }*/
    }

    /* ----------> Vehicle Funktionen Start */

    /**
     * @param {VehicleMp} vTrailer
     * @param {VehicleMp} vTruck
     * @returns {boolean}
     */
    static IsTrailerAttachedToTruck(vTrailer, vTruck) {

        if (vTruck.isAttachedToTrailer() == false) {
            return false;
        }

        const truckHandle = vTruck.handle;
        const outBuffer = [new ArrayBuffer(4)]; // 4 weil int32 4 Bytes hat

        // int ourBuffer wird dann das Handle als uint32 in den arrayBuffer geschrieben
        if (!mp.game.invoke("0x1CDD6BADC297830D", truckHandle, outBuffer)) {
            // wird ausgrführt, wenn man keinen Anhänger angehängt hat
            return false;
        }
        const trailerHandle = new Uint32Array(outBuffer[0])[0];

        if (trailerHandle == vTrailer.handle) {
            return true;
        } else {
            return false;
        }

        // trailerHandle ist dann das Handle von dem gngehängten Anghänger
    }


    /**
     * @param {VehicleMp} vehicle
     * @returns {boolean}
     */
    static IsTrailer(vehicle) {
        let model = vehicle.model;
        if(model == 0xB8081009 || model == 0xA7FF33F5 || model == 0x9E6B14D6 || model == 0xE82AE656 || model == 0x1F3D44B5 || model == 0xC6C3242D || model == 0x806EFBEE ||model == 0xD1ABB666 || model == 0x3CC7F596 || model == 0x153E1B0A || model == 0x174CB172 || model == 0x7BE032C6 || model == 0x6A59902D || model == 0x7CAB34D0 || model == 0xAF62F6B2 || model == 0x967620BE || model == 0xD46F4737 || model == 0x74998082 || model == 0x5993F939 || model == 0x782A236D || model == 0x2A72BEAB || model == 0xCBB2BE0E || model == 0xA1DA3C91 || model == 0x8548036D || model == 0xBE66F5AA){
            return true;
        }else{
            return false;
        }
    }

    /**
     * @param {number} pBone - bone index
     * @returns {number}
     */
    static GetSeatIdByBone(pBone) {
        var seatID = Object.keys(VehicleSeatData).find(key => VehicleSeatData[key] === pBone);
        return Number(seatID);
    }

    /**
     * @param {number} pSeat
     * @returns {string|null}
     */
    static GetSeatBoneById(pSeat) {
        var bone = VehicleSeatData[String(pSeat)];
        return bone;
    }

    /**
     * @param {VehicleMp} pVeh
     * @returns {boolean}
     */
    static VehicleIsEmpty(pVeh) {
        if (VioRageManager.VehicleHasDriver(pVeh) == false && pVeh.getNumberOfPassengers() == 0) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * @param {VehicleMp} pVeh
     * @returns {boolean}
     */
    static VehicleHasDriver(pVeh) {
        return (pVeh.getPedInSeat(this.GetSeatIdByBone("seat_dside_f")) !== undefined
            && pVeh.getPedInSeat(this.GetSeatIdByBone("seat_dside_f")) != 0);
    }

    /**
     * @param {VehicleMp} pVeh
     * @returns {boolean}
     */
    static InsideVehicleSeat(pVeh) {
        if (pVeh.getPedInSeat(-1) == mp.players.local.handle || pVeh.getPedInSeat(0) == mp.players.local.handle || pVeh.getPedInSeat(1) == mp.players.local.handle || pVeh.getPedInSeat(2) == mp.players.local.handle) {
            return true;
        } else {
            return false;
        }
    }

     /**
     * @param {VehicleMp} pVeh
     * @returns {boolean}
     */
    static OutsideTrashVehicleSeat(pVeh) {
        if(pVeh.model == 0x72435A19 || pVeh.model == 0xB527915C){
            if (pVeh.getPedInSeat(1) == mp.players.local.handle || pVeh.getPedInSeat(2) == mp.players.local.handle) {
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    /**
     * @param {PedMp} pPed
     * @param {VehicleMp} pVeh
     * @returns {boolean}
     */
    static PlayerIsDriver(pPed, pVeh) {
        return (pVeh.getPedInSeat(this.GetSeatIdByBone("seat_dside_f")) == pPed);
    }

    /**
     * @param {VehicleMp} pVeh
     * @param {number} pSeat
     * @returns {undefined|Handle}
     */
    static VehicleGetPedInSeat(pVeh, pSeat = "seat_dside_f") {
        // Get Ped, wenn kein Parameter -> Fahrer
        var ped = pVeh.getPedInSeat(this.GetSeatIdByBone(pSeat));

        if (!(ped !== undefined && ped != this.GetSeatIdByBone("seat_dside_f")))
            return undefined;

        return ped;
    }

    /**
     * check of seat in vehicle is free
     * @param {VehicleMp} pVeh - vehicle Object
     * @param {number} pSeat
     * @returns {boolean}
     */
    static VehicleIsSeatFree(pVeh, pSeat) {
        return pVeh.isSeatFree(this.GetSeatIdByBone(pSeat));
    }


    /**
     * check of vehicle has specific bone
     * @param {VehicleMp} pVeh - vehicle Object
     * @param {string} pBone - boneName
     * @returns {boolean}
     */
    static HasVehicleBone(pVeh, pBone) {
        if (pVeh.getBoneIndexByName(pBone) != -1) {
            let pos = pVeh.getWorldPositionOfBone(pVeh.getBoneIndexByName(pBone));
            if (pos.x.toFixed(2) == 0 && pos.y.toFixed(2) == 0 && pos.z.toFixed(2) == 0)
                return false;
            else
                return true;
        } else {
            return false;
        }
    }

    /* <---------- Vehicle Funktionen ENDE */


    /**
     * mp.gui.chat.activate(state)
     * @param {boolean} pState
     */
    static ActivateChat(pState) {
        if (mp.storage.data.showChat != null) {
            if (mp.storage.data.showChat == "0") {
                mp.gui.chat.activate(false);
                mp.gui.chat.show(false);
                mp.gui.call("setStreamerMode", (mp.storage.data.streamerMode == "1" && BridgeConnectionState));
                return;
            }
        }
        mp.gui.chat.activate(pState);
    }

    /**
     * check if player is typing in chat
     * @returns {boolean}
     */
    static IsTypingInTextChat() { // Funktion hinzugefügt da Ragemp keine hatte!
        return isPlayerTypingInTextChat;
    }

    /**
     * set visibility of chat
     * @param {boolean} pState
     */
    static ShowChat(pState) { // Ersetzt alle aufrufe für mp.gui.chat.show(state);
        if (mp.storage.data.showChat != null) {
            if (mp.storage.data.showChat == "0") {
                mp.gui.chat.activate(false);
                mp.gui.chat.show(false);
                mp.gui.call("setStreamerMode", (mp.storage.data.streamerMode == "1" && BridgeConnectionState));
                return;
            }
        }
        mp.gui.chat.show(pState);
    }

    /**
     * sends formatted Message in chat
     * @param {string} pMessage
     */
    static SendChatMessage(pMessage) { // Ersetzt alle aufrufe für mp.gui.chat.push(message);
        var time = "";

        if (mp.storage.data.showChatTime == "1") {
            const d = new Date(Date.now() + (ServerTimestampDifferenz * 1000));
            time = Utility.PadNumber(d.getHours(), 2)
                + ":" + Utility.PadNumber(d.getMinutes(), 2)
                + ":" + Utility.PadNumber(d.getSeconds(), 2) + " | ";
        }

        mp.gui.chat.push(time + pMessage);
        mp.gui.call("setStreamerMode", (mp.storage.data.streamerMode == "1" && BridgeConnectionState));

        if (mp.storage.data.streamerMode == "1") {
            BridgeWindow.call("OnClientRequestLauncherAction", "newChatMessage", "CHAT", d.getTime(), pMessage);
        }
    }

    /**
     * mp.game.ui.displayRadar -> HudDisplayRadar
     * @param {boolean} status
     */
    static HudDisplayRadar(status) {
        mp.game.ui.displayRadar(status);
    }

    /**
     * mp.game.ui.displayHud -> HudDisplay
     * @param {boolean} status
     */
    static HudDisplay(status) {
        mp.game.ui.displayHud(status);
    }

    /**
     * mp.game.ui.setRadarBigmapEnabled -> HudRadarBigmapEnabled
     * @param {boolean} toggleBigMap
     * @param {boolean} showFullMap
     */
    static HudRadarBigmapEnabled(toggleBigMap, showFullMap) {
        mp.game.ui.setRadarBigmapEnabled(toggleBigMap, showFullMap);
    }

    /**
     * mp.game.cam.renderScriptCams -> RenderScriptCams
     * @param {boolean} render - render script camera else render character camera
     * @param {boolean} ease - smooth transition between the camera's positions
     * @param {number} easeTime - Time in milliseconds for the transition to happen
     * @param {boolean} p3 - freezes the previous/gameplay camera when easing is turned on
     * @param {boolean} p4 - unknown
     */
    static RenderScriptCams(render, ease, easeTime, p3, p4) {
        mp.game.cam.renderScriptCams(render, ease, easeTime, p3, p4);
    }

    /**
     * mp.gui.cursor.show -> ShowCursor
     * @param {boolean} freezeControls - freezes all controls
     * @param {boolean} state - show or hide cursor
     */
    static ShowCursor(freezeControls, state) {
        mp.gui.cursor.show(freezeControls, state);
    }

    /**
     * mp.game.cam.doScreenFadeOut -> DoScreenFadeOut
     * @param {number} duration - duration in ms
     */
    static DoScreenFadeOut(duration) {
        mp.game.cam.doScreenFadeOut(duration);
    }

    /**
     * mp.game.ui.setPauseMenuActive -> SetPauseMenuActive
     * @param {boolean} toggle
     */
    static SetPauseMenuActive(toggle) {
        mp.game.ui.setPauseMenuActive(toggle);
    }

    /**
     * @param {any} message - content of message, objects will run JSON.strigify
     */
    static ErrorLog(message, ...args) {

        if (typeof message === "object")
            message = JSON.stringify(message);

        let  d = new Date();
        let time = Utility.PadNumber(d.getHours(), 2)
            + ":" + Utility.PadNumber(d.getMinutes(), 2)
            + ":" + Utility.PadNumber(d.getSeconds(), 2);

        try {
            mp.console.logInfo(`${time} [ERROR] ${message} | ${JSON.stringify(args)} | ${args.length}`, true, false);
        } catch (e) {

        }
    }

    /**
     * mp.console.log* -> DebugLog
     * @param {any} message - content of message, objects will run JSON.strigify
     */
    static DebugLog(message) {

        if (typeof message === "object")
            message = JSON.stringify(message);

        let  d = new Date();
        let time = Utility.PadNumber(d.getHours(), 2)
            + ":" + Utility.PadNumber(d.getMinutes(), 2)
            + ":" + Utility.PadNumber(d.getSeconds(), 2);

        mp.console.logInfo(time + " " + message, true, false);
    }

    /**
     * mp.console.log* -> ConsoleLog
     * @param {"info"|"error"|"fatal"|"warning"} type
     * @param {any} message - content of message, objects will run JSON.strigify
     * @param {boolean} pushToLive - send this message also when on liveserver
     */
    static ConsoleLog(type, message, pushToLive = false) {
        if (!pushToLive) {
            if (!isPlayerOnBetaServer) {
                return;
            }
        }

        if (typeof message === "object")
            message = JSON.stringify(message);

        switch (type) {
            case "info":
                mp.console.logInfo(message);
                break;
            case "error":
                mp.console.logError(message);
                break;
            case "fatal":
                mp.console.logFatal(message);
                break;
            case "warning":
                mp.console.logWarning(message);
                break;
        }
    }

    /**
     * removes blip with route
     */
    static clearWayPoint() {
        PositionManager.hideBlip();
    }

    /**
     * removes gta5 waypoint
     */
    static clearGtaWayPoint() {
        mp.game.invoke("0xA7E4E2D361C2627F"); // function setWaypointOff(): void
    }

    /**
     * replaces mp.game.graphics.drawLine
     * @param {Vector3Mp} pPos1
     * @param {Vector3Mp} pPos2
     * @param {number} pRed
     * @param {number} pGreen
     * @param {number} pBlue
     * @param {number} pAlpha
     */
    static drawLine(pPos1, pPos2, pRed, pGreen, pBlue, pAlpha = 255) {
        const {x: x1, y: y1, z: z1} = pPos1;
        const {x: x2, y: y2, z: z2} = pPos2;
        mp.game.graphics.drawLine(x1, y1, z1, x2, y2, z2, pRed, pGreen, pBlue, pAlpha);
    }

    /**
     * replaces mp.game.graphics.drawRect
     * @param {number} x
     * @param {number} y
     * @param {number} width
     * @param {number} height
     * @param {number} r
     * @param {number} g
     * @param {number} b
     * @param {number} a
     */
    static drawRect(x, y, width, height, r, g, b, a) {
        mp.game.graphics.drawRect(x, y, width, height, r, g, b, a);
    }

    static drawText2D({text, vector2, font, color, scale, outline = true, center = true}) {
        mp.game.graphics.drawText(text, [vector2.x,vector2.y], {
            font,
            color: [
                color.r,
                color.g,
                color.b,
                color.a,
            ],
            scale: [
                scale,
                scale,
            ],
            outline,
            center,
        });
    }

    static drawText3D({text, position, font, color, scale, outline = true, center = true}) {
        mp.game.graphics.drawText(text, [position.x, position.y, position.z], {
            font,
            color: [
                color.r,
                color.g,
                color.b,
                color.a,
            ],
            scale: [
                scale,
                scale,
            ],
            outline,
            center,
        });
    }

    /**
     * mp.game.system.vdist
     * @param {Vector3Mp} pos1
     * @param {Vector3Mp} pos2
     * @return {number}
     */
    static vdist(pos1, pos2) {
        const {x: x1, y: y1, z: z1} = pos1;
        const {x: x2, y: y2, z: z2} = pos2;
        return mp.game.system.vdist(x1, y1, z1, x2, y2, z2);
    }

    /**mp.game.system.vdist2
     * @param {Vector3Mp} pos1
     * @param {Vector3Mp} pos2
     * @return {number}
     */
    static vdist2(pos1, pos2) {
        const {x: x1, y: y1, z: z1} = pos1;
        const {x: x2, y: y2, z: z2} = pos2;
        return mp.game.system.vdist2(x1, y1, z1, x2, y2, z2);
    }

    /**
     * register ConsoleCommand
     * @param {string} label - commandLabel no spaces
     * @param {function} callback - callback params as ...args
     * @param {"test"|"live"|"liveAdmin"} mode
     */
    static registerConsoleCommand(label, callback, mode = "test") {
        registeredConsoleCommands[label] = {callback, mode};
    }

    static testPointToPoint(pos1, pos2, ignoredEntities, flags) {
        return mp.raycasting.testPointToPoint(pos1, pos2, ignoredEntities, flags);
    }
}

mp.events.add("consoleCommand", (text) => {
    const [label, ...args] = text.split(" ");
    if (registeredConsoleCommands[label]) {
        switch (registeredConsoleCommands[label].mode) {
            case "test":
                if (isPlayerOnBetaServer) {
                    registeredConsoleCommands[label].callback(...args);
                }
                break;
            case "live":
                registeredConsoleCommands[label].callback(...args);
                break;
            case "liveAdmin":
                if (isClientAdmin()) {
                    registeredConsoleCommands[label].callback(...args);
                }
                break;
        }
    }
});

var vehicleMaxSpeed = {};
var vehicleMaxSpeedEnabled = {};
var blockedModels = [782665360, -1860900134, 666166960];
var blockedCategories = [14, 15, 16];

function IsModelBlocked(model) {
    if (blockedModels.indexOf(model) > -1) return true;
    if (blockedCategories.indexOf(mp.players.local.vehicle.getClass()) > -1) return true;
    return false;
}

function GetVehicleLimiterStatus(vehicle) {
    var model = vehicle.model;
    return (vehicleMaxSpeedEnabled[model] === undefined) ? false : vehicleMaxSpeedEnabled[model];
}

function SetVehicleLimiterStatus(vehicle, status) {
    var model = vehicle.model;
    //mp.players.local.vehicle.setMaxSpeed()
    if (status) {
        vehicle.setMaxSpeed((vehicleMaxSpeed[model] === undefined) ? (mp.game.vehicle.getVehicleModelMaxSpeed(model) * 3.6) : (vehicleMaxSpeed[model] / 3.6));
        //API.sendNotification("Limit NEW :" + API.getVehicleMaxSpeed(model) * 3.6);
    } else {
        //VioRageManager.SendChatMessage("DEBUG: getVehicleModelMaxSpeed : " + mp.game.vehicle.getVehicleModelMaxSpeed(model));
        vehicle.setMaxSpeed(mp.game.vehicle.getVehicleModelMaxSpeed(model) * 3.6);
        //API.sendNotification("Limit NEW :" + API.getVehicleMaxSpeed(model) * 3.6);
    }
}

CommunicationManager.AddWebBrowserEvent("OnClientRequestToggleChat", (toggle) => {
    VioRageManager.ShowChat(toggle);
});

var CEFUtility = class {
    static CloseAll() {
        if (Selection.visible == true) {
            Selection.toggle();
        }
        for (let y in Webwindow) {

            if (!CEFUtility.notCloseWindows.includes(y)) {
                if (Webwindow[y] != null) {
                    Webwindow[y].destroy();
                    Webwindow[y] = null;
                }
            }
        }
        if (Webwindow["PlayerlistWindow"] != null) {
            if (Webwindow["PlayerlistWindow"].isActive == true) {
                Webwindow["PlayerlistWindow"].interact = false;
                mp.gui.cursor.visible = false;
                VioRageManager.ShowChat(true);
                VioRageManager.ActivateChat(true);
                Webwindow["PlayerlistWindow"].active(false);
            }
        }
        if (Marketplace != null) {
            Marketplace.close();
            Marketplace = null;
        }
    }
}
CEFUtility.notCloseWindows = ["Phone", "PlayerlistWindow", "Infobox", "PoliceRadio", "AdminHUD", "GroupOverviewWindow"];

let animationIcons = {
    0: "18.svg",
    1: "beleidigung.svg",
    2: "drogen.svg",
    3: "emotionen.svg",
    4: "haltung.svg",
    5: "handgesten.svg",
    6: "positiv.svg",
    7: "sonstiges.svg",
    8: "sport.svg",
    9: "tanz.svg",
}

class Animation {
    constructor(id, description, dictionary, name, flags, speed, iconId) {
        this.id = id;
        this.description = description;
        this.dictionary = dictionary;
        this.name = name;
        this.flags = flags;
        this.speed = speed;
        this.iconId = iconId;
    }
}

let AnimationManager = {
    animations: {},
    animationPlaying: null,
    animationPlayingDictionary: null,
    animationPlayingName: null,
    AntiSpamCount: 0,
    AntiSpamSwapDate: Date.now(),
    loadAnimations: function () {
        let anims = require("./viov/data/animations.js")
        for (let anim of anims) {
            let animation = new Animation(anim.id, anim.description, anim.dictionary, anim.name, anim.flags, anim.speed, anim.iconId);
            this.animations[animation.id] = animation;
        }
    },
    getAnimations: function () {
        return this.animations;
    },
    playAnimation: function (id, flag) {
        if (this.animationPlaying && this.animationPlaying.id == id) {
            this.stopAnimation(true);
            return;
        }
        if (isPlayerCuffed == true) {
            CreateNotify("~r~Du trägst Handschellen!");
            return;
        }
        if (mp.players.local.isInAnyVehicle(true)) { // Wenn Spieler sich im Fahrzeug befindet
            CreateNotify("~r~Du befindest dich in einem Fahrzeug!");
            return;
        }

        if (mp.players.local.getIsTaskActive(160) || mp.players.local.getIsTaskActive(161) || mp.players.local.getIsTaskActive(163)) { // Wenn Spieler in ein Fahrzeug einsteigt oder aussteigt
            CreateNotify("~r~Du befindest dich in einem Fahrzeug!");
            return;
        }

        if (mp.players.local.getIsTaskActive(421) || mp.players.local.getIsTaskActive(420)) { // Jump
            CreateNotify("~r~Du stehst nicht still!");
            return;
        }
        if (mp.players.local.isFalling()) {
            CreateNotify("~r~Du stehst nicht still!");
            return;
        }
        if (!mp.players.local.isOnFoot()) {
            CreateNotify("~r~Du stehst nicht still!");
            return;
        }
        if (mp.players.local.weapon != 0xA2719263) { // Spieler hat eine Waffe in der Hand
            CreateNotify("~r~Du hast eine Waffe in der Hand!");
            return;
        }
        if (mp.players.local.isBeingStunned(0)) {
            CreateNotify("~r~Du kannst aktuell keine Animation ausführen!");
            return;
        }
        if (isPlayerFrozen == true) {
            CreateNotify("~r~Du kannst aktuell keine Animation ausführen!");
            return;
        }
        if (GangwarScoreboard.isPlayerInGangwar()) {
            CreateNotify("~r~Du befindest dich in einem Gangkampf!");
            return;
        }
        if (isPlayerCarryingAction) {
            CreateNotify("~r~Du kannst aktuell keine Animation ausführen!");
            return;
        }
        if (ObjectAttachedToPlayer != null) {
            CreateNotify("~r~Du hast etwas in deiner Hand!");
            return;
        }
        if (IsPlayerInFightClub == true) {
            CreateNotify("~r~Konzentriere dich lieber auf deinen Gegner!");
            return;
        }
        if (Seats.usingChair) { // sitzt auf einem Stuhl
            CreateNotify("~r~Du musst ordentlich auf einem Stuhl sitzen!");
            return;
        }
        if ((LeaveVehicleTimestamp + 8 * 1000) >= Date.now()) { // ist gerade ausgestiegen
            const needTime = Math.round(((LeaveVehicleTimestamp + 8 * 1000) - Date.now()) / 1000);
            CreateNotify(`~r~Animationen noch ${needTime}s nicht möglich!`);
            return;
        }

        this.AntiSpamCount++;
        if (this.AntiSpamCount > 5) {
            let currentDate = Date.now();
            if ((currentDate - this.AntiSpamSwapDate) > 20000) {
                this.AntiSpamSwapDate = currentDate;
                this.AntiSpamCount = 0;
            } else {
                CreateNotify("~r~Die Animation wurde auf Grund von Spam nicht ausgeführt!");
                return;
            }
        }

        let animation = this.animations[id];
        CommunicationManager.TriggerServer("onClientRequestPlayAnimation", flag, animation.dictionary, animation.name, animation.speed);
        this.animationPlaying = animation;
    },
    stopAnimation: function (update) {
        if (this.animationPlaying) {
            this.animationPlaying = null;

            this.animationPlayingDictionary = null;
            this.animationPlayingName = null;

            if (mp.players.local.isBeingStunned(0)) {
                return;
            }

            let triggerAll = false;
            if (update) {
                triggerAll = true;
            }

            CommunicationManager.TriggerServer("onClientRequestStopAnimation", triggerAll);
        }
    },
}

mp.events.add("playAnimation", (id, flag) => {
    AnimationManager.playAnimation(id, flag);
})

mp.events.add("addAnimationToWheel", (name, id, flag) => {
    if (Object.keys(mp.storage.data.animationWheel).length >= 10) {
        CreateNotify("~r~Du kannst nur 10 Animationen zum Rad hinzufügen!", 5)
        return;
    }
    mp.storage.data.animationWheel[id] = {
        name: name,
        id: id,
        flag: flag,
        iconId: AnimationManager.getAnimations()[id].iconId,
    }
    CommunicationManager.TriggerServer("quest_AnimationManager_Done");
})

mp.events.add("removeAnimationFromWheel", (id) => {
    delete mp.storage.data.animationWheel[id];
})

setTimeout(() => {
    AnimationManager.loadAnimations();
}, 10000)

//
class KeybindManagerKey {
    constructor(code, functionType, functionName, functionAction) {
        this.code = code;
        this.functionType = functionType;
        this.functionName = functionName;
        this.functionAction = functionAction;
    }
}

class KeybindManagerVioFunction {
    constructor(name, onKeyDown, func) {
        this.name = name;
        this.onKeyDown = onKeyDown;
        this.func = func;
    }
}

var KeybindManager_MakroCount = 0;
var KeybindManager_MakroSwapDate = Date.now();

let KeybindManagerMakroWrapper = function (wrappedFunction) {
    if (mp.gui.cursor.visible == false && !mp.players.local.isDead() && !disableAllControls) {
        KeybindManager_MakroCount++;
        if (KeybindManager_MakroCount > 5) {
            let currentDate = Date.now();
            if ((currentDate - KeybindManager_MakroSwapDate) > 20000) {
                KeybindManager_MakroSwapDate = currentDate;
                KeybindManager_MakroCount = 0;
            } else {
                CreateNotify("~r~Das Makro wurde auf Grund von Spam nicht ausgeführt!");
                return;
            }
        }

        wrappedFunction();
    }
}

let KeybindManagerFunctionWrapper = function (wrappedFunction) {

    if (mp.gui.cursor.visible == false && !mp.players.local.isDead() && !disableAllControls) {
        wrappedFunction();
    }
}

const keybindManagerVersion = 5;

let KeybindManager = {
    keyFunctions: {},
    registerVioKeyFunction: function (name, onKeyDown, func) {
        if (!this.keyFunctions[name]) {
            this.keyFunctions[name] = [];
        }
        this.keyFunctions[name].push(new KeybindManagerVioFunction(name, onKeyDown, func));
    },
    getAllKeyFunctions: function () {
        return this.keyFunctions;
    },
    bindAllKeys: function () {
        for (let i in mp.storage.data.keybindmanager.keys) {
            let key = mp.storage.data.keybindmanager.keys[i];
            this.bindKey(key);
        }
    },
    bindKey: function (key) {
        if (key) {
            switch (key.functionType) {
                case "Vio-Funktion":
                    if (this.keyFunctions[key.functionName] != null) {
                        for (let keyFunction of this.keyFunctions[key.functionName]) {
                            if (keyFunction.onKeyDown) {
                                mp.keys.bind(key.code, keyFunction.onKeyDown, () => {
                                    if (key.functionName == "Voice") {
                                        keyFunction.func();
                                    } else if(key.functionName == "Spielerliste" && FightClubSpectatorCam != null) {
                                        keyFunction.func(); // Ausnahme wenn der Spieler Zuschauer ist!
                                    } else {
                                        KeybindManagerFunctionWrapper(() => keyFunction.func());
                                    }
                                });
                            } else {
                                mp.keys.bind(key.code, keyFunction.onKeyDown, keyFunction.func);
                            }
                        }
                    }
                    break;
                case "Makro":
                    mp.keys.bind(key.code, true, () => {
                        KeybindManagerMakroWrapper(() => voiceChat.call("executeCommand", key.functionAction.substr(1)));
                    });
                    break;
                case "Animation":
                    mp.keys.bind(key.code, true, () => {
                        KeybindManagerFunctionWrapper(() => AnimationManager.playAnimation(key.functionName, key.functionAction));
                    });
                    break;
                default:
                    VioRageManager.SendChatMessage("Could not bind: Type: " + key.functionType + "; Name: " + key.functionName + "; Action: " + key.functionAction);
                    break;
            }
        }
    },
    unbindKey: function (key) {
        if (key) {
            mp.keys.unbind(key.code, false);
            mp.keys.unbind(key.code, true);
        }
    },
    addKeyBind: function (keyName, code, functionType, functionName, functionAction) {
        mp.storage.data.keybindmanager.keys[keyName] = new KeybindManagerKey(code, functionType, functionName, functionAction);
        mp.storage.flush();
        this.bindKey(mp.storage.data.keybindmanager.keys[keyName]);
    },
    removeKeyBind: function (keyName) {
        this.unbindKey(mp.storage.data.keybindmanager.keys[keyName]);
        mp.storage.data.keybindmanager.keys[keyName] = undefined;
    },
    openKeybindManager: function () {
        if (Webwindow["KeybindManagerWindow"] == null) {
            Webwindow["KeybindManagerWindow"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/keybindmanager/keybindmanager.html", true);
            Webwindow["KeybindManagerWindow"].start('initKeybindManagerWindow', {
                keys: mp.storage.data.keybindmanager.keys,
                functions: this.getAllKeyFunctions(),
                animations: AnimationManager.getAnimations(),
                animationWheel: mp.storage.data.animationWheel,
            });
        }
    },
    openAnimationWindow: function () {
        if (Webwindow["KeybindManagerWindow"] == null) {
            Webwindow["KeybindManagerWindow"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/keybindmanager/keybindmanager.html", true);
            Webwindow["KeybindManagerWindow"].start('initAnimationWindow', {
                animations: AnimationManager.getAnimations(),
                animationWheel: mp.storage.data.animationWheel,
            });
        }
    },
    closeKeybindManager: function () {
        if (Webwindow["KeybindManagerWindow"] != null) {
            Webwindow["KeybindManagerWindow"].destroy();
            Webwindow["KeybindManagerWindow"] = null;
        }
    },
    updateKeybindManager: function () {
        if (Webwindow["KeybindManagerWindow"] != null) {
            Webwindow["KeybindManagerWindow"].call('updateData', {
                keys: mp.storage.data.keybindmanager.keys,
                functions: this.getAllKeyFunctions(),
                animations: AnimationManager.getAnimations(),
            });
        }
    },
    resetKeybindManager: function () {
        if (mp.storage.data.keybindmanager != null) {
            if (mp.storage.data.keybindmanager.keys != null) {
                for (let i in mp.storage.data.keybindmanager.keys) {
                    let key = mp.storage.data.keybindmanager.keys[i];
                    this.unbindKey(key);
                }
            }
        }
        mp.storage.data.keybindmanager = {
            version: keybindManagerVersion,
            keys: {
                "x": new KeybindManagerKey(0x58, "Vio-Funktion", "Interaktionsmenü", null),
                "e": new KeybindManagerKey(0x45, "Vio-Funktion", "Interaktion", null),
                "m": new KeybindManagerKey(0x4D, "Vio-Funktion", "Voice", null),
                "l": new KeybindManagerKey(0x4C, "Vio-Funktion", "Limit", null),
                "i": new KeybindManagerKey(0x49, "Vio-Funktion", "Inventar", null),
                "y": new KeybindManagerKey(0x59, "Vio-Funktion", "Spielerliste", null),
                "p": new KeybindManagerKey(0x50, "Vio-Funktion", "Handy", null),
                "g": new KeybindManagerKey(0x47, "Vio-Funktion", "Als Beifahrer einsteigen", null),
                "f2": new KeybindManagerKey(0x71, "Vio-Funktion", "Wegpunkte", null),
                "f3": new KeybindManagerKey(0x72, "Vio-Funktion", "Settings", null),
                "f4": new KeybindManagerKey(0x73, "Vio-Funktion", "Gruppenmenü", null),
                "f5": new KeybindManagerKey(0x74, "Vio-Funktion", "Tastaturbelegung", null),
                "f11": new KeybindManagerKey(0x7A, "Vio-Funktion", "Screenshot", null),
                "SPACE": new KeybindManagerKey(0x20, "Vio-Funktion", "Animation stoppen", null),
            },
        };
        mp.storage.flush();

        KeybindManager.bindAllKeys();
    }
}

KeybindManager.registerVioKeyFunction("Tastaturbelegung", true, () => {
    KeybindManager.openKeybindManager();
})

KeybindManager.registerVioKeyFunction("Animation stoppen", true, () => {
    if ((LeaveVehicleTimestamp + 8 * 1000) >= Date.now()) return;
    AnimationManager.stopAnimation(true);
})

KeybindManager.registerVioKeyFunction("Animationen", true, () => {
    KeybindManager.openAnimationWindow();
})

mp.events.add("closeKeybindManagerWindow", () => {
    KeybindManager.closeKeybindManager();
})

mp.events.add("resetKeybindManager", () => {
    KeybindManager.resetKeybindManager();
    KeybindManager.closeKeybindManager();
    KeybindManager.openKeybindManager();
})

mp.events.add("removeKeyBind", (keyName) => {
    if (keyName == "f5") return;
    KeybindManager.removeKeyBind(keyName);
    KeybindManager.updateKeybindManager();
})

mp.events.add("addKeyBind", (keyName, code, functionType, functionName, functionAction) => {
    KeybindManager.addKeyBind(keyName, code, functionType, functionName, functionAction);
    KeybindManager.updateKeybindManager();
})

setTimeout(() => {
    // Set defaults
    if (mp.storage.data.keybindmanager == null || mp.storage.data.keybindmanager.version == null || mp.storage.data.keybindmanager.version < keybindManagerVersion) {
        KeybindManager.resetKeybindManager();
    } else {
        KeybindManager.bindAllKeys();
    }
}, 10000)

var natives = {};
mp.game.graphics.clearDrawOrigin = () => mp.game.invoke('0xFF0B610F6BE0D7AF'); // 26.07.2018 // GTA 1.44
mp.game.audio.setVehRadioStation = (handle, state) => mp.game.invoke("0x1B9C0099CB942AC6", handle, state)
mp.game.vehicle.getVehicleClass = (veh) => mp.game.invoke("0x29439776AAA00A62", veh);
mp.game.vehicle.getVehicleSeats = (veh) => mp.game.invoke("0xA7C4F2C6E744A550", veh.handle);
mp.game.entity.getEntityType = (handle) => mp.game.invoke("0x8ACD366038D14505", handle);
mp.game.entity.getInteriorFromEntity = (entity) => mp.game.invoke("0x2107BA504071A6BB", entity); // GET_INTERIOR_FROM_ENTITY
natives.SET_BLIP_SPRITE = (blip, sprite) => mp.game.invoke("0xDF735600A4696DAF", blip, sprite); // SET_BLIP_SPRITE
natives.SET_BLIP_ALPHA = (blip, a) => mp.game.invoke("0x45FF974EEE1C8734", blip, a); // SET_BLIP_ALPHA
natives.SET_BLIP_COLOUR = (blip, c) => mp.game.invoke("0x03D7FB09E75D6B7E", blip, c); // SET_BLIP_COLOUR
natives.SET_BLIP_ROTATION = (blip, r) => mp.game.invoke("0xF87683CDF73C3F6E", blip, r); // SET_BLIP_ROTATION
natives.SET_BLIP_FLASHES = (blip, f) => mp.game.invoke("0xB14552383D39CE3E", blip, f); // SET_BLIP_FLASHES
natives.SET_BLIP_FLASH_TIMER = (blip, t) => mp.game.invoke("0xD3CD6FD297AE87CC", blip, t); // SET_BLIP_FLASH_TIMER
natives.SET_BLIP_COORDS = (blip, x, y, z) => mp.game.invoke("0xAE2AF67E9D9AF65D", blip, x, y, z); // SET_BLIP_COORDS
natives.SET_CURSOR_LOCATION = (x, y) => mp.game.invoke("0xFC695459D4D0E219", x, y); // SET_CURSOR_LOCATION
natives.SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT = (toggle) => mp.game.invoke("0xB98236CAAECEF897", toggle); // SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT
natives.GET_FIRST_BLIP_INFO_ID = (i) => mp.game.invoke("0x1BEDE233E6CD2A1F", i); // GET_FIRST_BLIP_INFO_ID
natives.GET_NEXT_BLIP_INFO_ID = (i) => mp.game.invoke("0x14F96AA50D6FBEA7", i); // GET_NEXT_BLIP_INFO_ID
natives.DOES_BLIP_EXIST = (blip) => mp.game.invoke("0xA6DB27D19ECBB7DA", blip); // DOES_BLIP_EXIST
natives.GET_NUMBER_OF_ACTIVE_BLIPS = () => mp.game.invoke("0x9A3FF3DE163034E8"); // GET_NUMBER_OF_ACTIVE_BLIPS
natives.ENABLE_CROSSHAIR_THIS_FRAME = () => mp.game.invoke("0x73115226F4814E62"); // ENABLE_CROSSHAIR_THIS_FRAME (used in Render)
natives.SET_ENTITY_COLLISION = (pedHandle, pToggle, pKeepPhysics) => mp.game.invoke("0x1A9205C1B9EE827F", pedHandle, pToggle, pKeepPhysics); // SET_ENTITY_COLLISION
natives.HIDE_HUD_COMPONENT_THIS_FRAME = (id) => mp.game.invoke("0xBC4C9EA5391ECC0D", id);
natives.IS_FLASH_LIGHT_ON = (pedHandle) => mp.game.invoke("0x4B7620C47217126C", pedHandle); // IS_FLASH_LIGHT_ON
natives.SET_FLASH_LIGHT_ENABLED = (pedHandle, state) => mp.game.invoke("0x988DB6FE9B3AC000", pedHandle, state); // https://natives.altv.mp/#/0x988DB6FE9B3AC000
natives.SET_ENTITY_ALPHA = (entity, alphaLevel, skin) => { // SET_ENTITY_ALPHA
    if (mp.peds.exists(entity)) {
        mp.game.invoke("0x44A0870B7E92D7C0", entity.handle, alphaLevel, skin);
    }
}
natives.DISABLE_PED_PAIN_AUDIO = (ped, toggle) => { // DISABLE_PED_PAIN_AUDIO
    if (mp.peds.exists(ped)) {
        mp.game.invoke("0xA9A41C1E940FB0E8", ped.handle, toggle);
    }
}
natives.GET_MAX_AMMO_IN_CLIP = (ped, weaponhash, p2 = 1) => {
    return mp.game.invoke("0xA38DCFFCEA8962FA", ped, weaponhash, p2);
};

function RequestModObjectModel(model, ms, times, callback) {
    if (model != 0) {
        if (!mp.game.streaming.hasModelLoaded(model)) {
            mp.game.streaming.requestModel(model);
            var end = new Date().getTime() + ms;
            let interval = setInterval(() => {
                if (mp.game.streaming.hasModelLoaded(model)) {
                    clearInterval(interval);
                    callback(true);
                } else if (new Date().getTime() >= end) {
                    clearInterval(interval);
                    if (times > 0) {
                        times = times - 1;
                        return RequestModObjectModel(model, ms, times, callback);
                    } else {
                        callback(false);
                    }
                }
            }, 200);
        } else {
            callback(true);
        }
    } else {
        callback(false);
    }
}

function RequestModel(model, ms, callback) {
    if (model != 0) {
        if (mp.game.streaming.isModelValid(model)) {
            if (!mp.game.streaming.hasModelLoaded(model)) {
                mp.game.streaming.requestModel(model);
                var end = new Date().getTime() + ms;
                let interval = setInterval(() => {
                    if (mp.game.streaming.hasModelLoaded(model) || new Date().getTime() >= end) {
                        clearInterval(interval);
                        callback();
                    }
                }, 100);
            } else {
                callback();
            }
        } else {
            callback();
        }
    } else {
        callback();
    }
}

function RequestWeaponAsset(asset, ms, callback) {
    if (!mp.game.weapon.hasWeaponAssetLoaded(asset)) {
        mp.game.weapon.requestWeaponAsset(asset, 31, 0);
        var end = new Date().getTime() + ms;
        let interval = setInterval(() => {
            if (mp.game.weapon.hasWeaponAssetLoaded(asset) || new Date().getTime() >= end) {
                clearInterval(interval);
                callback();
            }
        }, 100);
    } else {
        callback();
    }
}

function RequestPTFXAsset(fxName, ms, callback) {
    if (!mp.game.streaming.hasNamedPtfxAssetLoaded(fxName)) {
        mp.game.streaming.requestNamedPtfxAsset(fxName);
        var end = new Date().getTime() + ms;
        let interval = setInterval(() => {
            if (mp.game.streaming.hasNamedPtfxAssetLoaded(fxName) || new Date().getTime() >= end) {
                if (mp.game.streaming.hasNamedPtfxAssetLoaded(fxName)) {
                    mp.game.graphics.setPtfxAssetNextCall(fxName);
                }
                clearInterval(interval);
                callback();
            }
        }, 100);
    } else {
        mp.game.graphics.setPtfxAssetNextCall(fxName);
        callback();
    }
}


function RequestClipSet(walkstyle, ms, callback) {
    if (!mp.game.streaming.hasClipSetLoaded(walkstyle)) {
        mp.game.streaming.requestClipSet(walkstyle);
        var end = new Date().getTime() + ms;
        let interval = setInterval(() => {
            if (mp.game.streaming.hasClipSetLoaded(walkstyle) || new Date().getTime() >= end) {
                clearInterval(interval);
                callback();
            }
        }, 100);
    } else {
        callback();
    }
}

function RequestAnimDict(animdict, ms, callback) {
    if (mp.game.streaming.doesAnimDictExist(animdict)) {
        if (!mp.game.streaming.hasAnimDictLoaded(animdict)) {
            mp.game.streaming.requestAnimDict(animdict);
            var end = new Date().getTime() + ms;
            let interval = setInterval(() => {
                if (mp.game.streaming.hasAnimDictLoaded(animdict) || new Date().getTime() >= end) {
                    clearInterval(interval);
                    callback();
                }
            }, 100);
        } else {
            callback();
        }
    } else {
        callback();
    }
}

function IsRageMpObjectReady(obj, ms, callback) {
    if (obj.handle === 0) {
        var end = new Date().getTime() + ms;
        let interval = setInterval(() => {
            if (obj.handle !== 0) {
                if (mp.objects.exists(obj)) {
                    clearInterval(interval);
                    callback(true);
                }
            } else if (new Date().getTime() >= end) {
                clearInterval(interval);
                callback(false);
            }
        }, 100);
    } else {
        callback(true);
    }
}

function IsRageMpForkliftJobReady(veh1, veh2, ped1, ms, callback) {
    if (veh1 != null && veh2 != null && ped1 != null) {
        if (veh1.handle === 0 || veh2.handle === 0 || ped1.handle === 0) {
            var end = new Date().getTime() + ms;
            let interval = setInterval(() => {
                if (veh1 != null && veh2 != null && ped1 != null) {
                    if (veh1.handle !== 0 && veh2.handle !== 0 && ped1.handle !== 0) {
                        if (mp.vehicles.exists(veh1) && mp.vehicles.exists(veh2) && mp.peds.exists(ped1)) {
                            clearInterval(interval);
                            callback(true);
                        }
                    } else if (new Date().getTime() >= end) {
                        clearInterval(interval);
                        callback(false);
                    }
                } else {
                    clearInterval(interval);
                    callback(false);
                }
            }, 100);
        } else {
            callback(true);
        }
    } else {
        callback(false);
    }
}

function IsRageMpVehicleReady(veh, ms, callback) {
    if (veh != null) {
        if (veh.handle === 0) {
            var end = new Date().getTime() + ms;
            let interval = setInterval(() => {
                if (veh != null) {
                    if (veh.handle !== 0) {
                        if (mp.vehicles.exists(veh)) {
                            clearInterval(interval);
                            callback(true);
                        }
                    } else if (new Date().getTime() >= end) {
                        clearInterval(interval);
                        callback(false);
                    }
                } else {
                    clearInterval(interval);
                    callback(false);
                }
            }, 100);
        } else {
            callback(true);
        }
    } else {
        callback(false);
    }
}

function IsRageMpPedReady(ped, ms, callback) {
    if (ped != null) {
        if (ped.handle === 0) {
            var end = new Date().getTime() + ms;
            let interval = setInterval(() => {
                if (ped != null) {
                    if (ped.handle !== 0) {
                        if (mp.peds.exists(ped)) {
                            clearInterval(interval);
                            callback(true);
                        }
                    } else if (new Date().getTime() >= end) {
                        clearInterval(interval);
                        callback(false);
                    }
                } else {
                    clearInterval(interval);
                    callback(false);
                }
            }, 100);
        } else {
            callback(true);
        }
    } else {
        callback(false);
    }
}


function IsRageMpAudioReady(alarm, ms, callback) {
    if (!mp.game.audio.prepareAlarm(alarm)) {
        var end = new Date().getTime() + ms;
        let interval = setInterval(() => {
            if (mp.game.audio.prepareAlarm(alarm)) {
                clearInterval(interval);
                callback(true);
            } else if (new Date().getTime() >= end) {
                clearInterval(interval);
                callback(false);
            }
        }, 100);
    } else {
        callback(true);
    }
}

function IsRageScaleformMovieLoaded(scaleform, ms, callback) {
    if (!mp.game.graphics.hasScaleformMovieLoaded(scaleform)) {
        var end = new Date().getTime() + ms;
        let interval = setInterval(() => {
            if (mp.game.graphics.hasScaleformMovieLoaded(scaleform)) {
                clearInterval(interval);
                callback(true);
            } else if (new Date().getTime() >= end) {
                clearInterval(interval);
                callback(false);
            }
        }, 100);
    } else {
        callback(true);
    }
}

var weapon_data = {
    hashes: {
        0: {
            name: 'vehicle',
            displayName: '',
            category: '',
            delay: 0,
            hash: '0'
        },
        966099553: {
            name: 'animation',
            displayName: '',
            category: '',
            delay: 0,
            hash: '0'
        },
        3173288789: {
            name: 'animation',
            displayName: '',
            category: '',
            delay: 0,
            hash: '0'
        },
        7872484: {
            name: 'compactlauncher',
            displayName: 'Compact Grenade Launcher',
            category: 'Heavy Weapons',
            delay: 0,
            hash: '-1' // 125959754
        },
        100416529: {
            name: 'sniperrifle',
            displayName: 'Sniper Rifle',
            category: 'Sniper Rifles',
            delay: 1500,
            hash: '100416529' // 100416529
        },
        101631238: {
            name: 'fireextinguisher',
            displayName: 'Fire Extinguisher',
            category: 'Miscellaneous',
            delay: 0,
            hash: '101631238',
            ignoreNoDmZone: true,
        },
        1627465347: {
            name: 'gusenberg',
            displayName: 'Gusenberg Sweeper',
            category: 'Light Machine Guns',
            delay: 105,
            hash: '1627465347', // 1627465347
            accuracy: 100,
        },
        111591470: {
            name: 'marksmanrifle_mk2',
            displayName: 'Marksman Rifle Mk II',
            category: 'Sniper Rifles',
            delay: 0,
            hash: '-1'
        },
        126349499: {
            name: 'snowball',
            displayName: 'Snowballs',
            category: 'Throwables',
            delay: 0,
            hash: '126349499', // 126349499
            accuracy: 100,
            ignoreNoDmZone: true,
        },
        137902532: {
            name: 'vintagepistol',
            displayName: 'Vintage Pistol',
            category: 'Handguns',
            delay: 285, // 7
            hash: '137902532'
        },
        171789620: {
            name: 'combatpdw',
            displayName: 'Combat PDW',
            category: 'Submachine Guns',
            delay: 100, // 30
            hash: '171789620'
        },
        177293209: {
            name: 'heavysniper_mk2',
            displayName: 'Heavy Sniper Mk II',
            category: 'Sniper Rifles',
            delay: 0,
            hash: '-1' // 177293209
        },
        198330549: {
            name: 'minismg',
            displayName: 'Mini SMG',
            category: 'Submachine Guns',
            delay: 75,
            hash: '-1121678507'
        },
        205991906: {
            name: 'heavysniper',
            displayName: 'Heavy Sniper',
            category: 'Sniper Rifles',
            delay: 0,
            hash: '-1' // 205991906
        },
        317205821: {
            name: 'autoshotgun',
            displayName: 'Sweeper Shotgun',
            category: 'Shotguns',
            delay: 0,
            hash: '-1' // 317205821
        },
        324215364: {
            name: 'microsmg',
            displayName: 'Micro SMG',
            category: 'Submachine Guns',
            delay: 80, // 16
            hash: '324215364',
            // accuracy: 100,
        },
        419712736: {
            name: 'weapon_wrench',
            displayName: 'Pipe Wrench',
            category: 'Melee',
            delay: 0,
            hash: '-1' // 419712736
        },
        453432689: {
            name: 'pistol',
            displayName: 'Pistol',
            category: 'Handguns',
            delay: 250, // 12
            hash: '453432689'
        },
        487013001: {
            name: 'pumpshotgun',
            displayName: 'Pump Shotgun',
            category: 'Shotguns',
            delay: 850, // 8
            hash: '487013001'
        },
        584646201: {
            name: 'appistol',
            displayName: 'AP Pistol',
            category: 'Handguns',
            delay: 80,
            hash: '584646201', // 584646201
            // accuracy: 100,
        },
        615608432: {
            name: 'molotov',
            displayName: 'Molotov Cocktail',
            category: 'Werfbares',
            delay: 0,
            hash: '615608432' // 615608432
        },
        736523883: {
            name: 'smg',
            displayName: 'SMG',
            category: 'Submachine Guns',
            delay: 98, // 30
            hash: '736523883'
        },
        741814745: {
            name: 'stickybomb',
            displayName: 'Sticky Bomb',
            category: 'Throwables',
            delay: 0,
            hash: '-1' // 741814745
        },
        883325847: {
            name: 'petrolcan',
            displayName: 'Jerry Can',
            category: 'Miscellaneous',
            delay: 0,
            hash: '-1' // 883325847
        },
        911657153: {
            name: 'stungun',
            displayName: 'Stun Gun',
            category: 'Handguns',
            delay: 1400,
            hash: '911657153'
        },
        940833800: {
            name: 'weapon_stone_hatchet',
            displayName: 'Stone Hatchet',
            category: 'Melee',
            delay: 0,
            hash: '-1' // 940833800
        },
        961495388: {
            name: 'assaultrifle_mk2',
            displayName: 'Assault Rifle Mk II',
            category: 'Assault Rifles',
            delay: 0,
            hash: '-1'
        },
        984333226: {
            name: 'heavyshotgun',
            displayName: 'Heavy Shotgun',
            category: 'Shotguns',
            delay: 0,
            hash: '-1' // 984333226
        },
        1119849093: {
            name: 'minigun',
            displayName: 'Minigun',
            category: 'Heavy Weapons',
            delay: 0,
            hash: '-1' // 1119849093
        },
        1141786504: {
            name: 'weapon_golfclub',
            displayName: 'Golf Club',
            category: 'Melee',
            delay: 0,
            hash: '-1' // 1141786504
        },
        1198879012: {
            name: 'flaregun',
            displayName: 'Flare Gun',
            category: 'Handguns',
            delay: 0,
            hash: '-1' // 1198879012
        },
        1233104067: {
            name: 'flare',
            displayName: 'Flare',
            category: 'Throwables',
            delay: 0,
            hash: '-1' // 1233104067
        },
        1305664598: {
            name: 'grenadelauncher_smoke',
            displayName: 'Grenade Launcher Smoke',
            category: 'Heavy Weapons',
            delay: 0,
            hash: '-1' // 1305664598
        },
        1317494643: {
            name: 'weapon_hammer',
            displayName: 'Hammer',
            category: 'Melee',
            delay: 0,
            hash: '-1' // 1317494643
        },
        1432025498: {
            name: 'pumpshotgun_mk2',
            displayName: 'Pump Shotgun Mk II',
            category: 'Shotguns',
            delay: 0,
            hash: '-1' //1432025498
        },
        1593441988: {
            name: 'combatpist',
            displayName: 'Combat Pistol',
            category: 'Handguns',
            delay: 260, // 12
            hash: '1593441988'
        },
        1649403952: {
            name: 'compactrifle',
            displayName: 'Compact Rifle',
            category: 'Assault Rifles',
            delay: 150,
            hash: '1649403952', // 1649403952
            // accuracy: 85,
        },
        1672152130: {
            name: 'hominglauncher',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1' // 1672152130
        },
        1737195953: {
            name: 'weapon_nightstick',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1' // 1737195953
        },
        1834241177: {
            name: 'railgun',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1' // 1834241177
        },
        2017895192: {
            name: 'sawnoffshotgun',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1' // 2017895192
        },
        2024373456: {
            delay: 0,
            hash: '-1'
        },
        2132975508: {
            name: 'bullpuprifle',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1' // 2132975508
        },
        2138347493: {
            name: 'firework',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1' // 2138347493
        },
        2144741730: {
            name: 'combatmg',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1' // 2144741730
        },
        2210333304: {
            name: 'carbinerifle',
            displayName: 'Carbine Rifle',
            category: 'Assault Rifles',
            delay: 0,
            hash: '-2084633992' // -2084633992
        },
        2227010557: {
            name: 'weapon_crowbar',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1' // -2067956739
        },
        2228681469: {
            name: 'bullpuprifle_mk2',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1'
        },
        2285322324: {
            name: 'snspistol_mk2',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1'
        },
        2343591895: {
            name: 'weapon_flashlight',
            displayName: 'Flashlight',
            category: 'Melee',
            delay: 0,
            hash: '-1951375401'
        },
        2460120199: {
            name: 'weapon_dagger',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1' // -1834847097
        },
        2481070269: {
            name: 'grenade',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1' // -1813897027
        },
        2484171525: {
            name: 'weapon_poolcue',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1' // -1810795771
        },
        2508868239: {
            name: 'weapon_bat',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1' // -1786099057
        },
        2526821735: {
            name: 'specialcarbine_mk2',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1'
        },
        2548703416: {
            name: 'doubleaction',
            displayName: 'Double Action Revolver',
            category: 'Handguns',
            delay: 250,
            hash: '-1746263880' // -1746263880
        },
        2578377531: {
            name: 'pistol50',
            displayName: 'Pistol .50',
            category: 'Handguns',
            delay: 415, // 9 // -----------> FALSCH!!!
            hash: '-1716589765'
        },
        2578778090: {
            name: 'weapon_knife',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1' // -1716189206
        },
        2634544996: {
            name: 'mg',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1' // -1660422300
        },
        2640438543: {
            name: 'bullpupshotgun',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1' // -1654528753
        },
        2694266206: {
            name: 'bzgas',
            displayName: 'BZ-Gas',
            category: 'Werfbares',
            delay: 0,
            hash: '-1' // -1600701090
        },
        2725352035: {
            name: 'weapon_unarmed',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1569615261',
            ignoreNoDmZone: true,
        },
        2726580491: {
            name: 'grenadelauncher',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1' // -1568386805
        },
        2828843422: {
            name: 'musket',
            displayName: 'Musket',
            category: 'Shotguns',
            delay: 4700,
            hash: '-1466123874'
        },
        2874559379: {
            name: 'proxmine',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1' // -1420407917
        },
        2937143193: {
            name: 'advancedrifle',
            displayName: 'Advanced Rifle',
            category: 'Assault Rifles',
            delay: 85, // 30
            hash: '-1357824103'
        },
        2982836145: {
            name: 'rpg',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1' // -1312131151
        },
        3125143736: {
            name: 'pipebomb',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1' // -1169823560
        },
        3218215474: {
            name: 'snspistol',
            displayName: 'SNS Pistol',
            category: 'Handguns',
            delay: 200, // 6
            hash: '-1076751822'
        },
        3219281620: {
            name: 'pistol_mk2',
            displayName: 'Pistol Mk II',
            category: 'Handguns',
            delay: 0,
            hash: '-1' //-1075685676
        },
        3220176749: {
            name: 'assaultrifle',
            displayName: 'Assault Rifle',
            category: 'Assault Rifles',
            delay: 150, // 30
            hash: '-1074790547',
            // accuracy: 50,
        },
        3231910285: {
            name: 'specialcarbine',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1' // -1063057011
        },
        3249783761: {
            name: 'revolver',
            displayName: 'Heavy Revolver',
            category: 'Handguns',
            delay: 1500, // 6
            hash: '-1045183535'
        },
        3342088282: {
            name: 'marksmanrifle',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1' // 952879014
        },
        3415619887: {
            name: 'revolver_mk2',
            displayName: 'Heavy Revolver Mk II',
            category: 'Handguns',
            delay: 1500,
            hash: '-879347409'
        },
        3441901897: {
            name: 'weapon_battleaxe',
            displayName: 'Battleaxe',
            category: 'Melee',
            delay: 0,
            hash: '-1' // -853065399
        },
        3523564046: {
            name: 'heavypistol',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1' // -771403250
        },
        3638508604: {
            name: 'weapon_knuckle',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1' // -656458692
        },
        3675956304: {
            name: 'machinepistol',
            displayName: 'Machine Pistol',
            category: 'Submachine Guns',
            delay: 0,
            hash: '-619010992', // -619010992
            // accuracy: 100,
        },
        3686625920: {
            name: 'combatmg_mk2',
            displayName: 'Combat MG MK II',
            category: 'Light Machine Guns',
            delay: 110,
            hash: '-608341376',
        },
        3696079510: {
            name: 'marksmanpistol',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1' // -598887786
        },
        3713923289: {
            name: 'weapon_machete',
            displayName: 'Machete',
            category: 'Melee',
            delay: 0,
            hash: '-581044007' // -581044007
        },
        3756226112: {
            name: 'weapon_switchblade',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1' // -538741184
        },
        3800352039: {
            name: 'assaultshotgun',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1' // -494615257
        },
        4019527611: {
            name: 'dbshotgun',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1' // -275439685
        },
        4024951519: {
            name: 'assaultsmg',
            displayName: 'Assault SMG',
            category: 'Submachine Guns',
            delay: 85, // 30
            hash: '-270015777'
        },
        4191993645: {
            name: 'weapon_hatchet',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1' // -102973651
        },
        4192643659: {
            name: 'weapon_bottle',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1' // -102323637
        },
        4208062921: {
            name: 'carbinerifle_mk2',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1'
        },
        4222310262: {
            name: 'parachute',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-72657034'
        },
        4256991824: {
            name: 'smokegrenade',
            displayName: 'Rauchgranate',
            category: 'Werfbares',
            delay: 0,
            hash: '-1' // -37975472
        },
        125959754: {
            name: 'compactlauncher',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1' //
        },
        3056410471: {
            name: 'rayminigun',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1'
        },
        375527679: {
            name: 'WEAPON_PASSENGER_ROCKET',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1'
        },
        600439132: {
            name: 'ball',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1'
        },
        2294779575: {
            name: 'WEAPON_BRIEFCASE',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1'
        },
        28811031: {
            name: 'WEAPON_BRIEFCASE_02',
            displayName: '',
            category: '',
            delay: 0,
            hash: '-1'
        },
    },
    getWeaponHash(hash) {
        if (this.hashes[hash]) {
            return this.hashes[hash].hash;
        }
        return '-1';
    },
    getWeaponDelay(hash) {
        if (this.hashes[hash]) {
            let delay = this.hashes[hash].delay;
            if (delay > 0) {
                delay = delay * 0.75;
            }
            return delay;
        }
        const obj = Object.values(this.hashes).find(entry => {
            return entry.hash == hash;
        });

        if (obj) {
            return obj.delay
        }
        return 0;
    },
    getWeaponName(hash) {
        if (this.hashes[hash]) {
            return this.hashes[hash].name;
        }
        VioRageManager.SendChatMessage(`ERROR WeaponName: ${hash}`);
        return "No-Name";
    },
    getWeaponDisplayName(hash) {
        if (this.hashes[hash]) {
            return this.hashes[hash].displayName;
        }
        return Object.values(this.hashes).find(entry => {
            return entry.hash == hash;
        }).displayName;
    },
    getHashByName(_name) {
        return Object.keys(this.hashes).find(key => {
            const {name, delay, hash} = this.hashes[key];

            if (_name.includes("weapon_"))
                _name.substr(7, _name.length);

            if (name)
                if (name.includes("weapon_"))
                    name.substr(7, _name.length);

            return _name === name;
        });
    },
    getData(hash) {
        return this.hashes[hash] ? this.hashes[hash] : Object.values(this.hashes).find(data => data.hash == hash);
    }
}

var vehicle_data = {
    data: {
        0: {name: "Spoilers", tunes: {}},
        1: {name: "FrontBumper", tunes: {}},
        2: {name: "RearBumper", tunes: {}},
        3: {name: "SideSkirt", tunes: {}},
        4: {name: "Exhaust", tunes: {}},
        5: {name: "Frame", tunes: {}},
        6: {name: "Grille", tunes: {}},
        7: {name: "Hood", tunes: {}},
        8: {name: "Fender", tunes: {}},
        9: {name: "RightFender", tunes: {}},
        10: {name: "Roof", tunes: {}},
        11: {name: "Engine", tunes: {}},
        12: {name: "Brakes", tunes: {0: "Straßenbremsen", 1: "Sportbremsen", 2: "Rennbremsen"}},
        13: {name: "Transmission", tunes: {0: "Straßengetriebe", 1: "Sportgetriebe", 2: "Renngetriebe"}},
        14: {name: "Horns", tunes: {}},
        15: {
            name: "Suspension",
            tunes: {
                0: "Tiefergelegte Federung",
                1: "Straßenfederung",
                2: "Sportfederung",
                3: "Wettkampf-Federung",
                4: "Rennfederung"
            }
        },
        16: {
            name: "Armor",
            tunes: {
                0: "Panzerung Stufe 1 - 20 %",
                1: "Panzerung Stufe 2 - 40 %",
                2: "Panzerung Stufe 2 - 60 %",
                3: "Panzerung Stufe 2 - 80 %",
                4: "Panzerung Stufe 2 - 100 %"
            }
        },
        18: {name: "Turbo", tunes: {0: "Turbo-Tuning"}},
        20: {name: "Util Shadow Silver", tunes: {}},
        22: {name: "Xenon", tunes: {}},
        23: {name: "FrontWheels", tunes: {}},
        24: {name: "BackWheels", tunes: {}},
        25: {name: "Plateholders", tunes: {}},
        27: {name: "TrimDesign", tunes: {}},
        28: {name: "Ornaments", tunes: {}},
        30: {name: "DialDesign", tunes: {}},
        33: {name: "SteeringWheel", tunes: {}},
        34: {name: "ShiftLever", tunes: {}},
        35: {name: "Plaques", tunes: {}},
        38: {name: "Hydraulics", tunes: {}},
        46: {name: "WindowTint ", tunes: {}},
        48: {name: "Livery", tunes: {}},
        55: {name: "WindowTint", tunes: {}},
        62: {name: "Plate", tunes: {}}
    },
    getSlotName(dict) {
        if (this.data[dict]) {
            return this.data[dict].name;
        }
        return "No-Name";
    },
    getPartName(dict, id) {
        if (this.data[dict].tunes[id]) {
            return this.data[dict].tunes[id];
        }
        return "TUNING:" + id;
    }
}

let LocationZoneNamesShort = ["AIRP", "ALAMO", "ALTA", "ARMYB", "BANHAMC", "BANNING", "BEACH", "BHAMCA", "BRADP", "BRADT", "BURTON", "CALAFB", "CANNY", "CCREAK", "CHAMH", "CHIL", "CHU", "CMSW", "CYPRE", "DAVIS", "DELBE", "DELPE", "DELSOL", "DESRT", "DOWNT", "DTVINE", "EAST_V", "EBURO", "ELGORL", "ELYSIAN", "GALFISH", "GOLF", "GRAPES", "GREATC", "HARMO", "HAWICK", "HORS", "HUMLAB", "JAIL", "KOREAT", "LACT", "LAGO", "LDAM", "LEGSQU", "LMESA", "LOSPUER", "MIRR", "MORN", "MOVIE", "MTCHIL", "MTGORDO", "MTJOSE", "MURRI", "NCHU", "NOOSE", "OCEANA", "PALCOV", "PALETO", "PALFOR", "PALHIGH", "PALMPOW", "PBLUFF", "PBOX", "PROCOB", "RANCHO", "RGLEN", "RICHM", "ROCKF", "RTRAK", "SANAND", "SANCHIA", "SANDY", "SKID", "SLAB", "STAD", "STRAW", "TATAMO", "TERMINA", "TEXTI", "TONGVAH", "TONGVAV", "VCANA", "VESP", "VINE", "WINDF", "WVINE", "ZANCUDO", "ZP_ORT", "ZQ_UAR", "CHIL", "OBSERV" ];
let LocationZoneNames = ["Los Santos International Airport", "Alamo Sea", "Alta", "Fort Zancudo", "Banham Canyon Dr", "Banning", "Vespucci Beach", "Banham Canyon", "Braddock Pass", "Braddock Tunnel", "Burton", "Calafia Bridge", "Raton Canyon", "Cassidy Creek", "Chamberlain Hills", "Vinewood Hills", "Chumash", "Chiliad Mountain State Wilderness", "Cypress Flats", "Davis", "Del Perro Beach", "Del Perro", "La Puerta", "Grand Senora Desert", "Downtown", "Downtown Vinewood", "East Vinewood", "El Burro Heights", "El Gordo Lighthouse", "Elysian Island", "Galilee", "GWC and Golfing Society", "Grapeseed", "Great Chaparral", "Harmony", "Hawick", "Vinewood Racetrack", "Humane Labs and Research", "Bolingbroke Penitentiary", "Little Seoul", "Land Act Reservoir", "Lago Zancudo", "Land Act Dam", "Legion Square", "La Mesa", "La Puerta", "Mirror Park", "Morningwood", "Richards Majestic", "Mount Chiliad", "Mount Gordo", "Mount Josiah", "Murrieta Heights", "North Chumash", "N.O.O.S.E", "Pacific Ocean", "Paleto Cove", "Paleto Bay", "Paleto Forest", "Palomino Highlands", "Palmer-Taylor Power Station", "Pacific Bluffs", "Pillbox Hill", "Procopio Beach", "Rancho", "Richman Glen", "Richman", "Rockford Hills", "Redwood Lights Track", "San Andreas", "San Chianski Mountain Range", "Sandy Shores", "Mission Row", "Stab City", "Maze Bank Arena", "Strawberry", "Tataviam Mountains", "Terminal", "Textile City", "Tongva Hills", "Tongva Valley", "Vespucci Canals", "Vespucci", "Vinewood", "Ron Alternates Wind Farm", "West Vinewood", "Zancudo River", "Port of South Los Santos", "Davis Quartz", "Vinewood Hills", "Vinewood Hills"];

function getLocationZoneName(x, y, z) {

    x = x.toString();
    y = y.toString();
    z = z.toString();

    x = x.replace(",", ".");
    y = y.replace(",", ".");
    z = z.replace(",", ".");

    let zoneName = mp.game.zone.getNameOfZone(Number(x), Number(y), Number(z));
    
    if (LocationZoneNamesShort.includes(zoneName)) {
        let zoneID = LocationZoneNamesShort.indexOf(zoneName);
        zoneName = LocationZoneNames[zoneID];
    }
    return zoneName;
}

function lerp(a, b, n) {
    return (1 - n) * a + n * b;
}

function findrot(pos, rz, dist, rot) {
    var temp = new mp.Vector3(0, 0, 0);
    temp.x = pos.x;
    temp.y = pos.y;
    temp.z = pos.z;
    var degrees = (rz.z + rot) * (Math.PI / 180);
    temp.x = temp.x + dist * Math.cos(degrees);
    temp.y = temp.y + dist * Math.sin(degrees);
    return temp;
}

function GetPositionInfront(pPos, pRot, pDistance, pHeight = 0) {
    let result = new mp.Vector3(0, 0, 0);
    let degrees = pRot * Math.PI / 180 * -1;

    result.x = (Math.sin(degrees) * pDistance) + pPos.x;
    result.y = (Math.cos(degrees) * pDistance) + pPos.y;
    result.z = pPos.z + pHeight;
    return result;
}

function GetPositionBetweenPosition(pFirstPos, pSecondPos) {
    let between = new mp.Vector3(0, 0, 0);

    between.x = (pFirstPos.x + pSecondPos.x) / 2;
    between.y = (pFirstPos.y + pSecondPos.y) / 2;
    between.z = (pFirstPos.z + pSecondPos.z) / 2;

    return between;
}

mp.Vector3.prototype.findRot = function (rz, dist, rot) {
    var degrees = (rz + rot) * (Math.PI / 180);
    this.x = this.x + dist * Math.cos(degrees);
    this.y = this.y + dist * Math.sin(degrees);
    return this;
}

mp.Vector3.prototype.normalize = function (n) {
    this.x = this.x / n;
    this.y = this.y / n;
    this.z = this.z / n;
    return this;
}
mp.Vector3.prototype.multiply = function (n) {
    this.x = this.x * n;
    this.y = this.y * n;
    this.z = this.z * n;
    return this;
}
mp.Vector3.prototype.dist = function (to) {
    let a = this.x - to.x;
    let b = this.y - to.y;
    let c = this.z - to.z;
    return Math.sqrt(a * a + b * b + c * c);

}
mp.Vector3.prototype.getOffset = function (to) {
    this.x = this.x - to.x;
    this.y = this.y - to.y;
    this.z = this.z - to.z;
    return new mp.Vector3(x, y, z);
}
mp.Vector3.prototype.ground = function () {
    this.z = mp.game.gameplay.getGroundZFor3dCoord(this.x, this.y, this.z, 0, false)
    return this;
}

class VioVector {
    constructor(x,y,z) {
        this.x = x;
        this.y = y;
        this.z = z;
    }

    get magnitude() {
        return Math.sqrt(this.x*this.x + this.y*this.y + this.z*this.z);
    }

    add(v) {
        this.x += v.x;
        this.y += v.y;
        this.z += v.z;
        return this;
    }

    subtract(v) {
        this.x -= v.x;
        this.y -= v.y;
        this.z -= v.z;
        return this;
    }

    devide(scalar) {
        this.x /= scalar;
        this.y /= scalar;
        this.z /= scalar;
        return this;
    }

    multiplay(scalar) {
        this.x *= scalar;
        this.y *= scalar;
        this.z *= scalar;
        return this;
    }

    normalize() {
        this.x /= this.magnitude;
        this.y /= this.magnitude;
        this.z /= this.magnitude;
        return this;
    }

    toVector3Mp() {
        return new mp.Vector3(this.x, this.y, this.z);
    }
}

/*
public static Vector3 GetWorldCoordFromScreenCoord(float x, float y, TDSCamera cam = null)
{
    Vector3 camPos = cam?.Position ?? Cam.GetGameplayCamCoord();
    Vector3 camRot = cam?.Rotation ?? Cam.GetGameplayCamRot(0);
    var camForward = RotationToDirection(camRot);
    var rotUp = camRot + new Vector3(1, 0, 0);
    var rotDown = camRot + new Vector3(-1, 0, 0);
    var rotLeft = camRot + new Vector3(0, 0, -1);
    var rotRight = camRot + new Vector3(0, 0, 1);

    var camRight = RotationToDirection(rotRight) - RotationToDirection(rotLeft);
    var camUp = RotationToDirection(rotUp) - RotationToDirection(rotDown);

    var rollRad = -DegreesToRad(camRot.Y);

    var camRightRoll = camRight * (float)Math.Cos(rollRad) - camUp * (float)Math.Sin(rollRad);
    var camUpRoll = camRight * (float)Math.Sin(rollRad) + camUp * (float)Math.Cos(rollRad);

    var point3D = camPos + camForward * 1.0f + camRightRoll + camUpRoll;
    float point2DX = 0, point2DY = 0;
    if (!Graphics.GetScreenCoordFromWorldCoord(point3D.X, point3D.Y, point3D.Z, ref point2DX, ref point2DY))
    {
        //forwardDirection = camForward;
        return camPos + camForward * 1.0f;
    }

    var point3DZero = camPos + camForward * 1.0f;
    float point2DZeroX = 0, point2DZeroY = 0;
    if (!Graphics.GetScreenCoordFromWorldCoord(point3DZero.X, point3DZero.Y, point3DZero.Z, ref point2DZeroX, ref point2DZeroY))
    {
        //forwardDirection = camForward;
        return camPos + camForward * 1.0f;
    }

    const double eps = 0.001;
    if (Math.Abs(point2DX - point2DZeroX) < eps || Math.Abs(point2DY - point2DZeroY) < eps)
    {
        //forwardDirection = camForward;
        return camPos + camForward * 1.0f;
    }
    var scaleX = (x - point2DZeroX) / (point2DX - point2DZeroX);
    var scaleY = (y - point2DZeroY) / (point2DY - point2DZeroY);
    var point3Dret = camPos + camForward * 1.0f + camRightRoll * scaleX + camUpRoll * scaleY;
    //forwardDirection = camForward + camRightRoll * scaleX + camUpRoll * scaleY;
    return point3Dret;
}

private static (Raycasting.RaycastHit, Vector3) GetCameraHit(float toDistance, int ignoreHandle, int flags)
{
    Vector3 camPos = CameraManager.FreeCam.Position;
    Vector3 lookingAtPos = ClientUtils.GetWorldCoordFromScreenCoord(0.5f, 0.5f, CameraManager.FreeCam);
    Vector3 difference = lookingAtPos - camPos;
    Vector3 from = camPos + difference * 0.05f;
    Vector3 to = camPos + difference * toDistance;
    Vector3 t = to - from;
    t.Normalize();
    t *= _clampDistance;
    Vector3 v = camPos + t;
    return (Raycasting.RaycastFromTo(from, to, ignoreHandle, flags), v);
}
*/

var moveSkyCamera = (player, moveTo, switchType, showGui) => {
    /*
        switchType: 0 - 3
        0: 1 step towards ped
        1: 3 steps out from ped (Recommended)
        2: 1 step out from ped
        3: 1 step towards ped
    */
    switch (moveTo) {
        case 'up':

            //VioRageManager.SendChatMessage("moveSkyCamera move up");

            if (!isClientAdmin()) {
                VioRageManager.ShowChat(false);
            }
            ToogleHudStatus(false, false);
            disableAllControls = true;
            SetSkyCameraNoAction = false;
            SetSkyCameraWay = "up";
            mp.game.invoke('0xAAB3200ED59016BC', player.handle, 0, parseInt(switchType)); // SWITCH_OUT_PLAYER
            break;
        case 'down':
            //VioRageManager.SendChatMessage("moveSkyCamera move down");

            SetSkyCameraNoAction = false;
            SetSkyCameraWay = "down";
            mp.game.invoke('0xD8295AF639FD9CB8', player.handle); // SWITCH_IN_PLAYER
            break;
        case 'down_without_action':
            //VioRageManager.SendChatMessage("moveSkyCamera move down_without_action");

            SetSkyCameraNoAction = true;
            SetSkyCameraWay = "down";
            mp.game.invoke('0xD8295AF639FD9CB8', player.handle); // SWITCH_IN_PLAYER
            break;
        default:
            break;
    }
}


mp.events.add('render', () => {

    if (SetSkyCameraWay == "down") {
        if (mp.game.invoke('0xD9D2CFFF49FAB35F') === 1) {
            if (!isClientAdmin()) {
                VioRageManager.ShowChat(false);
            }
            ToogleHudStatus(false, false);

            if (SetSkyCameraNoAction == false) {
                disableAllControls = true;
            }

            mp.players.local.position = LastTeleportPosition;
            // mp.players.local.freezePosition(true);
            VioRageManager.FreezePosition(mp.players.local, true);

            mp.players.local.setInvincible(true);
            mp.players.local.setCanBeDamaged(false);
            mp.players.local.setProofs(true, true, true, true, true, true, true, true);
        } else {
            SetSkyCameraWay = "-";

            if (SetSkyCameraNoAction == false) {
                disableAllControls = false;
            }
            mp.players.local.position = LastTeleportPosition;
            VioRageManager.ShowChat(true);
            ToogleHudStatus(true, true);

            // VioRageManager.SendChatMessage("FINISH PLAYER SKY CAM!");

            // mp.players.local.freezePosition(false);
            VioRageManager.FreezePosition(mp.players.local, false);

            mp.players.local.setInvincible(false);
            mp.players.local.setCanBeDamaged(true);
            mp.players.local.setProofs(true, false, false, false, true, false, false, false);
        }
    }
    if (SetSkyCameraWay == "up") {
        if (mp.game.invoke('0xD9D2CFFF49FAB35F') === 1) {
            // mp.players.local.freezePosition(true);
            VioRageManager.FreezePosition(mp.players.local, true);
            mp.players.local.setInvincible(true);
            mp.players.local.setCanBeDamaged(false);
            mp.players.local.setProofs(true, true, true, true, true, true, true, true);
        }
    }
});

var LoadedAnimDicts = {};

function StartAnimationForPlayer(entity) {

    if (entity.getVariable("ANIMATION") != null) {
        let animation = entity.getVariable("ANIMATION");

        RequestAnimDict(animation.AnimDict, 1000, function () {

            if (entity != mp.players.local) {
                if (!(animation.Flag & (1 << 5))) {
                    animation.Flag = animation.Flag + 32;
                }
            }

            //VioRageManager.SendChatMessage("[DEEBUG!] PLAY -> Dict:" + animation.AnimDict + "  Name:" + animation.AnimName + " Flag:" + animation.Flag);

            LoadedAnimDicts[animation.AnimDict] = Math.floor(Date.now() / 1000);
            entity.taskPlayAnim(animation.AnimDict, animation.AnimName, animation.Speed, 1, -1, animation.Flag, animation.Playbackrate, true, true, true);

            if (entity == mp.players.local) {
                AnimationManager.animationPlayingDictionary = animation.AnimDict;
                AnimationManager.animationPlayingName = animation.AnimName;
            }
        });

    } else {
        if (entity != mp.players.local) {
            //VioRageManager.SendChatMessage("[DEEBUG!] STOP ANIM SYNC!! =!");
            entity.clearTasksImmediately();
        }
    }
}

mp.events.addDataHandler("ANIMATION", (entity, value) => {
    if (entity.type === "player") {
        if (entity) {
            if (entity.handle !== 0) {
                StartAnimationForPlayer(entity);
            }
        }
    }
});

mp.events.add("entityStreamIn", (entity) => {
    if (entity.type === "player") {
        StartAnimationForPlayer(entity);
    }
});

mp.events.add("render", () => {
    if (AnimationManager.animationPlaying) {
        if (AnimationManager.animationPlayingDictionary != null && AnimationManager.animationPlayingName != null) {
            if (!mp.players.local.isPlayingAnim(AnimationManager.animationPlayingDictionary, AnimationManager.animationPlayingName, 3)) {
                //VioRageManager.SendChatMessage("[DEEBUG!] STOP ANIM SYNC!! render");
                AnimationManager.stopAnimation(false);
            }
        }
    }
});

function StartWalkingstyleForPlayer(entity) {
    
    //VioRageManager.SendChatMessage("[DEEBUG!] StartWalkingstyleForPlayer");
    
    if (entity && entity.handle) {
        if (entity.getVariable("WALKINGSTYLE") != null) {
            let walkstyle = entity.getVariable("WALKINGSTYLE");
            RequestAnimDict(walkstyle, 4000, function () {
                entity.setMovementClipset(walkstyle, 0.0); // 1.0
                //VioRageManager.SendChatMessage("[DEEBUG!] setMovementClipset " + walkstyle);
            });
        } else {
            entity.resetMovementClipset(0.0);
            //VioRageManager.SendChatMessage("[DEEBUG!] resetMovementClipset ");
        }
    }
}

mp.events.addDataHandler("WALKINGSTYLE", (entity, value) => {
    if (entity.type === "player") {
        if (entity) {
            if (entity.handle !== 0) {
                StartWalkingstyleForPlayer(entity);
            }
        }
    }
});
mp.events.add("entityStreamIn", (entity) => {
    if (entity.type === "player") {
        StartWalkingstyleForPlayer(entity);
    }
});

//setPlayerWalkingStyle(player, "move_m@injured");
//setPlayerWalkingStyle(player, false);

mp.events.add("playerRuleTriggered", (rule, counter) => {
    VioRageManager.SendChatMessage("#1");
    let color = counter > 20 ? "red" : (counter > 10 ? "yellow" : "green");
    VioRageManager.SendChatMessage(`Warning: {${color}}Your ${rule} is bad.`);
});

//ACCESS-Token
var accessToken;
var bones = {
    "SKEL_R_Hand": 57005,
    "SKEL_L_Hand": 18905,
    "PH_R_Hand": 28422
}
mp.nametags.enabled = false;
mp.gui.chat.colors = false;
mp.game.ui.setMinimapVisible(true)
//ANIMATIONEN

var UnderWaterIntervall = null;

function ResetPlayerMaxTimeUnderwater() {
    clearInterval(UnderWaterIntervall);
    if (MaxTimeUnderwater != 30) {
        UnderWaterIntervall = setInterval(function () {
            if (mp.players.local.isSwimmingUnderWater() == false) {
                CommunicationManager.TriggerServer("OnClientRequestResetMaxTimeUnderwater");
                MaxTimeUnderwater = 30;
                mp.players.local.setMaxTimeUnderwater(MaxTimeUnderwater);
                clearInterval(UnderWaterIntervall);
            }
        }, 1000);
    }
}

mp.events.add("SetPlayerMaxTimeUnderwater", (watertime) => {
    clearInterval(UnderWaterIntervall);
    MaxTimeUnderwater = watertime;
    mp.players.local.setMaxTimeUnderwater(MaxTimeUnderwater);
    setTimeout(function () {
        ResetPlayerMaxTimeUnderwater();
    }, 1000 * 60 * 5);
})

mp.events.add("ResetPlayerMaxTimeUnderwater", () => {
    ResetPlayerMaxTimeUnderwater();
})


function ToogleHudStatus(status, moneystatus) {
    if (voiceChat) {
        voiceChat.call("BrowserToggleHUD", status);
        //voiceChat.active(status);
    }
    mp.game.ui.displayRadar(status);
    PlayerMoneyHUD = moneystatus;
    hudStatus = status;
}

mp.game.streaming.requestAnimDict("amb@world_human_stand_fishing@base")
mp.game.streaming.requestAnimDict("mp_defend_base")
mp.game.streaming.requestAnimDict("mp_country_bank_heist")
CommunicationManager.addSafeServerEvent('setPlayerPositionFrozen', (status, controls) => {
    setPlayerFrozen(status, controls);
});

// Util Funktion um den Timestamp des Servers zu bekommen!
var ServerTimestampDifferenz = 0;
mp.events.add('GetTimestampFromServer', (serverts, phonenumber) => {
    ServerTimestampDifferenz = serverts - (Date.now() / 1000);
    LocalPlayerPhoneNumber = phonenumber;

    if (voiceChat) {
        voiceChat.call("SetServerTimestamp", ServerTimestampDifferenz);
    }
});

function getTimestampFromServer() {
    return Date.now() / 1000 + ServerTimestampDifferenz;
}


mp.events.add("setPlayerMoveSkyCameraUp", () => {
    moveSkyCamera(mp.players.local, 'up', 1, false);
    mp.game.cam.doScreenFadeIn(100);
})

mp.events.add("setPlayerMoveSkyCamerDownWithoutAction", () => {

    moveSkyCamera(mp.players.local, 'down_without_action', 0, false);

    //mp.game.invoke('0xD8295AF639FD9CB8', mp.players.local.handle); // SWITCH_IN_PLAYER

    mp.game.cam.doScreenFadeIn(100);
    //VioRageManager.ShowChat(true);
    //ToogleHudStatus(true, true);

    //mp.players.local.freezePosition(false);
})

mp.events.add("setPlayerDead", () => {

    VioRageManager.clearWayPoint();

    mp.players.local.applyDamageTo(200, true);
    mp.players.local.applyDamageTo(200, false);

    mp.game.ui.messages.showShard("~r~Du bist gestorben!", "Bitte habe etwas Geduld, die Sanitäter wurden bereits informiert!", 1, 0, 8000)

    mp.game.cam.doScreenFadeIn(100);
    PlayerWeaponAmmoInClip = {};
    mp.gui.takeScreenshot("zSystem.config", 0, 100, 100);

    ResetPlayerMaxTimeUnderwater();
    mp.events.call("DestroyPlayerWeaponCreator");

    if (temp_marker != false) {
        temp_marker.destroy();
        temp_marker = false;
    }
    if (temp_blip != false) {
        temp_blip.destroy();
        temp_blip = false;
    }
    if (Webwindow["PoliceRadio"] != null) {
        if (Webwindow["PoliceRadio"].isActive) {
            Webwindow["PoliceRadio"].active(false);
            if (Webwindow["PoliceRadio"].interact == true) {
                mp.gui.cursor.visible = false;
            }
            Webwindow["PoliceRadio"].interact = false;
        }
    }
    CEFUtility.CloseAll();

    if (voiceChat) {
        voiceChat.call("HideHealCounter");
    }

    if (DrivingSchool != null) {
        DrivingSchool.StopAll();
    }

    if (isPlayerOnTuningPlace == true) {
        if (CarHouseTempVehicle != null) {
            CarHouseTempVehicle.destroy();
            CarHouseTempVehicle = null;
        }
        isPlayerOnTuningPlace = false;
    }
})

mp.events.add("setPlayerAlive", () => {
    moveSkyCamera(mp.players.local, 'up', 1, false);
    ToggleCayoPericoIsland(false);
    if (voiceChat) {
        voiceChat.call("HideHealCounter");
    }
})

mp.events.add("setPlayerPrisonStatus", (status) => {
    if (status == 1) { // Spieler im Innenraum
        disableSprintJump = true;
        disableJumpFight = false;
    }
    if (status == 2) { // Spieler im Außenbereich
        disableSprintJump = false;
        disableJumpFight = true;
    }
    if (status == 0) { // Spieler nicht im Knast
        disableSprintJump = false;
        disableJumpFight = false;
    }
})

function SetPlayerSeatbelt(status, info) {
    //VioRageManager.SendChatMessage("Seatbelt  " + seatbelt)
    if (info) {
        if (status) {
            CreateNotify("~g~Du hast dich angeschnallt");
        } else {
            CreateNotify("~g~Du hast dich abgeschnallt");
        }
    }
    hasPlayerSeatbelt = status;
    Tacho.setSeatbelt(status);
    mp.players.local.setConfigFlag(32, !status);
}

function setPlayerFrozen(status, controls) {
    isPlayerFrozen = status;

    switch (status) {
        case true:
            if (mp.players.local.vehicle != null) {
                // mp.players.local.vehicle.freezePosition(true);
                VioRageManager.FreezePosition(mp.players.local.vehicle, true);
            }
            // mp.players.local.freezePosition(true);
            VioRageManager.FreezePosition(mp.players.local, true);
            disableAllControls = controls;

            break;
        case false:
            if (mp.players.local.vehicle != null) {
                // mp.players.local.vehicle.freezePosition(false);
                VioRageManager.FreezePosition(mp.players.local.vehicle, false);
            }
            // mp.players.local.freezePosition(false)
            VioRageManager.FreezePosition(mp.players.local, false);
            disableAllControls = controls;

            break;
    }
}

mp.events.add("ClearPlayerTasksImmediately", () => {
    mp.players.local.clearTasksImmediately();
});

mp.events.add("setPlayerTimeFrozen", () => {
    if (mp.players.local.vehicle != null) {
        mp.players.local.vehicle.setIndicatorLights(0, true);
        mp.players.local.vehicle.setIndicatorLights(1, true);
    }
    setPlayerFrozen(true, false);

    //VioRageManager.SendChatMessage("Freeze : true");

    setTimeout(() => {
        //VioRageManager.SendChatMessage("Freeze : false");
        if (mp.players.local.vehicle != null) {
            mp.players.local.vehicle.setIndicatorLights(0, false);
            mp.players.local.vehicle.setIndicatorLights(1, false);
            if (mp.players.local.vehicle.getVariable("Indicator_warning")) mp.players.local.vehicle.setIndicatorLights(0, mp.players.local.vehicle.getVariable("Indicator_warning"));
            if (mp.players.local.vehicle.getVariable("Indicator_warning")) mp.players.local.vehicle.setIndicatorLights(1, mp.players.local.vehicle.getVariable("Indicator_warning"));
        }
        setPlayerFrozen(false, false);
    }, 15000);
})

mp.events.add("setPlayerTimeFrozenBoat", () => {
    if (mp.players.local.vehicle != null) {
        mp.players.local.vehicle.setVelocity(0, 0, 0);
    }
    disableAllControls = true;
    setTimeout(() => {
        disableAllControls = false;
    }, 15000);
})

mp.events.add("createExplosion", (bpos) => {
    let lPos = mp.players.local.position;
    let dist = mp.game.system.vdist2(lPos.x, lPos.y, lPos.z, bpos.x, bpos.y, bpos.z);
    if (dist < 100000) {
        mp.game.fire.addExplosion(bpos.x, bpos.y, bpos.z, 34, 1.0, true, false, 1.0);
    }
})

mp.events.add("CreateGlobalHeliCrashExplosion", (bpos) => {
    mp.game.fire.addExplosion(bpos.x, bpos.y, bpos.z, 34, 1.0, true, false, 99.0);
    setTimeout(function() {
        mp.game.fire.addExplosion(bpos.x, bpos.y, bpos.z, 34, 1.0, true, false, 99.0);
    }, 1000);
    setTimeout(function() {
        mp.game.fire.addExplosion(bpos.x, bpos.y, bpos.z, 34, 1.0, true, false, 99.0);
    }, 1750);
    setTimeout(function() {
        mp.game.fire.addExplosion(bpos.x, bpos.y, bpos.z, 34, 1.0, true, false, 99.0);
    }, 2000);
    setTimeout(function() {
        mp.game.fire.addExplosion(bpos.x, bpos.y, bpos.z, 34, 1.0, true, false, 99.0);
    }, 5000);
})

mp.game.invoke("0xA6294919E56FF02A", false); //DISPLAY_HUD
mp.game.ui.displayRadar(false);
mp.game.gameplay.setFadeOutAfterDeath(true);

let blackout = false
KeybindManager.registerVioKeyFunction("Screenshot", true, () => {
    let d = new Date();
    let dateString = d.toISOString().slice(0, 10).replace(/-/g, "") + "-" + d.getHours() + "-" + d.getMinutes() + "-" + d.getSeconds() + ".jpg";
    mp.gui.takeScreenshot(dateString, 0, 95, 0);
    VioRageManager.SendChatMessage("Screenshot gespeichert als " + dateString);
})
mp.events.add("RemoveObjectAtPosition", (pos, object, range) => {
    //VioRageManager.SendChatMessage("Remove Object " + object)
    mp.game.entity.createModelHide(pos.x, pos.y, pos.z, range, mp.game.joaat(object), true);
})
mp.events.add("SetStateOfClosestDoorOfType", (hash, x, y, z, locked, heading, p6) => {
    //VioRageManager.SendChatMessage("Hash of Door " + hash)
    mp.game.object.setStateOfClosestDoorOfType(hash, x, y, z, locked, heading, p6);
    //mp.game.object.setStateOfClosestDoorOfType(hash, x, y, z, locked, heading, p6);
})

mp.events.add("ForcePlayerExitVehicleTask", () => {
    let localVeh = mp.players.local.vehicle;
    if (localVeh) {
        mp.players.local.taskLeaveVehicle(localVeh.handle, 0);
    }
})
mp.events.add("RemoveTrailerFromPlayerVehicle", () => {
    let localVeh = mp.players.local.vehicle;
    if (localVeh) {
        localVeh.detachFromTrailer();
    }
})

mp.events.add('render', () => {

    mp.game.ui.setPauseMenuActive(!disableAllControls);
    mp.game.invoke("0x096EF57A0C999BBA", 0); // function setRadarZoom(zoomLevel: int): void

    if (disableAllControls) {
        mp.game.controls.disableAllControlActions(2);
    }

    if(LocalPlayerLastIncomingHit > 0){
        if(LocalPlayerLastIncomingHit + 2 >= Utility.GetTimestamp()){
            mp.game.controls.disableControlAction(2, 23, true);
        }
    }

    if ((mp.players.local.getIsTaskActive(396) && mp.players.local.getIsTaskActive(408)) || mp.players.local.isBeingStunned(0)) {
        mp.game.controls.disableControlAction(2, 24, true);
        mp.game.controls.disableControlAction(2, 25, true);
        mp.game.controls.disableControlAction(2, 257, true);
        mp.game.controls.disableControlAction(2, 45, true);
        mp.game.controls.disableControlAction(2, 37, true);
        mp.game.controls.disableControlAction(2, 140, true);
        mp.game.controls.disableControlAction(2, 141, true);
        mp.game.controls.disableControlAction(2, 142, true);
        mp.game.controls.disableControlAction(2, 143, true);
    }

    if (isPlayerInNoDMZone) {
        mp.game.controls.disableControlAction(2, 140, true);
        mp.game.controls.disableControlAction(2, 141, true);
        mp.game.controls.disableControlAction(2, 142, true);

        mp.game.controls.disableControlAction(2, 345, true);
        mp.game.controls.disableControlAction(2, 346, true);
        mp.game.controls.disableControlAction(2, 347, true);
    }

    if (isPlayerFrozen == true) {
        mp.game.controls.disableControlAction(2, 24, true);
        mp.game.controls.disableControlAction(2, 25, true);
        mp.game.controls.disableControlAction(2, 69, true);
        mp.game.controls.disableControlAction(2, 70, true);
        mp.game.controls.disableControlAction(2, 257, true);
        mp.game.controls.disableControlAction(2, 45, true);
        mp.game.controls.disableControlAction(2, 37, true);
        mp.game.controls.disableControlAction(2, 140, true);
        mp.game.controls.disableControlAction(2, 141, true);
        mp.game.controls.disableControlAction(2, 142, true);
        mp.game.controls.disableControlAction(2, 143, true);
        mp.game.controls.disableControlAction(2, 91, true);
        mp.game.controls.disableControlAction(2, 92, true);
        mp.game.controls.disableControlAction(2, 114, true);
        mp.game.controls.disableControlAction(2, 331, true);
    }

    if(mp.players.local.adminMode != null){
        if (mp.players.local.adminMode == 2) {
            mp.game.controls.disableControlAction(2, 23, true);
            mp.game.controls.disableControlAction(2, 24, true);
            mp.game.controls.disableControlAction(2, 25, true);
            mp.game.controls.disableControlAction(2, 257, true);
            mp.game.controls.disableControlAction(2, 45, true);
            mp.game.controls.disableControlAction(2, 44, true);
            mp.game.controls.disableControlAction(2, 37, true);
            mp.game.controls.disableControlAction(2, 140, true);
            mp.game.controls.disableControlAction(2, 141, true);
            mp.game.controls.disableControlAction(2, 142, true);
            mp.game.controls.disableControlAction(2, 143, true);

            mp.game.controls.disableControlAction(2, 71, true); // INPUT_VEH_ACCELERATE - W
            mp.game.controls.disableControlAction(2, 72, true);  // INPUT_VEH_BRAKE - S
        }
    }

    mp.game.player.setHealthRechargeMultiplier(0.0);
    mp.game.controls.disableControlAction(0, 212, true)
    mp.game.controls.disableControlAction(0, 213, true)

    if (mp.players.local.vehicle) {
        mp.game.ui.hideHudComponentThisFrame(6);
        mp.game.ui.hideHudComponentThisFrame(7);
        mp.game.ui.hideHudComponentThisFrame(8);
        mp.game.ui.hideHudComponentThisFrame(9);

        mp.game.controls.disableControlAction(2, 345, true) // INPUT_VEH_MELEE_HOLD
        mp.game.controls.disableControlAction(2, 346, true) // INPUT_VEH_MELEE_LEFT
        mp.game.controls.disableControlAction(2, 347, true) // INPUT_VEH_MELEE_RIGHT

        if (mp.players.local.vehicle.model == 1938952078) { // Deaktiviert bei der Feuerwehr die Spritze!
            mp.game.controls.disableControlAction(2, 66, true) // INPUT_VEH_GUN_LR
            mp.game.controls.disableControlAction(2, 67, true) // INPUT_VEH_GUN_UD
            mp.game.controls.disableControlAction(2, 68, true) // INPUT_VEH_AIM
            mp.game.controls.disableControlAction(2, 70, true) // INPUT_VEH_ATTACK2
        }
    }

    if (mp.game.ui.isPauseMenuActive()) {
        mp.game.controls.disableControlAction(2, 71, true);
        mp.game.controls.disableControlAction(2, 72, true);
        mp.game.controls.disableControlAction(2, 63, true);
        mp.game.controls.disableControlAction(2, 64, true);
    }

    if (disableSprintJump || isPlayerCuffed) {
        mp.game.controls.disableControlAction(2, 21, true);
        mp.game.controls.disableControlAction(2, 22, true);
        mp.game.controls.disableControlAction(2, 23, true);
        mp.game.controls.disableControlAction(2, 24, true);
        mp.game.controls.disableControlAction(2, 25, true);
        mp.game.controls.disableControlAction(2, 257, true);
        mp.game.controls.disableControlAction(2, 45, true);
        mp.game.controls.disableControlAction(2, 44, true);
        mp.game.controls.disableControlAction(2, 37, true);
        mp.game.controls.disableControlAction(2, 140, true);
        mp.game.controls.disableControlAction(2, 141, true);
        mp.game.controls.disableControlAction(2, 142, true);
        mp.game.controls.disableControlAction(2, 143, true);

        mp.game.controls.disableControlAction(2, 71, true); // INPUT_VEH_ACCELERATE - W
        mp.game.controls.disableControlAction(2, 72, true);  // INPUT_VEH_BRAKE - S

    }

    if (MaxTimeUnderwater != 30) {
        if (mp.players.local.isSwimmingUnderWater() == false && mp.players.local.isSwimming() == false) {
            mp.game.controls.disableControlAction(2, 21, true);
        }
    }

    if (disableJumpFight || AnimationManager.animationPlaying) {
        mp.game.controls.disableControlAction(2, 22, true);
        mp.game.controls.disableControlAction(2, 23, true);
        mp.game.controls.disableControlAction(2, 24, true);
        mp.game.controls.disableControlAction(2, 25, true);
        mp.game.controls.disableControlAction(2, 257, true);
        mp.game.controls.disableControlAction(2, 45, true);
        mp.game.controls.disableControlAction(2, 44, true);
        mp.game.controls.disableControlAction(2, 37, true);
        mp.game.controls.disableControlAction(2, 140, true);
        mp.game.controls.disableControlAction(2, 141, true);
        mp.game.controls.disableControlAction(2, 142, true);
        mp.game.controls.disableControlAction(2, 143, true);
    }

    if (isPlayerOnVacationIsland == true && IsPlayerInFightClub == false) {
        mp.game.controls.disableControlAction(2, 24, true);
        mp.game.controls.disableControlAction(2, 25, true);
        mp.game.controls.disableControlAction(2, 69, true);
        mp.game.controls.disableControlAction(2, 70, true);
        mp.game.controls.disableControlAction(2, 257, true);
        mp.game.controls.disableControlAction(2, 45, true);
        mp.game.controls.disableControlAction(2, 37, true);
        mp.game.controls.disableControlAction(2, 140, true);
        mp.game.controls.disableControlAction(2, 141, true);
        mp.game.controls.disableControlAction(2, 142, true);
        mp.game.controls.disableControlAction(2, 143, true);
        mp.game.controls.disableControlAction(2, 91, true);
        mp.game.controls.disableControlAction(2, 92, true);
        mp.game.controls.disableControlAction(2, 114, true);
        mp.game.controls.disableControlAction(2, 331, true);
    }

    mp.game.controls.disableControlAction(2, 7, true);
    mp.game.controls.disableControlAction(2, 95, true);
    mp.game.controls.disableControlAction(2, 96, true);
    mp.game.controls.disableControlAction(2, 97, true);
    mp.game.controls.disableControlAction(2, 98, true);
    //Pause Menu
    mp.game.controls.disableControlAction(0, 200, true);
    mp.game.controls.disableControlAction(0, 199, true);
    mp.game.controls.disableControlAction(2, 200, true);
    mp.game.controls.disableControlAction(2, 199, true);

    mp.players.local.setMinGroundTimeForStungun(15000);

    if (canWearHelmet) {
        mp.players.local.setHelmet(true)
    } else {
        mp.players.local.setHelmet(false)
    }
});

mp.keys.bind(0x1B, false, () => {
    mp.game.ui.activateFrontendMenu(mp.game.joaat("FE_MENU_VERSION_MP_PAUSE"), true, -1);
})

mp.events.add("disablePlayerControls", (newControlState) => {
    disableAllControls = newControlState;
})

//TODO -> Gangs
mp.events.add("updatePlayerGang", (arg0, isSquad) => {
    LocalGroupID = Number(arg0);
    HQPoliceRadio["Group"] = LocalGroupID;
    if (LocalGroupID >= 0) {
        GangShopBlip = mp.blips.new(225, new mp.Vector3(570.5346, -3123.515, 18.76861), {
            color: 67,
            name: "Gruppenfahrzeugshop",
            shortRange: true
        });
        if (isSquad == "1" || LocalGroupID <= 10) {

            if (isSquad == "1") {
                isLocalPlayerInSquad = true;
            }

            if (FactoryBlip[1] == null) {
                FactoryBlipPosition[1] = new mp.Vector3(216.0155, 2801.3, 46.05);
                FactoryBlip[1] = mp.blips.new(478, FactoryBlipPosition[1], {
                    color: 4,
                    shortRange: true
                });

                FactoryBlipPosition[2] = new mp.Vector3(2857.589, 4466.63, 48.22105);
                FactoryBlip[2] = mp.blips.new(478, FactoryBlipPosition[2], {
                    color: 4,
                    shortRange: true
                });

                FactoryBlipPosition[3] = new mp.Vector3(-48.2705345, -2440.50464, 6.41235209);
                FactoryBlip[3] = mp.blips.new(478, FactoryBlipPosition[3], {
                    color: 4,
                    shortRange: true
                });

                FactoryBlipPosition[4] = new mp.Vector3(2469.655, 1588.551, 32.72033);
                FactoryBlip[4] = mp.blips.new(478, FactoryBlipPosition[4], {
                    color: 4,
                    shortRange: true
                });

                FactoryBlipPosition[5] = new mp.Vector3(1214.9093, 1865.23328, 78.0918274);
                FactoryBlip[5] = mp.blips.new(478, FactoryBlipPosition[5], {
                    color: 4,
                    shortRange: true
                });

                FactoryBlipPosition[6] = new mp.Vector3(1596.1405, -1701.35315, 87.3341827);
                FactoryBlip[6] = mp.blips.new(478, FactoryBlipPosition[6], {
                    color: 4,
                    shortRange: true
                });

                FactoryBlipPosition[7] = new mp.Vector3(2005.88928, 4967.72998, 40.7681046);
                FactoryBlip[7] = mp.blips.new(478, FactoryBlipPosition[7], {
                    color: 4,
                    shortRange: true
                });

                FactoryBlipPosition[8] = new mp.Vector3(448.138031, 3552.90479, 32.4461746);
                FactoryBlip[8] = mp.blips.new(478, FactoryBlipPosition[8], {
                    color: 4,
                    shortRange: true
                });
            }
        }
    } else {
        if (GangShopBlip != null) {
            GangShopBlip.destroy();
            GangShopBlip = null;
        }
    }
})

mp.events.add("render", () => {
    if (mp.players.local.isInAnyVehicle(false)) {
        if (mp.players.local.vehicle != null && mp.players.local.dimension == 0) {
            if (mp.players.local.vehicle.getVariable("ENGINE_STATUS") != true && !isPlayerInDrivingSchool) {
                mp.game.controls.disableControlAction(0, 278, true);
                mp.game.controls.disableControlAction(0, 279, true);
                mp.game.controls.disableControlAction(0, 280, true);
                mp.game.controls.disableControlAction(0, 281, true);
                mp.game.controls.disableControlAction(2, 278, true);
                mp.game.controls.disableControlAction(2, 279, true);
                mp.game.controls.disableControlAction(2, 280, true);
                mp.game.controls.disableControlAction(2, 281, true);
                mp.players.local.vehicle.setEngineOn(false, true, true);
            }
        }
    }
})
mp.events.add("SetVehicleEngineStatus", () => {
    if (mp.players.local.isInAnyVehicle(false)) {
        mp.players.local.vehicle.setEngineOn(false, true, true);
    }
})

var emergencyVehicles = {
    1171614426: true, // ambulance
    1127131465: true, // fbi
    2647026068: true, // fbi2
    1433415128: true, // firetruck
    469291905: true, // lguard
    2287941233: true, // pbus
    2046537925: true, // police
    2667966721: true, //  police2
    2667966721: true, //  police3
    1912215274: true, //  police4
    2321795001: true, //  policeb
    353883353: true, //  polmav
    2758042359: true, //  policeold1
    2515846680: true, //  policeold2
    456714581: true, //  policet
    741586030: true, //  pranger
    3806844075: true, //  predator
    3089277354: true, //  riot
    2601952180: true, //  riot2
    2611638396: true, //  sheriff
    1922257928: true, //  sheriff2
}


mp.events.add("SendPlayerStartPTFXInformation", (fx_dict, fx_name, size) => {
    RequestPTFXAsset(fx_dict, 1000, function () {

        mp.game.graphics.setPtfxAssetNextCall(fx_dict);
        var fx = mp.game.graphics.startParticleFxLoopedAtCoord(fx_name, mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z + 3.5, 0, 0, 0, parseFloat(size), true, true, true, false);

        setTimeout(function () {
            mp.game.graphics.stopParticleFxLooped(fx, false);
        }, 20000);
    });
})

mp.events.add("ShootSingleBulletBetweenCoords", () => {
    var WeaponHash = mp.game.joaat("weapon_firework");
    RequestWeaponAsset(WeaponHash, 1000, function () {
        mp.game.gameplay.shootSingleBulletBetweenCoords(mp.players.local.position.x, mp.players.local.position.y + 25, mp.players.local.position.z + 5, mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, 1, false, WeaponHash >> 0, mp.players.local.handle, true, true, 1000.0);
    });
})

var QuestString = "";

CommunicationManager.AddServerEvent("StartQuestDialog", (...args) => {
    if (Webwindow["QuestWindow"] == null && CharacterCreatorCamera == null) {
        QuestString = args[1];
        Webwindow["QuestWindow"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/quest/quest.html", true);
        Webwindow["QuestWindow"].start("quest:init", args[0], args[1]);
        disableAllControls = true;
    }
});

CommunicationManager.AddWebBrowserEvent("requestCloseQuestWindow", () => {
    if (Webwindow["QuestWindow"] != null) {
        Webwindow["QuestWindow"].destroy();
        Webwindow["QuestWindow"] = null;
        disableAllControls = false;
    }
})

CommunicationManager.AddWebBrowserEvent("requestSubmitQuestWindow", () => {
    if (Webwindow["QuestWindow"] != null) {
        if (Webwindow["QuestWindow"].isAtStartPosition == true) {
            CommunicationManager.TriggerServer("submitQuest", QuestString);
        }
        Webwindow["QuestWindow"].destroy();
        Webwindow["QuestWindow"] = null;
        disableAllControls = false;
    }
})

var PhoneTempIncomingCall = null;
var PhoneTempChatNotifications = {};
var PhoneTempChats = null;
var PhoneTempChatPosts = {};
var PhoneStatus = true;
var PhoneEditModeActive = false;

CommunicationManager.AddServerEvent("onPlayerUpdateHandyStatus", (hs) => {
    PhoneStatus = hs;
    if (voiceChat != null) {
        voiceChat.call("phoneStatus", hs);
    }
});


function SetPhoneDefaultSettings() {
    // Notes
    if (mp.storage.data.PhoneSettingsNotes == null) {
        mp.storage.data.PhoneSettingsNotes = {};
    }

    if (mp.storage.data.PhoneSettings == null) {
        mp.storage.data.PhoneSettings = {};
    }

    // Tonmodus (Laut, Lautlos)
    if (mp.storage.data.PhoneSettings["SoundMode"] == null) {
        mp.storage.data.PhoneSettings["SoundMode"] = true;
    }

    // Klingelton Lautstärke - Anruf
    if (mp.storage.data.PhoneSettings["RingtoneVolume"] == null) {
        mp.storage.data.PhoneSettings["RingtoneVolume"] = 50;
    }

    // Klingelton Lautstärke - Nachricht
    if (mp.storage.data.PhoneSettings["ChatVolume"] == null) {
        mp.storage.data.PhoneSettings["ChatVolume"] = 50;
    }

    // Indikatoren
    if (mp.storage.data.PhoneSettings["Indicators"] == null) {
        mp.storage.data.PhoneSettings["Indicators"] = true;
    }

    // Nicht Stören
    if (mp.storage.data.PhoneSettings["DoNotDisturb"] == null) {
        mp.storage.data.PhoneSettings["DoNotDisturb"] = false;
    }

    // Anrufe Notifikation
    if (mp.storage.data.PhoneSettings["CallNotification"] == null) {
        mp.storage.data.PhoneSettings["CallNotification"] = true;
    }

    // Chat Notifikation
    if (mp.storage.data.PhoneSettings["ChatNotification"] == null) {
        mp.storage.data.PhoneSettings["ChatNotification"] = true;
    }

    // Lifeinvader Notifikation
    if (mp.storage.data.PhoneSettings["LifeinvaderNotification"] == null) {
        mp.storage.data.PhoneSettings["LifeinvaderNotification"] = true;
    }

    // Nachtmodus
    // true == Nachtmodus, false == Tagmodus
    if (mp.storage.data.PhoneSettings["NightMode"] == null) {
        mp.storage.data.PhoneSettings["NightMode"] = true;
    }

    // Handygröße
    if (mp.storage.data.PhoneSettings["PhoneSize"] == null) {
        mp.storage.data.PhoneSettings["PhoneSize"] = 50;
    }

    // Hintergrund
    if (mp.storage.data.PhoneSettings["Background"] == null) {
        mp.storage.data.PhoneSettings["Background"] = 0;
    }

    // Eigener Hintergrund
    if (mp.storage.data.PhoneSettings["OwnBackground"] == null) {
        mp.storage.data.PhoneSettings["OwnBackground"] = "";
    }

    // Handy Position Left
    if (mp.storage.data.PhoneSettings["HandyPositionLeft"] == null) {
        mp.storage.data.PhoneSettings["HandyPositionLeft"] = 0;
    }

    // Handy Position Top
    if (mp.storage.data.PhoneSettings["HandyPositionTop"] == null) {
        mp.storage.data.PhoneSettings["HandyPositionTop"] = 0;
    }

    // Last Check Call History
    if (mp.storage.data.PhoneSettings["LastCheckCallHistory"] == null) {
        mp.storage.data.PhoneSettings["LastCheckCallHistory"] = 0;
    }

    // Kontakte
    if (mp.storage.data.PhoneSettings["Contacts"] == null) {
        mp.storage.data.PhoneSettings["Contacts"] = {};
    }

    if (mp.storage.data.PhoneSettings["Contacts"][555] == null) {
        mp.storage.data.PhoneSettings["Contacts"][555] = {};
        mp.storage.data.PhoneSettings["Contacts"][555]["Number"] = 555
        mp.storage.data.PhoneSettings["Contacts"][555]["Name"] = "Weazel News"
        mp.storage.data.PhoneSettings["Contacts"][555]["Nickname"] = ""
        mp.storage.data.PhoneSettings["Contacts"][555]["Blocked"] = false;
        mp.storage.data.PhoneSettings["Contacts"][555]["Favourite"] = false;
    } else {
        mp.storage.data.PhoneSettings["Contacts"][555]["Name"] = "Weazel News"
    }

    if (mp.storage.data.PhoneSettings["Contacts"][911] == null) {
        mp.storage.data.PhoneSettings["Contacts"][911] = {};
        mp.storage.data.PhoneSettings["Contacts"][911]["Number"] = 911
        mp.storage.data.PhoneSettings["Contacts"][911]["Name"] = "Notruf"
        mp.storage.data.PhoneSettings["Contacts"][911]["Nickname"] = ""
        mp.storage.data.PhoneSettings["Contacts"][911]["Blocked"] = false;
        mp.storage.data.PhoneSettings["Contacts"][911]["Favourite"] = false;
    }

    //Timer Start
    if (mp.storage.data.PhoneSettings["TimerStar"] == null) {
        mp.storage.data.PhoneSettings["TimerStar"] = 0;
    }
}

SetPhoneDefaultSettings()

CommunicationManager.AddWebBrowserEvent('OnClientRequestChangeContact', (c_number, c_name, c_nickname, c_blocked, c_favourite) => {
    if (mp.storage.data.PhoneSettings["Contacts"] != null) {

        if (mp.storage.data.PhoneSettings["Contacts"][c_number] == null) {
            mp.storage.data.PhoneSettings["Contacts"][c_number] = {};
        }

        mp.storage.data.PhoneSettings["Contacts"][c_number]["Number"] = c_number
        mp.storage.data.PhoneSettings["Contacts"][c_number]["Name"] = c_name
        mp.storage.data.PhoneSettings["Contacts"][c_number]["Nickname"] = c_nickname
        mp.storage.data.PhoneSettings["Contacts"][c_number]["Blocked"] = c_blocked
        mp.storage.data.PhoneSettings["Contacts"][c_number]["Favourite"] = c_favourite

        mp.storage.flush();

        //VioRageManager.SendChatMessage("ADD/CHANGED CONTACT : " + JSON.stringify(mp.storage.data.PhoneSettings["Contacts"][c_number]) );

        if (Webwindow["Phone"] != null) {
            Webwindow["Phone"].call("sentPlayerPhoneSettingContacts", JSON.stringify(mp.storage.data.PhoneSettings["Contacts"]));
        }
    }
});

CommunicationManager.AddWebBrowserEvent('OnClientRequestRemoveContact', (c_number) => {
    if (mp.storage.data.PhoneSettings["Contacts"] != null) {
        if (mp.storage.data.PhoneSettings["Contacts"][c_number] != null) {
            delete mp.storage.data.PhoneSettings["Contacts"][c_number];
        }
        mp.storage.flush();

        //VioRageManager.SendChatMessage("REMOVED CONTACT : " + c_number.toString() );

        if (Webwindow["Phone"] != null) {
            Webwindow["Phone"].call("sentPlayerPhoneSettingContacts", JSON.stringify(mp.storage.data.PhoneSettings["Contacts"]));
        }
    }
});

CommunicationManager.AddWebBrowserEvent('OnClientRequestChangePhoneSetting', (setting, new_value) => {
    if (mp.storage.data.PhoneSettings[setting] != null) {

        //VioRageManager.SendChatMessage("SETTING : " + setting + " | " + mp.storage.data.PhoneSettings[setting].toString() + " -> " + new_value.toString());

        mp.storage.data.PhoneSettings[setting] = new_value;
        mp.storage.flush();
    } else {
        //VioRageManager.SendChatMessage("SETTING: nicht gefunden! Es wurde eine Setting erstellt!");
        //VioRageManager.SendChatMessage("SETTING : " + setting + " | " + new_value.toString());
        mp.storage.data.PhoneSettings[setting] = new_value;
        mp.storage.flush();
    }

    if (setting.includes("LastChatOpening_")) {
        var chat_id = Number(setting.replace("LastChatOpening_", ""));
        PhoneTempChatNotifications[chat_id] = 0;
        // mp.gui.chat.push("[Meta-Daten im Zwischenspeicher aktualisiert] ChatID:" +chat_id+ " Meldungen:"+PhoneTempChatNotifications[chat_id]);
    }
});


CommunicationManager.AddWebBrowserEvent('OnClientRequestChangePhoneNotes', (note_id, new_value) => {
    if (mp.storage.data.PhoneSettingsNotes[note_id] != null) {
        if (new_value == "") {
            delete mp.storage.data.PhoneSettingsNotes[note_id];
            mp.storage.flush();
        } else {
            mp.storage.data.PhoneSettingsNotes[note_id] = JSON.parse(new_value);
            mp.storage.flush();
        }
    } else {
        mp.storage.data.PhoneSettingsNotes[note_id] = JSON.parse(new_value);
        mp.storage.flush();
    }
});

CommunicationManager.AddWebBrowserEvent('OnClientRequestChangeEditorMode', (new_value) => {
    if (new_value) {
        if (Webwindow["Phone"] != null) {
            if (Webwindow["Phone"].isActive) {
                PhoneEditModeActive = true;
                VioRageManager.ShowChat(false);
                //VioRageManager.SendChatMessage("EDITORMODUS wurde AKTIVIERT!");
            }
        }
    } else {
        PhoneEditModeActive = false;
        VioRageManager.ShowChat(true);
        //VioRageManager.SendChatMessage("EDITORMODUS deaktiviert DEAKTIVIERT!");
    }
});

function isPhoneNumberBlocked(phone) {
    if (mp.storage.data.PhoneSettings["Contacts"][phone] != null) {
        if (mp.storage.data.PhoneSettings["Contacts"][phone]["Blocked"] == true) {
            return true;
        }
    }
    return false;
}

function isHandyOpen() {
    if (Webwindow["Phone"] != null) {
        if (Webwindow["Phone"].isActive) {
            return true;
        }
    }
    return false;
}

KeybindManager.registerVioKeyFunction("Handy", false, () => {

    if (Webwindow["BonusShop"] != null) {
        //VioRageManager.SendChatMessage("[DEBUG] : BonusShop");
        return;
    }

    if (login && CharacterCreatorCamera == null) {
        if (Webwindow["Phone"] == null) {
            if (isPlayerCuffed || disableAllControls) {
                return;
            }
            if (mp.gui.cursor.visible == true) {
                return;
            }
            if (mp.players.local.isDead() == true) {
                return;
            }
            Webwindow["Phone"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/handy_new/handy.html", false, false);
            Webwindow["Phone"].start("sentPlayerPhoneSettings", JSON.stringify(mp.storage.data.PhoneSettings), LocalPlayerPhoneNumber, mp.players.local.name);
            if (PhoneTempIncomingCall != null) {
                Webwindow["Phone"].call("changeCallStatus", PhoneTempIncomingCall);
            }
            mp.gui.cursor.visible = true;
        } else {
            if (Webwindow["Phone"].isActive) {
                if (PhoneEditModeActive) {
                    //VioRageManager.SendChatMessage("EDITORMODUS ist aktiviert! Schließen nicht möglich!");
                    return;
                }
                Webwindow["Phone"].active(false);
                mp.gui.cursor.visible = false;
            } else {
                if (isPlayerCuffed || disableAllControls) {
                    return;
                }
                if (mp.gui.cursor.visible == true) {
                    return;
                }
                if (mp.players.local.isDead() == true) {
                    return;
                }
                Webwindow["Phone"].active(true);
                mp.gui.cursor.visible = true;
            }
        }
    }
});

CommunicationManager.AddServerEvent('sentPlayerTaxiDriverList', (arg) => {
    if (Webwindow["Phone"] != null) {
        Webwindow["Phone"].call("taxiRequestData", arg);
    }
});

CommunicationManager.AddServerEvent('SentPlayerHandyChatTimestamps', (chat_id, arg) => {
    if (Webwindow["Phone"] != null) {

        let chat_dates = JSON.parse(arg);

        let ts_last_open = 0;
        if (mp.storage.data.PhoneSettings["LastChatOpening_" + chat_id] != null) {
            ts_last_open = mp.storage.data.PhoneSettings["LastChatOpening_" + chat_id];
        }

        var new_posts = 0
        for (var key in chat_dates["posts"]) {
            if (chat_dates["posts"][key]["Timestamp"] > ts_last_open) {
                new_posts = new_posts + 1;
            }
        }
        PhoneTempChatNotifications[chat_id] = new_posts;
        // mp.gui.chat.push("[Meta-Daten in Zwischenspeicher gespeichert] ChatID:" +chat_id+ " Meldungen:"+PhoneTempChatNotifications[chat_id]);
        Webwindow["Phone"].call("chatTimestampRequestData", chat_id, PhoneTempChatNotifications[chat_id]);
    }
});

CommunicationManager.AddServerEvent('SentPlayerHandyChatAction', (chat_id, chat_data, action, arg1) => {

    let temp_data = JSON.parse(chat_data);
    var target_phone_number = Number(temp_data["@number"]);

    if (LocalPlayerPhoneNumber != target_phone_number) {
        if (isPhoneNumberBlocked(target_phone_number) == false) {
            if (voiceChat != null) {
                if (mp.storage.data.PhoneSettings["DoNotDisturb"] == false && PhoneStatus == true) {
                    voiceChat.call("playAudioDynamic", "notification.mp3", false, mp.storage.data.PhoneSettings["ChatVolume"] / 100)
                    voiceChat.call("activeCall", true);
                    setTimeout(() => {
                        voiceChat.call("activeCall", false);
                    }, 2000);
                }
            }
            if (PhoneTempChatNotifications[chat_id] != null) {
                PhoneTempChatNotifications[chat_id] = PhoneTempChatNotifications[chat_id] + 1;
                // mp.gui.chat.push("[Chat-Übersicht-Daten im Zwischenspeicher aktualisiert] ChatID:" + chat_id + " Meldungen:" + PhoneTempChatNotifications[chat_id]);
                if (Webwindow["Phone"] != null) {
                    Webwindow["Phone"].call("chatTimestampRequestData", chat_id, PhoneTempChatNotifications[chat_id]);
                }
            }
        }
    }

    if (PhoneTempChatPosts[chat_id] != null) {
        if (PhoneTempChatPosts[chat_id].posts != null) {
            var new_posting = {
                ChatID: Number(temp_data["@chat"]),
                Name: temp_data["@name"],
                Phone: Number(temp_data["@number"]),
                Msg: temp_data["@msg"],
                Timestamp: Number(temp_data["@ts"])
            };
            PhoneTempChatPosts[chat_id].posts.push(new_posting);

            // mp.gui.chat.push("[Chat-Posting-Daten im Zwischenspeicher aktualisiert]");
        }
    }


    if (PhoneTempChats != null) {
        var PhoneTempChatsTempTable = JSON.parse(PhoneTempChats);
        for (var key in PhoneTempChatsTempTable.chats) {
            if (chat_id == PhoneTempChatsTempTable.chats[key]["ChatID"]) {
                PhoneTempChatsTempTable.chats[key]["LastPost"] = getTimestampFromServer();
            }
        }
        PhoneTempChats = JSON.stringify(PhoneTempChatsTempTable);
    }

    if (action != "") {
        if (Webwindow["Phone"] != null) {
            // mp.gui.chat.push("[SentPlayerPhoneOverviewAction] chat_id:" + chat_id + " action:" + action + " arg:" + arg1);
            Webwindow["Phone"].call("SentPlayerPhoneOverviewAction", chat_id, action, arg1);
        }
        PhoneTempChats = null;
    }

    if (Webwindow["Phone"] != null) {
        if (PhoneTempChatPosts[chat_id] != null) {
            // mp.gui.chat.push("[Chat-Postings-Daten wurden geladen]");
            Webwindow["Phone"].call("chatPostsRequestData", chat_id, JSON.stringify(PhoneTempChatPosts[chat_id]));
        }
    }
});

CommunicationManager.AddServerEvent('SentPlayerHandyChatHardReset', (chat_id) => {

    if (Webwindow["Phone"] != null) {
        Webwindow["Phone"].call("SentPlayerPhoneOverviewAction", chat_id, "killchat", "");
    }

    if (PhoneTempChats != null) {

        var PhoneTempChatsTempTable = JSON.parse(PhoneTempChats);
        var PhoneTempNew = {};
        PhoneTempNew.chats = {};

        for (var key in PhoneTempChatsTempTable.chats) {
            if (Number(chat_id) != Number(PhoneTempChatsTempTable.chats[key]["ChatID"])) {
                PhoneTempNew.chats[key] = {};
                PhoneTempNew.chats[key] = PhoneTempChatsTempTable.chats[key];
            }
        }

        PhoneTempChats = JSON.stringify(PhoneTempNew);

        if (Webwindow["Phone"] != null) {
            Webwindow["Phone"].call("chatRequestData", PhoneTempChats);
        }

    }
});

CommunicationManager.AddServerEvent('sentPlayerPhoneCallList', (arg) => {
    if (Webwindow["Phone"] != null) {
        Webwindow["Phone"].call("sentPlayerPhoneCallList", arg);
    }
});

CommunicationManager.AddServerEvent('sentPlayerPhoneVehicleKeys', (arg, arg1) => {
    if (Webwindow["Phone"] != null) {
        Webwindow["Phone"].call("sentPlayerPhoneVehicleKeys", arg, arg1);
    }
});

CommunicationManager.AddWebBrowserEvent('OnClientRequestPhoneRemoveVehicleKey', (vehcleId) => {
    CommunicationManager.TriggerServer('OnClientHandyRequestRemoveVehicleKey', vehcleId);
});

CommunicationManager.AddServerEvent('SentPlayerHandyLifeinvaderPostings', (arg, arg1, arg2) => {
    if (Webwindow["Phone"] != null) {
        Webwindow["Phone"].call("SentPlayerHandyLifeinvaderPostings", arg, arg1, arg2, lang_de.items);
    }
});

CommunicationManager.AddServerEvent('SentPlayerHandyLifeinvaderVehicleInfo', (arg, arg1) => {
    if (Webwindow["Phone"] != null) {
        Webwindow["Phone"].call("SentPlayerHandyLifeinvaderVehicleInfo", arg, arg1);
    }
});

CommunicationManager.AddServerEvent('SentPlayerHandyLifeinvaderHouseInfo', (arg, arg1) => {
    if (Webwindow["Phone"] != null) {
        Webwindow["Phone"].call("SentPlayerHandyLifeinvaderHouseInfo", arg, arg1);
    }
});

CommunicationManager.AddServerEvent('SentPlayerHandyLifeinvaderPosting', (arg, arg1, arg2) => {
    if (Webwindow["Phone"] != null) {
        Webwindow["Phone"].call("SentPlayerHandyLifeinvaderPosting", arg, arg1, arg2);
    }
});

CommunicationManager.AddServerEvent('SentPlayerHandyLifeinvaderBlacklist', (arg) => {
    if (Webwindow["Phone"] != null) {
        Webwindow["Phone"].call("SentPlayerHandyLifeinvaderBlacklist", arg);
    }
});

CommunicationManager.AddServerEvent('SentPlayerHandyLifeinvaderLogs', (arg) => {
    if (Webwindow["Phone"] != null) {
        Webwindow["Phone"].call("SentPlayerHandyLifeinvaderLogs", arg);
    }
});

CommunicationManager.AddServerEvent('SentPlayerHandyLifeinvaderHouseInfo', (arg, arg1) => {
    if (Webwindow["Phone"] != null) {
        Webwindow["Phone"].call("SentPlayerHandyLifeinvaderHouseInfo", arg, arg1);
    }
});

CommunicationManager.AddServerEvent('SentPlayerHandyHouseList', (data) => {
    if (Webwindow["Phone"] != null) {
        data = JSON.parse(data);
        if (data.house) {
            for (let i = 0; i < data.house.length; i++) {
                let zoneName = getLocationZoneName(data.house[i]["PosX"], data.house[i]["PosY"], data.house[i]["PosZ"]);
                data.house[i]["ZoneName"] = zoneName;
            }
        }
        Webwindow["Phone"].call("houseRequestData", JSON.stringify(data));
    }
});

CommunicationManager.AddServerEvent('SentPlayerHandyVehicleList', (data) => {
    if (Webwindow["Phone"] != null) {
        data = JSON.parse(data);
        if (data.vehicles) {
            for (let i = 0; i < data.vehicles.length; i++) {
                let zoneName = getLocationZoneName(data.vehicles[i]["PosX"], data.vehicles[i]["PosY"], data.vehicles[i]["PosZ"]);
                data.vehicles[i]["ZoneName"] = zoneName;
            }
        }
        Webwindow["Phone"].call("vehicleRequestData", JSON.stringify(data));
    }
});

CommunicationManager.AddServerEvent('SentPlayerHandyChatList', (data) => {
    if (Webwindow["Phone"] != null) {

        PhoneTempChats = data;
        // mp.gui.chat.push("[Chat-Übersicht-Daten erfolgreich empfangen]");

        Webwindow["Phone"].call("chatRequestData", PhoneTempChats);
    }
});

CommunicationManager.AddServerEvent('SentPlayerHandyChatPosts', (id, data) => {
    if (Webwindow["Phone"] != null) {

        // mp.gui.chat.push("[Chat-Posting-Daten erfolgreich empfangen]");

        PhoneTempChatPosts[id] = JSON.parse(data);
        if (PhoneTempChatPosts[id].posts == null) {
            PhoneTempChatPosts[id].posts = [];
        }

        Webwindow["Phone"].call("chatPostsRequestData", id, data);
    }
});

CommunicationManager.AddServerEvent('SentPlayerHandyChatNextPosts', (id, data) => {
    if (Webwindow["Phone"] != null) {

        // mp.gui.chat.push("[Chat-Posting-Daten erfolgreich empfangen]");

        if (PhoneTempChatPosts[id] != null) {
            var postings = JSON.parse(data);
            if (postings.posts != null && PhoneTempChatPosts[id].posts != null) {
                for (var key in postings.posts) {
                    PhoneTempChatPosts[id].posts.push(postings.posts[key]);
                }
            }

            Webwindow["Phone"].call("chatPostsRequestData", id, JSON.stringify(PhoneTempChatPosts[id]));
        }
    }
});

// arg = callStatus (angenommen, abgelehnt...)
// arg1 = name mit dem man telefoniert
var CallSound = null;
CommunicationManager.AddServerEvent('changeCallStatus', (pCallStatus, pRemoteName, pRemoteNumber) => {
    if (pCallStatus == 3) {
        if (isPhoneNumberBlocked(pRemoteNumber) == false) {
            if (CallSound == null) {
                if (voiceChat != null) {
                    if (mp.storage.data.PhoneSettings["DoNotDisturb"] == false && PhoneStatus == true) {
                        CreateNotify("Eingehender Anruf (Taste P)");
                        voiceChat.call("playAudioDynamic", "handy.mp3", true, mp.storage.data.PhoneSettings["RingtoneVolume"] / 100);
                        voiceChat.call("activeCall", true);
                    }
                }
                CallSound = true;
            }
        } else {
            CommunicationManager.TriggerServer("onClientRejectedCall");
            return;
        }
    } else {
        if (CallSound != null) {
            if (voiceChat != null) {
                mp.events.call("stopAudio");
                voiceChat.call("activeCall", false);
            }
            setTimeout(() => {
                CallSound = null;
            }, 2000);
        }
    }

    if (Webwindow["Phone"] != null) {
        Webwindow["Phone"].call("changeCallStatus", JSON.stringify({
            id: pCallStatus,
            target: pRemoteName,
            targetnumber: pRemoteNumber
        }));
    } else {
        if (pCallStatus == 3) {
            PhoneTempIncomingCall = JSON.stringify({id: pCallStatus, target: pRemoteName, targetnumber: pRemoteNumber});
        } else {
            PhoneTempIncomingCall = null;
        }
    }
});


CommunicationManager.AddWebBrowserEvent("HandyTriggerServer", (eventName, args, args1, args2, args3, args4, args5, args6, args7, args8, args9, args10, args11, args12, args13) => {
    switch (eventName) {
        case "OnClientHandyRequestFullVehicleList":
            // Spam Filter
            CommunicationManager.TriggerServer("OnClientHandyRequestFullVehicleList", args);
            break;
        case "OnClientHandyRequestFullHouseList":
            // Spam Filter
            CommunicationManager.TriggerServer("OnClientHandyRequestFullHouseList", args);
            break;
        case "OnClientRequestTaxiDrivers":
            // Spam Filter
            CommunicationManager.TriggerServer("requestTaxiDrivers", args);
            break;
        case "OnClientRequestHouseAction":
            CommunicationManager.TriggerServer("onClientRequestHouseAction", args, args1);
            break;
        case "OnClientRequestCallPlayer":
            CommunicationManager.TriggerServer("onClientRequestCallPlayer", args);
            break;
        case "onClientRejectedCall":
            CommunicationManager.TriggerServer("onClientRejectedCall");
            break;
        case "onClientAcceptCall":
            CommunicationManager.TriggerServer("onClientAcceptCall");
            break;
        case "onClientRequestCallTaxiDriver":
            CommunicationManager.TriggerServer("onClientRequestCallTaxiDriver", args);
            break;
        case "OnClientRequestPhoneCalls":
            CommunicationManager.TriggerServer("OnClientRequestPhoneCalls");
            break;
        case "onClientRequestVehicleKeys":
            CommunicationManager.TriggerServer("onClientRequestVehicleKeys", args);
            break;
        case "onClientRequestVehicleKeyAdd":
            CommunicationManager.TriggerServer("onClientRequestVehicleKeyAdd", args, args1, args2);
            break;
        case "onClientRequestVehicleKeyRemove":
            CommunicationManager.TriggerServer("onClientRequestVehicleKeyRemove", args, args1);
            break;
        case "onClientSendPosition":
            CommunicationManager.TriggerServer("onClientSendPosition", args);
            break;
        case "onClientHandyOn":
            CommunicationManager.TriggerServer("onClientHandyOn");
            break;
        case "onClientHandyOff":
            CommunicationManager.TriggerServer("onClientHandyOff");
            break;
        case "OnClientHandyRequestCreateGroupChat":
            CommunicationManager.TriggerServer("OnClientHandyRequestCreateGroupChat", args, args1);
            break;
        case "OnClientHandyRequestCreatePrivateChat":
            CommunicationManager.TriggerServer("OnClientHandyRequestCreatePrivateChat", args);
            break;
        case "OnClientHandyRequestChats":
            if (PhoneTempChats != null) {
                if (Webwindow["Phone"] != null) {
                    // mp.gui.chat.push("[Chat-Übersicht-Daten wurden geladen]");
                    Webwindow["Phone"].call("chatRequestData", PhoneTempChats);
                }
            } else {
                CommunicationManager.TriggerServer("OnClientHandyRequestChats");
            }
            break;
        case "OnClientHandyRequestNotes":
            if (Webwindow["Phone"] != null) {
                Webwindow["Phone"].call("chatRequestNotes", JSON.stringify(mp.storage.data.PhoneSettingsNotes));
            }
            break;
        case "OnClientHandyRequestAddNewPost":
            CommunicationManager.TriggerServer("OnClientHandyRequestAddNewPost", args, args1);
            break;
        case "OnClientHandyRequestChatPostsAfterTimestamp":
            CommunicationManager.TriggerServer("OnClientHandyRequestChatPostsAfterTimestamp", args, args1);
            break;
        case "OnClientHandyRequestChatPosts":
            if (PhoneTempChatPosts[args] != null) {
                if (Webwindow["Phone"] != null) {
                    // mp.gui.chat.push("[Chat-Postings-Daten wurden geladen]");
                    Webwindow["Phone"].call("chatPostsRequestData", args, JSON.stringify(PhoneTempChatPosts[args]));
                }
            } else {
                CommunicationManager.TriggerServer("OnClientHandyRequestChatPosts", args);
            }
            break;
        case "OnClientHandyRequestSetPlayerAdmin":
            CommunicationManager.TriggerServer("OnClientHandyRequestSetPlayerAdmin", args, args1);
            break;
        case "OnClientHandyRequestRemovePlayerAdmin":
            CommunicationManager.TriggerServer("OnClientHandyRequestRemovePlayerAdmin", args, args1);
            break;
        case "OnClientHandyRequestChangeGroupName":
            CommunicationManager.TriggerServer("OnClientHandyRequestChangeGroupName", args, args1);
            break;
        case "OnClientHandyRequestLeaveChat":
            CommunicationManager.TriggerServer("OnClientHandyRequestLeaveChat", args);
            break;
        case "OnClientHandyRequestKickOutOfChat":
            CommunicationManager.TriggerServer("OnClientHandyRequestKickOutOfChat", args, args1);
            break;
        case "OnClientHandyRequestAddToChat":
            CommunicationManager.TriggerServer("OnClientHandyRequestAddToChat", args, args1);
            break;
        case "OnClientHandyRequestOpenForum":
            CommunicationManager.TriggerServer("quest_HelpUse_Done");
            break;
        case "OnClientHandyRequestCreateLifeinvaderPosting":
            CommunicationManager.TriggerServer("OnClientHandyRequestCreateLifeinvaderPosting", args, args1, args2, args3, args4, args5, args6, args7, args8, args9, args10, args11, args12, args13);
            break;
        case "OnClientHandyRequestLifeinvaderPricesUpdate":
            CommunicationManager.TriggerServer("OnClientHandyRequestLifeinvaderPricesUpdate", args, args1, args2, args3, args4, args5, args6, args7, args8);
            break;
        case "OnClientHandyRequestLifeinvaderPostings":
            CommunicationManager.TriggerServer("OnClientHandyRequestLifeinvaderPostings");
            break;
        case "OnClientHandyRequestLifeinvaderLogs":
            CommunicationManager.TriggerServer("OnClientHandyRequestLifeinvaderLogs");
            break;
        case "OnClientHandyRequestLifeinvaderPostingVehicleInfo":
            CommunicationManager.TriggerServer("OnClientHandyRequestLifeinvaderPostingVehicleInfo", args, args1);
            break;
        case "OnClientHandyRequestLifeinvaderPostingHouseInfo":
            CommunicationManager.TriggerServer("OnClientHandyRequestLifeinvaderPostingHouseInfo", args, args1);
            break;
        case "OnClientHandyRequestLifeinvaderPostingHousePosition":
            CommunicationManager.TriggerServer("OnClientHandyRequestLifeinvaderPostingHousePosition", args);
            break;
        case "OnClientHandyRequestLifeinvaderRemovePosting":
            CommunicationManager.TriggerServer("OnClientHandyRequestLifeinvaderRemovePosting", args);
            break;
        case "OnClientHandyRequestLifeinvaderAddPlayerToBlacklist":
            CommunicationManager.TriggerServer("OnClientHandyRequestLifeinvaderAddPlayerToBlacklist", args, args1, args2);
            break;
        case "OnClientHandyRequestLifeinvaderRemovePlayerFromBlacklist":
            CommunicationManager.TriggerServer("OnClientHandyRequestLifeinvaderRemovePlayerFromBlacklist", args);
            break;
        case "OnClientHandyRequestLifeinvaderPostingAddAbo":
            CommunicationManager.TriggerServer("OnClientHandyRequestLifeinvaderPostingAddAbo", args);
            break;
        case "OnClientHandyRequestLifeinvaderPostingRemoveAbo":
            CommunicationManager.TriggerServer("OnClientHandyRequestLifeinvaderPostingRemoveAbo", args);
            break;
        case "OnClientHandyRequestLifeinvaderBlacklist":
            CommunicationManager.TriggerServer("OnClientHandyRequestLifeinvaderBlacklist");
            break;
        case "OnClientHandyRequestLifeinvaderBetForPosting":
            CommunicationManager.TriggerServer("OnClientHandyRequestLifeinvaderBetForPosting", args, args1);
            break;
        case "OnClientHandyRequestChatPostMetaData":
            if (PhoneTempChatNotifications[args] != null) {
                if (Webwindow["Phone"] != null) {
                    // mp.gui.chat.push("[Meta-Daten aus Zwischenspeicher] ChatID:" +args+ " Meldungen:"+PhoneTempChatNotifications[args]);
                    Webwindow["Phone"].call("chatTimestampRequestData", args, PhoneTempChatNotifications[args]);
                }
            } else {
                CommunicationManager.TriggerServer("OnClientHandyRequestChatPostMetaData", args);
            }
            break;
    }
});

const VoiceRange = {
    LOW: 5,
    NORMAL: 15,
    HIGH: 40,
}

let LastVoiceRangeChanged = 0;
let MaxRange = VoiceRange.NORMAL;
mp.voiceChat.muted = true;
let g_voiceMgr = {
    listeners: [],
    listenersglobal: [],
    currentspeaking: [],
    timer: null,
    add: function (player, localchat) {
        this.listeners.push(player);
        player.isListening = true;

        if (localchat) {
            CommunicationManager.TriggerServer("OnClientRequestEnableVoiceTo", player);
            player.voice3d = true;
            player.voiceVolume = 1.0;
        } else {
            this.listenersglobal.push(player);
            player.voice3d = false;
            player.voiceVolume = 1.0;
        }
    },
    remove: function (player, notify) {
        let idx = this.listeners.indexOf(player);
        if (idx !== -1) this.listeners.splice(idx, 1);
        let idg = this.listenersglobal.indexOf(player);
        if (idg !== -1) this.listenersglobal.splice(idg, 1);
        player.isListening = false;
        if (notify) {
            CommunicationManager.TriggerServer("OnClientRequestDisableVoiceTo", player);
        }
    },
    start() {
        var self = this;
        self.timer = setInterval(function () {
            self.cycle();
        }, 750)
    },
    cycle() {
        const localPlayer = mp.players.local;
        const localPos = localPlayer.position;
        const base_volume = mp.storage.data.voice_settings.volume / 77;
        mp.players.forEachInStreamRange(player => {
            if (player != localPlayer) {
                if (!player.isListening) {
                    const playerPos = player.position;
                    const dist = VioRageManager.vdist(playerPos, localPos);
                    if (dist <= MaxRange && player.getHealth() > 0 && localPlayer.isDead() == false) {
                        g_voiceMgr.add(player, true);
                    }
                }
            }
        });
        g_voiceMgr.listeners.forEach((player) => {
            if (g_voiceMgr.listenersglobal.indexOf(player) === -1) {
                if (player.handle !== 0) {
                    const playerPos = player.position;
                    const dist = VioRageManager.vdist(playerPos, localPos);
                    if (dist > MaxRange || player.getHealth() <= 0 || localPlayer.isDead() == true) {
                        g_voiceMgr.remove(player, true);
                    } else if (dist <= MaxRange) {
                        player.voiceVolume = (1 - (dist / VoiceRange.HIGH)) * base_volume;
                    }
                } else {
                    g_voiceMgr.remove(player, true);
                }
            }
        });
    }
};
mp.events.add("playerQuit", (player) => {
    if (player.isListening) {
        g_voiceMgr.remove(player, false);
    }
});
CommunicationManager.AddServerEvent("ConnectPlayerWithOtherPlayer", (player) => {
    if (player.isListening) {
        g_voiceMgr.remove(player, false);
    }
    g_voiceMgr.add(player, false);
});
CommunicationManager.AddServerEvent("DisconnectPlayerWithOtherPlayer", (player) => {
    if (player.isListening) {
        g_voiceMgr.remove(player, false);
    }
});
mp.events.add("playerStartTalking", (player) => {
    if (g_voiceMgr.currentspeaking.indexOf(player) === -1) {
        g_voiceMgr.currentspeaking.push(player);
    }

    player.playFacialAnim("mic_chatter", "mp_facial");
});
mp.events.add("playerStopTalking", (player) => {
    let idg = g_voiceMgr.currentspeaking.indexOf(player);
    if (idg !== -1) g_voiceMgr.currentspeaking.splice(idg, 1);

    player.playFacialAnim("mood_normal_1", "facials@gen_male@variations@normal");
});
let ShowVoicePlayers = false;
CommunicationManager.AddServerEvent("showVoicePlayers", (voice_players) => {
    CommunicationManager.TriggerServer("OnClientRequestAdminAction", "showVoicePlayers");
    ShowVoicePlayers = voice_players;
});

var isInVoiceRestart = false;
CommunicationManager.AddServerEvent("onServerRequestVoiceReset", (voiceid) => {

    if (isInVoiceRestart) {
        return;
    }

    if (voiceid == 0) {
        mp.voiceChat.cleanupAndReload(true, false, false);
        VioRageManager.SendChatMessage("!{Red}Verbindung zum Voicechat gestoppt!");
    } else if (voiceid == 1) {
        isInVoiceRestart = true;
        mp.voiceChat.muted = true;
        VioRageManager.SendChatMessage("Verbindung zum Voicechat wurde unterbrochen!");

        setTimeout(() => {
            VioRageManager.SendChatMessage("Verbindung zum Voicechat wird aufgebaut ...");
            mp.voiceChat.cleanupAndReload(true, false, false);
        }, 2000);

        setTimeout(() => {
            VioRageManager.SendChatMessage("!{Green}Verbindung zum Voicechat erfolgreich aufgebaut!");
            if (mp.storage.data.microphonestatusstart == "1" && mp.storage.data.voice_settings.pushtotalk == "0") {
                mp.voiceChat.muted = false;
            } else {
                mp.voiceChat.muted = true;
            }
            if (voiceChat != null) {
                voiceChat.call("mute", mp.voiceChat.muted);
            }
        }, 8000);

        setTimeout(() => {
            isInVoiceRestart = false;
        }, 15000);

    }
});
mp.events.add('render', () => {
    if (ShowVoicePlayers || mp.players.local.adminMode) {
        let startY = 0.45;
        mp.game.graphics.clearDrawOrigin()
        mp.players.forEachInStreamRange((player) => {
            if (player == null) return;
            if (player.handle === 0) return;
            if (!player.isPlayerTalking) return;

            mp.game.graphics.drawText(player.name, [0.025, startY], {
                font: 0,
                color: [255, 0, 0, 255],
                scale: [0.22, 0.22],
                outline: false,
                centre: false
            });

            startY += 0.02;
        });
    }

    if (LastVoiceRangeChanged + (1000) >= Date.now() || (mp.storage.data.voice_settings.showVoiceRange && !mp.voiceChat.muted)) {
        const {x, y, z} = mp.players.local.position;
        const linePoints = Utility.getPointsOfEllipse(x, y, MaxRange, MaxRange, 50);

        const groundZ = z - 2;
        const zIndexMax = (groundZ + 3) / .1;
        let i = 0;
        for (let z = groundZ; z < groundZ + 3; z += 0.1) {
            const alpha = 1 - (i / zIndexMax);
            for (let i = 0; i < linePoints.length - 1; i++) {
                const pos1 = linePoints[i];
                const pos2 = linePoints[i + 1];
                VioRageManager.drawLine({...pos1, z}, {...pos2, z}, 0, 191, 255, parseInt(alpha * 255));
            }
            const pos1 = linePoints[0];
            const pos2 = linePoints[linePoints.length - 1];
            VioRageManager.drawLine({...pos1, z}, {...pos2, z}, 0, 191, 255, 255, parseInt(alpha * 255));
        }
    }
});
var voice_ready = false;
CommunicationManager.AddServerEvent("voiceChatLoader", () => {

    SettingsHandler.executeSettings();

    setTimeout(() => {
        if (!voiceChat) {
            if (accessToken != null) {
                g_voiceMgr.start();
                voice_ready = true;
                voiceChat = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/hud/hud.html", false);
                voiceChat.start("SetServerTimestamp", ServerTimestampDifferenz);
                ToogleHudStatus(false, false);
            }
        }
    }, 2000)

    setTimeout(() => {
        if (mp.storage.data.microphonestatusstart == "1" && mp.storage.data.voice_settings.pushtotalk == "0") {
            mp.voiceChat.muted = false;
        } else {
            mp.voiceChat.muted = true;
        }
        if (voiceChat != null) {
            voiceChat.call("mute", mp.voiceChat.muted);
        }
    }, 12000)

})
mp.events.add('initVoiceWindow', () => {
    mp.voiceChat.muted = true;
    voiceChat.call("mute", true);
    if (tempVoiceCommands.length > 0) {
        for (let i = 0; i < tempVoiceCommands.length; i++) {
            voiceChat.call(tempVoiceCommands[i].command, tempVoiceCommands[i].arg)
        }
    }
});
KeybindManager.registerVioKeyFunction("Voice", true, function () {
    if (voice_ready) {
        if ((Webwindow["Wantedcomputer"] != null) || (Webwindow["VideoWindow"] != null) || (!mp.gui.cursor.visible) || (!PhoneEditModeActive && login && CharacterCreatorCamera == null && isHandyOpen())) {
            if (mp.storage.data.voice_settings.pushtotalk) {
                mp.voiceChat.muted = false;
                voiceChat.call("mute", mp.voiceChat.muted);
            } else {
                mp.voiceChat.muted = !mp.voiceChat.muted;
                voiceChat.call("mute", mp.voiceChat.muted);
            }
        }
    }

    if (!mp.voiceChat.muted) {
        mp.players.local.playFacialAnim("mic_chatter", "mp_facial");
    } else {
        mp.players.local.playFacialAnim("mood_normal_1", "facials@gen_male@variations@normal");
    }
});
KeybindManager.registerVioKeyFunction("Voice", false, function () {
    if (voice_ready) {
        if (mp.storage.data.voice_settings.pushtotalk) {
            mp.voiceChat.muted = true;
            voiceChat.call("mute", true);
            mp.players.local.playFacialAnim("mood_normal_1", "facials@gen_male@variations@normal");
        }
    }
});
var audioMuted = {
    mutedSounds: [],
    mute(sound) {
        VioRageManager.SendChatMessage("sound " + sound);
        this.mutedSounds[sound] = true;
    },
    unmute(sound) {
        this.mutedSounds[sound] = false;
    },
    isMuted(sound) {
        return this.mutedSounds[sound];
    }
}
mp.events.add("playSound", (sound, repeat) => {
    if (voiceChat != null) {
        if (sound == "payday.ogg" && mp.storage.data.paydaySound == "0") {
            return
        }
        voiceChat.call("playAudio", sound, repeat)
    }
})
mp.events.add("stopAudio", () => {
    voiceChat.call("stopAudio");
});
mp.events.add("BrowserSendChatMessage", (message) => {
    VioRageManager.SendChatMessage("DEBUG: " + message);
});

KeybindManager.registerVioKeyFunction("VoiceChat Range ändern", true, () => {
    LastVoiceRangeChanged = Date.now();
    if (MaxRange === VoiceRange.HIGH) {
        MaxRange = VoiceRange.LOW;
        voiceChat.call("setVoiceRange", "whisper");
    } else if (MaxRange === VoiceRange.NORMAL) {
        MaxRange = VoiceRange.HIGH;
        voiceChat.call("setVoiceRange", "scream");
    } else {
        MaxRange = VoiceRange.NORMAL;
        voiceChat.call("setVoiceRange", "normal");
    }
});

var colors = {
    "r": "!{#FF0000}",
    "g": "!{#00FF00}",
    "b": "!{#4286f4}",
    "w": "!{#FFFFFF}"
};

mp.gui.execute("window.location = 'https://vio-v.com/gameplay/CEF/Test/html/hud/chat.html'");
mp.events.add("SendChatMessageToPlayer", (msg) => {
    if (ServerTriggerKey != "") {
        mp.gui.chat.colors = true;
        /*
        msg = msg.replace("~r~", "!{#FF0000}");
        msg = msg.replace("~g~", "!{#00FF00}");
        msg = msg.replace("~b~", "!{#4286f4}");
        msg = msg.replace("~w~", "!{#FFFFFF}");

        // # WORKAROUND #
        // TODO: Replace ersetzt immer nur ein ~r~ sowas evtl umschreiben oder so xD
        msg = msg.replace("~r~", "!{#FF0000}");
        msg = msg.replace("~g~", "!{#00FF00}");
        msg = msg.replace("~b~", "!{#4286f4}");
        msg = msg.replace("~w~", "!{#FFFFFF}");
        // # WORKAROUND #
        */

        var match;
        while ((match = /~\w~/g.exec(msg)) != null) {
            msg = msg.replace(match[0], colors[match[0].replace(/~/g, "")]);
        }

        VioRageManager.SendChatMessage(msg);
    }
});

mp.events.add("SendShardMessageToPlayer", (msg1, msg2, msgtime) => {
    mp.game.ui.messages.showShard(msg1, msg2, 1, 0, msgtime);
});

mp.events.add("SendPreChatMessageToPlayer", (msg) => {
    VioRageManager.SendChatMessage(msg);
});

mp.events.add("changeChatState", (status) => {
    isPlayerTypingInTextChat = status;

    if (status) {
        const playerList = [];
        mp.players.forEach(player => {
            playerList.push(player.name);
        });
        mp.gui.call("setPlayerList", JSON.stringify(playerList));
    }
});

var language = false;
var lastpos;
var afkcounter = 0;
var IsAFKBlocked = false;
var isafk = false;
var tickcount = 0;
language = lang_de.antiAFK;

var SetSaveTimes = 35;
var SetSavePosition;

var SavePlayerPositionTimer = () => {
    let dist = mp.game.system.vdist2(SetSavePosition.x, SetSavePosition.y, SetSavePosition.z, mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z);
    if (dist <= 1) {
        SetSaveTimes = SetSaveTimes - 5
        if (SetSaveTimes <= 0) {
            CommunicationManager.TriggerServer("OnClientDisconnectSave");
        } else {
            CreateNotify("~b~Du wirst in " + SetSaveTimes.toString() + " Sekunden ausgeloggt!", 5);
            setTimeout(SavePlayerPositionTimer, 5000);
        }
    } else {
        SetSaveTimes = 35;
        CreateNotify("~r~Logout abgebrochen!");
    }
}

CommunicationManager.AddServerEvent('OnClientRequestDisconnectSave', () => {
    if (SetSaveTimes >= 35) {
        SetSavePosition = mp.players.local.position;
        SavePlayerPositionTimer();
    } else {
        SetSaveTimes = 35;
        CreateNotify("~r~Logout abgebrochen!");
    }
});


CommunicationManager.AddServerEvent('SetLocalPlayerAntiAFKStatus', (antiafk_typ, afk_block) => {

    IsAFKBlocked = afk_block;

    if (IsAFKBlocked) {
        if (isafk) {
            isafk = false;
            CommunicationManager.TriggerServer("onPlayerStopAFK");
        }
        afkcounter = 0;
    }
});

CommunicationManager.AddServerEvent('resetAntiAFKState', resetAntiAFKState);
function resetAntiAFKState() {
    afkcounter = 0;
    if (isafk) {
        isafk = false;
        CommunicationManager.TriggerServer("onPlayerStopAFK");
    }
}

// Ist es ihm erlaubt AFK zu gehen ohne AFK gesetzt zu werden? //
function canPlayerBeAFK() {

    if (mp.players.local.adminMode) {
        return true;
    }
    if (mp.players.local.isDead()) {
        return true;
    }
    if(IsAFKBlocked == true){
        return true;
    }


    return false;
}


async function CheckClientAFKInterval() {
    if (mp.storage.data.ShowAFKCamFlight != null) {
        if (mp.storage.data.ShowAFKCamFlight == 0) {
            mp.game.invoke('0xF4F2C0D4EE209E20'); // INVALIDATE_IDLE_CAM()
        }
    }

    if (Webwindow["Login"] == null) {
        return;
        
        if (lastpos == null) {
            lastpos = mp.players.local.position
        } else {
            var newpos = mp.players.local.position
            let dist = mp.game.system.vdist2(lastpos.x, lastpos.y, lastpos.z, newpos.x, newpos.y, newpos.z);

            let max_dist = 8;
            if (mp.players.local.isOnVehicle()) {
                max_dist = 3000;
            }

            let localVeh = mp.players.local.vehicle;
            if (localVeh) {
                if (mp.game.vehicle.isThisModelABoat(localVeh.model) == true) {
                    max_dist = 3000;
                }
            }

            if (dist < max_dist) {
                if (!isafk) {
                    afkcounter++;
                    if (afkcounter >= 8) {
                        if (!canPlayerBeAFK()) {
                            if (afkcounter == 15) {
                                CreateNotify("~r~" + language.AFKIn30Seconds, 15)
                            } else if (afkcounter >= 17) {
                                isafk = true;
                                CreateNotify("~r~" + language.youAreAFK, 15);
                                CommunicationManager.TriggerServer("onPlayerAFK");
                                afkcounter = 0;
                                if (HQPoliceRadio.Status !== -1) {
                                    HQPoliceRadio.Status = 9;
                                    CommunicationManager.TriggerServer("OnClientRequestChangePoliceRadioStatus", 9);
                                }
                            }
                        } else {
                            afkcounter = 0;
                            if (isafk) {
                                isafk = false;
                                CommunicationManager.TriggerServer("onPlayerStopAFK");
                            }
                        }
                    }
                } else {
                    CreateNotify("~r~" + language.youAreAFK, 15);
                }
            } else {
                if (isafk) {
                    isafk = false;
                    CommunicationManager.TriggerServer("onPlayerStopAFK");
                }
                afkcounter = 0;
            }
            lastpos = newpos;
        }
    }
}
setInterval(() => {
    CheckClientAFKInterval();
}, 15 * 1000);

var ClientColShapes = {};

var ClientColShape = class {
    constructor(id, dim, pos, size, sevent, arg1, maxspeed) {
        this._setup(id, dim, pos, size, sevent, arg1, maxspeed);
    }

    _setup(id, dim, pos, size, sevent, arg1, maxspeed) {
        var self = this;
        self._id = id;
        self._dim = dim;
        self._maxspeed = maxspeed;
        self._size = size;
        self._sevent = sevent;
        self._pos = {
            x: pos.x,
            y: pos.y,
            z: pos.z
        };
        self._colshape = mp.colshapes.newSphere(self._pos.x, self._pos.y, self._pos.z, self._size, self._dim);

        if (sevent == "MedicPickup" || sevent == "MedicInformation") {
            self._blip = mp.blips.new(84, new mp.Vector3(self._pos.x, self._pos.y, self._pos.z), {
                scale: 1.0,
                name: arg1
            })
            if (sevent == "MedicPickup") {
                VioRageManager.SendChatMessage("!{#FF0000}" + arg1 + " ist schwer verletzt!");
            }
        } else if(sevent == "FOR_TOWING_DUMMY"){
            self._blip = mp.blips.new(380, new mp.Vector3(self._pos.x, self._pos.y, self._pos.z), {
                scale: 1.0,
                name: "Zerstörtes Fahrzeug"
            })
        } else {
            self._blip = null;
        }

    }

    trigger() {
        CommunicationManager.TriggerServer("OnClientEnterVioColShape", this._id)
    }

    destroy() {
        if (this._colshape) {
            if (this._blip) {
                this._blip.destroy();
            }
            this._colshape.destroy();
        }
        this._colshape = null;
    }

    isShape(shape) {
        return this._colshape == shape;
    }
}
mp.events.add("createVioColShape", function (shape_data) {
    let data = JSON.parse(shape_data)
    ClientColShapes[data.ID] = new ClientColShape(data.ID, data.Dim, data.Pos, data.Size, data.EventName, data.Arg1, data.MaxSpeed);
});
mp.events.add("destroyVioColShape", function (id) {
    if (ClientColShapes[id] != null) {
        ClientColShapes[id].destroy();
        ClientColShapes[id] = null;
    }
});

var SkipColShapeID = "";
mp.events.add("playerEnterColshape", function (shape) {
    for (var key in ClientColShapes) {
        if (ClientColShapes[key] != null) {
            if (ClientColShapes[key]._colshape == shape) {
                if (ClientColShapes[key]._sevent != SkipColShapeID) {
                    if (ClientColShapes[key]._maxspeed > 0) {
                        if (mp.players.local.isInAnyVehicle(false)) {
                            if (mp.players.local.vehicle.getSpeed() >= ClientColShapes[key]._maxspeed) {
                                CreateNotify("~r~Dein Fahrzeug ist zu schnell!");
                                return;
                            }
                        }
                    }

                    SkipColShapeID = ClientColShapes[key]._sevent;
                    setTimeout(() => {
                        SkipColShapeID = "";
                    }, 1000)
                    ClientColShapes[key].trigger();
                }
            }
        }
    }
});

var CEFBrowser = class {
    constructor(url, interact, debug = false) {
        this._setup(url, interact, debug);
    }

    get isActive() {
        if (this.browser != null) {
            if (this.debug) VioRageManager.SendChatMessage("DEBUG: isActive " + String(this.browser.active));
            return this.browser.active;
        } else {
            if (this.debug) VioRageManager.SendChatMessage("DEBUG: Browser does not exist");
            return false;
        }
    }

    get isAtStartPosition() {
        let dist = mp.game.system.vdist2(this.open_position.x, this.open_position.y, this.open_position.z, mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z);
        if (dist <= 20) {
            return true;
        } else {
            return false;
        }
    }

    _setup(url, interact, debug) {
        let self = this;
        self.loaded = false;
        self.initActivestate = null;
        self.debug = debug;
        self.open_position = mp.players.local.position;
        if (debug)
            VioRageManager.SendChatMessage("Debug Aktiv!!!");

        self.pufferedCalls = {};

        mp.events.add('browserDomReady', (newbrowser) => {
            if (newbrowser == self.browser) {
                self.loaded = true;
                if (self.debug) VioRageManager.SendChatMessage('Vio-V Browser Browser Ready : ' + this.browser.url);
                if (self.init) {
                    if (self.debug) VioRageManager.SendChatMessage('Vio-V Browser : Send Trigger');
                    var params = "";
                    self.init.forEach((param) => {
                        if (params == "")
                            params = param;
                        else
                            params = params + "," + param;
                    });
                    if (self.debug) VioRageManager.SendChatMessage("Browser DomReady: " + newbrowser.url);
                    if (self.debug) VioRageManager.SendChatMessage("Parameter: " + params);
                    self.call(...self.init);
                }

                Object.keys(self.pufferedCalls).forEach((eventName) => {
                    var pufferedArgs = self.pufferedCalls[eventName];
                    self.call(eventName, ...pufferedArgs);
                });

                if (self.initActivestate !== null) {
                    self.browser.active = self.initActivestate;
                    if (this.debug) VioRageManager.SendChatMessage("DEBUG: DomReady Browser initActivestate " + String(self.initActivestate));
                } else {
                    self.browser.active = true;
                    if (this.debug) VioRageManager.SendChatMessage("DEBUG: DomReady Browser Active true");
                }
            }
        });

        mp.events.add('browserLoadingFailed', (browser) => {
            if (browser == self.browser) {
                if (self.debug) VioRageManager.SendChatMessage('ERROR: Vio-V Browser Loading Failed!');
                if (self.interact) {
                    mp.gui.cursor.visible = false;
                    VioRageManager.ShowChat(true);
                    VioRageManager.ActivateChat(true);
                }
                self.destroy();
            }
        });

        self.id = (Math.random()).toString(36).substr(2, 16);
        self.browser = mp.browsers.new(url);
        if (CEF_Master_Link == "Test") {
            self.browser.reload(true);
        }
        self.interact = interact;
        if (self.interact) {
            mp.gui.cursor.visible = true;
            VioRageManager.ShowChat(false);
            VioRageManager.ActivateChat(false);
            let that = this;
            setTimeout(() => {
                if (that.browser != null) {
                    mp.gui.cursor.visible = true;
                    VioRageManager.ShowChat(false);
                    VioRageManager.ActivateChat(false);
                }
            }, 500);
        }
    }

    start(...args) {
        if (this.loaded) {
            this.call(...args);
        } else {
            if (this.debug) VioRageManager.SendChatMessage("DEBUG: Browser not ready...");
            this.browser.active = false;
            this.init = args;
        }
    }

    load(url) {
        this.browser.execute("window.location = '" + url + "?id=" + this.id + "'");
    }

    resize(w, h) {
        this.browser.execute("document.body.style.width = '" + w + "px';");
        this.browser.execute("document.body.style.height = '" + h + "px';");
    }

    position(left, top, element) {
        // this.browser.execute("document.getElementById('"+element+"').style.marginLeft = '" + left + "px'; ");
        // this.browser.execute("document.getElementById('"+element+"').style.marginTop = '" + top + "px'; ");
        this.browser.execute("document.getElementById('" + element + "').style.left = '" + left + "px'; ");
        this.browser.execute("document.getElementById('" + element + "').style.top = '" + top + "px'; ");
    }

    trigger(string) {
        this.browser.execute(string);
    }

    call(eventName, ...args) {
        if (!this.loaded) {
            if (this.debug) VioRageManager.SendChatMessage("Puffering call " + eventName);
            this.pufferedCalls[eventName] = args;
        } else {
            var params = "";
            args.forEach(function (param) {
                if (params == "")
                    params = param;
                else
                    params = params + "," + param;
            });

            if (this.debug) VioRageManager.SendChatMessage("Call: " + this.browser.url);
            if (this.debug) VioRageManager.SendChatMessage("Status: " + this.browser.active + " | " + this.loaded);

            var newArgs = [];
            args.forEach((currArg) => {
                if (typeof (currArg) === "object") {
                    if (this.debug) VioRageManager.SendChatMessage("Convert object to String -> JSON.strinigfy");
                    newArgs.push("JSONOBJECT:" + JSON.stringify(currArg));
                } else {
                    newArgs.push(currArg);
                }
            });
            if (this.debug) VioRageManager.SendChatMessage("Event " + eventName + ": " + JSON.stringify(newArgs));
            this.browser.call(eventName, ...newArgs);
        }
    }

    call_old() {
        let args = Array.prototype.slice.call(arguments);
        this.calltrigger(args);
    }

    calltrigger(args) {
        let eventName = args[0];
        let callArgs = "vio.CallCEFBrowserEvent(\"" + eventName + "\",";
        for (let i = 1; i < args.length; i++) {
            switch (typeof args[i]) {
                case 'string': {

                    callArgs += "\'" + args[i] + "\'";
                    break;
                }
                case 'number':
                case 'boolean': {
                    callArgs += args[i];
                    break;
                }
                case 'object': {
                    callArgs += JSON.stringify(args[i]);
                    break;
                }
            }
            // callArgs += "\'"+ args[i]+"\'";
            if (i < (args.length - 1)) {
                callArgs += ",";
            }

        }
        callArgs += ");";
        this.browser.execute(callArgs);
    }

    destroy() {
        if (this.browser != null) {
            this.browser.destroy();
            this.browser = null;
        }
        if (this.interact) {
            mp.gui.cursor.visible = false;
            VioRageManager.ShowChat(true);
            VioRageManager.ActivateChat(true);
        }
    }

    show(item) {
        this.browser.execute("document.getElementById('" + item + "').style.visibility = 'visible';");
    }

    active(toggle) {
        if (!this.loaded) {
            this.initActivestate = toggle;
        } else {
            if (this.debug) VioRageManager.SendChatMessage("DEBUG: Toggle Browser Active " + String(toggle));
            this.browser.active = toggle;
        }
    }
}

CommunicationManager.AddServerEvent("createPeds", (pedlist) => {
    let peds = JSON.parse(pedlist);
    for (let index in peds) {
        if (vioPeds[peds[index].ID] != null) {
            vioPeds[peds[index].ID].destroy()
            vioPeds[peds[index].ID] = null;
        }
        vioPeds[peds[index].ID] = new NPC({
            id: peds[index].ID,
            x: peds[index].Pos.x,
            y: peds[index].Pos.y,
            z: peds[index].Pos.z,
            rot: peds[index].Rot,
            dim: peds[index].Dim,
            skin: peds[index].Hash,
            animDict: peds[index].AnimDict,
            animName: peds[index].AnimName,
            streamdistance: peds[index].StreamDistance,
            event: peds[index].EventName != "" ? peds[index].EventName : "",
            radius: peds[index].EventName != "" ? peds[index].EventRadius : 0
        })
        if (peds[index].RobPossible) {
            new pedRob(vioPeds[peds[index].ID]._id, peds[index].RobType.split("_")[0], peds[index].RobType.split("_")[1]);
        }
    }
})
CommunicationManager.AddServerEvent("createSinglePed", (singlepedjson) => {
    let singleped = JSON.parse(singlepedjson);
    if (vioPeds[singleped.ID] != null) {
        vioPeds[singleped.ID].destroy()
        vioPeds[singleped.ID] = null;
    }
    vioPeds[singleped.ID] = new NPC({
        id: singleped.ID,
        x: singleped.Pos.x,
        y: singleped.Pos.y,
        z: singleped.Pos.z,
        rot: singleped.Rot,
        dim: singleped.Dim,
        skin: singleped.Hash,
        animDict: singleped.AnimDict,
        animName: singleped.AnimName,
        streamdistance: singleped.StreamDistance,
        event: singleped.EventName != "" ? singleped.EventName : "",
        radius: singleped.EventName != "" ? singleped.EventRadius : 0,
        isDead: singleped.isDead,
        isKillAble: singleped.isKillAble
    })
    if (singleped.RobPossible) {
        new pedRob(vioPeds[singleped.ID]._id, singleped.RobType.split("_")[0], singleped.RobType.split("_")[1]);
    }
})

CommunicationManager.AddServerEvent("createSingleObject", (singleobjectjson) => {
    let singleobject = JSON.parse(singleobjectjson);

    //VioRageManager.SendChatMessage("singleobject " + JSON.stringify(singleobject))

    if (singleobject) {
        if (vioObjects[singleobject.ID] != null) {
            vioObjects[singleobject.ID].destroy()
            vioObjects[singleobject.ID].markForDeletion();
            vioObjects[singleobject.ID] = null;
        }
        if (bones[singleobject.OffsetKey] !== undefined) {
            singleobject.OffsetKey = bones[singleobject.OffsetKey];
        }
        if (singleobject.OffsetKey != "") {
            vioObjects[singleobject.ID] = new OBJECT({
                id: singleobject.ID,
                x: singleobject.Pos.x,
                y: singleobject.Pos.y,
                z: singleobject.Pos.z,
                rx: singleobject.Rot.x,
                ry: singleobject.Rot.y,
                rz: singleobject.Rot.z,
                dim: singleobject.Dim,
                hash: singleobject.Hash,
                alpha: singleobject.Alpha,
                collision: singleobject.Collision,
                offsetPosX: singleobject.OffsetPos.x,
                offsetPosY: singleobject.OffsetPos.y,
                offsetPosZ: singleobject.OffsetPos.z,
                offsetRotX: singleobject.OffsetRot.x,
                offsetRotY: singleobject.OffsetRot.y,
                offsetRotZ: singleobject.OffsetRot.z,
                offsetPlayer: singleobject.OffsetPlayerName,
                offsetBone: singleobject.OffsetKey,
                streamdistance: singleobject.StreamDistance,
                event: singleobject.EventName != "" ? singleobject.EventName : "",
                radius: singleobject.EventName != "" ? singleobject.EventRadius : 0,
            });
        } else {
            vioObjects[singleobject.ID] = new OBJECT({
                id: singleobject.ID,
                x: singleobject.Pos.x,
                y: singleobject.Pos.y,
                z: singleobject.Pos.z,
                rx: singleobject.Rot.x,
                ry: singleobject.Rot.y,
                rz: singleobject.Rot.z,
                dim: singleobject.Dim,
                hash: singleobject.Hash,
                alpha: singleobject.Alpha,
                collision: singleobject.Collision,
                streamdistance: singleobject.StreamDistance,
                event: singleobject.EventName != "" ? singleobject.EventName : "",
                radius: singleobject.EventName != "" ? singleobject.EventRadius : 0
            });
        }
    }
})
CommunicationManager.AddServerEvent("createObjects", (objectlist) => {
    return;
    let objects = JSON.parse(objectlist);
    for (let index in objects) {
        if (vioObjects[objects[index].ID] != null) {
            vioObjects[objects[index].ID].markForDeletion()
            vioObjects[objects[index].ID].destroy()
            vioObjects[objects[index].ID] = null;
        }
        if (bones[objects[index].OffsetKey] !== undefined) {
            objects[index].OffsetKey = bones[objects[index].OffsetKey]
        }
        if (objects[index].OffsetKey != "") {
            vioObjects[objects[index].ID] = new OBJECT({
                id: objects[index].ID,
                x: objects[index].Pos.x,
                y: objects[index].Pos.y,
                z: objects[index].Pos.z,
                rx: objects[index].Rot.x,
                ry: objects[index].Rot.y,
                rz: objects[index].Rot.z,
                dim: objects[index].Dim,
                hash: objects[index].Hash,
                alpha: objects[index].Alpha,
                collision: objects[index].Collision,
                offsetPosX: objects[index].OffsetPos.x,
                offsetPosY: objects[index].OffsetPos.y,
                offsetPosZ: objects[index].OffsetPos.z,
                offsetRotX: objects[index].OffsetRot.x,
                offsetRotY: objects[index].OffsetRot.y,
                offsetRotZ: objects[index].OffsetRot.z,
                offsetPlayer: objects[index].OffsetPlayerName,
                offsetBone: objects[index].OffsetKey,
                streamdistance: objects[index].StreamDistance,
                event: objects[index].EventName != "" ? objects[index].EventName : "",
                radius: objects[index].EventName != "" ? objects[index].EventRadius : ""
            });
        } else {
            vioObjects[objects[index].ID] = new OBJECT({
                id: objects[index].ID,
                x: objects[index].Pos.x,
                y: objects[index].Pos.y,
                z: objects[index].Pos.z,
                rx: objects[index].Rot.x,
                ry: objects[index].Rot.y,
                rz: objects[index].Rot.z,
                dim: objects[index].Dim,
                hash: objects[index].Hash,
                alpha: objects[index].Alpha,
                collision: objects[index].Collision,
                streamdistance: objects[index].StreamDistance,
                event: objects[index].EventName != "" ? objects[index].EventName : "",
                radius: objects[index].EventName != "" ? objects[index].EventRadius : ""
            });
        }
    }
})
CommunicationManager.AddServerEvent("destroyObject", (objid) => {
    if (vioObjects[objid] != null) {
        vioObjects[objid].markForDeletion()
        vioObjects[objid].destroy()
        vioObjects[objid] = null;
    }
})
CommunicationManager.AddServerEvent("destroyPed", (pedid) => {
    if (vioPeds[pedid] != null) {
        vioPeds[pedid].destroy();
        vioPeds[pedid] = null;
    }
})

let specCamera;
let gameplayCam;
var spectating = false;
let specName;

CommunicationManager.AddServerEvent("SetLocalPlayerToSpectator", (name) => {
    CommunicationManager.TriggerServer("OnClientRequestWeaponActions", "SetLocalPlayerToSpectator");
    specName = name;
    setTimeout(spectate, 1000);
})

CommunicationManager.AddServerEvent("SetAlternateMovementAnim", (flag, animDict, animName, speed) => {
    mp.players.local.setAlternateMovementAnim(flag, animDict, animName, speed, true);
})

CommunicationManager.AddServerEvent("SetAlarmStatus", (alarm, status) => {
    if (status) {
        IsRageMpAudioReady(alarm, 5000, function (isready) {
            if (isready) {
                mp.game.audio.startAlarm(alarm, true);
            }
        });
    } else {
        mp.game.audio.stopAlarm(alarm, true);
    }
})

spectate = () => {
    VioRageManager.SendChatMessage("Name: " + specName)

    if (specCamera != null) {
        specCamera.setActive(false);
        specCamera.destroy();
        specCamera = null;
        mp.game.cam.renderScriptCams(false, false, 0, true, false);
        spectating = false;
    }

    gameplayCam = mp.cameras.new('gameplay');
    specCamera = mp.cameras.new('default');
    spectating = true;

    mp.game.cam.renderScriptCams(true, true, 0, true, false);
    specModifier = Utility.GetRandomArbitrary(35, 55);
}

let specModifier = Utility.GetRandomArbitrary(35, 55);
mp.events.add("render", () => {
    if (spectating && specCamera != null) {
        mp.players.forEachInStreamRange(function (player) {
            if (player.name.toUpperCase() === specName.toUpperCase()) {
                let pos = player.position;

                const modz = specModifier;

                mp.players.local.position = new mp.Vector3(pos.x, pos.y, pos.z - modz);

                let localPos = mp.players.local.position;
                let camPos = gameplayCam.getCoord();
                camPos.x -= localPos.x;
                camPos.y -= localPos.y;
                camPos.z -= localPos.z;

                specCamera.setCoord(camPos.x + pos.x, camPos.y + pos.y, camPos.z + pos.z);
                specCamera.pointAtCoord(pos.x, pos.y, pos.z);
            }
        });
    }
})

CommunicationManager.AddServerEvent("SetLocalPlayerOutOfSpactator", () => {
    if (spectating && specCamera != null) {
        CommunicationManager.TriggerServer("OnClientRequestWeaponActions", "SetLocalPlayerOutOfSpactator");
        specCamera.setActive(false);
        specCamera.destroy();
        specCamera = null;
        mp.game.cam.renderScriptCams(false, false, 0, true, false);
        spectating = false;
        mp.players.local.detach(true, true);
    }
})

const eAdminMode = {
    OFF: 0,
    SHOW: 1,
    NO_CLIP: 2,
}

class cAdminMode {
    static noClipsStatus = false;
    static longRangeNameTags = true;
    static noClipCamera;

    static controlModifier = false;
    static shiftModifier = false;

    static hudPlayers = new Set();
    static _playerData = {};

    static get playerData() {
        return cAdminMode._playerData;
    }

    static set playerData(data) {
        if (JSON.stringify(cAdminMode._playerData) != JSON.stringify(data)) {
            cAdminMode._playerData = data;
            if (Webwindow["AdminHUD"]) {
                Webwindow["AdminHUD"].call("updatePlayers", JSON.stringify(Object.values(data)));
            }
        }
    }

    /**
     * entrypoint for cAdminMode called on init
     */
    static init() {
        mp.events.addDataHandler("ADMIN_MODE", cAdminMode.checkEntity);
        mp.events.add("entityStreamIn", cAdminMode.checkEntity);
        mp.events.add("render", cAdminMode.render);

        mp.keys.bind(35, false, cAdminMode.switchNoClip);
        mp.keys.bind(46, false, () => {
            cAdminMode.longRangeNameTags = !cAdminMode.longRangeNameTags;
        });

        mp.keys.bind(18, false, cAdminMode.hudInteractionKey);
        CommunicationManager.AddWebBrowserEvent("OnClientRequestAdminHud", cAdminMode.hudCefEventHandler, "AdminHUD");
    }

    static hudInteractionKey() {
        if (Webwindow["AdminHUD"]) {
            Webwindow["AdminHUD"].interact = !Webwindow["AdminHUD"].interact;
            mp.gui.cursor.visible = Webwindow["AdminHUD"].interact;
            Webwindow["AdminHUD"].call("updateInteractionState", Webwindow["AdminHUD"].interact);
            VioRageManager.ShowChat(!Webwindow["AdminHUD"].interact);
        }
    }

    static hudCefEventHandler(name, ...args) {
        switch (name) {
            case "addPlayer":{
                const [name] = args;
                cAdminMode.hudPlayers.add(name);
            }
                break;
            case "removePlayer": {
                const [name] = args;
                cAdminMode.hudPlayers.delete(name);
            }
                break;
            case "setVehicleBoost": {
                const [boost] = args;
                VioRageManager.SendChatMessage('~r~Vorübergehend deaktiviert!');
                return;
                if (mp.players.local.vehicle) {
                    VioRageManager.SendChatMessage(`SetBoost = ${boost}`);
                    mp.players.local.vehicle.setEnginePowerMultiplier(Number(boost));
                    mp.players.local.vehicle.setEngineTorqueMultiplier(Number(boost));
                }
            }
                break;
        }
    }

    /**
     * called on mp.events.add("render")
     */
    static render() {

        if (mp.players.local.adminMode) {
            mp.players.local.setInvincible(true);

            const tempData = {};
            cAdminMode.hudPlayers.forEach((key) => {
                tempData[key] = {
                    name: key,
                    rendered: false,
                    warning: false,
                    hp: 0,
                    armor: 0,
                    weaponName: "",
                };
            });

            mp.players.forEachInStreamRange(function (target) {
                if (cAdminMode.hudPlayers.has(target.name)) {
                    tempData[target.name].rendered = true;
                    tempData[target.name].hp = target.getHealth();
                    tempData[target.name].armor = target.getArmour();
                    tempData[target.name].weaponName = weapon_data.getWeaponName(target.weapon).includes("weapon_") ? weapon_data.getWeaponName(target.weapon) : `weapon_${weapon_data.getWeaponName(target.weapon)}`;
                }
            });

            cAdminMode.playerData = tempData;

            if (!cAdminMode.noClipsStatus) return;
            if (mp.gui.cursor.visible) return;

            cAdminMode.controlModifier = mp.keys.isDown(17); // LCtrl
            cAdminMode.shiftModifier = mp.keys.isDown(16); // Shift
            const rot = cAdminMode.noClipCamera.getRot(2);
            let fastMult = 1;
            let slowMult = 1;
            if (cAdminMode.shiftModifier) {
                fastMult = 5;
            } else if (cAdminMode.controlModifier) {
                slowMult = 0.05;
            }
            const rightAxisX = mp.game.controls.getDisabledControlNormal(0, 220);
            const rightAxisY = mp.game.controls.getDisabledControlNormal(0, 221);
            const leftAxisX = mp.game.controls.getDisabledControlNormal(0, 218);
            const leftAxisY = mp.game.controls.getDisabledControlNormal(0, 219);
            const pos = cAdminMode.noClipCamera.getCoord();
            const rr = cAdminMode.noClipCamera.getDirection();
            const vector = new mp.Vector3(0, 0, 0);
            vector.x = rr.x * leftAxisY * fastMult * slowMult;
            vector.y = rr.y * leftAxisY * fastMult * slowMult;
            vector.z = rr.z * leftAxisY * fastMult * slowMult;
            const upVector = new mp.Vector3(0, 0, 1);
            const rightVector = Utility.getCrossProduct(
                Utility.getNormalizedVector(rr),
                Utility.getNormalizedVector(upVector)
            );
            rightVector.x *= leftAxisX * 0.5;
            rightVector.y *= leftAxisX * 0.5;
            rightVector.z *= leftAxisX * 0.5;
            let upMovement = 0.0;
            if (mp.keys.isDown(69)) { // Q
                upMovement = 0.5 * fastMult * slowMult;
            }
            let downMovement = 0.0;
            if (mp.keys.isDown(81)) { // E
                downMovement = 0.5 * fastMult * slowMult;
            }
            mp.players.local.position = new mp.Vector3(
                pos.x - vector.x + rightVector.x,
                pos.y - vector.y + rightVector.y,
                pos.z - vector.z + rightVector.z + upMovement - downMovement
            );
            mp.players.local.heading = rr.z;
            cAdminMode.noClipCamera.setCoord(
                pos.x - vector.x + rightVector.x,
                pos.y - vector.y + rightVector.y,
                pos.z - vector.z + rightVector.z + upMovement - downMovement
            );
            cAdminMode.noClipCamera.setRot(
                rot.x + rightAxisY * -5.0,
                0.0,
                rot.z + rightAxisX * -5.0,
                2
            );

            mp.game.cam.renderScriptCams(true, false, 0, true, false);
        }
    }

    /**
     * function to check single entities SMode status and handle it
     * @param {PlayerMp} entity
     */
    static checkEntity(entity) {
        if (entity.type === "player") {
            if(entity.handle !== 0){

                // VioRageManager.DebugLog(`[Admin #1]`);

                const value = entity.getVariable("ADMIN_MODE");
                if (value != null) {
                    switch (value) {
                        case eAdminMode.OFF:
                            entity.adminMode = null;
                            entity.setInvincible(false);

                            if (entity == mp.players.local) {
                                cAdminMode.deactivateSelfNoClip();
                            } else {
                                cAdminMode.setNoClipsStatusOthers(entity, false);
                                entity.setCanBeTargetted(true);
                            }
                            break;
                        case eAdminMode.SHOW:
                            entity.adminMode = value;
                            entity.setInvincible(true);

                            if (entity == mp.players.local) {
                                cAdminMode.deactivateSelfNoClip();
                            } else {
                                cAdminMode.setNoClipsStatusOthers(entity, false);
                                entity.setCanBeTargetted(false);
                            }
                            break;
                        case eAdminMode.NO_CLIP:
                            entity.adminMode = value;
                            entity.setInvincible(true);

                            if (entity == mp.players.local) {
                                mp.players.local.setAlpha(100);
                                mp.players.local.giveWeapon(2725352035, 1, true);
                            } else {
                                cAdminMode.setNoClipsStatusOthers(entity, true);
                                entity.setCanBeTargetted(false);
                            }
                            break;
                    }
                } else {
                    entity.adminMode = null;
                    entity.setAlpha(255);
                    entity.setInvincible(false);
                    entity.setCanBeTargetted(true);
                }
            }
        }
        if (entity == mp.players.local) {
            if (mp.players.local.adminMode > 0) {
                if (!Webwindow["AdminHUD"]) {
                    Webwindow["AdminHUD"] = new CEFBrowser(`https://vio-v.com/gameplay/CEF/${CEF_Master_Link}/html/adminHud/adminHud.html`, false);
                    Webwindow["AdminHUD"].start("init", mp.players.local.name, mp.players.local.adminMode);
                } else {
                    Webwindow["AdminHUD"].call("updateSModeState", mp.players.local.adminMode);
                }
            } else {
                if (Webwindow["AdminHUD"]) {
                    Webwindow["AdminHUD"].destroy();
                    delete Webwindow["AdminHUD"];
                }
            }
        }
    }

    /**
     * event function triggered by specific key
     */
    static switchNoClip() {
        if (mp.players.local.getVariable("ADMIN_MODE") != 2) return;

        cAdminMode.noClipsStatus = !cAdminMode.noClipsStatus;
        if (cAdminMode.noClipsStatus) {
            cAdminMode.activateSelfNoClip();
        } else {
            cAdminMode.deactivateSelfNoClip();
            mp.players.local.setAlpha(100);
        }
    }

    /**
     * activate local clients NoClip Mode
     */
    static activateSelfNoClip() {
        const localPlayer = mp.players.local;
        cAdminMode.noClipsStatus = true;

        const camPos = new mp.Vector3(
            localPlayer.position.x,
            localPlayer.position.y,
            localPlayer.position.z
        );
        const camRot = mp.game.cam.getGameplayCamRot(2);
        cAdminMode.noClipCamera = mp.cameras.new('default', camPos, camRot, 45);

        localPlayer.setAlpha(0);
        cAdminMode.noClipCamera.setActive(true);
        mp.game.cam.renderScriptCams(true, false, 0, true, false);
        // localPlayer.freezePosition(true);
        VioRageManager.FreezePosition(localPlayer, true);
        localPlayer.setVisible(true, false);
        localPlayer.setCollision(false, false);
    }

    /**
     * deactivate local clients NoClip Mode
     */
    static deactivateSelfNoClip() {
        const localPlayer = mp.players.local;

        // prevent Teleport AC kick
        teleportCheck.lastPos = mp.players.local.position;
        teleportCheck.freezeTimer(8);

        cAdminMode.noClipsStatus = false;

        if (cAdminMode.noClipCamera) {
            localPlayer.position = cAdminMode.noClipCamera.getCoord();
            localPlayer.setHeading(cAdminMode.noClipCamera.getRot(2).z);
            cAdminMode.noClipCamera.destroy(true);
            cAdminMode.noClipCamera = null;
        }

        localPlayer.setAlpha(255);
        mp.game.cam.renderScriptCams(false, false, 0, true, false);
        // localPlayer.freezePosition(false);
        VioRageManager.FreezePosition(localPlayer, false);
        localPlayer.setVisible(true, false);
        localPlayer.setCollision(true, false);
    }

    /**
     * set NoClip using Admins on localClient invisible
     * @param player
     * @param status
     */
    static setNoClipsStatusOthers(player, status) {
        if (status) {
            if (cAdminMode.allowClientSeeInvisibleAdmins()) {
                player.setAlpha(50);
            } else {
                player.setAlpha(0);
                player.setVisible(false, false);
            }
            // player.freezePosition(true);
            VioRageManager.FreezePosition(player, true);
            mp.game.invoke("0xA53ED5520C07654A", mp.players.local.handle, player.handle, false);
            mp.game.invoke("0x0725A4CCFDED9A70", player.handle, false, false, true, true);
        } else {
            player.setAlpha(255);
            player.setVisible(true, false);
            // player.freezePosition(false);
            VioRageManager.FreezePosition(player, false);
            mp.game.invoke("0xA53ED5520C07654A", mp.players.local.handle, player.handle, true);
            mp.game.invoke("0x0725A4CCFDED9A70", player.handle, true, false, true, true);
        }
    }

    /**
     * check if local client is using sMode NoClip
     * @return {boolean}
     */
    static getNoClipStatus() {
        return cAdminMode.noClipsStatus;
    }

    /**
     * check if local client is allowed to use infinite range nametags
     * @return {boolean}
     */
    static getLongRangeNameTags() {
        return cAdminMode.longRangeNameTags;
    }

    /**
     * check if local client is allowed to bypass SMode invisibility
     * @return {boolean}
     */
    static allowClientSeeInvisibleAdmins() {
        return !!mp.players.local.adminMode;
    }
}

cAdminMode.init();

var NPC = class {
    constructor(data) {
        this._setup(data);
    }

    _setup(data) {
        var self = this;

        self._id = data.id;

        self._skin = data.skin;

        self._pos = {
            x: data.x,
            y: data.y,
            z: data.z
        };
        self._rot = data.rot;
        self._dim = data.dim;

        self._ped = null;

        self._animation = {
            anim: data.animName,
            dict: data.animDict
        }
        self._colshape = null;
        self._event = data.event;
        self._colradius = data.radius;

        self._isDead = data.isDead;
        self._isKillAble = data.isKillAble;

        self._streamdistance = data.streamdistance;
        self._streamcolshape = null;
        self._created = false;

        self.create();
    }

    create() {
        var self = this;
        if (self._ped == null) {
            let local_pos = mp.players.local.position;
            let distfinal = mp.game.system.vdist2(local_pos.x, local_pos.y, local_pos.z, self._pos.x, self._pos.y, self._pos.z);
            if (self._streamdistance == 0 || distfinal <= 2000) {

                if (self._streamdistance != 0) {
                    self._ped = VioRageManager.CreatePed(mp.game.joaat(self._skin), new mp.Vector3(self._pos.x, self._pos.y, self._pos.z), self._rot, self._dim, true);
                    //self._ped.setCoords(self._pos.x, self._pos.y, self._pos.z-1, true, true, true, false);
                } else {
                    self._ped = VioRageManager.CreatePed(mp.game.joaat(self._skin), new mp.Vector3(self._pos.x, self._pos.y, self._pos.z), self._rot, self._dim, true);
                }
                if (self._animation.dict != "" && self._animation.dict != null && self._animation.dict !== undefined) {
                    if (mp.game.streaming.doesAnimDictExist(self._animation.dict)) {
                        mp.game.streaming.requestAnimDict(self._animation.dict);
                    }
                    self._ped._animationDict = self._animation.dict;
                    self._ped._animationAnim = self._animation.anim;
                }

                self._ped.vioDead = false;
                self._ped.vioKillAble = false;

                if (self._isDead) {
                    self._ped.applyDamageTo(200, true);
                    self._ped.vioDead = true;
                } else {
                    if (self._isKillAble) {
                        self._ped.vioKillAble = true;
                        self._ped.setCanBeDamaged(true);
                        self._ped.setProofs(false, true, true, true, true, true, true, true);
                    }
                }
            }

            if (self._created == false) {
                self._created = true;
                if (self._event != "") {
                    self._colshape = mp.colshapes.newSphere(self._pos.x, self._pos.y, self._pos.z, self._colradius, self._dim);
                }
                if (self._streamdistance != 0) {
                    self._streamcolshape = mp.colshapes.newSphere(self._pos.x, self._pos.y, self._pos.z, self._streamdistance, self._dim);
                }
            }
        }
    }

    trigger() {
        if (this._isKillAble) {
            if (this._ped) {
                if (this._ped.isDead()) {
                    CommunicationManager.TriggerServer(this._event, this._id)
                }
            }
        } else {
            CommunicationManager.TriggerServer(this._event, this._id)
        }
    }

    getPed() {
        if (this._ped) {
            return (this._ped);
        }
    }

    streamin() {
        if (this._ped == null) {
            this.create();
        }
    }

    streamout() {
        if (this._ped) {
            this._ped.destroy();
            this._ped = null;
        }
    }

    destroy() {
        if (this._ped) {
            this._ped.destroy();
            this._ped = null;
        }
        if (this._colshape) {
            this._colshape.destroy();
            this._colshape = null;
        }
        if (this._streamcolshape) {
            this._streamcolshape.destroy();
            this._streamcolshape = null;
        }
    }
}

mp.events.add("playerEnterColshape", function (shape) {
    for (key in vioPeds) {
        if (vioPeds[key]) {
            if (vioPeds[key]._colshape == shape) {
                vioPeds[key].trigger();
            }
            if (vioPeds[key]._streamcolshape == shape) {
                let finalkey = key;
                setTimeout(() => {
                    if (vioPeds[finalkey]) {
                        vioPeds[finalkey].streamin();
                    }
                }, 100);
            }
        }
    }
});

mp.events.add("playerExitColshape", function (shape) {
    for (key in vioPeds) {
        if (vioPeds[key]) {
            if (vioPeds[key]._streamcolshape == shape) {
                vioPeds[key].streamout();
            }
        }
    }
});

mp.events.add('entityStreamIn', (entity) => {
    if (entity.type == "ped") {
        if (entity.isStatic) {
            // entity.freezePosition(true);
            VioRageManager.FreezePosition(entity, true);
            entity.setInvincible(true);
        }
        if (entity.vioDead) {
            // entity.freezePosition(false);
            VioRageManager.FreezePosition(entity, false);
            entity.setInvincible(false);
            entity.applyDamageTo(200, true);
        } else {
            if (entity.vioKillAble) {
                // entity.freezePosition(false);
                VioRageManager.FreezePosition(entity, false);
                entity.setInvincible(false);
                entity.setCanBeDamaged(true);
                entity.setProofs(false, true, true, true, true, true, true, true);
            }
        }
        if (entity._animationDict != null && entity._animationAnim != null) {
            if (mp.game.streaming.doesAnimDictExist(entity._animationDict)) {
                mp.game.streaming.requestAnimDict(entity._animationDict);
                entity.taskPlayAnim(entity._animationDict, entity._animationAnim, 8.0, 1, -1, 1, 0.5, true, true, true)
            }
            // entity.freezePosition(true);
            VioRageManager.FreezePosition(entity, true);
        }
    }
});


var HitDirectionRadar = false;
var SkipObjectColShape = false;

var PlantedBombs = [];
var RemoveableObjects = {};

mp.events.add("render", () => {
    for (var key in PlantedBombs) {
        var tick = new Date().getTime();
        var bomb = PlantedBombs[key];
        var secsleft = Math.ceil((bomb.tickend - tick) / 1000);
        if (secsleft > 0) {
            if (bomb.lastsec != secsleft) {
                bomb.lastsec = secsleft;
                bomb.textlabel.text = secsleft + " Sekunden"
            }
        } else {
            if (bomb.textlabel != null) {
                bomb.textlabel.destroy();
                bomb.textlabel = null;
            }
            let lPos = mp.players.local.position;
            let dist = mp.game.system.vdist2(lPos.x, lPos.y, lPos.z, bomb.position.x, bomb.position.y, bomb.position.z);
            if (dist < 100000) {
                mp.game.fire.addExplosion(bomb.position.x, bomb.position.y, bomb.position.z, 34, 1.0, true, false, 1.0);
            }
            delete PlantedBombs[key];
        }
    }
})

function GetNextPlantedBomb() {
    for (var key in PlantedBombs) {
        var tick = new Date().getTime();
        var bomb = PlantedBombs[key];
        var secsleft = Math.ceil((bomb.tickend - tick) / 1000);
        if (secsleft > 0) {
            let lPos = mp.players.local.position;
            let dist = mp.game.system.vdist2(lPos.x, lPos.y, lPos.z, bomb.position.x, bomb.position.y, bomb.position.z);
            if (dist < 15) {
                return key;
            }
        }
    }
    return "";
}

CommunicationManager.AddServerEvent("SentPlayerRemoveableObjects", (kat, key, objects_json) => {
    if (RemoveableObjects[kat] == null) {
        RemoveableObjects[kat] = {};
    }
    if (RemoveableObjects[kat][key] == null) {
        RemoveableObjects[kat][key] = {};
    }
    RemoveableObjects[kat][key] = JSON.parse(objects_json);
});

KeybindManager.registerVioKeyFunction("Interaktion", true, () => {
    
    if(TempPlaceableObject != null) return;
    if (mp.players.local.isInAnyVehicle(true) == true) return;
    
    const localPosition = mp.players.local.position;
    
    let final_dist = 999;
    let final_kat = "";
    let final_key = "";
    let final_id = "";
    
    Object.entries(RemoveableObjects).forEach(t1 => {
        const [kat, keys] = t1;
        Object.entries(keys).forEach(t2 => {
            const [key, list] = t2;
            list.forEach(id => {
                if (vioObjects[id]) {
                    const distToObject = mp.game.system.vdist2(localPosition.x, localPosition.y, localPosition.z, vioObjects[id]._pos.x, vioObjects[id]._pos.y, vioObjects[id]._pos.z);
                    if (distToObject < final_dist) {
                        final_dist = distToObject;
                        final_kat = kat;
                        final_key = key;
                        final_id = id;
                    }
                }
            });
        });
    });
    
    if(final_dist < 15){
        RemoveableObjects[final_kat][final_key].splice(RemoveableObjects[final_kat][final_key].indexOf(final_id), 1);
        CommunicationManager.TriggerServer("OnClientRequestRemoveObject", final_kat, final_key, final_id);
        CreateNotify("~g~Objekt entfernt!");
    }
});

CommunicationManager.AddServerEvent("SetObjectToPlaceableBomb", (bomb_id, bomb_pos, bomb_last_sec) => {
    let bombtickend = new Date().getTime() + (bomb_last_sec * 1000);
    var bomb = {};
    bomb.position = bomb_pos;
    bomb.lastsec = bomb_last_sec;
    bomb.tickend = bombtickend;
    bomb.textlabel = mp.labels.new("", new mp.Vector3(bomb.position.x, bomb.position.y, bomb.position.z + 0.15),
        {
            los: false,
            font: 2,
            drawDistance: 20,
            color: [255, 255, 255, 255],
            dimension: 0
        });
    PlantedBombs[bomb_id] = bomb;
})

var OBJECT = class {
    constructor(data) {
        this._setup(data);
    }

    _setup(data) {
        var self = this;
        self._id = data.id;
        self._blip = null;
        self._hash = data.hash;
        self._pos = {
            x: data.x,
            y: data.y,
            z: data.z
        };
        self._rot = {
            x: data.rx,
            y: data.ry,
            z: data.rz
        };
        self._dim = data.dim;
        self._offsetPos = {
            x: data.offsetPosX,
            y: data.offsetPosY,
            z: data.offsetPosZ
        }
        self._offsetRot = {
            x: data.offsetRotX,
            y: data.offsetRotY,
            z: data.offsetRotZ
        }
        self._alpha = data.alpha;
        self._collision = data.collision
        self._offsetPlayer = data.offsetPlayer;
        self._offsetBone = data.offsetBone;
        self._object = null;
        self._colshape = null;
        self._event = data.event;
        self._colradius = data.radius;
        self._streamdistance = data.streamdistance;
        self._streamcolshape = null;
        self._created = false;
        self._final_z = false;
        //VioRageManager.SendChatMessage("SET-UP : " + self._hash + " | " + self._id);
        self.create();
    }

    async create() {
        var self = this;
        if (!self._object) {

            let attachPlayer = null;
            if (self._offsetBone != "" && self._offsetBone != null && self._offsetPlayer != "" && self._offsetBone !== undefined) {
                self._event = "";
                self._streamdistance = 0; // Renderdistanz wird von entityStreamIn / entityStreamOut genutzt!
                mp.players.forEachInStreamRange(function (temp_player) {
                    if (self._offsetPlayer == temp_player.name) {
                        attachPlayer = temp_player;

                    }
                })
                if (attachPlayer == null) {
                    return;
                }
            }

            // Place Object On Ground!
            if (self._hash == "hei_p_m_bag_var22_arm_s" || self._hash == "prop_mp_drug_pack_red" || self._hash == "prop_mp_drug_package" || self._hash == "prop_mp_drug_pack_blue") {
                if (self._final_z == false) {
                    let nz = mp.game.gameplay.getGroundZFor3dCoord(self._pos.x, self._pos.y, self._pos.z, 0, false);
                    if (nz <= -10) {
                        nz = self._pos.z
                    }
                    if (nz != 0) {
                        self._pos.z = nz
                        if (self._hash == "prop_mp_drug_pack_red" || self._hash == "prop_mp_drug_package" || self._hash == "prop_mp_drug_pack_blue") {
                            self._pos.z = self._pos.z + 0.15;
                        }
                    }
                    self._final_z = true;
                }
            }

            let local_pos = mp.players.local.position;
            let distfinal = mp.game.system.vdist2(local_pos.x, local_pos.y, local_pos.z, self._pos.x, self._pos.y, self._pos.z);

            if (self._streamdistance == 0 || distfinal <= (self._streamdistance * 150)) {
                self._object = mp.objects.new(mp.game.joaat(self._hash), new mp.Vector3(self._pos.x, self._pos.y, self._pos.z), {
                    dimension: self._dim,
                    rotation: new mp.Vector3(self._rot.x, self._rot.y, self._rot.z),
                    alpha: self._alpha
                })

                if (self._collision == false) {
                    //VioRageManager.SendChatMessage("NOCOLLISION : " + self._hash + " | " + self._id);
                    IsRageMpObjectReady(self._object, 1500, function (isready) {
                        if (self._object != null && isready) {
                            self._object.setCollision(self._collision, true)
                        }
                    });
                }

                if (self._offsetBone != "" && self._offsetBone != null && attachPlayer != null && self._offsetBone !== undefined) {
                    if (attachPlayer.handle == mp.players.local.handle) {
                        ObjectAttachedToPlayer = self._object;
                    }
                    let boneIndex = attachPlayer.getBoneIndex(self._offsetBone);
                    IsRageMpObjectReady(self._object, 1500, function (isready) {
                        if (attachPlayer != null) {
                            if (self._object != null && isready) {
                                self._object.attachTo(attachPlayer.handle, boneIndex, self._offsetPos.x, self._offsetPos.y, self._offsetPos.z, self._offsetRot.x, self._offsetRot.y, self._offsetRot.z, true, false, false, false, 0, true);
                            }
                        }
                    });
                } else {
                    if(LocalGroupID >= 0){
                         if (self._event == "onClientStartHeliCrashLoot") {
                            if (self._blip == null) {
                                self._blip = mp.blips.new(653, self._pos, {
                                    color: 1,
                                    scale: 1,
                                    name: 'Helikopterabsturz',
                                    shortRange: true
                                })
                            }
                        }
                    }
                    if (self._hash == "prop_mp_drug_pack_red" || self._hash == "prop_mp_drug_package" || self._hash == "prop_mp_drug_pack_blue") {
                        if (self._blip == null) {
                            self._blip = mp.blips.new(501, self._pos, {
                                color: 1,
                                scale: 0.5,
                                shortRange: true
                            })
                        }
                    }
                    if (self._hash == "hei_p_m_bag_var22_arm_s") {
                        if (self._pos.z <= 1) {
                            if (self._blip == null) {
                                self._blip = mp.blips.new(501, self._pos, {
                                    color: 1,
                                    scale: 0.5,
                                    shortRange: true
                                })
                            }
                        }
                    }
                }
            }

            if (self._created == false) {
                self._created = true;
                if (self._event != "") {
                    self._colshape = mp.colshapes.newSphere(self._pos.x, self._pos.y, self._pos.z, self._colradius, self._dim);
                }
                if (self._streamdistance != 0) {
                    self._streamcolshape = mp.colshapes.newSphere(self._pos.x, self._pos.y, self._pos.z, self._streamdistance, self._dim);
                }
            }
        }
    }

    trigger() {
        if (this._event != "") {
            if (this._event == "onClientEnterRadar") {
                if (mp.players.local.isInAnyVehicle(false)) {
                    if (mp.players.local.vehicle.getPedInSeat(-1) == mp.players.local.handle) {
                        let speedkmh = parseInt(mp.players.local.vehicle.getSpeed() * 3.6);
                        if (speedkmh > 80) {
                            CommunicationManager.TriggerServer(this._event, this._id, speedkmh);
                        }
                    }
                }
            } else if (this._event == "onClientEnterRadarDirectionONE" || this._event == "onClientEnterRadarDirectionTWO") {
                if (mp.players.local.isInAnyVehicle(false)) {
                    if (mp.players.local.vehicle.getPedInSeat(-1) == mp.players.local.handle) {
                        if (HitDirectionRadar == false && this._event == "onClientEnterRadarDirectionTWO") {
                            let speedkmh = parseInt(mp.players.local.vehicle.getSpeed() * 3.6);
                            if (speedkmh > 40) {
                                CommunicationManager.TriggerServer("onClientEnterRadarDirection", this._id);
                            }
                        }
                        if (this._event == "onClientEnterRadarDirectionONE") {
                            HitDirectionRadar = true;
                            setTimeout(() => {
                                HitDirectionRadar = false;
                            }, 2000);
                        }
                    }
                }
            } else {
                if (SkipObjectColShape == false) {
                    //SkipObjectColShape = true;
                    //setTimeout(() => {
                    //    SkipObjectColShape = false;
                    //}, 1500)
                    CommunicationManager.TriggerServer(this._event, this._id)
                }
            }
        }
    }

    streamin() {
        if (this._object == null) {
            //VioRageManager.SendChatMessage("STREAM-IN : " + this._hash + " | " + this._id);
            this.create();
        }
    }

    removeClientCache() {
        if (this._event.includes("ClientCache")) {
            if (PlayerTempObjects[this._event]) {
                if (PlayerTempObjects[this._event] == this._id) {
                    PlayerTempObjects[this._event] = false;
                }
            }
        }
    }

    streamout() {
        this.removeClientCache();
        if (this._object) {
            if (this._object == ObjectAttachedToPlayer) {
                ObjectAttachedToPlayer = null;
            }
            this._object.destroy();
            this._object = null;
        }
        if (this._blip) {
            this._blip.destroy();
            this._blip = null;
        }
    }

    isCreated() {
        return this._object ? true : false;
    }

    destroy() {
        this.removeClientCache();
        if (this._object) {
            if (this._object == ObjectAttachedToPlayer) {
                ObjectAttachedToPlayer = null;
            }
            this._object.destroy();
            this._object = null;
        }
        if (this._blip) {
            this._blip.destroy();
            this._blip = null;
        }
        if (this._colshape) this._colshape.destroy();
        this._colshape = null;

        if (this._streamcolshape) this._streamcolshape.destroy();
        this._streamcolshape = null;
        
        if(PlantedBombs[this._id] != null){
            var bomb = PlantedBombs[this._id];
            if (bomb.textlabel != null) {
                bomb.textlabel.destroy();
                bomb.textlabel = null;
            }
            delete PlantedBombs[this._id];
        }
    }

    markForDeletion() {
        if (this._object) {
            this._object.markForDeletion();
        }
    }

    getCoords(alive) {
        if (this._object) {
            return this._object.getCoords(alive);
        }
    }
}

mp.events.add("playerEnterColshape", function (shape) {
    for (key in vioObjects) {
        if (vioObjects[key]) {
            if (vioObjects[key]._colshape == shape) {
                if (vioObjects[key]._event.includes("ClientCache")) {
                    PlayerTempObjects[vioObjects[key]._event] = vioObjects[key]._id;
                } else {
                    vioObjects[key].trigger();
                }
            }
            if (vioObjects[key]._streamcolshape == shape) {
                vioObjects[key].streamin();
            }
        }
    }
});
mp.events.add("entityStreamIn", (entity) => {
    if (entity.type === "player") {
        for (key in vioObjects) {
            if (vioObjects[key]) {
                if (vioObjects[key]._offsetPlayer == entity.name) {
                    vioObjects[key].streamin();
                }
            }
        }
    }
    if (entity.type === "object") {
        if (mp.objects.exists(entity)) {
            if (entity.vio_collision != null) {
                entity.setCollision(entity.vio_collision, true);
            }
        }
    }
});

mp.events.add("entityStreamOut", (entity) => {
    if (entity.type === "player") {
        for (key in vioObjects) {
            if (vioObjects[key]) {
                if (vioObjects[key]._offsetPlayer == entity.name) {
                    vioObjects[key].streamout();
                }
            }
        }
    }
});

mp.events.add("playerExitColshape", function (shape) {
    for (key in vioObjects) {
        if (vioObjects[key]) {
            if (vioObjects[key]._streamcolshape == shape) {
                vioObjects[key].streamout();
            } else {
                vioObjects[key].removeClientCache();
            }
        }
    }
});

function GetVioObjectFromID(id) {
    if (vioObjects[id]) {
        return vioObjects[id];
    } else {
        return null;
    }
}


class ClientSettingsPointer {
    constructor(baseObject, key) {
        this.base = baseObject;
        this.key = key;
    }

    set(value) {
        this.base[this.key] = value;
    }

    get() {
        return this.base[this.key];
    }
}
class ClientSetting {
    /**
     * @constructor
     * @param {string} id - unique identifier
     * @param {string} name - display name on settings menu
     * @param {string} info - displayed description on settings menu
     * @param defaultValue - default value if value is null
     * @param {ClientSettingsPointer} value - pointer to where to Save it
     */
    constructor(id, name, info, defaultValue, value) {
        this.id = id;
        this.name = name;
        this.info = info;
        this.defaultValue = defaultValue;
        this.value = value;
        this.type = '#ERROR#';

        // Set defaultValue if value is not set
        if (this.getValue() == null && !id.startsWith('BETA_')) {
            this.setValue(this.defaultValue);
        }
    }

    /**
     * set new value on valuePoint
     * @param {*} value
     */
    setValue(value) {
        this.value.set(value);
        this.sendChatMessageValueChanged(value);
        SettingsHandler.executeSettings(this.id);
    }

    /**
     * getValue from valuePoint
     * @return {*}
     */
    getValue() {
        return this.value.get();
    }

    sendChatMessageValueChanged(oldValue, newValue) {}

    toWindowData() {
        return {
            id: this.id,
            name: this.name,
            description: this.info,
            type: this.type,
            value: this.getValue(),
        }
    }
}
class BooleanClientSetting extends ClientSetting {

    /**
     * @constructor
     * @param {string} id - unique identifier
     * @param {string} name - display name on settings menu
     * @param {string} info - displayed description on settings menu
     * @param {boolean} defaultValue - default value if value is null
     * @param {ClientSettingsPointer} value - pointer to where to Save it
     */
    constructor(id, name, info, defaultValue, value) {
        super(id, name, info, defaultValue, value);
        this.type = 'bool';
    }

    /**
     * @override
     * @param newValue
     */
    sendChatMessageValueChanged(newValue) {
        mp.gui.chat.safeMode = false;
        if (newValue) {
            VioRageManager.SendChatMessage(`${this.name} [<span style="color:#00EB00">aktiviert</span>]`);
        } else {
            VioRageManager.SendChatMessage(`${this.name} [<span style="color:#eb2b00">deaktiviert</span>]`);
        }
        mp.gui.chat.safeMode = true;
    }
}
class SliderClientSetting extends ClientSetting {

    /**
     * @constructor
     * @param {string} id - unique identifier
     * @param {string} name - display name on settings menu
     * @param {string} info - displayed description on settings menu
     * @param {number} defaultValue - default value if value is null
     * @param {ClientSettingsPointer} value - pointer to where to Save it
     * @param {number} minValue - minimum value on slider
     * @param {number} maxValue - maximum value on slider
     * @param {number} step - slider value steps
     */
    constructor(id, name, info, defaultValue, value, minValue, maxValue, step) {
        super(id, name, info, defaultValue, value);
        this.type = 'slider';
        this.min = minValue;
        this.max = maxValue;
        this.step = step;
    }

    /**
     * @override
     * @param newValue
     */
    sendChatMessageValueChanged(newValue) {
        mp.gui.chat.safeMode = false;
        VioRageManager.SendChatMessage(`${this.name} auf <span style="color:#00EB00">${newValue}</span> geändert.`);
        mp.gui.chat.safeMode = true;
    }

    /**
     * @override
     * @return {{min: number, max: number, name: string, description: string, step: number, id: string, type: string, value: *}}
     */
    toWindowData() {
        return {
            id: this.id,
            name: this.name,
            description: this.info,
            type: this.type,
            value: this.getValue(),
            ...this.getSliderData(),
        }
    }

    /**
     * get sliderData to build slider on settings menu
     * @return {{min: number, max: number, step: number}}
     */
    getSliderData() {
        return {
            step: this.step,
            min: this.min,
            max: this.max,
        }
    }
}
class ListClientSetting extends ClientSetting {

    /**
     * @constructor
     * @param {string} id - unique identifier
     * @param {string} name - display name on settings menu
     * @param {string} info - displayed description on settings menu
     * @param {string} defaultValue - default value if value is null
     * @param {ClientSettingsPointer} value - pointer to where to Save it
     * @param {() => string[]} listValues - function returning list elements
     */
    constructor(id, name, info, defaultValue, value, listValues) {
        super(id, name, info, defaultValue, value);
        this.type = 'list';
        this.listValues = listValues;
    }

    /**
     * @override
     * @param newValue
     */
    sendChatMessageValueChanged(newValue) {
        mp.gui.chat.safeMode = false;
        VioRageManager.SendChatMessage(`${this.name} auf <span style="color:#00EB00">${newValue}</span> geändert.`);
        mp.gui.chat.safeMode = true;
    }


    toWindowData() {
        return {
            id: this.id,
            name: this.name,
            description: this.info,
            type: this.type,
            value: this.getValue(),
            listElements: this.getListElements(),
        }
    }

    /**
     * get list elements to generate list on settings menu
     * @return {string[]}
     */
    getListElements() {
        return this.listValues();
    }
}
class StringClientSetting extends ClientSetting {

    /**
     * @constructor
     * @param {string} id - unique identifier
     * @param {string} name - display name on settings menu
     * @param {string} info - displayed description on settings menu
     * @param {string} defaultValue - default value if value is null
     * @param {ClientSettingsPointer} value - pointer to where to Save it
     */
    constructor(id, name, info, defaultValue, value) {
        super(id, name, info, defaultValue, value);
        this.type = 'string';
    }

    /**
     * @override
     * @param newValue
     */
    sendChatMessageValueChanged(newValue) {
        mp.gui.chat.safeMode = false;
        VioRageManager.SendChatMessage(`${this.name} auf <span style="color:#00EB00">${newValue}</span> geändert.`);
        mp.gui.chat.safeMode = true;
    }
}
class SettingsCategory {
    /**
     * @constructor
     * @param {string} name - display name on settings menu
     * @param {ClientSetting[]}settings - settings displayed inside the category
     */
    constructor(name, settings) {
        this.name = name;
        this.settings = settings;
    }

    /**
     * getter for attribute name
     * @return {string}
     */
    getName() {
        return this.name;
    }

    /**
     * getter for attribute settings
     * @return {ClientSetting[]}
     */
    getSettings() {
        return this.settings;
    }
}


class SettingsHandler {

    static init() {
        SettingsHandler.email = '';
        SettingsHandler.securityLevel = 0;
        SettingsHandler.emailConfirmed = false;
        SettingsHandler.usingConnectionManager = false;
        SettingsHandler.atmBlips = [];
        /**
         *
         * @type {SettingsCategory[]}
         */
        SettingsHandler.clientSettingsData = [];
        SettingsHandler.testServerCategory = null;
        SettingsHandler.allowedConnections;


        SettingsHandler.initSettings();


        KeybindManager.registerVioKeyFunction('Settings', true, SettingsHandler.openSettings);

        CommunicationManager.AddServerEvent('updateEMail', SettingsHandler.onServerUpdateEMail);
        CommunicationManager.AddServerEvent('OnServerSendAllowedConnections', SettingsHandler.onServerSendAllowedConnections);

        CommunicationManager.AddWebBrowserEvent('OnClientRequestSettingsWindow', SettingsHandler.onCefTriggerClient, 'Settings');
    }

    static getAllClientSettings() {
        /**
         * @type {ClientSetting[]}
         */
        const allSettings = [];
        SettingsHandler.clientSettingsData.forEach(category => {
            allSettings.push(...category.settings);
        });
        if (isPlayerOnBetaServer || isClientAdmin()) {
            allSettings.push(...SettingsHandler.testServerCategory.settings);
        }
        return allSettings;
    }

    static openSettings() {
        if (!('Settings' in Webwindow) && !mp.players.local.isDead() && login) {
            if (mp.gui.cursor.visible == false) {

                Webwindow["Settings"] = new CEFBrowser(`https://vio-v.com/gameplay/CEF/${CEF_Master_Link}/html/player/settings/settings.html`, true);

                const rawSettingsData = [...SettingsHandler.clientSettingsData];

                if (isPlayerOnBetaServer || (isClientAdmin() && ['Shepard','sheby','Forces','kultstar'].includes(mp.players.local.name))) {
                    rawSettingsData.push(SettingsHandler.testServerCategory);
                }

                Webwindow["Settings"].start('Init', JSON.stringify({
                    settingsData: rawSettingsData.map(categories => {
                        return {
                            name: categories.getName(),
                            settings: categories.getSettings().map(clientSettings => {
                                return clientSettings.toWindowData();
                            }),
                        };
                    }),
                    accountData: {
                        securityLevel: SettingsHandler.securityLevel,
                        email: SettingsHandler.email,
                        emailConfirmed: SettingsHandler.emailConfirmed,
                        usingConnectionManager: SettingsHandler.usingConnectionManager,
                        // allowedConnections: SettingsHandler.allowedConnections,
                    }
                }));

                if (SettingsHandler.usingConnectionManager) {
                    CommunicationManager.TriggerServer("OnClientRequestAllowedConnections");
                }
            }
        } else {
            if ('Settings' in Webwindow) {
                Webwindow["Settings"].destroy();
                delete Webwindow["Settings"];
            }
        }
    }

    static initSettings() {

        const helperObject = {
            set spawnPoint(value) {
                CommunicationManager.TriggerServer("changePlayerSetting", "spawn", value);
            },
            get spawnPoint() {
                return " ";
            },
        }

        if (!('hitSettings' in mp.storage.data)) {
            mp.storage.data.hitSettings = {};
        }

        if (!('voice_settings' in mp.storage.data)) {
            mp.storage.data.voice_settings = {};
        }

        if (!('animationWheel' in mp.storage.data)) {
            mp.storage.data.animationWheel = {};
        }

        if (!('weaponcrafting' in mp.storage.data)) {
            mp.storage.data.weaponcrafting = {};
        }


        const gameSettings = new SettingsCategory('Spiel', [
            new BooleanClientSetting('GAME_DISPLAY_ATM', 'ATMs', 'Anzeige der ATMs auf der Karte', true, new ClientSettingsPointer(mp.storage.data, 'drawATMs')),
            new BooleanClientSetting('GAME_DISPLAY_FREE_HOUSE', 'Haus', 'Anzeige der freien Häuser auf der Karte', false, new ClientSettingsPointer(mp.storage.data, 'drawFreeHouses')),
            new BooleanClientSetting('GAME_DISPLAY_APARTMENTS', 'Wohnungen', 'Anzeige der Wohnungen auf der Karte', true, new ClientSettingsPointer(mp.storage.data, 'drawApartments')),
            new BooleanClientSetting('GAME_USE_HELMET', 'Helm', 'Möglichkeit das automatische Aufsetzen des Helmes zu deaktivieren', true, new ClientSettingsPointer(mp.storage.data, 'useHelmet')),
            new BooleanClientSetting('GAME_DISPLAY_NOOB_QUEST', 'Quests', 'Möglichkeit die Anzeige der Quests zu deaktivieren', true, new ClientSettingsPointer(mp.storage.data, 'drawQuests')),
            new ListClientSetting('GAME_PLAYER_SPAWNPOINT', 'Spawnpunkt', 'An diesem Punkt startest du, wenn du den Server betrittst', ' ', new ClientSettingsPointer(helperObject, 'spawnPoint'), SettingsHandler.loadPlayerSpawnPoints),
        ]);

        const displaySettings = new SettingsCategory('Anzeige', [
            new BooleanClientSetting('DISPLAY_DRAW_TACHO', 'Tacho', 'Möglichkeit den Tacho an- und auszuschalten', true, new ClientSettingsPointer(mp.storage.data, 'drawTacho')),
            new BooleanClientSetting('DISPLAY_DRAW_COMBAT_HIT', 'Hitmarker', 'Hitmarker anzeigen', true, new ClientSettingsPointer(mp.storage.data.hitSettings, 'hitmarker')),
            new BooleanClientSetting('DISPLAY_DRAW_COMBAT_HIT_DAMAGE', 'Schadenswerte', 'Schadenswerte anzeigen', true, new ClientSettingsPointer(mp.storage.data.hitSettings, 'dmgmarker')),
            new BooleanClientSetting('DISPLAY_DRAW_COMBAT_HIT_VEHICLE', 'Fahrzeug-Schadensindikation', 'Fahrzeug-Schadensindikation anzeigen', true, new ClientSettingsPointer(mp.storage.data.hitSettings, 'dmgindicator')),
            new BooleanClientSetting('DISPLAY_DRAW_COMBAT_CROSSHAIR', 'Crosshair', 'Crosshair dauerhaft anzeigen', 1, new ClientSettingsPointer(mp.storage.data, 'crosshair')),
            new BooleanClientSetting('DISPLAY_DRAW_NAMETAG', 'Spielernamen', 'Die Anzeige der Spielernamen anderer Spieler, welche sich in deiner Umgebung befinden. Achtung, diese Funktion kann das Spielerlebnis negativ beeinflussen!', true, new ClientSettingsPointer(mp.storage.data, 'playernametag')),
            new BooleanClientSetting('DISPLAY_SHOW_HEALCOOLDOWN', 'Heilungsanzeige', 'Die Heilungsanzeige signalisiert dir, ab wann es wieder möglich ist, dass du dich heilst oder dir eine Schutzweste anziehen kannst.', true, new ClientSettingsPointer(mp.storage.data, 'HealCooldown')),
            new BooleanClientSetting('DISPLAY_COLORBLIND', 'Farbenblindenmodus', 'Der Farbenblindenmodus erleichtert Spielern mit einer Sehschwäche das Spielerlebnis.', false, new ClientSettingsPointer(mp.storage.data, 'ColorBlind')),
            new BooleanClientSetting('DISPLAY_SHOW_HELP_TEXT', 'Hinweistexte', 'Die Anzeige der Vio-V Hinweistexte z.B. im Ladevorgang.', true, new ClientSettingsPointer(mp.storage.data, 'ShowHelpText')),
            new BooleanClientSetting('DISPLAY_DISABLE_IDLE_CAM', 'AFK-Kamera', 'Automatische Kamerafahrt bei Abwesenheit.', true, new ClientSettingsPointer(mp.storage.data, 'ShowAFKCamFlight')),
            new BooleanClientSetting('DISPLAY_COMPASS', 'Kompass', 'Kompassanzeige im HUD', true, new ClientSettingsPointer(mp.storage.data, 'Compass')),
            new SliderClientSetting('DISPLAY_COMPASS_WIDTH', 'Kompassbreite', 'Breite des Kompasses im Verhältnis zur Bildschirmbreite', 35, new ClientSettingsPointer(mp.storage.data, 'CompassWidth'), 20, 80, 10),
            new SliderClientSetting('DISPLAY_COMPASS_VIEW_RANGE', 'Kompassbereich', 'Kompass Sichtfeld', 110, new ClientSettingsPointer(mp.storage.data, 'CompassViewRange'), 90, 220, 10),
        ]);

        const audioSettings = new SettingsCategory('Audio', [
            new BooleanClientSetting('AUDIO_RADIO', 'Radio', 'Sound des Radios', true, new ClientSettingsPointer(mp.storage.data, 'vehicleradio')),
            new BooleanClientSetting('AUDIO_PAYDAY', 'PayDay-Sound', 'Sound beim Erhalten eines PayDays', true, new ClientSettingsPointer(mp.storage.data, 'paydaySound')),
            new BooleanClientSetting('AUDIO_HITSOUND', 'Hitglocke', 'Sound beim Treffen eines Spielers', false, new ClientSettingsPointer(mp.storage.data.hitSettings, 'sound')),
            new SliderClientSetting('AUDIO_GENERAL_VOLUME', 'Lautstärke der Sounds', 'Lautstärke der Sounds z.B PayDay', 100, new ClientSettingsPointer(mp.storage.data, 'soundVolume'), 0, 100, .5),
        ]);

        const voiceSettings = new SettingsCategory('Voice', [
            new SliderClientSetting('VOICE_VOLUME', 'Lautstärke des Voicechats', 'Lautstärke der anderen Spieler im Voicechat', 100, new ClientSettingsPointer(mp.storage.data.voice_settings, 'volume'), 10, 100, 1),
            new BooleanClientSetting('VOICE_MIC_CONNECT_STATUS', 'Mikrofon', 'Mikrofon beim Verbinden an/aus', true, new ClientSettingsPointer(mp.storage.data, 'microphonestatusstart')),
            new BooleanClientSetting('VOICE_MIC_PUSH_TO_TALK', 'Push to talk', 'Push-To-Talk Taste: M', true, new ClientSettingsPointer(mp.storage.data.voice_settings, 'pushtotalk')),
            new BooleanClientSetting('VOICE_SHOW_RANGE', 'Distanzanzeige', 'Beim sprechen wird die Range angezeigt, in der man gehört werden kann.', false, new ClientSettingsPointer(mp.storage.data.voice_settings, 'showVoiceRange')),
        ]);

        const chatSettings = new SettingsCategory('Chat', [
            new BooleanClientSetting('CHAT_SHOW', 'Chat', ' Chat Overlay. Achtung, diese Funktion kann das Spielerlebnis negativ beeinflussen!', true, new ClientSettingsPointer(mp.storage.data, 'showChat')),
            new BooleanClientSetting('CHAT_SHOW_TIME', 'Chatzeit', 'Anzeige der Uhrzeit im Chat', true, new ClientSettingsPointer(mp.storage.data, 'showChatTime')),
            new BooleanClientSetting('CHAT_SHOW_NEWS_MESSAGES', 'Reporter', 'Möglichkeit die Anzeige des Reporterchats zu deaktivieren. Sollte diese Einstellung deaktiviert sein, wirst du nicht mehr über Events und Aktionen informiert!', true, new ClientSettingsPointer(mp.storage.data, 'drawNewsChat')),
            new BooleanClientSetting('CHAT_SHOW_NEWS_NOTIFY', 'Werbungen', 'Möglichkeit die Anzeige der Werbungen zu deaktivieren. Sollte diese Einstellung deaktiviert sein, wirst du nicht mehr über Versteigerungen, Angebote und Gesuche informiert!', true, new ClientSettingsPointer(mp.storage.data, 'drawNewsNotify')),
            new SliderClientSetting('CHAT_FONT_SIZE', 'Schriftgröße', 'Die Schriftgröße deines Chats', 120, new ClientSettingsPointer(mp.storage.data, 'chatSize'), 80, 150, 1),
            new SliderClientSetting('CHAT_HEIGHT', 'Chathöhe', 'Die Höhe deines Chats', 15, new ClientSettingsPointer(mp.storage.data, 'chatHeight'), 10, 30, 1),
            new SliderClientSetting('CHAT_WIDTH', 'Chatbreite', 'Die Breite deines Chats', 35, new ClientSettingsPointer(mp.storage.data, 'chatWidth'), 25, 50, 1),
        ]);


        SettingsHandler.clientSettingsData = [
            gameSettings,
            displaySettings,
            audioSettings,
            voiceSettings,
            chatSettings,
        ];


        mp.storage.data.testServer = {};

        SettingsHandler.testServerCategory = new SettingsCategory('Debug', [
            new BooleanClientSetting('BETA_ANTI_CHEAT_DEBUG_1', 'AntiCheat AIM Debugger 1', 'Chat', false, new ClientSettingsPointer(mp.storage.data.testServer, mp.game.joaat('BETA_ANTI_CHEAT_DEBUG_1'))),
            new BooleanClientSetting('BETA_ANTI_CHEAT_DEBUG_2', 'AntiCheat AIM Debugger 2', 'Ingame', false, new ClientSettingsPointer(mp.storage.data.testServer, mp.game.joaat('BETA_ANTI_CHEAT_DEBUG_2'))),
            new BooleanClientSetting('BETA_SEATS_DEBUG', 'Seats Debugger', '', false, new ClientSettingsPointer(mp.storage.data.testServer, mp.game.joaat('BETA_SEATS_DEBUG'))),
            new BooleanClientSetting('BETA_COMBAT_DEBUG', 'Combat Debugger', '', false, new ClientSettingsPointer(mp.storage.data.testServer, mp.game.joaat('BETA_COMBAT_DEBUG'))),
            new BooleanClientSetting('BETA_SHOW_INTERIOR_ID', 'Interior Id', '', false, new ClientSettingsPointer(mp.storage.data.testServer, mp.game.joaat('BETA_SHOW_INTERIOR_ID'))),
            new BooleanClientSetting('BETA_SHOW_ACTIVE_TASKS', 'Active Tasks', '', false, new ClientSettingsPointer(mp.storage.data.testServer, mp.game.joaat('BETA_SHOW_ACTIVE_TASKS'))),
        ]);

        mp.storage.flush();
    }

    /**
     * @param {null|string} id
     */
    static executeSettings(id = null) {
        mp.storage.flush();

        if (id == null || id === 'GAME_DISPLAY_ATM') {
            if (mp.storage.data.drawATMs) { //ATM Blips
                for (let y in ATMTable) {
                    const blip = mp.blips.new(277, ATMTable[y], {
                        shortRange: true,
                        color: 69,
                        name: "Geldautomat"
                    });
                    SettingsHandler.atmBlips[y] = blip;
                }
            } else {
                SettingsHandler.atmBlips.forEach(blip => {
                    blip.destroy();
                });
                SettingsHandler.atmBlips = [];
            }
        }

        if (id === 'GAME_DISPLAY_APARTMENTS') {
            refreshApartmentBlips();
        }

        if (id === 'GAME_DISPLAY_FREE_HOUSE') {
            refreshHouseBlips();
        }


        if (mp.players.local.isInAnyVehicle(false)) {
            if (!mp.storage.data.vehicleradio) {
                mp.game.audio.setVehRadioStation(mp.players.local.vehicle.handle, "OFF")
                //mp.game.invoke("0xdfc63f22b454fff5", mp.players.local.vehicle.handle, "OFF"); //SET_VEH_RADIO_STATION
                mp.game.audio.setUserRadioControlEnabled(false);
            } else {
                mp.game.audio.setUserRadioControlEnabled(true);
            }
        }
        if (id === 'GAME_USE_HELMET') {
            if (mp.storage.data.useHelmet) { //Helm Autoequip
                canWearHelmet = true;
                mp.players.local.setHelmet(true)
            } else {
                canWearHelmet = false;
                mp.players.local.setHelmet(false)
            }
        }

        mp.gui.execute("setFontSize(" + mp.storage.data.chatSize + ")");
        mp.gui.execute("setChatHeight(" + mp.storage.data.chatHeight + ")");
        mp.gui.execute("setChatWidth(" + mp.storage.data.chatWidth + ")");

        if (voiceChat !== undefined) {
            voiceChat.call("setAudioVolume", mp.storage.data.soundVolume / 100)
        } else {
            tempVoiceCommands.push({
                "command": "setAudioVolume",
                "arg": mp.storage.data.soundVolume / 100
            })
        }

        if (id === 'GAME_DISPLAY_NOOB_QUEST') {
            if (mp.storage.data.drawQuests) {
                RemoveInformationsFromInformationWindowByTyp(4);
                CommunicationManager.TriggerServer("requestPlayerQuest");
            } else {
                RemoveInformationsFromInformationWindowByTyp(4);
            }
        }
    }

    static loadPlayerSpawnPoints() {
        const spawnPoints = [];

        spawnPoints.push("Los Santos International Airport");
        spawnPoints.push("Del Perro");
        spawnPoints.push("Fight Club");
        spawnPoints.push('Haus');
        spawnPoints.push('Wohnung');

        switch (LocalGroupID) {
            case 0: // VioGroup.LSPD
                spawnPoints.push('Mission Row Police Department');
                break;
            case 1: // VioGroup.LSFD
                spawnPoints.push('Hospital');
                spawnPoints.push('Paleto Bay');
                spawnPoints.push('Sandy Shores');
                break;
            case 2: // VioGroup.NEWS
                spawnPoints.push('Weazel News');
                break;
            case 3: // VioGroup.FIB
                spawnPoints.push('FIB');
                break;
            case 4: // VioGroup.LSSD
                spawnPoints.push('Paleto Bay Sheriffs Office');
                break;
            default:
                if (LocalGroupID > -1) {
                    spawnPoints.push('Gruppe');
                }
        }

        return spawnPoints;
    }

    /*
     * Server Events
     */

    static onServerUpdateEMail(email, confirmed, securitylevel) {
        SettingsHandler.email = email;
        SettingsHandler.emailConfirmed = !!confirmed;
        SettingsHandler.securityLevel = securitylevel;
        SettingsHandler.usingConnectionManager = securitylevel >= 2;
    }

    static onServerSendAllowedConnections(allowedConnections) {
        SettingsHandler.allowedConnections = allowedConnections;
        Webwindow['Settings'].call('GetConnectionManagerUsers', JSON.stringify(allowedConnections));
    }

    /*
     * CEF Events
     */

    static onCefTriggerClient(eventName, ...args) {
        switch (eventName) {
            case 'close':
                SettingsHandler.closeWindow();
                break;
            case "backToMainMenu":
                SettingsHandler.closeWindow();
                CommunicationManager.TriggerServer("OnClientOpenSelfOverview");
                break;
            case 'requestAllAllowedConnections':
                CommunicationManager.TriggerServer("OnClientRequestAllowedConnections");
                break;
            case 'deleteConnectionManagerToken': {
                const [token] = args;
                CommunicationManager.TriggerServer("OnClientRequestDeleteAllowedConnection", token);
            }
                break;
            case 'updateValue': {
                const [valueName, value] = args;
                const setting = SettingsHandler.getAllClientSettings().find(settings => settings.id === valueName);
                if (setting != null) {
                    setting.setValue(value);
                } else {
                    VioRageManager.SendChatMessage(`ERROR: Setting not found: ${valueName}`);
                }
            }
                break;
            case 'updatePassword': {
                const [oldPw, newPw1, newPw2] = args;
                SettingsHandler.closeWindow();
                if (newPw1 !== newPw2) {
                    CreateNotify('~r~Passwörter stimmen nicht überein!');
                    return;
                }
                CommunicationManager.TriggerServer("changePassword", oldPw, newPw1);
            }
                break;
            case 'updateEmail': {
                const [newEmail] = args;
                SettingsHandler.closeWindow();
                CommunicationManager.TriggerServer("changeEMail", newEmail);
            }
                break;
            case 'sendConfirmEmail': {
                CommunicationManager.TriggerServer("OnClientRequestEmailConfirmation", SettingsHandler.email);
            }
                break;
            case 'removeAllowedConnection': {
                const [scName] = args;
                CommunicationManager.TriggerServer("OnClientRequestDeleteAllowedConnection", scName);
            }
                break;
            case 'setConnectionManagerStatus': {
                const [toggle] = args;
                CommunicationManager.TriggerServer("OnClientChangeConnectionmanager", Number(toggle));
            }
                break;
        }
    }

    static closeWindow() {
        if ('Settings' in Webwindow) {
            Webwindow["Settings"].destroy();
            delete Webwindow["Settings"];
        }
    }
}
SettingsHandler.init();

// Josh's Hause (https://gta.fandom.com/wiki/Surreal_Estate)
mp.game.streaming.requestIpl("BH1_47_JoshHse_UnBurnt");

// Sniper Mission. Haus am Stand (Banham Canyon) (https://gta.fandom.com/wiki/By_the_Book)
mp.game.streaming.requestIpl("ch1_02_closed");

// Fenster Casino
mp.game.streaming.requestIpl("hei_dlc_windows_casino");

// Loch im FIB (https://imgur.com/a/HAOunBE)
mp.game.streaming.requestIpl("dt1_05_hc_remove");

// Lifeinvader
mp.game.streaming.requestIpl('facelobby');

// Casino
mp.game.streaming.requestIpl('vw_casino_main');
mp.game.streaming.requestIpl('hei_dlc_windows_casino');

CommunicationManager.AddServerEvent("setFactoryColor", (arg0, arg1) => {
    if (FactoryBlip[Number(arg0)] != null) {
        let tmpPos = FactoryBlip[Number(arg0)].getCoords();
        let tmpName = FactoryBlip[Number(arg0)].name;
        FactoryBlip[Number(arg0)].setColour(arg1);
        /*FactoryBlip[Number(arg0)].destroy();

        FactoryBlip[Number(arg0)] = mp.blips.new(478,tmpPos,{
            name: tmpName,
            shortRange: true,
            color: Number(arg1)
        })*/
    }
});
CommunicationManager.AddServerEvent("setFactoryName", (arg0, arg1) => {
    if (FactoryBlip[Number(arg0)] != null) {
        let tmpColor = FactoryBlip[Number(arg0)].getColour();
        FactoryBlip[Number(arg0)].destroy();
        FactoryBlip[Number(arg0)] = mp.blips.new(478, FactoryBlipPosition[Number(arg0)], {
            color: tmpColor,
            name: "Fabrik: " + arg1,
            shortRange: true
        })
    }
});

function DestroyGroupWindow() {
    mp.gui.cursor.visible = false;
    VioRageManager.ShowChat(true);
    VioRageManager.ActivateChat(true);

    if (Webwindow["GroupOverviewWindow"] != null) {
        Webwindow["GroupOverviewWindow"].active(false);
        Webwindow["GroupOverviewWindow"].call("gang:close");
    }
}

CommunicationManager.AddWebBrowserEvent("UpdateGroupWindowForClient", (typ, val, rang, rang1) => {
    switch (typ) {
        case "uninvite_player":
            CommunicationManager.TriggerServer("updateGroup", "uninvite_player", val, 0, 0);
            break;
        case "befoerdern":
            CommunicationManager.TriggerServer("updateGroup", "rank_up_player", val, 0, 0)
            break;
        case "degradieren":
            CommunicationManager.TriggerServer("updateGroup", "rank_down_player", val, 0, 0)
            break;
        case "uninvite":
            CommunicationManager.TriggerServer("updateGroup", "uninvite", val, rang, 0)
            break;
        case "invite":
            CommunicationManager.TriggerServer("updateGroup", "invite", val, rang, 0)
            break;
        case "rank_down":
            CommunicationManager.TriggerServer("updateGroup", "rank_down", val, rang, 0)
            break;
        case "diplomacy":
            CommunicationManager.TriggerServer("updateGroup", "diplomacy", val, rang, 0)
            break;
        case "set_permission":
            CommunicationManager.TriggerServer("updateGroup", "set_permission", val, rang, 0)
            break;
        case "cashout":
            CommunicationManager.TriggerServer("updateGroup", "cashout", val, rang, 0)
            break;
        case "crafting":
            CommunicationManager.TriggerServer("updateGroup", "crafting", val, rang, 0)
            break;
        case "shop":
            DestroyGroupWindow();
            CommunicationManager.TriggerServer("updateGroup", "hauskasse", val, 0, 0)
            break;
        case "openCrafting":
            DestroyGroupWindow();
            CommunicationManager.TriggerServer("updateGroup", "openCrafting", val, 0, 0)
            break;
        case "rank_up":
            CommunicationManager.TriggerServer("updateGroup", "rank_up", val, rang, 0)
            break;
        case "respawn":
            CommunicationManager.TriggerServer("updateGroup", "respawn", val, rang, 0)
            break;
        case "storage":
            CommunicationManager.TriggerServer("updateGroup", "storage", val, rang, 0)
            break;
        case "academy_trainer":
            CommunicationManager.TriggerServer("updateGroup", "academy_trainer", val, rang, 0)
            break;
        case "academy_lead":
            CommunicationManager.TriggerServer("updateGroup", "academy_lead", val, rang, 0)
            break;
        case "cash_out_player":
            CommunicationManager.TriggerServer("updateGroup", "cash_out_player", val, rang, 0)
            break;
        case "item_permission":
            CommunicationManager.TriggerServer("updateGroup", "item_permission", val, rang, 0)
            break;
        case "park":
            CommunicationManager.TriggerServer("updateGroup", "park", val, rang, 0)
            break;
        case "change_rank_name":
            CommunicationManager.TriggerServer("updateGroup", "change_rank_name", val, 0, 0)
            break;
        case "Name":
            CommunicationManager.TriggerServer("updateGroup", "change_gang_name", val, 0, 0)
            break;
        case "getbag":
            CommunicationManager.TriggerServer("updateGroup", "get_action_bag", val, 0, 0)
            break;
        case "update_gang":
            DestroyGroupWindow();
            CommunicationManager.TriggerServer("updateGroup", "update_gang", val, 0, 0)
            break;
        case "respawnCar":
            CommunicationManager.TriggerServer("updateGroup", "respawnCar", val, 0, 0)
            break;
        case "respawnCars":
            CommunicationManager.TriggerServer("updateGroup", "respawnCars", val, 0, 0)
            break;
        case "updateskin":
            CommunicationManager.TriggerServer("updateGroup", "updateskin", val, 0, 0)
            break;
        case "equip":
            CommunicationManager.TriggerServer("updateGroup", "equip", val, 0, 0)
            break;
        case "deleteGang":
            CommunicationManager.TriggerServer("updateGroup", "deleteGang", val, 0, 0)
            break;
        case "devareCar":
            DestroyGroupWindow();
            CommunicationManager.TriggerServer("updateGroup", "deleteGangVehicle", val, 0, 0)
            break;
        case "Pinnwand":
            DestroyGroupWindow();
            CommunicationManager.TriggerServer("updateGroup", "Pinnwand", val, 0, 0)
            break;
        case "open_storage":
            DestroyGroupWindow();
            CommunicationManager.TriggerServer("updateGroup", "open_storage", val, 0, 0)
            break;
        case "changeColor":
            DestroyGroupWindow();
            CommunicationManager.TriggerServer("updateGroup", "change_gang_color", val.toString(), rang.toString(), rang1.toString())
            break;
        case "changeColor2":
            DestroyGroupWindow();
            CommunicationManager.TriggerServer("updateGroup", "change_gang_color2", val.toString(), rang.toString(), rang1.toString())
            break;
        case "activateboost":
            DestroyGroupWindow();
            CommunicationManager.TriggerServer("updateGroup", "activateboost", val.toString(), 0, 0)
            break;
        case "changeRankBonus":
            DestroyGroupWindow();
            CommunicationManager.TriggerServer("updateGroup", "change_rank_bonus", val, 0, 0)
            break;
        case "sendDiplomacyCode":
            DestroyGroupWindow();
            if (val != LocalGroupID) {
                CommunicationManager.TriggerServer("OnClientRequestStartDiplomacyGroup", val, rang);
            } else {
                CreateNotify("~r~Du kannst ein Bündnis nur mit anderen Gruppen eingehen!");
            }
            break;
        case "sendDiplomacyAccept":
            DestroyGroupWindow();
            CommunicationManager.TriggerServer("OnClientRequestAcceptDiplomacy");
            break;
        case "sendDiplomacyCancel":
            DestroyGroupWindow();
            CommunicationManager.TriggerServer("OnClientRequestCancelDiplomacy");
            break;
        case "signup_operation":
            DestroyGroupWindow();
            CommunicationManager.TriggerServer("OnClientRequestSignupOperation", val);
            break;
    }
}, "GroupOverviewWindow");

CommunicationManager.AddServerEvent("openFactoryRob", (...args) => {
    if (args[0] == 0) {
        getSelectionChoices("factorycapture");
    } else {
        getSelectionChoices("factoryrob");
    }
})

CommunicationManager.AddServerEvent("sentNewPoliceOrderInformation", (pos) => {
    let zoneName = getLocationZoneName(pos.x, pos.y, pos.z);
    CreateNotify("In der Region um " + zoneName + " soll ein Versorgungstransporter beladen werden!", 30)
})

CommunicationManager.AddServerEvent("SetPlayerCarryingAction", (status) => {
    mp.players.local.giveWeapon(2725352035, 1, true)
    isPlayerCarryingAction = status;
    disableSprintJump = status;
})


CommunicationManager.AddServerEvent("OpenGroupWindowForClient", (gdata, gboosts) => {
    DestroyGroupWindow();
    if (Webwindow["GroupOverviewWindow"]) {
        Webwindow["GroupOverviewWindow"].active(true);
        mp.gui.cursor.visible = true;
        Webwindow["GroupOverviewWindow"].call("gang:init", lang_de.items, gdata, gboosts, LocalGroupID);
    } else {
        Webwindow["GroupOverviewWindow"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/group_menue/start_menue.html", true);
        Webwindow["GroupOverviewWindow"].start("gang:init", lang_de.items, gdata, gboosts, LocalGroupID);
    }
});

CommunicationManager.AddWebBrowserEvent("OnClientRequestCloseGroupWindow", () => {
    DestroyGroupWindow();
}, "GroupOverviewWindow");

/* TestServer Stuff */
VioRageManager.registerConsoleCommand("gangskin", () => {
    CommunicationManager.TriggerServer("updateGroup", "equip", 1, 0, 0);
});

VioRageManager.registerConsoleCommand("bag", () => {
    CommunicationManager.TriggerServer("updateGroup", "get_action_bag", 1, 0, 0)
});

VioRageManager.registerConsoleCommand("storage", () => {
    CommunicationManager.TriggerServer("updateGroup", "open_storage", 1, 0, 0)
});

CommunicationManager.AddServerEvent("sentPlayerNews", (arg0) => {
    if (player_lang != 0) {
        if (mp.storage.data.drawNewsChat == "1") {
            VioRageManager.SendChatMessage(arg0);
        }
    }
})

CommunicationManager.AddServerEvent("sentPlayerNewsNotify", (arg0) => {
    if (player_lang != 0) {
        if (mp.storage.data.drawNewsNotify == "1") {
            CreateNotify(arg0);
        }
    }
})


var TempPlaceableObject = null;
var PoliceMarker = [];
var temp_sos_blip = false;
var HQPoliceInterval = null;

mp.keys.bind(0x12, true, function () {
    if (Webwindow["PoliceRadio"] != null) {
        if (Webwindow["PoliceRadio"].interact == false && mp.gui.cursor.visible == false && Webwindow["PoliceRadio"].isActive == true) {
            Webwindow["PoliceRadio"].interact = true;
            mp.gui.cursor.visible = true;
        } else if (Webwindow["PoliceRadio"].interact == true && mp.gui.cursor.visible == true && Webwindow["PoliceRadio"].isActive == true) {
            Webwindow["PoliceRadio"].interact = false;
            mp.gui.cursor.visible = false;
        }
    }
});

function MarkPoliceEmergency() {
    if (HQPoliceInterval != null) {
        clearInterval(HQPoliceInterval);
        HQPoliceInterval = null;
    }
    if (HQPoliceRadio["EmergencyPosition"] != null && HQPoliceRadio["TargetLocal"] == false) {
        if (HQPoliceRadio["EmergencyPosition"].x != 0 && HQPoliceRadio["EmergencyPosition"].y != 0 && HQPoliceRadio["EmergencyPosition"].z != 0) {
            // VioRageManager.setWayPoint(HQPoliceRadio["EmergencyPosition"], 1, 1);
            PositionManager.setPositionData("EmergencyPosition", "Polizei Ortung", HQPoliceRadio["EmergencyPosition"], 3, 8);
        }
    }
    if (HQPoliceRadio["TargetName"] != "") {
        if (HQPoliceRadio["TargetLocal"] == false) {
            CommunicationManager.TriggerServer("OnClientRequestPolicePosition", HQPoliceRadio["TargetName"]);
        }

        HQPoliceInterval = setInterval(function () {
            if (HQPoliceRadio["TargetName"] != "" && HQPoliceRadio["Status"] != -1) {
                if (HQPoliceRadio["TargetLocal"] == false) {
                    CommunicationManager.TriggerServer("OnClientRequestPolicePosition", HQPoliceRadio["TargetName"]);
                }
            } else {
                if (HQPoliceInterval != null) {
                    clearInterval(HQPoliceInterval);
                    HQPoliceInterval = null;
                }
            }
        }, 5000);
    }
}

HQPoliceRadio["Status"] = -1;
HQPoliceRadio["Emergency"] = "";
HQPoliceRadio["EmergencyPosition"] = null;
HQPoliceRadio["Group"] = -1;
HQPoliceRadio["TargetName"] = "";
HQPoliceRadio["TargetLocal"] = false;
HQPoliceRadio["EMSKEY"] = "";
HQPoliceRadio["EmergencyStart"] = 0;
HQPoliceRadio["Server"] = 0;

CommunicationManager.AddServerEvent("CreatePlayerNewEmergency", (ems_key, ems_status, ems_emergency, ems_target, ems_position, ems_new, ems_start) => {

    HQPoliceRadio["EMSKEY"] = ems_key;

    if (ems_target != "") {
        ems_emergency = ems_emergency + " (" + ems_target + ")";
    }
    if (HQPoliceRadio["Status"] == -1) {
        return;
    }

    if (ems_emergency != "") {
        if (ems_new == 1) {
            if (mp.storage.data.streamerMode == "1" && BridgeWindow && BridgeConnectionState) {
                BridgeWindow.call("OnClientRequestLauncherAction", "newChatMessage", "NOTIFY", Date.now(), `!{#a02128}[Leitstelle] Neuer Einsatz:  ${ems_emergency}`);
            } else {
                CreateNotify("~r~[Leitstelle] Neuer Einsatz: " + ems_emergency, 20);
            }
            mp.events.call("playSound", "digitalfunk.mp3", false);
        } else {
            if (mp.storage.data.streamerMode == "1" && BridgeWindow && BridgeConnectionState) {
                BridgeWindow.call("OnClientRequestLauncherAction", "newChatMessage", "NOTIFY", Date.now(), `!{#a02128}[Leitstelle] Einsatz aktualisiert:  ${ems_emergency}`);
            } else {
                CreateNotify("~b~[Leitstelle] Einsatz aktualisiert: " + ems_emergency, 20);
            }
        }
    } else {
        if (HQPoliceRadio["Emergency"] != "") {
            if (mp.storage.data.streamerMode == "1" && BridgeWindow && BridgeConnectionState) {
                BridgeWindow.call("OnClientRequestLauncherAction", "newChatMessage", "NOTIFY", Date.now(), `!{#008f39}[Leitstelle] Der Einsatz wurde beendet!`);
            } else {
                CreateNotify("~b~[Leitstelle] Der Einsatz wurde beendet!", 20);
            }
        }
        if (HQPoliceInterval != null) {
            clearInterval(HQPoliceInterval);
            HQPoliceInterval = null;
        }
    }

    // VioRageManager.clearWayPoint();
    PositionManager.removeBlipData("EmergencyPosition");

    HQPoliceRadio["Status"] = ems_status;
    HQPoliceRadio["Emergency"] = ems_emergency;
    HQPoliceRadio["EmergencyPosition"] = ems_position;
    HQPoliceRadio["Group"] = LocalGroupID;
    HQPoliceRadio["TargetName"] = ems_target;
    HQPoliceRadio["TargetLocal"] = false;
    HQPoliceRadio["EmergencyStart"] = ems_start;

    if (HQPoliceRadio["Status"] == 3 || HQPoliceRadio["Status"] == 4 || HQPoliceRadio["Status"] == 6) {
        MarkPoliceEmergency();
    }

    if (Webwindow["PoliceRadio"] != null) {
        HQPoliceRadio["Server"] = getTimestampFromServer();
        Webwindow["PoliceRadio"].call('UpdatePoliceRadio', JSON.stringify(HQPoliceRadio));
    }
})

CommunicationManager.AddServerEvent("ChangePoliceRadioStatus", (ems_status) => {
    HQPoliceRadio["Status"] = ems_status;
    if (Webwindow["PoliceRadio"] != null) {

        if (HQPoliceRadio["Status"] == 3 || HQPoliceRadio["Status"] == 4 || HQPoliceRadio["Status"] == 6) {
            MarkPoliceEmergency();
        }

        HQPoliceRadio["Server"] = getTimestampFromServer();
        Webwindow["PoliceRadio"].call('UpdatePoliceRadio', JSON.stringify(HQPoliceRadio));

        if (HQPoliceRadio["Status"] == -1) {
            // VioRageManager.clearWayPoint();
            PositionManager.removeBlipData("EmergencyPosition");

            HQPoliceRadio["Emergency"] = "";
            HQPoliceRadio["EmergencyPosition"] = null;
            HQPoliceRadio["TargetName"] = "";
            HQPoliceRadio["EMSKEY"] = "";
            HQPoliceRadio["EmergencyStart"] = 0;

            if (Webwindow["PoliceRadio"].isActive) {
                Webwindow["PoliceRadio"].active(false);
                if (Webwindow["PoliceRadio"].interact == true) {
                    mp.gui.cursor.visible = false;
                }
                Webwindow["PoliceRadio"].interact = false;
            }
        }
    }
})

CommunicationManager.AddWebBrowserEvent("OnClientRequestChangePoliceRadioStatus", (statusid) => {
    if (Webwindow["PoliceRadio"] != null) {
        if (VioRageManager.IsTypingInTextChat()) {
            return;
        }
        HQPoliceRadio["Status"] = statusid;

        CommunicationManager.TriggerServer("OnClientRequestChangePoliceRadioStatus", statusid);
        HQPoliceRadio["Server"] = getTimestampFromServer();
        Webwindow["PoliceRadio"].call('UpdatePoliceRadio', JSON.stringify(HQPoliceRadio));

        if (HQPoliceRadio["Status"] == 3 || HQPoliceRadio["Status"] == 4 || HQPoliceRadio["Status"] == 6) {
            MarkPoliceEmergency();
        }
    }
})

CommunicationManager.AddWebBrowserEvent("OnClientRequestAddPlayerAsTarget", () => {
    if (Webwindow["PoliceRadio"] != null) {
        if (VioRageManager.IsTypingInTextChat()) {
            return;
        }
        CommunicationManager.TriggerServer("OnClientRequestAddPlayerAsTarget", HQPoliceRadio["EMSKEY"]);
    }
})

CommunicationManager.AddWebBrowserEvent("OnClientRequestEmergencyPosition", () => {
    if (Webwindow["PoliceRadio"] != null) {
        if (VioRageManager.IsTypingInTextChat()) {
            return;
        }
        if (HQPoliceRadio["EmergencyPosition"] != null) {
            if (HQPoliceRadio["TargetName"] != "" && HQPoliceInterval == null && HQPoliceRadio["TargetLocal"] == false) {
                MarkPoliceEmergency();
            } else {
                if (HQPoliceInterval != null) {
                    clearInterval(HQPoliceInterval);
                    HQPoliceInterval = null;
                }
                if (HQPoliceRadio["EmergencyPosition"].x != 0 && HQPoliceRadio["EmergencyPosition"].y != 0 && HQPoliceRadio["EmergencyPosition"].z != 0) {
                    // VioRageManager.setWayPoint(HQPoliceRadio["EmergencyPosition"], 1, 1);
                    PositionManager.setPositionData("EmergencyPosition", "Polizei Ortung", HQPoliceRadio["EmergencyPosition"], 3, 8);
                }
            }
        }
    }
})

KeybindManager.registerVioKeyFunction("Polizeifunk", false, () => {

    if (Webwindow["BonusShop"] != null) {
        return;
    }

    if (login && CharacterCreatorCamera == null) {
        if (Webwindow["PoliceRadio"] == null) {
            if (isPlayerCuffed || disableAllControls) {
                return;
            }
            if (mp.gui.cursor.visible == true) {
                return;
            }
            if (mp.players.local.isDead() == true) {
                return;
            }
            if (HQPoliceRadio["Status"] == -1) {
                return;
            }
            if (LocalGroupID == 0 || LocalGroupID == 3 || LocalGroupID == 4) {
                Webwindow["PoliceRadio"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/cop_radio/cop_radio.html", false, false);
                HQPoliceRadio["Server"] = getTimestampFromServer();
                Webwindow["PoliceRadio"].start('UpdatePoliceRadio', JSON.stringify(HQPoliceRadio));
                Webwindow["PoliceRadio"].interact = false;
            }
        } else {
            if (Webwindow["PoliceRadio"].isActive) {
                Webwindow["PoliceRadio"].active(false);
                if (Webwindow["PoliceRadio"].interact == true) {
                    mp.gui.cursor.visible = false;
                }
                Webwindow["PoliceRadio"].interact = false;
            } else {
                if (HQPoliceRadio["Status"] == -1) {
                    return;
                }
                if (isPlayerCuffed || disableAllControls) {
                    return;
                }
                if (mp.gui.cursor.visible == true) {
                    return;
                }
                if (mp.players.local.isDead() == true) {
                    return;
                }
                Webwindow["PoliceRadio"].active(true);
            }
        }
    }
});

CommunicationManager.AddServerEvent("OpenPoliceHQOverview", (arg0, members, isactive, open) => {

    var PoliceTempEntrys = JSON.parse(arg0);

    const playerList = [];
    mp.players.forEach(player => {
        playerList.push(player.name);
    });

    for (var key in PoliceTempEntrys) {
        if (PoliceTempEntrys[key]["Pos"].x == 0 && PoliceTempEntrys[key]["Pos"].y == 0 && PoliceTempEntrys[key]["Pos"].z == 0) {
            PoliceTempEntrys[key].ZoneName = "-";
        } else {
            PoliceTempEntrys[key].ZoneName = getLocationZoneName(PoliceTempEntrys[key]["Pos"].x, PoliceTempEntrys[key]["Pos"].y, PoliceTempEntrys[key]["Pos"].z);
        }
    }

    if (Webwindow["PoliceHQ"] != null) {
        Webwindow["PoliceHQ"].call('UpdatePoliceHQOverview', JSON.stringify(PoliceTempEntrys), members, isactive, ServerTimestampDifferenz);
        Webwindow["PoliceHQ"].call('UpdatePoliceHQServerPlayersList', JSON.stringify(playerList));
    } else {
        if (open != null) {
            Webwindow["PoliceHQ"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/control_center/control_center.html", true);
            Webwindow["PoliceHQ"].start('UpdatePoliceHQOverview', JSON.stringify(PoliceTempEntrys), members, isactive, ServerTimestampDifferenz);
            Webwindow["PoliceHQ"].call('UpdatePoliceHQServerPlayersList', JSON.stringify(playerList));
        }
    }
})

CommunicationManager.AddServerEvent("UpdatePoliceHQSingleEntry", (actionstr, oentry) => {
    const playerList = [];
    mp.players.forEach(player => {
        playerList.push(player.name);
    });

    if (Webwindow["PoliceHQ"] != null) {
        var PoliceTempEntry = JSON.parse(oentry);
        if (PoliceTempEntry["Pos"].x == 0 && PoliceTempEntry["Pos"].y == 0 && PoliceTempEntry["Pos"].z == 0) {
            PoliceTempEntry.ZoneName = "-";
        } else {
            PoliceTempEntry.ZoneName = getLocationZoneName(PoliceTempEntry["Pos"].x, PoliceTempEntry["Pos"].y, PoliceTempEntry["Pos"].z);
        }
        Webwindow["PoliceHQ"].call('UpdatePoliceHQSingleEntry', actionstr, JSON.stringify(PoliceTempEntry));
        Webwindow["PoliceHQ"].call('UpdatePoliceHQServerPlayersList', JSON.stringify(playerList));
    }
})

CommunicationManager.AddServerEvent("UpdatePoliceHQMembers", (members) => {
    if (Webwindow["PoliceHQ"] != null) {
        Webwindow["PoliceHQ"].call('UpdatePoliceHQMembers', members);
    }
})

CommunicationManager.AddServerEvent("UpdatePoliceHQSingleMember", (member) => {
    if (Webwindow["PoliceHQ"] != null) {
        Webwindow["PoliceHQ"].call('UpdatePoliceHQSingleMember', member);
    }
})

CommunicationManager.AddServerEvent("UpdatePoliceHQMembersPosition", (members) => {
    const playerList = [];
    mp.players.forEach(player => {
        playerList.push(player.name);
    });

    if (Webwindow["PoliceHQ"] != null) {
        Webwindow["PoliceHQ"].call('UpdatePoliceHQMembersPosition', members);
        Webwindow["PoliceHQ"].call('UpdatePoliceHQServerPlayersList', JSON.stringify(playerList));
    }
})

CommunicationManager.AddWebBrowserEvent("OnClientRequestRemovePoliceHQEntry", (entryid) => {
    if (Webwindow["PoliceHQ"] != null) {
        CommunicationManager.TriggerServer("OnClientRequestRemovePoliceHQEntry", entryid);
    }
})

CommunicationManager.AddWebBrowserEvent("OnClientRequestPoliceHQCorrectDistance", (argid, x1, y1, z1, x2, y2, z2) => {
    if (Webwindow["PoliceHQ"] != null) {
        let distance = mp.game.pathfind.calculateTravelDistanceBetweenPoints(x1, y1, z1, x2, y2, z2);
        Webwindow["PoliceHQ"].call('OnSendPoliceHQCorrectDistance', argid, distance);
    }
})


CommunicationManager.AddWebBrowserEvent("OnClientRequestAddMembersToPoliceHQEntry", (members, entryid) => {
    if (Webwindow["PoliceHQ"] != null) {
        CommunicationManager.TriggerServer("OnClientRequestAddMembersToPoliceHQEntry", members, entryid);
    }
})

CommunicationManager.AddWebBrowserEvent("OnClientRequestRemoveMembersToPoliceHQEntry", (members, entryid) => {
    if (Webwindow["PoliceHQ"] != null) {
        CommunicationManager.TriggerServer("OnClientRequestRemoveMembersToPoliceHQEntry", members, entryid);
    }
})

CommunicationManager.AddWebBrowserEvent("OnClientClosePoliceHQ", () => {
    if (Webwindow["PoliceHQ"] != null) {
        Webwindow["PoliceHQ"].destroy();
        Webwindow["PoliceHQ"] = null;
    }
})

CommunicationManager.addSafeServerEvent("PlayerExecuteChangeDutyState", (section) => {
    if (mp.players.local.isShooting() == false) {
        CommunicationManager.TriggerServer("OnPlayerRequestChangeDutyState", section);
    }
})

var IsPlayerHQ = false;

function IsPlayerInPoliceHQ() {
    let max_distance = 3000;
    if (mp.game.system.vdist2(mp.players.local.position.x, mp.players.local.position.y, 0, 448.9454, -987.1158, 0) < max_distance) {
        return true;
    }
    if (mp.game.system.vdist2(mp.players.local.position.x, mp.players.local.position.y, 0, -449.8225, 6008.123, 0) < max_distance) {
        return true;
    }
    if (mp.game.system.vdist2(mp.players.local.position.x, mp.players.local.position.y, 0, 122.4092, -757.7761, 0) < max_distance) {
        return true;
    }

    const interiorId = mp.game.invoke("0x2107BA504071A6BB", mp.players.local.handle);
    const policeInteriorIds = [
        122882, // LSPD
        58882, // FIB-Lobby
        135937, // FIB Floor 49
        135169, // FIB Garage
        121090, // PBPD
    ];

    if (policeInteriorIds.includes(interiorId)) {
        return true;
    }

    return false;
}

function CheckIfHQPlayerIsHQ() {
    if (IsPlayerHQ) {
        if (IsPlayerInPoliceHQ()) {
            setTimeout(function () {
                CheckIfHQPlayerIsHQ();
            }, 5000);
        } else {
            CommunicationManager.TriggerServer("OnClientLeavePoliceHQ");
            if (Webwindow["PoliceHQ"] != null) {
                Webwindow["PoliceHQ"].destroy();
                Webwindow["PoliceHQ"] = null;
            }
        }
    }
}

CommunicationManager.AddServerEvent("SetPlayerPoliceHQStatus", (status) => {
    if (status == 1) {
        IsPlayerHQ = true;
        CheckIfHQPlayerIsHQ();
    } else {
        IsPlayerHQ = false;
        if (Webwindow["PoliceHQ"] != null) {
            Webwindow["PoliceHQ"].destroy();
            Webwindow["PoliceHQ"] = null;
        }
    }
})

CommunicationManager.AddServerEvent("OnClientRequestHQ", () => {
    if (IsPlayerInPoliceHQ()) {
        CommunicationManager.TriggerServer("OnClientEnterPoliceHQ");
    } else {
        CreateNotify("~r~Du befindest dich nicht in einem HQ!");
    }
})

CommunicationManager.AddServerEvent("openWantedcomputer", (arg0, arg1, arg2, arg3) => {
    if (Webwindow["Wantedcomputer"] != null) {
        Webwindow["Wantedcomputer"].destroy();
        Webwindow["Wantedcomputer"] = null;
    }
    Webwindow["Wantedcomputer"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/wantedcomputer/wantedcomputer.html", true);
    let res = mp.game.graphics.getScreenActiveResolution(1, 1);
    let pos_x = (res.x - 820) / 2;
    let pos_y = (res.y - 550) / 2;
    Webwindow["Wantedcomputer"].position(pos_x, pos_y, "computer");
    Webwindow["Wantedcomputer"].show("computer");

    Webwindow["Wantedcomputer"].start('wantedcomputer:init', JSON.parse(arg0), JSON.parse(arg1), JSON.parse(arg2), JSON.parse(arg3));
})
CommunicationManager.AddServerEvent("openWantedComputerPlayerDetail", (...args) => {
    if (Webwindow["Wantedcomputer"] != null) {
        // var arg_data = JSON.parse(args)
        //VioRageManager.SendChatMessage(arg);
        //API.sendNotification(arg_data);
        Webwindow["Wantedcomputer"].call('loadPlayerData', args);
    }
})

CommunicationManager.AddWebBrowserEvent("requestCloseWantedcomputer", () => {
    if (Webwindow["Wantedcomputer"] != null) {
        Webwindow["Wantedcomputer"].destroy();
        Webwindow["Wantedcomputer"] = null;
    }
})
CommunicationManager.AddWebBrowserEvent("requestWantedcomputerAction", (typ, arg0, arg1) => {
    if (typ == "locate") {
        CommunicationManager.TriggerServer("locatePlayer", arg0);
    } else if (typ == "wantedPlayer") {
        CommunicationManager.TriggerServer("wantedPlayer", arg0, arg1);
    } else if (typ == "clear") {
        CommunicationManager.TriggerServer("clearPlayerWanteds", arg0);
    } else if (typ == "data") {
        CommunicationManager.TriggerServer("requestWantedcomputerData", arg0);
    } else if (typ == "memo") {
        CommunicationManager.TriggerServer("updateWantedcomputerMemo", arg0, arg1);
    } else if (typ == "stvoPlayer") {
        CommunicationManager.TriggerServer("stvoPlayer", arg0, arg1);
    }
})


function rot_point(pos, pos1) {
    var temp = new mp.Vector3(0, 0, 0);
    temp.x = pos.x;
    temp.y = pos.y;
    temp.z = pos.z;
    var temp1 = new mp.Vector3(0, 0, 0);
    temp1.x = pos1.x;
    temp1.y = pos1.y;
    temp1.z = pos1.z;
    var gegenkathete = temp1.z - temp.z
    var a = temp.x - temp1.x;
    var b = temp.y - temp1.y;
    var ankathete = Math.sqrt(a * a + b * b);
    var winkel = Math.atan2(gegenkathete, ankathete) * 180 / Math.PI
    return winkel;
}


// OLD startBarricading (prop_barrier_work05) ("createBarricade")
var TempPlaceableObjectCallback = "";
CommunicationManager.AddServerEvent("StartPlayerWorldObjectCreator", (object_name, object_created_function_name) => {
    if (TempPlaceableObject == null) {
        let br = mp.objects.new(mp.game.joaat(object_name), mp.players.local.position, new mp.Vector3(0, 0, 0));
        br.setCollision(false, false);
        TempPlaceableObject = br;
        TempPlaceableObjectCallback = object_created_function_name;
    }
});

KeybindManager.registerVioKeyFunction("Interaktion", true, () => {
    if (TempPlaceableObject != null) {
        let pos = TempPlaceableObject.getCoords(false);
        let rot = TempPlaceableObject.getRotation(0);
        CommunicationManager.TriggerServer(TempPlaceableObjectCallback, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z);
        setTimeout(() => { // Um an anderen Stellen abgefragt werden zu können
            TempPlaceableObject.destroy();
            TempPlaceableObject = null;
        }, 50);
    }
});

mp.keys.bind(0x20, false, () => {
    if (TempPlaceableObject != null) {
        TempPlaceableObject.destroy();
        TempPlaceableObject = null;
    }
});

mp.events.add("playerEnterVehicle", (vehicle, toSeat) => {
    if (TempPlaceableObject != null) {
        TempPlaceableObject.destroy();
        TempPlaceableObject = null;
    }
})

mp.events.add('render', () => {
    if (TempPlaceableObject != null) {

        mp.game.controls.disableControlAction(2, 22, true);
        mp.game.controls.disableControlAction(2, 24, true);
        mp.game.controls.disableControlAction(2, 38, true);
        let pos = mp.players.local.position;
        let rot = mp.players.local.getRotation(0);
        let ground_pos = findrot(pos, rot, 2, 90);
        ground_pos.z = mp.game.gameplay.getGroundZFor3dCoord(ground_pos.x, ground_pos.y, ground_pos.z, 0, false);
        let left_pos = findrot(ground_pos, rot, 1, 180);
        let right_pos = findrot(ground_pos, rot, 1, 0);
        left_pos.z = mp.game.gameplay.getGroundZFor3dCoord(left_pos.x, left_pos.y, left_pos.z + 5, 0, false);
        right_pos.z = mp.game.gameplay.getGroundZFor3dCoord(right_pos.x, right_pos.y, right_pos.z + 5, 0, false);
        let back_pos = findrot(ground_pos, rot, 1, 270);
        let front_pos = findrot(ground_pos, rot, 1, 90);
        front_pos.z = mp.game.gameplay.getGroundZFor3dCoord(front_pos.x, front_pos.y, front_pos.z + 5, 0, false);
        back_pos.z = mp.game.gameplay.getGroundZFor3dCoord(back_pos.x, back_pos.y, back_pos.z + 5, 0, false);
        rot.y = rot_point(left_pos, right_pos) * -1;
        rot.x = rot_point(front_pos, back_pos) * -1;
        TempPlaceableObject.setCollision(false, false);
        TempPlaceableObject.setCoords(ground_pos.x, ground_pos.y, ground_pos.z, false, false, false, false);
        TempPlaceableObject.setRotation(rot.x, rot.y, rot.z, 0, true);

        if (mp.players.local.isDead() == true) {
            TempPlaceableObject.destroy();
            TempPlaceableObject = null;
        }
    }

    if (HQPoliceInterval != null) {
        if (HQPoliceRadio["TargetName"] != "" && HQPoliceRadio["Status"] != -1) {
            let render_located = false;
            mp.players.forEachInStreamRange(function (target) {
                if (target.name.toUpperCase() == HQPoliceRadio["TargetName"].toUpperCase()) {
                    let pos = target.position;
                    // VioRageManager.setWayPoint(pos, 1, 1);
                    PositionManager.setPositionData("EmergencyPosition", "Polizei Ortung: " + target.name, pos, 3, 8);
                    render_located = true;
                }
            });
            HQPoliceRadio["TargetLocal"] = render_located
        }
    }

    if (!!temp_sos_blip) {
        mp.players.forEachInStreamRange((target) => {
            if (target.name.toUpperCase() == SOSAutoFollowName.toUpperCase()) {
                temp_sos_blip.setPosition(target.position.x, target.position.y, target.position.z);

                if (SOSAutoFollow) {
                    const dist = VioRageManager.vdist(mp.players.local.position, target.position);
                    const distString = dist > 1000 ? `${Math.round(dist / 1000)}km` : `${Math.round(dist)}m`;

                    mp.game.graphics.drawText(distString, [target.position.x, target.position.y, target.position.z + 1 / 3], {
                        font: 4,
                        color: [235, 70, 52, 255],
                        scale: [.3, .3],
                        outline: true,
                        centre: true
                    });

                    mp.game.graphics.drawMarker(
                        0,
                        target.position.x, target.position.y, target.position.z + 1 / 3,
                        0, 0, 0,
                        0, 0, 0,
                        1 / 3, 1 / 3, 1 / 3,
                        235, 70, 52, 255,
                        false, false, 2,
                        false, null, null, false
                    );
                }
            }
        });
    }
});

CommunicationManager.AddServerEvent("setTempPoliceWaypoint", (pos, colorid) => {
    PoliceMarker[PoliceMarker.length] = mp.blips.new(60, pos, {
        name: 'Meldung',
        color: Number(colorid),
        shortRange: true,
    });
})

let SOSAutoFollow = false;
let SOSAutoFollowX = 0;
let SOSAutoFollowY = 0;
let SOSAutoFollowZ = 0;
let SOSAutoFollowName = "";

CommunicationManager.AddServerEvent("ToggleClientSOSAutoFollow", () => {
    if (SOSAutoFollow == false) {
        SOSAutoFollow = true;
        CreateNotify("~b~SOS Auto Follow aktiviert!");
    } else {
        SOSAutoFollow = false;
        CreateNotify("~b~SOS Auto Follow deaktiviert!");
    }
    if (temp_sos_blip) {
        temp_sos_blip.setRoute(SOSAutoFollow);
    }
})

CommunicationManager.AddServerEvent("setSOS", (x, y, z, blipname) => {
    if (temp_sos_blip != false) {
        temp_sos_blip.destroy();
        temp_sos_blip = false;
    }
    temp_sos_blip = mp.blips.new(0, new mp.Vector3(x, y, z), {
        color: 59,
        name: blipname
    });

    SOSAutoFollowX = x;
    SOSAutoFollowY = y;
    SOSAutoFollowZ = z;
    SOSAutoFollowName = blipname;

    if (temp_sos_blip) {
        temp_sos_blip.setRoute(SOSAutoFollow);
    }

})

CommunicationManager.AddServerEvent("cancelSOS", () => {
    if (temp_sos_blip != false) {
        temp_sos_blip.destroy();
        temp_sos_blip = false;
    }
})


CommunicationManager.AddServerEvent("RequestLocalPlayerGrab", (copname) => {
    if (mp.players.local.isBeingStunned(0)) {
        CommunicationManager.TriggerServer("SetPlayerIntoOfficerVehicle", copname)
    }
})

CommunicationManager.AddServerEvent("RequestLocalPlayerCuff", (copname) => {
    if (mp.players.local.isBeingStunned(0)) {
        CommunicationManager.TriggerServer("SetPlayerCuff", copname)
    }
})

CommunicationManager.AddServerEvent("SetPlayerHandcuff", (newstatus) => {
    if (newstatus == 0) {
        isPlayerCuffed = false;
    } else {
        isPlayerCuffed = true;
    }
    mp.players.local.setEnableHandcuffs(isPlayerCuffed);
});

const maxSpeed = 8.0;
const minHeight = 15.0;
const maxHeight = 55.0;
const maxAngle = 10.0;

CommunicationManager.addSafeServerEvent("StartPlayerVehicleRappel", () => {

    var vehicle = mp.players.local.vehicle;
    if (!vehicle) {
        return;
    }

    if (!mp.game.invoke("0x4E417C547182C84D", vehicle.handle)) {
        return;
    }

    if (vehicle.getSpeed() > maxSpeed) {
        CreateNotify("~r~Die Geschwindigkeit des Helikopters ist zu schnell!");
        return;
    }

    if (vehicle.getPedInSeat(-1) === mp.players.local.handle || vehicle.getPedInSeat(0) === mp.players.local.handle) {
        CreateNotify("~r~Ungültiger Sitzplatz um diese Funktion zu nutzen!");
        return;
    }

    const taskStatus = mp.players.local.getScriptTaskStatus(-275944640);
    if (taskStatus === 0 || taskStatus === 1) {
        return;
    }

    const curHeight = vehicle.getHeightAboveGround();
    if (curHeight > maxHeight) {
        CreateNotify("~r~Das Seil ist nicht lang genug!");
        return;
    }
    if (curHeight < minHeight) {
        CreateNotify("~r~Der Helikopter fliegt zu tief!");
        return;
    }

    if (!vehicle.isUpright(maxAngle) || vehicle.isUpsidedown()) {
        CreateNotify("~r~Der Helikopter steht nicht still!");
        return;
    }

    mp.players.local.clearTasks();
    mp.players.local.taskRappelFromHeli(10.0);
});

CommunicationManager.AddServerEvent("OnServerRequestPoliceTruck", (price, money, minimum, maximum) => {
    if (Webwindow["StartPoliceTruck"] == null) {
        Webwindow["StartPoliceTruck"] = false;
        Webwindow["StartPoliceTruck"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/matstruck/matstruck.html", true);
        Webwindow["StartPoliceTruck"].start('initPolicetruck', {
            pricePerMaterial: price,
            moneyInInventory: money,
            minimumMaterials: minimum,
            maximumMaterials: maximum
        });
    }
});

CommunicationManager.AddWebBrowserEvent("OnClientRequestStartPoliceTruck", (amount) => {
    Webwindow["StartPoliceTruck"].destroy();
    delete Webwindow["StartPoliceTruck"];
    CommunicationManager.TriggerServer("OnClientRequestStartPoliceTruck", amount);
}, "StartPoliceTruck");

CommunicationManager.AddWebBrowserEvent("OnClientRequestClosePoliceTruck", () => {
    Webwindow["StartPoliceTruck"].destroy();
    delete Webwindow["StartPoliceTruck"];
}, "StartPoliceTruck");

function RequestBankrobServerMoney(id, brtick, maxtick, pos) {
    brtick = brtick + 1;

    var PointToDrop = mp.game.invokeVector3("0x6E16BC2503FF1FF0", pos.x, pos.y, pos.z, 0.85, 1.35)

    CommunicationManager.TriggerServer("OnClientRequestBankrobAction", id, PointToDrop.x, PointToDrop.y, PointToDrop.z);
    if (brtick < maxtick) {
        setTimeout(function () {
            RequestBankrobServerMoney(id, brtick, maxtick, pos);
        }, 6000);
    }
}

CommunicationManager.AddServerEvent("StartPlayerBankRobState", (id, brtick, maxtick, pos) => {
    RequestBankrobServerMoney(id, brtick, maxtick, pos)
});

CommunicationManager.AddServerEvent("OnServerRequestMatstruck", (pPricePerMaterial) => {

    var windowData = {};
    windowData["minimumMaterials"] = 100;
    windowData["maximumMaterials"] = 1500;
    windowData["pricePerMaterial"] = pPricePerMaterial;
    windowData["moneyInInventory"] = InventoryItems["0"];


    if (Webwindow["StartMatsTruck"] == null) {
        Webwindow["StartMatsTruck"] = false;
        Webwindow["StartMatsTruck"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/matstruck/matstruck.html", true);
        Webwindow["StartMatsTruck"].start('initMatstruck', windowData);
    }
});

CommunicationManager.AddWebBrowserEvent("BrowserRequestLoadTruck", (pMaterialsAmount) => {
    if (Webwindow["StartMatsTruck"] != null) {
        if (Webwindow["StartMatsTruck"].isAtStartPosition == false) {
            return;
        }
        Webwindow["StartMatsTruck"].destroy();
        Webwindow["StartMatsTruck"] = null;
        mp.gui.cursor.visible = false;
        disableAllControls = false;
        CommunicationManager.TriggerServer("OnClientRequestOrderMaterials", pMaterialsAmount);
    }
}, "StartMatsTruck");

CommunicationManager.AddWebBrowserEvent("CloseMatsTruckWindow", () => {
    if (Webwindow["StartMatsTruck"] != null) {
        Webwindow["StartMatsTruck"].destroy();
        Webwindow["StartMatsTruck"] = null;
        mp.gui.cursor.visible = false;
        disableAllControls = false;
    }
}, "StartMatsTruck");

CommunicationManager.AddServerEvent("sentNewMatsInformation", (pos) => {
    let zoneName = getLocationZoneName(pos.x, pos.y, pos.z);

    if (mp.storage.data.streamerMode == "1" && BridgeWindow && BridgeConnectionState) {
        BridgeWindow.call("OnClientRequestLauncherAction", "newChatMessage", "NOTIFY", Date.now(), `!{#008f39}Die Lieferung wurde euch nach ${zoneName} geliefert!`);
        BridgeWindow.call("OnClientRequestLauncherAction", "newChatMessage", "NOTIFY", Date.now(), `!{#008f39}Diese wird dort ca. 20 Minuten für euch aufbewahrt.`);
    } else {
        CreateNotify("~b~Die Lieferung wurde euch nach " + zoneName + " geliefert!", 30);
        CreateNotify("~b~Diese wird dort ca. 20 Minuten für euch aufbewahrt.", 30);
    }

    // VioRageManager.setWayPoint(pos);

    PositionManager.setPositionData("Matstruck", "Waffentruck", pos, 25, 556);
});

CommunicationManager.AddServerEvent("GetPlayerHeightAboveGround", (v_hash) => {

    return;
    VioRageManager.SendChatMessage("[DEBUG] GetPlayerHeightAboveGround " + v_hash);

    if(v_hash != ""){

        let test_veh = mp.vehicles.new(mp.game.joaat(v_hash), new mp.Vector3(-1336, -3044, 20), {
            heading: 0,
            dimension: 0,
            numberPlate: "Vio-V",
            engine: false
        });

        VioRageManager.FreezePosition(test_veh, false);
        test_veh.setDeformationFixed();
        test_veh.setOnGroundProperly();

        test_veh.setProofs(true, true, true, true, true, true, true, true);

        IsRageMpVehicleReady(test_veh, 4000, function(isready) {
            if (test_veh != null && isready) {

                VioRageManager.FreezePosition(test_veh, false);
                test_veh.setDeformationFixed();
                test_veh.setOnGroundProperly();

                test_veh.setProofs(true, true, true, true, true, true, true, true);

                setTimeout(function(){
                    test_veh.setOnGroundProperly();
                }, 1000);

                test_veh.setOnGroundProperly();

                setTimeout(function(){
                    let hag = test_veh.getHeightAboveGround();
                    CommunicationManager.TriggerServer("SetPlayerHeightAboveGround", v_hash, hag.toString());
                    test_veh.destroy();
                }, 10000);
            }
        });
    }
});


CommunicationManager.AddServerEvent("OnServerRequestNextRevivePlayer", (admin) => {

    let c_dist = 10;
    let c_playername = "";

    let lPos = mp.players.local.position;

    mp.players.forEachInStreamRange(function (target) {
        if (target != mp.players.local && target.isDead() == true) {
            let pPos = target.position;
            let dist = mp.game.system.vdist2(lPos.x, lPos.y, lPos.z, pPos.x, pPos.y, pPos.z);
            if (dist < c_dist) {
                c_dist = dist;
                c_playername = target.name;
            }
        }
    })

    if(c_playername != ""){
        CommunicationManager.TriggerServer("OnClientRequestRevivePlayer", c_playername, admin);
    }
});


CommunicationManager.AddServerEvent("OnServerRequestMedicTruck", () => {

    var windowData = {};
    windowData["minimumMaterials"] = 20;
    windowData["maximumMaterials"] = 120;
    windowData["pricePerMaterial"] = 20;
    windowData["moneyInInventory"] = InventoryItems["0"];

    if (Webwindow["StartMedicTruck"] == null) {
        Webwindow["StartMedicTruck"] = false;
        Webwindow["StartMedicTruck"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/matstruck/matstruck.html", true);
        Webwindow["StartMedicTruck"].start('initMeditruck', windowData);
    }
});

CommunicationManager.AddWebBrowserEvent("OnClientRequestStartMedicTruck", (pMaterialsAmount) => {
    if (Webwindow["StartMedicTruck"] != null) {
        if (Webwindow["StartMedicTruck"].isAtStartPosition == false) {
            return;
        }
        Webwindow["StartMedicTruck"].destroy();
        Webwindow["StartMedicTruck"] = null;
        mp.gui.cursor.visible = false;
        disableAllControls = false;

        CommunicationManager.TriggerServer("OnClientRequestOrderMedicTruck", pMaterialsAmount);
    }
}, "StartMedicTruck");

CommunicationManager.AddWebBrowserEvent("OnClientRequestCloseMedicTruck", () => {
    if (Webwindow["StartMedicTruck"] != null) {
        Webwindow["StartMedicTruck"].destroy();
        Webwindow["StartMedicTruck"] = null;
        mp.gui.cursor.visible = false;
        disableAllControls = false;
    }
}, "StartMedicTruck");

CommunicationManager.AddServerEvent("SetGlobalLightsStatus", (g_status) => {
    if (g_status == true) {
        g_status = false;
    } else {
        g_status = true;
    }
    for (let i = 0; i <= 16; i++) mp.game.graphics.setLightsState(i, g_status);
    mp.game.invoke("0xE2B187C0939B3D32", false); // _SET_ARTIFICIAL_LIGHTS_STATE_AFFECT_VEHICLES
    mp.game.invoke("0x1268615ACE24D504", false); // SET_ARTIFICIAL_LIGHTS_STATE
});

mp.events.add("render", () => {
    if (mp.players.local.vehicle) {
        if (mp.players.local.vehicle.model == 2037834373) {

            mp.vehicles.forEachInStreamRange((tVeh) => {
                if (tVeh.getVariable("FOR_TOWING") != null) {
                    mp.game.graphics.drawMarker(44, tVeh.position.x, tVeh.position.y, tVeh.position.z + 3, 0, 0, 0, 0, 0, 90, 1, 1, 1, 255, 0, 0, 80, false, false, 2, false, null, null, false);

                    /*
                    const rotationNormal = Utility.getNormalizedVector(tVeh.getRotation(0));

                    VioRageManager.drawLine(tVeh.position, Utility.sumVector(tVeh.position, Utility.multiplyVector(rotationNormal, 3)), 0, 0, 255, 255);

                    mp.game.graphics.drawText("Rot: " + JSON.stringify(rotationNormal), [0.3, .45], {
                        font: 0,
                        color: [255, 255, 255, 255],
                        scale: [0.22, 0.22],
                        outline: false,
                        centre: false
                    });
                     */
                }
            });

            if (VioRageManager.PlayerIsDriver(mp.players.local.handle, mp.players.local.vehicle)) {

                mp.game.controls.disableControlAction(0, 60, true);

                let speed = mp.players.local.vehicle.getSpeed() * 3.6;

                if(mp.players.local.vehicle.fletbed_angle == null){
                    mp.players.local.vehicle.fletbed_angle = 0.03;
                }

                if(mp.players.local.vehicle.fletbed_angle >= 0.05){
                    mp.players.local.vehicle.setMaxSpeed(20 / 3.6);
                }else{
                    if(GetVehicleLimiterStatus(mp.players.local.vehicle) == false){
                        SetVehicleLimiterStatus(mp.players.local.vehicle, false);
                    }
                }

                if(speed >= 15){
                    return;
                }

                let old = mp.players.local.vehicle.fletbed_angle;

                if (mp.game.controls.isControlPressed(0, 132) == true) { // RUNTER
                    mp.players.local.vehicle.fletbed_angle = mp.players.local.vehicle.fletbed_angle + 0.0006;
                    if (mp.players.local.vehicle.fletbed_angle > 0.26) {
                        mp.players.local.vehicle.fletbed_angle = 0.26;
                    }

                    mp.game.invoke("0x710311ADF0E20730", mp.players.local.vehicle.handle); //activatePhysics
                    mp.game.invoke("0xF8EBCCC96ADB9FB7", mp.players.local.vehicle.handle, mp.players.local.vehicle.fletbed_angle, false);

                    var pos = mp.players.local.vehicle.getCoords(false);
                    mp.players.local.vehicle.position = new mp.Vector3(pos.x, pos.y + 0.001, pos.z);
                }

                if (mp.game.controls.isControlPressed(0, 131) == true) { // HOCH
                    mp.players.local.vehicle.fletbed_angle = mp.players.local.vehicle.fletbed_angle - 0.0006;
                    if (mp.players.local.vehicle.fletbed_angle < 0.03) {
                        mp.players.local.vehicle.fletbed_angle = 0.03;
                    }

                    mp.game.invoke("0x710311ADF0E20730", mp.players.local.vehicle.handle); //activatePhysics
                    mp.game.invoke("0xF8EBCCC96ADB9FB7", mp.players.local.vehicle.handle, mp.players.local.vehicle.fletbed_angle, false);

                    var pos = mp.players.local.vehicle.getCoords(false);
                    mp.players.local.vehicle.position = new mp.Vector3(pos.x, pos.y + 0.001, pos.z);
                }

                if(old != mp.players.local.vehicle.fletbed_angle){
                    if (mp.players.local.vehicle.fletbed_angle == 0.26) {
                        // UNTEN
                        //VioRageManager.SendChatMessage("[DEBUG] OnClientRequestFlatbedTrunkState -> 1 " );
                        CommunicationManager.TriggerServer("OnClientRequestFlatbedTrunkState", 1);
                    }
                    if (mp.players.local.vehicle.fletbed_angle == 0.03) {
                        // OBEN
                        //VioRageManager.SendChatMessage("[DEBUG] OnClientRequestFlatbedTrunkState -> 0 " );
                        CommunicationManager.TriggerServer("OnClientRequestFlatbedTrunkState", 0);
                    }
                }
            }
        }
    }
})


function GetVehicleFlatbedHookStatus(veh1, veh2) {
    // veh1 ist das abzuschleppende Fahrzeug
    // veh2 ist der Abschlepper

    const veh1Heading = veh1.getHeading();
    const veh2Heading = veh2.getHeading();

    //VioRageManager.SendChatMessage(`veh1: ${veh1Heading} | veh2: ${veh2Heading}`);

    const MAX_ANGLE = 35;

    const smallerDifference = Math.abs(veh1Heading - veh2Heading) < (360 - Math.abs(veh1Heading - veh2Heading)) ? Math.abs(veh1Heading - veh2Heading) : (360 - Math.abs(veh1Heading - veh2Heading));

    if (smallerDifference <= MAX_ANGLE) {
        return "front";
    } else if (Math.abs(smallerDifference - 180) <= MAX_ANGLE) {
        return "back";
    } else {
        return "-";
    }
}

function VehicleGetRopeFrontHook(veh) {

    if(VioRageManager.HasVehicleBone(veh, "wheel_lf") && VioRageManager.HasVehicleBone(veh, "wheel_rf")) {
        //VioRageManager.SendChatMessage("[DEBUG] wheel_lf " );
        let pos = GetPositionBetweenPosition(
            veh.getWorldPositionOfBone(veh.getBoneIndexByName("wheel_lf")),
            veh.getWorldPositionOfBone(veh.getBoneIndexByName("wheel_rf"))
        );

        pos.z = veh.position.z + 0.1;
        return pos;
    }
    else if (VioRageManager.HasVehicleBone(veh, "neon_f")){
        //VioRageManager.SendChatMessage("[DEBUG] neon_f " );
        return veh.getWorldPositionOfBone(veh.getBoneIndexByName("neon_f"));
    }
    else if (VioRageManager.HasVehicleBone(veh, "bumper_f")){
        //VioRageManager.SendChatMessage("[DEBUG] bumper_f " );
        return veh.getWorldPositionOfBone(veh.getBoneIndexByName("bumper_f"));
    }
    else if (VioRageManager.HasVehicleBone(veh, "engine")){
        //VioRageManager.SendChatMessage("[DEBUG] engine " );
        return veh.getWorldPositionOfBone(veh.getBoneIndexByName("engine"));
    }
    else
        return veh.position + veh.getForwardVector();
}

function VehicleGetRopeBackHook(veh) {

    if(VioRageManager.HasVehicleBone(veh, "wheel_rr") && VioRageManager.HasVehicleBone(veh, "wheel_lr")) {
        //VioRageManager.SendChatMessage("[DEBUG] wheel_rr " );
        let pos = GetPositionBetweenPosition(
            veh.getWorldPositionOfBone(veh.getBoneIndexByName("wheel_lr")),
            veh.getWorldPositionOfBone(veh.getBoneIndexByName("wheel_rr"))
        );

        pos.z = veh.position.z + 0.1;
        return pos;
    }
    else if (VioRageManager.HasVehicleBone(veh, "neon_b")){
        //VioRageManager.SendChatMessage("[DEBUG] neon_b " );
        return veh.getWorldPositionOfBone(veh.getBoneIndexByName("neon_b"));
    }
    else if (VioRageManager.HasVehicleBone(veh, "bumper_r")){
        //VioRageManager.SendChatMessage("[DEBUG] bumper_r " );
        return veh.getWorldPositionOfBone(veh.getBoneIndexByName("bumper_r"));
    }
    else if (VioRageManager.HasVehicleBone(veh, "trunk")){
        //VioRageManager.SendChatMessage("[DEBUG] trunk " );
        return veh.getWorldPositionOfBone(veh.getBoneIndexByName("trunk"));
    }
    else
        return veh.position + veh.getForwardVector();
}

function TowTruckPlayerTryToLoad(LF) {

    let lp = mp.players.local;


    if (LF.fletbed_angle >= 0.22) {

        LF.fletbed_angle = 0.26

        mp.game.invoke("0x710311ADF0E20730", LF.handle); //activatePhysics
        mp.game.invoke("0xF8EBCCC96ADB9FB7", LF.handle, LF.fletbed_angle, false);

        let LT = null;
        let dist_init = 20;
        let target_position;

        mp.vehicles.forEachInStreamRange((tVeh) => {
            if (tVeh.model != 2037834373) {
                let dist = mp.game.gameplay.getDistanceBetweenCoords(lp.position.x, lp.position.y, lp.position.z, tVeh.position.x, tVeh.position.y, tVeh.position.z, true);
                if (dist < dist_init) {
                    let speedkmh = parseInt(tVeh.getSpeed() * 3.6);
                    if (speedkmh < 5) {
                        dist_init = dist;
                        LT = tVeh;
                    }
                }
            }
        });

        if (LT != null) {

            let hook_status = GetVehicleFlatbedHookStatus(LT, LF)
            if(hook_status == "-"){
                CreateNotify("~r~Das Fahrzeug befindet sich an einer ungültigen Position!");
                return;
            }

            //VioRageManager.SendChatMessage("[DEBUG] HOOK : " + hook_status);

            CommunicationManager.TriggerServer("OnClientRequestTryHookVehicleToFletbed", LF, LT, hook_status);
        } else {
            CreateNotify("~r~Es befindet sich kein Fahrzeug in Reichweite!");
        }
    } else {
        CreateNotify("~r~Zum Aufladen eines Fahrzeuges muss der Auflieger heruntergelassen sein!");
    }
}

CommunicationManager.AddServerEvent("TryHookVehicleToFletbed", (isMaster, LF, LT, hook_status) => {

    // LF.freezePosition(true);
    VioRageManager.FreezePosition(LF, true);

    let LF_dummy_pos = LF.getWorldPositionOfBone(LF.getBoneIndexByName("misc_b"));
    let LT_rope_hook_pos = null;

    if(hook_status == "front"){
        LT_rope_hook_pos = VehicleGetRopeFrontHook(LT);
    }else{
        LT_rope_hook_pos = VehicleGetRopeBackHook(LT);
    }

    if (LF_dummy_pos != null && LT_rope_hook_pos != null) {
        if (LF_dummy_pos.x != null && LT_rope_hook_pos.x != null) {
            LF.fletbed_angle = 0.26

            mp.game.invoke("0x710311ADF0E20730", LF.handle); //activatePhysics
            mp.game.invoke("0xF8EBCCC96ADB9FB7", LF.handle, LF.fletbed_angle, false);

            //VioRageManager.SendChatMessage("[DEBUG] HOOK POS : " + LT_rope_hook_pos.x + ", " + LT_rope_hook_pos.y + ", " + LT_rope_hook_pos.z);

            let LF_dist = mp.game.gameplay.getDistanceBetweenCoords(LF_dummy_pos.x, LF_dummy_pos.y, LF_dummy_pos.z, LT_rope_hook_pos.x, LT_rope_hook_pos.y, LT_rope_hook_pos.z, true);

            // ROPE_LOAD_TEXTURES
            mp.game.invoke("0x9B9039DBF2D258C1");

            // ADD_ROPE  Rope 2 ging
            //let rope = mp.game.invoke('0xE832D760399EB220', LF_dummy_pos.x, LF_dummy_pos.y, LF_dummy_pos.z, 0.0, 0.0, 0.0, LF_dist, 6, LF_dist, 0.1, 0.5, false, false, false, 1.0, false, null);
            let rope = mp.game.rope.addRope(LF_dummy_pos.x, LF_dummy_pos.y, LF_dummy_pos.z, 0.0, 0.0, 0.0, LF_dist, 6, LF_dist, 0.1, 0.5, false, false, false, 1.0, false, 0);

            //VioRageManager.SendChatMessage("[DEBUG] JSON : " + JSON.stringify(rope));
            //VioRageManager.SendChatMessage("[DEBUG] typeof : " + typeof rope);

            // ATTACH_ENTITIES_TO_ROPE
            //mp.game.invoke('0x3D95EC8B6D940AC3', rope, LF.handle, LT.handle, LF_dummy_pos.x, LF_dummy_pos.y, LF_dummy_pos.z, LT_rope_hook_pos.x, LT_rope_hook_pos.y, LT_rope_hook_pos.z, LF_dist, false, false, null, null);
            mp.game.rope.attachEntitiesToRope(rope.result, LF.handle, LT.handle, LF_dummy_pos.x, LF_dummy_pos.y, LF_dummy_pos.z, LT_rope_hook_pos.x, LT_rope_hook_pos.y, LT_rope_hook_pos.z, LF_dist, false, false, 0, 0);


            mp.game.invoke("0x710311ADF0E20730", rope.handle);

            // START_ROPE_WINDING
            //mp.game.invoke("0x1461C72C889E343E", rope);
            mp.game.rope.startRopeWinding(rope.result);

            let LF_Rope_Interval = setInterval(function () {

                // ROPE_FORCE_LENGTH
                // mp.game.invokeFloat("0x73040398DFF9A4A6", rope) <= 1.5
                if (mp.game.rope.getRopeLength(rope.result) <= 1.75) {

                    // clearInterval
                    clearInterval(LF_Rope_Interval);

                    // STOP_ROPE_WINDING
                    //mp.game.invoke("0xCB2D4AB84A19AA7C", rope);
                    mp.game.rope.stopRopeWinding(rope.result);

                    // DETACH_ROPE_FROM_ENTITY
                    // mp.game.invoke("0xBCF3026912A8647D", rope, LF.handle);

                    // DETACH_ROPE_FROM_ENTITY
                    // mp.game.invoke("0xBCF3026912A8647D", rope, LT.handle);

                    mp.game.rope.deleteRope(rope.result);

                    // DeleteChildRope
                    //mp.game.invoke("0xAA5D6B1888E4DB20", rope);

                    // DELETE_ROPE
                    //mp.game.invoke("0x52B4829281364649", rope.handle);

                    // LF.freezePosition(false);
                    VioRageManager.FreezePosition(LF, false);
                    if(isMaster){
                        CommunicationManager.TriggerServer("OnClientRequestHookVehicleToFletbed", LF, LT, hook_status);
                    }
                }

            }, 50);
        }
    }
});

function AttachVehicleToFlatbed(flatbed) {
    if (flatbed.getVariable("FLATBED_VEHICLE") != null) {
        let car = JSON.parse(flatbed.getVariable("FLATBED_VEHICLE"));

        if(flatbed.tow_vehicle != null){
            flatbed.tow_vehicle.destroy();
            flatbed.tow_vehicle = null;
        }

        let veh = mp.vehicles.new(mp.game.joaat(car.Name), new mp.Vector3(flatbed.position.x, flatbed.position.y, flatbed.position.z), {
            heading: 0,
            dimension: 0,
            numberPlate: "Vio-V",
            engine: false
        });

        flatbed.tow_vehicle = veh;

        IsRageMpVehicleReady(veh, 3500, function (isready) {
            if (veh != null && isready && flatbed.handle !== 0) {
                mp.game.invoke('0x7141766F91D15BEA', veh.handle, parseInt(car.Color1R), parseInt(car.Color1G), parseInt(car.Color1B)); // SET_VEHICLE_CUSTOM_PRIMARY_COLOUR
                mp.game.invoke('0x36CED73BFED89754', veh.handle, parseInt(car.Color2R), parseInt(car.Color2G), parseInt(car.Color2B)); // SET_VEHICLE_CUSTOM_Secondary_COLOUR

                veh.setDirtLevel(15);
                veh.attachTo(flatbed.handle, flatbed.getBoneIndexByName("misc_a"), car.OffsetPos.x, car.OffsetPos.y, car.OffsetPos.z + 0.11, 0, 0, car.OffsetRot.z, false, true, true, false, 2, true);
                veh.setDoorsLocked(2);
            }else{
                if(flatbed.tow_vehicle != null){
                    flatbed.tow_vehicle.destroy();
                    flatbed.tow_vehicle = null;
                }
            }
        });

    }else{
        if(flatbed.tow_vehicle != null){
            flatbed.tow_vehicle.destroy();
            flatbed.tow_vehicle = null;
        }
    }
}

mp.events.add("entityStreamOut", (entity) => {
    if (entity.type === "vehicle") {
        if (mp.vehicles.exists(entity)) {
            if (entity && entity.handle) {
                if(entity.tow_vehicle != null){
                    entity.tow_vehicle.destroy();
                    entity.tow_vehicle = null;
                }
            }
        }
    }
});

function SetFletbedStatus(vehicle) {
    if (vehicle.getVariable("FLATBED_TRUNK_STATE") != null) {
        let status = vehicle.getVariable("FLATBED_TRUNK_STATE");
        if (status == 1) {
            vehicle.fletbed_angle = 0.26;
        }
        if (status == 0) {
            vehicle.fletbed_angle = 0.03;
        }
    }
}

mp.events.addDataHandler("FLATBED_TRUNK_STATE", (entity, status) => {
    if (entity.type === "vehicle") {
        if (entity.handle !== 0) {
            if (status != undefined) {
                SetFletbedStatus(entity);
            }
        }
    }
});

mp.events.addDataHandler("FLATBED_VEHICLE", (entity, status) => {
    if (entity.type === "vehicle") {
        if (entity.handle !== 0) {
            AttachVehicleToFlatbed(entity);
        }
    }
});

mp.events.add("entityStreamIn", (entity) => {
    if (entity.type === "vehicle") {
        if (mp.vehicles.exists(entity)) {
            if (entity && entity.handle) {
                SetFletbedStatus(entity);
                AttachVehicleToFlatbed(entity);
            }
        }
    }
});

let fov_max = 80.0;
let fov_min = 10.0; // max zoom level (smaller fov is more zoom)
let zoomspeed = 2.0; // camera zoom speed
let speed_lr = 3.0; // speed by which the camera pans left-right
let speed_ud = 3.0; // speed by which the camera pans up-down
let toggle_vision = 25; // control id to toggle vision mode. Default: INPUT_AIM (Right mouse btn)
let toggle_lock_on = 46; // control id to lock onto a vehicle with the camera. Default is  (E)

let helicam = false;
let helicam_fov = (fov_max + fov_min) * 0.5;
let vision_state = 0; // 0 is normal, 1 is nightmode, 2 is thermal vision

let helicam_cam;
let helicam_scaleform;
let helicam_isbroken = false;

let locked_on_vehicle = null;

function DisableHeliCam(){
    mp.game.invoke("0x0F07E7745A236711");
    mp.game.invoke("0x31B73D1EA9F01DA2");
    mp.game.cam.renderScriptCams(false, false, 0, true, false);
    if (helicam_scaleform != null || helicam_scaleform != 0) {
      mp.game.graphics.setScaleformMovieAsNoLongerNeeded(helicam_scaleform);
    }

    if (helicam_cam != null) {
      helicam_cam.destroy(true);
      helicam_cam = null;
    }

    helicam = false;
    mp.game.graphics.setSeethrough(false);
    mp.game.graphics.setNightvision(false);
    vision_state = 0;
    locked_on_vehicle = null;
    vehicle_detected = null;
    
    if(helicam_isbroken == true){
        helicam_isbroken = false;
        mp.game.graphics.stopScreenEffect("DrugsTrevorClownsFight");
    }
    
    if (mp.players.local.isDead() == false) {
        VioRageManager.ShowChat(true);
        VioRageManager.ActivateChat(true);
        mp.game.ui.displayHud(true);
        mp.game.ui.displayRadar(true);
        ToogleHudStatus(true, true);
        disableAllControls = false;
    }
}

CommunicationManager.AddServerEvent("EnableClientHelicam", () => {
  if (helicam) {
    DisableHeliCam();
  } else {
    mp.game.graphics.setTimecycleModifier("heliGunCam");
    mp.game.graphics.setTimecycleModifierStrength(0.3);

    helicam_scaleform = mp.game.graphics.requestScaleformMovie("HELI_CAM");
      
    IsRageScaleformMovieLoaded(helicam_scaleform, 5000, function (isready) {
        if (isready) {
            mp.game.graphics.pushScaleformMovieFunction(helicam_scaleform, "SET_CAM_LOGO");
            mp.game.graphics.pushScaleformMovieFunctionParameterInt(1);
            mp.game.graphics.popScaleformMovieFunctionVoid();
        }
    });
      
    let lPed = mp.players.local;
    let heli = lPed.vehicle;
    helicam_cam = mp.cameras.new(
      "DEFAULT_SCRIPTED_FLY_CAMERA",
      lPed.position,
      new mp.Vector3(0, 0, mp.players.local.getHeading()),
      60
    );
    helicam_cam.setActive(true);
    helicam_cam.setRot(0.0, 0.0, heli.getHeading(), 2);
    helicam_cam.setFov(helicam_fov);
    mp.game.cam.renderScriptCams(true, true, 0, true, false);
    helicam_cam.attachTo(heli.handle, 0.0, 0.0, -1.5, true);

    VioRageManager.ShowChat(false);
    VioRageManager.ActivateChat(false);
    ToogleHudStatus(false, false);
    mp.game.ui.displayHud(false);
    mp.game.ui.displayRadar(false);
    disableAllControls = true;
      
    helicam = true;
  }
});

mp.events.add("render", () => {
  if (helicam) {
    mp.game.invoke('0xF4F2C0D4EE209E20'); // INVALIDATE_IDLE_CAM()
      
    if (helicam_cam !== null && helicam_cam.isActive() && helicam_cam.isRendering()) {
      
      if (mp.game.controls.isDisabledControlJustPressed(0, 22)) {
          DisableHeliCam();
          return;
      }
      if(mp.players.local.vehicle == null){
          DisableHeliCam();
          return;
      }
      if (mp.players.local.isDead() == true) {
          DisableHeliCam();
          return;
      }
      if(helicam_isbroken == true){
        if(mp.players.local.vehicle.getHealth() > 500){
            helicam_isbroken = false;
            mp.game.graphics.stopScreenEffect("DrugsTrevorClownsFight");
        }
      } else if(helicam_isbroken == false && mp.players.local.vehicle.getHealth() <= 500){
          helicam_isbroken = true;
          mp.game.graphics.startScreenEffect("DrugsTrevorClownsFight", 10000, true);
      }
      
      mp.game.cam.renderScriptCams(true, true, 0, true, false);
      
      var x = mp.game.controls.getDisabledControlNormal(7, 1) * speed_lr;
      var y = mp.game.controls.getDisabledControlNormal(7, 2) * speed_ud;
      var zoomIn = mp.game.controls.getDisabledControlNormal(2, 40) * zoomspeed;
      var zoomOut = mp.game.controls.getDisabledControlNormal(2, 41) * zoomspeed;

      var currentRot = helicam_cam.getRot(2);

      currentRot = new mp.Vector3(currentRot.x - y, 0, currentRot.z - x);

      helicam_cam.setRot(currentRot.x, currentRot.y, currentRot.z, 2);

      if (zoomIn > 0) {
        var currentFov = helicam_cam.getFov();
        currentFov -= zoomIn;
        if (currentFov < fov_min) currentFov = fov_min;
        helicam_cam.setFov(currentFov);
      } else if (zoomOut > 0) {
        var currentFov = helicam_cam.getFov();
        currentFov += zoomOut;
        if (currentFov > fov_max) currentFov = fov_max;
        helicam_cam.setFov(currentFov);
      }
    }

    if (mp.game.controls.isDisabledControlJustPressed(0, toggle_vision)) {
      mp.game.audio.playSoundFrontend(
        -1,
        "SELECT",
        "HUD_FRONTEND_DEFAULT_SOUNDSET",
        false
      );
      ChangeVision();
    }

    if (locked_on_vehicle) {
      if (locked_on_vehicle.handle != 0) {
        helicam_cam.pointAt(locked_on_vehicle.handle, 0, 0, 0, true);
        RenderVehicleInfo(locked_on_vehicle);
        if (mp.game.controls.isDisabledControlJustPressed(0, toggle_lock_on)) {
          mp.game.audio.playSoundFrontend(
            -1,
            "SELECT",
            "HUD_FRONTEND_DEFAULT_SOUNDSET",
            false
          );
          locked_on_vehicle = null;
          let lPed = mp.players.local;
          let heli = lPed.vehicle;
          var currentRot = helicam_cam.getRot(2);
          var currentFov = helicam_cam.getFov();
          let oldcam = helicam_cam;
          oldcam.destroy();
          helicam_cam = mp.cameras.new(
            "DEFAULT_SCRIPTED_FLY_CAMERA",
            lPed.position,
            new mp.Vector3(0, 0, mp.players.local.getHeading()),
            60
          );
          helicam_cam.setActive(true);
          helicam_cam.setRot(0.0, 0.0, heli.getHeading(), 2);
          helicam_cam.setFov(helicam_fov);
          mp.game.cam.renderScriptCams(true, true, 0, true, false);
          helicam_cam.attachTo(heli.handle, 0.0, 0.0, -1.5, true);
        }
      } else {
        locked_on_vehicle = null;
        let lPed = mp.players.local;
        let heli = lPed.vehicle;
        var currentRot = helicam_cam.getRot(2);
        var currentFov = helicam_cam.getFov();
        let oldcam = helicam_cam;
        oldcam.destroy();
        helicam_cam = mp.cameras.new(
          "DEFAULT_SCRIPTED_FLY_CAMERA",
          lPed.position,
          new mp.Vector3(0, 0, mp.players.local.getHeading()),
          60
        );
        helicam_cam.setActive(true);
        helicam_cam.setRot(0.0, 0.0, heli.getHeading(), 2);
        helicam_cam.setFov(helicam_fov);
        mp.game.cam.renderScriptCams(true, true, 0, true, false);
        helicam_cam.attachTo(heli.handle, 0.0, 0.0, -1.5, true);
      }
    } else {
      let vehicle_detected = pointingAt(helicam_cam);
          if (vehicle_detected != null && vehicle_detected.handle != 0) {
                if (mp.game.controls.isDisabledControlJustPressed(0, toggle_lock_on)) {
                  mp.game.audio.playSoundFrontend(
                    -1,
                    "SELECT",
                    "HUD_FRONTEND_DEFAULT_SOUNDSET",
                    false
                  );
                  locked_on_vehicle = vehicle_detected;
                }
          }
    }

    mp.game.graphics.pushScaleformMovieFunction(
      helicam_scaleform,
      "SET_ALT_FOV_HEADING"
    );
    mp.game.graphics.pushScaleformMovieFunctionParameterFloat(
      mp.players.local.vehicle.position.z
    );
    //mp.game.graphics.pushScaleformMovieFunctionParameterFloat(currentFov);
    mp.game.graphics.pushScaleformMovieFunctionParameterFloat(helicam_cam.getRot(2).z);

    mp.game.graphics.popScaleformMovieFunctionVoid();

    mp.game.graphics.drawScaleformMovieFullscreen(
      helicam_scaleform,
      255,
      255,
      255,
      255,
      true
    );
  }
});

function ChangeVision() {
  if (vision_state == 0) {
    mp.game.graphics.setNightvision(true);
    vision_state = 1;
  } else if (vision_state == 1) {
    mp.game.graphics.setNightvision(true);
    mp.game.graphics.setSeethrough(true);
    vision_state = 2;
  } else {
    mp.game.graphics.setSeethrough(false);
    mp.game.graphics.setNightvision(false);
    vision_state = 0;
  }
}

Math.degrees = function (radians) {
  return (radians * 180) / Math.PI;
};

function RenderVehicleInfo(vehicle) {
  let vehname = mp.game.ui.getLabelText(
    mp.game.vehicle.getDisplayNameFromVehicleModel(vehicle.model)
  );
  let licenseplate = vehicle.getNumberPlateText();

  mp.game.graphics.drawText(
    "Fahrzeug: " + vehname + "\n Nummernschild: " + licenseplate,
    [0.5, 0.9],
    {
      font: 0,
      color: [255, 255, 255, 185],
      scale: [0.0, 0.55],
      outline: true,
    }
  );
}

function pointingAt(camera) {
  let distance = 100;
  let position = camera.getCoord();
  let direction = camera.getDirection();
  let farAway = new mp.Vector3(
    direction.x * distance + position.x,
    direction.y * distance + position.y,
    direction.z * distance + position.z
  );
  
  //mp.game.graphics.drawLine(
  //  position.x,
  //  position.y,
  //  position.z,
  //  farAway.x,
  //  farAway.y,
  //  farAway.z,
  //  255,
  //  0,
  //  0,
  //  255
  //); 
  // Is in line of sight
  
  let result = mp.raycasting.testPointToPoint(position, farAway, [1, 16]);

  if (result) {
    if (result.entity.handle === localPlayer.handle) return null;
    if (result.entity.type === "vehicle") {
      return result.entity;
    }
    return null;
  }
  return null;
}

function RotAnglesToVec(rot) {
  let z = Math.degrees(rot.z);
  let x = Math.degrees(rot.x);
  let num = Math.abs(Math.cos(x));
  return new mp.Vector3(-Math.sin(z) * num, Math.cos(z) * num, Math.sin(x));
}

{

    /*
    let debugActiveTasks = "";
    mp.events.add("render", () => {
        let cordY = 0.05;
        mp.players.forEachInStreamRange((p1) => {
            if (mp.players.local.name != p1.name) {
                debugActiveTasks = "";
                for (var i = 0; i <= 528; i++) {
                    if (p1.getIsTaskActive(i)) {
                        if (debugActiveTasks == "")
                            debugActiveTasks = i;
                        else
                            debugActiveTasks = debugActiveTasks + "," + i;
                    }
                }
                mp.game.graphics.drawText("Active Tasks " + p1.name + ": " + debugActiveTasks, [0.5, cordY], {
                    font: 4,
                    color: [255, 255, 255, 185],
                    scale: [0.3, 0.3],
                    outline: true
                });

                cordY += .0125;
            }
        })
    });
     */

    mp.events.add("render", () => {
        mp.players.forEachInStreamRange((player) => {
            if (player.handle !== 0) {
                if (mp.players.local.name != player.name) {
                    if (!player.isSwimmingUnderWater() && !player.isSwimming() && IsInHalloweenHouse) {
                        if (player.getIsTaskActive(423) || player.getIsTaskActive(299)) {
                            if (!player.invisFix || player.invisFix < Date.now()) {
                                //VioRageManager.SendChatMessage("[DEEBUG!] STOP ANIM SYNC!! ragempfix clearTasksImmediately ");
                                player.clearTasksImmediately();
                                player.forceMotionState(-1115154469, false, false, false);
                                const {
                                    x,
                                    y,
                                    z
                                } = Utility.sumVector(Utility.multiplyVector(player.getForwardVector(), 1), player.position);
                                player.taskGoStraightToCoord(x, y, z, .1, -1, player.heading, 1);
                                player.invisFix = Date.now() + (1500);
                            }
                        }
                    }
                }
            }
        });
    });
}

var TrashBlips = {};
var ATMTable = {}
let ApartmentTable = {};
let ownApartmentId;
var TotalApartmentBlip = {};
const ATMBankProps = ["prop_atm_03", "prop_fleeca_atm", "prop_atm_01", "prop_atm_02"];

CommunicationManager.AddServerEvent("SentApartmentBlips", (master_id, json_blips) => {
    ApartmentTable = JSON.parse(json_blips);
    ownApartmentId = master_id;
    refreshApartmentBlips();
});

CommunicationManager.AddServerEvent("SentHouseBlips", (arg0, arg1) => {
    HouseTable = JSON.parse(arg0)
    LocalCharacterID = Number(arg1)
    refreshHouseBlips();
});

function refreshHouseBlips() {
    if (HouseTable == null) {
        return;
    }

    for (let z in SettingsHandler.houseBlips) {
        if (SettingsHandler.houseBlips[z] == null) continue;
        SettingsHandler.houseBlips[z].destroy();
    }
    SettingsHandler.houseBlips = {};

    for (let y in HouseTable) {
        if (HouseTable[y].Character_ID == LocalCharacterID) {
            var blip = mp.blips.new(40, new mp.Vector3(HouseTable[y].Pos.x, HouseTable[y].Pos.y, HouseTable[y].Pos.z), {
                color: 63,
                scale: 0.8,
                shortRange: true,
                name: "Haus"
            });
            SettingsHandler.houseBlips[y] = blip;
        } else {
            if (mp.storage.data.drawFreeHouses) { //House Blips
                if (HouseTable[y].Character_ID == 0 && HouseTable[y].GangHouse == false) {
                    var blip = mp.blips.new(374, new mp.Vector3(HouseTable[y].Pos.x, HouseTable[y].Pos.y, HouseTable[y].Pos.z), {
                        color: 46,
                        scale: 0.5,
                        shortRange: true,
                        name: "Haus"
                    });
                    SettingsHandler.houseBlips[y] = blip;
                }
            }
        }
    }
}

function refreshApartmentBlips() {
    if (TotalApartmentBlip == null) {
        return;
    }

    for (let z in TotalApartmentBlip) {
        if (TotalApartmentBlip[z] == null) continue;
        TotalApartmentBlip[z].destroy();
    }
    TotalApartmentBlip = {};

    for (let x in ApartmentTable) {
        let blip;
        if (ownApartmentId == x) {
            blip = mp.blips.new(ApartmentTable[x].Sprite, new mp.Vector3(ApartmentTable[x].Position.x, ApartmentTable[x].Position.y, ApartmentTable[x].Position.z), {
                scale: 0.8,
                name: ApartmentTable[x].Name,
                color: 63,
                shortRange: true
            });
        } else {
            if (mp.storage.data.drawApartments) {
                blip = mp.blips.new(ApartmentTable[x].Sprite, new mp.Vector3(ApartmentTable[x].Position.x, ApartmentTable[x].Position.y, ApartmentTable[x].Position.z), {
                    scale: 0.5,
                    name: ApartmentTable[x].Name,
                    color: 44,
                    shortRange: true
                });
            }
        }
        TotalApartmentBlip[x] = blip;
    }
}

KeybindManager.registerVioKeyFunction("Interaktion", true, () => {

    if (IsPlayerInFightClub == true) {
        return;
    }
    if (TempPlaceableObject != null) {
        return;
    }
    if (mp.gui.cursor.visible == true) {
        return
    }
    if (mp.players.local.isBeingStunned(0)) {
        return;
    }
    if (Webwindow["WeaponShop"] != null) {
        return;
    }
    if (disableAllControls == true) {
        return;
    }
    if (mp.game.invoke('0xD9D2CFFF49FAB35F') === 1) {
        return;
    }

    if (mp.players.local.isInAnyVehicle(true) == false) {
        var dim = mp.players.local.dimension;
        var playerPos = mp.players.local.position;
        if (dim == 0 && InHouse == false) {

            if (PlayerTempObjects["ClientCacheMatsBag"] && isPlayerCarryingAction == false) {

                if (mp.players.local.getIsTaskActive(421) || mp.players.local.getIsTaskActive(420)) { // Jump
                    CreateNotify("~r~Du stehst nicht still!");
                    return;
                }
                if (mp.players.local.isFalling() || mp.players.local.getIsTaskActive(6) == false) {
                    CreateNotify("~r~Du stehst nicht still!");
                    return;
                }

                CommunicationManager.TriggerServer("OnClientRequestPickUpBag", PlayerTempObjects["ClientCacheMatsBag"]);
                PlayerTempObjects["ClientCacheMatsBag"] = false;
                return;
            }

            var HouseID = false
            for (let y in HouseTable) {
                var dist = mp.game.gameplay.getDistanceBetweenCoords(playerPos.x, playerPos.y, playerPos.z, HouseTable[y].Pos.x, HouseTable[y].Pos.y, HouseTable[y].Pos.z, true);
                if (dist < 3) {
                    HouseID = HouseTable[y].ID
                    if (TrashBlips[HouseID] != null) {
                        CommunicationManager.TriggerServer("pickUpTrash", HouseID);
                    } else if (mp.players.local.getVariable("TRASH_CAR") == null) {
                        if (mp.players.local.isBeingStunned(0) == false) {
                            if (LocalPlayerLastIncomingHit + 4 >= Utility.GetTimestamp()) {
                                CreateNotify("~r~Du wurdest von einem Spieler verletzt und kannst deshalb kein Haus betreten!");
                                return;
                            } else {
                                CommunicationManager.TriggerServer("onClientRequestEnterHouse", HouseID);
                            }
                        }
                    }
                    return;
                }
            }
            if (Webwindow["Bank"] != null) {
                openBank();
                return
            }
            if (isPlayerCarryingAction == false) {

                /*
                for (let x in ATMTable) {
                    var dist = mp.game.system.vdist2(playerPos.x, playerPos.y, playerPos.z, ATMTable[x].x, ATMTable[x].y, ATMTable[x].z);
                    if (dist < 2) {
                        openBank();
                        return
                    } else {
                    }
                }
                 */

                ATMBankProps.forEach((propName) => {
                    let prop = mp.game.object.getClosestObjectOfType(playerPos.x, playerPos.y, playerPos.z, 1, mp.game.joaat(propName), false, true, true);
                    if (prop) {
                        const atmPos = mp.game.invokeVector3("0x3FEF770D40960D5A", prop);
                        const atmHeading = mp.game.invokeVector3("0xE83D4F9BA2A38914", prop);

                        const offset = Seats.calcNewOffset(new mp.Vector3(0, -1, 0), atmHeading.x);

                        const dist = mp.game.system.vdist2(playerPos.x, playerPos.y, playerPos.z, offset.x + atmPos.x, offset.y + atmPos.y, offset.z + atmPos.z);
                        if (dist > 2) return;

                        openBank();
                        return;
                    }
                });
            }
            if (mp.players.local.getVariable("TRASH") != null && mp.players.local.getVariable("TRASH_CAR") != null) {
                var veh = mp.players.local.getVariable("TRASH_CAR")
                let boneR = veh.getWorldPositionOfBone(veh.getBoneIndexByName("seat_pside_r1"))
                let boneL = veh.getWorldPositionOfBone(veh.getBoneIndexByName("seat_dside_r1"))
                var dist_r = Math.round(mp.game.gameplay.getDistanceBetweenCoords(playerPos.x, playerPos.y, playerPos.z, boneR.x, boneR.y, boneR.z, true));
                var dist_l = Math.round(mp.game.gameplay.getDistanceBetweenCoords(playerPos.x, playerPos.y, playerPos.z, boneR.x, boneL.y, boneL.z, true));
                if (dist_r < 3 || dist_l < 3) {
                    CommunicationManager.TriggerServer("requestTrashIntoVehicle");
                    return
                }
            }
            if (RenderBusStop["ID"] != null) {
                if (TempPlaceableObject != null || isPlayerCarryingAction == true || ObjectAttachedToPlayer != null) {
                    CreateNotify("~r~Du hast etwas in deiner Hand!");
                }
                if (Webwindow["BusTimeTable"] === null) { /* öffnen */
                    Webwindow["BusTimeTable"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/bus/timetable/timetable.html", true, false);
                    Webwindow["BusTimeTable"].start("OnCEFInitialize", BusJobStations, RenderBusStop["ID"], BusRoutes);
                }
                return;
            }
        }
        if (isPlayerCarryingAction) {
            if (mp.players.local.isFalling()) {
                return;
            }
            if (mp.players.local.isInAnyVehicle(true)) {
                return;
            }
            if (mp.players.local.getIsTaskActive(6) == false) {
                return;
            }
            if (mp.players.local.isSwimming()) {
                return;
            }
            if (mp.players.local.getHealth() == 0) {
                return;
            }
            CommunicationManager.TriggerServer("OnClientRequestDropBag");
        }
    }
});

KeybindManager.registerVioKeyFunction("Gruppenmenü", true, function () {
    if (!mp.gui.cursor.visible && !Inventory.visible) {
        CommunicationManager.TriggerServer('onClientRequestOpenGroupWindow');
    }
});

CommunicationManager.AddServerEvent("sentNewTrashToPlayer", (...args) => {
    var TrashTable = JSON.parse(args[0])
    var IDTrash = 0;
    for (let z in TrashBlips) {
        TrashBlips[z].destroy();
    }
    TrashBlips = {};
    for (let x in TrashTable) {
        for (let y in HouseTable) {
            if (x == HouseTable[y].ID) {
                var blip = mp.blips.new(1, new mp.Vector3(HouseTable[y].Pos.x, HouseTable[y].Pos.y, HouseTable[y].Pos.z), {
                    scale: 0.6,
                    name: "Müllsack"
                })
                TrashBlips[HouseTable[y].ID] = blip
            }
        }
    }
})

CommunicationManager.AddServerEvent("OpenClientApartmentOverview", (apartment_data) => {
    if (Webwindow["ApartmentOverview"] == null) {
        Webwindow["ApartmentOverview"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/apartment_menu/apartment_menu.html", true);
        Webwindow["ApartmentOverview"].start('init', apartment_data);
    } else {
        Webwindow["ApartmentOverview"].call('init', apartment_data);
    }
})

CommunicationManager.AddWebBrowserEvent("OnClientTryApartment", function (master_id) {
    if (Webwindow["ApartmentOverview"] != null) {
        Webwindow["ApartmentOverview"].destroy();
        Webwindow["ApartmentOverview"] = null;
    }
    CommunicationManager.TriggerServer("OnClientRequestTryApartment", master_id);
}, "ApartmentOverview");

CommunicationManager.AddWebBrowserEvent("OnClientCancelApartment", function () {
    if (Webwindow["ApartmentOverview"] != null) {
        Webwindow["ApartmentOverview"].destroy();
        Webwindow["ApartmentOverview"] = null;
    }
    CommunicationManager.TriggerServer("OnClientRequestCancelApartment");
}, "ApartmentOverview");

CommunicationManager.AddWebBrowserEvent("OnClientEnterApartment", function (master_id, apartment_id, pin) {
    if (Webwindow["ApartmentOverview"] != null) {
        Webwindow["ApartmentOverview"].destroy();
        Webwindow["ApartmentOverview"] = null;
    }
    CommunicationManager.TriggerServer("OnClientRequestEnterApartment", master_id, apartment_id, pin);
}, "ApartmentOverview");

CommunicationManager.AddWebBrowserEvent("OnClientEnterOwnApartment", function () {
    if (Webwindow["ApartmentOverview"] != null) {
        Webwindow["ApartmentOverview"].destroy();
        Webwindow["ApartmentOverview"] = null;
    }
    CommunicationManager.TriggerServer("OnClientRequestEnterOwnApartment");
}, "ApartmentOverview");

CommunicationManager.AddWebBrowserEvent("OnClientRentApartment", function (master_id) {
    if (Webwindow["ApartmentOverview"] != null) {
        Webwindow["ApartmentOverview"].destroy();
        Webwindow["ApartmentOverview"] = null;
    }
    CommunicationManager.TriggerServer("OnClientRequestRentApartment", master_id);
}, "ApartmentOverview");

CommunicationManager.AddWebBrowserEvent("OnClientChangeApartmentPin", function (pin) {
    if (Webwindow["ApartmentOverview"] != null) {
        Webwindow["ApartmentOverview"].destroy();
        Webwindow["ApartmentOverview"] = null;
    }
    CommunicationManager.TriggerServer("OnClientRequestChangeApartmentPin", pin);
}, "ApartmentOverview");

CommunicationManager.AddWebBrowserEvent("OnClientCloseApartmentOverview", function () {
    if (Webwindow["ApartmentOverview"] != null) {
        Webwindow["ApartmentOverview"].destroy();
        Webwindow["ApartmentOverview"] = null;
    }
}, "ApartmentOverview");

var ATMCount = 0
ATMTable[ATMCount] = new mp.Vector3(-1109.797, -1690.808, 4.375014)
ATMTable[ATMCount++] = new mp.Vector3(-821.6062, -1081.885, 11.13243)
ATMTable[ATMCount++] = new mp.Vector3(-537.8409, -854.5145, 29.28953)
ATMTable[ATMCount++] = new mp.Vector3(-1315.744, -834.6907, 16.96173)
ATMTable[ATMCount++] = new mp.Vector3(-1314.786, -835.9669, 16.96015)
ATMTable[ATMCount++] = new mp.Vector3(-1570.069, -546.6727, 34.95547)
ATMTable[ATMCount++] = new mp.Vector3(-1571.018, -547.3666, 34.95734)
ATMTable[ATMCount++] = new mp.Vector3(-866.6416, -187.8008, 37.84286)
ATMTable[ATMCount++] = new mp.Vector3(-867.6165, -186.1373, 37.8433)
ATMTable[ATMCount++] = new mp.Vector3(-721.1284, -415.5296, 34.98175)
ATMTable[ATMCount++] = new mp.Vector3(-254.3758, -692.4947, 33.63751)
ATMTable[ATMCount++] = new mp.Vector3(24.37422, -946.0142, 29.35756)
ATMTable[ATMCount++] = new mp.Vector3(130.1186, -1292.669, 29.26953)
ATMTable[ATMCount++] = new mp.Vector3(129.7023, -1291.954, 29.26953)
ATMTable[ATMCount++] = new mp.Vector3(129.2096, -1291.14, 29.26953)
ATMTable[ATMCount++] = new mp.Vector3(288.8256, -1282.364, 29.64128)
ATMTable[ATMCount++] = new mp.Vector3(1077.768, -776.4548, 58.23997)
ATMTable[ATMCount++] = new mp.Vector3(527.2687, -160.7156, 57.08937)
ATMTable[ATMCount++] = new mp.Vector3(-867.5897, -186.1757, 37.84291)
ATMTable[ATMCount++] = new mp.Vector3(-866.6556, -187.7766, 37.84278)
ATMTable[ATMCount++] = new mp.Vector3(-1205.024, -326.2916, 37.83985)
ATMTable[ATMCount++] = new mp.Vector3(-1205.703, -324.7474, 37.85942)
ATMTable[ATMCount++] = new mp.Vector3(-1570.167, -546.7214, 34.95663)
ATMTable[ATMCount++] = new mp.Vector3(-1571.056, -547.3947, 34.95724)
ATMTable[ATMCount++] = new mp.Vector3(-57.64693, -92.66162, 57.77995)
ATMTable[ATMCount++] = new mp.Vector3(527.3583, -160.6381, 57.0933)
ATMTable[ATMCount++] = new mp.Vector3(-165.1658, 234.8314, 94.92194)
ATMTable[ATMCount++] = new mp.Vector3(-165.1503, 232.7887, 94.92194)
ATMTable[ATMCount++] = new mp.Vector3(-2072.445, -317.3048, 13.31597)
ATMTable[ATMCount++] = new mp.Vector3(-3241.082, 997.5428, 12.55044)
ATMTable[ATMCount++] = new mp.Vector3(-1091.462, 2708.637, 18.95291)
ATMTable[ATMCount++] = new mp.Vector3(1172.492, 2702.492, 38.17477)
ATMTable[ATMCount++] = new mp.Vector3(1171.537, 2702.492, 38.17542)
ATMTable[ATMCount++] = new mp.Vector3(1822.637, 3683.131, 34.27678)
ATMTable[ATMCount++] = new mp.Vector3(1686.753, 4815.806, 42.00874)
ATMTable[ATMCount++] = new mp.Vector3(1701.209, 6426.569, 32.76408)
ATMTable[ATMCount++] = new mp.Vector3(-95.54314, 6457.19, 31.46093)
ATMTable[ATMCount++] = new mp.Vector3(-97.23336, 6455.469, 31.46682)
ATMTable[ATMCount++] = new mp.Vector3(-386.7451, 6046.102, 31.50172)
ATMTable[ATMCount++] = new mp.Vector3(-1091.42, 2708.629, 18.95568)
ATMTable[ATMCount++] = new mp.Vector3(5.132, -919.7711, 29.55953)
ATMTable[ATMCount++] = new mp.Vector3(-660.703, -853.971, 24.484)
ATMTable[ATMCount++] = new mp.Vector3(-2293.827, 354.817, 174.602)
ATMTable[ATMCount++] = new mp.Vector3(-2294.637, 356.553, 174.602)
ATMTable[ATMCount++] = new mp.Vector3(-2295.377, 358.241, 174.648)
ATMTable[ATMCount++] = new mp.Vector3(-1409.782, -100.41, 52.387)
ATMTable[ATMCount++] = new mp.Vector3(-1410.279, -98.649, 52.436)
ATMTable[ATMCount++] = new mp.Vector3(296.3147, -895.1487, 29.22718)
ATMTable[ATMCount++] = new mp.Vector3(146.9257, -1035.465, 29.34387) //Bank
ATMTable[ATMCount++] = new mp.Vector3(-255.6634, -716.0283, 33.47763)
ATMTable[ATMCount++] = new mp.Vector3(-258.8192, -723.5684, 33.46172)
ATMTable[ATMCount++] = new mp.Vector3(-302.4936, -829.8085, 32.41725)
ATMTable[ATMCount++] = new mp.Vector3(-618.0313, -707.865, 30.05278)
ATMTable[ATMCount++] = new mp.Vector3(-846.4432, -340.7214, 38.68027)
ATMTable[ATMCount++] = new mp.Vector3(285.7219, 143.5284, 104.1688)
ATMTable[ATMCount++] = new mp.Vector3(237.0332, 217.7051, 106.2868) //Bank
ATMTable[ATMCount++] = new mp.Vector3(357.0666, 173.4619, 103.0655)
ATMTable[ATMCount++] = new mp.Vector3(1166.907, -456.0782, 66.806)
ATMTable[ATMCount++] = new mp.Vector3(1138.292, -469.0696, 66.7278)
ATMTable[ATMCount++] = new mp.Vector3(1171.881, 2702.488, 38.17521) //Bank
ATMTable[ATMCount++] = new mp.Vector3(33.15104, -1348.158, 29.49703) //Shop
ATMTable[ATMCount++] = new mp.Vector3(-717.6112, -915.8884, 19.2156) //Shop
ATMTable[ATMCount++] = new mp.Vector3(-56.85688, -1752.181, 29.42101) //Shop
ATMTable[ATMCount++] = new mp.Vector3(-2957.844, 487.9157, 15.46391) //Bank
ATMTable[ATMCount++] = new mp.Vector3(-3240.689, 1008.609, 12.83071) //Shop(Ohne_Blip)
ATMTable[ATMCount++] = new mp.Vector3(-283.0984, 6226.135, 31.49316)
ATMTable[ATMCount++] = new mp.Vector3(-133.1364, 6366.522, 31.47617)
ATMTable[ATMCount++] = new mp.Vector3(1735.201, 6410.649, 35.03724) //Shop(Ohne_Blip)
ATMTable[ATMCount++] = new mp.Vector3(2683.093, 3286.566, 55.24114) //Shop(Ohne_Blip)
ATMTable[ATMCount++] = new mp.Vector3(228.3088, 338.5678, 105.5587)
ATMTable[ATMCount++] = new mp.Vector3(289.0123, -1256.848, 29.44076)
ATMTable[ATMCount++] = new mp.Vector3(380.8073, 323.4547, 103.5664) //Shop
ATMTable[ATMCount++] = new mp.Vector3(1968.141, 3743.605, 32.34375) //Shop(Ohne_Blip)
ATMTable[ATMCount++] = new mp.Vector3(-2957.885, 487.8467, 15.46391) //Bank
ATMTable[ATMCount++] = new mp.Vector3(-3040.838, 593.1485, 7.908931) //Shop(Ohne_Blip)
ATMTable[ATMCount++] = new mp.Vector3(-3043.97, 594.6237, 7.736614) //Shop(Ohne_Blip)
ATMTable[ATMCount++] = new mp.Vector3(2564.607, 2584.777, 38.08311)
ATMTable[ATMCount++] = new mp.Vector3(-1827.164, 784.8987, 138.3023) //Shop(Ohne_Blip)
ATMTable[ATMCount++] = new mp.Vector3(2558.794, 351.0217, 108.6215)
ATMTable[ATMCount++] = new mp.Vector3(158.6132, 234.0741, 106.6264)
ATMTable[ATMCount++] = new mp.Vector3(112.9124, -775.6813, 31.428)
ATMTable[ATMCount++] = new mp.Vector3(119.0629, -883.828, 31.12307)
ATMTable[ATMCount++] = new mp.Vector3(112.6496, -818.8077, 31.33914)
ATMTable[ATMCount++] = new mp.Vector3(1153.667, -326.7621, 69.20508) //Shop
ATMTable[ATMCount++] = new mp.Vector3(174.2261, 6637.987, 31.57306)
ATMTable[ATMCount++] = new mp.Vector3(155.7531, 6642.904, 31.60182)
ATMTable[ATMCount++] = new mp.Vector3(1702.877, 4933.57, 42.06367) //Shop(Ohne_Blip)
ATMTable[ATMCount++] = new mp.Vector3(2558.409, 389.4285, 108.623) //Shop(Ohne_Blip)
ATMTable[ATMCount++] = new mp.Vector3(-29.29773, -723.7197, 44.22524)
ATMTable[ATMCount++] = new mp.Vector3(-203.9189, -861.4605, 30.26762)
ATMTable[ATMCount++] = new mp.Vector3(-711.585, -818.8065, 23.72954)
ATMTable[ATMCount++] = new mp.Vector3(-526.6584, -1222.86, 18.45498)
ATMTable[ATMCount++] = new mp.Vector3(-2975.1, 380.0502, 14.99872)
ATMTable[ATMCount++] = new mp.Vector3(-1077.504, -260.6153, 37.81066)
ATMTable[ATMCount++] = new mp.Vector3(920.9, 40.66, 79.8425293) // Casino
ATMTable[ATMCount++] = new mp.Vector3(-613.5087, -704.7734, 31.23594)
ATMTable[ATMCount++] = new mp.Vector3(540.2869, 2671.0566, 42.15647)
// Marktplatz
ATMTable[ATMCount++] = new mp.Vector3(-1036.824, -434.7372, 39.61561)
ATMTable[ATMCount++] = new mp.Vector3(-1038.635, -430.4318, 39.61561)
// Knast
ATMTable[ATMCount++] = new mp.Vector3(1926.886, 2618.694, 45.221)
ATMTable[ATMCount++] = new mp.Vector3(-168.03, -2137.947, 16.839) // ZOB
// ATM Weazel News
ATMTable[ATMCount++] = new mp.Vector3(-598.60382, -933.66034, 23.15322)
// LSPD MAP
ATMTable[ATMCount++] = new mp.Vector3(472.4295, -1001.5779, 30.69)
ATMTable[ATMCount++] = new mp.Vector3(468.51993, -990.5782, 26.273636)
// Arena (Fightclub)
ATMTable[ATMCount++] = new mp.Vector3(-261.91464, -2012.3162, 30.14562);
ATMTable[ATMCount++] = new mp.Vector3(-273.03085, -2024.4946, 30.14561);

var HouseInteriorObjects = [];
var HouseInterior = [];
var TempHouseInteriorFile = null;

function createHouseInterior(interior, interior_dim) {
    if (TempHouseInteriorFile == null) {
        TempHouseInteriorFile = require("./viov/data/house/interior" + interior + ".js")
        TempHouseInteriorFile[0].positions.forEach(function (int_object) {
            let obj = mp.objects.new(mp.game.joaat(int_object["hash"]), new mp.Vector3(int_object["pos"]["x"], int_object["pos"]["y"], int_object["pos"]["z"]), {
                rotation: new mp.Vector3(int_object["rot"]["x"], int_object["rot"]["y"], int_object["rot"]["z"]),
                dimension: interior_dim
            })
            //obj.setDynamic(false);
            //obj.freezePosition(true);
            HouseInterior.push(obj)
        })
        var PlayerSpawn = TempHouseInteriorFile[0].spawn_position;
        TempHouseInteriorFile = null;
        return (PlayerSpawn)
    }
}

var InteriorEditorHasPermission = false;
var InteriorEditorObject = null;
var InteriorEditorObjectHash = "";
var InteriorEditorEditSelectActive = false;
var InteriorEditorEditSelectActiveObject = null;
var InteriorEditorEditMode = "pos";
var InteriorEditorTempPosition = null;
var InteriorEditorTempRotation = null;
var InteriorEditorMinZPosition = 0;
var InteriorEditorMaxZPosition = 0;
var InteriorEditorEditModeValid = true;
var InteriorSpawnPosition = null;
var InteriorAnimalPed = null;

function SendPlayerIntoInteriorEditor(object_hash, dim) {
    if (InteriorEditorObject == null) {
        var pos = mp.players.local.position;
        var rot = mp.players.local.getRotation(0);

        InteriorEditorObjectHash = object_hash;
        InteriorEditorEditMode = "pos";
        let obj = mp.objects.new(mp.game.joaat(object_hash), mp.players.local.position, {
            alpha: 255,
            dimension: dim
        })

        let ground_pos = findrot(pos, rot, 2, 90);

        IsRageMpObjectReady(obj, 1500, function (isready) {
            if (InteriorEditorObject == null && isready) {
                obj.setCoords(ground_pos.x, ground_pos.y, ground_pos.z + 0.75, false, false, false, false);
                InteriorEditorObject = obj;
            }
        });
    }
}

function ChangeInteriorEditorStatus(new_status) {
    InteriorEditorEditSelectActive = new_status
    HouseInteriorObjects.forEach(function (obj, index) {
        if (obj) {
            if (InteriorEditorEditSelectActive) {
                mp.game.invoke("0x1A9205C1B9EE827F", obj.handle, false, false); // void SET_ENTITY_COLLISION(Entity entity, BOOL toggle, BOOL keepPhysics)
            } else {
                mp.game.invoke("0x1A9205C1B9EE827F", obj.handle, true, true); // void SET_ENTITY_COLLISION(Entity entity, BOOL toggle, BOOL keepPhysics)
            }
        }
    })
}

mp.events.add('render', () => {

    if (disableAllControls == false && InHouse == true) {
        mp.game.time.setClockTime(4, 0, 0);
        mp.game.gameplay.setWeatherTypeNowPersist("CLOUDS");
    }

    if (InteriorEditorEditSelectActive && InteriorEditorObject == null && InteriorEditorHasPermission) {
        var lPos = mp.players.local.position;

        var FinalDistToObject = 2.5;
        var FinalObject = null;

        HouseInteriorObjects.forEach(function (obj, index) {
            if (obj) {
                if (obj.ObjectName != null && obj.ObjectID != null) {
                    let pos = obj.getCoords(false);
                    let dist = mp.game.system.vdist2(lPos.x, lPos.y, 0, pos.x, pos.y, 0);
                    if (dist <= FinalDistToObject) {
                        FinalDistToObject = dist;
                        FinalObject = obj;
                    }
                }
            }
        })
        InteriorEditorEditSelectActiveObject = FinalObject

        if (InteriorEditorEditSelectActiveObject != null) {
            let pos = InteriorEditorEditSelectActiveObject.getCoords(false);
            let dist = mp.game.system.vdist2(lPos.x, lPos.y, lPos.z, pos.x, pos.y, pos.z);
            let c_dist = 1 / 80 * dist
            let size = lerp(0.5, 0.06, c_dist)
            if (size > 0.5) {
                size = 0.5;
            } else if (size < 0.06) {
                size = 0.06;
            }

            let alpha = lerp(255, 0, c_dist)
            if (alpha > 255) {
                alpha = 255;
            } else if (alpha < 0) {
                alpha = 0;
            }

            let color = [255, 255, 255, 255]
            color[3] = alpha;

            let text = InteriorEditorEditSelectActiveObject.ObjectName;
            text = text + "\n~g~'E' zum Verschieben"
            text = text + "\n~r~'Enft' zum Löschen"

            mp.game.graphics.setDrawOrigin(pos.x, pos.y, pos.z + 1.5, 0);
            mp.game.graphics.drawText(text, [0, 0], {
                font: 4,
                color: color,
                scale: [size, size],
                outline: true
            });
            mp.game.graphics.clearDrawOrigin()
        }
    }

    if (InteriorEditorObject != null) {
        mp.game.controls.disableControlAction(2, 22, true);
        mp.game.controls.disableControlAction(2, 24, true);
        mp.game.controls.disableControlAction(2, 38, true);

        mp.game.controls.disableControlAction(2, 14, true);
        mp.game.controls.disableControlAction(2, 15, true);
        mp.game.controls.disableControlAction(2, 16, true);
        mp.game.controls.disableControlAction(2, 17, true);

        var lPos = mp.players.local.position;

        InteriorEditorMinZPosition = lPos.z - 10.5;
        InteriorEditorMaxZPosition = lPos.z + 5.5;

        var pos = InteriorEditorObject.getCoords(false);
        var rot = InteriorEditorObject.getRotation(0);

        let alpha_left = 25;
        let alpha_right = 25;
        let alpha_front = 25;
        let alpha_back = 25;

        let speed = 1;

        if (mp.keys.isDown(17) == true) { // STRG
            speed = 2;
        } else if (mp.keys.isDown(18) == true) { // ALT
            speed = 0.5;
        }

        if (mp.game.controls.isControlPressed(0, 241) == true) { // Links
            rot.z = rot.z - (0.40 * speed);
            InteriorEditorEditMode = "rot";
        } else if (mp.game.controls.isControlPressed(0, 242) == true) { // Rechts
            rot.z = rot.z + (0.40 * speed);
            InteriorEditorEditMode = "rot";
        }
        if (mp.game.controls.isControlPressed(0, 10) == true) { // Hoch
            if (InteriorEditorMaxZPosition > pos.z) {
                pos.z = pos.z + (0.01 * speed);
            }
            InteriorEditorEditMode = "pos";
        } else if (mp.game.controls.isControlPressed(0, 11) == true) { // Runter
            if (InteriorEditorMinZPosition < pos.z) {
                pos.z = pos.z - (0.01 * speed);
            }
            InteriorEditorEditMode = "pos";
        } else if (mp.keys.isDown(0x25) == true) { // Links
            pos.x = pos.x + (0.01 * speed);
            alpha_left = 150;
            InteriorEditorEditMode = "pos";
        } else if (mp.keys.isDown(0x27) == true) { // Rechts
            pos.x = pos.x - (0.01 * speed);
            alpha_right = 150;
            InteriorEditorEditMode = "pos";
        } else if (mp.keys.isDown(0x26) == true) { // Hinten
            pos.y = pos.y - (0.01 * speed);
            alpha_front = 150;
            InteriorEditorEditMode = "pos";
        } else if (mp.keys.isDown(0x28) == true) { // Vorne
            pos.y = pos.y + (0.01 * speed);

            alpha_back = 150;
            InteriorEditorEditMode = "pos";
        }

        InteriorEditorObject.position = pos;
        InteriorEditorObject.rotation = rot;

        InteriorEditorEditModeValid = true;

        let from = new mp.Vector3(pos.x, pos.y, pos.z + 1)
        let to = new mp.Vector3(lPos.x, lPos.y, lPos.z + 1)

        //const hitData = mp.raycasting.testCapsule(to, from, 0.5);
        //if (hitData) {
        //    InteriorEditorEditModeValid = false;
        //}
        
        var raycastEnvironment = mp.raycasting.testPointToPoint(to, from, mp.players.local, [1, 16]);
        if (raycastEnvironment) {
            InteriorEditorEditModeValid = false;
            let from_new = new mp.Vector3(pos.x, pos.y, pos.z - 0.5)
            var raycastEnvironment2 = mp.raycasting.testPointToPoint(to, from_new, mp.players.local, [1, 16]);
            if (raycastEnvironment2) {
                InteriorEditorEditModeValid = false;
            } else {
                InteriorEditorEditModeValid = true;
            }

        }

        let startY = 0.45;
        mp.game.graphics.clearDrawOrigin()
        mp.game.graphics.drawText("Verschieben: Pfeitasten", [0.050, startY], {
            font: 0,
            color: [255, 255, 255, 255],
            scale: [0.22, 0.22],
            outline: false,
            centre: false
        });
        startY = startY + 0.025;
        mp.game.graphics.drawText("Höhe: Bild (auf/ab)", [0.050, startY], {
            font: 0,
            color: [255, 255, 255, 255],
            scale: [0.22, 0.22],
            outline: false,
            centre: false
        });
        startY = startY + 0.025;
        mp.game.graphics.drawText("Rotation: Mausrad", [0.050, startY], {
            font: 0,
            color: [255, 255, 255, 255],
            scale: [0.22, 0.22],
            outline: false,
            centre: false
        });
        startY = startY + 0.035;
        mp.game.graphics.drawText("Geschwindigkeit: STRG / ALT", [0.050, startY], {
            font: 0,
            color: [255, 255, 255, 255],
            scale: [0.22, 0.22],
            outline: false,
            centre: false
        });
        startY = startY + 0.035;

        mp.game.graphics.drawText("Speichern: E", [0.050, startY], {
            font: 0,
            color: [0, 255, 0, 255],
            scale: [0.22, 0.22],
            outline: false,
            centre: false
        });
        startY = startY + 0.025;
        mp.game.graphics.drawText("Abbrechen: Leertaste", [0.050, startY], {
            font: 0,
            color: [255, 0, 0, 255],
            scale: [0.22, 0.22],
            outline: false,
            centre: false
        });
        startY = startY + 0.025;

        if (InteriorEditorEditModeValid) {
            if (InteriorEditorEditMode == "rot") {
                mp.game.graphics.drawLine(pos.x, pos.y, pos.z - 1.50, pos.x, pos.y, pos.z + 1.75, 0, 255, 0, 255);
            } else {
                mp.game.graphics.drawLine(pos.x - 1.25, pos.y, pos.z, pos.x + 1.25, pos.y, pos.z, 0, 0, 255, 255);
                mp.game.graphics.drawLine(pos.x, pos.y - 1.25, pos.z, pos.x, pos.y + 1.25, pos.z, 255, 0, 0, 255);
                mp.game.graphics.drawMarker(0, pos.x - 1.25, pos.y, pos.z, 0, 0, 0, 0, 90, 0, 0.25, 0.25, 0.25, 0, 0, 255, alpha_right, false, false, 2, false, null, null, false);
                mp.game.graphics.drawMarker(0, pos.x + 1.25, pos.y, pos.z, 0, 0, 0, 0, 270, 0, 0.25, 0.25, 0.25, 0, 0, 255, alpha_left, false, false, 2, false, null, null, false);
                mp.game.graphics.drawMarker(0, pos.x, pos.y - 1.25, pos.z, 0, 0, 0, 270, 90, 0, 0.25, 0.25, 0.25, 255, 0, 0, alpha_front, false, false, 2, false, null, null, false);
                mp.game.graphics.drawMarker(0, pos.x, pos.y + 1.25, pos.z, 0, 0, 0, 90, 90, 0, 0.25, 0.25, 0.25, 255, 0, 0, alpha_back, false, false, 2, false, null, null, false);
            }
            mp.game.graphics.drawMarker(27, pos.x, pos.y, pos.z + 0.05, 0, 0, 0, 0, 0, 90, 1, 1, 1, 0, 255, 0, 80, false, false, 2, false, null, null, false);
        } else {
            mp.game.graphics.drawMarker(27, pos.x, pos.y, pos.z + 0.05, 0, 0, 0, 0, 0, 90, 1, 1, 1, 255, 0, 0, 80, false, false, 2, false, null, null, false);
        }
    }
});

function OnPlayerRequestHouseEditorOpen() {
    if (InteriorEditorObject != null && InteriorEditorHasPermission) {
        CreateNotify("~r~Deaktivierung des Innenraumeditors in einer Auswahl nicht möglich!");
    } else if (InteriorEditorEditSelectActive && InteriorEditorEditSelectActiveObject != null && InteriorEditorHasPermission) {
        CreateNotify("~r~Deaktivierung des Innenraumeditors in einer Auswahl nicht möglich!");
    } else if (mp.players.local.dimension != 0 && InHouse == true) {
        if (InteriorEditorHasPermission) {
            if (InteriorEditorEditSelectActive) {
                ChangeInteriorEditorStatus(false);
                CreateNotify("~b~Du hast den Innenraumeditor deaktiviert!");
            } else {
                ChangeInteriorEditorStatus(true);
                CreateNotify("~b~Du hast den Innenraumeditor aktiviert!");
            }
        } else {
            CreateNotify("~r~Keine Berechtigung zur Nutzung des Innenraumeditors");
        }
    }
}

KeybindManager.registerVioKeyFunction("Interaktion", true, () => {
    if (InteriorEditorObject != null && InteriorEditorHasPermission) {
        if (InteriorEditorEditModeValid) {
            let pos = InteriorEditorObject.getCoords(false);
            let rot = InteriorEditorObject.getRotation(0);

            if (InteriorEditorObject.ObjectID != null) {
                CommunicationManager.TriggerServer("OnClientRequestUpdateInteriorObject", InteriorEditorObject.ObjectID, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z); // Update
                CreateNotify("~g~Möbelstück gespeichert!");
                CreateNotify("~b~Du hast den Innenraumeditor deaktiviert!");
            } else {
                InteriorEditorObject.destroy();
                CommunicationManager.TriggerServer("OnClientRequestSaveInteriorObject", InteriorEditorObjectHash, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z);
                CreateNotify("~g~Möbelstück gespeichert!");
                CreateNotify("~b~Du hast den Innenraumeditor deaktiviert!");
            }
            InteriorEditorObject = null;
        } else {
            CreateNotify("~r~Das Möbelstück befindet sich an einer ungültigen Position!");
        }
    } else if (InteriorEditorEditSelectActive && InteriorEditorEditSelectActiveObject != null && InteriorEditorHasPermission) {
        InteriorEditorEditSelectActive = false;
        InteriorEditorEditMode = "pos"
        InteriorEditorObject = InteriorEditorEditSelectActiveObject;
        InteriorEditorEditSelectActiveObject = null;

        var lPos = mp.players.local.position;
        InteriorEditorMinZPosition = lPos.z - 1.5;
        InteriorEditorMaxZPosition = lPos.z + 4.5;

        InteriorEditorTempPosition = InteriorEditorObject.getCoords(false);
        InteriorEditorTempRotation = InteriorEditorObject.getRotation(0);
    } else if (mp.players.local.dimension != 0 && InHouse == true) {
        var dist = mp.game.gameplay.getDistanceBetweenCoords(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, InteriorSpawnPosition["x"], InteriorSpawnPosition["y"], InteriorSpawnPosition["z"], true);
        if (dist < 2) {

            if (mp.players.local.getIsTaskActive(421) || mp.players.local.getIsTaskActive(420)) { // Jump
                CreateNotify("~r~Du stehst nicht still!");
                return;
            }
            if (mp.players.local.isFalling() || mp.players.local.getIsTaskActive(6) == false) {
                CreateNotify("~r~Du stehst nicht still!");
                return;
            }

            InteriorEditorEditSelectActive = false;
            mp.game.cam.doScreenFadeOut(0);
            InHouse = false;
            InGroupHouse = false;
            CommunicationManager.TriggerServer("onClientRequestLeaveHouse", 0);
        }
    }
});

mp.keys.bind(0x20, true, () => { // Leertaste
    if (InteriorEditorObject != null) {
        if (InteriorEditorObject.ObjectID == null) {
            InteriorEditorObject.destroy();
        } else {
            InteriorEditorObject.position = InteriorEditorTempPosition;
            InteriorEditorObject.rotation = InteriorEditorTempRotation;
        }
        InteriorEditorObject = null;
    }
});


mp.keys.bind(0x2E, true, () => { // Entf
    if (InteriorEditorEditSelectActive && InteriorEditorEditSelectActiveObject != null) {
        ChangeInteriorEditorStatus(false);
        CommunicationManager.TriggerServer("OnClientRequestRemoveInteriorObject", InteriorEditorEditSelectActiveObject.ObjectID);
        InteriorEditorEditSelectActiveObject = null;
        CreateNotify("~g~Möbelstück entfernt!");
        CreateNotify("~b~Du hast den Innenraumeditor deaktiviert!");
    }
});

function DestroyHouseInterior() {
    HouseInteriorObjects.forEach(function (obj, index) {
        if (obj) {
            obj.destroy();
            delete HouseInteriorObjects[index];
        }
    })
    HouseInterior.forEach(function (obj, index) {
        if (obj) {
            obj.destroy();
            delete HouseInterior[index];
        }
    })
    HouseInteriorObjects = [];
    HouseInterior = [];
}

function LoadHouseInterior(HouseID, InteriorObjectList) {

    HouseInteriorObjects.forEach(function (obj, index) {
        if (obj) {
            obj.destroy();
            delete HouseInteriorObjects[index];
        }
    })
    HouseInteriorObjects = [];

    try {
        let InteriorObjects = JSON.parse(InteriorObjectList);
        for (var temp_object_id = 0; temp_object_id < InteriorObjects.length; temp_object_id++) {
            if (InteriorObjects[temp_object_id]) {

                var obj_rot = new mp.Vector3(0, 0, 0);
                if (InteriorObjects[temp_object_id].Rot != null) {
                    obj_rot = InteriorObjects[temp_object_id].Rot;
                }

                let obj = mp.objects.new(mp.game.joaat(InteriorObjects[temp_object_id].Hash), InteriorObjects[temp_object_id].Pos, {
                    rotation: obj_rot,
                    dimension: HouseID
                })
                if (obj != null) {
                    obj.ObjectName = InteriorObjects[temp_object_id].Hash;
                    obj.ObjectID = temp_object_id;
                } else {
                    VioRageManager.SendChatMessage("Fehler im Objekt : " + InteriorObjects[temp_object_id].Hash);
                }
                HouseInteriorObjects.push(obj);
            }
        }
    } catch (e) {
        VioRageManager.SendChatMessage(`!r Das Interior konnte nicht geladen werden!`);
    }
}

CommunicationManager.AddServerEvent("SendPlayerToModHouseInterior", (InteriorID, InteriorHash, InteriorSpawn, HouseID, InteriorObjectList, CreatorObj, ToGroupHouse, CanEdit, PedHash) => {
    if(InHouse == true){
        VioRageManager.SendChatMessage("[DEBUG] ERROR : Es wurde versucht den Innenraum doppelt zu laden!");
        return;
    }

    InHouse = true;
    disableAllControls = true;

    DestroyHouseInterior();

    // mp.players.local.freezePosition(true)
    VioRageManager.FreezePosition(mp.players.local, true);

    let SpawnPos = JSON.parse(InteriorSpawn);

    ToogleHudStatus(false, true);

    mp.game.cam.doScreenFadeOut(100);

    setTimeout(function(){
        InteriorEditorHasPermission = CanEdit;
        InGroupHouse = ToGroupHouse;

        InteriorSpawnPosition = new mp.Vector3(SpawnPos.Pos["x"], SpawnPos.Pos["y"], SpawnPos.Pos["z"])

        teleportCheck.freezeTimer(8);
        mp.players.local.position = InteriorSpawnPosition;
        LastTeleportPosition = mp.players.local.position;

        RequestModObjectModel(mp.game.gameplay.getHashKey(InteriorHash), 2000, 60, function (isready) {
            if (isready) {
                let obj = mp.objects.new(mp.game.joaat(InteriorHash), new mp.Vector3(750, -3000, -100), {
                    rotation: new mp.Vector3(0,0,0),
                    dimension: HouseID
                })
                HouseInterior.push(obj)
                
                if(InteriorID == 206){
                    HouseInterior.push(mp.objects.new(mp.game.joaat("prop_hotel_clock_01"), new mp.Vector3(744.87756 ,-2997.52075, -97.9586), { rotation: new mp.Vector3(0, 0, -90.23488),dimension: HouseID }))
                    HouseInterior.push(mp.objects.new(mp.game.joaat("apa_p_mp_door_apartfrt_door"), new mp.Vector3(744.47754 ,-2996.78467, -98.81273), { rotation: new mp.Vector3(0, 0, 89.61421),dimension: HouseID }))
                    HouseInterior.push(mp.objects.new(mp.game.joaat("xm_prop_lab_doorframe02"), new mp.Vector3(744.43762 ,-2997.43921, -99.96127), { rotation: new mp.Vector3(0, 0, 89.61023),dimension: HouseID }))
                }
                if(InteriorID == 207){
                    HouseInterior.push(mp.objects.new(mp.game.joaat("prop_hotel_clock_01"), new mp.Vector3(732.22046 ,-2998.64526, -91.88307), { rotation: new mp.Vector3(0, 0, -1.15076),dimension: HouseID }))
                    HouseInterior.push(mp.objects.new(mp.game.joaat("prop_hotel_clock_01"), new mp.Vector3(735.71777 ,-2998.71533, -91.88307), { rotation: new mp.Vector3(0, 0, -1.15076),dimension: HouseID }))
                    HouseInterior.push(mp.objects.new(mp.game.joaat("prop_hotel_clock_01"), new mp.Vector3(739.21692 ,-2998.78638, -91.88307), { rotation: new mp.Vector3(0, 0, -1.15076),dimension: HouseID }))
                    HouseInterior.push(mp.objects.new(mp.game.joaat("prop_hotel_clock_01"), new mp.Vector3(742.71484 ,-2998.85669, -91.88307), { rotation: new mp.Vector3(0, 0, -1.15076),dimension: HouseID }))
                    HouseInterior.push(mp.objects.new(mp.game.joaat("prop_hotel_clock_01"), new mp.Vector3(742.71484 ,-2998.85669, -96.07006), { rotation: new mp.Vector3(0, 0, -1.15076),dimension: HouseID }))
                    HouseInterior.push(mp.objects.new(mp.game.joaat("prop_hotel_clock_01"), new mp.Vector3(739.21692 ,-2998.78638, -96.08301), { rotation: new mp.Vector3(0, 0, -1.15076),dimension: HouseID }))
                    HouseInterior.push(mp.objects.new(mp.game.joaat("xm_prop_lab_doorframe02"), new mp.Vector3(734.63757 ,-2993.66846, -93.96127), { rotation: new mp.Vector3(0, 0, -179.88962),dimension: HouseID }))
                    HouseInterior.push(mp.objects.new(mp.game.joaat("apa_p_mp_door_apartfrt_door"), new mp.Vector3(735.28644 ,-2993.70825, -92.80075), { rotation: new mp.Vector3(0, 0, 0.4769),dimension: HouseID }))
                }
                if(InteriorID == 208){
                    HouseInterior.push(mp.objects.new(mp.game.joaat("ex_p_mp_door_apart_door_black_s"), new mp.Vector3(748.73602 ,-2990.94312, -102.36963), { rotation: new mp.Vector3(0, 0, -89.65978),dimension: HouseID }))
                    HouseInterior.push(mp.objects.new(mp.game.joaat("prop_hotel_clock_01"), new mp.Vector3(748.31769 ,-2990.38696, -101.42132), { rotation: new mp.Vector3(0, 0, 90.11523),dimension: HouseID }))
                }
                if(InteriorID == 209){
                    HouseInterior.push(mp.objects.new(mp.game.joaat("prop_hotel_clock_01"), new mp.Vector3(745.72028 ,-2998.64966, -98.64376), { rotation: new mp.Vector3(0, 0, -0.00001),dimension: HouseID }))
                    HouseInterior.push(mp.objects.new(mp.game.joaat("prop_hotel_clock_01"), new mp.Vector3(753.85748 ,-2990.47437, -98.17377), { rotation: new mp.Vector3(0, 0, 89.69402),dimension: HouseID }))
                    HouseInterior.push(mp.objects.new(mp.game.joaat("xm_prop_lab_doorframe02"), new mp.Vector3(745.72125 ,-2999.10278, -99.73622), { rotation: new mp.Vector3(0, 0, -179.94164),dimension: HouseID }))
                    HouseInterior.push(mp.objects.new(mp.game.joaat("apa_p_mp_door_apartfrt_door"), new mp.Vector3(745.06982 ,-2999.06274, -98.58057), { rotation: new mp.Vector3(0, 0, -179.73056),dimension: HouseID }))
                }
                if(InteriorID == 210){
                    HouseInterior.push(mp.objects.new(mp.game.joaat("prop_hotel_clock_01"), new mp.Vector3(753.6684 ,-2993.47046, -102.36377), { rotation: new mp.Vector3(0, 0, 89.59348),dimension: HouseID }))
                    HouseInterior.push(mp.objects.new(mp.game.joaat("apa_p_mp_door_apartfrt_door_black"), new mp.Vector3(754.08301 ,-2994.19165, -102.18562), { rotation: new mp.Vector3(0, 0, -90.40817),dimension: HouseID }))
                }
                if(InteriorID == 211){
                    HouseInterior.push(mp.objects.new(mp.game.joaat("apa_p_mp_door_apartfrt_door"), new mp.Vector3(747.31873 ,-3002.02271, -100.41058), { rotation: new mp.Vector3(0, 0, 179.4398),dimension: HouseID }))
                }

                IsRageMpObjectReady(obj, 30000, function (objisready) {
                    if (obj != null && objisready) {
                        mp.players.local.setHeading(SpawnPos.Rot);

                        mp.players.local.position = InteriorSpawnPosition;
                        LastTeleportPosition = mp.players.local.position;

                        LoadHouseInterior(HouseID, InteriorObjectList);

                        mp.game.cam.doScreenFadeIn(100);

                        setTimeout(() => {
                            mp.players.local.setHeading(SpawnPos.Rot);
                            // mp.players.local.freezePosition(false)
                            VioRageManager.FreezePosition(mp.players.local, false);
                            disableAllControls = false;

                            if (CreatorObj != "") {
                                SendPlayerIntoInteriorEditor(CreatorObj, HouseID);
                            }

                        }, 500)
                    }
                });
            }else{
                if(mp.players.local.dimension != 0){
                    InteriorEditorEditSelectActive = false;
                    mp.game.cam.doScreenFadeOut(0);
                    InHouse = false;
                    InGroupHouse = false;
                    CommunicationManager.TriggerServer("onClientRequestLeaveHouse", 0);
                    VioRageManager.SendChatMessage("[DEBUG] ERROR : Fehler beim Laden des Innenraums " + InteriorHash);
                }
            }
        });

    }, 100);
});



CommunicationManager.AddServerEvent("SendPlayerToHouseInterior", (InteriorID, HouseID, InteriorObjectList, CreatorObj, ToGroupHouse, CanEdit, PedHash) => {

    DestroyHouseInterior();
    var PlayerSpawn = createHouseInterior(InteriorID, HouseID);

    // mp.players.local.freezePosition(true)
    VioRageManager.FreezePosition(mp.players.local, true);


    ToogleHudStatus(false, true);
    mp.game.cam.doScreenFadeOut(500);

    InHouse = true;
    InteriorEditorHasPermission = CanEdit;
    InGroupHouse = ToGroupHouse;

    InteriorSpawnPosition = PlayerSpawn;

    disableAllControls = true;

    setTimeout(() => {
        teleportCheck.freezeTimer(8);
        mp.players.local.position = new mp.Vector3(PlayerSpawn["x"], PlayerSpawn["y"], PlayerSpawn["z"]);
        mp.players.local.setHeading(PlayerSpawn["rz"]);
        LastTeleportPosition = mp.players.local.position;

        mp.game.time.setClockTime(4, 0, 0);
        mp.game.gameplay.setWeatherTypeNowPersist("CLOUDS");

    }, 750)

    setTimeout(() => {
        mp.players.local.setHeading(PlayerSpawn["rz"]);

        mp.game.time.setClockTime(4, 0, 0);
        mp.game.gameplay.setWeatherTypeNowPersist("CLOUDS");

        mp.game.cam.doScreenFadeIn(3000);

        LoadHouseInterior(HouseID, InteriorObjectList);


        setTimeout(() => {
            mp.players.local.setHeading(PlayerSpawn["rz"]);
            // mp.players.local.freezePosition(false)
            VioRageManager.FreezePosition(mp.players.local, false);
            disableAllControls = false;

            if (CreatorObj != "") {
                SendPlayerIntoInteriorEditor(CreatorObj, HouseID);
            }

        }, 4000)

    }, 4000)
})

CommunicationManager.AddServerEvent("setPlayerOutOfInt", (SpawnPosition, weather_id, isDead) => {

    if (InteriorAnimalPed != null) {
        InteriorAnimalPed.destroy();
        InteriorAnimalPed = null;
    }

    if (isDead == 0) {
        disableAllControls = true;
        mp.game.cam.doScreenFadeOut(0);

        // mp.players.local.freezePosition(true);
        VioRageManager.FreezePosition(mp.players.local, true);

        DestroyHouseInterior();

        teleportCheck.freezeTimer(8);
        mp.players.local.position = SpawnPosition;
        LastTeleportPosition = SpawnPosition;

        setTimeout(() => {
            teleportCheck.freezeTimer(8);

            mp.players.local.position = SpawnPosition;
            LastTeleportPosition = SpawnPosition;

            mp.game.cam.doScreenFadeIn(500);

            // mp.players.local.freezePosition(false);
            VioRageManager.FreezePosition(mp.players.local, false);
            ToogleHudStatus(true, true);
            disableAllControls = false;
        }, 100);
    }

    InHouse = false;
    InGroupHouse = false;

    let date = new Date();
    mp.game.time.setClockTime(date.getHours(), date.getMinutes(), date.getSeconds());
    SetWorldWeather();

    if (Webwindow["GroupWindow"] != null) {
        Webwindow["GroupWindow"].destroy();
        Webwindow["GroupWindow"] = null;
    }

    InteriorEditorEditSelectActive = false
    InteriorEditorObject = null;
    InteriorEditorEditSelectActiveObject = null;
})

CommunicationManager.AddServerEvent("UpdatePlayerToHouseInterior", (HouseID, InteriorObjectList, CreatorObject) => {
    LoadHouseInterior(HouseID, InteriorObjectList);
    if (CreatorObject != "") {
        CreateNotify("~b~Platziere das Möbelstück an der gewünschten Stelle. Nutze die Pfeiltasten zum Verschieben und das Mausrad um das Möbelstück zu drehen!");
        SendPlayerIntoInteriorEditor(CreatorObject, HouseID);
    }
})


CommunicationManager.addSafeServerEvent("TooglePlayerWeaponCreator", () => {
    if (InHouse == true) {
        if (InteriorEditorObject == null && InteriorEditorEditSelectActive == false) {
            var isReady = false;
            HouseInteriorObjects.forEach(function (obj, index) {
                if (obj) {
                    if (obj.ObjectName == "prop_tool_bench02") {
                        let pos = obj.getCoords(false);
                        var dist = mp.game.gameplay.getDistanceBetweenCoords(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, pos.x, pos.y, pos.z, true);
                        if (dist <= 3) {
                            isReady = true;
                            CommunicationManager.TriggerServer("OnClientRequestOpenWeaponCraft");

                        }
                    }
                }
            })
            if (isReady == false) {
                CreateNotify("~r~Du befindest dich nicht in der Nähe einer Werkbank!");
            }
        } else {
            CreateNotify("~r~Der Innenraumeditor ist noch aktiviert!");
        }
    }
});

function OnClientRequestOpenWardrobe() {
    if (InHouse == true) {
        if (InteriorEditorObject == null && InteriorEditorEditSelectActive == false) {
            var isReady = false;
            HouseInteriorObjects.forEach(function (obj, index) {
                if (obj) {
                    if (obj.ObjectName == "v_serv_cupboard_01") {
                        let pos = obj.getCoords(false);
                        var dist = mp.game.gameplay.getDistanceBetweenCoords(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, pos.x, pos.y, pos.z, true);
                        if (dist <= 4) {
                            isReady = true;
                        }
                    }
                }
            })
            if (isReady == false) {
                CreateNotify("~r~Du befindest dich nicht in der Nähe eines Kleiderschranks!");
            }else{
                CommunicationManager.TriggerServer("OnClientRequestOpenWardrobe");
            }
        } else {
            CreateNotify("~r~Der Innenraumeditor ist noch aktiviert!");
        }
    }
}

var Weed = class {
    constructor() {
        this._setup();
    }

    _setup() {
        var self = this;
        self._drawPlant = null;
        self._plantFullGrown = 86400;
        self._obj = null;
        self._isUpdating = false;
        self._easing = 0;
        self._easingSwitch = 0;
    }

    easing(t) {
        return t * (2 - t);
    }

    reset() {
        var self = this;
        self._easing = 0;
        self._easingSwitch = 0;
        self._isUpdating = false;
        self._isPlacing = false;
        if (self._obj != null) {
            self._obj.destroy();
        }
        self._obj = null;
    }

    findrot(pos, rz, dist, rot) {
        let temp = new mp.Vector3(0, 0, 0);
        temp.x = pos.x;
        temp.y = pos.y;
        temp.z = pos.z;
        let degrees = (rz.z + rot) * (Math.PI / 180);
        temp.x = temp.x + dist * Math.cos(degrees);
        temp.y = temp.y + dist * Math.sin(degrees);
        return temp;
    }

    rot_point(pos, pos1) {
        var temp = new mp.Vector3(pos.x, pos.y, pos.z);
        var temp1 = new mp.Vector3(pos1.x, pos1.y, pos1.z);
        var gegenkathete = temp1.z - temp.z
        var a = temp.x - temp1.x;
        var b = temp.y - temp1.y;
        var ankathete = Math.sqrt(a * a + b * b);
        var winkel = Math.atan2(gegenkathete, ankathete) * 180 / Math.PI
        return winkel;
    }

    getDistance(pos, pos1) {
        var a = pos.x - pos1.x;
        var b = pos.y - pos1.y;
        var c = pos.z - pos1.z;
        var dist = Math.sqrt(a * a + b * b + c * c);
        return dist;
    }

    groundPos(pos) {
        return mp.game.gameplay.getGroundZFor3dCoord(pos.x, pos.y, pos.z, 0, false);
    }

    isPlaceAble(info) {
        var self = this;
        var pos = self._obj.getCoords(false);
        var rot = self._obj.getRotation(0);
        var GET_INTERIOR_FROM_ENTITY = mp.game.entity.getInteriorFromEntity(self._obj);
        var ppos = mp.players.local.position;
        var raycastCar = mp.raycasting.testPointToPoint(pos, ppos, mp.players.local, 1);
        if (raycastCar) {
            if (info) {
                CreateNotify("~r~An dieser Position kannst du keinen Steckling anpflanzen!");
            }
            return false;
        }
        raycastCar = mp.raycasting.testPointToPoint(new mp.Vector3(pos.x, pos.y, pos.z + 100), pos, mp.players.local, 1);
        if (raycastCar) {
            if (info) {
                CreateNotify("~r~Ein Steckling benötigt direktes Sonnenlicht um zu wachsen!");
            }
            return false;
        }
        if (mp.players.local.isSittingInAnyVehicle() == true) {
            return false;
        }
        if (mp.players.local.isDeadOrDying(true)) {
            return false;
        }
        if (GET_INTERIOR_FROM_ENTITY > 0) {
            if (info) {
                CreateNotify("~r~An dieser Position kannst du keinen Steckling anpflanzen!");
            }
            return false;
        }
        if (rot.x > 15 || rot.x < -15) {
            if (info) {
                CreateNotify("~r~Die Neigung ist zu stark!");
            }
            return false;
        }
        if (rot.y > 15 || rot.y < -15) {
            if (info) {
                CreateNotify("~r~Die Neigung ist zu stark!");
            }
            return false;
        }
        if (pos.z < 0) {
            if (info) {
                CreateNotify("~r~Stecklinge wachsen in dieser Gegend leider nicht!");
            }
            return false;
        }
        if (self._drawPlant != null) {
            if (info) {
                CreateNotify("~r~Die Stecklinge sollten etwas auseinander platziert werden!");
            }
            return false;
        }
        if (ppos.z >= pos.z + 1.75) {
            if (info) {
                CreateNotify("~r~Die Neigung ist zu stark!");
            }
            return false;
        }

        const aircons = ['prop_aircon_l_01', 'prop_aircon_l_02', 'prop_aircon_l_03', 'prop_aircon_l_04', 'prop_aircon_l_03_dam', 'prop_aircon_m_01', 'prop_aircon_m_02', 'prop_aircon_m_03', 'prop_aircon_m_04', 'prop_aircon_m_05', 'prop_aircon_m_06', 'prop_aircon_m_07', 'prop_aircon_m_08', 'prop_aircon_m_09', 'prop_aircon_m_10', 'prop_aircon_t_03', 'prop_aircon_tna_02'];
        for (let i=0; i<aircons.length; i++) {
           let aircon = mp.game.object.getClosestObjectOfType(pos.x, pos.y, pos.z, 2.0, mp.game.joaat(aircons[i]), false, true, true);
           if(aircon){
                if (info) {
                    CreateNotify("~r~Stecklinge wachsen nicht an Abluftanlagen!");
                }
                return false;
           }
        }

        let water_height = mp.game.water.getWaterHeight(pos.x, pos.y, pos.z, 0);
        if (!water_height || (pos.z > water_height)) {
            return true;
        } else {
            if (info) {
                CreateNotify("~r~Stecklinge wachsen unter Wasser leider nicht!");
            }
            return false;
        }
    }

    update() {
        var self = this;
        var pos = mp.players.local.position;
        var rot = mp.players.local.getRotation(0);
        var ground_pos = self.findrot(pos, rot, 0.8, 90);
        ground_pos.z = self.groundPos(ground_pos);
        var left_pos = self.findrot(ground_pos, rot, 1, 180);
        var right_pos = self.findrot(ground_pos, rot, 1, 0);
        left_pos.z = mp.game.gameplay.getGroundZFor3dCoord(left_pos.x, left_pos.y, left_pos.z + 1, 0, false);
        right_pos.z = mp.game.gameplay.getGroundZFor3dCoord(right_pos.x, right_pos.y, right_pos.z + 1, 0, false);
        var back_pos = self.findrot(ground_pos, rot, 1, 270);
        var front_pos = self.findrot(ground_pos, rot, 1, 90);
        front_pos.z = mp.game.gameplay.getGroundZFor3dCoord(front_pos.x, front_pos.y, front_pos.z + 1, 0, false);
        back_pos.z = mp.game.gameplay.getGroundZFor3dCoord(back_pos.x, back_pos.y, back_pos.z + 1, 0, false);
        rot.y = self.rot_point(left_pos, right_pos) * -1;
        rot.x = self.rot_point(front_pos, back_pos) * -1;
        mp.game.controls.disableControlAction(2, 22, true);
        mp.game.controls.disableControlAction(2, 24, true);
        mp.game.controls.disableControlAction(2, 38, true);
        //mp.game.controls.disableControlAction(2, 21, true);
        if (mp.game.controls.isDisabledControlJustPressed(2, 38)) {
            var raycast = mp.raycasting.testPointToPoint(pos, ground_pos, mp.players.local, 1);
            if (!raycast) {
                self._isPlacing = true;
            }
        }
        if (mp.game.controls.isDisabledControlJustPressed(2, 22)) {
            self.reset();
            return;
        }
        if (self._isPlacing == true) {
            mp.players.local.setVelocity(0, 0, 0);
            mp.game.controls.disableAllControlActions(2);
            if (self._easingSwitch == 0 && self._easing < 1) self._easing += 0.04;
            if (self._easing >= 0 && self._easingSwitch == 1) self._easing -= 0.04;
            if (self._easingSwitch == 0 && self._easing >= 1) self._easingSwitch = 1;
            ground_pos.z = ground_pos.z + (0.2 * self.easing(self._easing));
            if (self._easing <= 0 && self._easingSwitch == 1) {
                self.place()
                return;
            }
        }
        self._obj.setCoords(ground_pos.x, ground_pos.y, ground_pos.z, false, false, false, false);
        self._obj.setRotation(rot.x, rot.y, rot.z, 0, true);
        mp.game.graphics.setDrawOrigin(ground_pos.x, ground_pos.y, ground_pos.z + 1.05, 0);
        mp.game.graphics.drawText("Steckling anpflanzen", [0, -0.02], {
            font: 0,
            color: [255, 255, 255, 255],
            scale: [0.3, 0.3],
            outline: true
        });
        if (self._isPlacing == true) {
            mp.game.graphics.drawText("Warten ..", [0, 0], {
                font: 0,
                color: [255, 255, 255, 255],
                scale: [0.3, 0.3],
                outline: true
            });
        } else {
            mp.game.graphics.drawText("E zum Platzieren\nLeertaste zum Abbrechen", [0, 0], {
                font: 0,
                color: [255, 255, 255, 255],
                scale: [0.3, 0.3],
                outline: true
            });
            // Prüfen ob es geht, Färbung des Stecklings!
        }
        mp.game.graphics.clearDrawOrigin()
    }

    place() {
        var self = this;
        if (self.isPlaceAble(true)) {
            var pos = self._obj.getCoords(false);
            self.reset();
            var ped_swimmer = mp.peds.new(mp.game.joaat('ig_abigail'), new mp.Vector3(pos.x, pos.y, pos.z - 5), 0, mp.players.local.dimension);

            setTimeout(() => {
                if (ped_swimmer) {
                    mp.game.invoke("0x44A0870B7E92D7C0", ped_swimmer.handle, 0, false)
                    // ped_swimmer.freezePosition(false);
                    VioRageManager.FreezePosition(ped_swimmer, false);
                    ped_swimmer.setCoords(pos.x, pos.y, pos.z + 2, true, false, false, true);
                }
            }, 150);

            setTimeout(() => {
                if (ped_swimmer) {
                    if (ped_swimmer.isSwimming() == false && ped_swimmer.isSwimmingUnderWater() == false) {
                        CommunicationManager.TriggerServer("plant_finish", pos.x, pos.y, pos.z);
                    } else {
                        CreateNotify("~r~Stecklinge wachsen unter Wasser leider nicht!");
                    }
                    ped_swimmer.destroy();
                }
            }, 950);
        } else {
            self.reset();
        }
    }

    preview() {
        if (Webwindow["TicketsystemBrowser"] != null || Webwindow["Settings"] != null || Webwindow["Trade"] != null || Selection.visible == true) {
            return;
        }
        if (player_lang == 0) {
            return;
        }
        if (mp.players.local.isSittingInAnyVehicle() == true) {
            return;
        }
        if (mp.players.local.isSwimming() == true) {
            return;
        }
        if (mp.players.local.isSwimmingUnderWater() == true) {
            return;
        }
        if (mp.gui.cursor.visible == true) {
            return;
        }
        if (mp.players.local.isDeadOrDying(true)) {
            return;
        }
        var self = this;
        if (self._obj)
            self._obj.destroy();

        var pos = mp.players.local.position;
        var height = self.groundPos(pos)
        var ground_pos = new mp.Vector3(pos.x, pos.y, height);
        var rot = mp.players.local.getRotation(0);
        ground_pos = self.findrot(ground_pos, rot, 2, 90);
        self._obj = mp.objects.new(mp.game.joaat("prop_weed_02"), pos, {
            rotation: rot
        });
        self._obj.setCollision(false, false);
        self._isUpdating = true;
    }

    show_plant(plant_id, grow_state) {
        var self = this;
        self._drawPlant = {
            plant: plant_id,
            grow_state: grow_state
        }
    }

    drawPlant() {
        var self = this;
        var lpos = mp.players.local.position;
        let objId = self._drawPlant.plant;
        if (vioObjects[objId]) {
            let obj = vioObjects[self._drawPlant.plant];
            if (obj.isCreated()) {
                var pos = obj.getCoords(false) || obj._pos;

                var dist_3d = self.getDistance(pos, lpos)
                if (dist_3d < 2.5) {
                    var currentTimestamp = parseInt(Date.now() / 1000);
                    mp.game.controls.disableControlAction(2, 38, true);
                    mp.game.graphics.setDrawOrigin(pos.x, pos.y, pos.z + 1, 0);
                    mp.game.graphics.drawText("~g~Hanfpflanze", [0, -0.02], {
                        font: 0,
                        color: [255, 255, 255, 255],
                        scale: [0.3, 0.3],
                        outline: true
                    });
                    if (self._drawPlant.grow_state < 50) {
                        mp.game.graphics.drawText("~g~Wachstum: " + self._drawPlant.grow_state + "%", [0, 0], {
                            font: 0,
                            color: [255, 255, 255, 255],
                            scale: [0.3, 0.3],
                            outline: true
                        });
                        mp.game.graphics.drawText("~g~Taste 'E' um den Steckling zu entfernen", [0, 0.02], {
                            font: 0,
                            color: [255, 255, 255, 255],
                            scale: [0.3, 0.3],
                            outline: true
                        });
                    } else if (self._drawPlant.grow_state > 99) {
                        mp.game.graphics.drawText("~g~Taste 'E' zum Ernten", [0, 0], {
                            font: 0,
                            color: [255, 255, 255, 255],
                            scale: [0.3, 0.3],
                            outline: true
                        });
                    } else if (self._drawPlant.grow_state > 49) {
                        mp.game.graphics.drawText("~g~Wachstum: " + self._drawPlant.grow_state + "%", [0, 0], {
                            font: 0,
                            color: [255, 255, 255, 255],
                            scale: [0.3, 0.3],
                            outline: true
                        });
                        mp.game.graphics.drawText("~g~Taste 'E' zum Ernten", [0, 0.02], {
                            font: 0,
                            color: [255, 255, 255, 255],
                            scale: [0.3, 0.3],
                            outline: true
                        });
                    }
                    if (mp.game.controls.isDisabledControlJustPressed(2, 38)) {
                        if (mp.players.local.isSittingInAnyVehicle() == true) {
                            return;
                        }
                        if (mp.gui.cursor.visible == true) {
                            return;
                        }
                        if (mp.players.local.isDeadOrDying(true)) {
                            return;
                        }
                        self.harvestPlant();
                    }
                    mp.game.graphics.clearDrawOrigin()
                } else {
                    self._drawPlant = null;
                }
            }
        }
    }

    harvestPlant() {
        var self = this;
        CommunicationManager.TriggerServer("OnClientRequestWeedHarvest");
        self._drawPlant = null;
    }
}
var WeedPlantDrug = new Weed();
mp.events.add('render', () => {
    if (WeedPlantDrug._isUpdating) {
        WeedPlantDrug.update();
    }
    if (WeedPlantDrug._drawPlant != null) {
        WeedPlantDrug.drawPlant();
    }
});
CommunicationManager.AddServerEvent("plantstart", () => {
    WeedPlantDrug.preview();
});
CommunicationManager.AddServerEvent("plant_show", (argument1, argument2) => {
    WeedPlantDrug.show_plant(argument1, argument2);
});

var DrugEffects = new class {
    constructor() {
        this._setup();
    }

    _setup() {
        var self = this;
        self._effect = {
            "meth": "Rampage",
            "weed": "DrugsDrivingOut"
        };
        self._debuffEffect = "FocusIn";
        self._activeEffects = [];
        self._activeDebuffEffects = [];
    }

    effect(d, t) {
        var self = this;
        if (t == 0) self.removeEffect(d, self._effect[d]);
        if (t == 1) self.showDebuff(d, self._effect[d]);
        if (t == 2) self.showBuff(d, self._effect[d]);
    }

    showBuff(d, e) {
        var self = this;
        if (!self._activeEffects[d]) {
            //self._activeEffects[d] = true
            //mp.game.graphics.startScreenEffect(e, 1000, true);
            if (self._activeDebuffEffects[d]) {
                mp.game.graphics.stopScreenEffect(self._debuffEffect);
            }
        }
    }

    removeEffect(d, e) {
        var self = this;
        if (self._activeEffects[d]) {
            self._activeEffects[d] = false
            mp.game.graphics.stopScreenEffect(e);
        }
        if (self._activeDebuffEffects[d]) {
            self._activeDebuffEffects[d] = false;
            mp.game.graphics.stopScreenEffect(self._debuffEffect);
        }
    }

    showDebuff(d, e) {
        var self = this;
        if (!self._activeDebuffEffects[d]) {
            self._activeDebuffEffects[d] = true;
            mp.game.graphics.stopScreenEffect(self._debuffEffect);
            mp.game.graphics.startScreenEffect(self._debuffEffect, 1000, true);
        }
    }
}

CommunicationManager.AddServerEvent("updateMethamphetaminStatus", (argument1, methtime) => {

    DrugEffects.effect("meth", argument1);

    if (voiceChat) {
        voiceChat.call("setMethStatus", methtime)
    } else {
        tempVoiceCommands.push({
            "command": "setMethStatus",
            "arg": methtime
        })
    }

});

var AnimationFlags = {
    Loop: 1 << 0,
    StopOnLastFrame: 1 << 1,
    OnlyAnimateUpperBody: 1 << 4,
    AllowPlayerControl: 1 << 5,
    Cancellable: 1 << 7
}
var FishingJob = new class {
    constructor() {
        this._setup();
    }

    _setup() {
        var self = this;
        self.render = false;
        self.child = null;
        self._init = false;
        self._catch = false;
        self.ped = false;
        self._catchingfinish = false;
        self._catching = false;
        mp.events.add("render", () => {
            if (self.render) self.update();
        })
    }

    reset() {
        var self = this;
        self.render = false;
        self._init = false;
        self._catch = false;
        self._catching = false;
        self._isWaiting = false;

        if (self.child != null) {
            self.child.destroy();
            self.child = null;
        }

        if (isPlayerFishing == true) {
            isPlayerFishing = false;
            CommunicationManager.TriggerServer("OnClientRequestFishCancel")
        }
    }

    cancel() {
        var self = this;
        self.reset();
        CreateNotify("~g~Der Fisch ist entwischt")
    }

    begin() {
        var self = this;
        if (mp.players.local.isFalling()) {
            self.reset();
            return;
        }
        if (mp.players.local.isInAnyVehicle(true)) {
            self.reset();
            return;
        }
        if (mp.players.local.getIsTaskActive(6) == false) {
            self.reset();
            return;
        }
        mp.players.local.giveWeapon(2725352035, 1, true)

        if (self.child == null) {
            let boneIndex = mp.players.local.getBoneIndex(18905);

            self.child = mp.objects.new(mp.game.joaat("ng_proc_sodacan_01b"), mp.players.local.position, {
                alpha: 0
            })
            IsRageMpObjectReady(self.child, 1500, function (isready) {
                if (self.child != null && isready) {
                    self.child.attachTo(mp.players.local.handle, boneIndex, 1.4, 2.3, 0.05, 270, -90, -30, true, false, false, false, 0, true)
                    self.child.setCollision(false, true);
                }
            });
        }
        isPlayerFishing = true;

        CommunicationManager.TriggerServer("OnClientRequestCreateFishingRod")

        self.render = true;
        self._init = true;
        self._catch = false;
        self._catching = false;
    }

    update() {
        var self = this;
        mp.game.controls.disableControlAction(2, 38, true)
        mp.game.controls.disableControlAction(2, 22, true);
        mp.game.controls.disableControlAction(2, 23, true);
        mp.game.controls.disableControlAction(2, 24, true);
        mp.game.controls.disableControlAction(2, 25, true);
        mp.game.controls.disableControlAction(2, 257, true);
        mp.game.controls.disableControlAction(2, 45, true);
        mp.game.controls.disableControlAction(2, 44, true);
        mp.game.controls.disableControlAction(2, 37, true);
        mp.game.controls.disableControlAction(2, 140, true);
        mp.game.controls.disableControlAction(2, 141, true);
        mp.game.controls.disableControlAction(2, 142, true);
        mp.game.controls.disableControlAction(2, 143, true);

        if (mp.players.local.isInAnyVehicle(true)) {
            self.reset();
            return;
        }
        if (mp.players.local.getHealth() == 0) {
            self.reset();
            return;
        }
        if (mp.players.local.isSwimming()) {
            self.reset();
            return;
        }

        if (self._init) {
            var rot = mp.players.local.getRotation(1);
            var pos = self.child.getCoords(true);
            var ground = mp.game.gameplay.getGroundZFor3dCoord(pos.x, pos.y, pos.z, 0, false);
            var gPos = new mp.Vector3(pos.x, pos.y, ground);
            if (mp.game.controls.isDisabledControlJustPressed(2, 38)) {
                let water_height = mp.game.water.getWaterHeight(gPos.x, gPos.y, gPos.z, 0)
                if (water_height && (gPos.z < water_height)) {
                    self._isWaiting = true;
                    setTimeout(function () {
                        if (self._isWaiting == true) {
                            CommunicationManager.TriggerServer("OnClientRequestStartFishing");
                        }
                    }, Utility.GetRandomArbitrary(1000, 8000));
                    self._init = false;
                    CreateNotify("~g~Angel wird ausgeworfen!")
                } else {
                    CreateNotify("~r~Das Wasser an dieser Stelle ist nicht tief genug!");
                    self.reset();
                }
            }
        }
        if (self._isWaiting == true) {
            mp.game.controls.disableAllControlActions(2);
            if (mp.game.controls.isDisabledControlJustPressed(2, 22)) {
                self.reset();
                CreateNotify("~r~Es hat noch nichts angebissen! Habe etwas mehr Geduld.");
                return;
            }
        }

        if (self.child) {
            if (mp.players.local.getIsTaskActive(6) == false) {
                self.reset();
                return;
            }
            var pos = self.child.getCoords(true);
            var rot = mp.players.local.getRotation(1);
            var ground = mp.game.gameplay.getGroundZFor3dCoord(pos.x, pos.y, pos.z, 0, false);
            var gPos = new mp.Vector3(pos.x, pos.y, (ground + 0.04));
            mp.game.graphics.drawLine(pos.x, pos.y, pos.z, gPos.x, gPos.y, gPos.z, 0, 0, 0, 150)
        }
    }

    beginCatch(level, item_id, item_amount) {
        var self = this;
        if (self._isWaiting == true) {
            self.render = true;
            self._catch = true;
            self._isWaiting = false;
            if (Webwindow["FishingRodGame"] == null) {
                WebwindowMeta["FishingRodGame"] = {
                    key: Utility.makeid(32)
                }
                Webwindow["FishingRodGame"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/minigames/fisher/fisher.html", false, false);
                Webwindow["FishingRodGame"].start("init", level, item_id, item_amount, WebwindowMeta["FishingRodGame"].key);
            } else {
                Webwindow["FishingRodGame"].call("init", level, item_id, item_amount, WebwindowMeta["FishingRodGame"].key);
            }
            mp.players.local.taskPlayAnim("amb@world_human_stand_fishing@idle_a", "idle_a", 8.0, 1, -1, (17 | 32), 0.5, true, true, true)
        }
    }
}

CommunicationManager.AddServerEvent("OnClientUseFishingRod", () => {
    CreateNotify("~g~Nutze 'E' um die Angel auszuwerfen!");
    mp.game.streaming.requestAnimDict("amb@world_human_stand_fishing@idle_a");
    FishingJob.begin();
})
CommunicationManager.AddServerEvent("OnClientBeginFishCatch", (level, item_id, item_amount) => {
    FishingJob.beginCatch(level, item_id, item_amount);
})
CommunicationManager.AddServerEvent("OnClientCancelFishingRod", () => {
    FishingJob.reset();
})

CommunicationManager.AddWebBrowserEvent("OnClientFinishedFishingRodGame", (key, f_status) => {
    if (key !== WebwindowMeta["FishingRodGame"].key) {
        if (isPlayerOnBetaServer) {
            VioRageManager.SendChatMessage(`[AntiCheat] detect ClientManipulation in FishingRodGame called with FakeKey`);
            VioRageManager.ConsoleLog("info", `[AntiCheat] detect ClientManipulation in FishingRodGame called with FakeKey`);
        }
        CommunicationManager.TriggerServer("CEFAntiCheat", `FishingRodGame_FakeKey`);
    }

    resetAntiAFKState();

    Webwindow["FishingRodGame"].destroy();
    Webwindow["FishingRodGame"] = null;

    mp.players.local.taskPlayAnim("amb@world_human_stand_fishing@base", "base", 8.0, 1, -1, (17 | 32), 0.5, true, true, true);
    FishingJob.begin();

    if (f_status == true) {
        CommunicationManager.TriggerServer("OnClientRequestFishFinish")
    }
}, "FishingRodGame");

CommunicationManager.AddWebBrowserEvent("OnClientFishingRodGameUpdate", (f_status) => {
    mp.players.local.taskPlayAnim("amb@world_human_stand_fishing@idle_a", "idle_" + f_status, 8.0, 1, -1, (17 | 32), 0.5, true, true, true)
}, "FishingRodGame");

var FishNets = new class {
    constructor() {
        this._setup();
    }

    _setup() {
        var self = this;
        self._player = mp.players.local;
        self._fishnets = [];
        self.render = false;
        self.loaded = false;
        mp.events.add("render", () => {
            if (self.render) self.update();
        })
    }

    loadNets(nets) {
        var self = this;
        nets = JSON.parse(nets);
        for (var i in nets) {
            self.loadNet(nets[i])
        }
        self.loaded = true;
    }

    update() {
        if (mp.players.local.vehicle) {
            var self = this;
            let closest = null;
            let localpos = mp.players.local.position;
            let lastpos = 150;
            Object.keys(self._fishnets).forEach(function (key) {
                let net = self._fishnets[key];
                if (net.Position != null) {
                    let dist = mp.game.system.vdist2(localpos.x, localpos.y, localpos.z, net.Position.x, net.Position.y, net.Position.z);
                    if (lastpos > dist) {
                        closest = key;
                        lastpos = dist;
                    }
                }
            })
            if (closest != null) {
                let net = self._fishnets[closest];
                if (net.Position != null) {
                    let water_height = mp.game.water.getWaterHeight(net.Position.x, net.Position.y, net.Position.z, 0);
                    mp.game.graphics.setDrawOrigin(net.Position.x, net.Position.y, water_height + 1, 0);
                    mp.game.graphics.drawText("Fischnetz", [0, 0], {
                        font: 0,
                        color: [255, 255, 255, 255],
                        scale: [0.3, 0.3],
                        outline: true
                    });
                    mp.game.graphics.drawText("Ausgelastet " + (net.amount > 100 ? 100 : net.amount) + "%", [0, 0.025], {
                        font: 0,
                        color: [255, 255, 255, 255],
                        scale: [0.3, 0.3],
                        outline: true
                    });
                    mp.game.graphics.drawText("Beschädigung " + (net.damage > 100 ? 100 : net.damage) + "%", [0, 0.05], {
                        font: 0,
                        color: [255, 255, 255, 255],
                        scale: [0.3, 0.3],
                        outline: true
                    });
                    mp.game.graphics.clearDrawOrigin()
                }
            }
        }
    }

    isLoaded() {
        return Object.keys(this._fishnets).length > 0;
    }

    getNearestNet() {
        var self = this;
        let closest = null;
        let localpos = mp.players.local.position;
        let lastpos = 150;
        Object.keys(self._fishnets).forEach(function (key) {
            let net = self._fishnets[key];
            if (net.Position != null) {
                let dist = mp.game.system.vdist2(localpos.x, localpos.y, localpos.z, net.Position.x, net.Position.y, net.Position.z);
                if (lastpos > dist) {
                    closest = key;
                    lastpos = dist;
                }
            }
        })
        if (closest !== null) {
            return self._fishnets[closest];
        }
        return null;
    }

    unloadNets() {
        var self = this;
        FishNets.render = false;
        Object.keys(self._fishnets).forEach(function (key) {
            if (self._fishnets[key]) {
                if (self._fishnets[key].fishground_blip) {
                    self._fishnets[key].fishground_blip.destroy();
                }
                if (self._fishnets[key].fishground) {
                    self._fishnets[key].fishground.destroy();
                }
                if (self._fishnets[key].fish_net) {
                    self._fishnets[key].fish_net.destroy();
                }
                if (self._fishnets[key].buoy) {
                    self._fishnets[key].buoy.destroy();
                }
            }
        })
        self._fishnets = [];
        self.loaded = false;
    }

    loadNet(net) {
        var self = this;
        if (self._fishnets[net.ID]) {
            if (self._fishnets[net.ID].fishground_blip) {
                self._fishnets[net.ID].fishground_blip.destroy();
            }
            if (self._fishnets[net.ID].fishground) {
                self._fishnets[net.ID].fishground.destroy();
            }
            if (self._fishnets[net.ID].fish_net) {
                self._fishnets[net.ID].fish_net.destroy();
            }
            if (self._fishnets[net.ID].buoy) {
                self._fishnets[net.ID].buoy.destroy();
            }
        }
        let water_height_ground = mp.game.water.getWaterHeight(net.GlobalPosition.x, net.GlobalPosition.y, net.GlobalPosition.z, 0);
        self._fishnets[net.ID] = {
            fishground_blip: mp.blips.new(68, new mp.Vector3(net.GlobalPosition.x, net.GlobalPosition.y, net.GlobalPosition.z), {
                name: 'Fischgrund',
                color: 42,
                shortRange: true,
                scale: 1,
                alpha: 150,
                drawDistance: 500
            }),
            fishground: mp.objects.new(mp.game.joaat('prop_dock_bouy_2'), new mp.Vector3(net.GlobalPosition.x, net.GlobalPosition.y, water_height_ground), new mp.Vector3()),
            fish_net: null,
            buoy: null,
            damage: net.Damage,
            amount: net.Amount,
            ID: net.ID,
            Position: net.Position
        }
        if (net.Position.x != 0 && net.Position.y != 0) {
            let water_height = mp.game.water.getWaterHeight(net.Position.x, net.Position.y, net.Position.z, 0);
            self._fishnets[net.ID].fish_net = mp.blips.new(515, new mp.Vector3(net.Position.x, net.Position.y, net.Position.z), {
                name: 'Fischnetz',
                color: 38,
                shortRange: true,
                scale: 1,
                alpha: 150,
                drawDistance: 30,
            })
            self._fishnets[net.ID].buoy = mp.objects.new(mp.game.joaat('prop_dock_float_1'), new mp.Vector3(net.Position.x, net.Position.y, water_height), new mp.Vector3());
            if (mp.players.local.vehicle) {
                mp.players.local.vehicle.setNoCollision(self._fishnets[net.ID].buoy.handle, false);
            }
        }
    }
}
CommunicationManager.AddServerEvent("CreatePlayerLocalFishNets", (nets) => {
    if (FishNets.isLoaded()) {
        FishNets.unloadNets()
    }
    FishNets.loadNets(nets)
    FishNets.render = true;
})
mp.events.add("playerLeaveVehicle", (veh, seat) => {
    if (FishNets.isLoaded()) {
        FishNets.unloadNets()
    }
});
CommunicationManager.AddServerEvent("DestroyPlayerLocalFishNets", () => {
    if (FishNets.isLoaded()) {
        FishNets.unloadNets()
    }
});

CommunicationManager.AddServerEvent("SetPlayerCasinoStatus", (newstatus, wid) => {
    if (newstatus == 0) {
        disableJumpFight = false;
        let date = new Date();
        mp.game.time.setClockTime(date.getHours(), date.getMinutes(), date.getSeconds());
        SetWorldWeather();
    } else {
        disableJumpFight = true;
    }
});

var disabled_items = {
    0: true,
    1: true,
    9: true,
    11: true,
    37: true,
    38: true,
    39: true,
};
var readLines = 0;
var totalAmount = 0;
var MPClass = class {
    constructor(max_slots, type) {
        this._setup(max_slots, type);
    }

    _setup(max_slots, type) {
        var self = this;
        self.init(max_slots, type);
    }

    init(max_slots, type) {
        var self = this;
        self._slots = max_slots;
        self._type = type;
        self.window = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/" + self._type + "/index.html", true);
        self.window.call("showAll");
        self.window.call("setMaxSlots", self._slots);
        self.window.call("setPlayerNameForItems", mp.players.local.name);
    }

    loadInventory(inventory) {
        if (this.window != null) {
            this.window.call("loadInventory", inventory);
        }
    }

    close() {
        if (this.window != null) {
            this.window.destroy();
            this.window = null;
        }
    }
};

CommunicationManager.AddWebBrowserEvent('initMarketplace', () => {
    if (Marketplace != null) {
        if (Marketplace._type == "marketplace") {
            CommunicationManager.TriggerServer("OnClientRequestMarketplaceLoadListings", 1);
            if (Marketplace.window != null) {
                Marketplace.window.call("setPlayerNameForItems", mp.players.local.name);
            }
        }
    }
});
CommunicationManager.AddWebBrowserEvent('requestBuyItem', (offerid, amount) => {
    if (Marketplace == null) {
        return;
    }
    
    if(Marketplace.window != null){
        if (Marketplace.window.isAtStartPosition == true) {
            if (Marketplace._type == "groupshop") {
                readLines = 0;
                Marketplace.close();
                Marketplace = null;
                CommunicationManager.TriggerServer("updateGroup", "buyShopItem", offerid, amount, 0);
            } else {
                CommunicationManager.TriggerServer("OnClientRequestMarketplaceBuyItem", offerid, amount);
            }
        }
    }
});
CommunicationManager.AddWebBrowserEvent('requestRemoveItem', (offerid) => {
    if (Marketplace == null) {
        return;
    }
    if(Marketplace.window != null){
        if (Marketplace.window.isAtStartPosition == true) {
            CommunicationManager.TriggerServer("updateGroup", "removeShopItem", offerid, 0, 0);
        }
    }
    readLines = 0;
    Marketplace.close();
    Marketplace = null;
});
CommunicationManager.AddWebBrowserEvent('requestSellItem', (name, item_id, amount, pays) => {
    if (Marketplace == null) {
        return;
    }
    if(Marketplace.window != null){
        if (Marketplace.window.isAtStartPosition == true) {
            if (Marketplace._type == "groupshop") {
                CommunicationManager.TriggerServer("updateGroup", "addShopItem", item_id, pays, 0)
                readLines = 0;
                Marketplace.close();
                Marketplace = null;
            } else {
                CommunicationManager.TriggerServer("OnClientRequestMarketplaceSellItem", item_id, amount, pays); // int id,  int  stock,  int price
            }
        }
    }
});
CommunicationManager.AddServerEvent('onMarketplaceUpdate', (type, amount, id, pInventory) => {

    if (pInventory != null) {
        InventoryItems = JSON.parse(pInventory);
    }
    
    let chat_string = "";
    let name = "";
    if (amount > 0) {
        for (var key in lang_de.items) {
            if (Number(key.replace("item.", "")) == id) {
                name = lang_de.items[key];
            }
        }
    }
    if (type == 0) {
        chat_string = "~r~So viel haben wir derzeit nicht auf Lager"
    } else if (type == 1) {
        chat_string = "~g~Du hast " + amount + "x " + name + " gekauft"
    } else if (type == 2) {
        chat_string = "~g~Es wurde " + amount + "x " + name + " von dir gekauft"
    } else if (type == 3) {
        chat_string = "~r~Du hast nicht genug Geld auf der Hand"
    } else if (type == 4) {
        chat_string = "~g~Du hast " + amount + "x " + name + " zum Verkauf angeboten"
    } else if (type == 5) {
        chat_string = "~r~Verkaufswert zu groß"
    } else if (type == 6) {
        chat_string = "~r~Wähle ein Item aus"
    } else if (type == 7) {
        chat_string = "~r~Alle Angebot-Slots belegt"
    } else if (type == 8) {
        chat_string = "~r~Verkaufswert zu klein"
    }
    CreateNotify(chat_string);
})
CommunicationManager.AddWebBrowserEvent('requestListings', () => {
    if (Marketplace == null) CommunicationManager.TriggerServer("CEFAntiCheat", "Marketplace_requestListings");
    
    if (Marketplace.window.isAtStartPosition == true) {
        CommunicationManager.TriggerServer("OnClientRequestMarketplaceLoadListings");
    }
});

CommunicationManager.AddWebBrowserEvent('requestLoadInventory', () => {
    if (Marketplace == null) CommunicationManager.TriggerServer("CEFAntiCheat", "Marketplace_requestLoadInventory");
    var mapped_data = [];
    for (var i = 0; i <= Object.keys(InventoryItems).length; i++) {
        if ((!disabled_items[i]) && (InventoryItems[i] > 0)) {
            let item = {
                id: i,
                name: "",
                amount: InventoryItems[i],
                legal: 0,
                type: "items"
            }
            for (var key in lang_de.items) {
                if (Number(key.replace("legal.", "")) == i) {
                    item.legal = lang_de.items[key];
                }
                if (Number(key.replace("item.", "")) == i) {
                    item.name = lang_de.items[key];
                }
            }
            mapped_data.push(item);
        }
    }
    if (Marketplace.window != null) {
        Marketplace.window.call("loadInventory", JSON.stringify(mapped_data));
    }
});

CommunicationManager.AddWebBrowserEvent('requestLoadItems', () => {
    if (Marketplace == null) CommunicationManager.TriggerServer("CEFAntiCheat", "Marketplace_requestLoadItems");
    var mapped_data = [];
    for (var i = 0; i < Object.keys(InventoryItems).length; i++) {
        if ((!disabled_items[i])) {
            let item = {
                id: i,
                name: "",
                amount: 1,
                legal: 0,
                type: "items"
            }
            for (var key in lang_de.items) {
                if (Number(key.replace("legal.", "")) == i) {
                    item.legal = lang_de.items[key];
                }
                if (Number(key.replace("item.", "")) == i) {
                    item.name = lang_de.items[key];
                }
            }
            mapped_data.push(item);
        }
    }
    if (Marketplace.window != null) {
        Marketplace.window.call("loadInventory", JSON.stringify(mapped_data));
    }
});

CommunicationManager.AddWebBrowserEvent('requstCloseMarketplace', () => {
    if (Marketplace != null) {
        readLines = 0;
        Marketplace.close();
        Marketplace = null;
    }
});
CommunicationManager.AddServerEvent("OnClientMarketplaceOpen", (max_slots, pInventory) => {
    if (Marketplace == null) {
        if (mp.gui.cursor.visible) {
            return;
        }
        InventoryItems = JSON.parse(pInventory);
        Marketplace = new MPClass(max_slots, "marketplace");
        isMarketPlaceOpened = true;
    }
});

CommunicationManager.AddServerEvent("OnClientGroupShopOpen", (listings, playerrank, max_slots, pInventory) => {
    if (Marketplace == null) {
        InventoryItems = JSON.parse(pInventory);
        Marketplace = new MPClass(max_slots, "groupshop");
        isMarketPlaceOpened = true;

        let JSON_DATA = JSON.parse(listings)
        let json_array = [];
        readLines = 0;

        for (var key in JSON_DATA) {
            json_array.push(JSON_DATA[key]);
        }
        json_array = json_array.map(function (i, index) {
            for (var key in lang_de.items) {
                if (Number(key.replace("legal.", "")) == i.ItemID) {
                    i.legal = lang_de.items[key];
                }
                if (Number(key.replace("item.", "")) == i.ItemID) {
                    i.ItemName = lang_de.items[key];
                }
            }
            i.Type = "items";
            return i;
        })
        readLines += json_array.length;

        if (Marketplace.window != null) {
            Marketplace.window.start("loadListings", JSON.stringify(json_array), playerrank)
        }
    }
});

CommunicationManager.AddServerEvent("OnClientMarketplaceLoadListings", function (listings, totalamount, status) {
    if (Marketplace != null) {
        totalAmount = totalamount;
        let JSON_DATA = JSON.parse(listings)
        let json_array = [];
        if (status == 1) {
            readLines = 0;
        }

        for (var key in JSON_DATA) {
            json_array.push(JSON_DATA[key]);
        }
        json_array = json_array.map(function (i, index) {
            for (var key in lang_de.items) {
                if (Number(key.replace("legal.", "")) == i.ItemID) {
                    i.legal = lang_de.items[key];
                }
                if (Number(key.replace("item.", "")) == i.ItemID) {
                    i.ItemName = lang_de.items[key];
                }
            }
            i.Type = "items";
            return i;
        })
        readLines += json_array.length;

        if (Marketplace != undefined) {
            if (Marketplace.window != null) {
                Marketplace.window.call("loadListings", JSON.stringify(json_array), totalamount, status)
                if (status == 1) {
                    Marketplace.window.call("showAll")
                }
            }
        }
    }
});

CommunicationManager.AddWebBrowserEvent("requestMoreItemsMarketplace", () => {
    if (Marketplace == null) CommunicationManager.TriggerServer("CEFAntiCheat", "Marketplace_requestMoreItemsMarketplace");
    if (!(totalAmount == readLines)) CommunicationManager.TriggerServer("OnClientRequestMarketplaceLoadNextListings", readLines)
})

var temp_marker = false;
var temp_blip = false;

CommunicationManager.AddServerEvent("JobbrowerInit", (arg1, arg3) => {
    if (Webwindow["JobBrowser"] == null) {
        if (mp.gui.cursor.visible) {
            return;
        }
        Webwindow["JobBrowser"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/jobbrowser/jobbrowser.html", true);
        Webwindow["JobBrowser"].start("jobbrowser:init", arg1, lang_de.window_jobbrowser, arg3);
    }
});

CommunicationManager.AddServerEvent("updateClientTaxometer", (arg1, arg2, arg3) => {
    if (Webwindow["TaxiWindow"] != null) {
        Webwindow["TaxiWindow"].call("taxi:init", Number(arg1));
    } else {
        Webwindow["TaxiWindow"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/taxi/taxi.html", false, false);
        Webwindow["TaxiWindow"].start('taxi:init', Number(arg1));
    }
});

CommunicationManager.AddServerEvent("destroyClientTaxometer", () => {
    if (Webwindow["TaxiWindow"] != null) {
        Webwindow["TaxiWindow"].destroy();
        Webwindow["TaxiWindow"] = null;
    }
});
CommunicationManager.AddWebBrowserEvent("requestJob", (job, jname, jlevel, jkey, jvalue) => {
    if (Webwindow["JobBrowser"] != null) {
        Webwindow["JobBrowser"].destroy();
        VioRageManager.ShowChat(true);
        mp.gui.cursor.show(false, false);
        mp.gui.cursor.visible = false;
        
        if (Webwindow["JobBrowser"].isAtStartPosition == true) {
            if (job == "Trucker") {
                CommunicationManager.TriggerServer("OnClientRequestStartTruckerJob", Number(jlevel));
            } else if (job == "Bus") {
                CommunicationManager.TriggerServer("OnClientRequestStartBusJob", Number(jlevel));
            } else if (job == "Trash") {
                CommunicationManager.TriggerServer("OnClientRequestStartTrashJob", Number(jlevel));
            } else if (job == "Taxi") {
                CommunicationManager.TriggerServer("OnClientRequestStartTaxiJob", Number(jlevel));
            }
        }
        
        Webwindow["JobBrowser"] = null;
    }
});

CommunicationManager.AddWebBrowserEvent("requestCloseJobBrowser", () => {
    if (Webwindow["JobBrowser"] != null) {
        Webwindow["JobBrowser"].destroy();
        VioRageManager.ShowChat(true);
        mp.gui.cursor.show(false, false);
        mp.gui.cursor.visible = false;
        Webwindow["JobBrowser"] = null;
    }
});

var player_lang = 0
var TempArguments = [];
var isPlayerOnBetaServer = false;
mainCam = null;

mp.game.ui.displayRadar(false);

var LoginPeds = [];

const AnimationLoopLogin = new CameraAnimationLoop()
    .addCameraAnimation(new CamAnimation("fluss", 3)
        .addMarker(new mp.Vector3(-256.09, 4414.94, 65), new mp.Vector3(0, 0, 90), 90)
        .addMarker(new mp.Vector3(-1069, 4383, 45), new mp.Vector3(0, 0, 100), 90)
        .addMarker(new mp.Vector3(-1345, 4332, 40), new mp.Vector3(0, 0, 85), 90)
        .addMarker(new mp.Vector3(-1486, 4305, 35), new mp.Vector3(0, 0, 50), 90)
        .addMarker(new mp.Vector3(-1814, 4587, 25), new mp.Vector3(0, 0, 41), 90)
        .addMarker(new mp.Vector3(-1919, 4735, 25), new mp.Vector3(0, 0, 41), 90)
    )
    .addCameraAnimation(new CamAnimation("mc", 3)
        .addMarker(new mp.Vector3(-739, 5594, 80), new mp.Vector3(0, 0, -89), 90)
        .addMarker(new mp.Vector3(397, 5571, 780), new mp.Vector3(0, 0, -90), 90)
    )
;

mp.events.add('playerReady', () => {

    AnimationLoopLogin.start();

    mp.game.invoke('0xF314CF4F0211894E', 143, 200, 70, 63, 150); // Replace Michael colour
    mp.game.invoke('0xF314CF4F0211894E', 116, 200, 70, 63, 150); // Replace freemode colour
    mp.game.gxt.set('PM_PAUSE_HDR', 'Vio-V');

});

/*
AnimationLoopLogin.addCameraAnimation(new CamAnimation("road", 120)
    .addMarker(new mp.Vector3(-2705, 2328, 20), new mp.Vector3(0,0,-9), 90)
    .addMarker(new mp.Vector3(-2608, 2954, 20), new mp.Vector3(0,0,-4), 90)
    .addMarker(new mp.Vector3(-2565, 3367, 15), new mp.Vector3(0,0,-15), 90)
    .addMarker(new mp.Vector3(-2488, 3586, 22), new mp.Vector3(0,0,-15), 90)
    .addMarker(new mp.Vector3(-2442, 3805, 30), new mp.Vector3(0,0,-30), 90)
    .addMarker(new mp.Vector3(-2303, 4171, 50), new mp.Vector3(0,0,-30), 90)
);
 */

mp.events.add('loginInit', (arg2, betaserver) => {
    if (login == false) {
        mp.console.clear();
        isPlayerOnBetaServer = betaserver;
        ToggleCayoPericoIsland(false);
        VioRageManager.ShowChat(false);
        VioRageManager.ActivateChat(false);
        mp.game.ui.displayRadar(false);
        mp.game.ui.setRadarBigmapEnabled(false, false);
        disableAllControls = true;

        if (Webwindow["Login"] == null) {
            Webwindow["Login"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/login/login.html", true);
            Webwindow["Login"].start('login:init', JSON.stringify(lang_de["window_login"]), arg2);
            player_lang = "german";
        }
    }
});

mp.events.add('OpenInformationForNewPlayer', () => {
    if (Webwindow["RegisterFYI"] == null) {
        Webwindow["RegisterFYI"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/new_user/new_user.html", true);
    }
});

mp.events.add('CloseInformationForNewPlayer', () => {
    if (Webwindow["RegisterFYI"] != null) {
        Webwindow["RegisterFYI"].destroy();
        Webwindow["RegisterFYI"] = null;
        mp.storage.data.drawQuests = "1";
        CommunicationManager.TriggerServer("requestPlayerQuest");
    }
});

CommunicationManager.AddServerEvent('SendClientMasterKey', (triggerkey) => {
    if (ServerTriggerKey == "") {
        ServerTriggerKey = triggerkey;
    }
});

CommunicationManager.AddServerEvent('OpenLoginWindow', (triggerkey) => {


    if (ServerTriggerKey == "") {
        ServerTriggerKey = triggerkey;
    }

    disableAllControls = true;

    mp.players.local.setMaxTimeUnderwater(30);

    //mp.game.ui.removeWaypoint();
    player_lang = "german";
    VioRageManager.ActivateChat(false);
    VioRageManager.ShowChat(false);
    mp.gui.cursor.show(true, true);
    mp.game.ui.displayHud(false);
    mp.game.ui.displayRadar(false);

    setTimeout(function () {
        CommunicationManager.TriggerServer("requestRegisterLogin", player_lang);
    }, 2500);
});

mp.events.add('killLogin', () => {
    mp.game.cam.doScreenFadeOut(10000);

    disableAllControls = false;
    player_lang = "german";
    if (Webwindow["Login"] != null) {
        Webwindow["Login"].destroy();
        Webwindow["Login"] = null;
    }
    mp.game.ui.displayHud(true);
    VioRageManager.ActivateChat(true);
});

mp.events.add('OnPlayerClosedUnbanWindow', () => {

    setTimeout(function () {
        mp.game.cam.doScreenFadeOut(10000);
    }, 300000);

    VioRageManager.ActivateChat(false);

    if (Webwindow["login_unban"] != null) {
        Webwindow["login_unban"].destroy();
        Webwindow["login_unban"] = null;
    }

    mp.game.ui.messages.showShard("~r~Entbannungsanfrage", "Du hast die Bearbeitung deiner Entbannungsanfrage abgebrochen", 1, 0, 900000);
});


mp.events.add('OnPlayerClosedUnbanWindow', () => {

    setTimeout(function () {
        mp.game.cam.doScreenFadeOut(10000);
    }, 300000);

    VioRageManager.ActivateChat(false);

    if (Webwindow["login_unban"] != null) {
        Webwindow["login_unban"].destroy();
        Webwindow["login_unban"] = null;
    }

    mp.game.ui.messages.showShard("~r~Entbannungsanfrage", "Du hast die Bearbeitung deiner Entbannungsanfrage abgebrochen", 1, 0, 900000);
});

mp.events.add('OnPlayerSendUnbanRequest', (banSitiation, banFuture, banTeaching, banWhyMe) => {

    setTimeout(function () {
        mp.game.cam.doScreenFadeOut(10000);
    }, 300000);

    if (Webwindow["login_unban"] != null) {
        Webwindow["login_unban"].destroy();
        Webwindow["login_unban"] = null;
    }
    VioRageManager.ActivateChat(false);

    if (banSitiation == "" || banFuture == "" || banTeaching == "" || banWhyMe == "") {
        mp.game.ui.messages.showShard("~r~Entbannungsanfrage", "Leider hast du eine unvollständige Entbannungsanfrage übermittelt. Bitte verbinde dich neu mit dem Server, um es erneut zu versuchen.", 1, 0, 900000);
        return;
    }

    CommunicationManager.TriggerServer("OnClientRequestUnBan", TempArguments["UNBAN"]["Name"], TempArguments["UNBAN"]["Reason"], TempArguments["UNBAN"]["BanTime"], banSitiation, banFuture, banTeaching, banWhyMe);

    mp.game.ui.messages.showShard("~g~Entbannungsanfrage", "Du hast deine Entbannungsanfrage abgesendet. Den Status deiner Anfrage kannst du auf bans.vio-v.com prüfen.", 1, 0, 900000);
});


mp.events.add('openUnBanWindow', (arg0, arg1, arg2) => {

    if (Webwindow["Login"] != null) {
        Webwindow["Login"].destroy();
        Webwindow["Login"] = null;
        disableAllControls = true;
        player_lang = "german";
    }

    TempArguments["UNBAN"] = {};
    TempArguments["UNBAN"]["Name"] = arg0;
    TempArguments["UNBAN"]["Reason"] = arg1;
    TempArguments["UNBAN"]["BanTime"] = arg2;


    mp.game.ui.displayHud(false);
    VioRageManager.ActivateChat(false);

    if (Webwindow["login_unban"] != null) {
        Webwindow["login_unban"].destroy();
        Webwindow["login_unban"] = null;
    }

    Webwindow["login_unban"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/unban/unban.html", true);
    Webwindow["login_unban"].start('initUnbanWindow', arg0, arg1, arg2);
});

CommunicationManager.AddWebBrowserEvent("OnClientFinishRegistrationQuestTestResults", (answers) => {
    if (Webwindow["login_questions"] != null) {
        Webwindow["login_questions"].destroy();
        Webwindow["login_questions"] = null;
    }

    CommunicationManager.TriggerServer("OnClientRequestRegistrationTestResults", answers);
});

CommunicationManager.AddServerEvent("OpenRegistrationQuestionsForPlayer", (question_data) => {

    VioRageManager.ConsoleLog("warning", `OpenRegistrationQuestionsForPlayer: ${question_data}`);

    if (Webwindow["Login"] != null) {
        Webwindow["Login"].destroy();
        Webwindow["Login"] = null;
        disableAllControls = true;
        player_lang = "german";
    }

    mp.game.ui.displayHud(false);
    VioRageManager.ActivateChat(false);

    if (Webwindow["login_questions"] != null) {
        Webwindow["login_questions"].destroy();
        Webwindow["login_questions"] = null;
    }

    Webwindow["login_questions"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/register_questions/register_questions.html", true);
    Webwindow["login_questions"].start('register:initExam', JSON.parse(question_data), mp.players.local.name);
});

CommunicationManager.AddServerEvent("loginUpdate", (arg0, arg1, arg2) => {
    if (arg1) {
        if (arg2) {
            Webwindow["Login"].call("login:showSurvey");
            mp.players.local.setMaxHealth(200);

            login = true;
            player_lang = "german";

            moveSkyCamera(mp.players.local, 'up', 1, false);

            setTimeout(() => {
                AnimationLoopLogin.stop();

                LoginPeds.forEach(function (temp_ped, index) {
                    if (temp_ped) {
                        temp_ped.destroy();
                    }
                });
                LoginPeds = [];


                mp.game.ui.displayHud(true);
                mp.game.ui.setMinimapVisible(false);
            }, 1000);
            return;
        } else {
            disableAllControls = false;
            player_lang = "german";
            if (Webwindow["Login"] != null) {
                Webwindow["Login"].destroy();
                Webwindow["Login"] = null;
            }
            mp.game.ui.displayHud(true);

            LoginPeds.forEach(function (temp_ped, index) {
                if (temp_ped) {
                    temp_ped.destroy();
                }
            });
            LoginPeds = [];


            VioRageManager.ShowChat(true);
            if (mp.storage.data.streamerMode == "1") {
                if (BridgeWindow) {
                    BridgeWindow.call("OnClientRequestLauncherAction", "streamerModeActivate");
                }
            }
            return;
        }
    }
    if (Webwindow["Login"]) {
        Webwindow["Login"].call("login:update", arg0);
        mp.gui.cursor.visible = true;
    }
});
var voiceChat;
let tmpB;

mp.events.add('setLoginDestroyed', () => {

    mp.players.local.setMaxHealth(200);

    if (Webwindow["Login"] != null) {
        Webwindow["Login"].destroy();
        Webwindow["Login"] = null;
    }

    login = true;
    disableAllControls = false;
    player_lang = "german";

    mp.game.gxt.set('PM_PAUSE_HDR', 'Vio-V');

    mp.discord.update('www.vio-v.com', mp.players.local.name);

    //AnimationLoopLogin.stop();
    moveSkyCamera(mp.players.local, 'up', 1, false);

    setTimeout(() => {
        LoginPeds.forEach(function (temp_ped, index) {
            if (temp_ped) {
                temp_ped.destroy();
            }
        });
        LoginPeds = [];

        mp.game.ui.displayHud(true);
        mp.game.ui.setMinimapVisible(false);
    }, 1000);

    setTimeout(() => {
        AnimationLoopLogin.stop();
    }, 5000);

    setTimeout(() => {
        moveSkyCamera(mp.players.local, 'down', 1, false);
    }, 8000);

    mp.gui.cursor.visible = false;
});

mp.events.add("playerAccessToken", (token) => {
    accessToken = token;
    login = true;
})

mp.events.add('LoadPlayerScreenResolution', (screenResX, screenResY) => {
    if (Number(screenResX) <= 800 || Number(screenResY) <= 600) {
        mp.game.ui.messages.showShard("~r~Geringe Auflösung!", "Es wird eine Auflösung von mindestens 1280 × 720 empfohlen", 1, 0, 1000 * 20);
    }
});

mp.events.add('requestRegister', (username, password, email) => {
    CommunicationManager.TriggerServer("requestRegistration", username, password, email);
});

mp.events.add('requestLogin', (username, password) => {
    CommunicationManager.TriggerServer("requestLogin", username, password, "y");
});
CommunicationManager.AddWebBrowserEvent('requestAutoLogin', (username, password, token) => {
    CommunicationManager.TriggerServer("requestLogin", username, password, token);
});

mp.events.add('registerSurveyResult', (json_obj) => {
    if (Webwindow["Login"] != null) {
        let tmp = JSON.parse(json_obj);
        //moveSkyCamera(mp.players.local, 'down', 1, false);
        Webwindow["Login"].destroy();
        Webwindow["Login"] = null;
        CommunicationManager.TriggerServer("registerSurveyResult", tmp["selector1"], tmp["selector2"]);
    }
});

mp.events.add("pw_forget", () => {
    if (Webwindow["pw_forget"] != null) {
        Webwindow["pw_forget"].destroy();
        Webwindow["pw_forget"] = null;
    } else {
        Webwindow["pw_forget"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/login/pwforget.html?name=" + mp.players.local.name, true);
    }
});

mp.events.add("pw_forget_close", () => {
    if (Webwindow["pw_forget"] != null) {
        Webwindow["pw_forget"].destroy();
        Webwindow["pw_forget"] = null;
        mp.gui.cursor.visible = true;
    }
});

mp.events.add('render', () => {
    if (Webwindow["Login"] != null) {
        mp.gui.cursor.visible = true;
        VioRageManager.ShowChat(false);
        VioRageManager.ActivateChat(false);
    }
    if (Webwindow["Login"] != null || Webwindow["RegisterFYI"] != null || Webwindow["login_questions"] != null || login == false) {
        mp.players.local.setInvincible(true);
        mp.players.local.setCanBeDamaged(false);
        mp.players.local.setProofs(true, true, true, true, true, true, true, true);
    }
});


const Data = require("charcreator/data");

const localPlayer = mp.players.local;

var characterData = {
    "Gender": 0,
    "Father": 0,
    "Mother": 0,
    "Similarity": 0,
    "SkinSimilarity": 0,
    "featureData": [],
    "appereanceData": [],
    "appereanceOpacityData": [],
    "hairAndColors": []
};

Webwindow["CharacterCreator"] = null;
var CharacterCreatorCamera = null;

function CloseCharactorCreator() {
    if (CharacterCreatorCamera != null) {
        CharacterCreatorCamera.setActive(false);
        CharacterCreatorCamera.destroy();
        CharacterCreatorCamera = null;
    }

    mp.game.cam.renderScriptCams(false, false, 0, true, false);

    if (Webwindow["CharacterCreator"] !== null) {
        Webwindow["CharacterCreator"].destroy();
        Webwindow["CharacterCreator"] = null;
    }

    mp.game.ui.displayHud(true);
    // localPlayer.freezePosition(false);
    VioRageManager.FreezePosition(localPlayer, false);
    mp.game.ui.displayRadar(true);
    ToogleHudStatus(true, true);
    VioRageManager.ShowChat(true);
    mp.game.ui.setPauseMenuActive(true);

    setTimeout(() => {
        if (mp.storage.data.drawQuests == "1") {
            CommunicationManager.TriggerServer("requestPlayerQuest");
        }
    }, 3000);
}

function colorForOverlayIdx(index) {
    let color;

    switch (index) {
        case 1:
            color = characterData.hairAndColors[4];
            break;

        case 2:
            color = characterData.hairAndColors[3];
            break;

        case 5:
            color = characterData.hairAndColors[6];
            break;

        case 8:
            color = characterData.hairAndColors[7];
            break;

        case 10:
            color = characterData.hairAndColors[8];
            break;

        default:
            color = 0;
    }

    return color;
}

function updateParents() {
    localPlayer.setHeadBlendData(
        // shape
        Data.mothers[characterData.Mother],
        Data.fathers[characterData.Father],
        0,

        // skin
        Data.mothers[characterData.Mother],
        Data.fathers[characterData.Father],
        0,

        // mixes
        characterData.Similarity * 0.01,
        characterData.SkinSimilarity * 0.01,
        0.0,

        false
    );
}

function updateFaceFeature(index) {
    localPlayer.setFaceFeature(index, parseFloat(characterData.featureData[index]) * 0.01);
}

function updateAppearance(index) {
    let overlayID = (characterData.appereanceData[index] == 0) ? 255 : characterData.appereanceData[index] - 1;
    localPlayer.setHeadOverlay(index, overlayID, characterData.appereanceOpacityData[index] * 0.01, colorForOverlayIdx(index), 0);
}

function updateHairAndColors() {
    localPlayer.setComponentVariation(2, Data.hairList[characterData.Gender][characterData.hairAndColors[0]].ID, 0, 2);
    localPlayer.setHairColor(characterData.hairAndColors[1], characterData.hairAndColors[2]);
    localPlayer.setEyeColor(characterData.hairAndColors[5]);
    localPlayer.setHeadOverlayColor(1, 1, characterData.hairAndColors[4], 0);
    localPlayer.setHeadOverlayColor(2, 1, characterData.hairAndColors[3], 0);
    localPlayer.setHeadOverlayColor(5, 2, characterData.hairAndColors[6], 0);
    localPlayer.setHeadOverlayColor(8, 2, characterData.hairAndColors[7], 0);
    localPlayer.setHeadOverlayColor(10, 1, characterData.hairAndColors[8], 0);
}

function applyCreatorOutfit() {
    if (characterData.Gender == 0) {
        localPlayer.setDefaultComponentVariation();
        localPlayer.setComponentVariation(3, 15, 0, 2);
        localPlayer.setComponentVariation(4, 21, 0, 2);
        localPlayer.setComponentVariation(6, 34, 0, 2);
        localPlayer.setComponentVariation(8, 15, 0, 2);
        localPlayer.setComponentVariation(11, 15, 0, 2);
    } else {
        localPlayer.setDefaultComponentVariation();
        localPlayer.setComponentVariation(3, 15, 0, 2);
        localPlayer.setComponentVariation(4, 10, 0, 2);
        localPlayer.setComponentVariation(6, 35, 0, 2);
        localPlayer.setComponentVariation(8, 15, 0, 2);
        localPlayer.setComponentVariation(11, 15, 0, 2);
    }
}

function updateWholeCharacter() { // Wendet aktuelle Informationen in characterData an
    updateParents();
    for (let i = 0; i < Data.featureNames.length; i++) {
        updateFaceFeature(i);
    }
    for (let i = 0; i < Data.appearanceNames.length; i++) {
        updateAppearance(i);
    }
    updateHairAndColors();
}

let creatorMenus = [];

// Parameter werden im Browser aufgebaut und hier nur durchgeschliffen zum Server!
mp.events.add("CharCreator:SaveCreator", (pGender, pFather, pMother, pSimilarity, pSkinSimilarity, pFeatureData, pAppereanceData, pHairAndColors) => {

    if (Webwindow["CharacterCreator"] !== null) {
        Webwindow["CharacterCreator"].destroy();
        Webwindow["CharacterCreator"] = null;

        var tHairAndColors = JSON.parse(pHairAndColors)
        tHairAndColors[0] = Data.hairList[pGender][tHairAndColors[0]].ID

        CommunicationManager.TriggerServer("SaveCharacter", pGender,
            pFather,
            pMother,
            pSimilarity,
            pSkinSimilarity,
            pFeatureData,
            pAppereanceData,
            JSON.stringify(tHairAndColors));
        setTimeout(() => {
            CloseCharactorCreator();
            CommunicationManager.TriggerServer("LeaveCreator");
        }, 200);
    }
});

mp.events.add("CharCreator:LeaveCreator", () => {
    CloseCharactorCreator();
    CommunicationManager.TriggerServer("LeaveCreator");
});

mp.events.add("CharCreator:UpdateCharacter", (pCharData) => {
    characterData = JSON.parse(pCharData);
    updateWholeCharacter();
});

mp.events.add("CharCreator:ChangeGender", (pCharData) => {
    characterData = JSON.parse(pCharData);
    updateWholeCharacter();

    CommunicationManager.TriggerServer("SetGender", characterData.Gender);

    setTimeout(() => {
        localPlayer.clearTasksImmediately();

        // Reset Angle
        localPlayer.setHeading(parseFloat(180));
        localPlayer.clearTasksImmediately();

        applyCreatorOutfit();

        // Triger Reset Browser Window
        if (Webwindow["CharacterCreator"] !== null) {
            Webwindow["CharacterCreator"].call("resetMenu", true);
        }
    }, 200);
});

mp.events.add("CharCreator:ChangeRotation", (pAngel) => {
    localPlayer.setHeading(parseFloat(pAngel));
    localPlayer.clearTasksImmediately();
});

mp.events.add('render', () => {
    if (CharacterCreatorCamera != null) {
        mp.game.invoke('0xF4F2C0D4EE209E20'); // INVALIDATE_IDLE_CAM()
        CharacterCreatorCamera.pointAtCoord(402.8664, -996.4108, -98.5);
        CharacterCreatorCamera.setActive(true);
        mp.game.cam.renderScriptCams(true, false, 0, true, false);
        mp.game.controls.disableControlAction(2, 266, true);
        mp.game.controls.disableControlAction(2, 267, true);
        mp.game.controls.disableControlAction(2, 268, true);
        mp.game.controls.disableControlAction(2, 269, true);
        mp.game.controls.disableControlAction(2, 36, true);


        mp.game.ui.setPauseMenuActive(false);
        VioRageManager.ShowChat(false);

        ToogleHudStatus(false, false);
        mp.game.ui.displayHud(false);
        mp.game.ui.displayRadar(false);
    }
});

var AddCancelItem = false;
mp.events.add("CreatorCamera", (force, pCharacteDataFromServer) => {
    if (CharacterCreatorCamera == null) {

        if (force == true) {
            moveSkyCamera(mp.players.local, 'down', 1, false);
        }

        mp.game.cam.renderScriptCams(true, false, 0, true, false);
        CharacterCreatorCamera = mp.cameras.new("creatorCamera", new mp.Vector3(402.8664, -997.5515, -98.5), new mp.Vector3(0, 0, 0), 45);
        CharacterCreatorCamera.pointAtCoord(402.8664, -996.4108, -98.5);
        CharacterCreatorCamera.setActive(true);

        //creatorMainMenu.Visible = true;
        VioRageManager.ShowChat(false);

        ToogleHudStatus(false, false);
        mp.game.ui.displayHud(false);
        mp.game.ui.displayRadar(false);

        localPlayer.clearTasksImmediately();
        // localPlayer.freezePosition(true);
        VioRageManager.FreezePosition(localPlayer, true);
        mp.game.cam.renderScriptCams(true, false, 0, true, false);

        //disableAllControls = true;

        if (AddCancelItem == false) {
            if (force == false) {
                AddCancelItem = true;
            }
        }

        var appereanceItemNames = {};
        for (let i = 0; i < Data.appearanceNames.length; i++) {
            let items = [];

            for (let j = 0, max = mp.game.ped.getNumHeadOverlayValues(i); j <= max; j++) {
                if ((i == 4 && j >= 17) || (i == 5 && j >= 4)) {
                    // Item ist blockiert!
                } else {
                    items.push((Data.appearanceItemNames[i][j] === undefined) ? j.toString() : Data.appearanceItemNames[i][j]);
                }
            }

            appereanceItemNames[i] = items;
            // Oppacity = Range 0 - 100 -> Slider? Zu jedem Item ein passendes Opacity im Browser erstellt!
        }

        localPlayer.clearTasksImmediately();
        localPlayer.setHeading(parseFloat(180));
        localPlayer.clearTasksImmediately();
        applyCreatorOutfit();

        if (Webwindow["CharacterCreator"] === null) {
            Webwindow["CharacterCreator"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/character_creator/character_creator.html", true, false);
            Webwindow["CharacterCreator"].start("initialize", AddCancelItem, Data, appereanceItemNames);
        }

        var charDataFromServer = JSON.parse(pCharacteDataFromServer);
        if (Object.keys(charDataFromServer).length != 0) {
            UpdateCreator(charDataFromServer);
            Webwindow["CharacterCreator"].call("updateCharacter", characterData);
        }

    }
})

function UpdateCreator(pCharacteDataFromServer) {
    var charData = pCharacteDataFromServer;

    // Prepare Structure for CEF
    characterData = {
        "Gender": 0,
        "Father": 0,
        "Mother": 0,
        "Similarity": 0,
        "SkinSimilarity": 0,
        "featureData": [],
        "appereanceData": [],
        "appereanceOpacityData": [],
        "hairAndColors": []
    };

    // gender
    characterData.Gender = charData.Gender;
    // parents
    characterData.Father = Data.fathers.indexOf(charData.Parents.Father);
    characterData.Mother = Data.mothers.indexOf(charData.Parents.Mother);
    characterData.Similarity = parseFloat(charData.Parents.Similarity * 100);
    characterData.SkinSimilarity = parseFloat(charData.Parents.SkinSimilarity * 100);
    updateParents();

    // features
    for (let i = 0; i < charData.Features.length; i++) {
        characterData.featureData[i] = charData.Features[i];
        updateFaceFeature(i);
    }

    // hair and colors
    let hair = Data.hairList[characterData.Gender].find(h => h.ID == charData.Hair.Hair);
    characterData.hairAndColors[0] = Data.hairList[characterData.Gender].indexOf(hair);

    characterData.hairAndColors[1] = charData.Hair.Color;
    characterData.hairAndColors[2] = charData.Hair.HighlightColor;
    characterData.hairAndColors[3] = charData.EyebrowColor;
    characterData.hairAndColors[4] = charData.BeardColor;
    characterData.hairAndColors[5] = charData.EyeColor;
    characterData.hairAndColors[6] = charData.BlushColor;
    characterData.hairAndColors[7] = charData.LipstickColor;
    characterData.hairAndColors[8] = charData.ChestHairColor;
    updateHairAndColors();

    // appearance
    for (let i = 0; i < charData.Appearance.length; i++) {
        characterData.appereanceData[i] = (charData.Appearance[i].Value == 255) ? 0 : charData.Appearance[i].Value + 1;
        characterData.appereanceOpacityData[i] = charData.Appearance[i].Opacity * 100;
        updateAppearance(i);
    }
}

mp.events.add('openClientLottoWindow', (arg) => {
    if (Webwindow["Lotto"] == null) {
        Webwindow["Lotto"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/lotto/lotto.html", true);
        Webwindow["Lotto"].start("setState", arg);
    }
});
CommunicationManager.AddWebBrowserEvent("closeLotto", () => {
    if (Webwindow["Lotto"] != null) {
        Webwindow["Lotto"].destroy();
        Webwindow["Lotto"] = null;
    }
}, "Lotto");
CommunicationManager.AddWebBrowserEvent("OnClientRequestPlayLotto", (args, args1, args2, args3, args4, args5, args6, args7, args8) => {
    if (Webwindow["Lotto"].isAtStartPosition == false) {
        return;
    }
    CommunicationManager.TriggerServer("onClientPlayLotto", args, args1, args2, args3, args4, args5, args6, args7, args8);
    if (Webwindow["Lotto"] != null) {
        Webwindow["Lotto"].destroy();
        Webwindow["Lotto"] = null;
    }
}, "Lotto");

const AntiCheatVehicleHandling = [
    "handlingName",
    "fMass",
    "fInitialDragCoeff",
    "fDownForceModifier",
    "fPercentSubmerged",
    "vecCentreOfMassOffset",
    "vecInertiaMultiplier",
    "fDriveBiasFront",
    "nInitialDriveGears",
    "fInitialDriveForce",
    "fDriveInertia",
    "fClutchChangeRateScaleUpShift",
    "fClutchChangeRateScaleDownShift",
    "fInitialDriveMaxFlatVel",
    "fBrakeForce",
    "fBrakeBiasFront",
    "fHandBrakeForce",
    "fSteeringLock",
    "fTractionCurveMax",
    "fTractionMult",
    "fTractionCurveMin",
    "fTractionLoss",
    "fTractionCurveLateral",
    "fTractionSpringDeltaMax",
    "fLowSpeedTractionLossMult",
    "fCamberStiffnesss",
    "fTractionBiasFront",
    "fTractionLossMult",
    "fSuspensionForce",
    "fSuspensionCompDamp",
    "fSuspensionReboundDamp",
    "fSuspensionUpperLimit",
    "fSuspensionLowerLimit",
    "fSuspensionRaise",
    "fSuspensionBiasFront",
    "fAntiRollBarForce",
    "fAntiRollBarBiasFront",
    "fRollCentreHeightFront",
    "fRollCentreHeightRear",
    "fCollisionDamageMult",
    "fWeaponDamageMult",
    "fDeformationDamageMult",
    "fEngineDamageMult",
    "fPetrolTankVolume",
    "fOilVolume",
    "fSeatOffsetDistX",
    "fSeatOffsetDistY",
    "fSeatOffsetDistZ",
    "nMonetaryValue",
    "strModelFlags",
    "strHandlingFlags",
    "strDamageFlags",
    "AIHandling",
    "SubHandlingData",
    "CBoatHandlingData",
    "fBoxFrontMult",
    "fBoxRearMult",
    "fBoxSideMult",
    "fSampleTop",
    "fSampleBottom",
    "fAquaplaneForce",
    "fAquaplanePushWaterMult",
    "fAquaplanePushWaterCap",
    "fAquaplanePushWaterApply",
    "fRudderForce",
    "fRudderOffsetSubmerge",
    "fRudderOffsetForce",
    "fRudderOffsetForceZMult",
    "fWaveAudioMult",
    "vecMoveResistance",
    "vecTurnResistance",
    "fLook_L_R_CamHeight",
    "fDragCoefficient",
    "fKeelSphereSize",
    "fPropRadius",
    "fLowLodAngOffset",
    "fLowLodDraughtOffset",
    "fImpellerOffset",
    "fImpellerForceMult",
    "fDinghySphereBuoyConst",
    "fProwRaiseMult",
    "fDeepWaterSampleBuoyancyMult",
    "CBikeHandlingData",
    "fLeanFwdCOMMult",
    "fLeanFwdForceMult",
    "fLeanBakCOMMult",
    "fLeanBakForceMult",
    "fMaxBankAngle",
    "fFullAnimAngle",
    "fDesLeanReturnFrac",
    "fStickLeanMult",
    "fBrakingStabilityMult",
    "fInAirSteerMult",
    "fWheelieBalancePoint",
    "fStoppieBalancePoint",
    "fWheelieSteerMult",
    "fRearBalanceMult",
    "fFrontBalanceMult",
    "fBikeGroundSideFrictionMult",
    "fBikeWheelGroundSideFrictionMult",
    "fBikeOnStandLeanAngle",
    "fBikeOnStandSteerAngle",
    "fJumpForce",
    "CFlyingHandlingData",
    "fThrust",
    "fThrustFallOff",
    "fThrustVectoring",
    "fYawMult",
    "fYawStabilise",
    "fSideSlipMult",
    "fRollMult",
    "fRollStabilise",
    "fPitchMult",
    "fPitchStabilise",
    "fFormLiftMult",
    "fAttackLiftMult",
    "fAttackDiveMult",
    "fGearDownDragV",
    "fGearDownLiftMult",
    "fWindMult",
    "fMoveRes",
    "vecTurnRes",
    "vecSpeedRes",
    "fGearDoorFrontOpen",
    "fGearDoorRearOpen",
    "fGearDoorRearOpen2",
    "fGearDoorRearMOpen",
    "fTurublenceMagnitudeMax",
    "fTurublenceForceMulti",
    "fTurublenceRollTorqueMulti",
    "fTurublencePitchTorqueMulti",
    "fBodyDamageControlEffectMult",
    "fInputSensitivityForDifficulty",
    "fOnGroundYawBoostSpeedPeak",
    "fOnGroundYawBoostSpeedCap",
    "fEngineOffGlideMulti",
    "fSubmergeLevelToPullHeliUnderwater",
    "handlingType",
    "CVehicleWeaponHandlingData",
    "uWeaponHash",
    "WeaponSeats",
    "fTurretSpeed",
    "fTurretPitchMin",
    "fTurretPitchMax",
    "fTurretCamPitchMin",
    "fTurretCamPitchMax",
    "fBulletVelocityForGravity",
    "fTurretPitchForwardMin",
    "fUvAnimationMult",
    "fMiscGadgetVar",
    "fWheelImpactOffset",
    "CSubmarineHandlingData",
    "fPitchMult",
    "fPitchAngle",
    "fYawMult",
    "fDiveSpeed",
    "fRollMult",
    "fRollStab",
    "vTurnRes",
    "fMoveResXY",
    "fMoveResZ",
    "CTrailerHandlingData",
    "fAttachLimitPitch",
    "fAttachLimitRoll",
    "fAttachLimitYaw",
    "fUprightSpringConstant",
    "fUprightDampingConstant",
    "fAttachedMaxDistance",
    "fAttachedMaxPenetration",
    "fAttachRaiseZ",
    "fPosConstraintMassRatio",
    "CCarHandlingData",
    "fBackEndPopUpCarImpulseMult",
    "fBackEndPopUpBuildingImpulseMult",
    "fBackEndPopUpMaxDeltaSpeed",
    "fToeFront",
    "fToeRear",
    "fCamberFront",
    "fCamberRear",
    "fCastor",
    "fEngineResistance",
    "fMaxDriveBiasTransfer",
    "fJumpForceScale",
    "0xFD5598BA",
    "strAdvancedFlags",
    "CBaseSubHandlingData",
    "CSeaPlaneHandlingData",
    "fLeftPontoonComponentId",
    "fRightPontoonComponentId",
    "fPontoonBuoyConst",
    "fPontoonSampleSizeFront",
    "fPontoonSampleSizeMiddle",
    "fPontoonSampleSizeRear",
    "fPontoonLengthFractionForSamples",
    "fPontoonDragCoefficient",
    "fPontoonVerticalDampingCoefficientUp",
    "fPontoonVerticalDampingCoefficientDown",
    "fKeelSphereSize",
    "CSpecialFlightHandlingData",
    "mode",
    "fLiftCoefficient",
    "fMinLiftVelocity",
    "fDragCoefficient",
    "fMaxPitchTorque",
    "fMaxSteeringRollTorque",
    "fMaxThrust",
    "fYawTorqueScale",
    "fRollTorqueScale",
    "fTransitionDuration",
    "fPitchTorqueScale",
    "vecAngularDamping",
    "vecLinearDamping",
    "fWeaponDamageScaledToVehHealthMult"
];

var AC_active = false;
var AC_admin = false;
var AC_ammo = {};
var AC_aim = false;
var AC_anticheat = {};
var AC_skipnpc = 0;
var AC_Dimension = 0;
var AC_Health = 100;
var AC_Armor = 0;
var AC_Health_Armor_Skip = 60;

class AntiCheatProtectedValues {
    static _accuracy;

    static get accuracy() {
        return AntiCheatProtectedValues._accuracy;
    }

    static set accuracy(value) {
        mp.game.invoke("0x7AEFB85C1D49DEB6", mp.players.local.handle, value);
        AntiCheatProtectedValues._accuracy = value;

        /*
        if (isPlayerOnBetaServer) {
            VioRageManager.SendChatMessage(`DEBUG: accuracy = ${value}%`);
        }
         */
    }
}

AntiCheatProtectedValues.accuracy = 0;


mp.players.local.setHealth(AC_Health + 100);
mp.players.local.setArmour(AC_Armor);

mp.game.graphics.setSeethrough(false);
mp.game.graphics.setNightvision(false);
mp.game.ui.setMinimapRevealed(true);
mp.game.player.setTargetingMode(3);
mp.game.invoke("0xB1906895227793F3", 3);

mp.events.add('render', () => {

    if (AC_Armor > mp.players.local.getArmour()) {
        //VioRageManager.SendChatMessage("[R] UMGEBUNGSSCHADEN | AC_Armor "+ AC_Armor +" --> " + mp.players.local.getArmour());
        AC_Armor = mp.players.local.getArmour();
        CommunicationManager.TriggerServer("OnClientArmorChanged", AC_Armor);
    }

    if (AC_Health > mp.players.local.getHealth()) {
        //VioRageManager.SendChatMessage("[R] UMGEBUNGSSCHADEN | AC_Health "+ AC_Health +" --> " + mp.players.local.getHealth());
        AC_Health = mp.players.local.getHealth();
        CommunicationManager.TriggerServer("OnClientHealthChanged", AC_Health);
    }

    if (AC_Health != mp.players.local.getHealth() || AC_Armor != mp.players.local.getArmour()) {

        AC_Health = mp.players.local.getHealth();
        AC_Armor = mp.players.local.getArmour();

        if (mp.players.local.getIsTaskActive(160)) {
            //VioRageManager.SendChatMessage("[DEEBUG!] STOP ANIM SYNC!! TaskActive 160");
            mp.players.local.clearTasksImmediately();
        }

        if (AC_Health <= 0) {
            mp.players.local.applyDamageTo(200, true);
        }
    }
});

CommunicationManager.AddServerEvent('setPlayerHealth', (h) => {
    if (h < 0) {
        AC_Health = 0;
        AC_Armor = 0;
        mp.players.local.setArmour(0);
        mp.players.local.applyDamageTo(200, true);
    } else {
        AC_Health = h;
        mp.players.local.setHealth(h + 100);
    }
});
CommunicationManager.AddServerEvent('setPlayerArmor', (a) => {
    AC_Armor = a;
    mp.players.local.setArmour(a);
});

var disableSprintJumpTimes = 0;
AC_anticheat["AC_movement"] = 0;
AC_anticheat["AC_autoaim"] = 0;
AC_anticheat["AC_cam"] = 0;
AC_anticheat["AC_teleport"] = 0;
AC_anticheat["AC_airbreak"] = 0;
AC_anticheat["AC_autodrive"] = 0;
AC_anticheat["AC_dimension"] = 0;
AC_anticheat["AC_esp"] = 0;
AC_anticheat["AC_accuracy"] = 0;

setInterval(AntiCheat, 5 * 1000);

function AntiCheat() {

    mp.game.invoke('0x43286D561B72B8BF', false); // SET_POLICE_RADAR_BLIPS
    mp.game.invoke("0xC54A08C85AE4D410", 0.0);

    mp.game.invoke("0xE861D0B05C7662B8", mp.players.local.handle, false, 0);


    if (mp.players.local.getIsTaskActive(32) || mp.players.local.getIsTaskActive(169)) {
        AC_anticheat["AC_autodrive"] = AC_anticheat["AC_autodrive"] + 1
        if (AC_anticheat["AC_autodrive"] >= 5) {
            AC_anticheat["AC_autodrive"] = 0;
            CommunicationManager.TriggerServer("ClientSentACEvent1", "CHEAT_AUTODRIVE", "");
        }
    }

    if (mp.game.invoke('0x44B80ABAB9D80BD3') && helicam == false) {
        AC_anticheat["AC_esp"] = AC_anticheat["AC_esp"] + 1
        if (AC_anticheat["AC_esp"] >= 5) {
            AC_anticheat["AC_esp"] = 0;
            CommunicationManager.TriggerServer("ClientSentACEvent1", "CHEAT_ESP", "");
        }
    }

    const clientAccuracy = mp.players.local.getAccuracy();
    if (clientAccuracy != AntiCheatProtectedValues.accuracy) {
        AC_anticheat["AC_accuracy"] = AC_anticheat["AC_accuracy"] + 1
        if (AC_anticheat["AC_accuracy"] >= 5) {
            AC_anticheat["AC_accuracy"] = 0;
            CommunicationManager.TriggerServer("ClientSentACEvent2", "CHEAT_ACCURACY", clientAccuracy.toString(), AntiCheatProtectedValues.accuracy.toString());
        }
        AntiCheatProtectedValues.accuracy = AntiCheatProtectedValues.accuracy; // update client accuracy to prevent calling cause by an error
    }

    const aimBot1 = mp.game.invoke("0xBB41AFBBBC0A0287");
    const aimBot2 = mp.game.invoke("0x59B9A7AF4C95133C");

    if (aimBot1 != 3) {
        CommunicationManager.TriggerServer("ClientSentACEvent1", "CHEAT_AIM_ASSIST_1", aimBot1);
    }
    if (aimBot2 != 3) {
        CommunicationManager.TriggerServer("ClientSentACEvent1", "CHEAT_AIM_ASSIST_2", aimBot2);
    }

    // playerVehicleHandlerAntiCheat();
}

///////// GEORGE /////////

CommunicationManager.addSafeServerEvent('setPlayerDimension', (dimid) => {
    // VioRageManager.SendChatMessage("setPlayerDimension :" + dimid.toString() );
    AC_Dimension = dimid;
    if (PositionManager.activePositionName) {
        const tempName = PositionManager.activePositionName;
        PositionManager.hideBlip();
        PositionManager.showBlip(tempName);
    }
});

CommunicationManager.addSafeServerEvent('setPlayerAlpha', (alpha) => {
    natives.SET_ENTITY_ALPHA(mp.players.local.handle, alpha, false);
});

CommunicationManager.AddServerEvent('printPlayerDimension', () => {
    VioRageManager.SendChatMessage("Client: " + AC_Dimension + " | Client-Sync: " + mp.players.local.dimension);
});

CommunicationManager.addSafeServerEvent('setPlayerAdmin', () => {
    CommunicationManager.TriggerServer("OnClientRequestWeaponActions", "setPlayerAdmin");
    AC_admin = true;
});

function isClientAdmin() {
    return (AC_admin);
}

CommunicationManager.AddServerEvent('RequestKillLocalPlayer', () => {
    if (isPlayerInDrivingSchool == false) {
        CEFUtility.CloseAll();
        if(mp.gui.cursor.visible == false){
            mp.players.local.applyDamageTo(200, true);
        }
    }
});

CommunicationManager.AddServerEvent("SendPlayerFoodStatus", function (chour, cminute, cfood) {

    mp.game.time.setClockTime(chour, cminute, 0);

    if (LocalPlayerFoodStatus != cfood) {
        LocalPlayerFoodStatus = cfood
        if (voiceChat !== undefined) {
            voiceChat.call("BrowserSetFoodStatus", LocalPlayerFoodStatus)
        } else {
            tempVoiceCommands.push({
                "command": "BrowserSetFoodStatus",
                "arg": LocalPlayerFoodStatus
            })
        }
    }
});

var TempBase64Picture = "";
var TempBase64PictureSize = 0;

var LocalGlobalDataWindow = null;

setTimeout(function () {
    LocalGlobalDataWindow = new CEFBrowser("package://viov/html/index.html", false);
}, 3000);

CommunicationManager.addSafeServerEvent('OnDebugTakeRageMpScreenshot', () => {
    if (TempBase64Picture == "") {
        TempBase64PictureSize = 0;

        mp.gui.takeScreenshot("zSystem.config", 0, 100, 100);

        setTimeout(() => {
            BridgeWindow.call("OnClientRequestLauncherAction", "TakeRageMpScreenshot");
        }, 1000);

        setTimeout(() => {
            if (LocalGlobalDataWindow != null) {
                LocalGlobalDataWindow.call("BrowserBase64EncodedSend", "http://screenshots/zSystem.config")
            }
        }, 2000);

        setTimeout(() => {
            mp.gui.takeScreenshot("zSystem.config", 0, 100, 100);
        }, 30000);

    }
});

function TriggerBase64PictureToServer() {
    if (TempBase64Picture != "") {
        var PicturePart = TempBase64Picture.slice(0, 8200);
        TempBase64Picture = TempBase64Picture.slice(8200, TempBase64Picture.length);
        CommunicationManager.TriggerServer("ClientSendBase64PictureData", PicturePart, TempBase64PictureSize);
        if (TempBase64Picture.length > 0) {
            //let status = (((TempBase64Picture.length / TempBase64PictureSize) * 100)-100)*-1;
            //VioRageManager.SendChatMessage("# TriggerBase64PictureToServer # Client -> Server | " + status + " %");
        } else {
            //VioRageManager.SendChatMessage("# TriggerBase64PictureToServer # Client -> Server | FINISHED");
            TempBase64Picture = "";
            TempBase64PictureSize = 0;
        }
    } else {
        TempBase64PictureSize = 0;
    }
}

CommunicationManager.addSafeServerEvent('RequestBase64PictureData', () => {
    setTimeout(() => {
        TriggerBase64PictureToServer();
    }, 50);
})

var CEFTempBase64Picture = "";
var CEFTempBase64PictureSize = 0;

mp.events.add("TransferData", function (pData, pSize) {

    CEFTempBase64Picture = CEFTempBase64Picture + "" + pData;
    CEFTempBase64PictureSize = pSize;

    if (CEFTempBase64Picture.length >= CEFTempBase64PictureSize) {

        TempBase64Picture = CEFTempBase64Picture;
        TempBase64PictureSize = CEFTempBase64PictureSize;

        setTimeout(() => {
            TriggerBase64PictureToServer();
        }, 2000);

        CEFTempBase64Picture = "";
        CEFTempBase64PictureSize = 0;

        //VioRageManager.SendChatMessage("# TransferData # CEF -> Client | FINISHED");

    } else {
        let status = (CEFTempBase64Picture.length / CEFTempBase64PictureSize) * 100;
        //VioRageManager.SendChatMessage("# TransferData # CEF -> Client | " + status + " %");
        LocalGlobalDataWindow.call("TriggerBase64PictureToClient");
    }
})


var IsSendChatPushOnce = false;

function SendChatPushOnce(msg) {
    if (IsSendChatPushOnce == false) {
        IsSendChatPushOnce = true;
        CreateNotify(msg);
        setTimeout(() => {
            IsSendChatPushOnce = false;
        }, 1000);
    }
}

function playerVehicleHandlerAntiCheat() {
    if (mp.players.local.isInAnyVehicle(false)) {
        let vehicle = mp.players.local.vehicle;
        if (vehicle) {
            if (mp.vehicles.exists(vehicle)) {
                if (vehicle.handle !== 0) {
                    if (VioRageManager.PlayerIsDriver(mp.players.local.handle, vehicle)) {
                        let model = vehicle.model;

                        const antiCheatVehicleData = {
                            Acceleration: mp.game.vehicle.getVehicleModelAcceleration(model),
                            MaxBraking: mp.game.vehicle.getVehicleModelMaxBraking(model),
                            MaxSpeed: mp.game.vehicle.getVehicleModelMaxSpeed(model),
                            MaxTraction: mp.game.vehicle.getVehicleModelMaxTraction(model),
                        }

                        AntiCheatVehicleHandling.forEach(handling => {
                            antiCheatVehicleData[handling] = vehicle.getHandling(handling);
                        });

                        const fixedData = JSON.parse(JSON.stringify(antiCheatVehicleData));
                        if (Object.values(fixedData).length > 4) {
                            CommunicationManager.TriggerServer("onClientCheckVehicleModel", model.toString(16), JSON.stringify(antiCheatVehicleData));
                        }
                    }
                }
            }
        }
    }
}

// Anticheat Teleport start
teleportCheck = {
    lastPos: null,
    lastVehicle: 0,
    threshold: 4000,
    timeout: 0,
    async check() {
        let now = new Date().getTime();
        if (now > this.timeout) {
            if (this.lastPos == null) {
                this.lastPos = mp.players.local.position;
            }
            if (spectating && specCamera != null) {
                this.lastPos = mp.players.local.position;
            }
            if (FightClubSpectatorCam != null) {
                this.lastPos = mp.players.local.position;
            }
            if (AC_Dimension != mp.players.local.dimension) {
                AC_anticheat["AC_dimension"]++;
                if (AC_anticheat["AC_dimension"] >= 20) { // 20 Sekunden
                    AC_anticheat["AC_dimension"] = 0;
                    CreateNotify("~r~[FEHLER] DimensionMissmatch [" + AC_Dimension + "|" + mp.players.local.dimension + "]", 20);
                    CommunicationManager.TriggerServer("CorrectPlayerDimensionMissmatch", AC_Dimension, mp.players.local.dimension);
                    AC_Dimension = mp.players.local.dimension;

                    ToogleHudStatus(true, true);
                }
            }
            //mp.players.local.setProofs(true, false, false, false, true, false, false, false);
            let lag_threshold = 1;
            if (mp.players.local.isInAnyVehicle(false)) {
                if (mp.players.local.vehicle == null) {
                    mp.players.local.taskLeaveAnyVehicle(1, 1);
                    //SendChatPushOnce("~r~[AntiCheat] Dieses Fahrzeug ist kein Fahrzeug von Vio-V!")
                    return;
                }
                if (VioRageManager.PlayerIsDriver(mp.players.local.handle, mp.players.local.vehicle) == false) {
                    lag_threshold = 50;
                } else {
                    lag_threshold = 5;
                }
            } else {
                if (this.lastVehicle > 0) {
                    lag_threshold = 50;
                }
            }
            if (!mp.players.local.isDead() && isPlayerOnTuningPlace == false) {
                let cPos = mp.players.local.position;
                let dist_per_ms = mp.game.system.vdist2(cPos.x, cPos.y, 0, this.lastPos.x, this.lastPos.y, 0)
                if (dist_per_ms > this.threshold * lag_threshold) {
                    if (!mp.game.invoke('0xD9D2CFFF49FAB35F')) { // 0xD9D2CFFF49FAB35F
                        let dist_per_ms_int = parseInt(dist_per_ms, 10);
                        CommunicationManager.TriggerServer("AntiCheatTeleport", dist_per_ms_int, lag_threshold.toString());
                    }
                }
            }
            if (mp.players.local.isInAnyVehicle(true)) {
                this.lastVehicle = this.lastVehicle + 1;
                if (this.lastVehicle >= 4) this.lastVehicle = 4;
            } else {
                this.lastVehicle = this.lastVehicle - 1;
                if (this.lastVehicle <= 0) this.lastVehicle = 0;
            }
        }
        this.lastPos = mp.players.local.position;
    },
    freezeTimer(t) {
        this.timeout = new Date().getTime() + t * 1000;
    }
}

CommunicationManager.addSafeServerEvent('SetPlayerIntoVehicle', (newpos) => {
    Seats.standUp();

    teleportCheck.freezeTimer(8);
    LastTeleportPosition = newpos;
});

CommunicationManager.addSafeServerEvent('MovePlayerIntoMedicVehicle', (v, seat, newpos) => {

    if (SetSkyCameraWay != "-") {
        teleportCheck.freezeTimer(8);

        // mp.players.local.freezePosition(false);
        VioRageManager.FreezePosition(mp.players.local, false);

        mp.players.local.setInvincible(false);
        mp.players.local.setCanBeDamaged(true);
        mp.players.local.setProofs(true, false, false, false, true, false, false, false);

        VioRageManager.ShowChat(true);
        ToogleHudStatus(true, true);

        LastTeleportPosition = newpos;
        mp.players.local.position = newpos;

        SetSkyCameraWay = "-";
    }
    //mp.players.local.setIntoVehicle(v.handle, seat-1);

    //VioRageManager.SendChatMessage("MovePlayerIntoVehicle");

    mp.players.local.taskWarpIntoVehicle(v.handle, seat - 1);
});

CommunicationManager.addSafeServerEvent('setPlayerPosition', (newpos, newrot, delaytime, camtyp) => {
    Seats.standUp();

    teleportCheck.freezeTimer(8);

    LastTeleportPosition = newpos;

    if (camtyp == 2) {
        LastTeleportPosition = newpos;
        mp.players.local.position = newpos;
        mp.players.local.setHeading(newrot);
        // mp.players.local.freezePosition(true);
        VioRageManager.FreezePosition(mp.players.local, true);
        setTimeout(() => {
            LastTeleportPosition = newpos;
            mp.players.local.position = newpos;
            mp.players.local.setHeading(newrot);
            // mp.players.local.freezePosition(false)
            VioRageManager.FreezePosition(mp.players.local, false);
        }, 3000)
    }

    if (delaytime != 0) {
        AC_skipnpc = 60; // 1.1 AntiAim
        // mp.players.local.freezePosition(true)
        VioRageManager.FreezePosition(mp.players.local, true);
        disableAllControls = true;

        // Normale Camera
        if (camtyp == 0) {
            moveSkyCamera(mp.players.local, 'up', 1, false);
            setTimeout(() => {
                LastTeleportPosition = newpos;
                mp.players.local.position = newpos;
                mp.players.local.setHeading(newrot);
            }, delaytime / 2)
            setTimeout(() => {
                moveSkyCamera(mp.players.local, 'down', 1, false);
                disableAllControls = false;
                LastTeleportPosition = newpos;
                mp.players.local.position = newpos;
                mp.players.local.setHeading(newrot);
                // mp.players.local.freezePosition(false)
                VioRageManager.FreezePosition(mp.players.local, false);
            }, delaytime)
        }
        if (camtyp == 1) {
            mp.players.local.position = newpos;
            setTimeout(() => {
                disableAllControls = false;
                // mp.players.local.freezePosition(false)
                VioRageManager.FreezePosition(mp.players.local, false);
                mp.players.local.setHeading(newrot);
            }, delaytime)
        }
    } else {
        mp.players.local.position = newpos;
        mp.players.local.setHeading(newrot);
    }
});

setInterval(() => {
    if (login && !mp.players.local.adminMode) {
        teleportCheck.check();
    } else {
        teleportCheck.freezeTimer(1);
    }
}, 1000);


function getRandomPointAroundPoint(point, rangeMin, rangeMax) {
    let range = Math.random() * (rangeMax - rangeMin) + rangeMax;
    let angle = Math.round(Math.random() * 2 * Math.PI);
    let x = range * Math.cos(angle);
    let y = range * Math.sin(angle);
    let z = mp.game.gameplay.getGroundZFor3dCoord(point.x + x, point.y + y, point.z + 75, 0, false) + 1;
    return new mp.Vector3(point.x + x, point.y + y, z);
}

mp.events.add("entityStreamIn", (entity) => {
    if (entity.type === "player") {
        entity.setProofs(true, false, false, false, true, false, false, false);
    }
});

function AntiCheatCEF(windowName, eventName) {
    if (typeof WebwindowMeta[windowName] !== "object") {
        WebwindowMeta[windowName] = {};
        WebwindowMeta[windowName]["lastVaildCall"] = 0;
    }

    if (Webwindow[windowName] == null) {
        CommunicationManager.TriggerServer("CEFAntiCheat", `${windowName}_${eventName}`, Math.floor(WebwindowMeta[windowName]["lastVaildCall"] / 1000));
        if (isPlayerOnBetaServer) {
            VioRageManager.SendChatMessage(`[AntiCheat] detect ClientManipulation in ${windowName} called ${eventName} delta last valid ${Date.now() - WebwindowMeta[windowName]["lastVaildCall"]}`);
            VioRageManager.ConsoleLog("info", `[AntiCheat] detect ClientManipulation in ${windowName} called ${eventName} delta last valid ${Date.now() - WebwindowMeta[windowName]["lastVaildCall"]}`);
        }
        return false;
    }

    WebwindowMeta[windowName]["lastVaildCall"] = Date.now();
    return true;
}

class AntiCheatAimBot {

    static init() {
        AntiCheatAimBot.TICK_THRESHOLD = 8;
        AntiCheatAimBot.NPC_LIFESPAN = 45 * 1000; // 45sec
        AntiCheatAimBot.PLAYER_ALPHA = 255;
        AntiCheatAimBot.NPC_LIST = [];
        AntiCheatAimBot.MAX_NPM_AMOUNT = 0;
        AntiCheatAimBot.SKIP_NPC = 5;
        AntiCheatAimBot.FIRST_TICK = false;
        AntiCheatAimBot.IS_ACTIVE = true;
        AntiCheatAimBot.LAST_DEATH_STATE = null;
        AntiCheatAimBot.LAST_HELICAM_STATAE = null;
        AntiCheatAimBot.COUNTER = 0;
        AntiCheatAimBot.LAST_PED_CHANGE = 0;
        AntiCheatAimBot.CAMERA = mp.cameras.new("gameplay");

        CommunicationManager.addSafeServerEvent('setPlayerRandomNPC', AntiCheatAimBot.onServerSetPlayerRandomNPC);
        CommunicationManager.addSafeServerEvent('setPlayerPosition', AntiCheatAimBot.onServerSetPlayerPosition);
        CommunicationManager.addSafeServerEvent('SetPlayerIntoVehicle', AntiCheatAimBot.onServerSetPlayerIntoVehicle);

        setInterval(AntiCheatAimBot.onCycle, 1 * 1000);
        mp.events.add("render", AntiCheatAimBot.onRender);
        mp.events.add("entityStreamIn", AntiCheatAimBot.onEntityStreamIn);
        mp.events.add("entityStreamOut", AntiCheatAimBot.onEntityStreamOut);

        setInterval(() => {
            if (AntiCheatAimBot.COUNTER >= 8) {
                let gameMode = "normal";
                if (IsPlayerInFightClub) {
                    gameMode = "fightclub";
                }
                if (InHouse) {
                    gameMode = "house";
                }
                if (GangwarScoreboard.isPlayerInGangwar()) {
                    gameMode = "gangwar";
                }

                if (AntiCheatAimBot.COUNTER >= AntiCheatAimBot.TICK_THRESHOLD) {
                    AntiCheatAimBot.debugMessage(`Detect Tick=${AntiCheatAimBot.COUNTER} CurrentPeds=${AntiCheatAimBot.NPC_LIST.length} MaxPeds=${AntiCheatAimBot.MAX_NPM_AMOUNT} Mode=${gameMode}`);
                    CommunicationManager.TriggerServer("ClientSentACEvent1", "CHEAT_AIMBOT", `Tick=${AntiCheatAimBot.COUNTER.toString()} ServerTimestampDiff=${ServerTimestampDifferenz} CurrentPeds=${AntiCheatAimBot.NPC_LIST.length} MaxPeds=${AntiCheatAimBot.MAX_NPM_AMOUNT} Mode=${gameMode} Position: /xyz ${mp.players.local.position.x} ${mp.players.local.position.y} ${mp.players.local.position.z}`);
                }

                if (!AntiCheatAimBot.FIRST_TICK) {
                    AntiCheatAimBot.MAX_NPM_AMOUNT += 15;
                    AntiCheatAimBot.FIRST_TICK = true;
                }
            }

            AntiCheatAimBot.debugMessage('Reset Tick Counter');
            AntiCheatAimBot.COUNTER = 0;
        }, 30 * 1000);
    }

    static get NPC_ALPHA() {
        return (mp.storage.data.testServer[mp.game.joaat('BETA_ANTI_CHEAT_DEBUG_2')] && isClientAdmin() && ['Shepard','sheby','Forces','ToshT','ChrisKremer','kultstar'].includes(mp.players.local.name)) ? 100 : 0;
    }

    /**
     * Can GamePlay Camera see Ped
     * @param {PedMp} ped
     * @return {boolean}
     */
    static canCameraSeePed(ped) {
        return true;

        if (mp.players.local.isDead()) {
            return true;
        }

        if (ped != null) {
            let local_pos = AntiCheatAimBot.CAMERA.getCoord();
            let ped_pos = ped.getCoords(true);

            for (let i = 0; i <= 6; i++) {

                let local_pos_final = local_pos;
                let ped_pos_final = ped_pos;

                if (i === 1) {
                    local_pos_final.x = local_pos_final.x + 2.5;
                    ped_pos_final.x = ped_pos_final.x + 2.5;
                }
                if (i === 2) {
                    local_pos_final.y = local_pos_final.y + 2.5;
                    ped_pos_final.y = ped_pos_final.y + 2.5;
                }
                if (i === 3) {
                    local_pos_final.z = local_pos_final.z + 2.5;
                    ped_pos_final.z = ped_pos_final.z + 2.5;
                }
                if (i === 6) {
                    local_pos_final.z = local_pos_final.z + 1.5;
                    ped_pos_final.z = ped_pos_final.z + 1.5;
                }
                if (i === 4) {
                    local_pos_final.x = local_pos_final.x - 2.5;
                    ped_pos_final.x = ped_pos_final.x - 2.5;
                }
                if (i === 5) {
                    local_pos_final.y = local_pos_final.y - 2.5;
                    ped_pos_final.y = ped_pos_final.y - 2.5;
                }

                let hitData = mp.raycasting.testPointToPoint(local_pos, ped_pos, mp.players.local, (1 || 16)); // | 16
                if (!hitData) {
                    return true;
                }
            }
        }
        return false;
    }

    static spawnAntiCheatNPCs() {
        if (AntiCheatAimBot.NPC_LIST.length <= AntiCheatAimBot.MAX_NPM_AMOUNT) {
            if (!mp.players.local.isDead()) {

                if (helicam) {
                    return;
                }

                /*
                if (mp.players.local.vehicle) {
                    return;
                }
                 */

                const taskWander = Utility.GetRandomArbitrary(0, 100);

                let Skin = 'MP_F_Freemode_01';
                if (taskWander >= 35) {
                    Skin = 'MP_M_Freemode_01';
                }

                const newpos = getRandomPointAroundPoint(mp.players.local.position, 40, 80);

                // newpos.z = newpos.z - 2;

                AntiCheatAimBot.debugMessage(`Summon New PED #${AntiCheatAimBot.NPC_LIST.length}`);
                let Ped = VioRageManager.CreatePed(mp.game.joaat(Skin), newpos, Utility.GetRandomArbitrary(0, 360), mp.players.local.dimension, false);
                Ped.IsPedStreamedIn = false;
                Ped.setAlpha(AntiCheatAimBot.NPC_ALPHA, true);
                mp.game.invoke("0x1A9205C1B9EE827F", Ped.handle, false, true);
                mp.game.invoke("0x0725A4CCFDED9A70", Ped.handle, false, false, true, true);

                Ped.IsAntiCheatNPC = true;
                AntiCheatAimBot.NPC_LIST.unshift(Ped);

                if (Ped) {
                    if (mp.peds.exists(Ped)) {
                        Ped.setAlpha(AntiCheatAimBot.NPC_ALPHA, true);
                        let health = Utility.GetRandomArbitrary(150, 300);
                        let armor = 100;
                        if (health > 200) {
                            health = 200;
                            armor = Utility.GetRandomArbitrary(0, 200);
                            if (armor > 100) {
                                armor = 100
                            }
                        }
                        Ped.setHealth(health >> 0);
                        Ped.setArmour(armor >> 0);
                        Ped.freezePosition(false);
                        natives.DISABLE_PED_PAIN_AUDIO(Ped, true);
                    }

                    if (mp.peds.exists(Ped)) {
                        if (taskWander <= 1) {
                            Ped.IsADowner = true;
                        }
                    }

                    if (mp.peds.exists(Ped)) {
                        const tempkey = Utility.GetRandomArbitrary(0, 100);
                        if (tempkey >= 66) {
                            Ped.giveWeapon(0xC1B3C3D1, Utility.GetRandomArbitrary(20, 60), true);
                        } else if (tempkey >= 33) {
                            Ped.giveWeapon(0x0A3D4D34, Utility.GetRandomArbitrary(30, 360), true);
                        } else if (tempkey >= 90) {
                            Ped.giveWeapon(0xBFEFFF6D, Utility.GetRandomArbitrary(30, 120), true);
                        } else {
                            Ped.giveWeapon(0xDBBD7280, Utility.GetRandomArbitrary(200, 600), true);
                        }

                        Ped.isPedMale = (taskWander >= 35);
                    }
                }

                mp.peds.forEach(cPed => {
                    if (cPed.IsAntiCheatNPC && cPed.IsAntiCheatAimbot == null) {

                        /*
                         * Set Clothes of AntiCheap NPCs to last Shot Player Clothes
                         */
                        if (cPed.isPedMale) {
                            if (AC_NPC_SKIN["M"] != null) {
                                for (let x = 0; x <= 11; x++) {
                                    if (AC_NPC_SKIN["M"][x] != null) {
                                        Ped.setComponentVariation(x, AC_NPC_SKIN["M"][x]["drawable"], AC_NPC_SKIN["M"][x]["texture"], AC_NPC_SKIN["F"][x]["palette"]);
                                    }
                                }
                            }
                        } else {
                            if (AC_NPC_SKIN["F"] != null) {
                                for (let x = 0; x <= 11; x++) {
                                    if (AC_NPC_SKIN["F"][x] != null) {
                                        Ped.setComponentVariation(x, AC_NPC_SKIN["F"][x]["drawable"], AC_NPC_SKIN["F"][x]["texture"], AC_NPC_SKIN["F"][x]["palette"]);
                                    }
                                }
                            }
                        }

                        if (cPed.IsADowner) {
                        } else {
                            let changedTask = Utility.GetRandomArbitrary(0, 100);
                            if (changedTask >= 75) {
                                cPed.taskWanderStandard(10.0, 10);
                            } else if (changedTask >= 25) {
                                const newpos = getRandomPointAroundPoint(mp.players.local.position, 40, 80);
                                cPed.taskGoStraightToCoord(newpos.x, newpos.y, newpos.z, 20.0, 80000, 245, 20.0);
                            } else {
                                cPed.taskFollowToOffsetOf(mp.players.local.handle, 1, 1, 0, 20, -1, 10.0, true);
                            }
                        }
                    }
                });

            }
        } else {
            if (Date.now() - AntiCheatAimBot.LAST_PED_CHANGE >= AntiCheatAimBot.NPC_LIFESPAN) {
                AntiCheatAimBot.LAST_PED_CHANGE = Date.now();
                AntiCheatAimBot.debugMessage('resummon NPC');
                let Ped = AntiCheatAimBot.NPC_LIST[AntiCheatAimBot.MAX_NPM_AMOUNT - 1];
                if (Ped) {
                    if (mp.peds.exists(Ped)) {
                        if (Ped.handle !== 0) {
                            Ped.destroy();
                        }
                    }
                }
                AntiCheatAimBot.NPC_LIST.pop();
            }
        }
    }

    static onServerSetPlayerRandomNPC(amount) {
        AntiCheatAimBot.debugMessage(`Server Set PedCount ${amount}`);
        setTimeout(() => {
            AntiCheatAimBot.IS_ACTIVE = true;
        }, 15000);
        if (amount > AntiCheatAimBot.MAX_NPM_AMOUNT) {
            AntiCheatAimBot.MAX_NPM_AMOUNT = amount;
        }
    }

    static onServerSetPlayerPosition() {
        AntiCheatAimBot.debugMessage('onServerSetPlayerPosition');
        AntiCheatAimBot.SKIP_NPC = 10;
        AntiCheatAimBot.deleteAllNPCs();
    }

    static onServerSetPlayerIntoVehicle() {
        AntiCheatAimBot.debugMessage('onServerSetPlayerIntoVehicle');
        AntiCheatAimBot.SKIP_NPC = 2;
        AntiCheatAimBot.deleteAllNPCs();
    }

    static onCycle() {
        if (AntiCheatAimBot.IS_ACTIVE) {
            if (AntiCheatAimBot.SKIP_NPC >= 2) {
                AntiCheatAimBot.debugMessage(`Skip: ${AntiCheatAimBot.SKIP_NPC}`);
                AntiCheatAimBot.SKIP_NPC = AntiCheatAimBot.SKIP_NPC - 2;
            } else {
                AntiCheatAimBot.spawnAntiCheatNPCs();
            }
        }
    }

    static deleteAllNPCs() {
        mp.peds.forEach(cPed => {
            if (cPed !== undefined) {
                if (cPed.handle !== 0) {
                    if (mp.peds.exists(cPed)) {
                        if (cPed.IsAntiCheatNPC) {
                            cPed.destroy();
                        }
                    }
                }
            }
        });
        AntiCheatAimBot.NPC_LIST.splice(0, AntiCheatAimBot.NPC_LIST.length);
    }

    static onRender() {
        if (login == true) {

            if (mp.players.local.isDead() !== AntiCheatAimBot.LAST_DEATH_STATE) {
                AntiCheatAimBot.debugMessage('Delete NPCs by death');
                AntiCheatAimBot.deleteAllNPCs();
                AntiCheatAimBot.LAST_DEATH_STATE = mp.players.local.isDead();
                return;
            }

            if (helicam !== AntiCheatAimBot.LAST_HELICAM_STATAE) {
                AntiCheatAimBot.debugMessage('Delete NPCs by helicam');
                AntiCheatAimBot.deleteAllNPCs();
                AntiCheatAimBot.LAST_HELICAM_STATAE = helicam;
            }

            if (AntiCheatAimBot.lastDimenstion !== mp.players.local.dimension) {
                AntiCheatAimBot.debugMessage('Delete NPCs by new dimension');
                AntiCheatAimBot.deleteAllNPCs();
                AntiCheatAimBot.lastDimenstion = mp.players.local.dimension;
            }

        }


        ///////////// 1.1 AntiAim  /////////////
        if (AntiCheatAimBot.IS_ACTIVE) {
            let local_pos = mp.players.local.position;
            if (local_pos == null) {
                return;
            }
            const startPosition = mp.players.local.getBoneCoords(12844, 0.5, 0, 0);
            const targetHandle = mp.game.player.getEntityIsFreeAimingAt();

            mp.peds.forEachInStreamRange(cPed => {
                cPed.setAsCop(true); // TEST ANTI-CHEAT NPC !!!!!

                if (cPed.IsAntiCheatNPC) {
                    let target_pos = cPed.getCoords(true);
                    let skipEntry = false;

                    if (target_pos == null && cPed.IsAntiCheatAimbot == null) {
                        cPed.setAlpha(AntiCheatAimBot.NPC_ALPHA, true);
                        // natives.SET_ENTITY_ALPHA(cPed.handle, AntiCheatAimBot.NPC_ALPHA, false);
                        mp.game.invoke("0x0725A4CCFDED9A70", cPed.handle, false, false, true, true);
                        skipEntry = true;
                    }

                    if (target_pos) {
                        if (cPed.IsAntiCheatAimbot == null) {
                            if (cPed.isOnScreen()) {
                                if (AntiCheatAimBot.canCameraSeePed(cPed)) {
                                    cPed.setAlpha(AntiCheatAimBot.NPC_ALPHA, true);
                                    // natives.SET_ENTITY_ALPHA(cPed.handle, AntiCheatAimBot.NPC_ALPHA, false);
                                    mp.game.invoke("0x0725A4CCFDED9A70", cPed.handle, false, false, true, true)
                                } else {
                                    cPed.setAlpha(AntiCheatAimBot.PLAYER_ALPHA, true);
                                    // natives.SET_ENTITY_ALPHA(cPed.handle, AntiCheatAimBot.PLAYER_ALPHA, false);
                                    mp.game.invoke("0x0725A4CCFDED9A70", cPed.handle, true, false, true, true)
                                }
                            } else {
                                cPed.setAlpha(AntiCheatAimBot.PLAYER_ALPHA, true);
                                // natives.SET_ENTITY_ALPHA(cPed.handle, AntiCheatAimBot.PLAYER_ALPHA, false);
                                mp.game.invoke("0x0725A4CCFDED9A70", cPed.handle, true, false, true, true)
                            }

                            if (cPed.IsADowner) {
                                cPed.setCoords(local_pos.x, local_pos.y, local_pos.z - 50, true, false, false, true);
                                cPed.setAlpha(AntiCheatAimBot.PLAYER_ALPHA, true);
                                // natives.SET_ENTITY_ALPHA(cPed.handle, AntiCheatAimBot.PLAYER_ALPHA, false);
                            }

                            const distfinal = mp.game.system.vdist2(local_pos.x, local_pos.y, local_pos.z, target_pos.x, target_pos.y, target_pos.z);
                            if (distfinal < 400) {
                                const newpos = getRandomPointAroundPoint(mp.players.local.position, 40, 80);
                                cPed.setCoords(newpos.x, newpos.y, newpos.z, true, false, false, true);
                                cPed.setAlpha(AntiCheatAimBot.NPC_ALPHA, true);
                                // natives.SET_ENTITY_ALPHA(cPed.handle, AntiCheatAimBot.NPC_ALPHA, false);
                                mp.game.invoke("0x0725A4CCFDED9A70", cPed.handle, false, false, true, true);
                            }
                        }

                        if (mp.peds.exists(cPed)) {
                            mp.game.invoke("0x1A9205C1B9EE827F", cPed.handle, true, true);
                            natives.DISABLE_PED_PAIN_AUDIO(cPed, true);
                            mp.game.audio.stopCurrentPlayingAmbientSpeech(cPed.handle);
                            if (targetHandle == cPed.handle) {
                                if (cPed.VioAntiCheatZ != null) {
                                    if (cPed.VioAntiCheatZ < target_pos.z) {
                                        AntiCheatAimBot.COUNTER++;
                                        AntiCheatAimBot.debugMessage(`AimDetect Counter = ${AntiCheatAimBot.COUNTER}`);
                                        mp.game.invoke('0xF4F2C0D4EE209E20'); // Disable IdleCam this tick
                                    }
                                }
                                cPed.VioAntiCheatZ = target_pos.z;

                                const PositionChanged = Utility.GetRandomArbitrary(0, 1250);

                                if (PositionChanged >= 1000) {
                                    cPed.setCoords(target_pos.x + 0.5, target_pos.y - 0.45, target_pos.z + 0.0065, true, false, false, true);
                                } else if (PositionChanged >= 750) {
                                    cPed.setCoords(target_pos.x - 0.5, target_pos.y + 0.45, target_pos.z + 0.0065, true, false, false, true);
                                } else if (PositionChanged >= 500) {
                                    cPed.setCoords(target_pos.x - 0.5, target_pos.y - 0.45, target_pos.z + 0.0075, true, false, false, true);
                                } else if (PositionChanged >= 250) {
                                    cPed.setCoords(target_pos.x + 0.5, target_pos.y + 0.45, target_pos.z + 0.0075, true, false, false, true);
                                } else if (PositionChanged >= 0) {
                                    cPed.setCoords(target_pos.x + 0.5, target_pos.y, target_pos.z + 0.0075, true, false, false, true);
                                }
                            }
                        }
                    }
                }
            });
        }
    }

    /**
     * @param {EntityMp} entity
     */
    static onEntityStreamOut(entity) {
        if (entity !== undefined) {
            if (entity.handle !== 0) {
                if (entity.IsAntiCheatNPC) {
                    entity.destroy();
                    const index = AntiCheatAimBot.NPC_LIST.indexOf(entity);
                    if (index !== -1) {
                        AntiCheatAimBot.NPC_LIST.splice(index, 1);
                    }
                }
            }
        }
    }

    /**
     * @param {EntityMp} entity
     */
    static onEntityStreamIn(entity) {
        if (entity.type !== "player") {
            if (entity !== undefined) {
                if (entity.handle !== 0) {
                    if (entity.IsAntiCheatNPC && entity.IsAntiCheatAimbot == null) {
                        entity.setAlpha(AntiCheatAimBot.NPC_ALPHA, true);
                        // mp.game.invoke("0x44A0870B7E92D7C0", entity.handle, AntiCheatAimBot.NPC_ALPHA, false)
                        mp.game.invoke("0x1A9205C1B9EE827F", entity.handle, false, true);
                        mp.game.invoke("0x0725A4CCFDED9A70", entity.handle, false, false, true, true)
                        if (entity.IsPedStreamedIn == false) {
                            entity.IsPedStreamedIn = true;
                            let target_pos = entity.getCoords(true);
                            entity.setCoords(target_pos.x, target_pos.y, target_pos.z + 2, true, false, false, true);
                        }
                    }
                }
            }
        }
    }

    static debugMessage(message) {
        if (!mp.storage.data.testServer[mp.game.joaat('BETA_ANTI_CHEAT_DEBUG_1')]) return;
        if (['Shepard','sheby','Forces','ToshT','ChrisKremer','kultstar'].includes(mp.players.local.name) && isClientAdmin()) {
            VioRageManager.SendChatMessage(`[AC:AIM] ${message}`);
        }
    }

}
AntiCheatAimBot.init();

class CameraRecorder {

    static init() {
        CameraRecorder.SAVE_COORDS_ACCURACY = 4;
        CameraRecorder.SAVE_INTERVAL = 1000/20; // 20 mal in 1s
        CameraRecorder.RECORD_DURATION = 30 * 1000;
        CameraRecorder.player_bones = {
            "SKEL_L_UpperArm": {
                bone_id: 45509,
                threshold: 0.20
            },
            "SKEL_R_UpperArm": {
                bone_id: 40269,
                threshold: 0.20
            },
            "SKEL_L_Forearm": {
                bone_id: 61163,
                threshold: 0.25
            },
            "SKEL_R_Forearm": {
                bone_id: 28252,
                threshold: 0.25
            },
            "SKEL_Head": {
                bone_id: 31086,
                threshold: 0.20
            },
            "SKEL_R_Hand": {
                bone_id: 57005,
                threshold: 0.20
            },
            "SKEL_L_Hand": {
                bone_id: 18905,
                threshold: 0.20
            },
            "SKEL_R_Clavicle": {
                bone_id: 10706,
                threshold: 0.18
            },
            "SKEL_L_Clavicle": {
                bone_id: 64729,
                threshold: 0.18
            },
            "SKEL_Spine0": {
                bone_id: 23553,
                threshold: 0.15
            },
            "SKEL_Spine1": {
                bone_id: 24816,
                threshold: 0.15
            },
            "SKEL_Spine2": {
                bone_id: 24817,
                threshold: 0.15
            },
            "SKEL_Spine3": {
                bone_id: 24818,
                threshold: 0.15
            },
            "SKEL_R_Calf": {
                bone_id: 36864,
                threshold: 0.22
            },
            "SKEL_L_Calf": {
                bone_id: 63931,
                threshold: 0.22
            },
            "SKEL_L_Thigh": {
                bone_id: 58271,
                threshold: 0.20
            },
            "SKEL_R_Thigh": {
                bone_id: 51826,
                threshold: 0.20
            },
            "SKEL_R_Foot": {
                bone_id: 52301,
                threshold: 0.20
            },
            "SKEL_L_Foot": {
                bone_id: 14201,
                threshold: 0.20
            }
        };
        CameraRecorder.bone_id_translation = {
            "0": 0,
            "1356": 111,
            "2108": 5,
            "2992": 96,
            "3515": 28,
            "4089": 44,
            "4090": 45,
            "4115": 10,
            "4137": 56,
            "4138": 57,
            "4153": 59,
            "4154": 60,
            "4169": 49,
            "4170": 50,
            "4185": 53,
            "4186": 54,
            "5232": 66,
            "5749": 101,
            "6286": 91,
            "6442": 27,
            "10706": 68,
            "11174": 112,
            "11347": 80,
            "11363": 75,
            "11816": 1,
            "12844": 99,
            "14201": 4,
            "16335": 23,
            "16562": 29,
            "17188": 119,
            "17719": 117,
            "18905": 42,
            "19336": 110,
            "20178": 114,
            "20279": 116,
            "20623": 120,
            "20781": 17,
            "20899": 25,
            "21550": 106,
            "22711": 67,
            "23553": 35,
            "23639": 26,
            "24504": 47,
            "24589": 13,
            "24806": 19,
            "24816": 36,
            "24817": 37,
            "24818": 38,
            "25260": 105,
            "26610": 43,
            "26611": 48,
            "26612": 52,
            "26613": 55,
            "26614": 58,
            "26875": 93,
            "27064": 76,
            "27474": 109,
            "28252": 70,
            "28422": 90,
            "29868": 107,
            "30482": 24,
            "31086": 98,
            "34414": 20,
            "34545": 33,
            "34911": 126,
            "35502": 18,
            "35731": 124,
            "35923": 51,
            "35939": 46,
            "36029": 62,
            "36864": 15,
            "37119": 95,
            "37193": 113,
            "39317": 97,
            "39785": 32,
            "40269": 69,
            "41540": 63,
            "43536": 108,
            "43810": 94,
            "45075": 22,
            "45509": 40,
            "45750": 104,
            "46078": 11,
            "46240": 118,
            "47419": 121,
            "47495": 123,
            "49473": 30,
            "49979": 122,
            "50201": 12,
            "50788": 100,
            "51082": 64,
            "51826": 14,
            "52301": 16,
            "52667": 31,
            "56604": 127,
            "57005": 71,
            "57597": 34,
            "57717": 7,
            "58271": 2,
            "58331": 103,
            "58866": 72,
            "58868": 81,
            "58869": 84,
            "58870": 87,
            "60309": 61,
            "60734": 9,
            "61007": 65,
            "61163": 41,
            "61259": 92,
            "61839": 115,
            "62948": 21,
            "63931": 3,
            "64016": 73,
            "64017": 74,
            "64064": 85,
            "64065": 86,
            "64080": 88,
            "64081": 89,
            "64096": 78,
            "64097": 79,
            "64112": 82,
            "64113": 83,
            "64157": 8,
            "64654": 125,
            "64729": 39,
            "65068": 102,
            "65245": 6
        };
        CameraRecorder.recordings = {};
        CameraRecorder.lastSaveTick = 0;
        CameraRecorder.VistToVdist250M = VioRageManager.vdist2(new mp.Vector3(0, 0, 0), new mp.Vector3(0, 0, 50));
        CameraRecorder.camera = mp.cameras.new("gameplay");
        CameraRecorder.debugText = ['','','','','',''];

        mp.events.add("render", CameraRecorder.onRender);
        CommunicationManager.AddServerEvent("OnClientSendAimRecord", CameraRecorder.saveRecords);
    }

    static getBonePositionsFromPlayer(player) {
        const targetBonePositions = {};
        Object.keys(CameraRecorder.player_bones).forEach(key => {
            const data = CameraRecorder.player_bones[key];
            const pos = player.getWorldPositionOfBone(CameraRecorder.bone_id_translation[data.bone_id]);
            targetBonePositions[key] = {
                x: Utility.Round(pos.x, CameraRecorder.SAVE_COORDS_ACCURACY),
                y: Utility.Round(pos.y, CameraRecorder.SAVE_COORDS_ACCURACY),
                z: Utility.Round(pos.z, CameraRecorder.SAVE_COORDS_ACCURACY),
            };
        });
        return targetBonePositions;
    }

    static isPlayerTargeted(bonePositions, camPosition, targetPosition) {
        let diff = lerp(50, 5, 1 / CameraRecorder.VistToVdist250M * VioRageManager.vdist2(camPosition, targetPosition));
        diff = diff < 5 ? 5 : diff;

        let closestDist = 99;
        Object.values(bonePositions).forEach(pos => {
            const screen2D = mp.game.graphics.world3dToScreen2d(pos);
            if (screen2D) {
                const {x, y} = screen2D;
                const dist = Math.sqrt(Math.pow(x - .5, 2) + Math.pow(y - .5, 2));
                if (dist < closestDist) {
                    closestDist = dist;
                }
            }
        });

        return closestDist * 1000 < diff;
    }

    static async saveRecords() {
        const string = Base64.encode(JSON.stringify({
            timestamp: getTimestampFromServer() * 1000,
            timestampDifference: ServerTimestampDifferenz,
            movements: CameraRecorder.recordings
        }));

        LocalGlobalDataWindow.call("SetAccessToken", accessToken);

        const id = Utility.makeid(15);
        const max = Math.ceil(string.length / 500);
        for (let i = 0; i < max; i++) {
            const part = string.substr(i * 500, 500);
            LocalGlobalDataWindow.call("SendAntiCheatDataAimTrace", id, i, max, part);
        }
    }

    static onRender() {

        /*
        mp.game.graphics.drawText(CameraRecorder.debugText.join('\n'), [0.5, 0.005], {
            font: 0,
            color: [255, 255, 255, 185],
            scale: [.2, .2],
            outline: true
        });
         */

        if (!login) return;
        if (Date.now() - CameraRecorder.lastSaveTick < CameraRecorder.SAVE_INTERVAL) return;
        CameraRecorder.lastSaveTick = Date.now();

        const camPosition = CameraRecorder.camera.getCoord();

        CameraRecorder.recordings[CameraRecorder.lastSaveTick] = {
            playerPosition: mp.players.local.position,
            playerHeading: Utility.Round(mp.players.local.getHeading(), CameraRecorder.SAVE_COORDS_ACCURACY),
            cameraPosition: camPosition,
            cameraDirection: CameraRecorder.camera.getDirection(),
            playerPositions: {},
            pedPositions: {},
        }

        let i = 0;
        mp.players.forEachInStreamRange(player => {
            if (player === mp.players.local) return;
            const bones = CameraRecorder.getBonePositionsFromPlayer(player);
            i++;
            CameraRecorder.debugText[0] = `Current Player: ${player.name}`;
            CameraRecorder.debugText[3] = `I = ${i}`;
            if (CameraRecorder.isPlayerTargeted(bones, camPosition, player.position)) {
                CameraRecorder.recordings[CameraRecorder.lastSaveTick].playerPositions[`${player.handle}_${player.name}`] = {
                    name: player.name,
                    position: player.position,
                    heading: player.getHeading(),
                    bones: bones,
                }
            }
        });

        AntiCheatAimBot.NPC_LIST.forEach(ped => {
            if (ped.handle === 0) return;
            const bones = CameraRecorder.getBonePositionsFromPlayer(ped);
            if (CameraRecorder.isPlayerTargeted(bones, camPosition, ped.position)) {
                CameraRecorder.recordings[CameraRecorder.lastSaveTick].pedPositions[`${ped.handle}`] = {
                    name: 'AC_PED',
                    position: ped.position,
                    heading: ped.getHeading(),
                    bones: bones,
                }
            }
        });

        CameraRecorder.debugText[1] = `players = ${Object.keys(CameraRecorder.recordings[CameraRecorder.lastSaveTick].playerPositions).length}`;
        CameraRecorder.debugText[2] = `peds = ${Object.keys(CameraRecorder.recordings[CameraRecorder.lastSaveTick].pedPositions).length}`;

        Object.keys(CameraRecorder.recordings).forEach(timeStamp => {
            timeStamp = parseInt(timeStamp);
            if ((Date.now() - timeStamp) > CameraRecorder.RECORD_DURATION) {
                delete CameraRecorder.recordings[timeStamp];
            }
        });
    };
}

/*
CameraRecorder.init();

VioRageManager.registerConsoleCommand("acsave", () => {
    CameraRecorder.saveRecords();
}, "liveAdmin");
 */

function inside(point, vs) {
    var x = point[0],
        y = point[1];
    var insidepos = false;
    for (var i = 0, j = vs.length - 1; i < vs.length; j = i++) {
        var xi = vs[i][0],
            yi = vs[i][1];
        var xj = vs[j][0],
            yj = vs[j][1];
        var intersect = ((yi > y) != (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);
        if (intersect) insidepos = !insidepos;
    }
    return insidepos;
}
class Gangturf {

    /**
     *
     * @param name
     * @param id
     * @param x
     * @param y
     * @param z
     * @param range
     * @param color
     * @param rot
     * @param owner
     * @param underattack
     */
    constructor(name, id, x, y, z, range, color, rot, owner, underattack) {
        this._setup(name, id, x, y, z, range, color, rot, owner, underattack);
    }

    get status() {
    }

    _setup(name, id, x, y, z, range, color, rot, owner, underattack) {
        var self = this;
        self.name = name;
        self.id = id;
        self.range = range;
        self.color = color;
        self.position = {
            x: x,
            y: y,
            z: z
        };
        self.rotation = rot;
        self.blip = null;
        self._colshape = null;
        self._status = true;
        self._entered = false;
        self._isEntering = false;
        self._inColshape = false;
        self._timerCheck;
        self._owner = owner;
        self.loadArea();

        if (underattack) {
            self.updateArea("attack");
        }
    }

    loadArea() {
        this.blip = mp.game.ui.addBlipForRadius(this.position.x, this.position.y, this.position.z, this.range);
        natives.SET_BLIP_SPRITE(this.blip, 5);

        if (this._owner == 3) {
            natives.SET_BLIP_ALPHA(this.blip, 0);
        } else {
            natives.SET_BLIP_ALPHA(this.blip, 170);
        }

        this._colshape = mp.colshapes.newCircle(this.position.x, this.position.y, this.range * 1.5);
        natives.SET_BLIP_COLOUR(this.blip, this.color);

        natives.SET_BLIP_ROTATION(this.blip, this.rotation)
        natives.SET_BLIP_COORDS(this.blip, this.position.x, this.position.y, this.position.z)
    }

    updateArea(status, ...args) {
        var self = this;
        if (status == "attack") {
            self._status = "attack";
            natives.SET_BLIP_ALPHA(self.blip, 170);
            natives.SET_BLIP_FLASHES(self.blip, true)
            return;
        }
        if (status == "normal") {
            self._status = "normal";
            natives.SET_BLIP_FLASHES(self.blip, false)
            if (self._owner == 3) {
                natives.SET_BLIP_ALPHA(self.blip, 0);
            } else {
                natives.SET_BLIP_ALPHA(self.blip, 170);
            }
            natives.SET_BLIP_FLASHES(self.blip, false)
            return;
        }
        if (status == "conquered") {
            self._status = "conquered";
            self._owner = args[1];
            natives.SET_BLIP_FLASHES(self.blip, false)
            natives.SET_BLIP_COLOUR(self.blip, args[0])
            if (self._owner == 3) {
                natives.SET_BLIP_ALPHA(self.blip, 0);
            } else {
                natives.SET_BLIP_ALPHA(self.blip, 170);
            }
            natives.SET_BLIP_FLASHES(self.blip, false)

        }
    }

    destroy() {
        mp.game.ui.removeBlip(this.blip);
        this._colshape.destroy();
    }

    isTurfArea(shape) {
        return (shape == this._colshape)
    }

    isOwner(gang) {
        return (gang == this._owner)
    }

    check() {
        var self = this;
        if ((!self._entered)) {
            if (self.isInsideArea() && (self.isNearGround() == true)) {
                self._entered = true;
                GangwarScoreboard.setCurrentArea(self)
                CommunicationManager.TriggerServer("OnClientGangAreaEnter", self.id);
            }
        } else if (self._entered == true) {
            if (!self.isInsideArea() || (self.isNearGround() == false)) {
                self._entered = false;
                GangwarScoreboard.setCurrentArea(null)
                CommunicationManager.TriggerServer("OnClientGangAreaLeave", self.id);
            }
        }
    }

    enter() {
        var self = this;
        self._timerCheck = setInterval(function () {
            self.check();
        }, 1000);
    }

    leave() {
        var self = this;
        clearInterval(self._timerCheck);
        self.check();
    }

    isNearGround() {
        let self = this;
        let ground = mp.game.gameplay.getGroundZFor3dCoord(self.position.x, self.position.y, 9000, 0, false);
        let max_diff = 65;
        let dist = mp.game.system.vdist(0, 0, ground, 0, 0, mp.players.local.position.z);
        if (dist <= max_diff) {
            return true;
        }
        return false;
    }

    isInsideArea() {
        var self = this;
        let player = {
            x: mp.players.local.position.x,
            y: mp.players.local.position.y,
            z: mp.players.local.position.z
        };
        var range = Math.sqrt(((self.range * 1.2) * (self.range * 1.2)) + (((self.range * 1.2) / 2) * ((self.range * 1.2) / 2)));
        let degrees = (self.rotation + 45) * (Math.PI / 180);
        let top_right = {
            x: self.position.x + range * Math.cos(degrees),
            y: self.position.y + range * Math.sin(degrees)
        }
        degrees = (self.rotation + 135) * (Math.PI / 180);
        let top_left = {
            x: self.position.x + range * Math.cos(degrees),
            y: self.position.y + range * Math.sin(degrees)
        }
        degrees = (self.rotation + 225) * (Math.PI / 180);
        let bottom_left = {
            x: self.position.x + range * Math.cos(degrees),
            y: self.position.y + range * Math.sin(degrees)
        }
        degrees = (self.rotation + 315) * (Math.PI / 180);
        let bottom_right = {
            x: self.position.x + range * Math.cos(degrees),
            y: self.position.y + range * Math.sin(degrees)
        }
        let turf = [
            [top_right.x, top_right.y],
            [top_left.x, top_left.y],
            [bottom_left.x, bottom_left.y],
            [bottom_right.x, bottom_right.y]
        ]
        if (inside([player.x, player.y], turf) && mp.players.local.dimension === 0) {
            return true;
        }
        return false;
    }
}

//
var gangturfs = [];
mp.events.add("playerEnterColshape", function (shape) {
    let turfEntered;
    gangturfs.forEach(function (turf, id) {
        if (turf.isTurfArea(shape) == true) {
            turfEntered = turf;
        }
    });
    if (turfEntered) {
        if (turfEntered.isTurfArea(shape)) {
            turfEntered.enter()
        }
    }
});
mp.events.add("playerExitColshape", function (shape) {
    let turfExitted;
    gangturfs.forEach(function (turf, id) {
        if (turf.isTurfArea(shape) == true) {
            turfExitted = turf;
        }
    });
    if (turfExitted) {
        if (turfExitted.isTurfArea(shape)) {
            turfExitted.leave()
        }
    }
});
mp.events.add('render', () => {
    GangwarScoreboard.render();
})
CommunicationManager.AddServerEvent("CreateGangAreas", function (turfs) { // Change To CreateGangAreas
    natives.SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT(true);
    let last_blip = natives.GET_FIRST_BLIP_INFO_ID(5);
    while (natives.DOES_BLIP_EXIST(last_blip)) {
        mp.game.ui.removeBlip(last_blip);
        last_blip = natives.GET_NEXT_BLIP_INFO_ID(5);
    }

    setTimeout(function () {
        turfs = JSON.parse(turfs);
        for (k in turfs) {
            let turf = turfs[k]
            gangturfs[gangturfs.length + 1] = new Gangturf(turf.Name, turf.ID, turf.Position.x, turf.Position.y, turf.Position.z, turf.Range, turf.Color, turf.Rotation, turf.OwnerID, turf.IsUnderAttack)
        }
    }, 2000);
});
/*
// Update TODO: Display Player list for Gangwar selected players.
*/
CommunicationManager.AddWebBrowserEvent("initGangwarScoreboard", function () {
    if (GangwarScoreboard.window != null) {
        GangwarScoreboard.windowReady();
    }
});
GangwarScoreboard = new class {
    constructor() {
        this._setup();
    }

    get window() {
        return this._window
    }

    _setup() {
        var self = this;
        self._curArea = "";
        self._area = null;
        self._turfScores = [];
        self._window = null;
        self._windowReady = false;
        self._isShowing = false;
    }

    windowReady() {
        let self = this;
        self._windowReady = true;
        if (self._area != null) {
            if (self._area.isInsideArea()) {
                let area_id = self._area.id;
                let scores = self._turfScores[area_id];
                if (scores != null) {
                    if ((self._window != null) && (self._windowReady == true)) {
                        self._window.call("loadGangwarScoreboard", scores.attacker, scores.defender, /*Attack Members*/ scores.attacker_member, /*Defend Members*/  scores.defender_member, !scores.isDefending)
                    }
                }
            }
        }
    }

    createScoreboard() {
        let self = this;
        if (self._window == null) {
            self._window = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/gangwar_display/index.html", false);
        }
    }

    destroyScoreboard() {
        let self = this;
    }

    setTurfScores(turf_id, isDefending, atk, def, atk_members, def_members) {
        if (Object.keys(this._turfScores).length == 0) {
            this.createScoreboard();
        }
        this._turfScores[turf_id] = {
            attacker: atk,
            defender: def,
            isDefending: isDefending,
            attacker_member: JSON.parse(atk_members),
            defender_member: JSON.parse(def_members),
        }
        if (this._area != null) {
            if (this._area.id == turf_id) {
                if (this._area.isInsideArea()) {
                    let scores = this._turfScores[turf_id];
                    if (scores != null) {
                        if ((this._window != null) && (this._windowReady == true)) {
                            this._window.call("loadGangwarScoreboard", scores.attacker, scores.defender, /*Attack Members*/ scores.attacker_member, /*Defend Members*/  scores.defender_member, !scores.isDefending)
                        }
                    }
                }
            }
        }
    }

    clearTurfScores(turf_id) {
        this._turfScores[turf_id] = null;
        delete this._turfScores[turf_id];
        if (this._window) {
            if (Object.keys(this._turfScores).length == 0) {
                this._window.destroy();
                this._window = null;
                this._windowReady = false;
            }
        }
    }

    setCurrentArea(area) {
        this._area = area;
        if (this._area != null) {
            let scores = this._turfScores[this._area.id];
            if (scores != null) {
                if ((this._window != null) && (this._windowReady == true)) {
                    this._window.call("loadGangwarScoreboard", scores.attacker, scores.defender, /*Attack Members*/ scores.attacker_member, /*Defend Members*/  scores.defender_member, !scores.isDefending)
                }
            }
        } else {
            this._isShowing = false;
            if ((this._window != null) && (this._windowReady == true)) {
                this._window.call("hideGangwarScoreboard");
            }
        }
    }

    render() {
        var self = this;
        if (self._area != null) {
            if (self._area.isInsideArea()) {
                let area_id = self._area.id;
                if (self._turfScores[area_id]) {
                    if ((self._window != null) && (self._windowReady == true)) {
                        if (mp.keys.isDown(0x59)) {
                            if (self._isShowing == false) {
                                self._isShowing = true;
                                self._window.call("showGangwarScoreboard");
                            }
                            mp.game.controls.disableControlAction(2, 99, true);
                            mp.game.controls.disableControlAction(2, 100, true);
                            mp.game.controls.disableControlAction(2, 115, true);
                            mp.game.controls.disableControlAction(2, 116, true);
                            mp.game.controls.disableControlAction(2, 85, true);
                            mp.game.controls.disableControlAction(2, 16, true);
                            mp.game.controls.disableControlAction(2, 17, true);

                            if (mp.game.controls.isDisabledControlJustPressed(2, 16)) {
                                //Scroll Down
                                self._window.call("scrollDown");
                            } else if (mp.game.controls.isDisabledControlJustPressed(2, 17)) {
                                // Scroll Up
                                self._window.call("scrollUp");
                            }
                        } else {
                            if (self._isShowing == true) {
                                self._isShowing = false;
                                self._window.call("hideGangwarScoreboard");
                            }
                        }
                    }
                }
            }
        }
    }

    shouldDisplayGangwarScoreboard() {
        if (this._area != null) {
            if (this._area.isInsideArea()) {
                let area_id = this._area.id;
                if (this._turfScores[area_id]) {
                    if ((this._window != null) && (this._windowReady == true)) {
                        return true;
                    } else {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    isPlayerInGangwar() {
        if (this._area != null) {
            if (this._area.isInsideArea()) {
                let area_id = this._area.id;
                if (this._turfScores[area_id]) {
                    return true;
                } else {
                    return false;
                }
            } else {
                return false;
            }
        } else {
            return false;
        }
    }
}

CommunicationManager.AddServerEvent("OnGangAreaUpdate", function (id, attacker_score, owner_count, attacker_id, owner_id, attacker_players, owner_players) {
    gangturfs.forEach(function (turf) {
        if (id == turf.id) {
            GangwarScoreboard.setTurfScores(turf.id, turf.isOwner(LocalGroupID), attacker_score, owner_count, attacker_players, owner_players)
            turf.updateArea("attack")
        }
    });
})

CommunicationManager.AddServerEvent("OnGangAreaStart", function (id) {
    gangturfs.forEach(function (turf) {
        if (id == turf.id) {
            turf.updateArea("attack")
        }
    });
});

CommunicationManager.AddServerEvent("OnGangAreaFinish", function (id, color, newOwner) {
    gangturfs.forEach(function (turf) {
        if (id == turf.id) {
            turf.updateArea("conquered", color, newOwner)
            GangwarScoreboard.clearTurfScores(id)
        }
    });
});

CommunicationManager.AddWebBrowserEvent("ClientRequestCloseGangwarSlots", function () {
    if ('GangwarSlots' in Webwindow) {
        Webwindow["GangwarSlots"].active(false);
        setTimeout(() => {
            Webwindow["GangwarSlots"].destroy();
            delete Webwindow["GangwarSlots"];
            delete TempArguments["GangwarSlotsData"];
        }, 10);
    }

}, "GangwarSlots");
CommunicationManager.AddWebBrowserEvent("ClientRequestSaveGangwarSlots", function (area_id, unlocked_players) {
    Webwindow["GangwarSlots"].active(false);
    setTimeout(() => {
        Webwindow["GangwarSlots"].destroy();
        delete Webwindow["GangwarSlots"];
        TempArguments["GangwarSlotsData"] = null;
        let id = area_id;
        let members = JSON.parse(unlocked_players);
        if (id.toString().includes('bank') || id.toString().includes('ammu')) {
            CommunicationManager.TriggerServer("OnClientRequestOperationOwnerSet", id, JSON.stringify(members));
        } else {
            CommunicationManager.TriggerServer("OnClientRequestGangOwnerAdd", id, JSON.stringify(members));
        }
    }, 10);
}, "GangwarSlots");
CommunicationManager.AddServerEvent("OnPlayerOpenedGangOwnerWindow", function (JSON_GroupMembers, AreaID, AttackerCount, JSON_SetMembers) {
    Webwindow["GangwarSlots"] = new CEFBrowser(`https://vio-v.com/gameplay/CEF/${CEF_Master_Link}/html/gangwar_set/index.html`, true);
    Webwindow["GangwarSlots"].start('loadGangwarData', AreaID, JSON.parse(JSON_GroupMembers), AttackerCount, JSON.parse(JSON_SetMembers))
});

CommunicationManager.AddServerEvent('OnPlayerOpenOperationSlots', (JSON_GroupMembers, JSON_GroupMembers2, AreaID, AttackerCount, JSON_SetMembers) => {
    if ('GangwarSlots' in Webwindow) {
        Webwindow["GangwarSlots"].destroy();
        delete Webwindow["GangwarSlots"];
    }

    JSON_GroupMembers = JSON.parse(JSON_GroupMembers);
    JSON_GroupMembers2 = JSON.parse(JSON_GroupMembers2);

    const memberData = {
        members: {
            ...JSON_GroupMembers.members,
            ...JSON_GroupMembers2.members,
        },
        online: {
            ...JSON_GroupMembers.online,
            ...JSON_GroupMembers2.online,
        }
    };

    Webwindow["GangwarSlots"] = new CEFBrowser(`https://vio-v.com/gameplay/CEF/${CEF_Master_Link}/html/gangwar_set/index.html`, true);
    Webwindow["GangwarSlots"].start('loadCopData', AreaID, memberData, AttackerCount, JSON.parse(JSON_SetMembers));
});

let FightClubInteractionKeyTimeout;
let FightClubInteractionKeyTimeoutStartPosition;

var FightClubCamName = "";
var FightClubPlayers = [];
var FightClubTeam = -9;
var FightClubGamemode = "";
var FightClubTeamBlips = {};

CommunicationManager.AddServerEvent("SentClientFightClubLobbys", (raw_lobbies) => {
    if(Webwindow["FightClubMenu"] == null){
        const lobbies = JSON.parse(raw_lobbies);
        Webwindow["FightClubMenu"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/fightclub/menu/fightclub_menu.html", true, false);

        Object.keys(lobbies).forEach(key => {
            const data = lobbies[key];
            data.Weapons = data.Weapons.map(hash => "weapon_" + weapon_data.getWeaponName(hash));
        });

        Webwindow["FightClubMenu"].start("init", lobbies);
    }
});
CommunicationManager.AddServerEvent("UpdateClientFightClubLobbys", (raw_lobbies) => {
    if (!Webwindow["FightClubMenu"]) return;
    const lobbies = JSON.parse(raw_lobbies);
    Object.keys(lobbies).forEach(key => {
        const data = lobbies[key];
        data.Weapons = data.Weapons.map(hash => "weapon_" + weapon_data.getWeaponName(hash));
    });
    Webwindow["FightClubMenu"].call("updateLobbies", lobbies);
});

CommunicationManager.AddServerEvent("OnClientSetFightClubSpawnProtection", (target_name) => {
    let timestamp = Number((Date.now() / 1000) + 4);
    FightClubSpawnProtection[target_name] = timestamp;
    //VioRageManager.SendChatMessage("Spawnprotection " + target_name + " erstellt!");
});

CommunicationManager.AddServerEvent("OnClientRequestLeaveFightClub", () => {

    if(mp.players.local.isDead() == true || isPlayerFrozen == true){
        CommunicationManager.TriggerServer("OnClientRequestLeaveFightClub");
        return;
    }

    let timestamp = Number((Date.now() / 1000));

    if(FightClubSpawnProtection[mp.players.local.name] != null){
        if(FightClubSpawnProtection[mp.players.local.name] >  timestamp){
            CommunicationManager.TriggerServer("OnClientRequestLeaveFightClub");
            return;
        }
    }

    if((FightClubLastHit + 10) >=  timestamp){
        CreateNotify("~r~Das Verlassen des FightClubs ist erst 10 Sekunden nach dem letzten Kampfschaden möglich!");
    }else{
        CommunicationManager.TriggerServer("OnClientRequestLeaveFightClub");
        return;
    }
});

function ReplaceAllFightClubObjects() {

    for (let o_index in FightClubLootObjects) {
        if (FightClubLootObjects[o_index] != null) {
            if ( FightClubLootObjects[o_index]._isFakePickup == null && FightClubLootObjects[o_index]._PosX != null && FightClubLootObjects[o_index]._PosY != null && FightClubLootObjects[o_index]._PosZ != null) {
                FightClubLootObjects[o_index].setCoords(FightClubLootObjects[o_index]._PosX, FightClubLootObjects[o_index]._PosY, FightClubLootObjects[o_index]._PosZ, true, false, false, false);
            }
        }
    }
}

function CreateFightClubLootBox(object_id, dim) {
    if (IsPlayerInFightClub == true) {
        if (FightClubLootItems[object_id] != null) {
            let hash = FightClubLootItems[object_id].Hash;

            if(hash == "ch_prop_box_ammo01a" || hash == "prop_box_ammo04a" || hash == "xm_prop_x17_boxwood_01" || hash == "prop_box_ammo03a" || hash == "prop_box_ammo07b"){
               FightClubLootItems[object_id].Pos.z = FightClubLootItems[object_id].Pos.z - 0.60;
            }

            let TempObject = mp.objects.new(mp.game.joaat(hash), new mp.Vector3(FightClubLootItems[object_id].Pos.x, FightClubLootItems[object_id].Pos.y, FightClubLootItems[object_id].Pos.z), {
                dimension: dim,
                rotation: new mp.Vector3(FightClubLootItems[object_id].Rot.x, FightClubLootItems[object_id].Rot.y, FightClubLootItems[object_id].Rot.z),
                alpha: 255
            })
            //TempObject.placeOnGroundProperly();
            TempObject._LootID = object_id;

            TempObject._PosX = FightClubLootItems[object_id].Pos.x;
            TempObject._PosY = FightClubLootItems[object_id].Pos.y;
            TempObject._PosZ = FightClubLootItems[object_id].Pos.z;

            if (hash == "prop_ld_ammo_pack_02" || hash.includes("w_") || hash.Hash == "prop_ld_health_pack" || hash.Hash == "prop_armour_pickup" || hash.Hash == "p_parachute_s_shop" || hash.Hash == "p_meth_bag_01_s") {
                TempObject._isFakePickup = true;
            }
            FightClubLootObjects[object_id] = TempObject;
        }
    }
}

mp.events.add("render", () => {
    if (ActiveFightClub != null) {
        if (ActiveFightClub.name != "") {
            if (FightClubCamName != "" && FightClubSpectatorCam != null) {
                mp.players.forEachInStreamRange(function (player) {
                    if (player.name.toUpperCase() == FightClubCamName.toUpperCase()) {
                        let pos = player.position;
                        FightClubSpectatorCam.attachTo(player.handle, 0.0, -3.0, 1.0, true);
                        FightClubSpectatorCam.pointAtCoord(pos.x, pos.y, pos.z + 0.25);
                        FightClubSpectatorCam.setActive(true);
                        mp.game.cam.renderScriptCams(true, false, 0, true, false);
                        mp.players.local.position = new mp.Vector3(pos.x, pos.y, pos.z - 30);
                    }
                });
            }
            if (FightClubGamemode == "ffa") {
                mp.players.forEachInStreamRange(function (player) {
                    if (FightClubSpawnProtection[player.name] != null) {
                        let timestamp = Number(Date.now() / 1000);
                        if (FightClubSpawnProtection[player.name] >= timestamp) {
                            player.setAlpha(100);
                        } else {
                            //VioRageManager.SendChatMessage("Spawnprotection " + player.name + " aufgehoben!");
                            FightClubSpawnProtection[player.name] = null;
                            player.setAlpha(255);
                        }
                    } else {
                        player.setAlpha(255);
                    }
                });
            }
            if (FightClubGamemode == "gw") {
                mp.players.forEachInStreamRange(function (player) {
                    if (FightClubTeamBlips[player.name] != null) {
                        if (FightClubTeamBlips[player.name] == "init") {
                            //VioRageManager.SendChatMessage("Team Blip " + player.name + " inizialisiert!");
                            FightClubTeamBlips[player.name] = mp.blips.new(1, player.position, {
                                color: 85,
                                scale: 0.60,
                                name: player.name,
                                dimension: mp.players.local.dimension,
                                shortRange: true
                            })
                        } else {
                            if (player.isDead() == true) {
                                FightClubTeamBlips[player.name].setSprite(310);
                                FightClubTeamBlips[player.name].setAlpha(125);
                            } else {
                                FightClubTeamBlips[player.name].setCoords(player.position);
                                FightClubTeamBlips[player.name].setSprite(1);
                                FightClubTeamBlips[player.name].setAlpha(255);
                            }
                            let color = 85
                            if (FightClubTeam == 1) {
                                color = 1
                            }
                            if (FightClubTeam == 2) {
                                color = 38
                            }
                            FightClubTeamBlips[player.name].setColour(color);
                        }
                    }
                });
            }
        }
    }
})

mp.events.add("entityStreamOut", (entity) => {
    if (IsPlayerInFightClub == true) {
        if (entity.type === "player") {
            if (entity.name != null) {
                if (FightClubTeamBlips[entity.name] != null) {
                    if (FightClubTeamBlips[entity.name] != "init") {
                        FightClubTeamBlips[entity.name].setAlpha(0);
                    }
                }
            }
        }
    }
});

function SetPlayerOutOfFightClubSpectate() {
    if (FightClubSpectatorCam != null && FightClubCamName != "") {
        //VioRageManager.SendChatMessage("FINISH SPEC = " + FightClubCamName);

        VioRageManager.ShowChat(true);
        VioRageManager.ActivateChat(true);
        mp.game.ui.displayRadar(true);

        FightClubCamName = "";
        FightClubSpectatorCam.setActive(false);
        FightClubSpectatorCam.destroy();
        FightClubSpectatorCam = null;
        mp.game.cam.renderScriptCams(false, false, 0, true, false);
        mp.gui.cursor.visible = false;
        if (Webwindow["FightClubHUD"] != null) {
            Webwindow["FightClubHUD"].call("hideSpectateBar");
        }
    }
}

function SetPlayerIntoFightClubSpectate(target_name) {
    if (IsPlayerInFightClub == true) {
        //VioRageManager.SendChatMessage("SetPlayerIntoFightClubSpectate : " + target_name);
        CommunicationManager.TriggerServer("OnClientRequestFightClubPlayerPosition", target_name);
    }
}

CommunicationManager.AddServerEvent("OnFightClubForceToSpectator", (game_raw) => {
    if (IsPlayerInFightClub == true) {
        let FinalSpecPlayer = "-";

        var game_data = JSON.parse(game_raw);
        FightClubPlayers = game_data.Players;

        Object.values(FightClubPlayers).forEach(playerData => {
            if (mp.players.local.name == playerData.Name) {
                FightClubTeam = playerData.Team;
            }
        });

        //VioRageManager.SendChatMessage("OnFightClubForceToSpectator : FightClubTeam : " + FightClubTeam);

        Object.values(FightClubPlayers).forEach(playerData => {
            if (playerData.Dead == false && playerData.Team == FightClubTeam) {
                FinalSpecPlayer = playerData.Name;
            }
        });

        //VioRageManager.SendChatMessage("OnFightClubForceToSpectator : FinalSpecPlayer : " + FinalSpecPlayer);

        if (FinalSpecPlayer != "-") {
            SetPlayerIntoFightClubSpectate(FinalSpecPlayer);
        } else {
            //VioRageManager.SendChatMessage("ERROR: OnFightClubForceToSpectator : FinalSpecPlayer");
        }
    } else {
        //VioRageManager.SendChatMessage("ERROR: OnFightClubForceToSpectator : IsPlayerInFightClub");
    }
});


CommunicationManager.AddServerEvent("OnFightClubSendToSpectator", (target_name, target_position_raw) => {
    if (IsPlayerInFightClub == true) {

        //VioRageManager.SendChatMessage("OnFightClubSendToSpectator : " + target_name);

        SetPlayerOutOfFightClubSpectate();

        var target_pos = JSON.parse(target_position_raw);

        mp.players.forEach(function (player) {
            if (player.name.toUpperCase() == target_name.toUpperCase()) {
                //VioRageManager.SendChatMessage("OnFightClubSendToSpectator : " + target_name);

                let tdist = mp.game.system.vdist2(player.position.x, player.position.y, player.position.z, mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z);
                //VioRageManager.SendChatMessage("SPEC = " + player.name + " DIST: " + tdist);
                VioRageManager.ShowChat(false);
                VioRageManager.ActivateChat(false);
                mp.game.ui.displayRadar(false);

                teleportCheck.freezeTimer(8);
                LastTeleportPosition = target_pos;
                mp.players.local.position = new mp.Vector3(target_pos.x, target_pos.y, target_pos.z - 30);

                FightClubCamName = target_name;

                FightClubSpectatorCam = mp.cameras.new('default');
                FightClubSpectatorCam.attachTo(player.handle, 0.0, -3.0, 1.0, true);
                FightClubSpectatorCam.setActive(true);

                mp.gui.cursor.visible = true;
                mp.game.cam.renderScriptCams(true, false, 0, true, false);

                if (Webwindow["FightClubHUD"] != null) {
                    Webwindow["FightClubHUD"].call("setSpectateBar", FightClubCamName);
                }
            }
        });
    }
});


CommunicationManager.AddServerEvent("SentClientFightClubGameInformation", (game_raw) => {
    if (!Webwindow["FightClubHUD"]) return;
    Webwindow["FightClubHUD"].call("setData", game_raw, mp.players.local.name);

    var force_to_spectate = false;
    var game_data = JSON.parse(game_raw);
    FightClubPlayers = game_data.Players;

    Object.values(FightClubPlayers).forEach(playerData => {
        if (FightClubCamName == playerData.Name) {
            if (playerData.Dead == true) {
                force_to_spectate = true;
            }
        }
        if (mp.players.local.name == playerData.Name) {
            FightClubTeam = playerData.Team;
        }
    });

    if (FightClubGamemode == "gw") {
        Object.values(FightClubPlayers).forEach(playerData => {
            if (mp.players.local.name != playerData.Name) {
                if (FightClubTeam == playerData.Team && playerData.Dead == false) {
                    if (FightClubTeamBlips[playerData.Name] == null) {
                        FightClubTeamBlips[playerData.Name] = "init";
                        //VioRageManager.SendChatMessage("Team Blip " + playerData.Name + " angefordert!");
                    }
                }
            }
        });
    }

    if (force_to_spectate) {
        let FinalSpecPlayer = "";
        Object.values(FightClubPlayers).forEach(playerData => {
            if (playerData.Dead == false && playerData.Team == FightClubTeam) {
                FinalSpecPlayer = playerData.Name;
            }
        });
        if (FinalSpecPlayer != "") {
            SetPlayerIntoFightClubSpectate(FinalSpecPlayer);
        }
    }
});

CommunicationManager.AddWebBrowserEvent("OnClientRequestFightClub", (...args) => {
    if (args.length < 1) return;
    if (Webwindow["FightClubMenu"].isAtStartPosition) {
        switch (args[0]) {
            case "close":
                Webwindow["FightClubMenu"].destroy();
                delete Webwindow["FightClubMenu"];
                break;
            case "joinLobby": // args[1]: lobbyId
                if (args.length < 3) return;

                const [, lobbyId, joinPassword] = args;

                CommunicationManager.TriggerServer("OnClientRequestFightClubJoinLobby", lobbyId, joinPassword);
                Webwindow["FightClubMenu"].destroy();
                delete Webwindow["FightClubMenu"];
                break;
            case "requestCreate":
                CommunicationManager.TriggerServer("OnClientRequestFightClubCreationDetails");
                break;
            case "createLobby":
                if (args.length < 7) return;
                const [_, mapName, gameMode, _weapons, maxPlayers, createPassword, name] = args;

                const weapons = JSON.parse(_weapons);

                if (!(/^[\x00-\x7F]+$/gim).test(name) || name.length > 20) {
                    CreateNotify("~r~Der angegebene Name ist ungültig!");
                    return;
                }

                if (!(/^[\x00-\x7F]+$/gim).test(createPassword) && createPassword != "") {
                    CreateNotify("~r~Das angegebene Passwort ist ungültig!");
                    return;
                }

                const weaponsData = weapons.map((weaponName) => {
                    return Number(weapon_data.getHashByName(weaponName));
                });

                CommunicationManager.TriggerServer("OnClientRequestFightClubCreateLobby", mapName, gameMode, JSON.stringify(weaponsData), maxPlayers, createPassword, name);

                Webwindow["FightClubMenu"].destroy();
                delete Webwindow["FightClubMenu"];
                break;
            case "joinBattleRoyalQueue":
                CommunicationManager.TriggerServer("OnClientRequestFightClubJoinBattleRoyalWaitingRoom");
                Webwindow["FightClubMenu"].destroy();
                delete Webwindow["FightClubMenu"];
                break;
            case "updateLobbiesList":
                CommunicationManager.TriggerServer("OnClientRequestFightClubMenuUpdate");
                break;
        }
    }else{
        Webwindow["FightClubMenu"].destroy();
        delete Webwindow["FightClubMenu"];
    }
}, "FightClubMenu");

CommunicationManager.AddServerEvent("SentClientFightClubCreationDetails", (maps) => {
    if (!Webwindow.hasOwnProperty("FightClubMenu")) return;

    const weaponHashes = Object.keys(weapon_data.hashes).filter((hash) => {
        const obj = weapon_data.hashes[hash];
        return obj.hash != -1;
    });

    const weaponData = {};

    const noWeapon = ["weapon_flashlight", "fireextinguisher", "animation", "weapon_unarmed", "parachute", "vehicle", "minismg", "weapon_machete"];

    let string = "";

    weaponHashes.forEach((hash) => {
        const obj = weapon_data.hashes[hash];
        if (noWeapon.includes(obj.name))
            return;

        if (!weaponData.hasOwnProperty(obj.category))
            weaponData[obj.category] = [];
        weaponData[obj.category].push(obj);

        string += obj.name + "\n";
    });

    Webwindow["FightClubMenu"].call("openCreateWindow", maps, weaponData);
});


CommunicationManager.AddServerEvent("OnClientFightClubLobbyUpdateBattleRoyalWaitingRoom", (...args) => {
    if (!Webwindow["FightClubQueue"]) {
        Webwindow["FightClubQueue"] = new CEFBrowser(`https://vio-v.com/gameplay/CEF/${CEF_Master_Link}/html/fightclub/queue/fightclub_queue.html`, true, false);
        Webwindow["FightClubQueue"].start("init", ...args);
    } else {
        Webwindow["FightClubQueue"].call("init", ...args);
    }
});

CommunicationManager.AddWebBrowserEvent("OnClientRequestFightClubLeaveBattleRoyalWaitingRoom", () => {
    CommunicationManager.TriggerServer("OnClientRequestFightClubLeaveBattleRoyalWaitingRoom");
    Webwindow["FightClubQueue"].destroy();
    delete Webwindow["FightClubQueue"];
}, "FightClubQueue");

CommunicationManager.AddWebBrowserEvent("OnClientRequestFightClubLeaveBattleRoyalFromHud", () => {
    CommunicationManager.TriggerServer("OnClientRequestFightClubLeaveBattleRoyal");
}, "FightClubHUD");

function CloseClientFightClubPlayerlist() {
    if (!Webwindow["FightClubHUD"]) return;
    Webwindow["FightClubHUD"].call("hideList");
}

RenderFightClubObject = {};

function OpenClientFightClubPlayerlist() {
    Webwindow["FightClubHUD"].call("showList");
}

var ActiveFightClub = null;

var FightClub = class {

    constructor() {
        var self = this;
        self.name = "";
        self.debug = 0;
        self.positions = null;
        self.lastenter = (Date.now() / 1000);
        self.e_position = null;
        self.e_temp_positions = null;
        self.e_radius = 0;
    }

    createEllipse(name, pos, radius) {
        var self = this;
        self.name = name;
        self.debug = 0;
        self.positions = null;
        self.lastenter = (Date.now() / 1000);
        self.e_position = pos;
        self.e_temp_positions = Utility.getPointsOfEllipse(self.e_position.x, self.e_position.y, radius, radius, 50);
        self.e_radius = radius;
        self.typ = "Ellipse";
    }

    createSquare(name, posis, debug) {
        var self = this;
        self.name = name;
        self.debug = debug;
        self.positions = posis;
        self.lastenter = (Date.now() / 1000);
        self.e_position = null;
        self.e_temp_positions = null;
        self.e_radius = 0;
        self.typ = "Square";
    }

    stop() {
        var self = this;
        self.name = "";
        self.debug = 0;
        self.typ = "";
        self.positions = null;
        self.lastenter = (Date.now() / 1000);
        self.e_position = null;
        self.e_temp_positions = null;
        self.e_radius = 0;
    }

    renderEllipse() {

        let r = 150;
        let g = 150;
        let b = 150;
        let alpha = 130
        var self = this;

        if (self.debug == 0) {

            //mp.game.streaming.setHdArea(self.e_position.x, self.e_position.y, 0.0, self.e_radius);

            if (self.isPositionInsideEllipse(self.e_position.x, self.e_position.y, self.e_radius, self.e_radius, mp.players.local.position) == false && FightClubSpectatorCam == null) {
                var lenter = (Date.now() / 1000) - self.lastenter;
                lenter = 15 - lenter;
                lenter = Math.round(lenter * 10) / 10;
                mp.game.graphics.drawText(lenter, [0.50, 0.30], {
                    font: 7,
                    color: [255, 0, 0, 255],
                    scale: [0.60, 0.60],
                    outline: false,
                    centre: false
                });
                g = 0;
                b = 0;
                alpha = 200
                if (lenter <= 0) {
                    mp.players.local.applyDamageTo(200, true);
                    mp.players.local.applyDamageTo(200, false);
                    self.lastenter = (Date.now() / 1000);
                }
            } else {
                self.lastenter = (Date.now() / 1000);
            }
        }

        const groundZ = mp.players.local.position.z - 2;
        for (let z = groundZ; z < groundZ + 8; z += 0.5) {
            for (let i = 0; i < self.e_temp_positions.length - 1; i++) {
                const {x: x1, y: y1} = self.e_temp_positions[i];
                const {x: x2, y: y2} = self.e_temp_positions[i + 1];
                mp.game.graphics.drawLine(x1, y1, z, x2, y2, z, r, g, b, alpha);
            }
            const {x: x1, y: y1} = self.e_temp_positions[0];
            const {x: x2, y: y2} = self.e_temp_positions[self.e_temp_positions.length - 1];
            mp.game.graphics.drawLine(x1, y1, z, x2, y2, z, r, g, b, alpha);
        }
    }

    renderSquare() {
        var self = this;
        if (self.positions != null) {
            if (self.positions["top_right"] != null && self.positions["bottom_right"] != null && self.positions["bottom_left"] != null && self.positions["top_left"] != null) {
                let z = mp.game.gameplay.getGroundZFor3dCoord(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, 0, false);
                z = z - 20
                let r = 150;
                let g = 150;
                let b = 150;
                let alpha = 130

                if (self.debug == 0) {
                    if (self.isInsideArea() == false && FightClubSpectatorCam == null) {
                        var lenter = (Date.now() / 1000) - self.lastenter;
                        lenter = 5 - lenter;
                        lenter = Math.round(lenter * 10) / 10;
                        mp.game.graphics.drawText(lenter, [0.50, 0.30], {
                            font: 7,
                            color: [255, 0, 0, 255],
                            scale: [0.60, 0.60],
                            outline: false,
                            centre: false
                        });
                        g = 0;
                        b = 0;
                        alpha = 200
                        if (lenter <= 0) {
                            mp.players.local.applyDamageTo(200, true);
                            mp.players.local.applyDamageTo(200, false);
                            self.lastenter = (Date.now() / 1000);
                        }
                    } else {
                        self.lastenter = (Date.now() / 1000);
                    }
                }

                for (var i = z; i < z + 28; i += 0.5) {
                    mp.game.graphics.drawLine(self.positions["top_left"].x, self.positions["top_left"].y, i, self.positions["top_right"].x, self.positions["top_right"].y, i, r, g, b, alpha);
                    mp.game.graphics.drawLine(self.positions["top_right"].x, self.positions["top_right"].y, i, self.positions["bottom_right"].x, self.positions["bottom_right"].y, i, r, g, b, alpha);
                    mp.game.graphics.drawLine(self.positions["bottom_right"].x, self.positions["bottom_right"].y, i, self.positions["bottom_left"].x, self.positions["bottom_left"].y, i, r, g, b, alpha);
                    mp.game.graphics.drawLine(self.positions["bottom_left"].x, self.positions["bottom_left"].y, i, self.positions["top_left"].x, self.positions["top_left"].y, i, r, g, b, alpha);
                }
            }
        }
    }

    render() {
        if (this.typ == "Square") {
            if (mp.players.local.isDead() == false) {
                this.renderSquare();
            }
        } else if (this.typ == "Ellipse") {
            if (mp.players.local.isDead() == false) {
                this.renderEllipse();
            }
        }
    }

    isInsideArea() {
        var self = this;
        let player = {
            x: mp.players.local.position.x,
            y: mp.players.local.position.y,
            z: mp.players.local.position.z
        };
        let turf = [
            [self.positions["top_right"].x, self.positions["top_right"].y],
            [self.positions["top_left"].x, self.positions["top_left"].y],
            [self.positions["bottom_left"].x, self.positions["bottom_left"].y],
            [self.positions["bottom_right"].x, self.positions["bottom_right"].y]
        ]
        if (inside([player.x, player.y], turf)) {
            return true;
        }
        return false;
    }

    isPositionInsideEllipse(originX, originY, radiusX, radiusY, checkPosition) {
        const x = checkPosition.x;
        const y = checkPosition.y;
        return (Math.pow(x - originX, 2) / Math.pow(radiusX, 2)) + (Math.pow(y - originY, 2) / Math.pow(radiusY, 2)) <= 1;
    }
}

var FightClubUsedWeapons = {};

mp.events.add('playerWeaponShot', (targetPosition, targetEntity) => {
    var c_weapon = mp.players.local.weapon;
    if (FightClubUsedWeapons[c_weapon] == null) {
        FightClubUsedWeapons[c_weapon] = true;
    }
});


mp.events.add('render', () => {
    if (ActiveFightClub != null) {
        if (ActiveFightClub.name != "") {
            ActiveFightClub.render();
        }
    }
});

var FightClubLootItems = {};
var FightClubLootObjects = {};
var FightClubLootColshapes = {};

function CreateCargoPlane(drop_pos) {

    var FightClubPlane = mp.vehicles.new(mp.game.joaat("cargobob"), new mp.Vector3(drop_pos.x, drop_pos.y, drop_pos.z + 100), {
        heading: 0,
        engine: true,
        dimension: mp.players.local.dimension
    })
    var FightClubPed = VioRageManager.CreatePed(mp.game.joaat("s_m_m_trucker_01"), new mp.Vector3(drop_pos.x, drop_pos.y, drop_pos.z + 100), 0.0, mp.players.local.dimension, false);

    IsRageMpVehicleReady(FightClubPlane, 5000, function (isreadytrailer) {
        if (FightClubPlane != null && isreadytrailer) {

            // FightClubPlane.freezePosition(false);
            VioRageManager.FreezePosition(FightClubPlane, false);

            IsRageMpPedReady(FightClubPed, 5000, function (isreadyped) {
                if (FightClubPed != null && FightClubPlane != null && isreadyped) {

                    FightClubPed.setInvincible(true);
                    FightClubPed.setCanBeDamaged(false);
                    FightClubPed.setProofs(true, true, true, true, true, true, true, true);
                    // FightClubPed.freezePosition(false);
                    VioRageManager.FreezePosition(FightClubPed, false);
                    FightClubPed.setIntoVehicle(FightClubPlane.handle, -1);

                    FightClubPed.taskVehicleDriveToCoord(FightClubPlane.handle, drop_pos.x - 50, drop_pos.y, drop_pos.z + 200, 20.0, 1.0, mp.game.joaat("cargobob"), 786603, 1.0, true);
                }
            });

        }
    });

    var FightClubTempBlip = mp.blips.new(94, new mp.Vector3(drop_pos.x, drop_pos.y, drop_pos.z), {
        color: 4,
        name: "Lootdrop",
        dimension: mp.players.local.dimension,
        shortRange: true
    });

    setTimeout(function () {
        if (FightClubPlane != null) {
            FightClubPlane.destroy();
            FightClubPlane = null;
        }
        if (FightClubPed != null) {
            FightClubPed.destroy();
            FightClubPed = null;
        }
        if (FightClubTempBlip != null) {
            FightClubTempBlip.destroy();
            FightClubTempBlip = null;
        }
    }, 45000);
}

function RemoveAllFightClubObjects() {

    for (let o_index in FightClubLootObjects) {
        if (FightClubLootObjects[o_index] != null) {
            FightClubLootObjects[o_index].destroy();
            delete FightClubLootObjects[o_index];
        }
    }

    FightClubLootObjects = {};
}

function RemoveAllFightClubBlips() {
    for (let o_index in FightClubTeamBlips) {
        if (FightClubTeamBlips[o_index] != null) {
            if (FightClubTeamBlips[o_index] != "init") {
                FightClubTeamBlips[o_index].destroy();
                delete FightClubTeamBlips[o_index];
            }
        }
    }
    FightClubTeamBlips = {};
}

CommunicationManager.AddServerEvent("SentClientFightClubBattleRoyal", (map_name, end_position_raw, radius, loot_raw, dim) => {

    FightClubUsedWeapons = {};
    RemoveAllFightClubObjects();
    RemoveAllFightClubBlips();

    const end_position = JSON.parse(end_position_raw);
    if (ActiveFightClub == null) {
        ActiveFightClub = new FightClub();
    }

    if (Webwindow["FightClubHUD"] != null) {
        Webwindow["FightClubHUD"].start("startCountDown");
    }

    setTimeout(function () {
        if (IsPlayerInFightClub == true) {
            setPlayerFrozen(true, true);
            mp.players.local.giveWeapon(mp.game.joaat("weapon_pistol"), 0, true);
            mp.players.local.giveWeapon(mp.game.joaat("gadget_parachute"), 0, true);
        }
    }, 1500);

    if (Webwindow["FightClubQueue"] != null) {
        Webwindow["FightClubQueue"].destroy();
        Webwindow["FightClubQueue"] = null;
    }

    setTimeout(() => {
        setPlayerFrozen(false, false);
        if (IsPlayerInFightClub == true) {
            mp.game.audio.playSoundFrontend(1, 'Beep_Green', 'DLC_HEIST_HACKING_SNAKE_SOUNDS', true);
            if (Webwindow["FightClubHUD"] != null) {
                Webwindow["FightClubHUD"].start("startTimer", 600);
            }
        }
    }, 4500);

    FightClubItems = [];
    ToggleCayoPericoIsland(true);

    ActiveFightClub.createEllipse(map_name, end_position, radius);

    FightClubLootItems = JSON.parse(loot_raw);

    for (let index in FightClubLootItems) {
        CreateFightClubLootBox(index, dim);
    }
});

mp.events.add('render', () => {
    if (ActiveFightClub != null) {
        if (ActiveFightClub.name != "" && FightClubGamemode == "battleroyal") {

            const lPos = mp.players.local.position;
            const frameTime = mp.game.invokeFloat("0x0000000050597EE2"); // TIMESTEP
            var FinalLootID = -1;
            var FinalLootDistance = 25;

            //ReplaceAllFightClubObjects();

            for (const obj of mp.objects.streamed) {
                if (obj._LootID != null && lPos.z <= 150) {
                    if (FightClubLootItems[obj._LootID] != null) {
                        let tdist = mp.game.system.vdist2(FightClubLootItems[obj._LootID].Pos.x, FightClubLootItems[obj._LootID].Pos.y, FightClubLootItems[obj._LootID].Pos.z, lPos.x, lPos.y, lPos.z);
                        if (tdist < FinalLootDistance) {
                            FinalLootDistance = tdist;
                            FinalLootID = obj._LootID;
                        }

                        if(tdist <= 450){
                            if (obj._isFakePickup) {
                                const {x: rotX, y: rotY, z: rotZ} = obj.getRotation(2);
                                obj.setRotation(rotX, rotY, rotZ + (90 * frameTime), 2, true);
                            }
                        }

                        if (FightClubLootItems[obj._LootID].Hash == "hei_prop_carrier_cargo_04a") {
                            const {x: posX, y: posY, z: posZ} = obj.position;
                            mp.game.graphics.drawLightWithRangeAndShadow(posX, posY, posZ + 2, 255, 0, 0, 5.0, 20.0, 15.0);
                            obj.setCollision(true, true);
                        } else {
                            obj.setCollision(false, true);
                        }

                        if (tdist < 150) {

                            const {x: posX, y: posY, z: posZ} = obj.position;
                            let hash = FightClubLootItems[obj._LootID].Hash

                            if (hash == "ch_prop_box_ammo01a") {
                                mp.game.graphics.drawLightWithRangeAndShadow(posX, posY, posZ + 1.0, 255, 255, 0, 2.0, 15.0, 15.0);
                            } else if (hash == "prop_box_ammo04a") {
                                mp.game.graphics.drawLightWithRangeAndShadow(posX, posY, posZ + 0.5, 0, 255, 0, 2.0, 15.0, 15.0);
                            } else if (hash == "xm_prop_x17_boxwood_01") {
                                mp.game.graphics.drawLightWithRangeAndShadow(posX, posY, posZ + 1.5, 0, 0, 255, 2.0, 15.0, 15.0);
                            } else if (hash == "prop_box_ammo03a") {
                                mp.game.graphics.drawLightWithRangeAndShadow(posX, posY, posZ + 1.5, 136, 0, 255, 2.0, 15.0, 15.0);
                            } else if (hash == "prop_box_ammo07b") {
                                mp.game.graphics.drawLightWithRangeAndShadow(posX, posY, posZ + 1.5, 200, 200, 200, 2.0, 5.0, 15.0);
                            } else if (hash.includes("_mag")) {
                                mp.game.graphics.drawLightWithRangeAndShadow(posX, posY, posZ, 136, 0, 255, 2.0, 2.0, 15.0);
                            } else if (hash == "prop_ld_ammo_pack_02") {
                                mp.game.graphics.drawLightWithRangeAndShadow(posX, posY, posZ, 136, 0, 255, 2.0, 2.0, 15.0);
                            } else if (hash.includes("w_")) {
                                mp.game.graphics.drawLightWithRangeAndShadow(posX, posY, posZ, 255, 0, 0, 2.0, 2.0, 15.0);
                            } else if (hash == "prop_ld_health_pack") {
                                mp.game.graphics.drawLightWithRangeAndShadow(posX, posY, posZ, 0, 250, 0, 2.0, 1.0, 15.0);
                            } else if (hash == "prop_armour_pickup") {
                                mp.game.graphics.drawLightWithRangeAndShadow(posX, posY, posZ, 0, 0, 255, 2.0, 1.0, 15.0);
                            } else if (hash == "prop_gravestones_09a") {
                                mp.game.graphics.drawLightWithRangeAndShadow(posX, posY, posZ + 2, 255, 255, 255, 2.0, 15.0, 15.0);
                            } else if (hash == "p_parachute_s_shop") {
                                mp.game.graphics.drawLightWithRangeAndShadow(posX, posY, posZ, 137, 207, 240, 2.0, 1.0, 15.0);
                            } else if (hash == "p_meth_bag_01_s") {
                                mp.game.graphics.drawLightWithRangeAndShadow(posX, posY, posZ, 255, 255, 255, 2.0, 5.0, 15.0);
                            }
                        }
                    }
                }
            }
            if (FinalLootID != -1) {
                RenderFightClubObject["ID"] = FinalLootID;
                RenderFightClubObject["Distance"] = FinalLootDistance;
                RenderFightClubObject["X"] = FightClubLootItems[FinalLootID].Pos.x;
                RenderFightClubObject["Y"] = FightClubLootItems[FinalLootID].Pos.y;

                if (FightClubLootItems[FinalLootID].Hash == "prop_ld_ammo_pack_02" || FightClubLootItems[FinalLootID].Hash.includes("w_") || FightClubLootItems[FinalLootID].Hash == "prop_ld_health_pack" || FightClubLootItems[FinalLootID].Hash == "prop_armour_pickup" || FightClubLootItems[FinalLootID].Hash == "p_parachute_s_shop" || FightClubLootItems[FinalLootID].Hash == "p_meth_bag_01_s") {
                    RenderFightClubObject["Z"] = FightClubLootItems[FinalLootID].Pos.z + 0.5;
                    RenderFightClubObject["Name"] = "Taste: E";
                } else {
                    RenderFightClubObject["Z"] = FightClubLootItems[FinalLootID].Pos.z + 1.3;
                    RenderFightClubObject["Name"] = "Taste: E";
                }

                let max_size = 0.65;

                let display = new mp.Vector3(RenderFightClubObject["X"], RenderFightClubObject["Y"], RenderFightClubObject["Z"]);
                let dist = mp.game.system.vdist2(lPos.x, lPos.y, lPos.z, display.x, display.y, display.z);

                let color = [255, 255, 255, 255]

                let c_dist = 1 / 10 * dist
                let size = lerp(max_size, 0.35, c_dist)
                if (size > max_size) {
                    size = max_size;
                } else if (size < 0.35) {
                    size = 0.35;
                }

                let alpha = lerp(255, 0, c_dist)
                if (alpha > 255) {
                    alpha = 255;
                } else if (alpha < 0) {
                    alpha = 0;
                }

                color[3] = alpha;

                mp.game.graphics.setDrawOrigin(display.x, display.y, display.z, 0);
                mp.game.graphics.drawText("~g~" + RenderFightClubObject["Name"], [0, 0], {
                    font: 4,
                    color: color,
                    scale: [size, size],
                    outline: true
                });
                mp.game.graphics.clearDrawOrigin()
            } else {
                RenderFightClubObject = {};
            }
        }
        if (FightClubInteractionKeyTimeout != null) {
            const {x: x1, y: y1, z: z1} = FightClubInteractionKeyTimeoutStartPosition;
            const {x: x2, y: y2, z: z2} = mp.players.local.position;
            if (mp.game.system.vdist2(x1, y1, z1, x2, y2, z2) > 1) {
                clearTimeout(FightClubInteractionKeyTimeout);
                FightClubInteractionKeyTimeout = null;
                if (Webwindow["FightClubHUD"]) {
                    Webwindow["FightClubHUD"].call("cancelCanvasCountdown");
                }
            }
        }
    }
});

CommunicationManager.AddServerEvent("SentClientFightClubLobbyMap", (map_name, map_positions_raw, debug) => {
    const map_positions = JSON.parse(map_positions_raw);
    if (ActiveFightClub == null) {
        ActiveFightClub = new FightClub();
    }
    ActiveFightClub.createSquare(map_name, map_positions, debug);
});

CommunicationManager.AddServerEvent("DestroyClientFightClubLobbyMap", () => {
    if (ActiveFightClub != null) {
        ActiveFightClub.stop();
    }
});


CommunicationManager.AddServerEvent("UpdateBattleRoyalBorder", (map_name, end_position_raw, radius) => {
    if (ActiveFightClub != null) {

        const end_position = JSON.parse(end_position_raw);
        setTimeout(function () {
            if (ActiveFightClub != null) {
                if (ActiveFightClub.typ == "Ellipse" && ActiveFightClub.name == "CayoPerico") {
                    ActiveFightClub.createEllipse(map_name, end_position, radius);
                }
            }
        }, 5000);
        if (Webwindow["FightClubHUD"] != null) {
            Webwindow["FightClubHUD"].call("triggerZoneAlarm");
        }
    }
});

/////////////////////////////////////////////////

CommunicationManager.AddServerEvent("OnFightClubJoin", (gamemode) => {

    IsPlayerInFightClub = true;

    if (Webwindow["FightClubHUD"] == null) {
        Webwindow["FightClubHUD"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/fightclub/hud/fightclub_hud.html", false, false);
        if (gamemode == "battleroyal") {
            Webwindow["FightClubHUD"].start("startTimer", 0);
        } else if (gamemode == "ffa") {
            Webwindow["FightClubHUD"].start("startTimer", "ffa");
        }
    }

    FightClubGamemode = gamemode;
    FightClubUsedWeapons = {};

    if(FightClubGamemode != "battleroyal"){
        CreateNotify("~b~Genug Munition gefressen? \n Mit /leave kannst du den FightClub verlassen!", 15);
    }

    //voiceChat.call("SetVisibility", false);
});
CommunicationManager.AddServerEvent("OnFightClubLeft", () => {

    IsPlayerInFightClub = false;

    if (ActiveFightClub != null) {
        ActiveFightClub.stop();
    }
    SetPlayerOutOfFightClubSpectate();
    RemoveAllFightClubBlips();
    RemoveAllFightClubObjects();

    if (Webwindow["FightClubHUD"] != null) {
        Webwindow["FightClubHUD"].destroy();
        Webwindow["FightClubHUD"] = null;
    }
    FightClubUsedWeapons = {};

    // reset SpawnProtection
    FightClubSpawnProtection = {};
    mp.players.local.setAlpha(255);

    ToggleCayoPericoIsland(false);

    //voiceChat.call("SetVisibility", true);
});


const FightClubAmmoTypes = [
    // list of ammo types: https://gist.github.com/root-cause/faf41f59f7a6d818b7db0b839bd147c1
    mp.game.joaat("AMMO_PISTOL") >> 0,
    mp.game.joaat("AMMO_SMG") >> 0,
    mp.game.joaat("AMMO_RIFLE") >> 0,
    mp.game.joaat("AMMO_MG") >> 0,
    mp.game.joaat("AMMO_SHOTGUN") >> 0,
    mp.game.joaat("AMMO_MOLOTOV") >> 0,
    mp.game.joaat("AMMO_SNIPER") >> 0
];

CommunicationManager.AddServerEvent("OnFightClubAddWeaponAmmo", (ammo_type, ammo_amount) => {
    if (IsPlayerInFightClub == true) {
        const ADD_PED_AMMO_BY_TYPE = "0x2472622CE1F2D45F";
        mp.game.invoke(ADD_PED_AMMO_BY_TYPE, mp.players.local.handle, mp.game.joaat(ammo_type) >> 0, ammo_amount);
    }
});

CommunicationManager.AddServerEvent("OnFightClubRespawn", () => {
    if (IsPlayerInFightClub == true) {

        SetPlayerOutOfFightClubSpectate();
        RemoveAllFightClubBlips();

        const SET_PED_AMMO_BY_TYPE = "0x5FD1E1F011E76D7E";
        PlayerWeaponAmmoInClip = {};
        FightClubAmmoTypes.forEach(typeHash => mp.game.invoke(SET_PED_AMMO_BY_TYPE, mp.players.local.handle, typeHash, 9999));

        Object.keys(FightClubUsedWeapons).forEach(c_weapon => {
            let max_size = mp.game.weapon.getWeaponClipSize(Number(c_weapon));
            mp.players.local.setAmmoInClip(Number(c_weapon), max_size);
        });

        FightClubUsedWeapons = {};
    }
});

CommunicationManager.AddServerEvent("OnFightClubSendDeathInformation", (player_name, killer_name) => {
    if (IsPlayerInFightClub == true) {

        let killer_team = -1;
        let player_team = -1;

        if(FightClubGamemode == "gw"){
            Object.values(FightClubPlayers).forEach(playerData => {
                if (killer_name == playerData.Name) {
                    killer_team = playerData.Team;
                }
                if (player_name == playerData.Name) {
                    player_team = playerData.Team;
                }
            });
        }

        let player_color = "!{#FF0000}";
        let killer_color = "!{#4286f4}";

        if (killer_team == 1) {
            killer_color = "!{#FF0000}";
        }
        if (killer_team == 2) {
            killer_color = "!{#4286f4}";
        }

        if (player_team == 1) {
            player_color = "!{#FF0000}";
        }
        if (player_team == 2) {
            player_color = "!{#4286f4}";
        }

        if (killer_name != "") {
            VioRageManager.SendChatMessage(player_color + player_name + " !{#FFFFFF}wurde von " + killer_color + "" + killer_name + " !{#FFFFFF}getötet.");
        } else {
            VioRageManager.SendChatMessage(player_color + player_name + " !{#FFFFFF}ist gestorben.");
        }
    }
});


CommunicationManager.AddServerEvent("OnFightClubDeath", (killer_name, weapon_hash, killer_health, killer_amour) => {
    if (IsPlayerInFightClub == true) {

        if(killer_name == mp.players.local.name){
           killer_name = "";
        }

        if (killer_name != "" && weapon_hash != "") {
            if (Webwindow["FightClubHUD"] != null) {
                Webwindow["FightClubHUD"].call("killedByPlayer", killer_name, weapon_data.getWeaponDisplayName(weapon_hash), killer_health, killer_amour);
            }
        } else {
            if (Webwindow["FightClubHUD"] != null) {
                Webwindow["FightClubHUD"].call("killedByEnvironment");
            }
        }
        mp.game.cam.doScreenFadeIn(100);

        if (FightClubGamemode == "gw") {
            killer_name = "";
        }

        setTimeout(() => {
            if (IsPlayerInFightClub == true) {
                force_to_spectate = false;
                Object.values(FightClubPlayers).forEach(playerData => {
                    if (mp.players.local.name == playerData.Name) {
                        if (playerData.Dead == true) {
                            force_to_spectate = true;
                        }
                    }
                });
                if (force_to_spectate) {
                    let FinalSpecPlayer = "-";
                    Object.values(FightClubPlayers).forEach(playerData => {
                        if (playerData.Dead == false && playerData.Team == FightClubTeam) {
                            if (killer_name != FinalSpecPlayer) {
                                FinalSpecPlayer = playerData.Name;
                            }
                        }
                    });

                    if (FinalSpecPlayer != "-") {
                        SetPlayerIntoFightClubSpectate(FinalSpecPlayer);
                    }
                }
            }
        }, 5000);

        setTimeout(() => {
            if (IsPlayerInFightClub == true) {
                mp.game.cam.doScreenFadeIn(100);
            }
        }, 5000);
        setTimeout(() => {
            if (IsPlayerInFightClub == true) {
                mp.game.cam.doScreenFadeIn(100);
            }
        }, 6000);
        setTimeout(() => {
            if (IsPlayerInFightClub == true) {
                mp.game.cam.doScreenFadeIn(100);
            }
        }, 8000);
    }
});

CommunicationManager.AddServerEvent("OnFightClubRoundStart", () => {

    if (IsPlayerInFightClub == true) {
        SetPlayerOutOfFightClubSpectate();
        setPlayerFrozen(true, true);
        if (Webwindow["FightClubHUD"] != null) {
            Webwindow["FightClubHUD"].call("startCountDown");
        }
    }

    setTimeout(() => {
        setPlayerFrozen(false, false);
        if (IsPlayerInFightClub == true) {
            mp.game.audio.playSoundFrontend(1, 'Beep_Green', 'DLC_HEIST_HACKING_SNAKE_SOUNDS', true);
            if (Webwindow["FightClubHUD"] != null) {
                Webwindow["FightClubHUD"].call("startTimer", "ffa");
            }
        }
    }, 5000);
});

CommunicationManager.AddServerEvent("OnFightClubUpdateInventory", (fc_storage) => {
    if (IsPlayerInFightClub == true) {
        FightClubItems = JSON.parse(fc_storage);
    }
});

CommunicationManager.AddServerEvent("OnFightClubRemoveLootItem", (object_id) => {
    if (FightClubLootObjects[object_id] != null) {
        FightClubLootObjects[object_id].destroy()
        FightClubLootObjects[object_id] = null;
    }
});


CommunicationManager.AddServerEvent("OnFightClubAddLootItem", (object_id, loot, dim) => {
    if (IsPlayerInFightClub == true) {

        FightClubLootItems[object_id] = JSON.parse(loot);

        if (FightClubLootItems[object_id].Hash == "hei_prop_carrier_cargo_04a") {
            CreateCargoPlane(FightClubLootItems[object_id].Pos);
            setTimeout(function () {
                CreateFightClubLootBox(object_id, dim);
            }, 8000);
        } else {
            CreateFightClubLootBox(object_id, dim);
        }
    }
});


// öffnungszeiten für Kisten nach Objecthash ( 0 = sofort öffnen )
const FightClubInteractionKeyTimeoutDurationBoxConfig = {
    "ch_prop_box_ammo01a": .5,
    "prop_box_ammo04a": .5,
    "xm_prop_x17_boxwood_01": .5,
    "prop_box_ammo03a": .5,
    "hei_prop_carrier_cargo_04a": 5.0,
};

KeybindManager.registerVioKeyFunction("Interaktion", true, () => {
    if (IsPlayerInFightClub) {
        if (RenderFightClubObject["ID"] != null) {
            let object_id = RenderFightClubObject["ID"];
            if (RenderFightClubObject["Distance"] <= 10 && FightClubLootItems[object_id] != null) {
                if(mp.players.local.isDead() == false){
                    const lPos = mp.players.local.position;
                    FightClubInteractionKeyTimeoutStartPosition = lPos;
                    let hash = FightClubLootItems[object_id].Hash;

                    if (FightClubInteractionKeyTimeoutDurationBoxConfig[hash] > 0) {
                        mp.players.local.taskStandStill(1);
                        if (Webwindow["FightClubHUD"]) {
                            Webwindow["FightClubHUD"].call("startCanvasCountdown", FightClubInteractionKeyTimeoutDurationBoxConfig[hash], "E", "#71CA71");
                        }
                        FightClubInteractionKeyTimeout = setTimeout(() => {
                            CommunicationManager.TriggerServer("OnClientRequestFightClubPickUpBattleRoyalObject", RenderFightClubObject["ID"], "");
                        }, FightClubInteractionKeyTimeoutDurationBoxConfig[hash] * 1000);
                    } else {
                        CommunicationManager.TriggerServer("OnClientRequestFightClubPickUpBattleRoyalObject", RenderFightClubObject["ID"], "");
                    }
                }
            }
        }
    }
});

KeybindManager.registerVioKeyFunction("Interaktion", false, () => {
    if (IsPlayerInFightClub && FightClubInteractionKeyTimeout != null) {
        clearTimeout(FightClubInteractionKeyTimeout);
        FightClubInteractionKeyTimeout = null;
        if (Webwindow["FightClubHUD"]) {
            Webwindow["FightClubHUD"].call("cancelCanvasCountdown");
        }
    }
});

mp.events.add('playerWeaponShot', () => {
    if (FightClubInteractionKeyTimeout != null && IsPlayerInFightClub) {
        clearTimeout(FightClubInteractionKeyTimeout);
        FightClubInteractionKeyTimeout = null;
        if (Webwindow["FightClubHUD"]) {
            Webwindow["FightClubHUD"].call("cancelCanvasCountdown");
        }
    }
});

CommunicationManager.AddServerEvent("PrintFightClubDebug", () => {
    VioRageManager.SendChatMessage("PrintFightClubDebug");
    VioRageManager.SendChatMessage("IsPlayerInFightClub: " + IsPlayerInFightClub.toString());
    VioRageManager.SendChatMessage("isPlayerFrozen: " + isPlayerFrozen.toString());
    VioRageManager.SendChatMessage("isPlayerInNoDMZone:  " + isPlayerInNoDMZone.toString());
    VioRageManager.SendChatMessage("disableSprintJump:  " + disableSprintJump.toString());
    VioRageManager.SendChatMessage("isPlayerCuffed: " + isPlayerCuffed.toString());
    //VioRageManager.SendChatMessage("AnimationManager.animationPlaying: " + AnimationManager.animationPlaying.toString());
    VioRageManager.SendChatMessage("isPlayerOnVacationIsland:  " + isPlayerOnVacationIsland.toString());
    VioRageManager.SendChatMessage("BlockWeaponSwitchState: " + BlockWeaponSwitchState.toString());
    VioRageManager.SendChatMessage("BlockWeaponReloadState:  " + BlockWeaponReloadState.toString());
    VioRageManager.SendChatMessage("mp.players.local.getParachuteState(): " + mp.players.local.getParachuteState().toString());
    VioRageManager.SendChatMessage("mp.players.local.getIsTaskActive(290): " + mp.players.local.getIsTaskActive(290).toString());
});

class MineJob {
    static init() {
        CommunicationManager.AddServerEvent("OnClientStartMineJob", MineJob.onOpen);
        CommunicationManager.AddWebBrowserEvent("OnClientRequestMineJob", MineJob.eventHandler);
    }

    static onOpen(items) {
        MineJob.closeWindow();
        Webwindow["MineJob"] = new CEFBrowser(`https://vio-v.com/gameplay/CEF/${CEF_Master_Link}/html/minigames/mining/mining.html?v=1`, true);
        if (typeof items !== "string") {
            items = JSON.stringify(items);
        }
        Webwindow["MineJob"].start("onInitMine", items);
    }

    static eventHandler(eventName, ...args) {
        switch (eventName) {
            case "close":
                MineJob.closeWindow();
                CommunicationManager.TriggerServer("OnClientStopMineJob");
                resetAntiAFKState();
                break;
            case "done": {
                const [items, message] = args;
                CommunicationManager.TriggerServer("OnClientFinishMineJob", items);
                resetAntiAFKState();
                switch (message) {
                    case "allOres":
                        CreateNotify("~g~Du hast alle Erze gefunden!", 3);
                        break;
                    case "wall":
                        CreateNotify("~r~Die Wand ist leider eingestürzt!", 3);
                        break;
                }
            }
                break;
            case "retry": {
                CommunicationManager.TriggerServer("onClientRequestInventoryAction", 14);
            }
                break;
        }
    }

    static closeWindow() {
        if (Webwindow["MineJob"]) {
            Webwindow["MineJob"].destroy();
            delete Webwindow["MineJob"];
        }
    }
}
MineJob.init();

var playerlist = {
    players: [],
    groups: {},
    localPlayerGroup: "",
    triggerSwapDate: 0,
    lastOpened: 0,

    open: function () {
        let currentDate = Date.now();
        if ((currentDate - this.triggerSwapDate) > 1000 * 60) {
            this.triggerSwapDate = currentDate;
            CommunicationManager.TriggerServer("OnClientRequestPlayerList");
        }

        if (!('playerlistCollapsed' in mp.storage.data)) {
            mp.storage.data.playerlistCollapsed = [];
        }

        if (Webwindow["PlayerlistWindow"] == null) {
            Webwindow["PlayerlistWindow"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/playerlist/playerlist.html", false, false);
            Webwindow["PlayerlistWindow"].start('playerlist:init', JSON.stringify(this.players), JSON.stringify(this.groups), JSON.stringify(mp.storage.data.playerlistCollapsed), this.localPlayerGroup);
        } else {
            Webwindow["PlayerlistWindow"].active(true);
        }
    },
    close: function () {
        if (Webwindow["PlayerlistWindow"] != null) {
            //Webwindow["PlayerlistWindow"].destroy();
            //Webwindow["PlayerlistWindow"] = null
            Webwindow["PlayerlistWindow"].interact = false;

            mp.gui.cursor.visible = false;
            VioRageManager.ShowChat(true);
            VioRageManager.ActivateChat(true);

            Webwindow["PlayerlistWindow"].active(false);
        }
    },
    disableControls: function () {
        if (Webwindow["PlayerlistWindow"] != null) {
            if (Webwindow["PlayerlistWindow"].isActive == true) {
                if (!mp.players.local.isDead()) {
                    mp.game.controls.disableControlAction(2, 99, true);
                    mp.game.controls.disableControlAction(2, 100, true);
                    mp.game.controls.disableControlAction(2, 115, true);
                    mp.game.controls.disableControlAction(2, 116, true);
                    mp.game.controls.disableControlAction(2, 85, true);
                    mp.game.controls.disableControlAction(2, 16, true);
                    mp.game.controls.disableControlAction(2, 17, true);
                    if (Webwindow["PlayerlistWindow"].interact != true && !mp.gui.cursor.visible) {
                        if (mp.game.controls.isDisabledControlJustPressed(2, 16)) {
                            Webwindow["PlayerlistWindow"].interact = true;
                            mp.gui.cursor.visible = true;
                            VioRageManager.ShowChat(false);
                            VioRageManager.ActivateChat(false);
                        } else if (mp.game.controls.isDisabledControlJustPressed(2, 17) && Webwindow["PlayerlistWindow"].interact != true) {
                            Webwindow["PlayerlistWindow"].interact = true;
                            mp.gui.cursor.visible = true;
                            VioRageManager.ShowChat(false);
                            VioRageManager.ActivateChat(false);
                        }
                    }
                }
            }
        }
    }
}
mp.events.add("render", playerlist.disableControls)

// Open on press
KeybindManager.registerVioKeyFunction("Spielerliste", true, () => {
    let now = Date.now();

    if (IsPlayerInFightClub == true) {
        if(mp.gui.cursor.visible == false || FightClubSpectatorCam != null){
           OpenClientFightClubPlayerlist();
        }
    }else{
        if (!GangwarScoreboard.shouldDisplayGangwarScoreboard() && mp.gui.cursor.visible == false && now - playerlist.lastOpened > 250 && !mp.players.local.isDead()) {
            if (Webwindow["PlayerlistWindow"] != null) {
                if (Webwindow["PlayerlistWindow"].isActive == false) {
                    playerlist.lastOpened = now;
                    playerlist.open();
                }
            } else {
                playerlist.lastOpened = now;
                playerlist.open();
            }
        }
    }
});

// Close on release
KeybindManager.registerVioKeyFunction("Spielerliste", false, () => {
    let now = Date.now();
    if (IsPlayerInFightClub == true) {
        CloseClientFightClubPlayerlist();
    }
    if (Webwindow["PlayerlistWindow"] != null) {
        if (Webwindow["PlayerlistWindow"].isActive == true) {
            if (now - playerlist.lastOpened > 250) {
                playerlist.close();
            }
        }
    }
});

mp.events.add("setPlayerlistGroupCollapsed", (name, collapsed) => {
    if (collapsed) {
        mp.storage.data.playerlistCollapsed.push(name);
    } else {
        if ((index = mp.storage.data.playerlistCollapsed.indexOf(name)) > -1) {
            mp.storage.data.playerlistCollapsed.splice(index, 1);
        }
    }
})

mp.events.add("giveRequestedPlayerListDatas", function (...args) {

    playerlist.players = [];

    let groups = JSON.parse(args[4]);
    playerlist.groups = {};
    for (let key in groups) {
        let group = groups[key];
        group.Id = key;
        playerlist.groups[group.Name] = group;
    }

    mp.game.time.setClockTime(args[5], args[6], 0);

    for (var i = 0; i < args[1].length; i++) {
        let p = {
            name: args[0][i],
            playtime: args[1][i],
            group: args[2][i],
            ping: args[3][i]
        }
        if (!isNaN(args[1][i])) {
            var hours = Math.floor(p.playtime / 60);
            var minutes = p.playtime % 60;
            p.playtime = hours + ":" + (minutes < 10 ? "0" + minutes : minutes);
        }
        playerlist.players.push(p)

        if (p.name == mp.players.local.name) {
            playerlist.localPlayerGroup = p.group;
        }
    }

    playerlist.players = playerlist.players.sort(function (a, b) {
        if (a.name == mp.players.local.name) {
            return -1;
        } else if (b.name == mp.players.local.name) {
            return 1;
        } else {
            return a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1;
        }
    })

    if (Webwindow["PlayerlistWindow"] != null) {
        Webwindow["PlayerlistWindow"].start('playerlist:init', JSON.stringify(playerlist.players), JSON.stringify(playerlist.groups), JSON.stringify(mp.storage.data.playerlistCollapsed), playerlist.localPlayerGroup);
    }
});

var optionsViewRange = {
    foot: 120,
    vehicle: 500,
    passanger: 800,
    biggest_dist: 800
}
var aimPointTarget = {
    target: null,
    target_id: null,
    duration: 0,
    maxDuration: 1.5,
    offsetMax: 1.5,
    loseTarget: 2,
    alpha: 0
};
var weaponSpotDistance = {
    453432689: 30, // weapon_pistol
    1593441988: 30, // weapon_combatpistol
    911657153: 10, // weapon_stungun
    2578377531: 30, // weapon_pistol50
    3218215474: 30, // weapon_snspistol
    137902532: 30, // weapon_vintagepistol
    3249783761: 30, // weapon_revolver
    736523883: 40, // weapon_smg
    487013001: 20, // weapon_pumpshotgun
    3220176749: 50, // weapon_assaultrifle
    2210333304: 50 // weapon_carbinerifle
}

function getWeaponSpotDistance(weapon) {
    if (weaponSpotDistance[weapon]) return weaponSpotDistance[weapon]
    else return 20;
}

var timeCalls = [];
timeCalls["aimNametag"] = 0;

let aimTargetIs = null;

mp.events.add('render', (nametags) => {

    if (mp.players.local.isDead()) {
        return;
    }
    if (mp.storage.data.playernametag == "0") {
        return;
    }
    if(login == false){
        return;
    }

    let l_pos = mp.players.local.getBoneCoords(12844, 0.5, 0, 0);
    //let l_pos = mp.players.local.position;

    let vdist = optionsViewRange.foot;
    if (mp.players.local.isInAnyVehicle(false)) {
        vdist = optionsViewRange.vehicle;
        if ((mp.players.local.vehicle) && (mp.players.local.vehicle.getPedInSeat(0) == mp.players.local.handle)) {
            vdist = optionsViewRange.passanger;
        }
    }
    if (spectating && specCamera != null) {
        vdist = 99999;
    } else if (mp.players.local.adminMode) {
        if (cAdminMode.getLongRangeNameTags()) {
            vdist = 99999;
        }
    }

    mp.players.forEachInStreamRange((player) => {
        if (player != mp.players.local && player != null) {
            if (player.handle === 0) return;
            let t_pos = player.getBoneCoords(12844, 0, 0, 0);
            if (t_pos != null) {
                let t_dist = mp.game.system.vdist2(l_pos.x, l_pos.y, l_pos.z, t_pos.x, t_pos.y, t_pos.z);
                if (t_dist <= vdist) {
                    let hitData = mp.raycasting.testPointToPoint(l_pos, t_pos, mp.players.local, (1 | 16 | 256));
                    if (!hitData || vdist >= 99999) {
                        let target_name = player.name;
                        let color = [255, 255, 255, 255]
                        if (player.getVariable("WantedLevel")) {
                            if (mp.storage.data.ColorBlind == 1) {
                                target_name = "[" + player.getVariable("WantedLevel") + "] " + target_name;
                            }
                            switch (parseInt(player.getVariable("WantedLevel"))) {
                                case 1:
                                    color = [255, 204, 204, 255]
                                    break;
                                case 2:
                                    color = [255, 153, 153, 255]
                                    break;
                                case 3:
                                    color = [255, 102, 102, 255]
                                    break;
                                case 4:
                                    color = [255, 51, 51, 255]
                                    break;
                                case 5:
                                    color = [255, 0, 0, 255]
                                    break;
                            }
                        } else {
                            color = [255, 255, 255, 255]
                        }
                        if (player.isDead()) {
                            color = [40, 40, 40, 255]
                        }

                        if (player.adminMode) {
                            // keine NameTags für Admin im NoClip
                            if (player.adminMode === 2) {
                                if (cAdminMode.allowClientSeeInvisibleAdmins()) {
                                    target_name = `[HIDDEN] ${player.name}`;
                                    color = [50, 60, 168, 255]
                                } else {
                                    return;
                                }
                            }

                            // grüner Admin NameTag für Admins im Präsenzmodus
                            if (player.adminMode === 1) {
                                target_name = `[Vio] ${player.name}`;
                                color = [0, 190, 0, 255]
                            }
                        }

                        if (player.isInAnyVehicle(false) && (player.vehicle != null)) {
                            let opos = null;
                            if (player.vehicle.getPedInSeat(-1) == player.handle) {
                                opos = player.vehicle.getWorldPositionOfBone(player.vehicle.getBoneIndexByName("seat_dside_f"))
                            } else if (player.vehicle.getPedInSeat(0) == player.handle) {
                                opos = player.vehicle.getWorldPositionOfBone(player.vehicle.getBoneIndexByName("seat_pside_f"))
                            } else if (player.vehicle.getPedInSeat(1) == player.handle) {
                                opos = player.vehicle.getWorldPositionOfBone(player.vehicle.getBoneIndexByName("seat_dside_r"))
                            } else if (player.vehicle.getPedInSeat(2) == player.handle) {
                                opos = player.vehicle.getWorldPositionOfBone(player.vehicle.getBoneIndexByName("seat_pside_r"))
                            }
                            if (opos != null) {
                                let offset = player.vehicle.getOffsetFromGivenWorldCoords(opos.x, opos.y, opos.z);
                                let dist = mp.game.system.vdist2(opos.x, opos.y, opos.z, t_pos.x, t_pos.y, t_pos.z);
                                if (dist < 25) {
                                    t_pos = player.vehicle.getOffsetFromInWorldCoords(offset.x, offset.y, offset.z + 1.2);
                                } else {
                                    t_pos.z += 0.5;
                                }
                            }
                        } else {
                            t_pos.z += 0.5;
                        }


                        if ((aimTargetIs != player.name)) {

                            let c_dist = 1 / vdist * t_dist
                            let size = lerp(0.5, 0.06, c_dist)
                            if (size > 0.5) {
                                size = 0.5;
                            } else if (size < 0.06) {
                                size = 0.06;
                            }

                            let alpha = lerp(255, 0, c_dist)
                            if (alpha > 255) {
                                alpha = 255;
                            } else if (alpha < 0) {
                                alpha = 0;
                            }

                            color[3] = alpha;

                            mp.game.graphics.setDrawOrigin(t_pos.x, t_pos.y, t_pos.z, 0);
                            mp.game.graphics.drawText(target_name, [0, 0], {
                                font: 4,
                                color: color,
                                scale: [size, size],
                                outline: true
                            });

                            let displayChatState = true;
                            if (mp.players.local.vehicle) {
                                if (!VioRageManager.PlayerIsDriver(mp.players.local, mp.players.local.vehicle)) {
                                    displayChatState = false;
                                }
                            }

                            if (player.isTypingInTextChat && displayChatState) {
                                mp.game.graphics.drawText('Schreibt...', [0, .025], {
                                    font: 4,
                                    color: color,
                                    scale: [size * .5, size * .5],
                                    outline: true
                                });
                            }
                            mp.game.graphics.clearDrawOrigin()
                        }
                    }

                }
            }
        }
    })

    if (mp.players.local.getIsTaskActive(4)) {

        if (aimPointTarget.target == null) {
            aimPointTarget.duration = 0;
            aimPointTarget.alpha = 0;
            timeCalls["aimNametag"] = Date.now() / 1000;
            aimTargetIs = "";
        }

        let targetHandle = mp.game.player.getEntityIsFreeAimingAt();
        if ((targetHandle !== undefined) && (aimPointTarget.target == null)) {
            if ((typeof targetHandle == "object") && (targetHandle.name) && (targetHandle.name != "")) {
                aimPointTarget.duration = 0;
                aimPointTarget.alpha = 0;
                aimPointTarget.target = targetHandle;
                aimPointTarget.target_id = targetHandle.id;
            }
        }
        if (aimPointTarget.target_id) {
            let exist = mp.players.exists(aimPointTarget.target_id);
            if ((exist) && (aimPointTarget.target !== null)) {
                let entity = mp.players.at(aimPointTarget.target_id);
                if ((entity) && (aimPointTarget.target.id == aimPointTarget.target_id)) {
                    aimPointTarget.target = entity;
                    let headPos = mp.players.local.getBoneCoords(12844, 0.2, 0, 0);
                    let aimPos = mp.players.local.aimingAt;
                    let pos = aimPointTarget.target.position;
                    let vector = new mp.Vector3(aimPos.x - headPos.x, aimPos.y - headPos.y, aimPos.z - headPos.z);
                    let dist_aim = mp.game.system.vdist(aimPos.x, aimPos.y, aimPos.z, headPos.x, headPos.y, headPos.z);
                    let vectorNear = vector.normalize(dist_aim);
                    let dist = mp.game.system.vdist(pos.x, pos.y, pos.z, headPos.x, headPos.y, headPos.z);
                    let weapon = Number(mp.players.local.weapon);
                    if (getWeaponSpotDistance(weapon) >= dist) {
                        let vectorAtPos = vectorNear.multiply(dist);
                        let aimdist = mp.game.system.vdist(pos.x, pos.y, pos.z, headPos.x + vectorAtPos.x, headPos.y + vectorAtPos.y, headPos.z + vectorAtPos.z)
                        if (aimdist <= aimPointTarget.offsetMax) {
                            if ((Date.now() / 1000 - timeCalls["aimNametag"]) > 0.05) {
                                timeCalls["aimNametag"] = Date.now() / 1000
                                aimPointTarget.duration += 0.05
                                if (aimPointTarget.duration > aimPointTarget.maxDuration) {
                                    aimPointTarget.duration = aimPointTarget.maxDuration;
                                    aimPointTarget.alpha += 20;
                                    if (aimPointTarget.alpha > 255) aimPointTarget.alpha = 255;
                                }
                            }
                        } else if (aimdist >= aimPointTarget.loseTarget) {
                            aimPointTarget.target = null;
                            aimPointTarget.duration = 0;
                            aimPointTarget.alpha = 0;
                            timeCalls["aimNametag"] = Date.now() / 1000;
                        }
                        if ((aimPointTarget.duration == aimPointTarget.maxDuration) && (aimPointTarget.target != null)) {
                            let target_name = aimPointTarget.target.name;
                            let color = [255, 255, 255, 255]
                            if (aimPointTarget.target.getVariable("WantedLevel")) {

                                if (mp.storage.data.ColorBlind == 1) {
                                    target_name = "[" + aimPointTarget.target.getVariable("WantedLevel") + "] " + target_name;
                                }

                                switch (parseInt(aimPointTarget.target.getVariable("WantedLevel"))) {
                                    case 1:
                                        color = [255, 204, 204, aimPointTarget.alpha]
                                        break;
                                    case 2:
                                        color = [255, 153, 153, aimPointTarget.alpha]
                                        break;
                                    case 3:
                                        color = [255, 102, 102, aimPointTarget.alpha]
                                        break;
                                    case 4:
                                        color = [255, 51, 51, aimPointTarget.alpha]
                                        break;
                                    case 5:
                                        color = [255, 0, 0, aimPointTarget.alpha]
                                        break;
                                }
                            } else {
                                color = [255, 255, 255, aimPointTarget.alpha]
                            }
                            if (aimPointTarget.target.isDead() || (aimPointTarget.target.getHealth() < 1)) {
                                color = [40, 40, 40, aimPointTarget.alpha]
                            }

                            if (aimPointTarget.target.adminMode) {
                                // keine NameTags für Admin im NoClip
                                if (aimPointTarget.target.adminMode === 2) {
                                    if (cAdminMode.allowClientSeeInvisibleAdmins()) {
                                        target_name = `[HIDDEN] ${aimPointTarget.target.name}`;
                                        color = [50, 60, 168, 255]
                                    } else {
                                        return;
                                    }
                                }

                                // grüner Admin NameTag für Admins im Präsenzmodus
                                if (aimPointTarget.target.adminMode === 1) {
                                    target_name = `[Vio] ${aimPointTarget.target.name}`;
                                    color = [0, 190, 0, 255]
                                }
                            }

                            let head_pos_aim = aimPointTarget.target.getWorldPositionOfBone(aimPointTarget.target.getBoneIndexByName("IK_Head"));
                            let dist2 = mp.game.system.vdist2(head_pos_aim.x, head_pos_aim.y, head_pos_aim.z, headPos.x, headPos.y, headPos.z);
                            let c_dist = 1 / optionsViewRange.biggest_dist * dist2
                            let size = lerp(0.4, 0.3, c_dist)
                            if (size > 0.4) {
                                size = 0.4;
                            } else if (size < 0.25) {
                                size = 0.25;
                            }
                            if (aimPointTarget.target.isInAnyVehicle(false)) {
                                let opos = null;
                                let veh = aimPointTarget.target.vehicle;
                                if (veh.getPedInSeat(-1) == aimPointTarget.target.handle) {
                                    opos = veh.getWorldPositionOfBone(veh.getBoneIndexByName("seat_dside_f"))
                                } else if (veh.getPedInSeat(0) == aimPointTarget.target.handle) {
                                    opos = veh.getWorldPositionOfBone(veh.getBoneIndexByName("seat_pside_f"))
                                } else if (veh.getPedInSeat(1) == aimPointTarget.target.handle) {
                                    opos = veh.getWorldPositionOfBone(veh.getBoneIndexByName("seat_dside_r"))
                                } else if (veh.getPedInSeat(2) == aimPointTarget.target.handle) {
                                    opos = veh.getWorldPositionOfBone(veh.getBoneIndexByName("seat_pside_r"))
                                }
                                if (opos != null) {
                                    let offset = veh.getOffsetFromGivenWorldCoords(opos.x, opos.y, opos.z);
                                    let dist = mp.game.system.vdist2(opos.x, opos.y, opos.z, head_pos_aim.x, head_pos_aim.y, head_pos_aim.z);
                                    if (dist < 25) {
                                        head_pos_aim = veh.getOffsetFromInWorldCoords(offset.x, offset.y, offset.z + 0.7);
                                    }
                                }
                            }
                            aimTargetIs = aimPointTarget.target.name;

                            mp.game.graphics.setDrawOrigin(head_pos_aim.x, head_pos_aim.y, head_pos_aim.z + 0.5, 0);
                            mp.game.graphics.drawText(target_name || "name", [0, 0], {
                                font: 4,
                                color: color,
                                scale: [size, size],
                                outline: true
                            });
                            mp.game.graphics.clearDrawOrigin()
                        }
                    } else {
                        aimPointTarget.target = null;
                        aimTargetIs = "";
                    }
                } else {
                    aimPointTarget.target = null;
                    aimTargetIs = "";
                }
            } else {
                aimPointTarget.target = null;
                aimTargetIs = "";
            }
        } else {
            aimPointTarget.target = null;
            aimTargetIs = "";
        }
    } else {
        aimPointTarget.target = null;
        aimTargetIs = "";
    }
})

var lastshot;
var vehicle_wheels = {
    "wheel_lf": {
        id: 0
    },
    "wheel_rf": {
        id: 1
    },
    "wheel_lr": {
        id: 4
    },
    "wheel_rr": {
        id: 5
    }
}

var player_bones_dmg = {
    "0": {
        id: 23553
    },
    "1": {
        id: 58271
    },
    "2": {
        id: 63931
    },
    "3": {
        id: 14201
    },
    "4": {
        id: 51826
    },
    "5": {
        id: 36864
    },
    "6": {
        id: 52301
    },
    "7": {
        id: 24816
    },
    "8": {
        id: 24817
    },
    "9": {
        id: 24818
    },
    "10": {
        id: 64729
    },
    "11": {
        id: 45509
    },
    "12": {
        id: 45509
    },
    "13": {
        id: 61163
    },
    "14": {
        id: 18905
    },
    "15": {
        id: 40269
    },
    "16": {
        id: 40269
    },
    "17": {
        id: 28252
    },
    "18": {
        id: 57005
    },
    "19": {
        id: 39317
    },
    "20": {
        id: 31086
    }
}



function getWeaponRange(whash) {
    if (whash == 0x1D073A89) {
        return 25;
    } else if (whash == 1820140472) {
        return 40;
    } else if (whash == 0x7846A318) {
        return 40;
    } else if (whash == 0x9D61E50F) {
        return 40;
    } else if (whash == 0xE284C527) {
        return 40;
    } else if (whash == 0xA89CB99E) {
        return 200;
    } else if (whash == 0x3AABBBAA) {
        return 40;
    } else if (whash == 0xEF951FBB) {
        return 40;
    } else if (whash == 0x12E82D3D) {
        return 40;
    } else if (whash == 0x05FC3C11) {
        return 500;
    } else if (whash == 0xDBBD7280) {
        return 100;
    }
    return 150;
}

var BlockWeaponSwitchState = false;
var BlockWeaponReloadState = false;
var BlockWeaponSwitchTimer = new Date().getTime();

var type = {
    hit: 1,
    vehicleHit: 2,
    kill: 3
}

function playHitmarker(pType, pPlaySound) {
    if (mp.storage.data.hitSettings.sound > 0 && pPlaySound) {
        let sound = "hitsound.mp3";
        mp.events.call("playSound", sound, false);
    }

    if (mp.storage.data.hitSettings.hitmarker == 1) {
        if (pType == type.hit)
            timerHitmarker = Date.now() / 1000;
        else if (pType == type.vehicleHit)
            timerHitmarkerVehicle = Date.now() / 1000;
        else if (pType == type.kill)
            timerHitmarkerKill = Date.now() / 1000
    }
}

mp.events.add("onPlayerTargetKill", () => {
    playHitmarker(type.kill, true);
});

mp.events.add("onPlayerHitted", (dmg) => {

    LocalPlayerLastIncomingHit = Utility.GetTimestamp();
    if (mp.storage.data.testServer[mp.game.joaat('BETA_COMBAT_DEBUG')]) {
        VioRageManager.SendChatMessage("LocalPlayerLastIncomingHit : " + LocalPlayerLastIncomingHit);
    }

    if (IsPlayerInFightClub == true) {
        FightClubLastHit = Date.now() / 1000;
        return;
    }
    if (voiceChat) {
        if (mp.storage.data.HealCooldown == "1") {
            voiceChat.call("resetHealCounter");
        }
    }
});

mp.events.add("onPlayerHittedPlayer", (dmg, pos) => {
    if (mp.storage.data.hitSettings.dmgmarker == 1) {
        Hits.add(dmg, pos);
    }
});

function getIsHitOnWheel(hitPosition, hitVehicle) {
    let nearest_bone = "";
    let nearest_bone_dist = 99;

    if (hitVehicle != null) {
        for (let bone in vehicle_wheels) {
            let vpos = hitVehicle.getWorldPositionOfBone(hitVehicle.getBoneIndexByName(bone));
            let hit_dist = mp.game.system.vdist(hitPosition.x, hitPosition.y, hitPosition.z, vpos.x, vpos.y, vpos.z);
            if (hit_dist <= 2.0) {
                if (nearest_bone_dist > hit_dist) {
                    nearest_bone = bone;
                    nearest_bone_dist = hit_dist;
                }
            }
        }
    }
    if (mp.storage.data.testServer[mp.game.joaat('BETA_COMBAT_DEBUG')]) {
        VioRageManager.SendChatMessage("[Debug] Next Wheel: " + nearest_bone.toString() + " | " + nearest_bone_dist.toString());
    }
    if (nearest_bone_dist <= 0.35) {
        return nearest_bone;
    } else {
        return "";
    }
}

CommunicationManager.addSafeServerEvent('givePlayerWeapon', () => {
    PlayerWeaponAmmoInClip = {};
});

function NumberFormat(pNumber) {
    return Math.round(pNumber * 100) / 100;
}


mp.events.add('incomingDamage', (sourceEntity, sourcePlayer, targetEntity, c_weapon, boneIndex, damage) => {

    // keine Schaden für Admins im GodMode
    if (mp.players.local.adminMode) return true;

    // VioRageManager.ConsoleLog("info", {sourceEntity, sourcePlayer, targetEntity, c_weapon, boneIndex, damage});
    if (c_weapon == 0x060EC506 || c_weapon == 0x8BB05FD7|| c_weapon == 0x787F0BB) { // Waffen die kein Schaden machen sollten!
        if (mp.storage.data.testServer[mp.game.joaat('BETA_COMBAT_DEBUG')]) {
            VioRageManager.SendChatMessage("In Abbruch");
        }
        return true;
    }
    if (c_weapon == 0x1D073A89 && boneIndex == 20) { // One Hit Shootgun^^
        if (mp.storage.data.testServer[mp.game.joaat('BETA_COMBAT_DEBUG')]) {
            VioRageManager.SendChatMessage("In Abbruch");
        }
        return true;
    }
    if (c_weapon == 0x3656C8C1) { // Tazer
        if (mp.players.local == targetEntity) {
            if (mp.players.local.isInAnyVehicle(false)) {
                return true;
            }
            if (mp.players.local.weapon !== 0xA2719263 && (mp.game.controls.isControlPressed(2, 25) || mp.game.controls.isControlPressed(2, 24))) {
                return true;
            }
            if (Seats.usingChair) {
                Seats.standUp();
                Seats.blockSittingUntil = Date.now() + (10 * 1000);
                return true;
            }
        }
    }

    if (mp.storage.data.testServer[mp.game.joaat('BETA_COMBAT_DEBUG')]) {
        VioRageManager.SendChatMessage("incomingDamage IB: " + boneIndex + " | DMG: " + damage);
    }
});

var OutgoingDamageTempDelay = null;
var OutgoingDamageTempShotgunHits = [];

function PlayerHitOtherPlayerShotgun(targetPlayer, weapon, weapon_name, boneIndex) {
    clearTimeout(OutgoingDamageTempDelay);
    OutgoingDamageTempShotgunHits.push(boneIndex);
    OutgoingDamageTempDelay = setTimeout(function () {
        CommunicationManager.TriggerServer("onPlayerHitOtherPlayerShotgun", targetPlayer, weapon, weapon_name, JSON.stringify(OutgoingDamageTempShotgunHits));
        OutgoingDamageTempShotgunHits = [];
    }, 100);
}

/*
mp.events.add('render', () => {
    mp.players.forEachInStreamRange((target) => {
        let vpos = target.getBoneCoords(57005, 0.5, 0, 0.075);
        if(vpos.x != 0 || vpos.y != 0 || vpos.z != 0) {
            mp.game.graphics.setDrawOrigin(vpos.x, vpos.y, vpos.z, 0);
            mp.game.graphics.drawText("X", [0, 0], {
                font: 4,
                color: [255, 255, 255, 255],
                scale: [0.2, 0.2],
                outline: false
            });
            mp.game.graphics.clearDrawOrigin();
        }
    });
})
*/

mp.events.add('outgoingDamage',
    /**
     *
     * @param {PlayerMp} sourceEntity
     * @param {EntityMp} targetEntity
     * @param {PlayerMp} targetPlayer
     * @param c_weapon
     * @param boneIndex
     * @param damage
     * @return {boolean}
     */
    (sourceEntity, targetEntity, targetPlayer, c_weapon, boneIndex, damage) => {

    //VioRageManager.ConsoleLog("info", {sourceEntity, targetEntity, targetPlayer, c_weapon, boneIndex, damage});

    if (NoDmZone.noDmState) {
        CreateNotify('Das Kampfsystem ist in der NoDmZone deaktiviert!');
        return true;
    }

    // if(sourceEntity != mp.players.local) return;
    let local_pos = mp.players.local.position;
    let target_pos = targetEntity.position;
    if (c_weapon == 0x060EC506 || c_weapon == 0x8BB05FD7) { // Waffen die kein Schaden machen sollten!
        if (mp.storage.data.testServer[mp.game.joaat('BETA_COMBAT_DEBUG')]) {
            VioRageManager.SendChatMessage("ABBRUCH #1");
        }
        return true;
    }

    if (c_weapon == 0x787F0BB) { // Hitglocke beim Schneeball abspielen
        playHitmarker(type.hit, true);
        return true;
    }

    if (mp.players.local.isPerformingStealthKill()) {
        if (mp.storage.data.testServer[mp.game.joaat('BETA_COMBAT_DEBUG')]) {
            VioRageManager.SendChatMessage("ABBRUCH #2");
        }
        return true;
    }
    let hit_dist_final = mp.game.system.vdist(local_pos.x, local_pos.y, local_pos.z, target_pos.x, target_pos.y, target_pos.z);
    if (hit_dist_final > getWeaponRange(c_weapon)) {
        if (mp.storage.data.testServer[mp.game.joaat('BETA_COMBAT_DEBUG')]) {
            VioRageManager.SendChatMessage("ABBRUCH > MAX_DIST");
        }
        return true;
    }

    let weapon = weapon_data.getWeaponHash(Number(c_weapon));
    let weapon_name = weapon_data.getWeaponName(Number(c_weapon));

    if (targetEntity.type === "player" && targetPlayer != null) {

        // keine Schaden für Admins im GodMode
        if (targetPlayer.adminMode) {
            if (targetPlayer.adminMode == 1) {
                SendChatPushOnce("~r~Du hast einen Admin im GodMode getroffen!");
            }
            return true;
        }

        if (targetPlayer.isMale()) {
            AntiCheatAimBot.debugMessage('Set Male Skin');
            if (AC_NPC_SKIN["M"] == null) {
                AC_NPC_SKIN["M"] = {};
            }
            for (let i = 0; i <= 11; i++) {
                if (AC_NPC_SKIN["M"][i] == null) {
                    AC_NPC_SKIN["M"][i] = {};
                }
                AC_NPC_SKIN["M"][i]["drawable"] = targetPlayer.getDrawableVariation(i);
                AC_NPC_SKIN["M"][i]["texture"] = targetPlayer.getTextureVariation(i);
                AC_NPC_SKIN["M"][i]["palette"] = targetPlayer.getPaletteVariation(i);
            }
        } else {
            AntiCheatAimBot.debugMessage('Set Female Skin');
            if (AC_NPC_SKIN["F"] == null) {
                AC_NPC_SKIN["F"] = {};
            }
            for (let i = 0; i <= 11; i++) {
                if (AC_NPC_SKIN["F"][i] == null) {
                    AC_NPC_SKIN["F"][i] = {};
                }
                AC_NPC_SKIN["F"][i]["drawable"] = targetPlayer.getDrawableVariation(i);
                AC_NPC_SKIN["F"][i]["texture"] = targetPlayer.getTextureVariation(i);
                AC_NPC_SKIN["F"][i]["palette"] = targetPlayer.getPaletteVariation(i);
            }
        }

        if (IsPlayerInFightClub == true) {
            if(FightClubSpawnProtection[targetEntity.name] != null){
                return true;
            }
            if(FightClubSpawnProtection[mp.players.local.name] != null){
                return true;
            }
        }

        if (mp.players.local.isInAnyVehicle(false) == true && targetPlayer.isInAnyVehicle(false) == false) {
            if (targetEntity.isSwimmingUnderWater() == false && targetEntity.isSwimming() == false) {
                if (mp.storage.data.testServer[mp.game.joaat('BETA_COMBAT_DEBUG')]) {
                    VioRageManager.SendChatMessage("ABBRUCH #3");
                }
                return true;
            }
        }
        if (mp.storage.data.testServer[mp.game.joaat('BETA_COMBAT_DEBUG')]) {
            VioRageManager.SendChatMessage("[Debug] outgoingDamage Player:"+targetPlayer.name+" | Weapon:" + weapon_name + " | Bone:" + boneIndex.toString());
        }
        if (c_weapon == 0x1D073A89) { // isShotgun
            playHitmarker(type.hit, true);
            PlayerHitOtherPlayerShotgun(targetPlayer, weapon, weapon_name, boneIndex);
            if (boneIndex == 20) { // One Hit Shootgun^^
                return true;
            }
        } else {
            playHitmarker(type.hit, true);
            CommunicationManager.TriggerServer("onPlayerHitOtherPlayer", targetPlayer, weapon, weapon_name, boneIndex);
        }
    } else if (targetEntity.type === "vehicle") {
        if (c_weapon == 0xA2719263) {
            return true; // Auto prügeln deaktiviert
        }

        if (mp.game.weapon.getWeapontypeGroup(c_weapon) == 416676503) {
            if (damage <= 25) {
                //return true; // https://github.com/Forces2222/Vio-V/issues/2463
            }
        }
        if (c_weapon == 0xC1B3C3D1) {
            if (damage <= 27) {
                return true; // https://github.com/Forces2222/Vio-V/issues/2463
            }
        }
        if (mp.players.local.vehicle != null) {
            if (mp.players.local.vehicle == targetEntity) {
                return true;
            }
        }
        if (VioRageManager.VehicleIsEmpty(targetEntity) == false) {
            let aim_point = mp.players.local.aimingAt;
            let wheel = getIsHitOnWheel(aim_point, targetEntity)
            if (wheel != "") {
                if (targetEntity.isTyreBurst(vehicle_wheels[wheel].id, false) == false) {
                    if (mp.storage.data.testServer[mp.game.joaat('BETA_COMBAT_DEBUG')]) {
                        VioRageManager.SendChatMessage("[HIT] Wheel: " + wheel.toString());
                    }
                    CommunicationManager.TriggerServer("onPlayerHitOtherVehicleWheel", targetEntity, vehicle_wheels[wheel].id, weapon);
                } else {
                    if (mp.storage.data.testServer[mp.game.joaat('BETA_COMBAT_DEBUG')]) {
                        VioRageManager.SendChatMessage("[HIT] Wheel Broken");
                    }
                }
                targetEntity.setTyreBurst(vehicle_wheels[wheel].id, false, 1000);
            } else {
                CommunicationManager.TriggerServer("onPlayerHitOtherVehicle", targetEntity, weapon);
                playHitmarker(type.vehicleHit, false);
            }
            if (mp.storage.data.testServer[mp.game.joaat('BETA_COMBAT_DEBUG')]) {
                VioRageManager.SendChatMessage("[Debug] outgoingDamage Vehicle | Weapon:" + weapon_name + " | Bone:" + boneIndex.toString());
            }
        } else {
            if (mp.storage.data.testServer[mp.game.joaat('BETA_COMBAT_DEBUG')]) {
                VioRageManager.SendChatMessage("ABBRUCH #4");
            }
            return true;
        }
    }
});

var WeaponTime = {};
mp.events.add('playerWeaponShot', (targetPosition, targetEntity) => {
    var c_weapon = mp.players.local.weapon;
    const weapon = weapon_data.getWeaponHash(Number(c_weapon));
    const weapon_name = weapon_data.getWeaponName(Number(c_weapon));
    const weaponData = weapon_data.getData(Number(c_weapon));
    const delay = Date.now() - lastshot;
    lastshot = Date.now();

    if (c_weapon == 0x60EC506 || c_weapon == 966099553) {
        return;
    }

    if (weapon == '-1') {
        CommunicationManager.TriggerServer("ClientSentACEvent1", "CHEAT_WEAPON", "Shot_" + String(c_weapon));
        return;
    }

    if (weapon == '0') {
        return;
    }

    if (delay < weaponData.delay) {
        CommunicationManager.TriggerServer("ClientSentACEvent1", "CHEAT_FIRERATE", `${c_weapon} Weapon=${weapon_name} Delay=${delay} SystemDelay=${weaponData.delay}`);
    }

    let ammoClip = mp.players.local.getAmmoInClip(c_weapon);
    PlayerWeaponAmmoInClip[c_weapon] = ammoClip;
    if (mp.storage.data.testServer[mp.game.joaat('BETA_COMBAT_DEBUG')]) {
        VioRageManager.SendChatMessage("PlayerWeaponAmmoInClip ["+c_weapon+"] -> " + PlayerWeaponAmmoInClip[c_weapon]);
    }

    if (mp.players.local.isDead()) {
        return;
    }

    var totalAmmo = mp.players.local.getWeaponAmmo(c_weapon);
    CommunicationManager.TriggerServer("onClientWeaponFired", weapon, weapon_name, totalAmmo); // evtl. jeden x Schuss

    if (weaponData.accuracy) {
        if (Math.random() <= (weaponData.accuracy / 100)) {
            AntiCheatProtectedValues.accuracy = 100;
        } else {
            AntiCheatProtectedValues.accuracy = 0;
        }
    } else {
        AntiCheatProtectedValues.accuracy = 0;
    }
});

async function SetPlayerWeapons(entity) {

    try{
        if (entity.getVariable("cWEAPONS") != null) {
            let weapons = entity.getVariable("cWEAPONS");
            let t_weapon = Number(entity.weapon);

            for (var key in weapons) {
                if (weapons[key].ClientWeapon == t_weapon) {

                    if(entity.handle != mp.players.local.handle){
                        entity.giveWeapon(weapons[key].ClientWeapon >> 0, -1, true);
                    }

                    for (var i = 0; i < weapons[key].Components.length; i++) {
                        if (mp.game.invoke('0xC593212475FAE340', entity.handle, weapons[key].ClientWeapon >> 0, weapons[key].Components[i] >> 0) == false) { // HAS_PED_GOT_WEAPON_COMPONENT
                            var componentModel = mp.game.weapon.getWeaponComponentTypeModel(weapons[key].Components[i] >> 0);
                            RequestModel(componentModel, 1000, function () {
                                if (mp.storage.data.testServer[mp.game.joaat('BETA_COMBAT_DEBUG')]) {
                                    VioRageManager.SendChatMessage("[Debug] Addon gegeben!" );
                                }
                                mp.game.invoke('0xD966D51AA5B28BB9', entity.handle >> 0, weapons[key].ClientWeapon >> 0, weapons[key].Components[i] >> 0); // GIVE_WEAPON_COMPONENT_TO_PED
                            });
                        }
                    }

                    mp.game.invoke('0x50969B9B89ED5738', entity.handle >> 0, weapons[key].ClientWeapon >> 0, parseInt(weapons[key].Tint)); // SET_PED_WEAPON_TINT_INDEX
                    mp.game.invoke('0xADF692B254977C0C', entity.handle >> 0, weapons[key].ClientWeapon >> 0, parseInt(weapons[key].Tint)); // SET_CURRENT_PED_WEAPON
                }
            }
        }
    }
    catch (e) {
        VioRageManager.ErrorLog(e);
    }
}

setInterval(() => {
    mp.players.streamed.forEach(p => {
        if(p.handle != mp.players.local.handle){
            const playerWeapon = p.weapon;
            if (playerWeapon !== p._lastComponentUpdateWeapon) {
                p._lastComponentUpdateWeapon = playerWeapon;
                SetPlayerWeapons(p);
            }
        }
    });
}, 2000);

function OnPlayerWeaponSwitched(c_weapon) {
    let weapon = weapon_data.getWeaponHash(Number(c_weapon));
    if (weapon == '-1') {
        CommunicationManager.TriggerServer("ClientSentACEvent1", "CHEAT_WEAPON", "Switch_" + String(c_weapon));
    }

    const allowedLockOn = [
        0xA2719263, // weapon_unarmed
        0xDD5DF8D9, // weapon_machete
    ];

    if (allowedLockOn.includes(Number(c_weapon))) {
        // melee combat lockon, dass man nicht immer daneben schlägt
        mp.game.player.setLockon(true);
        mp.game.player.setLockonRangeOverride(5.0);
        mp.game.player.setLockonRangeOverride(5.0);
        mp.players.local.setOnlyDamagedByPlayer(false);
    } else {
        mp.game.player.setLockon(false);
        mp.game.player.setLockonRangeOverride(0.0);
        mp.game.player.setLockonRangeOverride(0.0);
        mp.players.local.setOnlyDamagedByPlayer(false);
    }

    const weaponData = weapon_data.getData(c_weapon);
    // AntiCheatProtectedValues.accuracy = weaponData.accuracy ? weaponData.accuracy : 0;

    SetPlayerWeapons(mp.players.local);
}

var LocalPlayerWeaponHash = 0x60EC506;

var LocalPlayerFlashLightStatus;

mp.events.add("render", () => {

    mp.game.player.resetStamina();

    //const currentFlashLightState = !!natives.IS_FLASH_LIGHT_ON(mp.players.local.handle);
    //if (currentFlashLightState !== LocalPlayerFlashLightStatus) {
    //    LocalPlayerFlashLightStatus = currentFlashLightState;
    //    ///// OnPlayerChangedFlashLightState ////
    //    VioRageManager.ConsoleLog("info","newFlashLightState: " + LocalPlayerFlashLightStatus);
    //}


    ///// OnPlayerWeaponSwitched ////
    if (LocalPlayerWeaponHash != mp.players.local.weapon || mp.players.local.getIsTaskActive(56) == true) {
        BlockWeaponSwitchTimer = new Date().getTime() + 100; // 700
        BlockWeaponSwitchState = true;
        if (mp.players.local.getIsTaskActive(56) == false) {
            LocalPlayerWeaponHash = mp.players.local.weapon;
            if(PlayerWeaponAmmoInClip[LocalPlayerWeaponHash] != null){
                var totalAmmo = mp.players.local.getWeaponAmmo(LocalPlayerWeaponHash);
                if (mp.storage.data.testServer[mp.game.joaat('BETA_COMBAT_DEBUG')]) {
                    VioRageManager.SendChatMessage("Switch totalAmmo ["+LocalPlayerWeaponHash+"] -> " + totalAmmo);
                }

                var AMMO_TYPE = mp.game.invoke("0x7FEAD38B326B9F74", mp.players.local.handle, mp.players.local.weapon >> 0);

                if (mp.storage.data.testServer[mp.game.joaat('BETA_COMBAT_DEBUG')]) {
                    VioRageManager.SendChatMessage("Switch AMMO_TYPE ["+LocalPlayerWeaponHash+"] -> " + AMMO_TYPE);
                }

                mp.players.local.setAmmoInClip(Number(LocalPlayerWeaponHash), PlayerWeaponAmmoInClip[LocalPlayerWeaponHash]);
                mp.game.invoke("0x5FD1E1F011E76D7E", mp.players.local.handle, AMMO_TYPE, totalAmmo)

                //mp.game.invoke("0x14E56BC5B5DB6A19", mp.players.local.handle, mp.players.local.weapon >> 0);
                if (mp.storage.data.testServer[mp.game.joaat('BETA_COMBAT_DEBUG')]) {
                    VioRageManager.SendChatMessage("Switch setAmmoInClip ["+LocalPlayerWeaponHash+"] -> " + PlayerWeaponAmmoInClip[LocalPlayerWeaponHash]);
                }
            }
            OnPlayerWeaponSwitched(mp.players.local.weapon);
        }
    } else {
        if (BlockWeaponSwitchState == true) {
            let ts = new Date().getTime()
            if (BlockWeaponSwitchTimer <= ts) {
                BlockWeaponSwitchState = false;
            }
        }
    }

    // CTaskReloadGun
    if (mp.players.local.getIsTaskActive(298) == true) {
        if(PlayerWeaponAmmoInClip[LocalPlayerWeaponHash] != null){
            PlayerWeaponAmmoInClip[LocalPlayerWeaponHash] = null;
            if (mp.storage.data.testServer[mp.game.joaat('BETA_COMBAT_DEBUG')]) {
                VioRageManager.SendChatMessage("Reload setAmmoInClip ["+LocalPlayerWeaponHash+"] -> MAX");
            }
        }
    }

    ///// Waffen Schuss deaktivieren wenn mit Q ohne Aim an der Mauer/Auto etc... ///////
    if (mp.players.local.getIsTaskActive(290) == false && mp.players.local.getIsTaskActive(309) == true && mp.players.local.getIsTaskActive(287) == true) {
        mp.game.controls.disableControlAction(2, 24, true);
        mp.game.controls.disableControlAction(2, 257, true);
        mp.game.controls.disableControlAction(2, 142, true);
    }

    ///// Waffen Schuss deaktivieren ////
    if (BlockWeaponSwitchState == true || BlockWeaponReloadState == true || mp.players.local.getParachuteState() == 2) {
        mp.game.ui.displayAmmoThisFrame(false);
        mp.game.controls.disableControlAction(2, 12, true);
        mp.game.controls.disableControlAction(2, 13, true);
        mp.game.controls.disableControlAction(2, 14, true);
        mp.game.controls.disableControlAction(2, 15, true);
        mp.game.controls.disableControlAction(2, 16, true);
        mp.game.controls.disableControlAction(2, 17, true);
        mp.game.controls.disableControlAction(2, 37, true);
        mp.game.controls.disableControlAction(2, 157, true);
        mp.game.controls.disableControlAction(2, 158, true);
        mp.game.controls.disableControlAction(2, 159, true);
        mp.game.controls.disableControlAction(2, 160, true);
        mp.game.controls.disableControlAction(2, 161, true);
        mp.game.controls.disableControlAction(2, 162, true);
        mp.game.controls.disableControlAction(2, 163, true);
        mp.game.controls.disableControlAction(2, 164, true);
        mp.game.controls.disableControlAction(2, 165, true);

        mp.game.controls.disableControlAction(2, 24, true);
        mp.game.controls.disableControlAction(2, 25, true);
        mp.game.controls.disableControlAction(2, 257, true);
        mp.game.controls.disableControlAction(2, 45, true);

        mp.game.controls.disableControlAction(2, 140, true);
        mp.game.controls.disableControlAction(2, 141, true);
        mp.game.controls.disableControlAction(2, 142, true);
        mp.game.controls.disableControlAction(2, 143, true);
    }


    /*
    ///// Keine weapon_compactrifle auf dem bike /////
    let canDoDriveBy = true;
    if (mp.players.local.vehicle) {
        if (mp.game.vehicle.isThisModelABike(mp.players.local.vehicle.model)) {
            if (mp.players.local.weapon === 0x624FE830) { // weapon_compactrifle
                canDoDriveBy = false;
            }
        }
    }
     */
    mp.game.player.setCanDoDriveBy(true);

    ///// Hitmarker ////
    if (mp.storage.data.hitSettings.hitmarker == 1) {
        if (!mp.game.graphics.hasStreamedTextureDictLoaded("hud_reticle")) {
            mp.game.graphics.requestStreamedTextureDict("hud_reticle", true);
        }
        if (mp.game.graphics.hasStreamedTextureDictLoaded("hud_reticle")) {
            if ((Date.now() / 1000 - timerHitmarkerKill) <= 0.15) {
                mp.game.graphics.drawSprite("hud_reticle", "reticle_ar", 0.5, 0.5, 0.025, 0.040, 45, 200, 0, 0, 150);
            } else if ((Date.now() / 1000 - timerHitmarker) <= 0.1) {
                mp.game.graphics.drawSprite("hud_reticle", "reticle_ar", 0.5, 0.5, 0.025, 0.040, 45, 255, 255, 255, 150);
            } else if ((Date.now() / 1000 - timerHitmarkerVehicle) <= 0.1) {
                mp.game.graphics.drawSprite("hud_reticle", "reticle_ar", 0.5, 0.5, 0.025, 0.040, 45, 255, 255, 0, 150);
            }
        }
        if ((Date.now() / 1000 - timerEnterDisable) <= 2) {
            mp.game.controls.disableControlAction(0, 23, true);
            mp.game.controls.disableControlAction(1, 23, true);
            mp.game.controls.disableControlAction(2, 23, true);
        }
    }

    let c_weapon = mp.players.local.weapon;
    if (c_weapon != VioRageManager.joaat("weapon_unarmed") && mp.players.local.isDead() == false && FightClubSpectatorCam == null) {
        if (mp.storage.data.crosshair == "1") {
            if (c_weapon != 0x60EC506 && c_weapon != 966099553 && c_weapon != 3173288789 && c_weapon != 0) {
                // Waffen der Animationen werden nicht mehr berücksichtigt, Farm anpflanzen
                //natives.ENABLE_CROSSHAIR_THIS_FRAME(); <-- Bug beim Rennen (crosshair wird ständig nach unten gezogen vom Spiel | GTA V nicht fixbar!)
                //var resolution = mp.game.graphics.getScreenActiveResolution(1, 1);
                //var ratio = resolution.x / resolution.y;
                //mp.game.graphics.drawRect(0.5, 0.5, (0.004 / ratio), 0.004, 255, 255, 255, (Number(mp.storage.data.crosshairalpha) / 100 * 255));
                mp.game.ui.showHudComponentThisFrame(14);
            }
        }
    }
});

mp.events.add("playerStartEnterVehicle", (v, s) => {
    mp.players.local.giveWeapon(2725352035, 1, true)
    AnimationManager.stopAnimation(true);
});

mp.events.add("playerEnterVehicle", (v, s) => {
    mp.players.local.giveWeapon(2725352035, 1, true)
    AnimationManager.stopAnimation(true);
});

mp.events.add("playerLeaveVehicle", (v, s) => {
    mp.players.local.giveWeapon(2725352035, 1, true)
});

mp.events.addDataHandler("cWEAPONS", (entity, value) => {
    if (entity.type === "player") {
        if (entity.handle !== 0) {
            entity._lastComponentUpdateWeapon = 0;
            //SetPlayerWeapons(entity);
        }
    }
});

mp.events.add("entityStreamIn", (entity) => {
    if (entity.type === "player") {
        entity._lastComponentUpdateWeapon = 0;
        //SetPlayerWeapons(entity);
    }
});

{

    let debugActiveTasks = "";
    mp.events.add("render", () => {
        if (!mp.storage.data.testServer[mp.game.joaat('BETA_SHOW_ACTIVE_TASKS')]) return;
        debugActiveTasks = "";

        for(var i = 0; i < 500; i++) {
            if(mp.players.local.getIsTaskActive(i)) {
                if(debugActiveTasks == "")
                    debugActiveTasks = i;
                else
                    debugActiveTasks = debugActiveTasks + "," + i;
            }

        }

        mp.game.graphics.drawText("Active Tasks: " + debugActiveTasks, [0.5, 0.05], {
            font: 7,
            color: [255, 255, 255, 185],
            scale: [0.8, 0.8],
            outline: true
        });
    });

}


// User Main Menu
CommunicationManager.AddServerEvent("OpenClientUserpanelOverview", (json_data) => {
    if (Webwindow["UserpanelOverview"] == null) {
        Webwindow["UserpanelOverview"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/player/profile/profile.html", true);
        Webwindow["UserpanelOverview"].start('Init', json_data, ServerTimestampDifferenz);
        ToogleHudStatus(false, false);
    }
});
CommunicationManager.AddWebBrowserEvent("OnClientRequestUserpanelOverview", (eventName, ...args) => {

    if ("UserpanelOverview" in Webwindow) {
        Webwindow["UserpanelOverview"].destroy();
        delete Webwindow["UserpanelOverview"];
        ToogleHudStatus(true, true);
    }
    switch (eventName) {
        case "close":
            break;
        case "backToMainMenu":
            CommunicationManager.TriggerServer("OnClientOpenSelfOverview");
            break;
    }
}, "UserpanelOverview");

// User Overview
CommunicationManager.AddServerEvent("OpenClientSelfOverview", (json_data) => {
    if (Webwindow["SelfOverview"] == null) {
        Webwindow["SelfOverview"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/player/main_menu/main_menu.html", true);
        Webwindow["SelfOverview"].start('SelfOverview:Init', json_data);
        ToogleHudStatus(false, false);
    }
});
CommunicationManager.AddWebBrowserEvent("OnClientRequestSelfOverview", (eventName, ...args) => {

    if ("SelfOverview" in Webwindow) {
        Webwindow["SelfOverview"].destroy();
        delete Webwindow["SelfOverview"];
        ToogleHudStatus(true, true);
    }
    switch (eventName) {
        case "openQuests":
            CommunicationManager.TriggerServer("OnClientOpenQuestOverview");
            break;
        case "openOverview":
            CommunicationManager.TriggerServer("OnClientOpenUserpanelOverview");
            break;
        case "openShop":
            CommunicationManager.TriggerServer("OnClientOpenBonusshopOverview");
            break;
        case "openAdvertise":
            CommunicationManager.TriggerServer("onClientRequestUserBonusList");
            break;
        case "openSettings":
            SettingsHandler.openSettings();
            break;
        case "openAchievements":
            CommunicationManager.TriggerServer('OnClientOpenAchievementOverview');
            break;
        case "close":
            break;
        case "backToMainMenu":
            CommunicationManager.TriggerServer("OnClientOpenSelfOverview");
            break;
    }
}, "SelfOverview");

// Quest Menu
CommunicationManager.AddServerEvent("OpenClientQuestOverview", (json_data) => {
    if (Webwindow["QuestOverview"] == null) {
        Webwindow["QuestOverview"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/dist/Quests.html", true);
        Webwindow["QuestOverview"].start('QuestOverview:Init', json_data, InventoryItems[39]);
        ToogleHudStatus(false, false);
    } else {
        Webwindow["QuestOverview"].call('QuestOverview:Init', json_data);
    }
});
CommunicationManager.AddWebBrowserEvent("OnClientRequestQuestOverview", (eventName, ...args) => {
    switch (eventName) {
        case "requestDailyQuestBonus":
            {
                const [questId] = args;
                CommunicationManager.TriggerServer("OnClientPayoutQuest", questId);
            }
            break;
        case "requestDailyExtraBonus":
            if ("QuestOverview" in Webwindow) {
                Webwindow["QuestOverview"].destroy();
                delete Webwindow["QuestOverview"];
                ToogleHudStatus(true, true);
            }
            CommunicationManager.TriggerServer("OnClientPayoutQuestBonus");
            break;
        case "requestDailyQuestRefresh":
            {
                const [questId] = args;
                CommunicationManager.TriggerServer("OnClientChangeQuest", questId);
            }
            break;
        case "close":
            if ("QuestOverview" in Webwindow) {
                Webwindow["QuestOverview"].destroy();
                delete Webwindow["QuestOverview"];
                ToogleHudStatus(true, true);
            }
            break;
        case "backToMainMenu":
            if ("QuestOverview" in Webwindow) {
                Webwindow["QuestOverview"].destroy();
                delete Webwindow["QuestOverview"];
                ToogleHudStatus(true, true);
            }
            CommunicationManager.TriggerServer("OnClientOpenSelfOverview");
            break;
    }
}, "QuestOverview");

// Bonus Shop
CommunicationManager.AddServerEvent("OpenClientBonusshopOverview", (json_data) => {
    if (Webwindow["BonusshopOverview"] == null) {
        Webwindow["BonusshopOverview"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/player/bonusshop/bonusshop.html", true);
        Webwindow["BonusshopOverview"].start('BonusshopOverview:Init', json_data);
        ToogleHudStatus(false, false);
    }
});
CommunicationManager.AddWebBrowserEvent("OnClientRequestBonusshopOverview", (eventName, argument) => {

    if ("BonusshopOverview" in Webwindow) {
        Webwindow["BonusshopOverview"].destroy();
        delete Webwindow["BonusshopOverview"];
        ToogleHudStatus(true, true);
    }

    switch (eventName) {
        case "close":
            break;
        case "change_name":
            CommunicationManager.TriggerServer("OnClientRequestBonusShopAction", 2, argument);
            break;
        case "buy_backpack":
            CommunicationManager.TriggerServer("OnClientRequestBonusShopAction", 1, "-");
            break;
        case "change_telnumber":
            CommunicationManager.TriggerServer("OnClientRequestBonusShopAction", 3, argument);
            break;
        case "buy_statistics":
            CommunicationManager.TriggerServer("OnClientRequestBonusShopAction", 4, "-");
            break;
        case "buy_vehiclelimit1":
            CommunicationManager.TriggerServer("OnClientRequestBonusShopAction", 5, "-");
            break;
        case "buy_vehiclelimit2":
            CommunicationManager.TriggerServer("OnClientRequestBonusShopAction", 6, "-");
            break;
        case "openSelf":
            CommunicationManager.TriggerServer("OnClientOpenSelfOverview");
            break;
    }
}, "BonusshopOverview");

// Achievements Menu
CommunicationManager.AddServerEvent('OpenClientAchievementOverview', (categories, elements, elementProgressData) => {
    if (Webwindow['AchievementsOverview'] == null) {
        Webwindow['AchievementsOverview'] = new CEFBrowser(`https://vio-v.com/gameplay/CEF/${CEF_Master_Link}/html/player/achievements/achievements.html`, true);
        Webwindow['AchievementsOverview'].start('Init', JSON.stringify([JSON.parse(categories), JSON.parse(elements), JSON.parse(elementProgressData)]), JSON.stringify(lang_de.items));
        ToogleHudStatus(false, false);
    }
});
CommunicationManager.AddWebBrowserEvent('OnClientRequestAchievementOverview', (eventName, ...args) => {
    function close() {
        Webwindow["AchievementsOverview"].destroy();
        delete Webwindow["AchievementsOverview"];
        ToogleHudStatus(true, true);
    }

    switch (eventName) {
        case 'close':
            close();
            break;
        case 'backToMainMenu':
            close();
            CommunicationManager.TriggerServer('OnClientOpenSelfOverview');
            break;
        case 'pickupReward':
            // TODO Belohnung abholen an Server Senden.
            break;
    }
}, 'AchievementsOverview');

var InventoryItems = []

var InventorySize = 0
var InventoryMaxSize = 0

mp.game.gameplay.setFakeWantedLevel(0);
mp.game.stats.statSetInt(mp.game.joaat("SP0_TOTAL_CASH"), 0, false);

var LocalPlayerHudMoneySwapDate = Date.now();
var LocalPlayerHudMoneySwapCount = 0;
var LocalPlayerHudMoney = -99999;

function UpdateLocalPlayerHudMoney() {
    if (Number(InventoryItems["0"]) != LocalPlayerHudMoney) {
        LocalPlayerHudMoney = Number(InventoryItems["0"]);
        if (LocalPlayerHudMoneySwapCount == 0) {
            let currentDate = Date.now();
            if ((currentDate - LocalPlayerHudMoneySwapDate) > 6400) {
                LocalPlayerHudMoneySwapDate = Date.now();
                LocalPlayerHudMoneySwapCount = 0;
                mp.game.stats.statSetInt(mp.game.joaat("SP0_TOTAL_CASH"), LocalPlayerHudMoney, false);
            } else {
                LocalPlayerHudMoneySwapCount = 1;
                setTimeout(() => {
                    LocalPlayerHudMoneySwapDate = Date.now();
                    LocalPlayerHudMoneySwapCount = 0;
                    mp.game.stats.statSetInt(mp.game.joaat("SP0_TOTAL_CASH"), LocalPlayerHudMoney, false);
                }, 6500);
            }
        }
    }
}

mp.events.add("updateInventoryItems", (arg0, arg1, arg2) => {

    InventoryItems = JSON.parse(arg0);

    InventorySize = arg1
    InventoryMaxSize = arg2

    UpdateLocalPlayerHudMoney();

    if (InitPlayerMoneyHUD == false) {
        InitPlayerMoneyHUD = true;
        setTimeout(() => {
            PlayerMoneyHUD = true;
            mp.game.stats.statSetInt(mp.game.joaat("SP0_TOTAL_CASH"), Number(InventoryItems["0"]), false);
        }, 13000);
    }

    mp.events.call("onInventoryUpdate");

    if (Inventory.visible == true) {
        Inventory.loadItems("UserInventory", InventoryItems)
    }
});

mp.events.add('render', () => {
    if (PlayerMoneyHUD) {
        mp.game.ui.showHudComponentThisFrame(1);
        mp.game.ui.showHudComponentThisFrame(3);
    } else {
        mp.game.ui.hideHudComponentThisFrame(13);
        mp.game.ui.hideHudComponentThisFrame(3);
        mp.game.ui.hideHudComponentThisFrame(1);
    }
});

mp.events.add("updateInventoryWanteds", (arg0) => {
    mp.game.gameplay.setFakeWantedLevel(Number(arg0));
});

mp.events.add("openExport", (arg0, arg1) => {

    CEFUtility.CloseAll();

    Webwindow["Export"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/export/miene.html", true);
    Webwindow["Export"].start('miene:init', lang_de.items, JSON.parse(arg1), arg0);
    VioRageManager.ShowChat(false);
});

// arg0 = eigener spieler
// arg1 = temp storage (trade)
// arg2 = name vom handelspartner
mp.events.add("openTrade", (arg0, arg1, arg2) => {

    CEFUtility.CloseAll();

    var tempNames = lang_de.items
    tempNames["username"] = arg2;
    Webwindow["Trade"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/trade/trade.html", true);
    Webwindow["Trade"].start('trade:init', tempNames, "[ " + arg0 + " ]", "[ " + arg1 + " ]", InventoryMaxSize);
});
CommunicationManager.AddServerEvent("cancelTrade", () => {
    if (Webwindow["Trade"] != null) {
        Webwindow["Trade"].destroy();
        VioRageManager.ShowChat(true);
        mp.gui.cursor.show(false);
        mp.gui.cursor.visible = false;
        Webwindow["Trade"] = null;
    }
});

CommunicationManager.AddServerEvent("OnPlayerTradeFinished", () => {

    if (Webwindow["Trade"] != null) {
        Webwindow["Trade"].call("OnPlayerTradeFinished");
    }
    mp.gui.cursor.visible = false;

    setTimeout(function () {
        VioRageManager.ShowChat(true);
        mp.gui.cursor.show(false);

        if (Webwindow["Trade"] != null) {
            Webwindow["Trade"].destroy();
            Webwindow["Trade"] = null;
        }
    }, 2000);
});
mp.events.add("updateTradeItems", (arg0, arg1) => {
    if (Webwindow["Trade"] != null) {
        Webwindow["Trade"].call('trade:update', "[ " + arg0 + " ]", "[ " + arg1 + " ]");
    }
});
mp.events.add("updateTradeItemsTarget", (arg0) => {
    if (Webwindow["Trade"] != null) {
        Webwindow["Trade"].call('trade:updateTarget', "[ " + arg0 + " ]");
    }
});
mp.events.add("updateTradeReady", () => {
    if (Webwindow["Trade"] != null) {
        Webwindow["Trade"].call('trade:ready');
    }
});

CommunicationManager.AddWebBrowserEvent("clientRequestTradeStorageAction", (inventory_table, trade_table) => {
    CommunicationManager.TriggerServer("onClientRequestTradeStorageAction", inventory_table, trade_table);
}, "Trade");

CommunicationManager.AddWebBrowserEvent("requestMieneClose", () => {
    Webwindow["Export"].destroy();
    VioRageManager.ShowChat(true);
    mp.gui.cursor.visible = false;
    Webwindow["Export"] = null;
}, "Export");
CommunicationManager.AddWebBrowserEvent("onClientSellMats", (items) => {
    Webwindow["Export"].destroy();
    VioRageManager.ShowChat(true);
    mp.gui.cursor.visible = false;
    Webwindow["Export"] = null;
    CommunicationManager.TriggerServer("onClientRequestExport", items);
}, "Export");


CommunicationManager.AddWebBrowserEvent("requestCloseTrade", () => {
    CommunicationManager.TriggerServer("onClientRequestTradeCancel");
}, "Trade");
CommunicationManager.AddWebBrowserEvent("clientTradeReady", () => {
    CommunicationManager.TriggerServer("onClientTradeReady");
}, "Trade");

var Inventory = new class {
    constructor() {
        this._setup();
    }
    _setup() {
        this.choices = [];
        this.browser = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/inventory/inventory.html", false);
        this.active = false;
        //this.browser.active(this.active)
        this._openTabs = [];
    }
    show() {
        this.active = !this.active;
        mp.gui.cursor.visible = this.active;
        VioRageManager.ActivateChat(!this.active);
        //if(this.browser.active === false)
            //this.browser.active(this.active);
    }
    hide() {
        this.active = false;
        mp.gui.cursor.visible = false;
        VioRageManager.ActivateChat(true);
        this.allowMoney("Storage", false);
        this.allowMoney("UserInventory", false);
        this.showInventory("UserInventory", false)
        this._openTabs.forEach((target) => {
            this.showInventory(target, false);
        })
        this._openTabs = [];
        this.browser.call("hide_amount_move");
        //this.browser.active(false);
    }
    get visible() {
        return this.active
    }
    showInventory(target, state) {
        //VioRageManager.SendChatMessage("DEBUG: showInventory - " + target + " | " + String(state));
        this.browser.call("show", target, state)
        if (state) {
            this._openTabs.push(target)
        }
    }
    isOpen(target) {
        return this._openTabs.indexOf(target) > -1
    }
    loadItems(target, items) {
        this.browser.call("load_inventory", target, JSON.stringify(items))
    }
    setMaxWeight(target, maxweight) {
        this.browser.call("set_max_weight", target, maxweight)
    }
    loadLangpack(lang) {
        this.browser.call("loadLangpack", lang)
    }
    allowMoney(target, state) {
        this.browser.call("allow_money", target, state)
    }
    requestSave() {
        this.browser.call("save")
    }
}
mp.events.add("removeInventoryObject", (item, amount) => {
    if(IsPlayerInFightClub == false){
        CommunicationManager.TriggerServer("onClientRequestRemoveItem", item, amount);
    }else{
        CreateNotify("~r~Diese Funktion ist hier nicht möglich!");
    }
})
mp.events.add("openInventory", () => {
    if (Inventory.visible && lang_de.items != null && Webwindow["VehicleWindow"] == null && Webwindow["BonusShop"] == null && mp.players.local.getHealth() > 0) {
        openInventory();
        WeedPlantDrug.reset();
    }
});

mp.events.add("openInventoryCheckLess", () => {
    if ((Inventory.visible == false) && (lang_de.items != null) && (Webwindow["VehicleWindow"] == null) && (mp.players.local.isDead() == false)) {
        Inventory.loadLangpack(lang_de.items)
        Inventory.show();
        Inventory.setMaxWeight("UserInventory", InventoryMaxSize)
        Inventory.loadItems("UserInventory", InventoryItems)
        Inventory.showInventory("UserInventory", true)
        WeedPlantDrug.reset();
    }
});

KeybindManager.registerVioKeyFunction("Inventar", false, () => {
    openInventory();
});


function openInventory() {

    if(IsPlayerInFightClub == true){
        // --> Öffne FightClubInventar
        if ((Inventory.visible == false) && (lang_de.items != null) && (Webwindow["VehicleWindow"] == null) && (mp.players.local.isDead() == false)) {
            if ((Inventory.visible == false) && (mp.gui.cursor.visible == false) && CharacterCreatorCamera == null) {
                Inventory.loadLangpack(lang_de.items)
                Inventory.show();
                Inventory.setMaxWeight("UserInventory", 200)

                const GET_PED_AMMO_BY_TYPE = "0x39D22031557946C1";
                FightClubItems["29"] = mp.game.invoke(GET_PED_AMMO_BY_TYPE, mp.players.local.handle, mp.game.joaat("AMMO_PISTOL") >> 0);
                FightClubItems["30"] = mp.game.invoke(GET_PED_AMMO_BY_TYPE, mp.players.local.handle, mp.game.joaat("AMMO_SMG") >> 0);
                FightClubItems["32"] = mp.game.invoke(GET_PED_AMMO_BY_TYPE, mp.players.local.handle, mp.game.joaat("AMMO_RIFLE") >> 0);
                FightClubItems["34"] = mp.game.invoke(GET_PED_AMMO_BY_TYPE, mp.players.local.handle, mp.game.joaat("AMMO_SHOTGUN") >> 0);
                FightClubItems["31"] = mp.game.invoke(GET_PED_AMMO_BY_TYPE, mp.players.local.handle, mp.game.joaat("AMMO_MG") >> 0);
                FightClubItems["33"] = mp.game.invoke(GET_PED_AMMO_BY_TYPE, mp.players.local.handle, mp.game.joaat("AMMO_SNIPER") >> 0);

                Inventory.loadItems("UserInventory", FightClubItems)
                Inventory.showInventory("UserInventory", true)
            }
        }else{
            Inventory.hide();
        }
    }else{
        if ((Inventory.visible == false) && (lang_de.items != null) && (Webwindow["VehicleWindow"] == null) && (mp.players.local.isDead() == false)) {
            if(isPlayerCuffed || disableAllControls || mp.players.local.isSwimming() || mp.players.local.isSwimmingUnderWater()){return;}

            if ((Inventory.visible == false) && (mp.gui.cursor.visible == false) && CharacterCreatorCamera == null) {

                if (isPlayerCarryingAction) return;

                if (mp.players.local.dimension != 0 && InHouse == true && InGroupHouse == false)
                {
                    CommunicationManager.TriggerServer("requestOpenHouseStorage");
                }
                else
                {
                    if (checkVehStorage() == false) {
                        Inventory.loadLangpack(lang_de.items)
                        Inventory.show();
                        Inventory.setMaxWeight("UserInventory", InventoryMaxSize)
                        Inventory.loadItems("UserInventory", InventoryItems)
                        Inventory.showInventory("UserInventory", true)

                        CommunicationManager.TriggerServer("onClientRequestStoragUpdate"); // Testweise deaktiviert
                    }
                }
            }
        } else {
            if (Webwindow["VehicleWindow"] != null) {
                Webwindow["VehicleWindow"].destroy();
                VioRageManager.ShowChat(true);
                mp.gui.cursor.visible = false;
                Webwindow["VehicleWindow"] = null;
            }
            if (Inventory.isOpen("Storage")) {
                Inventory.requestSave();
            } else {
                Inventory.hide();
            }
        }
    }
}

mp.events.add("openStorageWindow", (ServerItems, moneyTradeable, Size) => {
    let storage_items = JSON.parse(ServerItems).storage;
    let inventory_items = JSON.parse(ServerItems).inventory;
    let storage_size = JSON.parse(Size);
    Inventory.loadLangpack(lang_de.items)
    Inventory.show();
    Inventory.loadItems("UserInventory", inventory_items)
    Inventory.setMaxWeight("UserInventory", storage_size.inventory_max)
    Inventory.showInventory("UserInventory", true)
    Inventory.loadItems("Storage", storage_items)
    Inventory.setMaxWeight("Storage", storage_size.storage_max)
    Inventory.showInventory("Storage", true)
    if (moneyTradeable == true) {
        Inventory.allowMoney("Storage", true);
        Inventory.allowMoney("UserInventory", true);
    } else {
        Inventory.allowMoney("Storage", false);
        Inventory.allowMoney("UserInventory", false);
    }
});

function checkVehStorage() {
    let player = mp.players.local;
    let TargetVehicle = null;
    let dist_init = 100;
    let dist;
    let target_position;

    if(mp.players.local.isInAnyVehicle(false)) { // Wenn Spieler im Fahrzeug sitzt -> Immer aufs aktuelle Fahrzeug zugreifen
        TargetVehicle = mp.players.local.vehicle;
        if (TargetVehicle.getClass() != 13 && TargetVehicle.getVariable("PRIVATE_VEHICLE_OWNER") != null && TargetVehicle.getVariable("PRIVATE_VEHICLE_OWNER") == LocalCharacterID) {
            CommunicationManager.TriggerServer("onClientRequestPrivateVehicleStorage", TargetVehicle);
            return true;
        }
    }

    mp.vehicles.forEachInStreamRange((tVeh) => {
        target_position = tVeh.position;
        dist = mp.game.gameplay.getDistanceBetweenCoords(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, target_position.x, target_position.y, target_position.z, true);
        if (dist < dist_init) {
            dist_init = dist;
            TargetVehicle = tVeh;
        }
    });

    if (TargetVehicle != null) {
        if (TargetVehicle.getVariable("PRIVATE_VEHICLE_OWNER") != null) {
            if (TargetVehicle.getVariable("PRIVATE_VEHICLE_OWNER") == LocalCharacterID) {
                let player_pos = mp.players.local.position;

                let trunk_bone = "boot";
                if(TargetVehicle.model == 65402552) { // Youga -> An den Hecktüren am Griff
                    trunk_bone = "handle_dside_r";
                }
                else {
                    if(!VioRageManager.HasVehicleBone(TargetVehicle, trunk_bone)) { // Kein Kofferraum? Versuche Windschutz hinten
                        trunk_bone = "windscreen_r";
                    }
                }

                let trunk_pos = null;
                if(VioRageManager.HasVehicleBone(TargetVehicle, trunk_bone))
                    trunk_pos = TargetVehicle.getWorldPositionOfBone(TargetVehicle.getBoneIndexByName(trunk_bone));
                else if(VioRageManager.HasVehicleBone(TargetVehicle, "wheel_rr") && VioRageManager.HasVehicleBone(TargetVehicle, "wheel_lr")) {
                    trunk_pos = GetPositionBetweenPosition(
                        TargetVehicle.getWorldPositionOfBone(TargetVehicle.getBoneIndexByName("wheel_lr")),
                        TargetVehicle.getWorldPositionOfBone(TargetVehicle.getBoneIndexByName("wheel_rr"))
                    );

                    trunk_pos.z = TargetVehicle.position.z + 0.1;
                }
                else {
                    trunk_pos = TargetVehicle.position;
                }

                let dist1 = mp.game.gameplay.getDistanceBetweenCoords(player_pos.x, player_pos.y, player_pos.z, trunk_pos.x, trunk_pos.y, trunk_pos.z, true);
                if ((dist1 < 2) || ((mp.players.local.isInAnyVehicle(false)) && (mp.players.local.vehicle == TargetVehicle))) {
                    if (TargetVehicle.getClass() != 13) {
                        CommunicationManager.TriggerServer("onClientRequestPrivateVehicleStorage", TargetVehicle);
                        return true;
                    }else{
                        return false;
                    }
                }
                return false;
            }
            return false;
        }
        return false;
    }
    return false;
}
mp.events.add("requestInventoryListAction", (item) => {

    if(IsPlayerInFightClub == true){
        if (parseInt(item) == -1) {

        } else {
            CommunicationManager.TriggerServer("OnClientRequestFightClubInventoryAction", Number(item));
            Inventory.hide();
        }

    }else{
        if(isPlayerFishing == true && parseInt(item) != 24){
            CreateNotify("~r~Du musst die Angel beiseitelegen, damit du diese Aktion durchführen kannst.");
            return;
        }
        if (parseInt(item) == -1) {

        } else {
            CommunicationManager.TriggerServer("onClientRequestInventoryAction", Number(item));
        }
        VioRageManager.ShowChat(true);
        mp.gui.cursor.visible = false;
        if (Inventory.isOpen("Storage")) {
            Inventory.requestSave();
        } else {
            Inventory.hide();
        }
    }
})
mp.events.add("requestSaveStorageWindow", (storage, inventory) => {
    if(IsPlayerInFightClub == false){
        CommunicationManager.TriggerServer("onClientRequestStorageAction", storage, inventory);
    }
    Inventory.hide();
})
mp.events.add("requestCloseStorageWindow", () => {
    Inventory.hide();
    if(IsPlayerInFightClub == false){
        CommunicationManager.TriggerServer("onClientRequestStorageClose");
    }
});

//KeybindManager.registerVioKeyFunction("Hausmenü", true, () => {
//
//});

function openBank() {
    if (Webwindow["Bank"] == null && mp.players.local.isDead() == false) {
        if (mp.gui.cursor.visible == true) {
            return
        }
        CommunicationManager.TriggerServer("requestOpenBankWindow");
    } else {
        if (Webwindow["Bank"] != null) {
            Webwindow["Bank"].destroy();
            Webwindow["Bank"] = null;
            disableAllControls = false;
        }
    }
}

mp.events.add("reopenMoneyBank", (barmoney, bankmoney) => {
    if (Webwindow["Bank"] != null) {
        var Depot = {};
        Depot["player"] = barmoney;
        Depot["bank"] = bankmoney;
        Webwindow["Bank"].call('bank:update', "[ " + JSON.stringify(Depot) + " ]");
    }
})

mp.events.add("forceCloseMoneyBank", () => {
    if (Webwindow["Bank"] != null) {
        Webwindow["Bank"].destroy();

        Webwindow["Bank"] = null;

        disableAllControls = false;

    }
})

CommunicationManager.addSafeServerEvent('openMoneyBank', (banklog, barmoney, bankmoney) => {
    const Depot = {};
    Depot["player"] = barmoney;
    Depot["bank"] = bankmoney;
    if (!mp.players.local.isDead() && Webwindow["Bank"] == null) {
        Webwindow["Bank"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/bank/bank.html", true);
        Webwindow["Bank"].start('bank:init', lang_de.window_bank, "[ " + JSON.stringify(Depot) + " ]", "[ " + banklog + " ]");
        disableAllControls = true;
    } else {
        if (Webwindow["Bank"]) {
            Webwindow["Bank"].destroy();
            Webwindow["Bank"] = null;
            disableAllControls = false;
        }
    }
});

CommunicationManager.AddWebBrowserEvent("requestCloseBank", () => {
    Webwindow["Bank"].destroy();
    Webwindow["Bank"] = null;
    disableAllControls = false;
}, "Bank");

CommunicationManager.AddWebBrowserEvent("bankpayin", (value, use) => {
    CommunicationManager.TriggerServer("payInMoneyBank", value);
}, "Bank");


CommunicationManager.AddWebBrowserEvent("requestSentPlayerMoney", (amount, targetname) => {
    Webwindow["Bank"].destroy();
    Webwindow["Bank"] = null;
    disableAllControls = false;
    CommunicationManager.TriggerServer("requestSentPlayerMoney", targetname, amount);
}, "Bank");

CommunicationManager.AddWebBrowserEvent("bankpayout", (value, use) => {
    CommunicationManager.TriggerServer("payOutMoneyBank", value);
}, "Bank");


class NoDmZone {
    static list = new Set();

    /**
     * @constructor
     * @param {string} name
     * @param {Vector3Mp} position
     * @param {number} range
     */
    constructor(name, position, range) {
        this.name = name;
        this.shape = mp.colshapes.newSphere(position.x, position.y, position.z, range);
        this.shape.NoDMZone = true;

        NoDmZone.list.add(this);
    }

    /**
     * @type {boolean}
     * @private
     */
    static _noDmState = false;

    /**
     * @return {boolean}
     */
    static get noDmState() {
        return NoDmZone._noDmState;
    }

    /**
     * @param {boolean} newState
     */
    static set noDmState(newState) {

        NoDmZone.lastTick = Date.now();

        if (newState) {
            if (voiceChat) {
                voiceChat.call("SetNoDMZone", true);
            } else {
                tempVoiceCommands.push({
                    "command": "SetNoDMZone",
                    "arg": true
                });
            }

            if (HQPoliceRadio["Status"] == -1 && LocalGroupID != 1 && !mp.players.local.adminMode) {

                Object.values(weapon_data.hashes).forEach(weaponData => {
                    if (!weaponData.ignoreNoDmZone) {
                        mp.game.invoke("0xB4771B9AAF4E68E4", mp.players.local.handle, weaponData.hash >> 0, false);
                    }
                });

                isPlayerInNoDMZone = true;
                NoDmZone._noDmState = newState;

                if (!Object.values(weapon_data.hashes).filter(a => a.ignoreNoDmZone).map(a => a.hash >> 0).includes(mp.players.local.weapon)) {
                    mp.players.local.giveWeapon(2725352035, 1, true);
                }
            }
        } else {
            NoDmZone._noDmState = newState;
            isPlayerInNoDMZone = false;

            Object.values(weapon_data.hashes).forEach(weaponData => {
                mp.game.invoke("0xB4771B9AAF4E68E4", mp.players.local.handle, weaponData.hash >> 0, true);
            });

            if (voiceChat) {
                voiceChat.call("SetNoDMZone", false);
            } else {
                tempVoiceCommands.push({
                    "command": "SetNoDMZone",
                    "arg": false
                });
            }
        }
    }

    /**
     * initial function
     */
    static init() {
        NoDmZone.noDmState = false;
        NoDmZone.lastInterior = 0;
        NoDmZone.lastTick = 0;
        NoDmZone.interiors = [
            202241, // Mine
            121346, // Weazel News
            78338, // Fight Club Stadt
        ];

        mp.events.add("playerEnterColshape", NoDmZone.onPlayerEnterColshape);
        mp.events.add("playerExitColshape", NoDmZone.onPlayerExitColshape);
        mp.events.add("render", NoDmZone.onRender);

        new NoDmZone("Townhall", new mp.Vector3(238.7703, -402.9147, 47.92435), 30);
        new NoDmZone("Los Santos International Airport", new mp.Vector3(-984.4622, -2641.172, 13.97301), 20);
        new NoDmZone("Del Perro", new mp.Vector3(-1157.33, -721.9748, 20.8), 30);
        new NoDmZone("Register", new mp.Vector3(-1038.0, -2738.0, 14.0), 20);
        new NoDmZone("Busjob", new mp.Vector3(435.8580, -644.7862, 28.735), 20);
        new NoDmZone("Farmer", new mp.Vector3(425.7533, 6462.924, 28.77841), 20);
        new NoDmZone("TaxiJob", new mp.Vector3(895.2875, -179.54527, 74.7003), 20);
        new NoDmZone("Trashjob", new mp.Vector3(-429.0999, -1727.99438, 19.78384), 20);
        new NoDmZone("Truckerjob", new mp.Vector3(1242.56, -3113.72, 6.0), 20);
        new NoDmZone("Fight Club Nord", new mp.Vector3(346.53085, 3406.1836, 36.49241), 20);
        new NoDmZone("Marktplatz", new mp.Vector3(-1026, -418, 40), 15);
    }

    static onPlayerEnterColshape(shape) {
        if (shape.NoDMZone != null) {
            NoDmZone.noDmState = true;
        }
    }

    static onPlayerExitColshape(shape) {
        if (shape.NoDMZone != null) {
            NoDmZone.noDmState = false;
        }
    }

    static onRender() {
        if (NoDmZone.noDmState) {
            if (Date.now() - NoDmZone.lastTick >= 1000) {
                NoDmZone.lastTick = Date.now();
                if (!Object.values(weapon_data.hashes).filter(a => a.ignoreNoDmZone).map(a => a.hash >> 0).includes(mp.players.local.weapon)) {
                    mp.players.local.giveWeapon(2725352035, 1, true);

                    Object.values(weapon_data.hashes).forEach(weaponData => {
                        if (!weaponData.ignoreNoDmZone) {
                            mp.game.invoke("0xB4771B9AAF4E68E4", mp.players.local.handle, weaponData.hash >> 0, false);
                        }
                    });
                }
            }
        }

        try{
            const interiorId = mp.game.invoke("0x2107BA504071A6BB", mp.players.local.handle);

            if (mp.storage.data.testServer[mp.game.joaat('BETA_SHOW_INTERIOR_ID')]) {
                mp.game.graphics.drawText(`Int: ${interiorId}`, [0.5, 0.005], {
                    font: 7,
                    color: [255, 255, 255, 185],
                    scale: [1.2, 1.2],
                    outline: true
                });
            }

            if (NoDmZone.lastInterior !== interiorId) {
                NoDmZone.lastInterior = interiorId;
                if (NoDmZone.interiors.includes(Number(interiorId))) {
                    NoDmZone.noDmState = true;
                } else {
                    NoDmZone.noDmState = false;
                }
            }
        }
        catch (e) {

        }
    }
}
NoDmZone.init();

const PositionManager = new class {
    positionLocations = new Map();
    activePositionName = null;

    /**
     * set Positiondata for new and existing markers
     * @param {string} name
     * @param {string} displayName
     * @param {Vector3Mp} position
     * @param {number} color
     * @param {number} model
     */
    setPositionData(name, displayName, position, color = 5, model = 8, size = 0.75) {
        if (this.positionLocations.has(name)) {
            const blipData = this.positionLocations.get(name);

            if (blipData.color != color) {
                blipData.color = color;
            }
            if (blipData.model != model) {
                blipData.model = model;
            }
            if (blipData.name != displayName) {
                blipData.name = displayName;
            }
            if (blipData.size != size) {
                blipData.size = size;
            }
            
            if (JSON.stringify(blipData.position) != JSON.stringify(position)) {
                blipData.position = position;
                if (this.activePositionName == name) {
                    PositionsLocatedPosition = position;
                }
            }

        } else {
            this.positionLocations.set(name, new PositionBlipData({
                name: displayName,
                position,
                color,
                model,
                size,
            }));

            this.showBlip(name);
        }
    }

    /**
     * remove marker
     * @param {string} name
     */
    removeBlipData(name) {
        if (this.activePositionName == name) {
            this.hideBlip();
        }
        this.positionLocations.delete(name);
    }

    /**
     * show marker as blip on minimap as wayoint with route
     * @param name
     */
    showBlip(name) {
        if (this.activePositionName) {
            this.hideBlip();
        }

        if (this.positionLocations.has(name)) {
            this.activePositionName = name;
            const data = this.positionLocations.get(name);
            data.createNewBlip();
            PositionsLocatedPosition = data.position;
        }
    }

    /**
     * hide current marker blip
     */
    hideBlip() {
        PositionsLocatedPosition = null;
        if (this.activePositionName) {
            this.positionLocations.get(this.activePositionName).removeBlip();
        }
        this.activePositionName = null;
    }

    getAllMarkerNames() {
        const array = [];
        for (const key of this.positionLocations.keys()) {
            array.push({key, displayName: this.positionLocations.get(key).name});
        }
        return array;
    }

    clearAllWaypoints() {
        for (const key of this.positionLocations.keys()) {
            this.removeBlipData(key);
        }
    }
}

class PositionBlipData {
    
    blip;
    _position;
    _color;
    _model;
    _name;
    _size;

    constructor({name, position, color, model, size}) {
        this._name = name;
        this._position = position;
        this._color = color;
        this._model = model;
        this._size = size;
    }


    get position() {
        return this._position;
    }

    set position(pos) {
        this._position = pos;
        if (this.blip) {
            // this.blip.setPosition(pos.x, pos.y, pos.z);
            // this.blip.setCoords(pos);
            this.createNewBlip();
        }
    }

    get color() {
        return this._color;
    }

    set color(color) {
        this._color = color;
        if (this.blip) {
            this.blip.setColour(color);
            this.blip.setRouteColour(color);
        }
    }

    get model() {
        return this._model;
    }

    set model(model) {
        this._model = model;
        if (this.blip) {
            this.blip.setSprite(model);
        }
    }

    get name() {
        return this._name;
    }

    set name(name) {
        this._name = name;
        if (this.blip) {
            this.createNewBlip();
        }
    }

    createNewBlip() {
        if (this.blip) {
            this.blip.destroy();
        }

        this.blip = mp.blips.new(this._model, this._position, {
            name: this._name,
            color: this._color,
            shortRange: false,
            scale: this._size,
        });

        this.blip.setRoute(true);
        this.blip.setSprite(this._model);
    }

    removeBlip() {
        if (this.blip) {
            this.blip.destroy();
            this.blip = null;
        }
    }
}

//var Webwindow = [];
var PositionList = {};
PositionList["Los Santos International Airport"] = new mp.Vector3(-984.4622, -2641.172, 13.97301);
PositionList["Del Perro"] = new mp.Vector3(-1168.258, -700.3124, 21.89547);
PositionList["Mega Mall"] = new mp.Vector3(46.4484, -1749.105, 29.63828);
PositionList["Mission Row Police Department"] = new mp.Vector3(441.21625, -981.79816, 30.68959);
PositionList["Hospital"] = new mp.Vector3(1104.1606, -1513.9675, 34.806);
PositionList["Central Medical Center"] = new mp.Vector3(307.6009, -1433.672, 29.9395);
PositionList["Pillbox Hill Medical Center"] = new mp.Vector3(355.765, -596.2569, 28.7755);
PositionList["Mount Zonah Medical Center"] = new mp.Vector3(-498.4588, -335.7089, 34.50177);
PositionList["Sandy Shores Medical Center"] = new mp.Vector3(1839.901, 3673.986, 34.2767);
PositionList["Bay Care Center"] = new mp.Vector3(-244.0986, 6325.522, 32.42618);

PositionList["Hayes Autos"] = new mp.Vector3(495.693, -1340.385, 29.31346);
PositionList["Town Hall"] = new mp.Vector3(233.1222, -410.3885, 48.11195);

let tempPositionsList = {};

function getPositionGroupData() {
    const groupPositions = {};

    if (LocalGroupID >= 0) {
        groupPositions["LSPD: Aktionscomputer"] = new mp.Vector3(443.32263, -997.63983, 34.97019);
    }

    if (LocalGroupID == 0 || LocalGroupID == 3 || LocalGroupID == 4) {
        groupPositions["LSPD: Ausrüstungsplatz"] = new mp.Vector3(460.43808, -996.8413, 30.689852);
        groupPositions["LSPD: Waffenkammer"] = new mp.Vector3(478.92972, -996.6485, 30.691961);
        groupPositions["LSPD: Asservatenkammer"] = new mp.Vector3(474.42337, -991.2025, 26.273449);
        groupPositions["LSPD: Arrest Auto"] = new mp.Vector3(458.55533, -992.9701, 25.699999);
        groupPositions["LSPD: Arrest Befehl"] = new mp.Vector3(473.95526, -1008.9333, 26.27347);

        groupPositions["FIB: Ausrüstungsplatz"] = new mp.Vector3(118.7446, -729.2197, 242.15195);
        groupPositions["FIB: Taschen Punkt"] = new mp.Vector3(119.28087, -731.26013, -242.15192);
        groupPositions["FIB: Waffenkammer"] = new mp.Vector3(126.44643, -729.0661, 242.15192);

        groupPositions["LSSD: Ausrüstungsplatz"] = new mp.Vector3(-442.98196, 6005.107, 31.47752);
        groupPositions["LSSD: Waffenkammer"] = new mp.Vector3(-438.8424, 6004.715, 31.477512);
        groupPositions["LSSD: Asservatenkammer"] = new mp.Vector3(-433.00766, 6000.963, 31.477512);
        groupPositions["LSSD: Arrest Auto"] = new mp.Vector3(-445.72256, 5984.1797, 31.490053);
        groupPositions["LSSD: Arrest Befehl"] = new mp.Vector3(-438.171402, 5991.1406, 31.477512);

        groupPositions["AT Abgabe Humane Labs"] = new mp.Vector3(3526.3735, 3737.141, 36.72052);
        groupPositions["AT Abgabe Military"] = new mp.Vector3(-1815.17, 2914.64, 37.67);
    }

    return groupPositions;
}

function openPositionWindow() {
    if (PositionManager.activePositionName != null) {
        CreateNotify("~g~Marker deaktiviert!");
        PositionManager.hideBlip();
    } else {
        if (Webwindow["PositionWindow"] == null && login) {
            Webwindow["PositionWindow"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/position/position.html", true);
            tempPositionsList = {...PositionList, ...getPositionGroupData()};
            Webwindow["PositionWindow"].start("position:init", tempPositionsList, {
                markers: PositionManager.getAllMarkerNames(),
                active: PositionManager.activePositionName,
            });
        }
    }
}

mp.events.add("requestClosePosition", () => {
    if (Webwindow["PositionWindow"]) {
        Webwindow["PositionWindow"].destroy();
    }
    mp.game.ui.displayHud(true);
    Webwindow["PositionWindow"] = null;
});

mp.events.add("requestPosition", (pos) => {
    // VioRageManager.setWayPoint(tempPositionsList[pos]);
    PositionManager.setPositionData("PositionSystem", `Marker: ${pos}`, tempPositionsList[pos]);
    if (Webwindow["PositionWindow"]) {
        Webwindow["PositionWindow"].destroy();
    }
    mp.game.ui.displayHud(true);
    Webwindow["PositionWindow"] = null;
});

mp.events.add("render", () => {
    if (PositionsLocatedPosition == null) return;

    const localPlayer = mp.players.local;

    const {x, y, z} = PositionsLocatedPosition;
    const {x: px, y: py, z: pz} = localPlayer.position;

    const dist = Math.floor(mp.game.system.vdist(px, py, pz, x, y, z));
    const distString = dist > 1000 ? (Math.round(dist / 1000)) + " km" : dist + " m";

    if (dist > 750) return; // über 750 den Text un den Marker nicht anzeigen

    mp.game.graphics.drawMarker(
        0,
        x, y, z + 1 / 3,
        0, 0, 0,
        0, 0, 0,
        1 / 3, 1 / 3, 1 / 3,
        252, 186, 3, 255,
        false, false, 2,
        false, null, null, false
    );

    mp.game.graphics.drawText(distString, [x, y, z + 1 / 3], {
        font: 4,
        color: [255, 255, 255, 255],
        scale: [.3, .3],
        outline: true,
        centre: true
    });
});

KeybindManager.registerVioKeyFunction("Wegpunkte", true, () => {
    if (Webwindow["PositionWindow"] == null) {
        if (mp.gui.cursor.visible == false) {
            openPositionWindow();
        }
    } else if (Webwindow["PositionWindow"] != null) {
        Webwindow["PositionWindow"].destroy();
        Webwindow["PositionWindow"] = null;
    }
});

CommunicationManager.AddWebBrowserEvent("OnClientRequestSetWaypointMarker", (name, displayName, x, y, z, color, model, forceShow = true) => {
    PositionManager.setPositionData(name, displayName, new mp.Vector3(x, y, z), color, model);
    if (forceShow) {
        PositionManager.showBlip(name);
    }
});
CommunicationManager.AddWebBrowserEvent("OnClientRequestRemoveWaypointMarker", (name) => {
    PositionManager.removeBlipData(name);
});

CommunicationManager.AddWebBrowserEvent("OnClientRequestPositionManagerAction", (action, name) => {
    switch (action) {
        case "select":
            PositionManager.showBlip(name);
            CreateNotify("~g~Marker aktiviert!");
            break;
        case "unselect":
            PositionManager.hideBlip();
            CreateNotify("~g~Marker deaktiviert!");
            break;
        case "delete":
            PositionManager.removeBlipData(name);
            CreateNotify("~b~Marker gelöscht!");
            break;
    }

    if (Webwindow["PositionWindow"] !== null) {
        tempPositionsList = {...PositionList, ...getPositionGroupData()};
        Webwindow["PositionWindow"].call("position:init", tempPositionsList, {
            markers: PositionManager.getAllMarkerNames(),
            active: PositionManager.activePositionName,
        });
    }
});

mp.events.add("createProgressbar", (time) => {
    if (voiceChat) {
        voiceChat.call("createProgressbar", time, mp.storage.data.ShowHelpText)
    } else {
        tempVoiceCommands.push({
            "command": "createProgressbar",
            "arg": time
        })
    }
});
mp.events.add("destroyProgressbar", () => {
    if (voiceChat) {
        voiceChat.call("destroyProgressbar")
    }
});

Webwindow["BusTimeTable"] = null;
Webwindow["BusHudExtension"] = null;

let BusRoutes = {
    "X1": [
        1, 2, 3, 4, 5, 6, 7, 8, 9, 11
    ],
    "X2": [
        12, 13, 14, 15, 16, 17, 48, 19, 20, 21, 22, 23, 24, 25
    ],
    "1": [
        10, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 21, 54, 55, 56, 57, 58, 59, 60, 61, 62
    ],
    "2": [
        10, 65, 3, 67, 5, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85
    ],
    "3": [
        10, 87, 88, 89, 90, 91, 6, 93, 94, 95, 96, 97, 85
    ],
    "4": [
        10, 101, 61, 102, 103, 51, 105, 106, 107, 108, 157, 110, 111, 113, 114, 115, 21, 60, 11
    ],
    "850": [
        1, 121, 122, 123, 158, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 36, 155, 156, 11
    ]
};

let BusJobStations = JSON.parse('     {"1":{"Pos":{"x":-147.3548,"y":-2137.37622,"z":16.1928},"Rot":{"x":0.0,"y":0.0,"z":19.059},"Name":"ZOB","Routes":["X1","850"],"Hash":"prop_busstop_04"},"10":{"Pos":{"x":-118.678009,"y":-2128.04175,"z":16.2042313},"Rot":{"x":0.0,"y":0.0,"z":19.7788258},"Name":"ZOB","Routes":["1","2","3","4"],"Hash":"prop_busstop_02"},"2":{"Pos":{"x":-260.76,"y":-1475.407,"z":29.873},"Rot":{"x":0.0,"y":1.8,"z":-95.572},"Name":"Alta Street","Routes":["X1"],"Hash":"prop_busstop_04"},"3":{"Pos":{"x":-232.427,"y":-1059.108,"z":25.947},"Rot":{"x":0.0,"y":4.0,"z":-109.986},"Name":"Pillbox Hill Metro Station","Routes":["X1","2"],"Hash":"prop_busstop_04"},"4":{"Pos":{"x":-267.937,"y":-824.391,"z":30.837},"Rot":{"x":-1.0,"y":0.5,"z":-110.542},"Name":"Peaceful Street","Routes":["X1"],"Hash":"prop_busstop_04"},"5":{"Pos":{"x":-259.712,"y":-284.725,"z":29.861},"Rot":{"x":0.0,"y":2.3,"z":-83.504},"Name":"San Vitus Metro Station","Routes":["X1","2"],"Hash":"prop_busstop_04"},"6":{"Pos":{"x":236.255,"y":-373.668,"z":43.375},"Rot":{"x":0.0,"y":0.8,"z":160.769},"Name":"Town Hall","Routes":["X1","3"],"Hash":"prop_busstop_04"},"7":{"Pos":{"x":247.264,"y":-575.099,"z":42.304},"Rot":{"x":0.0,"y":0.0,"z":68.041},"Name":"Pillbox Hill Medical Center","Routes":["X1"],"Hash":"prop_busstop_04"},"8":{"Pos":{"x":-32.036,"y":-1351.606,"z":28.316},"Rot":{"x":0.0,"y":0.0,"z":1.002},"Name":"Innocence Boulevard","Routes":["X1"],"Hash":"prop_busstop_04"},"9":{"Pos":{"x":-294.107,"y":-1479.068,"z":29.823},"Rot":{"x":-0.5,"y":-2.3,"z":84.671},"Name":"Alta Street","Routes":["X1"],"Hash":"prop_busstop_04"},"11":{"Pos":{"x":-1008.272,"y":-2741.317,"z":12.757},"Rot":{"x":0.0,"y":0.0,"z":152.662},"Name":"Airport","Routes":["X1","4","850"],"Hash":"prop_busstop_04"},"12":{"Pos":{"x":231.977,"y":-341.538,"z":43.289},"Rot":{"x":0.0,"y":-0.63,"z":-17.286},"Name":"Town Hall","Routes":["X2"],"Hash":"prop_busstop_04"},"13":{"Pos":{"x":283.264,"y":181.793,"z":103.452},"Rot":{"x":0.0,"y":0.6,"z":17.446},"Name":"Power Street","Routes":["X2"],"Hash":"prop_busstop_04"},"14":{"Pos":{"x":27.651,"y":638.528,"z":206.39},"Rot":{"x":0.0,"y":0.0,"z":10.436},"Name":"Lake Vinewood Staudamm","Routes":["X2"],"Hash":"prop_busstop_04"},"15":{"Pos":{"x":-614.55,"y":691.8675,"z":148.6717},"Rot":{"x":2.2,"y":3.7,"z":-11.756},"Name":"Normandy Drive","Routes":["X2"],"Hash":"prop_busstop_04"},"16":{"Pos":{"x":-949.5928,"y":704.8868,"z":152.5018},"Rot":{"x":0.0,"y":0.0,"z":-2.1653},"Name":"North Sheldon Avenue","Routes":["X2"],"Hash":"prop_bus_stop_sign"},"17":{"Pos":{"x":-1365.538,"y":631.7448,"z":132.8486},"Rot":{"x":0.0,"y":0.0,"z":0.8141},"Name":"Hangman Avenue","Routes":["X2"],"Hash":"prop_bus_stop_sign"},"19":{"Pos":{"x":-1294.577,"y":301.936,"z":63.915},"Rot":{"x":-0.6,"y":0.0,"z":-6.72},"Name":"Richman Hotel","Routes":["X2"],"Hash":"prop_busstop_04"},"20":{"Pos":{"x":-1474.7,"y":-308.109,"z":45.365},"Rot":{"x":0.0,"y":-4.7,"z":130.886},"Name":"South Rockford Drive","Routes":["X2"],"Hash":"prop_busstop_04"},"21":{"Pos":{"x":-1164.718,"y":-689.17,"z":21.082},"Rot":{"x":0.0,"y":-1.9,"z":132.9},"Name":"Carflex West","Routes":["X2","1","4"],"Hash":"prop_busstop_04"},"22":{"Pos":{"x":-743.841,"y":-933.936,"z":17.61},"Rot":{"x":0.5,"y":3.2,"z":-108.231},"Name":"Ginger Street","Routes":["X2"],"Hash":"prop_busstop_04"},"23":{"Pos":{"x":-243.754,"y":-889.423,"z":29.39},"Rot":{"x":0.0,"y":-1.9,"z":161.194},"Name":"Pillbox Hill Parkplatz","Routes":["X2"],"Hash":"prop_busstop_04"},"24":{"Pos":{"x":65.201,"y":-1001.902,"z":28.357},"Rot":{"x":0.0,"y":0.0,"z":160.271},"Name":"Legion Square","Routes":["X2"],"Hash":"prop_busstop_04"},"25":{"Pos":{"x":279.678,"y":-585.341,"z":42.304},"Rot":{"x":0.0,"y":0.0,"z":-110.395},"Name":"Pillbox Hill Krankenhaus","Routes":["X2"],"Hash":"prop_busstop_04"},"27":{"Pos":{"x":-154.87,"y":-1579.102,"z":33.714},"Rot":{"x":-1.3,"y":0.0,"z":-128.486},"Name":"Carson Avenue","Routes":["1"],"Hash":"prop_busstop_02"},"28":{"Pos":{"x":-588.924,"y":-1222.595,"z":14.547},"Rot":{"x":0.0,"y":0.0,"z":49.778},"Name":"Calais Avenue","Routes":["1"],"Hash":"prop_busstop_02"},"29":{"Pos":{"x":-720.05,"y":-1164.722,"z":9.623},"Rot":{"x":0.0,"y":0.0,"z":-51.301},"Name":"La Puerta Anlegehafen","Routes":["1"],"Hash":"prop_busstop_02"},"30":{"Pos":{"x":-1098.992,"y":-1290.513,"z":4.467},"Rot":{"x":0.0,"y":-0.27,"z":30.463},"Name":"Prosperity Street","Routes":["1"],"Hash":"prop_busstop_02"},"31":{"Pos":{"x":-1125.743,"y":-1423.764,"z":4.14},"Rot":{"x":0.0,"y":-0.8,"z":117.487},"Name":"Bay City Avenue","Routes":["1"],"Hash":"prop_busstop_02"},"32":{"Pos":{"x":-1020.781,"y":-1626.624,"z":3.726},"Rot":{"x":0.0,"y":-0.8,"z":59.628},"Name":"Rub Street - Fahrrad-Shop","Routes":["1"],"Hash":"prop_busstop_02"},"33":{"Pos":{"x":-1172.913,"y":-1444.902,"z":3.386},"Rot":{"x":0.0,"y":0.0,"z":-56.174},"Name":"Agujia Street - Vespucci Beach","Routes":["1"],"Hash":"prop_busstop_02"},"34":{"Pos":{"x":-1370.913,"y":-963.267,"z":8.082},"Rot":{"x":0.0,"y":2.2,"z":-55.773},"Name":"Vespucci Boulevard","Routes":["1"],"Hash":"prop_busstop_02"},"35":{"Pos":{"x":-1138.636,"y":-826.904,"z":14.215},"Rot":{"x":0.0,"y":3.7,"z":-138.748},"Name":"Vespucci Kanäle - 24/7 Shop","Routes":["1"],"Hash":"prop_busstop_02"},"36":{"Pos":{"x":-1102.401,"y":-711.623,"z":19.407},"Rot":{"x":0.0,"y":1.6,"z":-48.465},"Name":"Carflex West","Routes":["1","850"],"Hash":"prop_busstop_02"},"37":{"Pos":{"x":-1139.237,"y":-424.259,"z":35.158},"Rot":{"x":0.0,"y":1.2,"z":-172.34},"Name":"South Rockford Drive - Marktplatz","Routes":["1"],"Hash":"prop_busstop_02"},"38":{"Pos":{"x":-680.807,"y":-379.701,"z":33.28},"Rot":{"x":0.0,"y":0.0,"z":156.477},"Name":"Rockford Hills","Routes":["1"],"Hash":"prop_busstop_02"},"39":{"Pos":{"x":-739.723,"y":-125.485,"z":36.709},"Rot":{"x":0.0,"y":2.2,"z":-31.747},"Name":"Eastburne Way - Kleidungs-Shop","Routes":["1"],"Hash":"prop_busstop_02"},"40":{"Pos":{"x":-958.134,"y":29.819,"z":48.38},"Rot":{"x":0.0,"y":0.0,"z":-58.702},"Name":"Rockford Hills - Golfplatz","Routes":["1"],"Hash":"prop_busstop_02"},"41":{"Pos":{"x":-1069.706,"y":370.781,"z":67.815},"Rot":{"x":0.0,"y":1.7,"z":-91.11},"Name":"Greenwich Way","Routes":["1"],"Hash":"prop_busstop_02"},"42":{"Pos":{"x":-674.4344,"y":486.2485,"z":109.1017},"Rot":{"x":-0.01,"y":0.5601,"z":-164.4601},"Name":"Hillchest Ridge Access Road","Routes":["1"],"Hash":"prop_busstop_02"},"43":{"Pos":{"x":-317.296,"y":450.364,"z":107.484},"Rot":{"x":0.0,"y":-0.8,"z":145.122},"Name":"Cox Way","Routes":["1"],"Hash":"prop_busstop_02"},"44":{"Pos":{"x":51.333,"y":339.98,"z":111.613},"Rot":{"x":0.0,"y":0.5,"z":157.105},"Name":"Las Lagunas Boulevard","Routes":["1"],"Hash":"prop_busstop_02"},"45":{"Pos":{"x":-111.801,"y":318.267,"z":108.082},"Rot":{"x":2.0,"y":2.9,"z":-32.646},"Name":"Eclipse Boulevard","Routes":["1"],"Hash":"prop_busstop_02"},"46":{"Pos":{"x":-271.958,"y":436.093,"z":107.19},"Rot":{"x":0.0,"y":-0.3,"z":-25.42},"Name":"Cox Way","Routes":["1"],"Hash":"prop_busstop_02"},"47":{"Pos":{"x":-591.603,"y":515.118,"z":105.5767},"Rot":{"x":0.0,"y":-0.1,"z":11.571},"Name":"Hillchest Ridge Access Road","Routes":["1"],"Hash":"prop_busstop_02"},"48":{"Pos":{"x":-1085.205,"y":356.162,"z":66.936},"Rot":{"x":0.0,"y":0.0,"z":91.154},"Name":"Greenwich Way","Routes":["X2","1"],"Hash":"prop_busstop_02"},"49":{"Pos":{"x":-955.849,"y":-23.624,"z":42.941},"Rot":{"x":0.0,"y":0.0,"z":126.132},"Name":"Rockford Hills - Golfplatz","Routes":["1"],"Hash":"prop_busstop_02"},"50":{"Pos":{"x":-727.974,"y":-214.623,"z":36.154},"Rot":{"x":0.0,"y":-0.8,"z":159.752},"Name":"Eastburne Way - Kleidungs-Shop","Routes":["1"],"Hash":"prop_busstop_02"},"51":{"Pos":{"x":-683.635,"y":-343.988,"z":33.769},"Rot":{"x":0.0,"y":0.0,"z":-20.662},"Name":"Rockford Hills","Routes":["1","4"],"Hash":"prop_busstop_02"},"52":{"Pos":{"x":-1168.895,"y":-398.059,"z":34.5408},"Rot":{"x":0.0,"y":-3.1,"z":8.8088},"Name":"South Rockford Drive - Marktplatz","Routes":["1"],"Hash":"prop_busstop_02"},"54":{"Pos":{"x":-1216.767,"y":-855.398,"z":12.516},"Rot":{"x":0.0,"y":-1.7,"z":33.21},"Name":"Vespucci Kanäle - 24/7 Shop","Routes":["1"],"Hash":"prop_busstop_02"},"55":{"Pos":{"x":-1379.202,"y":-978.643,"z":7.739},"Rot":{"x":0.0,"y":-2.3,"z":124.635},"Name":"Vespucci Boulevard","Routes":["1"],"Hash":"prop_busstop_02"},"56":{"Pos":{"x":-1170.854,"y":-1474.205,"z":3.37},"Rot":{"x":-1.3,"y":0.0,"z":124.199},"Name":"Agujia Street - Vespucci Beach","Routes":["1"],"Hash":"prop_busstop_02"},"57":{"Pos":{"x":-1002.941,"y":-1627.447,"z":3.92},"Rot":{"x":0.0,"y":0.0,"z":-114.384},"Name":"Rub Street - Fahrrad-Shop","Routes":["1"],"Hash":"prop_busstop_02"},"58":{"Pos":{"x":-1140.99,"y":-1362.488,"z":4.073},"Rot":{"x":0.0,"y":-0.2,"z":-64.37},"Name":"Bay City Avenue","Routes":["1"],"Hash":"prop_busstop_02"},"59":{"Pos":{"x":-958.946,"y":-1246.691,"z":4.505},"Rot":{"x":0.0,"y":0.0,"z":-151.129},"Name":"Prosperity Street","Routes":["1"],"Hash":"prop_busstop_02"},"60":{"Pos":{"x":-741.138,"y":-1189.371,"z":9.643},"Rot":{"x":0.0,"y":0.0,"z":130.131},"Name":"La Puerta Anlegehafen","Routes":["1","4"],"Hash":"prop_busstop_02"},"61":{"Pos":{"x":-556.49,"y":-1223.531,"z":15.661},"Rot":{"x":3.6,"y":4.1,"z":-124.107},"Name":"Calais Avenue","Routes":["1","4"],"Hash":"prop_busstop_02"},"62":{"Pos":{"x":-160.265,"y":-1559.721,"z":34.118},"Rot":{"x":-3.8,"y":1.3,"z":48.781},"Name":"Carson Avenue","Routes":["1"],"Hash":"prop_busstop_02"},"65":{"Pos":{"x":-82.873,"y":-1536.772,"z":32.145},"Rot":{"x":0.0,"y":4.0,"z":-39.541},"Name":"Forum Drive","Routes":["2"],"Hash":"prop_busstop_02"},"67":{"Pos":{"x":-140.189,"y":-797.906,"z":31.146},"Rot":{"x":0.0,"y":2.1,"z":-86.305},"Name":"Vespucci Boulevard - FIB-Gebäude","Routes":["2"],"Hash":"prop_busstop_02"},"69":{"Pos":{"x":-213.129,"y":98.024,"z":68.331},"Rot":{"x":0.0,"y":3.0,"z":-96.018},"Name":"Hawick Avenue","Routes":["2"],"Hash":"prop_busstop_02"},"70":{"Pos":{"x":-141.97,"y":240.004,"z":94.1219},"Rot":{"x":0.0,"y":4.5,"z":178.431},"Name":"North Archer Avenue","Routes":["2"],"Hash":"prop_busstop_02"},"71":{"Pos":{"x":262.141,"y":155.95,"z":103.661},"Rot":{"x":0.0,"y":-0.8,"z":160.281},"Name":"Power Street","Routes":["2"],"Hash":"prop_busstop_02"},"72":{"Pos":{"x":477.806,"y":77.418,"z":96.219},"Rot":{"x":0.0,"y":-2.9,"z":160.168},"Name":"Meteor Street","Routes":["2"],"Hash":"prop_busstop_02"},"73":{"Pos":{"x":778.799,"y":112.591,"z":77.696},"Rot":{"x":0.0,"y":0.0,"z":-123.635},"Name":"Vinewood Hills Autobahn","Routes":["2"],"Hash":"prop_busstop_02"},"74":{"Pos":{"x":715.402,"y":666.968,"z":128.058},"Rot":{"x":0.0,"y":0.0,"z":-20.306},"Name":"Vinewood Bowl","Routes":["2"],"Hash":"prop_busstop_02"},"75":{"Pos":{"x":909.3216,"y":92.7327,"z":77.9341},"Rot":{"x":-3.8,"y":-0.8,"z":49.2264},"Name":"Diamond Casino","Routes":["2"],"Hash":"prop_busstop_02"},"76":{"Pos":{"x":817.494,"y":-173.956,"z":71.81},"Rot":{"x":0.0,"y":-2.5,"z":58.252},"Name":"York Street","Routes":["2"],"Hash":"prop_busstop_02"},"77":{"Pos":{"x":861.637,"y":-556.453,"z":56.387},"Rot":{"x":0.0,"y":-0.4,"z":103.811},"Name":"West Mirror Drive","Routes":["2"],"Hash":"prop_busstop_02"},"78":{"Pos":{"x":1281.998,"y":-644.451,"z":66.998},"Rot":{"x":0.0,"y":-3.0,"z":116.63},"Name":"Mirror Park Neubaugebiet","Routes":["2"],"Hash":"prop_busstop_02"},"79":{"Pos":{"x":833.396,"y":-996.649,"z":25.944},"Rot":{"x":0.0,"y":-4.93,"z":2.371},"Name":"La Mesa Tankstelle","Routes":["2"],"Hash":"prop_busstop_02"},"80":{"Pos":{"x":412.373,"y":-900.796,"z":28.43},"Rot":{"x":0.0,"y":0.0,"z":-92.342},"Name":"Atlee Street - L.S.P.D","Routes":["2"],"Hash":"prop_busstop_02"},"81":{"Pos":{"x":513.905,"y":-719.38,"z":23.891},"Rot":{"x":0.0,"y":0.0,"z":-94.799},"Name":"La Mesa Güterbahnhof","Routes":["2"],"Hash":"prop_busstop_02"},"82":{"Pos":{"x":303.922,"y":-765.249,"z":28.305},"Rot":{"x":0.0,"y":0.0,"z":71.7},"Name":"Strawberry Avenue","Routes":["2"],"Hash":"prop_busstop_02"},"83":{"Pos":{"x":256.915,"y":-1534.655,"z":28.303},"Rot":{"x":0.0,"y":0.0,"z":30.276},"Name":"Central Medical Center","Routes":["2"],"Hash":"prop_busstop_02"},"85":{"Pos":{"x":177.166,"y":-1945.905,"z":19.19},"Rot":{"x":0.0,"y":-4.1,"z":50.89},"Name":"Covenant Avenue","Routes":["2","3"],"Hash":"prop_busstop_02"},"87":{"Pos":{"x":121.379,"y":-1457.738,"z":28.306},"Rot":{"x":0.0,"y":0.0,"z":-130.338},"Name":"Innocence Boulevard","Routes":["3"],"Hash":"prop_busstop_02"},"88":{"Pos":{"x":42.105,"y":-958.123,"z":28.362},"Rot":{"x":0.0,"y":0.0,"z":-20.134},"Name":"Legion Square","Routes":["3"],"Hash":"prop_busstop_02"},"89":{"Pos":{"x":150.996,"y":-597.521,"z":42.911},"Rot":{"x":0.0,"y":-0.6,"z":160.369},"Name":"Integrity Way Tunnel","Routes":["3"],"Hash":"prop_busstop_02"},"90":{"Pos":{"x":174.789,"y":-763.72,"z":31.439},"Rot":{"x":0.0,"y":-2.3,"z":71.102},"Name":"Strawberry Avenue","Routes":["3"],"Hash":"prop_busstop_02"},"91":{"Pos":{"x":-49.668,"y":-1125.666,"z":25.016},"Rot":{"x":0.0,"y":-1.3,"z":3.945},"Name":"Premium Deluxe Motorsport","Routes":["3"],"Hash":"prop_busstop_02"},"93":{"Pos":{"x":767.181,"y":-937.528,"z":24.667},"Rot":{"x":0.0,"y":0.5,"z":95.586},"Name":"La Mesa Tankstelle","Routes":["3"],"Hash":"prop_busstop_02"},"94":{"Pos":{"x":785.166,"y":-1364.903,"z":25.536},"Rot":{"x":0.0,"y":1.1,"z":89.603},"Name":"Supply Street","Routes":["3"],"Hash":"prop_busstop_02"},"95":{"Pos":{"x":821.442,"y":-1645.351,"z":29.028},"Rot":{"x":0.0,"y":-2.9,"z":86.054},"Name":"Logistik","Routes":["3"],"Hash":"prop_busstop_02"},"96":{"Pos":{"x":431.971,"y":-1980.942,"z":22.144},"Rot":{"x":0.0,"y":0.2,"z":-47.07},"Name":"Little Bighorn Avenue","Routes":["3"],"Hash":"prop_busstop_02"},"97":{"Pos":{"x":500.005,"y":-1643.393,"z":28.282},"Rot":{"x":0.0,"y":0.0,"z":-39.415},"Name":"Rancho Railroad Crossing","Routes":["3"],"Hash":"prop_busstop_02"},"101":{"Pos":{"x":-389.306,"y":-1785.869,"z":20.524},"Rot":{"x":0.0,"y":-2.2,"z":-78.976},"Name":"Mülldeponie","Routes":["4"],"Hash":"prop_busstop_02"},"102":{"Pos":{"x":-625.65,"y":-913.835,"z":23.1},"Rot":{"x":0.0,"y":-3.1,"z":88.995},"Name":"Palomino Avenue","Routes":["4"],"Hash":"prop_busstop_02"},"103":{"Pos":{"x":-619.134,"y":-605.537,"z":32.45},"Rot":{"x":0.0,"y":3.3,"z":-91.361},"Name":"San Andreas Avenue","Routes":["4"],"Hash":"prop_busstop_02"},"105":{"Pos":{"x":-1290.801,"y":-47.47,"z":46.056},"Rot":{"x":0.0,"y":3.7,"z":-15.336},"Name":"Rockford Hills - Golfplatz","Routes":["4"],"Hash":"prop_busstop_02"},"106":{"Pos":{"x":-1555.001,"y":187.314,"z":56.643},"Rot":{"x":0.0,"y":0.8,"z":25.937},"Name":"Universität","Routes":["4"],"Hash":"prop_busstop_02"},"107":{"Pos":{"x":-1950.494,"y":317.406,"z":88.428},"Rot":{"x":0.0,"y":3.3,"z":-82.349},"Name":"Richman - Ace Jones Drive","Routes":["4"],"Hash":"prop_busstop_02"},"108":{"Pos":{"x":-1953.694,"y":575.176,"z":115.838},"Rot":{"x":0.0,"y":7.5,"z":-99.688},"Name":"Vinewood Hills - Ace Jones Drive","Routes":["4"],"Hash":"prop_busstop_02"},"110":{"Pos":{"x":-1979.543,"y":558.055,"z":112.535},"Rot":{"x":0.0,"y":-11.2,"z":74.904},"Name":"Vinewood Hills - Ace Jones Drive","Routes":["4"],"Hash":"prop_busstop_02"},"111":{"Pos":{"x":-1939.896,"y":216.965,"z":83.619},"Rot":{"x":0.0,"y":0.0,"z":120.007},"Name":"Richman - Ace Jones Drive","Routes":["4"],"Hash":"prop_busstop_02"},"113":{"Pos":{"x":-1631.694,"y":-271.614,"z":51.735},"Rot":{"x":0.0,"y":-2.9,"z":82.415},"Name":"Morningwood Friedhof","Routes":["4"],"Hash":"prop_busstop_02"},"114":{"Pos":{"x":-1621.939,"y":-529.054,"z":33.54},"Rot":{"x":0.0,"y":-1.7,"z":40.148},"Name":"Bay City Incline","Routes":["4"],"Hash":"prop_busstop_02"},"115":{"Pos":{"x":-1468.271,"y":-630.115,"z":29.828},"Rot":{"x":0.0,"y":0.8,"z":-144.887},"Name":"Marathon Street","Routes":["4"],"Hash":"prop_busstop_02"},"121":{"Pos":{"x":464.197,"y":-1665.509,"z":28.327},"Rot":{"x":0.0,"y":0.0,"z":-130.251},"Name":"Logistik","Routes":["850"],"Hash":"prop_busstop_04"},"122":{"Pos":{"x":1113.174,"y":-1749.087,"z":34.665},"Rot":{"x":0.0,"y":0.0,"z":-159.181},"Name":"Elysian Fields Freeway Brücke","Routes":["850"],"Hash":"prop_busstop_04"},"123":{"Pos":{"x":746.11,"y":-365.259,"z":43.805},"Rot":{"x":0.9,"y":6.0,"z":-157.709},"Name":"An der Steigung","Routes":["850"],"Hash":"prop_busstop_04"},"125":{"Pos":{"x":2549.863,"y":1539.186,"z":29.5636},"Rot":{"x":1.64,"y":-0.21,"z":-92.1081},"Name":"Windpark","Routes":["850"],"Hash":"prop_busstop_04"},"126":{"Pos":{"x":2580.446,"y":2636.06,"z":36.684},"Rot":{"x":0.0,"y":3.3,"z":-72.74},"Name":"Davis Quartz","Routes":["850"],"Hash":"prop_busstop_04"},"127":{"Pos":{"x":1850.151,"y":2552.3,"z":44.668},"Rot":{"x":0.0,"y":0.0,"z":90.644},"Name":"Staatsgefängnis","Routes":["850"],"Hash":"prop_busstop_04"},"128":{"Pos":{"x":1948.751,"y":3319.189,"z":44.22},"Rot":{"x":0.0,"y":0.0,"z":-20.437},"Name":"Sandy Shores Airfield","Routes":["850"],"Hash":"prop_busstop_04"},"129":{"Pos":{"x":1634.193,"y":3637.725,"z":34.211},"Rot":{"x":0.0,"y":-1.2,"z":-60.181},"Name":"Sandy Shores","Routes":["850"],"Hash":"prop_busstop_04"},"130":{"Pos":{"x":1787.626,"y":3766.128,"z":32.718},"Rot":{"x":0.0,"y":0.0,"z":-149.047},"Name":"Sandy Shores Ammunation","Routes":["850"],"Hash":"prop_busstop_04"},"131":{"Pos":{"x":1936.221,"y":3738.571,"z":31.312},"Rot":{"x":0.0,"y":-0.2,"z":120.786},"Name":"Zancudo Avenue","Routes":["850"],"Hash":"prop_busstop_04"},"132":{"Pos":{"x":2487.81348,"y":4376.494,"z":35.2965},"Rot":{"x":2.15,"y":0.68,"z":-108.598},"Name":"Grapeseed","Routes":["850"],"Hash":"prop_busstop_04"},"133":{"Pos":{"x":2078.71,"y":4709.72656,"z":40.0386},"Rot":{"x":-6.3,"y":0.0,"z":44.392},"Name":"Mc Kenzie Airfield","Routes":["850"],"Hash":"prop_busstop_04"},"134":{"Pos":{"x":1400.913,"y":4392.737,"z":42.174},"Rot":{"x":2.8,"y":-1.9,"z":41.621},"Name":"Millars Fishery Angelsteg","Routes":["850"],"Hash":"prop_busstop_04"},"135":{"Pos":{"x":1699.041,"y":4731.471,"z":41.118},"Rot":{"x":1.5,"y":-0.7,"z":-70.488},"Name":"Grapeseed Ave","Routes":["850"],"Hash":"prop_busstop_04"},"136":{"Pos":{"x":1713.726,"y":4959.51,"z":43.386},"Rot":{"x":0.0,"y":4.7,"z":-151.559},"Name":"Ltd. Tankstelle","Routes":["850"],"Hash":"prop_busstop_04"},"137":{"Pos":{"x":2431.714,"y":5124.247,"z":45.819},"Rot":{"x":0.0,"y":0.0,"z":149.888},"Name":"O#!Neil Way","Routes":["850"],"Hash":"prop_busstop_04"},"138":{"Pos":{"x":3786.989,"y":4453.062,"z":4.343},"Rot":{"x":-3.7,"y":-4.7,"z":151.705},"Name":"San-Chianski Bergkette","Routes":["850"],"Hash":"prop_busstop_04"},"139":{"Pos":{"x":1598.057,"y":6442.027,"z":24.329},"Rot":{"x":-1.9,"y":-2.6,"z":-23.773},"Name":"Up-n-Atom Diner","Routes":["850"],"Hash":"prop_busstop_04"},"140":{"Pos":{"x":441.915,"y":6583.463,"z":26.087},"Rot":{"x":1.8,"y":0.0,"z":-5.151},"Name":"Farm","Routes":["850"],"Hash":"prop_busstop_04"},"141":{"Pos":{"x":-92.279,"y":6584.891,"z":28.38},"Rot":{"x":-0.4,"y":0.95,"z":40.55},"Name":"Procopio Drive","Routes":["850"],"Hash":"prop_busstop_04"},"142":{"Pos":{"x":-169.649,"y":6380.499,"z":30.473},"Rot":{"x":0.0,"y":0.0,"z":44.046},"Name":"J#!s Bonds","Routes":["850"],"Hash":"prop_busstop_04"},"143":{"Pos":{"x":-445.065,"y":6087.075,"z":30.546},"Rot":{"x":1.0,"y":0.8,"z":69.456},"Name":"L.S.S.D","Routes":["850"],"Hash":"prop_busstop_04"},"144":{"Pos":{"x":-731.695,"y":5788.055,"z":16.817},"Rot":{"x":2.3,"y":0.3,"z":102.856},"Name":"Paleto Forest","Routes":["850"],"Hash":"prop_busstop_04"},"145":{"Pos":{"x":-1533.121,"y":4994.542,"z":61.224},"Rot":{"x":-2.3,"y":0.94,"z":50.245},"Name":"Paleto Cove","Routes":["850"],"Hash":"prop_busstop_04"},"146":{"Pos":{"x":-1720.44,"y":2245.47,"z":80.4057},"Rot":{"x":-2.1,"y":5.15,"z":113.719},"Name":"Tongva Hills Weinfelder","Routes":["850"],"Hash":"prop_busstop_04"},"147":{"Pos":{"x":-2548.318,"y":1876.241,"z":165.849},"Rot":{"x":-5.07,"y":-1.61,"z":116.975},"Name":"Tongva Hills Anwesen","Routes":["850"],"Hash":"prop_busstop_04"},"148":{"Pos":{"x":-2731.126,"y":1464.962,"z":97.475},"Rot":{"x":0.0,"y":-9.9,"z":66.355},"Name":"Barham Canyon Anwesen","Routes":["850"],"Hash":"prop_busstop_04"},"149":{"Pos":{"x":-3183.451,"y":1242.885,"z":9.631},"Rot":{"x":-4.0,"y":-2.6,"z":81.762},"Name":"Chumash","Routes":["850"],"Hash":"prop_busstop_04"},"150":{"Pos":{"x":-3235.132,"y":958.452,"z":12.198},"Rot":{"x":0.0,"y":0.9,"z":100.312},"Name":"Chumash Pie","Routes":["850"],"Hash":"prop_busstop_04"},"151":{"Pos":{"x":-3073.958,"y":669.517,"z":11.604},"Rot":{"x":-2.9,"y":-9.4,"z":128.754},"Name":"Banham Canyon","Routes":["850"],"Hash":"prop_busstop_04"},"152":{"Pos":{"x":-3061.192,"y":220.65,"z":14.914},"Rot":{"x":-2.1,"y":2.8,"z":172.321},"Name":"Ineseno Road","Routes":["850"],"Hash":"prop_busstop_04"},"153":{"Pos":{"x":-1975.149,"y":-492.13,"z":10.798},"Rot":{"x":1.9,"y":0.0,"z":140.1},"Name":"Del Perro Freeway","Routes":["850"],"Hash":"prop_busstop_04"},"155":{"Pos":{"x":-937.321,"y":-579.379,"z":17.286},"Rot":{"x":0.0,"y":0.6,"z":-157.92},"Name":"Del Perro Freeway Auffahrt","Routes":["850"],"Hash":"prop_busstop_04"},"156":{"Pos":{"x":-429.532,"y":-1318.882,"z":21.112},"Rot":{"x":-1.8,"y":0.9,"z":88.944},"Name":"Innocence Boulevard Unterführung","Routes":["850"],"Hash":"prop_busstop_04"},"157":{"Pos":{"x":-1580.453,"y":1359.861,"z":128.913},"Rot":{"x":0.0,"y":-6.7,"z":-130.82},"Name":"Downstream","Routes":["4"],"Hash":"prop_busstop_02"},"158":{"Pos":{"x":996.2626,"y":172.0622,"z":79.9904},"Rot":{"x":0.0,"y":-0.0501,"z":-128.855},"Name":"Diamond Casino","Routes":["850"],"Hash":"prop_busstop_04"}}      ');

let TempStation;
for (TempStation in BusJobStations) {
    let TempStationObject = mp.objects.new(mp.game.joaat(BusJobStations[TempStation].Hash), new mp.Vector3(BusJobStations[TempStation].Pos.x, BusJobStations[TempStation].Pos.y, BusJobStations[TempStation].Pos.z), {
        dimension: 0,
        rotation: new mp.Vector3(BusJobStations[TempStation].Rot.x, BusJobStations[TempStation].Rot.y, BusJobStations[TempStation].Rot.z)
    })

    let TempStationColshape = mp.colshapes.newSphere(BusJobStations[TempStation].Pos.x, BusJobStations[TempStation].Pos.y, BusJobStations[TempStation].Pos.z, 10);
    TempStationColshape.BusStop = TempStation;

}

mp.events.add("playerEnterColshape", function (shape) {
    if (shape.BusStop != null) {
        let TempStationID = shape.BusStop;
        //VioRageManager.SendChatMessage("Bushaltestelle " + BusJobStations[TempStationID].Name + " betreten!");
        if (mp.players.local.isInAnyVehicle(true) == false) {
            CreateNotify("~b~Nutze die Taste E um den Fahrplan zu öffnen!");
        }

        RenderBusStop["X"] = BusJobStations[TempStationID].Pos.x;
        RenderBusStop["Y"] = BusJobStations[TempStationID].Pos.y;

        let ZMod = 4.75;
        if (BusJobStations[TempStationID].Hash == "prop_busstop_02") {
            ZMod = 3.50;
        }

        RenderBusStop["Z"] = BusJobStations[TempStationID].Pos.z + ZMod;

        let TempStopRoute = BusJobStations[TempStationID].Routes;
        var sroute = "";

        let TempI
        for (TempI = 0; TempI < TempStopRoute.length; TempI++) {
            if (sroute != "") {
                sroute = sroute + " | " + TempStopRoute[TempI];
            } else {
                sroute = TempStopRoute[TempI];
            }
        }

        RenderBusStop["Lines"] = "Linie: " + sroute;

        RenderBusStop["Name"] = BusJobStations[TempStationID].Name.replace("#!", "'");

        RenderBusStop["ID"] = TempStationID;
    }
});

mp.events.add("playerExitColshape", function (shape) {
    if (shape.BusStop != null) {
        let TempStationID = shape.BusStop;
        //VioRageManager.SendChatMessage("Bushaltestelle " + BusJobStations[TempStationID].Name + " verlassen!");
        if (RenderBusStop["ID"] != null) {
            if (RenderBusStop["ID"] == TempStationID) {
                RenderBusStop = {};
            }
        }
    }
});

mp.events.add('render', () => {

    if (Webwindow["BusHudExtension"] != null) {
        mp.game.graphics.drawMarker(22, -115.48528 ,-2018.29834, 19.43924, 0, 0, 0, 95, 90, 0, 1, 1, 1, 255, 0, 0, 80, false, false, 2, false, null, null, false);
        mp.game.graphics.drawMarker(22, -115.58528 ,-2019.19836, 19.43924, 0, 0, 0, 95, 90, 0, 1, 1, 1, 255, 0, 0, 80, false, false, 2, false, null, null, false);
        mp.game.graphics.drawMarker(22, -115.68528 ,-2020.09839, 19.43924, 0, 0, 0, 95, 90, 0, 1, 1, 1, 255, 0, 0, 80, false, false, 2, false, null, null, false);
        mp.game.graphics.drawMarker(22, -154.43822 ,-2011.755,   24.22632, 0, 0, 0, 0, 90, 0, 1, 1, 1, 255, 0, 0, 80, false, false, 2, false, null, null, false);
        mp.game.graphics.drawMarker(22, -153.43822 ,-2011.90503, 24.22632, 0, 0, 0, 0, 90, 0, 1, 1, 1, 255, 0, 0, 80, false, false, 2, false, null, null, false);
        mp.game.graphics.drawMarker(22, -155.43822 ,-2011.60498, 24.22632, 0, 0, 0, 0, 90, 0, 1, 1, 1, 255, 0, 0, 80, false, false, 2, false, null, null, false);
    }

    if (RenderBusStop["ID"] != null) {

        let max_size = 0.95;
        let veh = mp.players.local.vehicle;
        let lPos = mp.players.local.position;

        if (veh != null) {
            max_size = 0.80;
            lPos = mp.players.local.vehicle.position
        }

        let busstop = new mp.Vector3(RenderBusStop["X"], RenderBusStop["Y"], RenderBusStop["Z"]);

        let dist = mp.game.system.vdist2(lPos.x, lPos.y, lPos.z, busstop.x, busstop.y, busstop.z);

        let color = [255, 255, 255, 255]

        let c_dist = 1 / 250 * dist
        let size = lerp(max_size, 0.35, c_dist)
        if (size > max_size) {
            size = max_size;
        } else if (size < 0.35) {
            size = 0.35;
        }

        let alpha = lerp(255, 0, c_dist)
        if (alpha > 255) {
            alpha = 255;
        } else if (alpha < 0) {
            alpha = 0;
        }

        color[3] = alpha;

        mp.game.graphics.setDrawOrigin(busstop.x, busstop.y, busstop.z, 0);
        mp.game.graphics.drawText("~g~" + RenderBusStop["Name"] + "\n~w~" + RenderBusStop["Lines"], [0, 0], {
            font: 4,
            color: color,
            scale: [size, size],
            outline: true
        });
        mp.game.graphics.clearDrawOrigin()

    }

});

mp.events.add("BusTimeTableSetMarker", (id) => {
    // VioRageManager.setWayPoint(BusJobStations[id].Pos);
    PositionManager.setPositionData("BusTimetable", "SOS: " + SOSAutoFollowName, BusJobStations[id].Pos, 2, 8);
});

mp.events.add("BusTimeTableClose", () => {
    if (Webwindow["BusTimeTable"] !== null) {
        Webwindow["BusTimeTable"].destroy();
        Webwindow["BusTimeTable"] = null;
    }
});

/* HUD Extension */
mp.events.add("SendPlayerBusJobInformation", (pRoute, pStation) => {
    if (Webwindow["BusHudExtension"] == null) {
        // Erstellen
        Webwindow["BusHudExtension"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/bus/hud_extension/hud_extension.html", false, false);
        Webwindow["BusHudExtension"].start("OnCEFInitialize", pRoute, pStation, BusRoutes[pRoute], BusJobStations);
    } else {
        // Updaten
        Webwindow["BusHudExtension"].call("OnCEFUpdateStation", pRoute, pStation, BusRoutes[pRoute], BusJobStations);
    }
});

function DestroyHudWindow() {
    if (Webwindow["BusHudExtension"] != null) {
        Webwindow["BusHudExtension"].destroy();
        Webwindow["BusHudExtension"] = null;
    }
}

mp.events.add("StopPlayerBusJobInformation", () => {
    DestroyHudWindow();
});
mp.events.add("playerLeaveVehicle", (veh, seat) => {
    DestroyHudWindow();
});

var FarmObjects = [];

function destroyFarmSzenarios() {
    if (FarmObjects != null) {
        FarmObjects.forEach(function (obj, index) {
            if (obj) {
                obj.destroy();
                delete FarmObjects[index];
            }
        })
    }
}

function createFarmSzenario(stables, type, dim) {
    if (stables == "hen" && type == 1) {
        //HünerStall 1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_trough1"), new mp.Vector3(431.59, 6503.13, 27.55), {
            rotation: new mp.Vector3(-4.3, 0, 4.12),
            dimension: dim
        }) //HuhnStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fnclink_03c"), new mp.Vector3(436.64, 6506.61, 25.81), {
            rotation: new mp.Vector3(0, 0, -18.87),
            dimension: dim
        }) //HuhnStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fnclink_03c"), new mp.Vector3(431.31, 6500.57, 25.81), {
            rotation: new mp.Vector3(0, 0, 93.32),
            dimension: dim
        }) //HuhnStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fnclink_03c"), new mp.Vector3(430.95, 6506.27, 25.81), {
            rotation: new mp.Vector3(0, 0, 3.32),
            dimension: dim
        }) //HuhnStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fnclink_03c"), new mp.Vector3(436.65, 6500.17, 27.71), {
            rotation: new mp.Vector3(0, 0, 3.02),
            dimension: dim
        }) //HuhnStufe1
    }
    if (stables == "hen" && type == 2) {
        //HünerStall 2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_trough1"), new mp.Vector3(431.59, 6503.13, 27.55), {
            rotation: new mp.Vector3(-4.3, 0, 4.12),
            dimension: dim
        }) //HuhnStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fnclink_03c"), new mp.Vector3(431.19, 6502.56, 25.81), {
            rotation: new mp.Vector3(0, 0, 93.32),
            dimension: dim
        }) //HuhnStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fnclink_03c"), new mp.Vector3(436.65, 6500.17, 27.71), {
            rotation: new mp.Vector3(0, 0, 3.02),
            dimension: dim
        }) //HuhnStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fnclink_03c"), new mp.Vector3(436.54, 6508.56, 25.81), {
            rotation: new mp.Vector3(0, 0, 4.22),
            dimension: dim
        }) //HuhnStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fnclink_03c"), new mp.Vector3(430.84, 6508.25, 25.81), {
            rotation: new mp.Vector3(0, 0, 3.02),
            dimension: dim
        }) //HuhnStufe2
    }
    if (stables == "hen" && type == 3) {
        //HünerStall 3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_trough1"), new mp.Vector3(431.59, 6503.13, 27.55), {
            rotation: new mp.Vector3(-4.3, 0, 4.12),
            dimension: dim
        }) //HuhnStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fnclink_03c"), new mp.Vector3(431.32, 6500.96, 25.81), {
            rotation: new mp.Vector3(0, 0, 93.32),
            dimension: dim
        }) //HuhnStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fnclink_03c"), new mp.Vector3(436.65, 6500.17, 27.71), {
            rotation: new mp.Vector3(0, 0, 3.02),
            dimension: dim
        }) //HuhnStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fnclink_03c"), new mp.Vector3(436.34, 6512.79, 25.81), {
            rotation: new mp.Vector3(0, 0, 4.22),
            dimension: dim
        }) //HuhnStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fnclink_03c"), new mp.Vector3(430.99, 6506.66, 25.81), {
            rotation: new mp.Vector3(0, 0, 93.32),
            dimension: dim
        }) //HuhnStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fnclink_03c"), new mp.Vector3(430.65, 6512.37, 25.81), {
            rotation: new mp.Vector3(0, 0, 4.22),
            dimension: dim
        }) //HuhnStufe3
    }


    if (stables == "pig" && type == 1) {
        //SchweinStallStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(375.46, 6497.35, 27.4), {
            rotation: new mp.Vector3(0, 0.42, -1.03),
            dimension: dim
        }) //SchweinStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(381.62, 6497.27, 27.37), {
            rotation: new mp.Vector3(0, 1, 0.67),
            dimension: dim
        }) //SchweinStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(387.78, 6497.33, 27.28), {
            rotation: new mp.Vector3(0, 0, 90.96),
            dimension: dim
        }) //SchweinStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(387.73, 6503.51, 27.17), {
            rotation: new mp.Vector3(0, 0.9, 90.96),
            dimension: dim
        }) //SchweinStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(387.54, 6509.7, 26.97), {
            rotation: new mp.Vector3(0, 0, -178.35),
            dimension: dim
        }) //SchweinStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(381.35, 6509.53, 26.98), {
            rotation: new mp.Vector3(0, -0.77, -178.35),
            dimension: dim
        }) //SchweinStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(375.17, 6509.35, 27.09), {
            rotation: new mp.Vector3(0, -2.07, -178.35),
            dimension: dim
        }) //SchweinStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(369.01, 6509.16, 27.35), {
            rotation: new mp.Vector3(0, 0.13, -178.35),
            dimension: dim
        }) //SchweinStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(362.83, 6508.98, 27.35), {
            rotation: new mp.Vector3(0, 0.13, -88.34),
            dimension: dim
        }) //SchweinStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(363.03, 6502.83, 27.35), {
            rotation: new mp.Vector3(0, 0.13, -88.34),
            dimension: dim
        }) //SchweinStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(363.33, 6496.79, 27.4), {
            rotation: new mp.Vector3(0, -0.5, 4.86),
            dimension: dim
        }) //SchweinStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(369.35, 6497.25, 27.5), {
            rotation: new mp.Vector3(0, 0.73, 0.96),
            dimension: dim
        }) //SchweinStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_pighouse1"), new mp.Vector3(371.77, 6498.14, 27.5), {
            rotation: new mp.Vector3(13.85, -0.1, 179.74),
            dimension: dim
        }) //SchweinStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_pighouse2"), new mp.Vector3(369.58, 6498.29, 27.34), {
            rotation: new mp.Vector3(0, 0, -178.53),
            dimension: dim
        }) //SchweinStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_trough1"), new mp.Vector3(363.63, 6500.7, 27.46), {
            rotation: new mp.Vector3(0, 0, 1.14),
            dimension: dim
        }) //SchweinStufe1
    }
    if (stables == "pig" && type == 2) {
        //SchweinStallStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(375.46, 6497.35, 27.4), {
            rotation: new mp.Vector3(0, 0.42, -1.03),
            dimension: dim
        }) //SchweinStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(381.62, 6497.27, 27.37), {
            rotation: new mp.Vector3(0, 1, 0.67),
            dimension: dim
        }) //SchweinStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(387.78, 6497.33, 27.28), {
            rotation: new mp.Vector3(0, 0, 90.96),
            dimension: dim
        }) //SchweinStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(387.73, 6503.51, 27.17), {
            rotation: new mp.Vector3(0, 0.9, 90.96),
            dimension: dim
        }) //SchweinStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(362.83, 6508.98, 27.35), {
            rotation: new mp.Vector3(0, 0.13, -88.34),
            dimension: dim
        }) //SchweinStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(363.03, 6502.83, 27.35), {
            rotation: new mp.Vector3(0, 0.13, -88.34),
            dimension: dim
        }) //SchweinStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(363.33, 6496.79, 27.4), {
            rotation: new mp.Vector3(0, -0.5, 4.86),
            dimension: dim
        }) //SchweinStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(369.35, 6497.25, 27.5), {
            rotation: new mp.Vector3(0, 0.73, 0.96),
            dimension: dim
        }) //SchweinStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_pighouse1"), new mp.Vector3(371.77, 6498.14, 27.5), {
            rotation: new mp.Vector3(13.85, -0.1, 179.74),
            dimension: dim
        }) //SchweinStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_pighouse2"), new mp.Vector3(369.58, 6498.29, 27.34), {
            rotation: new mp.Vector3(0, 0, -178.53),
            dimension: dim
        }) //SchweinStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_trough1"), new mp.Vector3(363.63, 6500.7, 27.46), {
            rotation: new mp.Vector3(0, 0, 1.14),
            dimension: dim
        }) //SchweinStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(387.58, 6509.72, 27.06), {
            rotation: new mp.Vector3(0, 0.9, 90.96),
            dimension: dim
        }) //SchweinStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(387.43, 6515.92, 27.02), {
            rotation: new mp.Vector3(0, 0.9, 90.96),
            dimension: dim
        }) //SchweinStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(387.18, 6522.12, 26.92), {
            rotation: new mp.Vector3(0, -1.7, 178.95),
            dimension: dim
        }) //SchweinStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(380.94, 6522.24, 27.12), {
            rotation: new mp.Vector3(0, -1.59, 179.42),
            dimension: dim
        }) //SchweinStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(374.74, 6522.28, 27.3), {
            rotation: new mp.Vector3(0, 0.03, 179.42),
            dimension: dim
        }) //SchweinStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(368.52, 6522.32, 27.3), {
            rotation: new mp.Vector3(0, 0.03, 179.42),
            dimension: dim
        }) //SchweinStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(362.29, 6522.4, 27.3), {
            rotation: new mp.Vector3(0, 0.03, -87.98),
            dimension: dim
        }) //SchweinStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(362.5, 6516.21, 27.3), {
            rotation: new mp.Vector3(0, 0.03, -87.55),
            dimension: dim
        }) //SchweinStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(362.73, 6512.5, 27.3), {
            rotation: new mp.Vector3(0, 0.03, -87.55),
            dimension: dim
        }) //SchweinStufe2
    }
    if (stables == "pig" && type == 3) {
        //SchweinStallStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(375.46, 6497.35, 27.4), {
            rotation: new mp.Vector3(0, 0.42, -1.03),
            dimension: dim
        }) //SchweinStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(381.62, 6497.27, 27.37), {
            rotation: new mp.Vector3(0, 1, 0.67),
            dimension: dim
        }) //SchweinStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(387.78, 6497.33, 27.28), {
            rotation: new mp.Vector3(0, 0, 90.96),
            dimension: dim
        }) //SchweinStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(387.73, 6503.51, 27.17), {
            rotation: new mp.Vector3(0, 0.9, 90.96),
            dimension: dim
        }) //SchweinStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(362.83, 6508.98, 27.35), {
            rotation: new mp.Vector3(0, 0.13, -88.34),
            dimension: dim
        }) //SchweinStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(363.03, 6502.83, 27.35), {
            rotation: new mp.Vector3(0, 0.13, -88.34),
            dimension: dim
        }) //SchweinStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(363.33, 6496.79, 27.4), {
            rotation: new mp.Vector3(0, -0.5, 4.86),
            dimension: dim
        }) //SchweinStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(369.35, 6497.25, 27.5), {
            rotation: new mp.Vector3(0, 0.73, 0.96),
            dimension: dim
        }) //SchweinStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_pighouse1"), new mp.Vector3(371.77, 6498.14, 27.5), {
            rotation: new mp.Vector3(13.85, -0.1, 179.74),
            dimension: dim
        }) //SchweinStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_pighouse2"), new mp.Vector3(369.58, 6498.29, 27.34), {
            rotation: new mp.Vector3(0, 0, -178.53),
            dimension: dim
        }) //SchweinStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_trough1"), new mp.Vector3(363.63, 6500.7, 27.46), {
            rotation: new mp.Vector3(0, 0, 1.14),
            dimension: dim
        }) //SchweinStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(387.58, 6509.72, 27.06), {
            rotation: new mp.Vector3(0, 0.9, 90.96),
            dimension: dim
        }) //SchweinStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(387.43, 6515.92, 27.02), {
            rotation: new mp.Vector3(0, 0.9, 90.96),
            dimension: dim
        }) //SchweinStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(362.29, 6522.4, 27.3), {
            rotation: new mp.Vector3(0, 0.03, -87.98),
            dimension: dim
        }) //SchweinStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(362.5, 6516.21, 27.3), {
            rotation: new mp.Vector3(0, 0.03, -87.55),
            dimension: dim
        }) //SchweinStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(362.73, 6512.5, 27.3), {
            rotation: new mp.Vector3(0, 0.03, -87.55),
            dimension: dim
        }) //SchweinStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(387.33, 6522.1, 26.94), {
            rotation: new mp.Vector3(0, 0.9, 89.56),
            dimension: dim
        }) //SchweinStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(387.34, 6528.27, 26.95), {
            rotation: new mp.Vector3(0, 0.9, 89.56),
            dimension: dim
        }) //SchweinStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(387.34, 6534.47, 26.85), {
            rotation: new mp.Vector3(0, 0.9, 92.36),
            dimension: dim
        }) //SchweinStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(386.91, 6540.56, 26.78), {
            rotation: new mp.Vector3(0, 0.9, -178.65),
            dimension: dim
        }) //SchweinStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(380.67, 6540.4, 26.75), {
            rotation: new mp.Vector3(0, 0.05, -178.65),
            dimension: dim
        }) //SchweinStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(374.45, 6540.25, 26.77), {
            rotation: new mp.Vector3(0, -0.32, -178.65),
            dimension: dim
        }) //SchweinStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(368.23, 6540.12, 26.87), {
            rotation: new mp.Vector3(0, 0.98, -178.65),
            dimension: dim
        }) //SchweinStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(362.05, 6539.97, 26.77), {
            rotation: new mp.Vector3(0, -2.62, -89.64),
            dimension: dim
        }) //SchweinStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(362.09, 6533.79, 27.08), {
            rotation: new mp.Vector3(0, -2.62, -89.64),
            dimension: dim
        }) //SchweinStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(362.24, 6528.16, 27.38), {
            rotation: new mp.Vector3(0, 1.48, -88.73),
            dimension: dim
        }) //SchweinStufe3
    }


    if (stables == "cow" && type == 1) {
        //KuhStallStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(355.66, 6497.29, 27.45), {
            rotation: new mp.Vector3(0, 1.61, 88.37),
            dimension: dim
        }) //KuhStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(355.83, 6503.47, 27.34), {
            rotation: new mp.Vector3(0, 0.49, 88.37),
            dimension: dim
        }) //KuhStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(355.9, 6509.62, 27.31), {
            rotation: new mp.Vector3(0, -1.94, 179.37),
            dimension: dim
        }) //KuhStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(349.7, 6509.72, 27.52), {
            rotation: new mp.Vector3(0, -1.94, 179.37),
            dimension: dim
        }) //KuhStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(343.56, 6509.83, 27.72), {
            rotation: new mp.Vector3(0, 1.46, 179.37),
            dimension: dim
        }) //KuhStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(337.39, 6509.9, 27.57), {
            rotation: new mp.Vector3(0, 0.7, 179.37),
            dimension: dim
        }) //KuhStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(331.19, 6509.96, 27.57), {
            rotation: new mp.Vector3(0, -2.73, 179.37),
            dimension: dim
        }) //KuhStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(325.03, 6510.04, 27.89), {
            rotation: new mp.Vector3(0, -2.05, 179.37),
            dimension: dim
        }) //KuhStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(318.88, 6510.12, 28.11), {
            rotation: new mp.Vector3(0, -0.12, 179.37),
            dimension: dim
        }) //KuhStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(312.78, 6510.02, 28.01), {
            rotation: new mp.Vector3(0, -1.22, -92.62),
            dimension: dim
        }) //KuhStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(312.52, 6503.81, 28.11), {
            rotation: new mp.Vector3(0, -1.22, -91.22),
            dimension: dim
        }) //KuhStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(312.52, 6497.71, 28.31), {
            rotation: new mp.Vector3(0, 0.68, -2.32),
            dimension: dim
        }) //KuhStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(318.72, 6497.44, 28.26), {
            rotation: new mp.Vector3(0, 0.68, -1.52),
            dimension: dim
        }) //KuhStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(324.88, 6497.3, 28.2), {
            rotation: new mp.Vector3(0, 1.46, -1.52),
            dimension: dim
        }) //KuhStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(331.04, 6497.14, 28.05), {
            rotation: new mp.Vector3(0, 0.96, 0.08),
            dimension: dim
        }) //KuhStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(337.21, 6497.15, 27.96), {
            rotation: new mp.Vector3(0, 0.96, 0.28),
            dimension: dim
        }) //KuhStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(343.38, 6497.15, 27.84), {
            rotation: new mp.Vector3(0, 0.96, 0.28),
            dimension: dim
        }) //KuhStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(349.55, 6497.17, 27.71), {
            rotation: new mp.Vector3(0, 1.92, 0.28),
            dimension: dim
        }) //KuhStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_ch2_wdfence_01"), new mp.Vector3(313.16, 6506.46, 28.04), {
            rotation: new mp.Vector3(0, 0, 87.43),
            dimension: dim
        }) //KuhStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_ch2_wdfence_02"), new mp.Vector3(316.39, 6509.35, 28.68), {
            rotation: new mp.Vector3(0, 0, 178.35),
            dimension: dim
        }) //KuhStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_ch2_wdfence_02"), new mp.Vector3(316.13, 6503.41, 28.68), {
            rotation: new mp.Vector3(0, 0, 178.35),
            dimension: dim
        }) //KuhStufe1
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_trough1"), new mp.Vector3(355.07, 6500.76, 27.53), {
            rotation: new mp.Vector3(-1.3, 0, -0.61),
            dimension: dim
        }) //KuhStufe1
    }
    if (stables == "cow" && type == 2) {
        //KuhStallStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(355.66, 6497.29, 27.45), {
            rotation: new mp.Vector3(0, 1.61, 88.37),
            dimension: dim
        }) //KuhStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(355.83, 6503.47, 27.34), {
            rotation: new mp.Vector3(0, 0.49, 88.37),
            dimension: dim
        }) //KuhStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(312.78, 6510.02, 28.01), {
            rotation: new mp.Vector3(0, -1.22, -92.62),
            dimension: dim
        }) //KuhStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(312.52, 6503.81, 28.11), {
            rotation: new mp.Vector3(0, -1.22, -91.22),
            dimension: dim
        }) //KuhStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(312.52, 6497.71, 28.31), {
            rotation: new mp.Vector3(0, 0.68, -2.32),
            dimension: dim
        }) //KuhStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(318.72, 6497.44, 28.26), {
            rotation: new mp.Vector3(0, 0.68, -1.52),
            dimension: dim
        }) //KuhStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(324.88, 6497.3, 28.2), {
            rotation: new mp.Vector3(0, 1.46, -1.52),
            dimension: dim
        }) //KuhStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(331.04, 6497.14, 28.05), {
            rotation: new mp.Vector3(0, 0.96, 0.08),
            dimension: dim
        }) //KuhStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(337.21, 6497.15, 27.96), {
            rotation: new mp.Vector3(0, 0.96, 0.28),
            dimension: dim
        }) //KuhStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(343.38, 6497.15, 27.84), {
            rotation: new mp.Vector3(0, 0.96, 0.28),
            dimension: dim
        }) //KuhStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(349.55, 6497.17, 27.71), {
            rotation: new mp.Vector3(0, 1.92, 0.28),
            dimension: dim
        }) //KuhStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_ch2_wdfence_01"), new mp.Vector3(313.16, 6506.46, 28.04), {
            rotation: new mp.Vector3(0, 0, 87.43),
            dimension: dim
        }) //KuhStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_ch2_wdfence_02"), new mp.Vector3(316.39, 6509.35, 28.68), {
            rotation: new mp.Vector3(0, 0, 178.35),
            dimension: dim
        }) //KuhStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_ch2_wdfence_02"), new mp.Vector3(316.13, 6503.41, 28.68), {
            rotation: new mp.Vector3(0, 0, 178.35),
            dimension: dim
        }) //KuhStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_trough1"), new mp.Vector3(355.07, 6500.76, 27.53), {
            rotation: new mp.Vector3(-1.3, 0, -0.61),
            dimension: dim
        }) //KuhStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(355.99, 6509.63, 27.28), {
            rotation: new mp.Vector3(0, 1.5, 88.37),
            dimension: dim
        }) //KuhStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(356.15, 6515.84, 27.08), {
            rotation: new mp.Vector3(0, -0.61, 88.37),
            dimension: dim
        }) //KuhStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(356.15, 6521.88, 27.17), {
            rotation: new mp.Vector3(0, -3.07, 179.37),
            dimension: dim
        }) //KuhStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(349.99, 6521.94, 27.53), {
            rotation: new mp.Vector3(0, -2.39, 179.37),
            dimension: dim
        }) //KuhStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(343.85, 6522.02, 27.78), {
            rotation: new mp.Vector3(0, 1.71, 179.37),
            dimension: dim
        }) //KuhStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(337.67, 6522.08, 27.62), {
            rotation: new mp.Vector3(0, 0.47, 179.37),
            dimension: dim
        }) //KuhStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(331.45, 6522.14, 27.62), {
            rotation: new mp.Vector3(0, -2.18, 179.37),
            dimension: dim
        }) //KuhStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(325.26, 6522.21, 27.91), {
            rotation: new mp.Vector3(0, -2.18, 179.37),
            dimension: dim
        }) //KuhStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(319.09, 6522.28, 28.16), {
            rotation: new mp.Vector3(0, -0.21, 179.37),
            dimension: dim
        }) //KuhStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(312.92, 6522.35, 28.16), {
            rotation: new mp.Vector3(0, 2.64, -90.33),
            dimension: dim
        }) //KuhStufe2
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(312.99, 6516.2, 27.89), {
            rotation: new mp.Vector3(0, -1.16, -91.93),
            dimension: dim
        }) //KuhStufe2
    }
    if (stables == "cow" && type == 3) {
        //KuhStallStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(355.66, 6497.29, 27.45), {
            rotation: new mp.Vector3(0, 1.61, 88.37),
            dimension: dim
        }) //KuhStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(355.83, 6503.47, 27.34), {
            rotation: new mp.Vector3(0, 0.49, 88.37),
            dimension: dim
        }) //KuhStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(312.78, 6510.02, 28.01), {
            rotation: new mp.Vector3(0, -1.22, -92.62),
            dimension: dim
        }) //KuhStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(312.52, 6503.81, 28.11), {
            rotation: new mp.Vector3(0, -1.22, -91.22),
            dimension: dim
        }) //KuhStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(312.52, 6497.71, 28.31), {
            rotation: new mp.Vector3(0, 0.68, -2.32),
            dimension: dim
        }) //KuhStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(318.72, 6497.44, 28.26), {
            rotation: new mp.Vector3(0, 0.68, -1.52),
            dimension: dim
        }) //KuhStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(324.88, 6497.3, 28.2), {
            rotation: new mp.Vector3(0, 1.46, -1.52),
            dimension: dim
        }) //KuhStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(331.04, 6497.14, 28.05), {
            rotation: new mp.Vector3(0, 0.96, 0.08),
            dimension: dim
        }) //KuhStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(337.21, 6497.15, 27.96), {
            rotation: new mp.Vector3(0, 0.96, 0.28),
            dimension: dim
        }) //KuhStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(343.38, 6497.15, 27.84), {
            rotation: new mp.Vector3(0, 0.96, 0.28),
            dimension: dim
        }) //KuhStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(349.55, 6497.17, 27.71), {
            rotation: new mp.Vector3(0, 1.92, 0.28),
            dimension: dim
        }) //KuhStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_ch2_wdfence_01"), new mp.Vector3(313.16, 6506.46, 28.04), {
            rotation: new mp.Vector3(0, 0, 87.43),
            dimension: dim
        }) //KuhStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_ch2_wdfence_02"), new mp.Vector3(316.39, 6509.35, 28.68), {
            rotation: new mp.Vector3(0, 0, 178.35),
            dimension: dim
        }) //KuhStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_ch2_wdfence_02"), new mp.Vector3(316.13, 6503.41, 28.68), {
            rotation: new mp.Vector3(0, 0, 178.35),
            dimension: dim
        }) //KuhStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_trough1"), new mp.Vector3(355.07, 6500.76, 27.53), {
            rotation: new mp.Vector3(-1.3, 0, -0.61),
            dimension: dim
        }) //KuhStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(355.99, 6509.63, 27.28), {
            rotation: new mp.Vector3(0, 1.5, 88.37),
            dimension: dim
        }) //KuhStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(356.15, 6515.84, 27.08), {
            rotation: new mp.Vector3(0, -0.61, 88.37),
            dimension: dim
        }) //KuhStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(312.92, 6522.35, 28.16), {
            rotation: new mp.Vector3(0, 2.64, -90.33),
            dimension: dim
        }) //KuhStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(312.99, 6516.2, 27.89), {
            rotation: new mp.Vector3(0, -1.16, -91.93),
            dimension: dim
        }) //KuhStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(356.32, 6522.01, 27.17), {
            rotation: new mp.Vector3(0, -1.16, 88.37),
            dimension: dim
        }) //KuhStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(356.4, 6528.06, 27.33), {
            rotation: new mp.Vector3(0, 3.78, 88.37),
            dimension: dim
        }) //KuhStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(356.68, 6534.14, 26.91), {
            rotation: new mp.Vector3(0, 3.78, 88.37),
            dimension: dim
        }) //KuhStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(356.79, 6540.34, 26.51), {
            rotation: new mp.Vector3(0, -2.62, -178.53),
            dimension: dim
        }) //KuhStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(350.63, 6540.18, 26.85), {
            rotation: new mp.Vector3(0, -3.57, -178.25),
            dimension: dim
        }) //KuhStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(344.48, 6539.98, 27.29), {
            rotation: new mp.Vector3(0, -0.47, -178.25),
            dimension: dim
        }) //KuhStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(338.32, 6539.81, 27.37), {
            rotation: new mp.Vector3(0, -0.55, -178.25),
            dimension: dim
        }) //KuhStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(332.14, 6539.63, 27.48), {
            rotation: new mp.Vector3(0, -1.31, -178.25),
            dimension: dim
        }) //KuhStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(325.98, 6539.45, 27.65), {
            rotation: new mp.Vector3(0, -1.07, -178.25),
            dimension: dim
        }) //KuhStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(319.78, 6539.25, 27.82), {
            rotation: new mp.Vector3(0, -2.02, -179.25),
            dimension: dim
        }) //KuhStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(313.6, 6539.17, 28.08), {
            rotation: new mp.Vector3(0, -0.32, -89.75),
            dimension: dim
        }) //KuhStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(313.62, 6532.95, 28.13), {
            rotation: new mp.Vector3(0, -0.32, -93.85),
            dimension: dim
        }) //KuhStufe3
        FarmObjects[FarmObjects.length] = mp.objects.new(mp.game.joaat("prop_fncwood_19a"), new mp.Vector3(313.4, 6527.6, 28.13), {
            rotation: new mp.Vector3(0, -0.32, -93.24),
            dimension: dim
        }) //KuhStufe3
    }
}

const growTimes = [];

growTimes["carrot"] = 1 * 60 * 60;
growTimes["salat"] = 3 * 60 * 60;
growTimes["onion"] = 5 * 60 * 60;
growTimes["potato"] = 8 * 60 * 60;
growTimes["cucumber"] = 12 * 60 * 60;
growTimes["wheat"] = 24 * 60 * 60;
growTimes["pumpkin"] = 1 * 60 * 60;

var plot_data = [];
var spot_data = [];
var FarmerPed = false;
var FarmerAnimal = null;
var FarmerAnimalTimeout = null;
var FarmerDogTimeout = null;

var LocalFarmOwner = "";

var farm_positions = false;
var farmer_status = false;
var farmer_plants = [];
farmer_plants["potato"] = false;
farmer_plants["onion"] = false;
farmer_plants["carrot"] = false;
farmer_plants["salat"] = false;
farmer_plants["cucumber"] = false;
farmer_plants["wheat"] = false;
farmer_plants["pumpkin"] = false;

const convertNameTypes = [];
convertNameTypes["potato"] = "Kartoffeln";
convertNameTypes["onion"] = "Zwiebeln";
convertNameTypes["carrot"] = "Karotten";
convertNameTypes["salat"] = "Kopfsalat";
convertNameTypes["cucumber"] = "Gurken";
convertNameTypes["wheat"] = "Weizen";
convertNameTypes["pumpkin"] = "Kürbis";

var ActuallSeedType = "carrot";
var farmer_TractorAction = "";

CommunicationManager.AddServerEvent('updateFarmerChangedSeed', (seed) => {
    if (seed == "harvest") {
        farmer_TractorAction = "harvest";
    } else {
        farmer_TractorAction = "plant";
        ActuallSeedType = seed;
    }
})

function isInRangeOfPoint(pos1, pos2, range) {
    return (
        Math.sqrt(
            Math.pow(pos1.x - pos2.x, 2) +
            Math.pow(pos1.y - pos2.y, 2) +
            Math.pow(pos1.z - pos2.z, 2)
        ) <= range
    );
}


const cropObjects = [];
cropObjects["potato"] = {
    obj: "prop_plant_int_04a",
    offset: -0.55,
    offsetend: -0.25,
    rotation: new mp.Vector3(0, 0, 0)
};
cropObjects["onion"] = {
    obj: "prop_plant_int_04b",
    offset: -0.55,
    offsetend: -0.25,
    rotation: new mp.Vector3(0, 0, 0)
};
cropObjects["carrot"] = {
    obj: "p_int_jewel_plant_01",
    offset: -0.60,
    offsetend: -0.25,
    rotation: new mp.Vector3(0, 0, 0)
};
cropObjects["salat"] = {
    obj: "prop_veg_crop_03_cab",
    offset: -0.20,
    offsetend: -0.10,
    rotation: new mp.Vector3(0, 0, 0)
};
cropObjects["cucumber"] = {
    obj: "p_int_jewel_plant_02",
    offset: -1.00,
    offsetend: -0.25,
    rotation: new mp.Vector3(0, 0, 0)
};
cropObjects["wheat"] = {
    obj: "prop_veg_crop_05",
    offset: 0.25,
    offsetend: 1.0,
    rotation: new mp.Vector3(0, 0, 0)
};
cropObjects["pumpkin"] = {
    obj: "prop_veg_crop_03_pump",
    offset: -0.40,
    offsetend: -0.05,
    rotation: new mp.Vector3(0, 0, 0)
};

function randomIntFromRange(min, max) {
    return Math.floor(Math.random() * (max - min + 1) + min);
}

function getOffsetByGrow(name, growstate) {
    let offset = cropObjects[name].offset;
    let offsetend = cropObjects[name].offsetend;
    let offsetonce = (offset - offsetend) / 100
    let newoffset = (offset - offsetonce * growstate);
    return newoffset;
}

function getNearestPlantSpot(dist) {
    let p = new mp.Vector3(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z);
    let dist_c = dist;
    let fs = spot_data.filter(function (field, index) {
        let d_c = p.dist(new mp.Vector3(field.pos.x, field.pos.y, field.pos.z));
        if (d_c <= dist_c) {
            dist_c = d_c;
            return true;
        } else {
            return false;
        }
    });
    if (fs[fs.length - 1] != undefined) {
        return fs[fs.length - 1];
    } else {
        return false;
    }
}

function isSpotFree(plot, field) {
    if (plot_data[plot]) {
        if (plot_data[plot].plants[field]) {
            return false;
        } else {
            return true;
        }
    } else {
        return false;
    }
}

function getSpotPlantData(plot, field) {
    if (plot_data[plot]) {
        if (plot_data[plot].plants[field]) {
            return plot_data[plot].plants[field];
        } else {
            return false;
        }
    } else {
        return false;
    }
}

function getPlotCropsData(id) {
    if (plot_data[id]) {
        return plot_data[id].plants;
    } else {
        return false;
    }
}

function getCropById(plot_id, id) {
    let crops = getPlotCropsData(plot_id);
    if (crops) {
        if (crops[id]) {
            return crops[id];
        } else {
            return false;
        }
    }
}

function doesOwnPlot(id) {
    if (plot_data[id]) {
        return true;
    } else {
        return false;
    }
}

var PlantObjects = new class {
    constructor() {
        this._setup();
    }

    _setup() {
        let self = this;
        self._objects = []; // {field:String,plot:String,entity:[Object]}
        self._blips = [];
    }

    getPlantCoords(field_id, id) {
        let spot = spot_data.find(function (field, index) {
            return field.field_name == field_id && field.id == id;
        })
        if (spot) {
            return spot.pos;
        } else {
            VioRageManager.SendChatMessage("ERROR getPlantCoords: " + field_id.toString() + ":" + id.toString());
            return false;
        }
    }

    getPlantRot(field_id, id) {
        return spot_data.find(function (field, index) {
            return field.field_name == field_id && field.id == id;
        }).rot || false;
    }

    updatePlant(plot, field) {
    }

    refresh(field_id) {
        let self = this;
        if (self._objects[field_id] != null) {
            self._objects[field_id].forEach(function (obj, index) {
                if (obj.entity) {
                    obj.entity.destroy();
                    delete self._objects[field_id][index];
                }
            })
        }

        self._blips.forEach(function (blip, index) {
            if (blip) {
                blip.destroy();
                delete self._blips[index];
            }
        })

        for (var temp_field_id = 1; temp_field_id <= farm_positions.length; temp_field_id++) {
            if (plot_data[temp_field_id]) {
                let newblip = mp.blips.new(1, self.getPlantCoords(temp_field_id, 1), {
                    color: 2,
                    scale: 0.5,
                    shortRange: true,
                    dimension: mp.players.local.dimension
                });
                self._blips.push(newblip);
            } else {
                let newblip = mp.blips.new(1, self.getPlantCoords(temp_field_id, 1), {
                    color: 1,
                    shortRange: true,
                    scale: 0.5,
                    dimension: mp.players.local.dimension
                });
                self._blips.push(newblip);
            }
        }

        if (plot_data[field_id]) {
            for (var plot_id = 0; plot_id <= 300; plot_id++) {
                if (plot_data[field_id].plants[plot_id]) {
                    let position = self.getPlantCoords(field_id, plot_id);
                    if (position) {
                        let pos = new mp.Vector3(position.x, position.y, position.z);
                        let ground = pos.ground();
                        let plant = getCropById(field_id, plot_id);
                        let dur = growTimes[plant.type];
                        let progress = Math.floor(100 / dur * (getTimestampFromServer() - plant.plant_time));
                        if (progress > 100) {
                            progress = 100;
                        }
                        let c_data = cropObjects[plant.type]
                        let c_rotation = c_data.rotation;

                        if (field_id == 7 || field_id == 8) {
                            let rotation = self.getPlantRot(field_id, plot_id);
                            if (rotation) {
                                let rot = new mp.Vector3(rotation.x, rotation.y, rotation.z);
                                let rround = rot.ground();
                                c_rotation = new mp.Vector3(rround.x, rround.y, rround.z)
                            }
                        }

                        let el = {
                            field: field_id,
                            id: plot_id,
                            entity: mp.objects.new(mp.game.joaat(c_data.obj), new mp.Vector3(ground.x, ground.y, ground.z + getOffsetByGrow(plant.type, progress)), {
                                rotation: c_rotation,
                                alpha: 255,
                                dimension: mp.players.local.dimension
                            })
                        }
                        el.entity.vio_collision = false;
                        el.entity.notifyStreaming = true;
                        if (self._objects[field_id] == null) {
                            self._objects[field_id] = [];
                        }
                        self._objects[field_id].push(el);
                    }
                }
            }
        }
    }
}
var farmer_CanDoAction = true;


CommunicationManager.AddServerEvent('UpdateFarmForClient', (plot, field, new_plant_data, allowaction) => {
    if (allowaction == 1) {
        farmer_CanDoAction = true;
    }
    if (farmer_status == true) {
        let plant = getCropById(plot, field);
        if ((!plant) && (new_plant_data != "harvest")) {
            if (plot_data[plot].plants[field]) {
                return;
            }
            plot_data[plot].plants[field] = new_plant_data;
        } else {
            if (new_plant_data == "harvest") {
                if (plot_data[plot]) {
                    if (plot_data[plot].plants[field]) {
                        delete (plot_data[plot].plants[field])
                    }
                }
            } else {
                if (plot_data[plot]) {
                    if (plot_data[plot].plants[field]) {
                        plot_data[plot].plants[field] = new_plant_data;
                    }
                }
            }
        }
        PlantObjects.refresh(plot);
    }
});

CommunicationManager.AddServerEvent('ResetFarmForClientAction', () => {
    farmer_CanDoAction = true;
});

CommunicationManager.AddServerEvent('UpdateFarmSettingsForClient', (farmsettings) => {
    let FarmSettings = JSON.parse(farmsettings);
    farmer_plants["potato"] = FarmSettings.Vegetables["potato"];
    farmer_plants["onion"] = FarmSettings.Vegetables["onion"];
    farmer_plants["carrot"] = FarmSettings.Vegetables["carrot"];
    farmer_plants["salat"] = FarmSettings.Vegetables["salat"];
    farmer_plants["cucumber"] = FarmSettings.Vegetables["cucumber"];
    farmer_plants["wheat"] = FarmSettings.Vegetables["wheat"];
    farmer_plants["pumpkin"] = FarmSettings.Vegetables["pumpkin"];
})

function getTaskScenarioForPed(model) {
    if (model == 2971380566) {
        return 'WORLD_PIG_GRAZING';
    }
    if (model == 1794449327) {
        let rnd = Utility.GetRandomArbitrary(0, 100);
        if (rnd >= 50) {
            return 'WORLD_HEN_STANDING';
        } else {
            return 'WORLD_HEN_PECKING';
        }
    }
    if (model == 4244282910) {
        return 'WORLD_COW_GRAZING';
    }
}

var AnimalSpawn = [];

AnimalSpawn["a_c_pig"] = [];
AnimalSpawn["a_c_pig"][0] = new mp.Vector3(365.1251, 6499.99, 27.74228); // S1
AnimalSpawn["a_c_pig"][1] = new mp.Vector3(385.4979, 6500.688, 27.38434); // S1
AnimalSpawn["a_c_pig"][2] = new mp.Vector3(370.0178, 6507.883, 27.94827); // S1
AnimalSpawn["a_c_pig"][3] = new mp.Vector3(381.5911, 6506.936, 27.4347); // S1
AnimalSpawn["a_c_pig"][4] = new mp.Vector3(372.6628, 6501.777, 27.68645); // S1
AnimalSpawn["a_c_pig"][5] = new mp.Vector3(379.0416, 6501.276, 27.42932); // S1
AnimalSpawn["a_c_pig"][6] = new mp.Vector3(385.4154, 6511.524, 27.48438); // S2
AnimalSpawn["a_c_pig"][7] = new mp.Vector3(364.8884, 6511.414, 27.93351); // S2
AnimalSpawn["a_c_pig"][8] = new mp.Vector3(369.4071, 6516.813, 27.86773); // S2
AnimalSpawn["a_c_pig"][9] = new mp.Vector3(378.4525, 6516.797, 27.85225); // S2
AnimalSpawn["a_c_pig"][10] = new mp.Vector3(383.2431, 6520.149, 27.67257); // S2
AnimalSpawn["a_c_pig"][11] = new mp.Vector3(366.9228, 6520.425, 27.90919); // S2
AnimalSpawn["a_c_pig"][12] = new mp.Vector3(366.3903, 6525.535, 27.98868); // S3
AnimalSpawn["a_c_pig"][13] = new mp.Vector3(381.8168, 6523.754, 27.69772); // S3
AnimalSpawn["a_c_pig"][14] = new mp.Vector3(372.7692, 6529.129, 27.93433); // S3
AnimalSpawn["a_c_pig"][15] = new mp.Vector3(379.7767, 6533.682, 27.613); // S3
AnimalSpawn["a_c_pig"][16] = new mp.Vector3(368.5379, 6533.951, 27.81001); // S3
AnimalSpawn["a_c_pig"][17] = new mp.Vector3(375.5756, 6529.965, 27.85945); // S3

AnimalSpawn["a_c_hen"] = [];
AnimalSpawn["a_c_hen"][0] = new mp.Vector3(434.19, 6501.43, 28.06479); // S1
AnimalSpawn["a_c_hen"][1] = new mp.Vector3(433.0514, 6501.104, 28.0673); // S1
AnimalSpawn["a_c_hen"][2] = new mp.Vector3(433.6345, 6502.702, 27.97717); // S1
AnimalSpawn["a_c_hen"][3] = new mp.Vector3(438.0381, 6504.634, 27.96783); // S1
AnimalSpawn["a_c_hen"][4] = new mp.Vector3(437.1425, 6502.059, 28.06048); // S1
AnimalSpawn["a_c_hen"][5] = new mp.Vector3(442.9632, 6503.295, 28.18687); // S1
AnimalSpawn["a_c_hen"][6] = new mp.Vector3(432.6319, 6507.641, 27.53624); // S2
AnimalSpawn["a_c_hen"][7] = new mp.Vector3(442.0037, 6508.203, 27.996); // S2
AnimalSpawn["a_c_hen"][8] = new mp.Vector3(442.9653, 6506.269, 28.11593); // S2
AnimalSpawn["a_c_hen"][9] = new mp.Vector3(440.2266, 6505.286, 28.0288); // S2
AnimalSpawn["a_c_hen"][10] = new mp.Vector3(439.176, 6506.086, 27.94095); // S2
AnimalSpawn["a_c_hen"][11] = new mp.Vector3(435.81, 6505.878, 27.8085); // S2
AnimalSpawn["a_c_hen"][12] = new mp.Vector3(441.0197, 6510.753, 27.97803); // S3
AnimalSpawn["a_c_hen"][13] = new mp.Vector3(439.3629, 6509.65, 27.88207); // S3
AnimalSpawn["a_c_hen"][14] = new mp.Vector3(432.9587, 6509.291, 27.53185); // S3
AnimalSpawn["a_c_hen"][15] = new mp.Vector3(434.126, 6511.27, 27.63099); // S3
AnimalSpawn["a_c_hen"][16] = new mp.Vector3(436.6796, 6511.843, 27.79464); // S3
AnimalSpawn["a_c_hen"][17] = new mp.Vector3(436.7449, 6508.771, 27.73276); // S3


AnimalSpawn["a_c_cow"] = [];
AnimalSpawn["a_c_cow"][0] = new mp.Vector3(322.0081, 6501.616, 28.99036); // S1
AnimalSpawn["a_c_cow"][1] = new mp.Vector3(332.2128, 6505.683, 28.47362); // S1
AnimalSpawn["a_c_cow"][2] = new mp.Vector3(353.8473, 6501.553, 28.28748); // S1
AnimalSpawn["a_c_cow"][3] = new mp.Vector3(351.2982, 6513.257, 28.56511); // S2
AnimalSpawn["a_c_cow"][4] = new mp.Vector3(322.0525, 6512.272, 29.16127); // S2
AnimalSpawn["a_c_cow"][5] = new mp.Vector3(330.1554, 6519.589, 28.92477); // S2
AnimalSpawn["a_c_cow"][6] = new mp.Vector3(350.7372, 6527.692, 28.65598); // S3
AnimalSpawn["a_c_cow"][7] = new mp.Vector3(334.3782, 6533.362, 28.46916); // S3
AnimalSpawn["a_c_cow"][8] = new mp.Vector3(321.2619, 6528.354, 29.26707); // S3

FarmerPedWayPoints = [];
FarmerPedWayPoints[0] = new mp.Vector3(415.3781, 6456.3467, 28.967945);
FarmerPedWayPoints[1] = new mp.Vector3(404.4046, 6457.2036, 29.069408);
FarmerPedWayPoints[2] = new mp.Vector3(396.15427, 6464.099, 30.0155);
FarmerPedWayPoints[3] = new mp.Vector3(394.7713, 6477.145, 28.993393);
FarmerPedWayPoints[4] = new mp.Vector3(401.16873, 6481.551, 28.779396);
FarmerPedWayPoints[5] = new mp.Vector3(407.60944, 6496.913, 27.83724);
FarmerPedWayPoints[6] = new mp.Vector3(413.74005, 6496.944, 27.952885);
FarmerPedWayPoints[7] = new mp.Vector3(418.75528, 6504.141, 27.76005);
FarmerPedWayPoints[8] = new mp.Vector3(427.37003, 6510.291, 27.863594);
FarmerPedWayPoints[9] = new mp.Vector3(431.96445, 6493.778, 29.039104);
FarmerPedWayPoints[10] = new mp.Vector3(442.94125, 6491.778, 29.439112);
FarmerPedWayPoints[11] = new mp.Vector3(446.3526, 6484.1367, 29.47158);
FarmerPedWayPoints[12] = new mp.Vector3(442.91956, 6476.6396, 29.345243);
FarmerPedWayPoints[13] = new mp.Vector3(433.58182, 6483.9136, 28.948957);
FarmerPedWayPoints[14] = new mp.Vector3(412.16382, 6481.654, 28.808044);
FarmerPedWayPoints[15] = new mp.Vector3(413.20557, 6474.278, 28.809235);
FarmerPedWayPoints[16] = new mp.Vector3(348.20328, 6496.68, 28.866991);
FarmerPedWayPoints[17] = new mp.Vector3(369.46738, 6496.212, 28.55409);


var TotalAnimals = [];
var TotalMulch = [];

function createAnimals(animal, ped, dim) {
    var i;
    for (i = 0; i < 20; i++) {
        //VioRageManager.SendChatMessage("animal: " + animal + " try ID: " +i.toString() );
        if (ped.AnimalOutputs[i] && ped.AnimalMulchs[i]) {
            let rot = Utility.GetRandomArbitrary(0, 360);
            let pos = AnimalSpawn[animal][i];
            let mulch_time = ped.AnimalMulchs[i];
            let output_time = ped.AnimalOutputs[i];
            //VioRageManager.SendChatMessage("animal: " + animal + " created ID: " +i.toString() );
            let a_c_animal = VioRageManager.CreatePed(mp.game.joaat(animal), new mp.Vector3(pos.x, pos.y, pos.z - 2), rot, dim, true);
            VioRageManager.FreezePosition(a_c_animal, true);
            a_c_animal.AnimalInitAction = true;
            a_c_animal.AnimalReInitAction = true;
            a_c_animal.AnimalModel = animal;
            a_c_animal.MaxAnimals = ped.MaxAnimals;
            a_c_animal.TriggerIndex = i;
            a_c_animal.AnimalMulch = mulch_time;
            a_c_animal.AnimalOutput = output_time;
            a_c_animal.ShitStatus = false;

            if (ped.DeadCounter > 0) {
                ped.DeadCounter = ped.DeadCounter - 1;
                a_c_animal.Starved = true;
            } else {
                a_c_animal.Starved = false;
            }

            a_c_animal.AnimalTaskActive = getTaskScenarioForPed(a_c_animal.model);
            a_c_animal.taskStartScenarioInPlace(a_c_animal.AnimalTaskActive, -1, false);
            TotalAnimals.unshift(a_c_animal);
        }
    }
}

var FarmerAnimalTask = "stand";
var FarmerAnimalFollowTask = false;

function setFarmerDogRandomAction() {

    FarmerDogTimeout = setTimeout(() => {
        if (FarmerAnimal != null) {
            if (FarmerAnimalTask == "follow") {
                let t_pos = FarmerAnimal.getCoords(true);
                if (t_pos != null) {
                    mp.players.forEachInStreamRange((target) => {
                        if (target != null) {
                            if (LocalFarmOwner == target.name) {
                                if (isInRangeOfPoint(target.position, t_pos, 3) == false) {
                                    let velocity = FarmerAnimal.getVelocity();
                                    if (velocity.x < 0) {
                                        velocity.x = velocity.x * -1
                                    }
                                    if (velocity.y < 0) {
                                        velocity.y = velocity.y * -1
                                    }
                                    if (velocity.x <= 0.08 && velocity.y <= 0.08) {
                                        FarmerAnimal.taskFollowToOffsetOf(target.handle, 1, 1, 0, 25, -1, 10.0, true);
                                        FarmerAnimalTask = "Nfollow";
                                    }
                                }
                            }
                        }
                    })
                }
            }
        }
        setFarmerDogRandomAction()
    }, 100);
}

function setAnimalRandomAction() {

    FarmerAnimalTimeout = setTimeout(() => {
        let local_pos = mp.players.local.position;
        if (FarmerAnimal != null) {
            if (FarmerAnimal.handle !== 0) {

                var HasWalk = false;
                if (FarmerAnimal.Follow == true) {
                    mp.players.forEachInStreamRange((target) => {
                        if (target != null) {
                            if (LocalFarmOwner == target.name) {
                                if (target.dimension == mp.players.local.dimension) {
                                    if (target.isInAnyVehicle(false) == false) {
                                        let t_pos = FarmerAnimal.getCoords(true);
                                        if (t_pos != null) {
                                            HasWalk = true;
                                            FarmerAnimal.TargetPostion = target.position;
                                            if (isInRangeOfPoint(target.position, t_pos, 3)) {
                                                if (FarmerAnimalTask != "sit_next") {
                                                    FarmerAnimalTask = "sit_next";
                                                    if (FarmerAnimal.model == 0x1250D7BA) {
                                                        FarmerAnimal.taskStartScenarioInPlace("WORLD_MOUNTAIN_LION_REST", -1, true);
                                                    } else if (FarmerAnimal.model == 0x4E8F95A2 || FarmerAnimal.model == 0x9563221D || FarmerAnimal.model == 0x14EC17EA) {
                                                        FarmerAnimal.taskStartScenarioInPlace("WORLD_DOG_SITTING_ROTTWEILER", -1, true);
                                                    } else if (FarmerAnimal.model == 0x349F33E1) {
                                                        FarmerAnimal.taskStartScenarioInPlace("WORLD_DOG_SITTING_RETRIEVER", -1, true);
                                                    } else if (FarmerAnimal.model == 0x431FC24C) {
                                                        FarmerAnimal.taskStartScenarioInPlace("WORLD_DOG_SITTING_SHEPHERD", -1, true);
                                                    } else if (FarmerAnimal.model == 0x573201B8) {
                                                        FarmerAnimal.taskStartScenarioInPlace("WORLD_CAT_SLEEPING_GROUND", -1, true);
                                                    } else {
                                                        FarmerAnimal.taskStartScenarioInPlace("WORLD_DOG_SITTING_SMALL", -1, true);
                                                    }
                                                }
                                            } else {
                                                //FarmerAnimal.taskGoToCoordAnyMeans(target.position.x, target.position.y, target.position.z, 2.0, 0, false, 16777216, 0);
                                                if (FarmerAnimalTask != "follow") {
                                                    FarmerAnimal.taskFollowToOffsetOf(target.handle, 1, 1, 0, 10, -1, 10.0, true);
                                                    setTimeout(function () {
                                                        if (target != null && FarmerAnimal != null) {
                                                            FarmerAnimalTask = "follow";
                                                        }
                                                    }, 1500);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    })
                } else {
                    if (FarmerAnimalTask == "follow") {
                        FarmerAnimalTask = "wander";
                    }
                }

                if (HasWalk == false) {
                    let rndstatus = Utility.GetRandomArbitrary(0, 1000);
                    if (rndstatus >= 750) {
                        if (FarmerAnimalTask == "wander") {
                            FarmerAnimalTask = "stand";
                            if (FarmerAnimal.model == 0x1250D7BA) {
                                FarmerAnimal.taskStartScenarioInPlace("WORLD_MOUNTAIN_LION_REST", -1, true);
                            } else if (FarmerAnimal.model == 0x4E8F95A2 || FarmerAnimal.model == 0x9563221D || FarmerAnimal.model == 0x14EC17EA) {
                                FarmerAnimal.taskStartScenarioInPlace("WORLD_DOG_SITTING_ROTTWEILER", -1, true);
                            } else if (FarmerAnimal.model == 0x349F33E1) {
                                FarmerAnimal.taskStartScenarioInPlace("WORLD_DOG_SITTING_RETRIEVER", -1, true);
                            } else if (FarmerAnimal.model == 0x431FC24C) {
                                FarmerAnimal.taskStartScenarioInPlace("WORLD_DOG_SITTING_SHEPHERD", -1, true);
                            } else if (FarmerAnimal.model == 0x573201B8) {
                                FarmerAnimal.taskStartScenarioInPlace("WORLD_CAT_SLEEPING_GROUND", -1, true);
                            } else {
                                FarmerAnimal.taskStartScenarioInPlace("WORLD_DOG_SITTING_SMALL", -1, true);
                            }
                        } else {
                            FarmerAnimalTask = "wander";
                            let akey = Math.round(Utility.GetRandomArbitrary(0, 16));
                            let newpos = FarmerPedWayPoints[akey];
                            let canimalpos = FarmerAnimal.getCoords(true);
                            if (canimalpos != null) {
                                let hitData = mp.raycasting.testPointToPoint(canimalpos, newpos, mp.players.local, (1 | 16 | 256));
                                if (!hitData) {
                                    FarmerAnimal.taskGoStraightToCoord(newpos.x, newpos.y, newpos.z, Utility.GetRandomArbitrary(1, 3), 80000, Math.round(Utility.GetRandomArbitrary(0, 255)), 0.0);
                                }
                            }
                        }
                    }
                }
            }
        }

        if (TotalAnimals != null) {
            TotalAnimals.forEach(function (animal, index) {
                let target_pos = animal.getCoords(true);
                let IsActionActive = false;
                let distfinal = mp.game.system.vdist2(local_pos.x, local_pos.y, local_pos.z, target_pos.x, target_pos.y, target_pos.z);
                if (distfinal < 2000) {
                    if (animal.isOnScreen()) {
                        IsActionActive = true
                    }
                }

                if (animal.AnimalInitAction == true) {
                    animal.AnimalInitAction = false
                    //animal.freezePosition(false);
                    animal.setCoords(target_pos.x, target_pos.y, target_pos.z + 2, true, false, false, true);
                    if (animal.Starved) {
                        animal.setInvincible(false);
                        animal.applyDamageTo(200, true);
                        if (animal.model == 1794449327) {
                            animal.setCoords(target_pos.x, target_pos.y, target_pos.z + 2.5, true, false, false, true);
                        }
                    }
                }

                let MulchStatus = Math.floor(animal.AnimalMulch - getTimestampFromServer());
                if (MulchStatus < 0 && animal.ShitStatus == false && animal.Starved == false) {
                    animal.ShitStatus = true;
                    let z = mp.game.gameplay.getGroundZFor3dCoord(target_pos.x, target_pos.y, target_pos.z + 2, 0, false) + 0.025;
                    let shit_type = "prop_bird_poo";
                    if (animal.model == 2971380566) {
                        shit_type = "prop_big_shit_01"
                    } // pig
                    if (animal.model == 4244282910) {
                        shit_type = "prop_big_shit_02"
                    } // cow
                    let mulch = mp.objects.new(mp.game.joaat(shit_type), new mp.Vector3(target_pos.x, target_pos.y, z), {dimension: mp.players.local.dimension})
                    mulch.TriggerIndex = animal.TriggerIndex;
                    mulch.MulchType = "hen";
                    if (animal.model == 2971380566) {
                        mulch.MulchType = "pig"
                    } // pig
                    if (animal.model == 4244282910) {
                        mulch.MulchType = "cow"
                    } // cow
                    TotalMulch.push(mulch);
                }

                if (animal.Starved == false) {
                    let changetask = Utility.GetRandomArbitrary(0, 1000);
                    if (IsActionActive == true) { // Sagt ob das Tier sichtbar und nutzbar ist
                        VioRageManager.FreezePosition(animal, false);
                        if ((changetask >= 500) || (animal.AnimalReInitAction == true)) {
                            if (animal.AnimalTaskActive == false) {
                                animal.AnimalTaskActive = getTaskScenarioForPed(animal.model);
                                animal.taskStartScenarioInPlace(animal.AnimalTaskActive, -1, true);
                            } else {
                                //animal.taskWanderStandard(10.0, 10);
                                let rkey = Math.round(Utility.GetRandomArbitrary(0, animal.MaxAnimals - 1));
                                //VioRageManager.SendChatMessage("move: " + animal.AnimalModel + " created rkey: " +rkey.toString() );
                                let rpos = AnimalSpawn[animal.AnimalModel][rkey];
                                animal.taskGoStraightToCoord(rpos.x, rpos.y, rpos.z, Utility.GetRandomArbitrary(0, 1), 80000, 245, 0.0);
                                animal.AnimalTaskActive = false;
                            }
                            animal.AnimalReInitAction = false;
                        }
                    } else {
                        animal.AnimalReInitAction = true;
                        animal.AnimalTaskActive = getTaskScenarioForPed(animal.model);
                        animal.taskStartScenarioInPlace(animal.AnimalTaskActive, -1, true);
                    }
                }
            })
        }
        setAnimalRandomAction()
    }, 2000);
}

var HenFeedStatus = 0;
var PigFeedStatus = 0;
var CowFeedStatus = 0;

CommunicationManager.AddServerEvent('EnableFarmForClient', (farmsettings, farmid) => {

    if (farm_positions == false) {
        farm_positions = require("./viov/data/jobs/farmer/fields.js")
        farm_positions.forEach(function (field) {
            let field_id = field.field_name;
            field.positions.forEach(function (spot) {
                spot.field_name = field_id;
                spot_data.push(spot);
            })
        })
    }
    FarmerAnimalTask = "stand";

    if (FarmerPed) {
        FarmerPed.destroy();
        FarmerPed = false;
    }
    if (FarmerAnimal != null) {
        FarmerAnimal.destroy();
        FarmerAnimal = null;
    }

    farmer_TractorAction = "";
    destroyFarmSzenarios();

    TotalMulch.forEach(function (mulch, index) {
        if (mulch) {
            mulch.destroy();
            delete TotalMulch[index];
        }
    })

    let FarmSettings = JSON.parse(farmsettings);

    LocalFarmOwner = FarmSettings.FarmOwner;

    for (const key in FarmSettings.PedCompanion) {
        if (FarmSettings.PedCompanion[key].Selected == true) {
            FarmerAnimal = VioRageManager.CreatePed(mp.game.joaat(key), new mp.Vector3(412.48, 6497.41, 27.87), 110.26, farmid);
            FarmerAnimal.TargetPostion = new mp.Vector3(0, 0, 0);
            FarmerAnimal.Name = FarmSettings.PedCompanion[key].Name;
            FarmerAnimal.Follow = FarmSettings.PedCompanion[key].Follow;
            //RequestClipSet("creatures@pug@move", 5000, function() {
            //	FarmerAnimal.setMovementClipset("creatures@pug@move", 0.0);
            //	VioRageManager.SendChatMessage("[MUSS ENTFERNT WERDEN]->> creatures@pug@move");
            //});
        }
    }

    for (const key in FarmSettings.PedCompanionShit) {
        let newpos = FarmerPedWayPoints[FarmSettings.PedCompanionShit[key]];
        let z = mp.game.gameplay.getGroundZFor3dCoord(newpos.x, newpos.y, newpos.z + 2, 0, false) + 0.025;
        let mulch = mp.objects.new(mp.game.joaat("prop_big_shit_01"), new mp.Vector3(newpos.x, newpos.y, z), {dimension: farmid})
        mulch.TriggerIndex = FarmSettings.PedCompanionShit[key];
        mulch.MulchType = "companion";
        TotalMulch.push(mulch);
    }

    if (FarmSettings.Coops.Hen.BuildID != 0) {
        createFarmSzenario("hen", FarmSettings.Coops.Hen.BuildID, farmid);
        createAnimals("a_c_hen", FarmSettings.Coops.Hen, farmid);
        HenFeedStatus = FarmSettings.Coops.Hen.FeedStatus;
    }
    if (FarmSettings.Coops.Cow.BuildID != 0) {
        createFarmSzenario("cow", FarmSettings.Coops.Cow.BuildID, farmid);
        createAnimals("a_c_cow", FarmSettings.Coops.Cow, farmid);
        CowFeedStatus = FarmSettings.Coops.Cow.FeedStatus;
    }
    if (FarmSettings.Coops.Pig.BuildID != 0) {
        createFarmSzenario("pig", FarmSettings.Coops.Pig.BuildID, farmid);
        createAnimals("a_c_pig", FarmSettings.Coops.Pig, farmid);
        PigFeedStatus = FarmSettings.Coops.Pig.FeedStatus;
    }

    if (FarmerAnimalTimeout != null) {
        clearTimeout(FarmerAnimalTimeout);
        FarmerAnimalTimeout = null;
    }
    if (FarmerDogTimeout != null) {
        clearTimeout(FarmerDogTimeout);
        FarmerDogTimeout = null;
    }

    setFarmerDogRandomAction();
    setAnimalRandomAction();

    FarmerPed = VioRageManager.CreatePed(mp.game.joaat("a_m_m_farmer_01"), new mp.Vector3(423.20, 6480.00, 28.80), 110.26, farmid, true);

    farmer_plants["potato"] = FarmSettings.Vegetables["potato"];
    farmer_plants["onion"] = FarmSettings.Vegetables["onion"];
    farmer_plants["carrot"] = FarmSettings.Vegetables["carrot"];
    farmer_plants["salat"] = FarmSettings.Vegetables["salat"];
    farmer_plants["cucumber"] = FarmSettings.Vegetables["cucumber"];
    farmer_plants["wheat"] = FarmSettings.Vegetables["wheat"];
    farmer_plants["pumpkin"] = FarmSettings.Vegetables["pumpkin"];

    // Soll dem Farminhaber interher laufen, und wenn dieser nicht da ist, einfach ein paar Runden auf dem gelände drehen!
    // player.taskTurnToFace(entity, duration);
    // player.taskTurnToFaceCoord(x, y, z, duration);

    setTimeout(() => {
        farmer_status = true;
        farmer_CanDoAction = true;
    }, 4000);

    FarmerAnimalTask = "stand";
})

CommunicationManager.AddServerEvent('UpdateFarmAnimalsForClient', (farmsettings, farmid) => {

    destroyFarmSzenarios();

    if (FarmerAnimal != null) {
        FarmerAnimal.destroy();
        FarmerAnimal = null;
    }

    FarmerAnimalTask = "stand";

    TotalMulch.forEach(function (mulch, index) {
        if (mulch) {
            mulch.destroy();
            delete TotalMulch[index];
        }
    })

    TotalAnimals.forEach(function (animal, index) {
        if (animal) {
            animal.destroy();
            delete TotalAnimals[index];
        }
    })

    let FarmSettings = JSON.parse(farmsettings);

    for (const key in FarmSettings.PedCompanion) {
        if (FarmSettings.PedCompanion[key].Selected == true) {
            FarmerAnimal = VioRageManager.CreatePed(mp.game.joaat(key), new mp.Vector3(412.48, 6497.41, 27.87), 110.26, farmid);
            FarmerAnimal.TargetPostion = new mp.Vector3(0, 0, 0);
            FarmerAnimal.Name = FarmSettings.PedCompanion[key].Name;
            FarmerAnimal.Follow = FarmSettings.PedCompanion[key].Follow;
            //RequestClipSet("creatures@pug@move", 5000, function() {
            //	FarmerAnimal.setMovementClipset("creatures@pug@move", 0.0);
            //	VioRageManager.SendChatMessage("[MUSS ENTFERNT WERDEN]->> creatures@pug@move");
            //});
        }
    }

    for (const key in FarmSettings.PedCompanionShit) {
        let newpos = FarmerPedWayPoints[FarmSettings.PedCompanionShit[key]];
        let z = mp.game.gameplay.getGroundZFor3dCoord(newpos.x, newpos.y, newpos.z + 2, 0, false) + 0.025;
        let mulch = mp.objects.new(mp.game.joaat("prop_big_shit_01"), new mp.Vector3(newpos.x, newpos.y, z), {dimension: farmid})
        mulch.TriggerIndex = FarmSettings.PedCompanionShit[key];
        mulch.MulchType = "companion";
        TotalMulch.push(mulch);
    }

    if (FarmSettings.Coops.Hen.BuildID != 0) {
        createFarmSzenario("hen", FarmSettings.Coops.Hen.BuildID, farmid);
        createAnimals("a_c_hen", FarmSettings.Coops.Hen, farmid);
        HenFeedStatus = FarmSettings.Coops.Hen.FeedStatus;
    }
    if (FarmSettings.Coops.Cow.BuildID != 0) {
        createFarmSzenario("cow", FarmSettings.Coops.Cow.BuildID, farmid);
        createAnimals("a_c_cow", FarmSettings.Coops.Cow, farmid);
        CowFeedStatus = FarmSettings.Coops.Cow.FeedStatus;
    }
    if (FarmSettings.Coops.Pig.BuildID != 0) {
        createFarmSzenario("pig", FarmSettings.Coops.Pig.BuildID, farmid);
        createAnimals("a_c_pig", FarmSettings.Coops.Pig, farmid);
        PigFeedStatus = FarmSettings.Coops.Pig.FeedStatus;
    }

    FarmerAnimalTask = "stand";
})

CommunicationManager.AddServerEvent('DisableFarmForClient', () => {

    farmer_TractorAction = "";
    farmer_status = false;
    destroyFarmSzenarios();

    HenFeedStatus = 0;
    PigFeedStatus = 0;
    CowFeedStatus = 0;

    if (FarmerAnimalTimeout != null) {
        clearTimeout(FarmerAnimalTimeout);
        FarmerAnimalTimeout = null;
    }
    if (FarmerDogTimeout != null) {
        clearTimeout(FarmerDogTimeout);
        FarmerDogTimeout = null;
    }

    TotalMulch.forEach(function (mulch, index) {
        if (mulch) {
            mulch.destroy();
            delete TotalMulch[index];
        }
    })

    TotalAnimals.forEach(function (animal, index) {
        if (animal) {
            animal.destroy();
            delete TotalAnimals[index];
        }
    })
    PlantObjects._objects.forEach(function (fliedobj, fliedobjindex) {
        fliedobj.forEach(function (obj, index) {
            if (obj.entity) {
                obj.entity.destroy();
                delete PlantObjects._objects[fliedobjindex][index];
            }
        })
    })
    PlantObjects._blips.forEach(function (blip, index) {
        if (blip) {
            blip.destroy();
            delete PlantObjects._blips[index];
        }
    })
    if (FarmerPed) {
        FarmerPed.destroy();
        FarmerPed = false;
    }
    if (FarmerAnimal != null) {
        FarmerAnimal.destroy();
        FarmerAnimal = null;
    }
    FarmerAnimalTask = "stand";
    plot_data = [];
})
CommunicationManager.AddServerEvent('LoadFarmForClient', (p_cropsDataKey, p_cropsDataValue) => {
    setTimeout(() => {
        plot_data[p_cropsDataKey] = p_cropsDataValue;
        PlantObjects.refresh(p_cropsDataKey);
    }, 3000);
});

CommunicationManager.AddServerEvent('UpdateFarmAnimalsStatus', (action, arg, keyindex, new_value) => {
    if (action == "feed") {
        if (arg == "pig") {
            PigFeedStatus = new_value;
        }
        if (arg == "cow") {
            CowFeedStatus = new_value;
        }
        if (arg == "hen") {
            HenFeedStatus = new_value;
        }
    }
    if (action == "mulch") {
        TotalMulch.forEach(function (mulch, index) {
            if (mulch) {
                if (mulch.TriggerIndex == keyindex && mulch.MulchType == arg) {
                    mulch.destroy();
                    delete TotalMulch[index];
                }
            }
        })

        TotalAnimals.forEach(function (animal, index) {
            if (animal) {
                if (animal.TriggerIndex == keyindex && animal.AnimalModel == "a_c_" + arg) {
                    animal.AnimalMulch = new_value;
                    animal.ShitStatus = false;
                }
            }
        })
    }
    if (action == "remove") {
        TotalAnimals.forEach(function (animal, index) {
            if (animal) {
                if (animal.TriggerIndex == keyindex && animal.AnimalModel == "a_c_" + arg) {
                    animal.destroy();
                    delete TotalAnimals[index];
                }
            }
        })
        TotalMulch.forEach(function (mulch, index) {
            if (mulch) {
                if (mulch.TriggerIndex == keyindex && mulch.MulchType == arg) {
                    mulch.destroy();
                    delete TotalMulch[index];
                }
            }
        })
    }
    if (action == "collect") {
        TotalAnimals.forEach(function (animal, index) {
            if (animal) {
                if (animal.TriggerIndex == keyindex && animal.AnimalModel == "a_c_" + arg) {
                    animal.AnimalOutput = new_value;
                    if (arg == "pig") {
                        animal.destroy();
                        delete TotalAnimals[index];
                    }
                }
            }
        })
        if (arg == "pig") {
            TotalMulch.forEach(function (mulch, index) {
                if (mulch) {
                    if (mulch.TriggerIndex == keyindex && mulch.MulchType == arg) {
                        mulch.destroy();
                        delete TotalMulch[index];
                    }
                }
            })
        }
    }
});

function msToTime(s) {
    let ms = s % 1000;
    s = (s - ms) / 1000;
    let secs = s % 60;
    s = (s - secs) / 60;
    let mins = s % 60;
    let hrs = (s - mins) / 60;
    if (hrs < 10) hrs = "0" + hrs;
    if (mins < 10) mins = "0" + mins;
    if (secs < 10) secs = "0" + secs;
    return hrs + ':' + mins + ':' + secs;
}

let SlowTruckSpeedFactor = (Utility.GetRandomArbitrary(7300, 7500) / 100000);

var farmerActionCoolDown = 1;
var farmerTruckInActionState = 0;
mp.events.add('render', () => {
    if (farmer_status && farm_positions) {
        let spot = {
            field_name: "",
            id: "",
            dist: 9999
        }

        if (mp.players.local.vehicle != null) {
            if (mp.players.local.vehicle.model != 0x61D6BA8C && mp.players.local.vehicle.model != 0x843B73DE) {
                return;
            }
        }

        let local_pos = mp.players.local.position;

        if (FarmerAnimal != null) {

            let t_pos = FarmerAnimal.getCoords(true);
            if (t_pos != null) {
                VioRageManager.FreezePosition(FarmerAnimal, false);
                let vdist = 120;
                let t_dist = mp.game.system.vdist2(local_pos.x, local_pos.y, local_pos.z, t_pos.x, t_pos.y, t_pos.z);
                if (t_dist <= vdist) {
                    let color = [0, 190, 0, 255]
                    let c_dist = 1 / vdist * t_dist
                    let size = lerp(0.4, 0.06, c_dist)
                    if (size > 0.4) {
                        size = 0.4;
                    } else if (size < 0.06) {
                        size = 0.06;
                    }

                    let alpha = lerp(255, 0, c_dist)
                    if (alpha > 255) {
                        alpha = 255;
                    } else if (alpha < 0) {
                        alpha = 0;
                    }

                    color[3] = alpha;
                    mp.game.graphics.setDrawOrigin(t_pos.x, t_pos.y, t_pos.z + 0.45, 0);
                    mp.game.graphics.drawText(FarmerAnimal.Name, [0, 0], {
                        font: 4,
                        color: color,
                        scale: [size, size],
                        outline: true
                    });
                    mp.game.graphics.clearDrawOrigin()
                }
            }
        }

        let TriggerDist = 4;
        let TriggerAction = "";
        let TriggerArgument = "";
        let TriggerIndex = 0;

        TotalMulch.forEach(function (mulch, index) {
            let target_pos = mulch.getCoords(true);
            let dist = mp.game.system.vdist2(local_pos.x, local_pos.y, local_pos.z, target_pos.x, target_pos.y, target_pos.z);
            if (dist <= 40) {

                let c_dist = 1 / 40 * dist
                let size = lerp(0.35, 0.06, c_dist)
                if (size > 0.35) {
                    size = 0.35;
                } else if (size < 0.06) {
                    size = 0.06;
                }
                let text = "Dünger";

                if (dist < 3) {
                    text = text + "\n~w~'E' zum Aufsammeln"
                    if (TriggerDist > dist) {
                        TriggerDist = -2;
                        TriggerAction = "mulch";
                        TriggerArgument = mulch.MulchType;
                        TriggerIndex = mulch.TriggerIndex;
                    }
                }

                mp.game.graphics.drawText(text, [target_pos.x, target_pos.y, target_pos.z + 0.40], {
                    font: 4,
                    color: [158, 63, 9, 255],
                    scale: [size, size],
                    outline: true
                });
            }
        })

        if (HenFeedStatus > 0) {
            let dist = mp.game.system.vdist2(local_pos.x, local_pos.y, local_pos.z, 431.59, 6503.13, 27.55);
            if (dist <= 40) {
                let c_dist = 1 / 40 * dist
                let size = lerp(0.4, 0.06, c_dist)
                if (size > 0.4) {
                    size = 0.4;
                } else if (size < 0.06) {
                    size = 0.06;
                }

                let text = "Futtertrog";
                let diff = HenFeedStatus - getTimestampFromServer();
                if (diff > 1) {
                    let remaining = msToTime((HenFeedStatus - getTimestampFromServer()) * 1000)
                    text = text + "\n~g~" + remaining
                } else {
                    text = text + "\n~r~leer"
                }
                if (dist < 4) {
                    text = text + "\n~w~'E' zum Befüllen"
                    if (TriggerDist > dist) {
                        TriggerDist = dist;
                        TriggerAction = "feed";
                        TriggerArgument = "hen";
                        TriggerIndex = -1;
                    }
                }
                mp.game.graphics.drawText(text, [431.59, 6503.13, 27.55 + 0.80], {
                    font: 4,
                    color: [255, 255, 255, 255],
                    scale: [size, size],
                    outline: true
                });
            }
        }
        if (PigFeedStatus > 0) {
            let dist = mp.game.system.vdist2(local_pos.x, local_pos.y, local_pos.z, 363.63, 6500.7, 27.46);
            if (dist <= 40) {
                let c_dist = 1 / 40 * dist
                let size = lerp(0.4, 0.06, c_dist)
                if (size > 0.4) {
                    size = 0.4;
                } else if (size < 0.06) {
                    size = 0.06;
                }

                let text = "Futtertrog";
                let diff = PigFeedStatus - getTimestampFromServer();
                if (diff > 1) {
                    let remaining = msToTime((PigFeedStatus - getTimestampFromServer()) * 1000)
                    text = text + "\n~g~" + remaining
                } else {
                    text = text + "\n~r~leer"
                }
                if (dist < 2) {
                    text = text + "\n~w~'E' zum Befüllen"
                    if (TriggerDist > dist) {
                        TriggerDist = dist;
                        TriggerAction = "feed";
                        TriggerArgument = "pig";
                        TriggerIndex = -1;
                    }
                }
                mp.game.graphics.drawText(text, [363.63, 6500.7, 27.46 + 0.80], {
                    font: 4,
                    color: [255, 255, 255, 255],
                    scale: [size, size],
                    outline: true
                });
            }
        }
        if (CowFeedStatus > 0) {
            let dist = mp.game.system.vdist2(local_pos.x, local_pos.y, local_pos.z, 355.07, 6500.76, 27.53);
            if (dist <= 40) {
                let c_dist = 1 / 40 * dist
                let size = lerp(0.4, 0.06, c_dist)
                if (size > 0.4) {
                    size = 0.4;
                } else if (size < 0.06) {
                    size = 0.06;
                }

                let text = "Futtertrog";
                let diff = CowFeedStatus - getTimestampFromServer();
                if (diff > 1) {
                    let remaining = msToTime((CowFeedStatus - getTimestampFromServer()) * 1000)
                    text = text + "\n~g~" + remaining
                } else {
                    text = text + "\n~r~leer"
                }
                if (dist < 2) {
                    text = text + "\n~w~'E' zum Befüllen"
                    if (TriggerDist > dist) {
                        TriggerDist = dist;
                        TriggerAction = "feed";
                        TriggerArgument = "cow";
                        TriggerIndex = -1;
                    }
                }
                mp.game.graphics.drawText(text, [355.07, 6500.76, 27.53 + 0.80], {
                    font: 4,
                    color: [255, 255, 255, 255],
                    scale: [size, size],
                    outline: true
                });
            }
        }

        if (TotalAnimals != null) {
            TotalAnimals.forEach(function (animal, index) {
                let target_pos = animal.getCoords(true);
                let dist = mp.game.system.vdist2(local_pos.x, local_pos.y, local_pos.z, target_pos.x, target_pos.y, target_pos.z);
                if (dist <= 60) {

                    let c_dist = 1 / 60 * dist
                    let size = lerp(0.3, 0.06, c_dist)
                    if (size > 0.35) {
                        size = 0.35;
                    } else if (size < 0.06) {
                        size = 0.06;
                    }

                    let OutputStatus = Math.floor(animal.AnimalOutput - getTimestampFromServer());

                    let text = "";
                    if (animal.Starved) {
                        // Pig
                        if (animal.model == 2971380566) {
                            text = "~r~Schwein (tot)"
                            if (dist < 2) {
                                text = text + "\n~w~'E' zum Entfernen"
                                if (TriggerDist > dist) {
                                    TriggerDist = dist;
                                    TriggerAction = "remove";
                                    TriggerArgument = "pig";
                                    TriggerIndex = animal.TriggerIndex;
                                }
                            }
                        }
                        // Cow
                        if (animal.model == 4244282910) {
                            text = "~r~Kuh (tot)"
                            if (dist < 2) {
                                text = text + "\n~w~'E' zum Entfernen"
                                if (TriggerDist > dist) {
                                    TriggerDist = dist;
                                    TriggerAction = "remove";
                                    TriggerArgument = "cow";
                                    TriggerIndex = animal.TriggerIndex;
                                }
                            }
                        }
                        // Hen
                        if (animal.model == 1794449327) {
                            text = "~r~Huhn (tot)"
                            if (dist < 2) {
                                text = text + "\n~w~'E' zum Entfernen"
                                if (TriggerDist > dist) {
                                    TriggerDist = dist;
                                    TriggerAction = "remove";
                                    TriggerArgument = "hen";
                                    TriggerIndex = animal.TriggerIndex;
                                }
                            }
                        }
                    } else {
                        // Pig
                        if (animal.model == 2971380566) {
                            text = "~g~Schwein"
                            if (OutputStatus < 0 && dist < 2) {
                                text = text + "\n~w~'E' zum Schlachten"
                                if (TriggerDist > dist) {
                                    TriggerDist = dist;
                                    TriggerAction = "collect";
                                    TriggerArgument = "pig";
                                    TriggerIndex = animal.TriggerIndex;
                                }
                            }
                        }
                        // Cow
                        if (animal.model == 4244282910) {
                            text = "~g~Kuh"
                            if (OutputStatus < 0 && dist < 2) {
                                text = text + "\n~w~'E' zum Melken"
                                if (TriggerDist > dist) {
                                    TriggerDist = dist;
                                    TriggerAction = "collect";
                                    TriggerArgument = "cow";
                                    TriggerIndex = animal.TriggerIndex;
                                }
                            }
                        }
                        // Hen
                        if (animal.model == 1794449327) {
                            text = "~g~Huhn"
                            if (OutputStatus < 0 && dist < 2) {
                                text = text + "\n~w~'E' zum Ei aufsammeln"
                                if (TriggerDist > dist) {
                                    TriggerDist = dist;
                                    TriggerAction = "collect";
                                    TriggerArgument = "hen";
                                    TriggerIndex = animal.TriggerIndex;
                                }
                            }
                        }
                    }

                    mp.game.graphics.drawText(text, [target_pos.x, target_pos.y, target_pos.z + 0.45], {
                        font: 4,
                        color: [255, 255, 255, 255],
                        scale: [size, size],
                        outline: true
                    });
                }
            })
        }

        if ((getTimestampFromServer() - farmerActionCoolDown) > 2) {
            if (mp.game.controls.isDisabledControlPressed(2, 38) && mp.players.local.isInAnyVehicle(false) == false) {
                if (TriggerDist < 4 && mp.gui.cursor.visible == false) {
                    farmerActionCoolDown = getTimestampFromServer();
                    CommunicationManager.TriggerServer("OnClientRequestFarmerCollect", TriggerAction, TriggerArgument, TriggerIndex)
                }
            }
        }
        ;

        farm_positions.forEach(function (spot) {
            let bought = doesOwnPlot(spot.field_name);
            if (bought == true) {
                let plot_name = spot.field_name;
                spot.positions.forEach(function (field) {
                    let id = field.id;
                    let pos = new mp.Vector3(field.pos.x, field.pos.y, field.pos.z)
                    if (pos.dist(mp.players.local.position) < 5) {
                        let ground = pos.ground();
                        let color = {
                            r: 0,
                            g: 0,
                            b: 0,
                            a: 60
                        };
                        if (bought == false) {
                            color = {
                                r: 255,
                                g: 255,
                                b: 255,
                                a: 50
                            };
                            if (pos.dist(mp.players.local.position) < 3) {
                                mp.game.graphics.drawText("~r~Feld (ID:" + plot_name + "-" + field.id + ")\n~w~Nicht Nutzbar", [ground.x, ground.y, ground.z + 0.35], {
                                    font: 4,
                                    color: [255, 255, 255, 255],
                                    scale: [0.3, 0.3],
                                    outline: true
                                });
                            }
                        } else {
                            let plant = getCropById(plot_name, id);
                            if (plant && (plant.type != "none")) {
                                // Stuff Planted
                                let dur = growTimes[plant.type];
                                let rem = 1 - (1 / dur * (getTimestampFromServer() - plant.plant_time));
                                let planted = {
                                    name: convertNameTypes[plant.type],
                                    plant_time: Math.floor(100 / dur * (getTimestampFromServer() - plant.plant_time)),
                                    remaining: msToTime((dur * rem) * 1000),
                                    overaged: false
                                }
                                if (planted.plant_time > 100) {
                                    if (getTimestampFromServer() >= plant.plant_time + dur + 86400) {
                                        planted.overaged = true;
                                    }
                                    planted.plant_time = 100;
                                }
                                if (planted.plant_time < 0) {
                                    planted.plant_time = 0;
                                }

                                if (planted.plant_time >= 95) {
                                    color = {
                                        r: 0,
                                        g: 136,
                                        b: 0,
                                        a: 60
                                    };
                                } else {
                                    color = {
                                        r: 0,
                                        g: 50,
                                        b: 0,
                                        a: 60
                                    };
                                }
                                if (planted.overaged == true) {
                                    color = {
                                        r: 255,
                                        g: 50,
                                        b: 50,
                                        a: 60
                                    };
                                }
                                if (ActuallSeedType == "mulch") {
                                    color = {
                                        r: 69,
                                        g: 138,
                                        b: 249,
                                        a: 80
                                    };
                                }
                                if (pos.dist(mp.players.local.position) < 3) {
                                    let a_str = "";
                                    let b_str = "";

                                    if (planted.plant_time < 100) {
                                        a_str = planted.remaining + "\n"
                                    }
                                    let d = pos.dist(mp.players.local.position);
                                    if (planted.overaged == true) {
                                        a_str = "Verdorben\n";
                                    } else {
                                        b_str = " - " + planted.plant_time + "%";
                                    }
                                    if (ActuallSeedType == "mulch" && planted.overaged == false && planted.plant_time < 95) {
                                        //mp.game.graphics.drawText("~g~Feld (ID:" + plot_name + "-" + field.id + ")\n~w~" + planted.name + "" + b_str + "\n" + a_str + (((planted.plant_time < 95) && (d < 2)) ? "'E' zum Düngen" : ""), [ground.x, ground.y, ground.z + 0.35], {
                                        mp.game.graphics.drawText("~g~Feld (ID:" + plot_name + ")\n~w~" + planted.name + "" + b_str + "\n" + a_str + (((planted.plant_time < 95) && (d < 2)) ? "'E' zum Düngen" : ""), [ground.x, ground.y, ground.z + 0.35], {
                                            font: 4,
                                            color: [255, 255, 255, 255],
                                            scale: [0.3, 0.3],
                                            outline: true
                                        });
                                    } else {
                                        //mp.game.graphics.drawText("~g~Feld (ID:" + plot_name + "-" + field.id + ")\n~w~" + planted.name + "" + b_str + "\n" + a_str + (((planted.plant_time >= 95) && (d < 2)) ? "'E' zum Ernten" : ""), [ground.x, ground.y, ground.z + 0.35], {
                                        mp.game.graphics.drawText("~g~Feld (ID:" + plot_name + ")\n~w~" + planted.name + "" + b_str + "\n" + a_str + (((planted.plant_time >= 95) && (d < 2)) ? "'E' zum Ernten" : ""), [ground.x, ground.y, ground.z + 0.35], {
                                            font: 4,
                                            color: [255, 255, 255, 255],
                                            scale: [0.3, 0.3],
                                            outline: true
                                        });
                                    }
                                }
                            } else {
                                if (ActuallSeedType == "mulch") {
                                    // Dünger ausgewählt
                                    color = {
                                        r: 255,
                                        g: 255,
                                        b: 255,
                                        a: 80
                                    };
                                } else {
                                    // Nothing Planted
                                    color = {
                                        r: 20,
                                        g: 90,
                                        b: 20,
                                        a: 80
                                    };

                                    let WrongPlot = false;
                                    if (plot_name >= 1 && plot_name <= 6 && ActuallSeedType == "wheat") {
                                        WrongPlot = true;
                                    }
                                    if (plot_name >= 7 && plot_name <= 8 && ActuallSeedType != "wheat") {
                                        WrongPlot = true;
                                    }

                                    if (pos.dist(mp.players.local.position) < 2) {
                                        if (WrongPlot == false) {
                                            mp.game.graphics.drawText("~g~Feld (ID:" + plot_name + ")\n~w~'E' Drücken um etwas anzubauen", [ground.x, ground.y, ground.z + 0.35], {
                                                font: 4,
                                                color: [255, 255, 255, 255],
                                                scale: [0.3, 0.3],
                                                outline: true
                                            });
                                        } else {
                                            mp.game.graphics.drawText("~w~Das ausgewählte Saatgut ist auf\ndiesem Feld nicht nutzbar!", [ground.x, ground.y, ground.z + 0.35], {
                                                font: 4,
                                                color: [255, 255, 255, 255],
                                                scale: [0.3, 0.3],
                                                outline: true
                                            });
                                            color = {
                                                r: 255,
                                                g: 50,
                                                b: 50,
                                                a: 60
                                            };
                                        }
                                    }
                                }
                            }
                        }
                        mp.game.graphics.drawMarker(28, ground.x, ground.y, ground.z - 0.35, 0, 0, 0, 0, 0, 0, 0.5, 0.5, 0.5, color.r, color.g, color.b, color.a, false, false, 2, false, null, null, false);
                    }
                })
            }
        })
        if (farmer_CanDoAction == true && mp.gui.cursor.visible == false) {
            if ((getTimestampFromServer() - farmerActionCoolDown) >= 1) {
                if (mp.game.controls.isDisabledControlPressed(2, 38) || mp.players.local.isInAnyVehicle(false) == true) {
                    
                    let max_dist = 1.3;
                    if(mp.players.local.isInAnyVehicle(false) == true){
                        max_dist = 2.2;
                    }
                    
                    let spot = getNearestPlantSpot(max_dist);
                    if (spot) {
                        let bought = doesOwnPlot(spot.field_name);
                        if (bought == true) {

                            let WrongPlot = false;
                            if (spot.field_name >= 1 && spot.field_name <= 6 && ActuallSeedType == "wheat") {
                                WrongPlot = true;
                            }
                            if (spot.field_name >= 7 && spot.field_name <= 8 && ActuallSeedType != "wheat") {
                                WrongPlot = true;
                            }
                            if (mp.players.local.isInAnyVehicle(false) && farmer_TractorAction == "harvest") {
                                WrongPlot = false;
                            }

                            if (mp.players.local.getIsTaskActive(167) || mp.players.local.getIsTaskActive(2) || mp.players.local.getIsTaskActive(402) || mp.players.local.getIsTaskActive(152)) {
                                return;
                            }

                            if (ActuallSeedType == "mulch" && mp.players.local.isInAnyVehicle(false) == false) {
                                if (isSpotFree(spot.field_name, spot.id) == false) {
                                    // Do Mulch Action;
                                    let plant = getSpotPlantData(spot.field_name, spot.id);
                                    let dur = growTimes[plant.type];
                                    let progress = Math.floor(100 / dur * (getTimestampFromServer() - plant.plant_time));
                                    if (progress < 100) {
                                        farmerActionCoolDown = getTimestampFromServer();
                                        farmer_CanDoAction = false;
                                        CommunicationManager.TriggerServer("OnClientRequestMulchPlant", spot.field_name, spot.id)
                                    } else {
                                        farmerActionCoolDown = getTimestampFromServer();
                                        farmer_CanDoAction = false;
                                        CommunicationManager.TriggerServer("OnClientRequestFarmerHarvest", spot.field_name, spot.id)
                                    }
                                }
                            } else {
                                if (isSpotFree(spot.field_name, spot.id) == true) {
                                    // Do Plant Action

                                    if (farmer_TractorAction != "plant" && mp.players.local.isInAnyVehicle(false)) {
                                        return;
                                    }

                                    if (WrongPlot == false) {
                                        if (mp.players.local.isInAnyVehicle(false)) {
                                            let veh = mp.players.local.vehicle;
                                            veh.setMaxSpeed(mp.game.vehicle.getVehicleModelMaxSpeed(veh.model) * SlowTruckSpeedFactor);
                                            farmerTruckInActionState = 7;
                                        }

                                        farmer_CanDoAction = false;
                                        farmerActionCoolDown = getTimestampFromServer();
                                        CommunicationManager.TriggerServer("OnClientRequestFarmerPlant", spot.field_name, spot.id)
                                    }
                                } else {

                                    if (farmer_TractorAction != "harvest" && mp.players.local.isInAnyVehicle(false)) {
                                        return;
                                    }

                                    // Do Harvest Action;
                                    let plant = getSpotPlantData(spot.field_name, spot.id);
                                    let dur = growTimes[plant.type];
                                    let progress = Math.floor(100 / dur * (getTimestampFromServer() - plant.plant_time));
                                    if (progress >= 95) {

                                        if (mp.players.local.isInAnyVehicle(false)) {
                                            let veh = mp.players.local.vehicle;
                                            veh.setMaxSpeed(mp.game.vehicle.getVehicleModelMaxSpeed(veh.model) * SlowTruckSpeedFactor);
                                            farmerTruckInActionState = 7;
                                        }

                                        farmerActionCoolDown = getTimestampFromServer();
                                        farmer_CanDoAction = false;
                                        CommunicationManager.TriggerServer("OnClientRequestFarmerHarvest", spot.field_name, spot.id)
                                    }
                                }
                            }
                        }
                    } else {
                        if (mp.players.local.isInAnyVehicle(false)) {
                            if (farmerTruckInActionState > 0) {
                                farmerTruckInActionState = farmerTruckInActionState - 1;
                                if (farmerTruckInActionState == 0) {
                                    let veh = mp.players.local.vehicle;
                                    veh.setMaxSpeed(mp.game.vehicle.getVehicleModelMaxSpeed(veh.model));
                                }
                            }
                        }
                    }
                }
            }
            ;
        }
    }
})

/**
 * Events that are called by the server
 */
CommunicationManager.addSafeServerEvent("openFarmerLobbyWindow", (hasFarm) => {
    if (Webwindow["FarmerLobby"] == null) {
        if (mp.gui.cursor.visible) {
            return;
        }
        Webwindow["FarmerLobby"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/farmer/lobby/lobby.html", true);
        let lastFarmHash = mp.storage.data.lastFarmHash;
        let lastFarmSecret = mp.storage.data.lastFarmSecret;
        Webwindow["FarmerLobby"].start('initFarmerLobbyWindow', hasFarm, lastFarmHash, lastFarmSecret);
    }
})

mp.events.add("updateFarmerLobbyWindow", (msg) => {
    switch (msg) {
        case "wrongcredentials":
            CreateNotify("~r~Diese Farm gibt es nicht oder das Passwort ist falsch!");
            break;
        case "full":
            CreateNotify("~r~Diese Farm ist voll!");
            break;
        case "successfully":
            if (Webwindow["FarmerLobby"] != null) {
                Webwindow["FarmerLobby"].call("closeWindow");
            }
            CreateNotify("~g~Du bist der Farm beigetreten!");
            break;
    }
})

/**
 * Events that are called by the browser
 */
CommunicationManager.AddWebBrowserEvent("closeFarmerLobbyWindow", (lastFarmHash, lastFarmSecret) => {
    mp.storage.data.lastFarmHash = lastFarmHash;
    mp.storage.data.lastFarmSecret = lastFarmSecret;

    if (Webwindow["FarmerLobby"] != null) {
        Webwindow["FarmerLobby"].destroy();
        Webwindow["FarmerLobby"] = null;
    }
}, "FarmerLobby");


CommunicationManager.AddWebBrowserEvent("startFarm", () => {
    if (Webwindow["FarmerLobby"] != null) {
        if (Webwindow["FarmerLobby"].isAtStartPosition == true) {
            CommunicationManager.TriggerServer("OnClientRequestStartFarm");
        }
    }
}, "FarmerLobby");

CommunicationManager.AddWebBrowserEvent("joinFarm", (hash, secret) => {
    if (Webwindow["FarmerLobby"] != null) {
        if (Webwindow["FarmerLobby"].isAtStartPosition == true) {
            CommunicationManager.TriggerServer("OnClientRequestJoinFarm", parseInt(hash, 10), secret);
        }
    }
}, "FarmerLobby");


/**
 * Functions
 */

let farmerQuestPositions;

/**
 * Events that are called by the server
 */
CommunicationManager.addSafeServerEvent("openFarmerManagementWindow", (dataJson, pricesJson, questPositionsJson, pInventory) => {
    if (mp.gui.cursor.visible) {
        return;
    }
    let data = JSON.parse(dataJson);
    let prices = JSON.parse(pricesJson);
    let questPositions = JSON.parse(questPositionsJson);
    farmerQuestPositions = questPositions;
    data.Inventory = JSON.parse(pInventory);
    data.MaxInventorySize = InventoryMaxSize;
    if (Webwindow["FarmerManagement"] == null) {
        Webwindow["FarmerManagement"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/farmer/management/management.html", true);
        Webwindow["FarmerManagement"].start('initFarmerManagementWindow', data, prices, loadInventoryWeights(), mp.players.local.name, LocalCharacterID);
    }
})

function loadInventoryWeights() {
    let weights = [];
    for (var key in lang_de.items) {
        if (key.indexOf("weight") > -1) {
            weights[Number(key.replace("weight.", ""))] = lang_de.items[key]
        }
    }
    return weights;
}

CommunicationManager.AddWebBrowserEvent("markFarmQuestPosition", (questID) => {
    if (Webwindow["FarmerManagement"].isAtStartPosition == false) {
        return;
    }
    let questPos = farmerQuestPositions[questID];
    // VioRageManager.setWayPoint(questPos);
    PositionManager.setPositionData("FarmQuest", "Farmer Quest", questPos, 8);
}, "FarmerManagement");

mp.events.add("updateFarmerManagementWindowStorage", (msg, storageJSON, pInventory) => {
    if (Webwindow["FarmerManagement"] != null) {
        let storage = JSON.parse(storageJSON);
        Webwindow["FarmerManagement"].call("updateStorage", storage);
        Webwindow["FarmerManagement"].call("updateInventory", JSON.parse(pInventory));
    }
})

mp.events.add("updateFarmerManagementWindow", (msg, settingsJSON, pInventory) => {
    if (settingsJSON != null) {
        if (Webwindow["FarmerManagement"] != null) {
            let settings = JSON.parse(settingsJSON);
            Webwindow["FarmerManagement"].call("updateSettings", settings);
            Webwindow["FarmerManagement"].call("updateInventory", JSON.parse(pInventory));
        }
    }
    switch (msg) {
        case "secret_success":
            CreateNotify("~g~Du hast die PIN geändert!");
            break;
        case "secret_error":
            CreateNotify("~r~Irgendwas ist schief gelaufen!");
            break;
        case "buyfield_success":
            CreateNotify("~g~Du hast deine Farm erweitert!");
            break;
        case "buyfield_error":
            CreateNotify("~r~Beim Erweitern deiner Farm ist ein Fehler aufgetreten!");
            break;
        case "kick_success":
            CreateNotify("~g~Du hast einen Spieler gekickt!");
            break;
        case "kick_error":
            CreateNotify("~r~Beim Kicken ist ein Fehler aufgetreten!");
            break;
        case "buyseed_success":
            CreateNotify("~g~Du hast deine Farm um ein Gemüse erweitert!");
            break;
        case "buyseed_error":
            CreateNotify("~r~Beim Erweitern deiner Farm ist ein Fehler aufgetreten!");
            break;
        case "upgradestorage_success":
            CreateNotify("~g~Du hast dein Lager erweitert!");
            break;
        case "upgradestorage_error":
            CreateNotify("~r~Beim Erweitern des Lagers ist ein Fehler aufgetreten!");
            break;
    }
})

/**
 * Events that are called by the browser
 */
CommunicationManager.AddWebBrowserEvent("sendFarmNotification", (msg) => {
    CreateNotify(msg);
}, "FarmerManagement");

CommunicationManager.AddWebBrowserEvent("closeFarmerManagementWindow", () => {
    Webwindow["FarmerManagement"].destroy();
    Webwindow["FarmerManagement"] = null;
}, "FarmerManagement");

CommunicationManager.AddWebBrowserEvent("exitFarm", () => {
    if (Webwindow["FarmerManagement"].isAtStartPosition == true) {
        CommunicationManager.TriggerServer("OnClientRequestExitFarm");
    }
    Webwindow["FarmerManagement"].destroy();
    Webwindow["FarmerManagement"] = null;
}, "FarmerManagement");

CommunicationManager.AddWebBrowserEvent("OnClientRequestUpdateFarm", (type, arg1, arg2, arg3, arg4) => {
    if (Webwindow["FarmerManagement"].isAtStartPosition == true) {
        if (arg1 == null) {
            arg1 = "";
        }
        if (arg2 == null) {
            arg2 = "";
        }
        if (arg3 == null) {
            arg3 = "";
        }
        if (arg4 == null) {
            arg4 = "";
        }
        if (type == "saveFarmSecret") {
            if (arg1.length > 10 && arg1 != "privat") {
                CreateNotify("~r~Deine PIN darf maximal 10 Zeichen lang sein und nur aus Zahlen bestehen!");
                return;
            }
        }

        if (type == "setHelpQuest") {
            let totalSize = 0;
            const reward = JSON.parse(arg3);
            Object.keys(reward).forEach(itemId => {
                const amount = reward[itemId];
                totalSize += Number(lang_de.items["weight." + itemId]) * amount;
            });
            if (totalSize > 200) {
                CreateNotify("~r~So viel kann niemand tragen, die Belohnung muss niedriger sein.");
                return;
            }
        }

        CommunicationManager.TriggerServer("OnClientRequestUpdateFarm", type, arg1, arg2, arg3, arg4);
    }
}, "FarmerManagement");

CommunicationManager.AddWebBrowserEvent("OnClientRequestHelpQuestAction", (type, arg1) => {
    if (Webwindow["FarmerManagement"].isAtStartPosition == true) {
        if (arg1 == null) {
            arg1 = "";
        }
        CommunicationManager.TriggerServer("OnClientRequestHelpQuestAction", type, arg1);
    }
}, "FarmerManagement");


CommunicationManager.AddWebBrowserEvent("addFarmItem", (itemID, amount) => {
    if (Webwindow["FarmerManagement"].isAtStartPosition == true) {
        CommunicationManager.TriggerServer("OnClientRequestUpdateStorage", "addItemToStorage", itemID, amount);
    }
}, "FarmerManagement");

CommunicationManager.AddWebBrowserEvent("removeFarmItem", (itemID, amount) => {
    if (Webwindow["FarmerManagement"].isAtStartPosition == true) {
        CommunicationManager.TriggerServer("OnClientRequestUpdateStorage", "removeItemFromStorage", itemID, amount);
    }
}, "FarmerManagement");

/**
 * Functions
 */

/**
 * Events that are called by the server
 */
mp.events.add("openFarmerFoodBowlWindow", (dataJson, pinventory) => {
    let data = JSON.parse(dataJson);
    let serverTimeOffset = getTimestampFromServer() - Date.now() / 1000
    if (Webwindow["FarmerManger"] == null) {
        Webwindow["FarmerManger"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/farmer/manger/manger.html", true);
        Webwindow["FarmerManger"].start('initFarmerMangerWindow', data, JSON.parse(pinventory), serverTimeOffset);
    }
});

CommunicationManager.AddWebBrowserEvent("closeFarmerMangerWindow", () => {
    if (Webwindow["FarmerManger"] != null) {
        Webwindow["FarmerManger"].destroy();
        Webwindow["FarmerManger"] = null;
    }
}, "FarmerManger");

mp.events.add("updateFarmerFoodBowlWindow", (time, pinventory) => {
    if (Webwindow["FarmerManger"] != null) {
        Webwindow["FarmerManger"].call("update", time, JSON.parse(pinventory));
    }
});


CommunicationManager.AddWebBrowserEvent("addFarmerMangerItem", (bowlType, itemID, amount) => {
    if (Webwindow["FarmerManger"].isAtStartPosition == true) {
        CommunicationManager.TriggerServer("OnClientRequestInsertFoodBowlItem", bowlType, itemID, amount);
    }
}, "FarmerManger");

/**
 * Events that are called by the server
 */
CommunicationManager.addSafeServerEvent("openFarmerQuestWindow", (id, dataJson, pInventory) => {
    let data = JSON.parse(dataJson);
    data.QuestId = id;
    data.Inventory = JSON.parse(pInventory);
    if (Webwindow["FarmerQuest"] == null) {
        Webwindow["FarmerQuest"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/farmer/quest/quest.html", true);
        Webwindow["FarmerQuest"].start('initFarmerQuestWindow', data);
    }
});

/**
 * Events that are called by the browser
 */
CommunicationManager.AddWebBrowserEvent("closeFarmerQuestWindow", () => {
    Webwindow["FarmerQuest"].destroy();
    Webwindow["FarmerQuest"] = null;
}, "FarmerQuest");

CommunicationManager.AddWebBrowserEvent("acceptFarmerQuestWindow", (id) => {
    if (Webwindow["FarmerQuest"].isAtStartPosition == true) {
        CommunicationManager.TriggerServer("OnClientRequestAcceptFarmQuest", id);
    }
}, "FarmerQuest");

/**
 * Functions
 */

async function AttachTrailerByVehicle(truck, trailer, remoteId) {

    let reAttachInterval = setInterval(() => {
        try{
            if (mp.vehicles.exists(truck)) {
                if (truck.getVariable("TRAILER") != null) {

                    let need_attach = true;
                    let is_local_truck = false;

                    if (truck.handle === 0) {
                        //VioRageManager.SendChatMessage("ERROR -> truck.handle === 0 | INFO AN FORCES");
                        clearInterval(reAttachInterval);
                        return;
                    }
                    if (trailer.handle === 0) {
                        //VioRageManager.SendChatMessage("ERROR -> trailer.handle === 0 | INFO AN FORCES");
                        clearInterval(reAttachInterval);
                        return;
                    }

                    if (mp.players.local.vehicle != null) {
                        if (truck == mp.players.local.vehicle) {
                            if (VioRageManager.PlayerIsDriver(mp.players.local.handle, truck)) {
                                is_local_truck = true;
                                if (truck.isAttachedToTrailer()) {
                                    if (VioSyncTrailers[remoteId] != null) {
                                        let veh1Heading = VioSyncTrailers[remoteId].getHeading();
                                        let veh2Heading = truck.getHeading();
                                        let winkel = Math.abs(veh1Heading - veh2Heading) < (360 - Math.abs(veh1Heading - veh2Heading)) ? Math.abs(veh1Heading - veh2Heading) : (360 - Math.abs(veh1Heading - veh2Heading));
                                        if(winkel >= 91){
                                            truck.detachFromTrailer();
                                        }
                                    }
                                    need_attach = false;
                                } else {
                                    CommunicationManager.TriggerServer("OnClientLostTrailer");
                                    clearInterval(reAttachInterval);
                                    return;
                                }
                            }
                        }
                    }

                    if (mp.vehicles.exists(trailer)) {

                        if(need_attach){
                            truck.attachToTrailer(trailer.handle, 1000);
                        }

                        if (is_local_truck == false) {

                            let trailer_stream_distance = 25000;
                            let truck_pos = truck.getCoords(true);
                            if(truck_pos != null){
                                let dist2 = mp.game.system.vdist2(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, truck_pos.x, truck_pos.y, truck_pos.z);
                                let alpha = 255;

                                if(dist2 > trailer_stream_distance){
                                    let c_dist = 1 / 5000 * (dist2 - trailer_stream_distance);
                                    alpha = lerp(255, 0, c_dist)
                                    if (alpha > 255) {
                                        alpha = 255;
                                    } else if (alpha < 0) {
                                        alpha = 0;
                                    }
                                }

                                trailer.setAlpha(alpha);
                                trailer.setInvincible(true); //godmode
                                trailer.setCanBeVisiblyDamaged(false); //no damages
                                trailer.setDeformationFixed(); //fixed deformation
                                trailer.setDirtLevel(0); //clear
                                trailer.setCanBreak(false); //can break
                            }
                        }else{
                            trailer.setCollision(true, true);
                            trailer.setCanBreak(true); //can break
                            trailer.setInvincible(false);
                        }

                        trailer.setNoCollision(truck.handle, false);
                        mp.game.invoke('0x95CF53B3D687F9FA', trailer.handle); // setTrailerLegsRaised
                        trailer.setDisablePetrolTankDamage(true); //disable fueltank damage
                        trailer.setDisablePetrolTankFires(true); //disable fire fuel

                    } else {
                        clearInterval(reAttachInterval);
                    }
                }else{
                    clearInterval(reAttachInterval);
                }
            } else {
                clearInterval(reAttachInterval);
            }
        }
        catch (e) {
            VioRageManager.ErrorLog(e);
        }
        
    }, 1000);
};

function CreateTrailerForVehicle(truck) {

    try{
        if (mp.vehicles.exists(truck) && truck.handle !== 0 ) {
            let remoteId = truck.remoteId;
            if (VioSyncTrailers[remoteId] != null) {
                VioRageManager.DebugLog(`[CreateTrailerForVehicle] Trailer RemoteId=${remoteId} reattachToTrailer.`);
                truck.attachToTrailer(VioSyncTrailers[remoteId].handle, 1000);
                return;
            }

            VioRageManager.DebugLog(`[CreateTrailerForVehicle]`);


            if (truck.getVariable("TRAILER") != null) {
                let server_trailer = JSON.parse(truck.getVariable("TRAILER"));

                VioRageManager.DebugLog(`[CreateTrailerForVehicle] Hash=${server_trailer.Hash}`);

                let trailer = mp.vehicles.new(mp.game.joaat(server_trailer.Hash), truck.position, {
                    heading: server_trailer.Heading,
                    numberPlate: "Vio-V"
                });

                mp.game.invoke('0x7141766F91D15BEA', trailer.handle, parseInt(server_trailer.Color1R), parseInt(server_trailer.Color1G), parseInt(server_trailer.Color1B)); // SET_VEHICLE_CUSTOM_PRIMARY_COLOUR
                mp.game.invoke('0x36CED73BFED89754', trailer.handle, parseInt(server_trailer.Color2R), parseInt(server_trailer.Color2G), parseInt(server_trailer.Color2B)); // SET_VEHICLE_CUSTOM_Secondary_COLOUR

                mp.game.invoke('0x95CF53B3D687F9FA', trailer.handle); // setTrailerLegsRaised

                mp.game.invoke('0x60BF608F1B8CD1B6', trailer.handle, parseInt(server_trailer.Livery)); // setVehicleLivery

                VioSyncTrailers[remoteId] = trailer;

                VioRageManager.DebugLog(`[CreateTrailerForVehicle] VioSyncTrailers RemoteId=${remoteId}`);

                IsRageMpVehicleReady(trailer, 2500, function(isready) {
                    if (trailer != null && isready && truck.handle !== 0) {
                        truck.attachToTrailer(trailer.handle, 1000);

                        // TEST //
                        trailer.setHandling("fMass", 10000.00);

                        trailer.setHandling("fAttachLimitPitch", 38.00);
                        trailer.setHandling("fAttachLimitRoll", 15.00);
                        trailer.setHandling("fAttachLimitYaw", -1.00);
                        trailer.setHandling("fUprightSpringConstant", -6.000000); // - weiter reduzoeren
                        trailer.setHandling("fUprightDampingConstant", 5.000000); // größer scheint besser

                        trailer.setHandling("fPosConstraintMassRatio", 3.000000); // größer scheint besser

                        // TEST //

                        AttachTrailerByVehicle(truck, trailer, remoteId);

                        VioRageManager.DebugLog(`[CreateTrailerForVehicle] AttachTrailerByVehicle RemoteId=${remoteId}`);
                    } else {
                        if (VioSyncTrailers[remoteId] != null) {
                            VioRageManager.DebugLog(`[CreateTrailerForVehicle] Trailer RemoteId=${remoteId} destroyed.`);
                            VioSyncTrailers[remoteId].destroy();
                            VioSyncTrailers[remoteId] = null;
                        }
                    }
                });
            }
        }
    }
    catch (e) {
        VioRageManager.ErrorLog(e);
    }
};

CommunicationManager.AddServerEvent("OnClientGetTrailerPositionForNewJobTarget", (direction) => {
    if (mp.players.local.vehicle) {
        let truck = mp.players.local.vehicle;
        if (VioSyncTrailers[truck.remoteId] != null) {
            let pos = VioSyncTrailers[truck.remoteId].position;
            let rot = VioSyncTrailers[truck.remoteId].getRotation(0);
            CommunicationManager.TriggerServer("OnClientSetTrailerPositionForNewJobTarget", direction, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z);
        }
    }
});

mp.events.addDataHandler("TRAILER", (entity, value) => {
    if (entity.type === "vehicle") {
        try{
            if (entity.handle !== 0) {
                if(mp.vehicles.exists(entity)){
                    if (entity.getVariable("TRAILER") != null) {
                        CreateTrailerForVehicle(entity);
                    } else {
                        const remoteId = entity.remoteId;
                        if (VioSyncTrailers[remoteId] != null) {
                            VioRageManager.DebugLog(`[DataKey=TRAILER] Trailer RemoteId=${remoteId} destroyed.`);
                            
                            if(mp.vehicles.exists(VioSyncTrailers[remoteId]) == false){
                                VioRageManager.DebugLog(`[VioSyncTrailers[remoteId].destroy()] Error #1`);   
                            }
                            
                            VioSyncTrailers[remoteId].destroy();
                            VioSyncTrailers[remoteId] = null;
                        }
                    }
                }
            }
        }
        catch (e) {
            VioRageManager.ErrorLog(e);
        }
    }
});

mp.events.add('entityStreamIn', (entity) => {
    if (entity.type == "vehicle") {
        try{
            if(mp.vehicles.exists(entity)){
                if (entity.getVariable("TRAILER") != null) {
                    CreateTrailerForVehicle(entity);
                }
            }
        }
        catch (e) {
            VioRageManager.ErrorLog(e);
        }
    }
});

mp.events.add('entityStreamOut', (entity) => {
    if (entity.type == "vehicle") {
        try{
            if(mp.vehicles.exists(entity)){
                if (VioSyncTrailers[entity.remoteId] != null) {
                    const remoteId = entity.remoteId;
                    VioRageManager.DebugLog(`[StreamOut] Trailer RemoteId=${remoteId} destroyed.`);
                    
                    if(mp.vehicles.exists(VioSyncTrailers[remoteId]) == false){
                        VioRageManager.DebugLog(`[VioSyncTrailers[remoteId].destroy()] Error #2`);   
                    }
                    
                    VioSyncTrailers[remoteId].destroy();
                    VioSyncTrailers[remoteId] = null;
                }
            }
        }
        catch (e) {
            VioRageManager.ErrorLog(e);
        }
    }
});

let TruckerJobMissionTrailer = null;

mp.events.add("render", () => {
    if(PlayerTruckerJobMission != null){
        if(PlayerTruckerJobMission.Status != "-"){
            
            let FinalPos;
            let FinalRot;

            if(PlayerTruckerJobMission.Status == "need_pickup"){
                FinalPos = PlayerTruckerJobMission["StartPosition"];
                FinalRot = PlayerTruckerJobMission["StartRotation"];
            }else{
                FinalPos = PlayerTruckerJobMission["EndPosition"];
                FinalRot = PlayerTruckerJobMission["EndRotation"];
            }
            
            mp.game.graphics.drawMarker(39, FinalPos.x, FinalPos.y, FinalPos.z + 3.5, 0, 0, 0, 0, 0, 0, 1.5, 1.5, 1.5, 200, 70, 63, 150, false, false, 2, false, null, null, false);
            
            if(TruckerJobMissionTrailer == null){
                let dist = mp.game.system.vdist2(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, FinalPos.x, FinalPos.y, FinalPos.z);
                if (dist < 100000) {
                    TruckerJobMissionTrailer = mp.vehicles.new(mp.game.joaat(PlayerTruckerJobMission.Trailer), new mp.Vector3(FinalPos.x, FinalPos.y, FinalPos.z + 0.1), {
                        heading: FinalRot.z,
                        numberPlate: "Vio-V"
                    });

                    IsRageMpVehicleReady(TruckerJobMissionTrailer, 2500, function(isready) {
                        if (TruckerJobMissionTrailer != null && isready) {
                            TruckerJobMissionTrailer.setCanBeVisiblyDamaged(false); //no damages
                            TruckerJobMissionTrailer.setCanBreak(false); //can break
                            TruckerJobMissionTrailer.setDeformationFixed(); //fixed deformation
                            TruckerJobMissionTrailer.setDirtLevel(0); //clear
                            TruckerJobMissionTrailer.setDisablePetrolTankDamage(true); //disable fueltank damage
                            TruckerJobMissionTrailer.setDisablePetrolTankFires(true); //disable fire fuel
                            TruckerJobMissionTrailer.setInvincible(true); //godmode
                            VioRageManager.FreezePosition(TruckerJobMissionTrailer, true)
                            //TruckerJobMissionTrailer.setProofs(true, true, true, true, true, true, true, true); // proof gegen alles!

                            if(PlayerTruckerJobMission.Status == "need_pickup"){
                                TruckerJobMissionTrailer.setAlpha(255); // transparent
                            }else{
                                TruckerJobMissionTrailer.setAlpha(150); // transparent
                                TruckerJobMissionTrailer.setCollision(false, false);
                            }
                            
                            TruckerJobMissionTrailer.position = new mp.Vector3(FinalPos.x, FinalPos.y, FinalPos.z + 0.10);
                            TruckerJobMissionTrailer.setRotation(FinalRot.x + 1.5, FinalRot.y, FinalRot.z, 0, false);
                        }else{
                            if (TruckerJobMissionTrailer != null) {
                                TruckerJobMissionTrailer.destroy();
                                TruckerJobMissionTrailer = null;
                            }
                        }
                    });
                }
            }else{
                
                if (TruckerJobMissionTrailer != null) {
                    mp.vehicles.forEachInStreamRange(function (other_truck) {
                        if(TruckerJobMissionTrailer.handle !== 0 && other_truck.handle !== 0){
                            if (mp.vehicles.exists(other_truck) && mp.vehicles.exists(TruckerJobMissionTrailer)) {
                                if(mp.players.local.vehicle != other_truck){
                                    if(VioSyncTrailers[other_truck.remoteId] == null){
                                        other_truck.detachFromTrailer();
                                    }
                                    mp.game.invoke("0xA53ED5520C07654A", TruckerJobMissionTrailer.handle, other_truck.handle, true); // SET_ENTITY_NO_COLLISION_ENTITY
                                    mp.game.invoke("0xA53ED5520C07654A", other_truck.handle, TruckerJobMissionTrailer.handle, true); // SET_ENTITY_NO_COLLISION_ENTITY
                                }
                            }
                        }
                    })
                }
                
                let dist = mp.game.system.vdist2(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, FinalPos.x, FinalPos.y, FinalPos.z);
                if (dist > 125000) {
                    if (TruckerJobMissionTrailer != null) {
                        TruckerJobMissionTrailer.destroy();
                        TruckerJobMissionTrailer = null;
                    }
                }else{
                    if(mp.players.local.isInAnyVehicle(false)){
                        let truck = mp.players.local.vehicle;
                        let remoteId = truck.remoteId
                        
                        if(PlayerTruckerJobMission.Status == "need_pickup"){
                            if(VioRageManager.IsTrailerAttachedToTruck(TruckerJobMissionTrailer, truck)){
                                PlayerTruckerJobMission.Status = "-";
                                VioSyncTrailers[remoteId] = TruckerJobMissionTrailer;
                                VioRageManager.FreezePosition(TruckerJobMissionTrailer, false);
                                TruckerJobMissionTrailer.setFixed();
                                AttachTrailerByVehicle(truck, TruckerJobMissionTrailer, remoteId);
                                TruckerJobMissionTrailer = null;
                                CommunicationManager.TriggerServer("OnClientRequestPickUpTruckerMission");
                            }else{
                                VioRageManager.FreezePosition(TruckerJobMissionTrailer, true)
                                TruckerJobMissionTrailer.position = new mp.Vector3(FinalPos.x, FinalPos.y, FinalPos.z + 0.10);
                                TruckerJobMissionTrailer.setRotation(FinalRot.x + 1.5, FinalRot.y, FinalRot.z, 0, false);
                            }
                        }
                        if(PlayerTruckerJobMission.Status == "need_delivery" && VioSyncTrailers[remoteId] != null){
                            
                            VioRageManager.FreezePosition(TruckerJobMissionTrailer, true);
                            TruckerJobMissionTrailer.position = new mp.Vector3(FinalPos.x, FinalPos.y, FinalPos.z + 0.10);
                            TruckerJobMissionTrailer.setRotation(FinalRot.x + 1.5, FinalRot.y, FinalRot.z, 0, false);
                            
                            TruckerJobMissionTrailer.setCollision(false, false);
                            
                            var speed = parseInt(truck.getSpeed() * 3.6);
                            if(speed <= 10){
                                let delivery_dist = mp.game.system.vdist(VioSyncTrailers[remoteId].position.x, VioSyncTrailers[remoteId].position.y, VioSyncTrailers[remoteId].position.z, FinalPos.x, FinalPos.y, FinalPos.z);
                                if (delivery_dist <= 1.2) {
                                    let veh1Heading = VioSyncTrailers[remoteId].getHeading();
                                    let veh2Heading = FinalRot.z;
                                    let smallerDifference = Math.abs(veh1Heading - veh2Heading) < (360 - Math.abs(veh1Heading - veh2Heading)) ? Math.abs(veh1Heading - veh2Heading) : (360 - Math.abs(veh1Heading - veh2Heading));
                                    if (smallerDifference <= 5) {
                                         PlayerTruckerJobMission.Status = "-";
                                         if(TruckerJobMissionTrailer != null){
                                             TruckerJobMissionTrailer.destroy();
                                             TruckerJobMissionTrailer = null;
                                             let health = VioSyncTrailers[remoteId].getHealth();
                                             CommunicationManager.TriggerServer("OnClientRequestFinishTruckerMission", health);
                                         }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
})

CommunicationManager.AddServerEvent("StartTruckerMission", (mission, player_stats, total_job, job_exp) => {
    
    if (TruckerJobMissionTrailer != null) {
        TruckerJobMissionTrailer.destroy();
        TruckerJobMissionTrailer = null;
    }
    
    mission = JSON.parse(mission);
    
    PlayerTruckerJobMission = mission;

    let s_zoneName = getLocationZoneName(mission["StartPosition"].x, mission["StartPosition"].y, mission["StartPosition"].z);
    mission["StartZoneName"] = s_zoneName;

    let e_zoneName = getLocationZoneName(mission["EndPosition"].x, mission["EndPosition"].y, mission["EndPosition"].z);
    mission["EndZoneName"] = e_zoneName;

    mission["ServerTimestamp"] = getTimestampFromServer();
    
    let trailer_health = 1000;
    if(mp.players.local.vehicle){
        let truck = mp.players.local.vehicle;
        if(VioSyncTrailers[truck.remoteId] != null){
            trailer_health = VioSyncTrailers[truck.remoteId].getHealth()
        }
    }
    
    if (Webwindow["TruckerMissionOverview"] != null) {
        Webwindow["TruckerMissionOverview"].call("SentOpenMission", JSON.stringify(mission), player_stats, total_job, job_exp, trailer_health);
    }
});

CommunicationManager.AddServerEvent("ShowTruckerMissionOverview", (missions, player_stats, total_job, job_exp) => {

    missions = JSON.parse(missions);

    for (var key in missions) {
        let s_zoneName = getLocationZoneName(missions[key]["StartPosition"].x, missions[key]["StartPosition"].y, missions[key]["StartPosition"].z);
        missions[key]["StartZoneName"] = s_zoneName;

        let e_zoneName = getLocationZoneName(missions[key]["EndPosition"].x, missions[key]["EndPosition"].y, missions[key]["EndPosition"].z);
        missions[key]["EndZoneName"] = e_zoneName;
    }

    if (Webwindow["TruckerMissionOverview"] == null) {
        Webwindow["TruckerMissionOverview"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/trucker_mission_overview/trucker_mission_overview.html", true);
        Webwindow["TruckerMissionOverview"].start("SentOpenMissions", missions, player_stats, total_job, job_exp);
    }else{
        Webwindow["TruckerMissionOverview"].call("SentOpenMissions", missions, player_stats, total_job, job_exp);
    }
});

CommunicationManager.AddServerEvent("ShowTruckerMissionComplete", (mission_soll, mission_ist) => {
    if (Webwindow["TruckerMissionOverview"] == null) {
        Webwindow["TruckerMissionOverview"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/trucker_mission_overview/trucker_mission_overview.html", true);
        Webwindow["TruckerMissionOverview"].start("SentMissionComplete", mission_soll, mission_ist);
    }else{
        Webwindow["TruckerMissionOverview"].call("SentMissionComplete", mission_soll, mission_ist);
    }
});

CommunicationManager.AddServerEvent("ShowTruckerMission", (mission, player_stats, total_job, job_exp) => {
    
    mission = JSON.parse(mission);

    let s_zoneName = getLocationZoneName(mission["StartPosition"].x, mission["StartPosition"].y, mission["StartPosition"].z);
    mission["StartZoneName"] = s_zoneName;

    let e_zoneName = getLocationZoneName(mission["EndPosition"].x, mission["EndPosition"].y, mission["EndPosition"].z);
    mission["EndZoneName"] = e_zoneName;

    mission["ServerTimestamp"] = getTimestampFromServer();

    let trailer_health = 1000;
    if(mp.players.local.vehicle){
        let truck = mp.players.local.vehicle;
        if(VioSyncTrailers[truck.remoteId] != null){
            trailer_health = VioSyncTrailers[truck.remoteId].getHealth()
        }
    }

    if (Webwindow["TruckerMissionOverview"] == null) {
        Webwindow["TruckerMissionOverview"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/trucker_mission_overview/trucker_mission_overview.html", true);
        Webwindow["TruckerMissionOverview"].start("SentOpenMission", JSON.stringify(mission), player_stats, total_job, job_exp, trailer_health);
    }else{
        Webwindow["TruckerMissionOverview"].call("SentOpenMission", JSON.stringify(mission), player_stats, total_job, job_exp, trailer_health);
    }
});

CommunicationManager.AddServerEvent("CancelClientTruckerMission", function () {
    //VioRageManager.SendChatMessage("CancelClientTruckerMission" );
    PlayerTruckerJobMission = null;
    if(TruckerJobMissionTrailer != null){
        TruckerJobMissionTrailer.destroy();
        TruckerJobMissionTrailer = null;
    }
});

CommunicationManager.AddServerEvent("RefreshTruckerMissionOverview", function (missions) {
    missions = JSON.parse(missions);

    for (var key in missions) {
        let s_zoneName = getLocationZoneName(missions[key]["StartPosition"].x, missions[key]["StartPosition"].y, missions[key]["StartPosition"].z);
        missions[key]["StartZoneName"] = s_zoneName;

        let e_zoneName = getLocationZoneName(missions[key]["EndPosition"].x, missions[key]["EndPosition"].y, missions[key]["EndPosition"].z);
        missions[key]["EndZoneName"] = e_zoneName;
    }

    if (Webwindow["TruckerMissionOverview"] != null) {
        Webwindow["TruckerMissionOverview"].call("RefreshMissions", missions);
    }
});

CommunicationManager.AddWebBrowserEvent("OnClientCloseTruckerMissionOverview", function () {
    if (Webwindow["TruckerMissionOverview"] != null) {
        Webwindow["TruckerMissionOverview"].destroy();
        Webwindow["TruckerMissionOverview"] = null;
    }
}, "TruckerMissionOverview");

CommunicationManager.AddWebBrowserEvent("OnClientRequestRefreshTruckerMissionOverview", function () {
    CommunicationManager.TriggerServer("OnClientRequestRefreshTruckerMissionOverview");
}, "TruckerMissionOverview");

CommunicationManager.AddWebBrowserEvent("OnClientRequestStartTruckerMission", function (id) {
    //VioRageManager.SendChatMessage("OnClientRequestStartTruckerMission" );
    CommunicationManager.TriggerServer("OnClientRequestStartTruckerMission", id);
}, "TruckerMissionOverview");

CommunicationManager.AddWebBrowserEvent("OnClientRequestBuyTruckerMissionExtension", function (id) {
    //VioRageManager.SendChatMessage("OnClientRequestBuyTruckerMissionExtension" );
    CommunicationManager.TriggerServer("OnClientRequestBuyTruckerMissionExtension", id);
}, "TruckerMissionOverview");

CommunicationManager.AddWebBrowserEvent("OnClientRequestCancelTruckerMission", function () {
    
    //VioRageManager.SendChatMessage("OnClientRequestCancelTruckerMission" );
    
    CommunicationManager.TriggerServer("OnClientRequestCancelTruckerMission");
    PlayerTruckerJobMission = null;
    if(TruckerJobMissionTrailer != null){
        TruckerJobMissionTrailer.destroy();
        TruckerJobMissionTrailer = null;
    }
}, "TruckerMissionOverview");

var TruckerJobPed = null;
var TruckerJobVehicle = null
var TruckerJobVehicleTrailer = null
var TruckerJobOjects = [];
var TruckerJobMarkerOjects = [];
var TruckerJobFinalMarker = null;
var TruckerJobStep = 0;
var TruckerJobSzenario = "";
var TruckerJobObjectsLeft = 0;

var TruckerJobMapOjects = [];


var SkipForkliftTimer;
var ForkliftInterval;

function CleanTruckerSzenario() {

    TruckerJobStep = -1;

    TruckerJobOjects.forEach(function (obj, index) {
        if (obj) {
            obj.destroy();
        }
    })
    TruckerJobOjects = [];

    TruckerJobMarkerOjects.forEach(function (obj, index) {
        if (obj) {
            obj.destroy();
        }
    })
    TruckerJobMarkerOjects = [];

    if (TruckerJobVehicle != null) {
        TruckerJobVehicle.destroy();
        TruckerJobVehicle = null;
    }

    if (TruckerJobVehicleTrailer != null) {
        TruckerJobVehicleTrailer.destroy();
        TruckerJobVehicleTrailer = null;
    }

    if (TruckerJobFinalMarker != null) {
        TruckerJobFinalMarker.destroy();
        TruckerJobFinalMarker = null;
    }

    if (TruckerJobPed != null) {
        TruckerJobPed.destroy();
        TruckerJobPed = null;
    }
}

function StartTruckerSzenario() {
    
    try{
        if (mp.players.local.dimension != 0) {

            TruckerJobObjectsLeft = 3;
            TruckerJobStep = 0;
            clearTimeout(SkipForkliftTimer);

            var RandomKey = Utility.GetRandomArbitrary(0, 100);
            if (RandomKey >= 60) {
                TruckerJobSzenario = "load";
            } else {
                TruckerJobSzenario = "unload";
            }
            //TruckerJobSzenario = "load";

            if (TruckerJobSzenario == "unload") {
                CreateNotify("~b~Es ist ein LKW zum Entladen auf dem Weg zu dir!");
                TruckerJobFinalMarker = mp.markers.new(30, new mp.Vector3(1201.297, -3180.179, 5.645), 2,
                    {
                        color: [255, 255, 0, 255],
                        dimension: mp.players.local.dimension
                    });
            } else {
                CreateNotify("~b~Es ist ein LKW zum Beladen auf dem Weg zu dir!");
            }

            //VioRageManager.SendChatMessage("StartTruckerSzenario -> START : " + TruckerJobSzenario );

            var RandomKey = Utility.GetRandomArbitrary(0, 100);

            let veh_hash = "hauler";
            if (RandomKey >= 66) {
                veh_hash = "hauler";
            } // hauler
            else if (RandomKey >= 33) {
                veh_hash = "packer";
            } // packer
            else if (RandomKey >= 0) {
                veh_hash = "phantom";
            } // phantom

            TruckerJobVehicleTrailer = mp.vehicles.new(mp.game.joaat("trflat"), new mp.Vector3(1253.686, -3165.1572, 6.1), { // 935.6, -1752.94
                heading: 180,
                engine: true,
                dimension: mp.players.local.dimension
            })

            TruckerJobVehicle = mp.vehicles.new(mp.game.joaat(veh_hash), new mp.Vector3(1253.8035, -3186.3682, 6.5), { // 914.784, -1752.23
                heading: 180,
                engine: true,
                dimension: mp.players.local.dimension
            })

            TruckerJobPed = VioRageManager.CreatePed(mp.game.joaat("s_m_m_trucker_01"), new mp.Vector3(1249.6888, -3169.2207, 6.01), 0.0, mp.players.local.dimension, false);

            setTimeout(function(){
                IsRageMpForkliftJobReady(TruckerJobVehicleTrailer, TruckerJobVehicle, TruckerJobPed, 5000, function (isready) {
                    if (TruckerJobVehicleTrailer != null && TruckerJobVehicle != null && TruckerJobPed != null && isready) {

                        //VioRageManager.SendChatMessage("StartTruckerSzenario -> START : # 1" );

                        TruckerJobVehicleTrailer.setOnGroundProperly();
                        VioRageManager.FreezePosition(TruckerJobVehicleTrailer, false)
                        TruckerJobVehicleTrailer.setDoorsLocked(2);
                        TruckerJobVehicleTrailer.setHeading(180);

                        mp.game.invoke('0x7141766F91D15BEA', TruckerJobVehicle.handle, parseInt(Utility.GetRandomArbitrary(1, 254)), parseInt(Utility.GetRandomArbitrary(1, 254)), parseInt(Utility.GetRandomArbitrary(1, 254))); // SET_VEHICLE_CUSTOM_PRIMARY_COLOUR

                        TruckerJobVehicle.setHeading(270.0);


                        TruckerJobVehicle.attachToTrailer(TruckerJobVehicleTrailer.handle, 100);
                        TruckerJobVehicle.setOnGroundProperly();
                        VioRageManager.FreezePosition(TruckerJobVehicle, false)
                        TruckerJobVehicle.setDoorsLocked(2);
                        TruckerJobVehicle.setHeading(180);

                        TruckerJobVehicle.setEngineOn(true, true, true)
                        TruckerJobVehicle.attachToTrailer(TruckerJobVehicleTrailer.handle, 100);


                        //VioRageManager.SendChatMessage("StartTruckerSzenario -> START : # 3" );

                        let index = TruckerJobVehicleTrailer.getBoneIndexByName("legs");

                        TruckerJobPed.setInvincible(true);
                        TruckerJobPed.setCanBeDamaged(false);
                        TruckerJobPed.setProofs(true, true, true, true, true, true, true, true);
                        VioRageManager.FreezePosition(TruckerJobPed, false)
                        TruckerJobPed.setIntoVehicle(TruckerJobVehicle.handle, -1);

                        TruckerJobPed.taskVehicleDriveToCoord(TruckerJobVehicle.handle, 1176.455, -3216.152, 5.88, 7.5, 1.0, mp.game.joaat("packer"), 786603, 1.0, true);

                        if (TruckerJobSzenario == "unload") {
                            var i;
                            for (i = 0; i < 3; i++) {
                                CreateRandomMoveableTruckerBox(i, 1240.25, -3100.424, 5.9, true, TruckerJobVehicleTrailer, index)
                            }
                        } else {
                            CreateNotify("~b~Es ist ein LKW zum Beladen auf dem Weg zu dir!");
                            CreateRandomMoveableTruckerBox(0, 1194.8148, -3201.644, 5.08, false, null, 0);
                            CreateRandomMoveableTruckerBox(1, 1191.8148, -3201.644, 5.08, false, null, 0);
                            CreateRandomMoveableTruckerBox(2, 1188.8148, -3201.644, 5.08, false, null, 0);

                            CreateRandomTruckMarkerOnTrailer(0, 1240.25, -3100.424, 5.9, TruckerJobVehicleTrailer, index);
                            CreateRandomTruckMarkerOnTrailer(1, 1240.25, -3100.424, 5.9, TruckerJobVehicleTrailer, index);
                            CreateRandomTruckMarkerOnTrailer(2, 1240.25, -3100.424, 5.9, TruckerJobVehicleTrailer, index);
                        }
                    }
                });
            }, 100);

            SkipForkliftTimer = setTimeout(function () {
                SkipTruckerSzenario();
            }, 1000 * 60 * 3); // 3 Minute
        } else {
            TruckerJobMapOjects.forEach(function (obj, index) {
                if (obj) {
                    obj.destroy();
                    delete TruckerJobMapOjects[index];
                }
            })
            TruckerJobMapOjects = [];

            CleanTruckerSzenario();
        }
    }
    catch (e) {
        VioRageManager.ErrorLog(e);
    }
}

CommunicationManager.AddServerEvent('OnClientStartForkliftSzenario', () => {

    try{
        CreateForkliftInterval();

        TruckerJobMapOjects.forEach(function (obj, index) {
            if (obj) {
                obj.destroy();
                delete TruckerJobMapOjects[index];
            }
        })
        TruckerJobMapOjects = [];

        //Logistik Job
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1194.8175, -3213.75146, 4.5607), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1197.8175, -3213.75146, 4.5607), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1191.8175, -3213.75146, 4.5607), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1188.8175, -3213.75146, 4.5607), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1188.8175, -3211.75146, 4.5607), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1188.8175, -3209.75146, 4.5607), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1188.8175, -3209.12573, 4.5617), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1191.8175, -3209.12573, 4.5617), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1194.8175, -3209.12573, 4.5617), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1197.8175, -3209.12573, 4.5617), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1200.8175, -3209.12573, 4.5617), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1203.8175, -3209.12573, 4.5617), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1200.8175, -3213.75146, 4.5607), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1202.82324, -3213.02173, 4.5605), {
            rotation: new mp.Vector3(0, 0, -49.99999),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1203.81714, -3211.23486, 4.5606), {
            rotation: new mp.Vector3(0, 0, -89.99995),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1200.8175, -3211.75146, 4.5607), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1197.8175, -3211.75146, 4.5607), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1194.8175, -3211.75146, 4.5607), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1191.8175, -3211.75146, 4.5607), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1203.8175, -3209.75146, 4.5607), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1200.8175, -3209.75146, 4.5607), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1197.8175, -3209.75146, 4.5607), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1194.8175, -3209.75146, 4.5607), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1191.8175, -3209.75146, 4.5607), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1203.52539, -3212.43286, 4.5607), {
            rotation: new mp.Vector3(0, 0, -49.99993),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_mp_barrier_01b"), new mp.Vector3(1195.12134, -3218.28345, 4.8023), {
            rotation: new mp.Vector3(0, 0, 179.99991),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_mp_barrier_01b"), new mp.Vector3(1213.4082, -3208.33472, 4.44956), {
            rotation: new mp.Vector3(0, 0, 179.98126),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_mp_barrier_01b"), new mp.Vector3(1201.0199, -3218.28345, 4.8023), {
            rotation: new mp.Vector3(0, 0, 179.99989),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_mp_barrier_01b"), new mp.Vector3(1206.91846, -3218.28345, 4.8023), {
            rotation: new mp.Vector3(0, 0, 179.99989),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_mp_barrier_01b"), new mp.Vector3(1212.81702, -3218.28345, 4.8023), {
            rotation: new mp.Vector3(0, 0, 179.99989),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1189.52002, -3207.12573, 4.5617), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1192.52002, -3207.12573, 4.5617), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1195.52002, -3207.12573, 4.5617), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1198.52002, -3207.12573, 4.5617), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1201.52002, -3207.12573, 4.5617), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1203.81995, -3207.12573, 4.5615), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1203.81995, -3205.12573, 4.5615), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1195.80273, -3204.5752, 4.5613), {
            rotation: new mp.Vector3(0, 0, 0.00002),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1192.52002, -3205.12573, 4.5617), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1189.52002, -3205.12573, 4.5617), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("lts_prop_lts_ramp_01"), new mp.Vector3(1198.81042, -3203.15063, 5.04684), {
            rotation: new mp.Vector3(0, 0, -179.98059),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1203.81995, -3204.07471, 4.5617), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1193.80225, -3204.07471, 4.5615), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1190.80298, -3204.07471, 4.5615), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("lts_prop_lts_ramp_01"), new mp.Vector3(1207.0033, -3207.85596, 3.55082), {
            rotation: new mp.Vector3(0, -89.99995, 169.75931),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("lts_prop_lts_ramp_01"), new mp.Vector3(1204.64563, -3212.82886, 3.55082), {
            rotation: new mp.Vector3(0, -89.99995, 119.75928),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1205.18665, -3211.03784, 4.5605), {
            rotation: new mp.Vector3(0, 0, -49.99993),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1205.47961, -3209.87622, 4.562), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1205.47961, -3207.87622, 4.562), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1205.47961, -3205.87622, 4.562), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1205.47961, -3204.07446, 4.5621), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("lts_prop_lts_ramp_01"), new mp.Vector3(1207.00452, -3206.09448, 3.55082), {
            rotation: new mp.Vector3(0, 90.00001, 10.2792),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("lts_prop_lts_ramp_01"), new mp.Vector3(1204.67297, -3212.82666, 3.55082), {
            rotation: new mp.Vector3(0, 90.00001, -40.02075),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("lts_prop_lts_ramp_01"), new mp.Vector3(1203.94849, -3203.04028, 3.55082), {
            rotation: new mp.Vector3(0, -89.99995, -100.24059),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1195.30371, -3206.06665, 4.5615), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("lts_prop_lts_ramp_01"), new mp.Vector3(1203.84961, -3203.04907, 3.55082), {
            rotation: new mp.Vector3(0, 90.00001, 100.27914),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1202.31982, -3204.07471, 4.5615), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1202.31982, -3206.07471, 4.5615), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("lts_prop_lts_ramp_01"), new mp.Vector3(1199.32239, -3214.77588, 3.55082), {
            rotation: new mp.Vector3(0, 90.00001, -79.76335),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("lts_prop_lts_ramp_01"), new mp.Vector3(1195.59607, -3214.77588, 3.55082), {
            rotation: new mp.Vector3(0, 90.00001, -79.76335),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("lts_prop_lts_ramp_01"), new mp.Vector3(1187.33997, -3214.77612, 3.55082), {
            rotation: new mp.Vector3(0, -89.99995, 79.75924),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("lts_prop_lts_ramp_01"), new mp.Vector3(1184.29187, -3211.7229, 3.55082), {
            rotation: new mp.Vector3(0, 90.00001, -169.76309),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1188.8175, -3207.12573, 4.5615), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1188.8175, -3205.12573, 4.5615), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1188.81812, -3204.07373, 4.5619), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("lts_prop_lts_ramp_01"), new mp.Vector3(1184.29382, -3206.12744, 3.55082), {
            rotation: new mp.Vector3(0, 90.00001, -169.76309),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("lts_prop_lts_ramp_01"), new mp.Vector3(1187.3429, -3203.04932, 3.55082), {
            rotation: new mp.Vector3(0, 90.00001, 100.2368),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("lts_prop_lts_ramp_01"), new mp.Vector3(1193.77612, -3203.05029, 3.55082), {
            rotation: new mp.Vector3(0, -89.99995, -100.24059),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("lts_prop_lts_ramp_01"), new mp.Vector3(1200.79688, -3206.10498, 3.55082), {
            rotation: new mp.Vector3(0, -89.99995, -10.24055),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("lts_prop_lts_ramp_01"), new mp.Vector3(1184.28931, -3206.09521, 3.55082), {
            rotation: new mp.Vector3(0, -89.99995, -10.24055),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("lts_prop_lts_ramp_01"), new mp.Vector3(1196.83044, -3206.09839, 3.55082), {
            rotation: new mp.Vector3(0, 90.00001, 10.2792),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("port_xr_railst"), new mp.Vector3(1193.1582, -3203.20483, 5.42149), {
            rotation: new mp.Vector3(0, 0, -0.00004),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("port_xr_railst"), new mp.Vector3(1187.33459, -3203.20483, 5.42149), {
            rotation: new mp.Vector3(0, 0, -0.00004),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("port_xr_railst"), new mp.Vector3(1184.42175, -3206.07764, 5.42149), {
            rotation: new mp.Vector3(0, 0, 90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("port_xr_railst"), new mp.Vector3(1184.42175, -3211.84326, 5.42149), {
            rotation: new mp.Vector3(0, 0, 90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("port_xr_railst"), new mp.Vector3(1204.68213, -3212.74316, 5.42149), {
            rotation: new mp.Vector3(0, 0, 39.99998),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("port_xr_railst"), new mp.Vector3(1206.96155, -3207.94849, 5.42149), {
            rotation: new mp.Vector3(0, 0, 89.99995),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("port_xr_railst"), new mp.Vector3(1206.96155, -3206.04663, 5.42149), {
            rotation: new mp.Vector3(0, 0, 89.99995),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("port_xr_railst"), new mp.Vector3(1203.98242, -3203.10376, 5.42149), {
            rotation: new mp.Vector3(0, 0, -179.99989),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_rub_cardpile_02"), new mp.Vector3(1206.54602, -3204.81836, 5.87883), {
            rotation: new mp.Vector3(0, 0, -88.28251),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_rub_cardpile_05"), new mp.Vector3(1204.61938, -3204.78101, 5.55089), {
            rotation: new mp.Vector3(0, 0, -46.62069),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_rub_cardpile_07"), new mp.Vector3(1195.88342, -3203.96875, 5.71979), {
            rotation: new mp.Vector3(0, 0, -10.93548),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_rub_frklft"), new mp.Vector3(1182.49219, -3205.48804, 4.87235), {
            rotation: new mp.Vector3(0, 0, 157.2124),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_rub_litter_01"), new mp.Vector3(1194.92676, -3205.00488, 5.56382), {
            rotation: new mp.Vector3(0, 0, -37.78479),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_rub_litter_02"), new mp.Vector3(1187.71313, -3204.70288, 5.57189), {
            rotation: new mp.Vector3(0, 0, -10.2414),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_rub_litter_03b"), new mp.Vector3(1191.58533, -3205.36133, 5.56426), {
            rotation: new mp.Vector3(0, 0, 24.23119),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_rub_trolley03a"), new mp.Vector3(1203.48083, -3213.17578, 6.10199), {
            rotation: new mp.Vector3(0, 0, -138.25473),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_rub_boxpile_02"), new mp.Vector3(1191.01782, -3203.70215, 5.83327), {
            rotation: new mp.Vector3(0, 0, -3.13667),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_rub_boxpile_05"), new mp.Vector3(1185.03162, -3203.61646, 5.83767), {
            rotation: new mp.Vector3(0, 0, 90.66592),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_rub_boxpile_07"), new mp.Vector3(1204.32385, -3212.41675, 5.88112), {
            rotation: new mp.Vector3(0, 0, 128.98038),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_ind_light_03c"), new mp.Vector3(1184.37476, -3203.13843, 4.78661), {
            rotation: new mp.Vector3(0, 0, 22.78834),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_ind_light_03c"), new mp.Vector3(1206.94006, -3203.09839, 4.78661), {
            rotation: new mp.Vector3(0, 0, 12.78858),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1185.8175, -3213.75146, 4.5607), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1185.8175, -3211.75146, 4.5607), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1185.8175, -3209.75146, 4.5607), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1185.8175, -3209.12573, 4.5617), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1185.8175, -3207.12573, 4.5615), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1185.8175, -3205.12573, 4.5615), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_dummy_car"), new mp.Vector3(1185.81812, -3204.07373, 4.5619), {
            rotation: new mp.Vector3(0, 0, -90.00001),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("lts_prop_lts_ramp_01"), new mp.Vector3(1191.59607, -3214.77588, 3.55082), {
            rotation: new mp.Vector3(0, 90.00001, -79.76335),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("lts_prop_lts_ramp_01"), new mp.Vector3(1191.3429, -3203.04932, 3.55082), {
            rotation: new mp.Vector3(0, 90.00001, 100.2368),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_mp_barrier_01b"), new mp.Vector3(1189.22278, -3218.28345, 4.8023), {
            rotation: new mp.Vector3(0, 0, 179.99989),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_mp_barrier_01b"), new mp.Vector3(1207.6145, -3208.33276, 4.44856), {
            rotation: new mp.Vector3(0, 0, 179.98125),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_mp_barrier_01b"), new mp.Vector3(1182.65198, -3208.33276, 4.44956), {
            rotation: new mp.Vector3(0, 0, 179.98125),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_mp_barrier_01b"), new mp.Vector3(1176.87207, -3208.33276, 4.44856), {
            rotation: new mp.Vector3(0, 0, 179.98125),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_mp_barrier_01b"), new mp.Vector3(1173.97278, -3205.44458, 4.44956), {
            rotation: new mp.Vector3(0, 0, -89.99863),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_mp_barrier_01b"), new mp.Vector3(1173.97278, -3199.65454, 4.44856), {
            rotation: new mp.Vector3(0, 0, -89.99863),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_mp_barrier_01b"), new mp.Vector3(1173.97278, -3193.84888, 4.44856), {
            rotation: new mp.Vector3(0, 0, -89.99863),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_mp_barrier_01b"), new mp.Vector3(1173.97278, -3188.14331, 4.44856), {
            rotation: new mp.Vector3(0, 0, -89.99863),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_mp_barrier_01b"), new mp.Vector3(1173.97278, -3182.53784, 4.44856), {
            rotation: new mp.Vector3(0, 0, -89.99863),
            dimension: mp.players.local.dimension
        })) //Logistik
        TruckerJobMapOjects.push(mp.objects.new(mp.game.joaat("prop_mp_barrier_01b"), new mp.Vector3(1173.97278, -3180.73608, 4.44756), {
            rotation: new mp.Vector3(0, 0, -89.99863),
            dimension: mp.players.local.dimension
        })) //Logistik

        CleanTruckerSzenario();
        StartTruckerSzenario();
    }
    catch (e) {
        VioRageManager.ErrorLog(e);
    }
})


function CheckForkliftInterval(){
    
    // VioRageManager.SendChatMessage("ForkliftInterval -> RUNNING : " + TruckerJobObjectsLeft + "| SZ : " + TruckerJobSzenario );

    try{
        TruckerJobOjects.forEach(function (obj, index) {
            if (obj) {
                if (obj.RotZ != null) {
                    var pos = obj.getCoords(true);
                    if (TruckerJobSzenario == "unload" && TruckerJobObjectsLeft > 0) {
                        if (mp.game.system.vdist(pos.x, pos.y, pos.z, 1201.297, -3180.179, 5.645) <= 2) {
                            if (mp.objects.exists(obj)) {
                                if (obj.handle !== 0) {
                                    obj.destroy();
                                }
                            }
                            delete TruckerJobOjects[index];
                            TruckerJobObjectsLeft = TruckerJobObjectsLeft - 1;
                        }
                        if (TruckerJobObjectsLeft <= 0) {
                            clearTimeout(SkipForkliftTimer);
                            CommunicationManager.TriggerServer("OnClientRequestForkliftSzenarioFinished");

                            VioRageManager.FreezePosition(TruckerJobVehicleTrailer, false);
                            VioRageManager.FreezePosition(TruckerJobVehicle, false);

                            TruckerJobPed.taskVehicleDriveToCoord(TruckerJobVehicle.handle, 906.17, -3222.4, 5.90, 17.5, 1.0, mp.game.joaat("packer"), 786603, 1.0, true);
                        }
                    }
                    if (TruckerJobSzenario == "load" && TruckerJobObjectsLeft > 0) {

                        if(obj != null){
                            if (obj.handle !== 0) {
                                if(obj.BoxHash != null && obj.RotZ != null){
                                    if (mp.objects.exists(obj)) {
                                        obj.setDynamic(true);
                                        VioRageManager.FreezePosition(obj, false);
                                    }
                                }
                            }
                        }
                        
                        TruckerJobMarkerOjects.forEach(function (marker_obj, marker_index) {
                            if (marker_obj != null && obj != null ) {
                                if(marker_obj.handle !== 0 && obj.handle !== 0){
                                    if(mp.objects.exists(obj) && mp.objects.exists(marker_obj)){
                                        var marker_pos = marker_obj.getCoords(true);
                                        if (marker_pos != null && obj.BoxHash != null && obj.RotZ != null) {
                                            if(marker_obj.Loaded == null){
                                                if (mp.game.system.vdist2(pos.x, pos.y, 0, marker_pos.x, marker_pos.y, 0) <= 1.25 && pos.z <= 6.60) {

                                                    if(mp.players.local.vehicle){
                                                        let v_rot = mp.players.local.vehicle.getHeading();
                                                        if(v_rot < 170 || v_rot > 190){
                                                            return;
                                                        }
                                                        if (mp.players.local.vehicle.getSpeed() >= 2) {
                                                            return;
                                                        }
                                                    }
                                                    
                                                    delete TruckerJobOjects[index];
                                                    
                                                    TruckerJobObjectsLeft = TruckerJobObjectsLeft - 1;

                                                    if (TruckerJobObjectsLeft <= 0) {
                                                        clearTimeout(SkipForkliftTimer);
                                                    }

                                                    var hash = obj.BoxHash;
                                                    var boxkey = marker_obj.BoxKey;
                                                    
                                                    let veh_pos = null;
                                                    
                                                    if(mp.players.local.vehicle){
                                                        VioRageManager.FreezePosition(mp.players.local.vehicle, true)
                                                        veh_pos = mp.players.local.vehicle.position;
                                                        
                                                        if(TruckerJobVehicleTrailer != null){
                                                            TruckerJobVehicleTrailer.setNoCollision(mp.players.local.vehicle.handle, false);
                                                        }
                                                    }
                                                    
                                                    setTimeout(function () {
                                                        if(obj != null){
                                                            obj.RotZ = null;
                                                            if (obj.handle !== 0) {
                                                                if (mp.objects.exists(obj)) {
                                                                    obj.destroy();
                                                                }
                                                            }
                                                        }
                                                    }, 250);

                                                    if(marker_obj != null){
                                                        marker_obj.Loaded = true;
                                                    }
                                                    
                                                    setTimeout(function () {
                                                        if(mp.players.local.vehicle){
                                                            VioRageManager.FreezePosition(mp.players.local.vehicle, false)
                                                            mp.players.local.vehicle.position = veh_pos;
                                                            mp.players.local.vehicle.setRotation(0, 0, 180, 1, true);
                                                        }
                                                    }, 500);
                                                    
                                                    setTimeout(function () {
                                                        if(mp.players.local.vehicle){
                                                            if(TruckerJobVehicleTrailer != null){
                                                                TruckerJobVehicleTrailer.setNoCollision(mp.players.local.vehicle.handle, true);
                                                            }
                                                        }
                                                    }, 1000);
                                                    
                                                    
                                                    let obj_new = mp.objects.new(mp.game.joaat(hash), new mp.Vector3(1194.8148, -3201.644, 1), {
                                                        rotation: new mp.Vector3(0, 0, 0),
                                                        dimension: mp.players.local.dimension
                                                    })

                                                    IsRageMpObjectReady(obj_new, 2500, function (isready) {
                                                        if (obj_new != null && isready && TruckerJobVehicleTrailer != null) {
                                                            if(TruckerJobVehicleTrailer.handle !== 0 && obj_new.handle !== 0){
                                                                if (mp.objects.exists(obj_new)) {
                                                                    let bone_index = TruckerJobVehicleTrailer.getBoneIndexByName("legs");
                                                                    if (boxkey == 0) {
                                                                        obj_new.attachTo(TruckerJobVehicleTrailer.handle, bone_index, 0.40, -4.5, 0.22, 0, 0, 0, false, false, false, false, 0, true);
                                                                    }
                                                                    if (boxkey == 1) {
                                                                        obj_new.attachTo(TruckerJobVehicleTrailer.handle, bone_index, 0.40, -2.0, 0.22, 0, 0, 0, false, false, false, false, 0, true);
                                                                    }
                                                                    if (boxkey == 2) {
                                                                        obj_new.attachTo(TruckerJobVehicleTrailer.handle, bone_index, 0.40, 0.5, 0.22, 0, 0, 0, false, false, false, false, 0, true);
                                                                    }
                                                                    TruckerJobOjects[index] = obj_new;
                                                                }
                                                            }
                                                        }
                                                    });

                                                    if (TruckerJobObjectsLeft <= 0) {
                                                        CommunicationManager.TriggerServer("OnClientRequestForkliftSzenarioFinished");
                                                        setTimeout(function () {
                                                            if (TruckerJobPed != null && TruckerJobVehicle != null && TruckerJobVehicleTrailer != null) {

                                                                VioRageManager.FreezePosition(TruckerJobVehicleTrailer, false);
                                                                VioRageManager.FreezePosition(TruckerJobVehicle, false);

                                                                TruckerJobPed.taskVehicleDriveToCoord(TruckerJobVehicle.handle, 906.17, -3222.4, 5.90, 17.5, 1.0, mp.game.joaat("packer"), 786603, 1.0, true);
                                                            }
                                                        }, 4000);
                                                    }

                                                    return;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        })
                    }
                }
            }
        })
    }
    catch (e) {
        VioRageManager.ErrorLog(e);
    }
}

function CreateForkliftInterval() {
    ForkliftInterval = setTimeout(function () {
        CreateForkliftInterval();
        CheckForkliftInterval();
    }, 1000);
}

CommunicationManager.AddServerEvent('OnClientStopForkliftSzenario', () => {

    try{
        clearTimeout(SkipForkliftTimer);
        clearTimeout(ForkliftInterval);
        ForkliftInterval = null;

        TruckerJobMapOjects.forEach(function (obj, index) {
            if (obj) {
                obj.destroy();
                delete TruckerJobMapOjects[index];
            }
        })
        TruckerJobMapOjects = [];


        CleanTruckerSzenario();
    }
    catch (e) {
        VioRageManager.ErrorLog(e);
    }
    
})


function SkipTruckerSzenario() {
    
    try{
        if (TruckerJobVehicleTrailer != null && TruckerJobVehicle != null && TruckerJobPed != null) {

            CreateNotify("~r~Du hast den Fahrer nicht rechtzeitig bedient, allerdings muss er weiter!");

            TruckerJobStep = 1;

            VioRageManager.FreezePosition(TruckerJobVehicleTrailer, false);
            VioRageManager.FreezePosition(TruckerJobVehicle, false);

            TruckerJobPed.taskVehicleDriveToCoord(TruckerJobVehicle.handle, 906.17, -3222.4, 5.90, 17.5, 1.0, mp.game.joaat("packer"), 786603, 1.0, true);

            if (TruckerJobSzenario == "unload") {
                TruckerJobOjects.forEach(function (obj, index) {
                    if (obj) {

                        let rot_z = obj.RotZ
                        let hash = obj.BoxHash;

                        delete TruckerJobOjects[index];

                        obj.detach(true, true);
                        obj.destroy();

                        let obj_new = mp.objects.new(mp.game.joaat(hash), new mp.Vector3(1180, -3211.4, 6), {
                            rotation: new mp.Vector3(0, 0, 0),
                            dimension: mp.players.local.dimension
                        });

                        obj_new.RotZ = rot_z
                        obj_new.BoxHash = hash;
                        obj_new.BoxKey = index;

                        IsRageMpObjectReady(obj_new, 2500, function (isready) {
                            if (obj_new != null && isready && TruckerJobVehicleTrailer != null) {
                                if(TruckerJobVehicleTrailer.handle !== 0){
                                    let leg_index = TruckerJobVehicleTrailer.getBoneIndexByName("legs");
                                    if (index == 0) {
                                        obj_new.attachTo(TruckerJobVehicleTrailer.handle, leg_index, 0.40, -4.5, 0.22, 0, 0, rot_z, false, false, false, false, 0, true);
                                    }
                                    if (index == 1) {
                                        obj_new.attachTo(TruckerJobVehicleTrailer.handle, leg_index, 0.40, -2.0, 0.22, 0, 0, rot_z, false, false, false, false, 0, true);
                                    }
                                    if (index == 2) {
                                        obj_new.attachTo(TruckerJobVehicleTrailer.handle, leg_index, 0.40, 0.5, 0.22, 0, 0, rot_z, false, false, false, false, 0, true);
                                    }
                                }

                                TruckerJobOjects[index] = obj_new;
                            }
                        });                    
                    }
                })
            }

        }
    }
    catch (e) {
        VioRageManager.ErrorLog(e);
    }

}

function CreateRandomTruckMarkerOnTrailer(box_key, x, y, z, trailer, index) {
    
    try{
        let obj = mp.objects.new(mp.game.joaat("prop_mp_base_marker"), new mp.Vector3(x, y, z), {
            rotation: new mp.Vector3(0, 0, 0),
            dimension: mp.players.local.dimension
        })

        IsRageMpObjectReady(obj, 2500, function (isready) {
            if (obj != null && isready) {

                if (box_key == 0) {
                    obj.attachTo(trailer.handle, index, 0.40, -4.5, 0.0, 0, 0, 0, false, false, false, false, 0, true);
                }
                if (box_key == 1) {
                    obj.attachTo(trailer.handle, index, 0.40, -2.0, 0.0, 0, 0, 0, false, false, false, false, 0, true);
                }
                if (box_key == 2) {
                    obj.attachTo(trailer.handle, index, 0.40, 0.5, 0.0, 0, 0, 0, false, false, false, false, 0, true);
                }

                TruckerJobMarkerOjects[box_key] = obj;
                TruckerJobMarkerOjects[box_key].BoxKey = box_key;
            }
        });
    }
    catch (e) {
        VioRageManager.ErrorLog(e);
    }
}


function CreateRandomMoveableTruckerBox(box_key, x, y, z, static_obj, trailer, index) {

    try{
        var RandomKey = Utility.GetRandomArbitrary(0, 100);

        let load = "prop_conc_blocks01a";
        let rot_z = 90;

        if (RandomKey >= 66) {
            load = "prop_boxpile_06b";
            rot_z = 0;
        }else if(RandomKey >= 33){
            load = "prop_boxpile_06a";
            rot_z = 0;
        }

        let obj = mp.objects.new(mp.game.joaat(load), new mp.Vector3(x, y, z), {
            rotation: new mp.Vector3(0, 0, 0),
            dimension: mp.players.local.dimension
        });
        obj.RotZ = rot_z
        obj.BoxHash = load;
        obj.BoxKey = box_key;
        TruckerJobOjects[box_key] = obj;

        IsRageMpObjectReady(obj, 3500, function (isready) {
            if (obj != null && isready) {
                if (static_obj == false) {
                    VioRageManager.FreezePosition(obj, false)
                    obj.setDynamic(true);
                }
                if (TruckerJobSzenario == "unload") {
                    if (box_key == 0) {
                        obj.attachTo(trailer.handle, index, 0.40, -4.5, 0.22, 0, 0, rot_z, false, false, false, false, 0, true);
                    }
                    if (box_key == 1) {
                        obj.attachTo(trailer.handle, index, 0.40, -2.0, 0.22, 0, 0, rot_z, false, false, false, false, 0, true);
                    }
                    if (box_key == 2) {
                        obj.attachTo(trailer.handle, index, 0.40, 0.5, 0.22, 0, 0, rot_z, false, false, false, false, 0, true);
                    }
                }
            }
        });
    }
    catch (e) {
        VioRageManager.ErrorLog(e);
    }
}


mp.events.add("render", () => {
    if (TruckerJobPed != null && TruckerJobVehicle != null && TruckerJobStep != -1) {

        let startY = 0.45;
        mp.game.graphics.clearDrawOrigin()
        mp.game.graphics.drawText("Verwendung der Gabel:", [0.050, startY], {
            font: 0,
            color: [255, 255, 255, 255],
            scale: [0.22, 0.22],
            outline: false,
            centre: false
        });
        startY = startY + 0.025;
        mp.game.graphics.drawText("STRG + Shift", [0.050, startY], {
            font: 0,
            color: [255, 255, 255, 255],
            scale: [0.22, 0.22],
            outline: false,
            centre: false
        });
        startY = startY + 0.025;
        mp.game.graphics.drawText("Numpad 5 + 8", [0.050, startY], {
            font: 0,
            color: [255, 255, 255, 255],
            scale: [0.22, 0.22],
            outline: false,
            centre: false
        });
        
        ///////// TEST 
        /*
        mp.game.graphics.clearDrawOrigin()
        TruckerJobOjects.forEach(function (obj, index) {
            if (obj) {
                if (obj.RotZ != null) {
                    let text_debug_pos = obj.getCoords(true);
                    mp.game.graphics.drawMarker(
                        0,
                        text_debug_pos.x, text_debug_pos.y, text_debug_pos.z + 2,
                        0, 0, 0,
                        0, 0, 0,
                        1.0, 1.0, 1.0,
                        0, 255, 0, 255,
                        false, false, 2,
                        false, null, null,false
                    );
                }
            }
        })

        TruckerJobMarkerOjects.forEach(function (obj, index) {
            if (obj) {
                let text_debug_pos = obj.getCoords(true);
                mp.game.graphics.drawMarker(
                    0,
                    text_debug_pos.x, text_debug_pos.y, text_debug_pos.z + 2,
                    0, 0, 0,
                    0, 0, 0,
                    1.0, 1.0, 1.0,
                    255, 0, 0, 255,
                    false, false, 2,
                    false, null, null,false
                );
            }
        })
        
        */
        ///////// TEST
        
        if (TruckerJobStep == 0) {
            if (mp.game.system.vdist2(TruckerJobVehicle.position.x, TruckerJobVehicle.position.y, TruckerJobVehicle.position.z, 1176.455, -3216.152, 5.88) <= 75) {

                TruckerJobStep = 1;

                VioRageManager.FreezePosition(TruckerJobVehicleTrailer, true);
                VioRageManager.FreezePosition(TruckerJobVehicle, true);

                TruckerJobVehicle.setIndicatorLights(0, true);
                TruckerJobVehicle.setIndicatorLights(1, true);

                TruckerJobVehicleTrailer.setIndicatorLights(0, true);
                TruckerJobVehicleTrailer.setIndicatorLights(1, true);

                if (TruckerJobSzenario == "unload") {
                    CreateNotify("~b~Entlade den LKW und bringe die Ware ins Depot!");
                    setTimeout(function () {
                        TruckerJobOjects.forEach(function (obj, index) {
                            if (obj) {
                                obj.detach(true, true);
                                
                                let pos = obj.getCoords(true);
                                pos.z = pos.z + 0.35;
                                obj.position = pos;
                                VioRageManager.FreezePosition(obj, false);
                                obj.applyForceTo(1, 0.000, 0.000, 0.020, 0.000, 0.000, 0.000, 0, false, true, true, false, true);
                                obj.setDynamic(true);
                            }
                        })
                    }, 750);
                } else {
                    CreateNotify("~b~Belade den LKW mit der bereitgestellten Ware!");
                }
            }
        }
        if (TruckerJobStep == 1) {
            if (mp.game.system.vdist2(TruckerJobVehicle.position.x, TruckerJobVehicle.position.y, TruckerJobVehicle.position.z, 906.17, -3222.4, 5.90) <= 25) {
                TruckerJobStep = 2;
                CleanTruckerSzenario();
                StartTruckerSzenario();
            }
        }
    }
});

var GasstationID = "";
var GasStationPumps = [];

GasStationPumps.push({x: 1181.155, y: -326.1501, z: 69.35081, id: 1, size: 140});
GasStationPumps.push({x: 1182.065, y: -334.4065, z: 69.35655, id: 1, size: 140});
GasStationPumps.push({x: -719.4985, y: -936.1493, z: 19.21394, id: 2, size: 140});
GasStationPumps.push({x: -728.2692, y: -934.9557, z: 19.21393, id: 2, size: 140});
GasStationPumps.push({x: -70.50, y: -1761.07, z: 29.534, id: 3, size: 190});
GasStationPumps.push({x: -1795.772, y: 805.186, z: 138.6857, id: 4, size: 140});
GasStationPumps.push({x: -1802.797, y: 799.2627, z: 138.6917, id: 4, size: 140});
GasStationPumps.push({x: -2554.841, y: 2326.959, z: 33.07797, id: 5, size: 45});
GasStationPumps.push({x: -2555.439, y: 2341.868, z: 33.07797, id: 5, size: 45});
GasStationPumps.push({x: -1436.46, y: -277.6752, z: 46.2077, id: 6, size: 140});
GasStationPumps.push({x: 174.9362, y: -1562.578, z: 29.28119, id: 7, size: 140});
GasStationPumps.push({x: 1211.006, y: -1404.98, z: 35.38196, id: 8, size: 45});
GasStationPumps.push({x: 1206.146, y: -1400.113, z: 35.38547, id: 8, size: 45});
GasStationPumps.push({x: 2584.598, y: 360.9858, z: 108.4688, id: 9, size: 140});
GasStationPumps.push({x: 2577.814, y: 361.973, z: 108.4687, id: 9, size: 140});
GasStationPumps.push({x: 186.4193, y: 6606.162, z: 32.0474, id: 10, size: 45});
GasStationPumps.push({x: 172.8649, y: 6603.729, z: 32.0474, id: 10, size: 45});
GasStationPumps.push({x: 154.9702, y: 6629.593, z: 31.82994, id: 10, size: 45});
GasStationPumps.push({x: 815.4426, y: -1028.04, z: 26.41884, id: 11, size: 45});
GasStationPumps.push({x: 823.9169, y: -1028.943, z: 26.60823, id: 11, size: 45});
GasStationPumps.push({x: -2100.769, y: -318.001, z: 13.16863, id: 12, size: 140});
GasStationPumps.push({x: -2092.106, y: -319.7777, z: 13.16863, id: 12, size: 140});
GasStationPumps.push({x: 265.042, y: -1258.440, z: 29.29296, id: 13, size: 220});
GasStationPumps.push({x: -526.3878, y: -1210.606, z: 18.18484, id: 14, size: 140});
GasStationPumps.push({x: 2679.966, y: 3264.119, z: 55.24052, id: 15, size: 45});
GasStationPumps.push({x: -94.25033, y: 6419.624, z: 31.48952, id: 16, size: 45});
GasStationPumps.push({x: 49.41865, y: 2778.793, z: 58.04395, id: 17, size: 45});
GasStationPumps.push({x: 2005.075, y: 3774.341, z: 32.40394, id: 18, size: 45});
GasStationPumps.push({x: 625.4618, y: 269.2645, z: 103.0894, id: 19, size: 140});
GasStationPumps.push({x: 616.5612, y: 269.2727, z: 103.0894, id: 19, size: 140});
GasStationPumps.push({x: -323.4475, y: -1473.252, z: 30.5487, id: 20, size: 140});
GasStationPumps.push({x: -315.8557, y: -1469.157, z: 30.54636, id: 20, size: 140});
GasStationPumps.push({x: 1701.975, y: 6417.006, z: 32.76403, id: 21, size: 45});
GasStationPumps.push({x: 263.9962, y: 2607.41, z: 44.98286, id: 22, size: 45});
GasStationPumps.push({x: 1207.999, y: 2660.598, z: 37.89978, id: 23, size: 45});
GasStationPumps.push({x: 1784.985, y: 3330.498, z: 41.37167, id: 24, size: 45});

var GasStationPumpsWater = [];
GasStationPumpsWater.push({x: 456, y: -2239, z: 0, id: 28});
GasStationPumpsWater.push({x: 3856, y: 4447, z: 0, id: 29});
GasStationPumpsWater.push({x: -1606.57, y: 5215.56, z: 0, id: 30});

GasStationPumpsWater.push({x: 484, y: -2240, z: 6, id: 28});
GasStationPumpsWater.push({x: 3793, y: 4448, z: 5, id: 29});
GasStationPumpsWater.push({x: -1577, y: 5136, z: 21, id: 30});

var GasStationPumpsAir = [];
GasStationPumpsAir.push({x: -961.0825, y: -2974.283, z: 13.94507, id: 25});
GasStationPumpsAir.push({x: 1770.22, y: 3239.74, z: 42.13, id: 26});
GasStationPumpsAir.push({x: 2107.65, y: 4768.25, z: 41.24, id: 27});

function GetNextGasStation(vmodel) {

    var GasID = -1;
    let playerPos = mp.players.local.position;

    if (mp.players.local.isInAnyVehicle(false)) {
        if (mp.players.local.vehicle.getSpeed() >= 5) {
            return GasID;
        }
    }

    if (mp.game.vehicle.isThisModelABoat(vmodel) || vmodel == 0xB150279A) {
        //VioRageManager.SendChatMessage("GasStationPumpsWater");
        var i;
        let max_dist = 200;
        if(vmodel == 0xB150279A){
            max_dist = 400;
        }
        for (i = 0; i < GasStationPumpsWater.length; i++) {
            let dist = mp.game.system.vdist2(playerPos.x, playerPos.y, playerPos.z, GasStationPumpsWater[i].x, GasStationPumpsWater[i].y, GasStationPumpsWater[i].z);
            if (dist < max_dist) {
                GasID = GasStationPumpsWater[i].id
            }
        }
    }
    if (mp.game.vehicle.isThisModelACar(vmodel) || mp.game.vehicle.isThisModelAQuadbike(vmodel) || mp.game.vehicle.isThisModelABike(vmodel) || vmodel == 0xB150279A) {
        //VioRageManager.SendChatMessage("GasStationPumps");
        var i;
        for (i = 0; i < GasStationPumps.length; i++) {
            let dist = mp.game.system.vdist2(playerPos.x, playerPos.y, playerPos.z, GasStationPumps[i].x, GasStationPumps[i].y, GasStationPumps[i].z);
            if (dist < GasStationPumps[i].size) {
                GasID = GasStationPumps[i].id
            }
        }
    }
    if (mp.game.vehicle.isThisModelAHeli(vmodel) || mp.game.vehicle.isThisModelAPlane(vmodel) || vmodel == 0xB150279A) {
        //VioRageManager.SendChatMessage("GasStationPumpsAir");
        var i;
        for (i = 0; i < GasStationPumpsAir.length; i++) {
            let dist = mp.game.system.vdist2(playerPos.x, playerPos.y, playerPos.z, GasStationPumpsAir[i].x, GasStationPumpsAir[i].y, GasStationPumpsAir[i].z);
            if (dist < 170) {
                GasID = GasStationPumpsAir[i].id
            }
        }
    }

    return GasID;
}

CommunicationManager.AddServerEvent("GasstationOpen", (gasname, fueltype, maxfuel, gasowner, fuelPriceString, gasid, gasstorage, company_price) => {

    if (mp.players.local.isInAnyVehicle(false)) {
        if (mp.players.local.isDead() == true) return;
        if (mp.players.local.vehicle.getSpeed() >= 20) return;

        var driver = mp.players.local.vehicle.getPedInSeat(-1);
        if (driver == mp.players.local.handle) {
            if (Webwindow["GasstationWindow"] == null && disableAllControls == false) {
                disableAllControls = true;

                var GasstationTable = {};
                GasstationTable["money"] = InventoryItems["0"];
                GasstationTable["gasstation"] = gasname;
                GasstationTable["fueltype"] = fueltype;
                GasstationTable["maxfuel"] = maxfuel;
                GasstationTable["gasstorage"] = gasstorage;
                GasstationTable["currentfuel"] = Tacho.fuel;
                GasstationTable["owner"] = gasowner;
                GasstationTable["CompanyPrice"] = company_price;

                GasstationID = gasid;
                var fuelPrice = fuelPriceString.replace(",", ".");

                GasstationTable["fuelprice"] = Number(fuelPrice);

                Webwindow["GasstationWindow"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/gasstation/gasstation.html", true);
                Webwindow["GasstationWindow"].start('UpdateGasstation', JSON.stringify(GasstationTable));

                var vehicle = mp.players.local.vehicle;
                if (vehicle != null) {
                    // vehicle.freezePosition(true);
                    VioRageManager.FreezePosition(vehicle, true);
                }
            }
        }
    }
})

CommunicationManager.AddWebBrowserEvent("OnClientRequestGasstationFill", (liter) => {
    Webwindow["GasstationWindow"].destroy();
    Webwindow["GasstationWindow"] = null;

    disableAllControls = false;

    var vehicle = mp.players.local.vehicle;
    if (vehicle != null) {
        // vehicle.freezePosition(false);
        VioRageManager.FreezePosition(vehicle, false);
    }

    CommunicationManager.TriggerServer("OnClientRequestGasstationFill", liter, Tacho.fuel, GasstationID);
}, "GasstationWindow");

CommunicationManager.AddWebBrowserEvent("OnClientRequestBuyCompany", () => {
    Webwindow["GasstationWindow"].destroy();
    Webwindow["GasstationWindow"] = null;

    disableAllControls = false;

    var vehicle = mp.players.local.vehicle;
    if (vehicle != null) {
        // vehicle.freezePosition(false);
        VioRageManager.FreezePosition(vehicle, false);
    }

    CommunicationManager.TriggerServer("OnClientRequestBuyCompany", GasstationID);
}, "GasstationWindow");

CommunicationManager.AddWebBrowserEvent("OnClientRequestGasstationClose", () => {
    Webwindow["GasstationWindow"].destroy();
    Webwindow["GasstationWindow"] = null;

    disableAllControls = false;

    var vehicle = mp.players.local.vehicle;
    if (vehicle != null) {
        // vehicle.freezePosition(false);
        VioRageManager.FreezePosition(vehicle, false);
    }
}, "GasstationWindow");

Selection = class {
    constructor() {
        this._setup();
    }

    get visible() {
        return this.active
    }

    _setup() {
        var self = this;
        self.choices = [];
        self.browser = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/selection/index.html", false);
        self.active = false;
        self.browser.start("toggleVisiblity", this.active);
    }

    toggle() {
        this.active = !this.active;
        this.browser.call("fillOptions", this.choices);
        mp.gui.cursor.visible = this.active;
        this.browser.call("toggleVisiblity", this.active);
        /*
        if (this.active) {
            mp.game.invoke("0xFC695459D4D0E219", .5, .5); // reset cursor to center
        }
         */
    }

    mapChoices(choices) {
        this.choices = choices.map(function (choice) {
            return choice;
        });
        this.browser.call("fillOptions", this.choices);
    }
}
Selection = new Selection();
var warningblocked = [13, 14, 15, 16, 21];
var selectetEnitity = null;

function hasLocalPlayerVehicleAccess(veh) {
    if (mp.players.local.adminMode) {
        return true;
    }

    if (LocalCharacterID == veh.getVariable("PRIVATE_VEHICLE_OWNER")) {
        return true;
    }
    if (LocalGroupID == veh.getVariable("GROUP_VEHICLE_OWNER")) {
        return true;
    }
    if (LocalCharacterID == veh.getVariable("RENT_VEHICLE_OWNER")) {
        return true;
    }

    if (LocalGroupID == 0 || LocalGroupID == 3 || LocalGroupID == 4) {
        if (veh.getVariable("GROUP_VEHICLE_OWNER") != null) {
            let group = veh.getVariable("GROUP_VEHICLE_OWNER");
            if (group == 0 || group == 3 || group == 4) {
                return true;
            }
        }
    }

    if (veh.getVariable("PRIVATE_VEHICLE_KEYS") != null) {
        var veh_keys = JSON.parse(veh.getVariable("PRIVATE_VEHICLE_KEYS"));
        for (var i = 0; i < veh_keys.length; i++) {
            if (veh_keys[i] == LocalCharacterID) {
                return true;
            }
        }
    }
    return false;
}


function isVehicleWarningIndicatorBlocked(veh) {
    if (warningblocked.indexOf(mp.game.vehicle.getVehicleClass(veh)) > -1) {
        return true;
    } else {
        return false;
    }
}

// Close selection
KeybindManager.registerVioKeyFunction("Interaktionsmenü", false, () => {
    Selection.browser.call("requestClose");
})

// Open selection
KeybindManager.registerVioKeyFunction("Interaktionsmenü", true, () => {
    if (Webwindow["Login"] != null || Webwindow["TicketsystemBrowser"] != null || Webwindow["Settings"] != null || Webwindow["Trade"] != null || Webwindow["BonusShop"] != null || Webwindow["GasstationWindow"] != null || Webwindow["Race"] != null) {
        return;
    }
    if (mp.game.invoke('0xD9D2CFFF49FAB35F') === 1) {
        return;
    }
    if (mp.gui.cursor.visible == true) {
        return;
    }
    if (login != true) {
        return;
    }
    if (spectating && specCamera != null) {
        return;
    }
    if (isPlayerOnTuningPlace == true) {
        return;
    }
    if (isPlayerCuffed || disableAllControls) {
        return;
    }
    if (mp.players.local.isBeingStunned(0)) {
        return;
    }
    if (IsPlayerInFightClub == true) {
        return;
    }
    if(IsInHalloweenHouse == true){
        return;
    }

    if (mp.players.local.isDead() == false) {
        if (Selection.visible == false) {
            selectetEnitity = null;
            if (mp.players.local.isInAnyVehicle(true)) {
                selectetEnitity = mp.players.local.vehicle;
                getSelectionChoices("incar");
            } else {
                let player = mp.players.local;
                let TargetVehicle = null;
                let dist_init = 100;
                let dist;
                let target_position;
                mp.vehicles.forEachInStreamRange((tVeh) => {
                    target_position = tVeh.position;
                    dist = mp.game.gameplay.getDistanceBetweenCoords(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, target_position.x, target_position.y, target_position.z, true);
                    if (dist < dist_init) {
                        let speedkmh = parseInt(tVeh.getSpeed() * 3.6);
                        if (speedkmh < 5) {
                            dist_init = dist;
                            TargetVehicle = tVeh;
                        }
                    }
                });
                if (dist_init <= 4.5 && TargetVehicle != null) {
                    if (!mp.raycasting.testPointToPoint(mp.players.local.position, TargetVehicle.position, [mp.players.local, TargetVehicle], 1)) {
                        selectetEnitity = TargetVehicle;
                        getSelectionChoices("outcar");
                        return;
                    }
                }
                let TargetPlayer = null;
                entityDistance = 100;
                targets = mp.players.forEachInStreamRange((tPlayer) => {
                    if (tPlayer.adminMode) {
                        if (tPlayer.adminMode == 2) {
                            return;
                        }
                    }
                    if (tPlayer != mp.players.local) {
                        target_position = tPlayer.position;
                        dist = mp.game.gameplay.getDistanceBetweenCoords(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, target_position.x, target_position.y, target_position.z, true);
                        if (dist <= 3) {
                            if (entityDistance > dist) {
                                entityDistance = dist;
                                TargetPlayer = tPlayer;
                            }
                        }
                    }
                });
                if (entityDistance <= 3 && TargetPlayer != null) {
                    if (TargetPlayer.isInAnyVehicle(true) != true) {
                        if (!mp.raycasting.testPointToPoint(mp.players.local.position, TargetPlayer.position, [mp.players.local, TargetPlayer], 1)) {
                            CreateNotify(TargetPlayer.name);
                            selectetEnitity = TargetPlayer;
                            getSelectionChoices("player");
                            return;
                        }
                    }
                }
                if (farmer_status == true) {
                    getSelectionChoices("farmer");
                    return;
                }
                getSelectionChoices("self");
                return;
            }
        }
    }
});

// Close selection
KeybindManager.registerVioKeyFunction("Animationsrad", false, () => {
    Selection.browser.call("requestClose");
})

KeybindManager.registerVioKeyFunction("Animationsrad", true, () => {
    if (Webwindow["Login"] != null || Webwindow["TicketsystemBrowser"] != null || Webwindow["Settings"] != null || Webwindow["Trade"] != null || Webwindow["BonusShop"] != null) {
        return;
    }
    if (mp.game.invoke('0xD9D2CFFF49FAB35F') === 1) {
        return;
    }
    if (mp.gui.cursor.visible == true) {
        return;
    }
    if (login != true) {
        return;
    }
    if (spectating && specCamera != null) {
        return;
    }
    if (isPlayerCuffed || disableAllControls) {
        return;
    }

    if (mp.players.local.isDead() == false) {
        if (Selection.visible == false) {
            selectetEnitity = null;
            getAnimationChoices();
        }
    }
});

var TempSelectionGasStation = -1;

function getSelectionChoices(type) {

    if (Selection.visible == false) {

        let choices = [];
        
        choices.push({
            name: 'Übersicht',
            img: 'portrait.svg',
            id: 2,
            type: "self"
        })
        
        if (LocalGroupID == 0 || LocalGroupID == 3 || LocalGroupID == 4) {
            if (HQPoliceRadio["Status"] != -1) {
                let bomb_id = GetNextPlantedBomb();
                if(bomb_id != ""){
                    choices.push({
                        img: "bomb.svg",
                        name: "Bombe entschärfen",
                        id: 9,
                        type: "self"
                    })
                }
            }
        }
        
        if (type == "incar") {
            if ((selectetEnitity.getPedInSeat(-1) == mp.players.local.handle) && (mp.players.local.isInAnyVehicle(true) == true)) {
                let gas_id = GetNextGasStation(selectetEnitity.model)
                if (gas_id != -1) {
                    TempSelectionGasStation = gas_id;
                    choices.push({
                        img: "fuel.svg",
                        name: "Tankstelle",
                        id: 33,
                        type: type
                    })
                }

                if(selectetEnitity.model == 0x809AA4CB || selectetEnitity.model == 0xA90ED5C || selectetEnitity.model == 0x21EEE87D || selectetEnitity.model == 0x5A82F9AE){
                    if(PlayerTruckerJobMission != null){
                        choices.push({
                            img: "trucker_mission.svg",
                            name: "Auftrag anzeigen",
                            id: 40,
                            type: type
                        })
                    }else{
                        choices.push({
                            img: "trucker_all.svg",
                            name: "Auftragsübersicht öffnen",
                            id: 40,
                            type: type
                        })
                    }
                }

                if (hasLocalPlayerVehicleAccess(selectetEnitity)) {
                    if (selectetEnitity.getVariable("Marker") == null) {
                        choices.push({
                            name: 'Fahrzeug aufschliessen',
                            img: 'unlock.svg',
                            id: 3,
                            type: type
                        })
                        choices.push({
                            name: 'Fahrzeug abschliessen',
                            img: 'lock.svg',
                            id: 2,
                            type: type
                        })
                    }
                    choices.push({
                        img: "engine.svg",
                        name: "Motor an/aus schalten",
                        id: 1,
                        type: type
                    })
                }
                if (LocalCharacterID == selectetEnitity.getVariable("PRIVATE_VEHICLE_OWNER")) {
                    choices.push({
                        img: "suitcase.svg",
                        name: "Kofferraum oeffnen",
                        id: 4,
                        type: type
                    })
                }
                if (LocalGroupID == 0 || LocalGroupID == 3 || LocalGroupID == 4) {
                    if (HQPoliceRadio["Status"] != -1) {
                        choices.push({
                            img: "gavel.svg",
                            name: "Kofferraum durchsuchen",
                            id: 10,
                            type: type
                        })
                    }
                }
                if (selectetEnitity.getClass() != 13 && selectetEnitity.getClass() != 14 && selectetEnitity.getClass() != 15 && selectetEnitity.getClass() != 16) {
                    choices.push({
                        img: "warning.svg",
                        name: "Warnblinker",
                        id: 8,
                        type: type
                    })
                }
            }
            if (!mp.game.vehicle.isThisModelABike(selectetEnitity.model) && !mp.game.vehicle.isThisModelABicycle(selectetEnitity.model)) {
                if (VioRageManager.InsideVehicleSeat(selectetEnitity) && !VioRageManager.OutsideTrashVehicleSeat(selectetEnitity)) {
                    choices.push({
                        img: "seatbelt.svg",
                        name: "Sitzgurt nutzen",
                        id: 6,
                        type: type
                    });
                }
            }
            if (farmer_status == true) {
                // Ernten
                choices.push({
                    img: "harvest.svg",
                    name: "Ernten",
                    id: 9,
                    type: "farmer"
                })
                // Pflanzen
                if (farmer_plants["potato"]) {
                    choices.push({
                        name: 'Kartoffel',
                        img: 'potato.svg',
                        id: 1,
                        type: "farmer"
                    })
                }
                if (farmer_plants["onion"]) {
                    choices.push({
                        name: 'Zwiebeln',
                        img: 'onion.svg',
                        id: 2,
                        type: "farmer"
                    })
                }
                if (farmer_plants["carrot"]) {
                    choices.push({
                        name: 'Karotten',
                        img: 'carrot.svg',
                        id: 3,
                        type: "farmer"
                    })
                }
                if (farmer_plants["salat"]) {
                    choices.push({
                        name: 'Kopfsalat',
                        img: 'salat.svg',
                        id: 4,
                        type: "farmer"
                    })
                }
                if (farmer_plants["cucumber"]) {
                    choices.push({
                        name: 'Gurke',
                        img: 'cucumber.svg',
                        id: 5,
                        type: "farmer"
                    })
                }
                if (farmer_plants["wheat"]) {
                    choices.push({
                        name: 'Weizen',
                        img: 'wheat.svg',
                        id: 6,
                        type: "farmer"
                    })
                }
                if (farmer_plants["pumpkin"]) {
                    choices.push({
                        name: 'Kürbis',
                        img: 'pumpkin.svg',
                        id: 7,
                        type: "farmer"
                    })
                }
            }
            if (FishNets.isLoaded() == true) {
                if (FishNets.getNearestNet() != null) {
                    choices.push({
                        img: "life-ring.svg",
                        name: "Fischernetz einholen",
                        id: 26,
                        type: type
                    })
                    choices.push({
                        img: "wrench.svg",
                        name: "Fischernetz reparieren",
                        id: 27,
                        type: type
                    })
                }
            }
            if (HasOpenRaceInvitation) {
                choices.push({
                    img: "race.svg",
                    name: "Wettrennen annehmen",
                    id: 29,
                    type: type
                })
            } else {
                if (VioRageManager.PlayerIsDriver(mp.players.local.handle, mp.players.local.vehicle)) {
                    let isRaceTarget = false;
                    mp.players.forEachInStreamRange(function (target) {
                        if (target != mp.players.local && target.vehicle) {
                            let pPos = target.position;
                            let lPos = mp.players.local.position;
                            let dist = mp.game.system.vdist2(lPos.x, lPos.y, lPos.z, pPos.x, pPos.y, pPos.z);
                            if (dist < 50) {
                                isRaceTarget = true;
                            }
                        }
                    })
                    if (isRaceTarget == true) {
                        choices.push({
                            img: "race.svg",
                            name: "Wettrennen",
                            id: 28,
                            type: type
                        })
                    }
                }
            }
        }
        else if (type == "outcar") {
            if (hasLocalPlayerVehicleAccess(selectetEnitity)) {
                if (selectetEnitity.getVariable("Marker") == null) {
                    choices.push({
                        name: 'Fahrzeug aufschliessen',
                        img: 'unlock.svg',
                        id: 3,
                        type: type
                    })
                    choices.push({
                        name: 'Fahrzeug abschliessen',
                        img: 'lock.svg',
                        id: 2,
                        type: type
                    })
                }
            }

            if(selectetEnitity.model == 2037834373){
                if(selectetEnitity.fletbed_vehicle != null){
                    choices.push({
                        img: "tow.svg",
                        name: "Fahrzeug ablassen",
                        id: 80,
                        type: type
                    })
                }else{
                    choices.push({
                        img: "tow.svg",
                        name: "Fahrzeug aufladen",
                        id: 81,
                        type: type
                    })
                }
            }

            if (selectetEnitity.isDriveable(false) == false) {
                choices.push({
                    img: "tow.svg",
                    name: "Fahrzeug abschleppen",
                    id: 55,
                    type: type
                })
            } else {
                choices.push({
                    img: "wrench.svg",
                    name: "Fahrzeug reparieren",
                    id: 5,
                    type: type
                })
            }

            if (mp.game.vehicle.isThisModelABicycle(selectetEnitity.model) == false) {
                choices.push({
                    img: "fuel.svg",
                    name: "Fahrzeug betanken",
                    id: 7,
                    type: type
                })
            }

            if (selectetEnitity.model != 0xF8D48E7A && selectetEnitity.model != 0x1A79847A) { // boxville4 - journey
                if (isPlayerCarryingAction) {
                    choices.push({
                        img: "archive.svg",
                        name: "Beladen",
                        id: 31,
                        type: type
                    })
                }

                if (selectetEnitity.getVariable("Marker") != null && isPlayerCarryingAction == false && LocalGroupID >= 0) {
                    choices.push({
                        img: "archive.svg",
                        name: "Entladen",
                        id: 30,
                        type: type
                    })
                }
            }

            if (isClientAdmin() && selectetEnitity.getVariable("Marker") == null && isPlayerCarryingAction == false) {
                choices.push({
                    img: "sync.svg",
                    name: "Fahrzeug respawnen",
                    id: 9,
                    type: type
                })
            }
            if (LocalGroupID == 1) {
                if (selectetEnitity.getVariable("GROUP_VEHICLE_OWNER") == 1) {
                    choices.push({
                        img: "archive.svg",
                        name: "Fahrzeug beladen",
                        id: 11,
                        type: type
                    })
                }
            }
            if (LocalGroupID == 0 || LocalGroupID == 3 || LocalGroupID == 4) {
                if (HQPoliceRadio["Status"] != -1) {
                    if (selectetEnitity.getVariable("BlockedVehicle") == null && selectetEnitity.getVariable("Marker") == null) {
                        choices.push({
                            img: "anchor.svg",
                            name: "Radkralle anbringen",
                            id: 12,
                            type: type
                        })
                    }
                    choices.push({
                        img: "gavel.svg",
                        name: "Kofferraum durchsuchen",
                        id: 10,
                        type: type
                    })
                    if (selectetEnitity.model == 0xE2E7D4AB) {
                        if (isPlayerCarryingAction == false && MaxTimeUnderwater == 30) {
                            choices.push({
                                img: "diving.svg",
                                name: "Tauchausrüstung anlegen",
                                id: 32,
                                type: type
                            })
                        }
                    }
                }
            }
            if (LocalGroupID >= 10) {
                if (selectetEnitity.model == 456714581 || selectetEnitity.model == 0x2469AA5F) {
                    choices.push({
                        img: "sabotage.svg",
                        name: "Fahrzeug sabotieren",
                        id: 13,
                        type: type
                    })
                    choices.push({
                        img: "bomb.svg",
                        name: "Haftbombe anbringen",
                        id: 14,
                        type: type
                    })
                }
            }
            if (selectetEnitity.getVariable("BlockedVehicle") != null) {
                choices.push({
                    img: "cogs.svg",
                    name: "Radkralle entfernen",
                    id: 12,
                    type: type
                })
            }
            let hasHandsUp = AnimationManager.animationPlaying && AnimationManager.animationPlaying.id == 36;
            choices.push({
                name: hasHandsUp ? "Hände runter" : "Hände hoch",
                img: hasHandsUp ? "hands_up_giveup.svg" : "hands_up_normal.svg",
                id: 15,
                type: type
            })
        }
        else if (type == "player") {
            let hasHandsUp = AnimationManager.animationPlaying && AnimationManager.animationPlaying.id == 36;
            choices.push({
                name: hasHandsUp ? "Hände runter" : "Hände hoch",
                img: hasHandsUp ? "hands_up_giveup.svg" : "hands_up_normal.svg",
                id: 11,
                type: type
            })

            if (selectetEnitity.getHealth() > 0) {
                choices.push({
                    img: "star.svg",
                    name: "Spieler bewerten",
                    id: 9,
                    type: type
                })
                choices.push({
                    img: "exchange.svg",
                    name: "Handeln",
                    id: 1,
                    type: type
                })
                choices.push({
                    img: "address.svg",
                    name: "Ausweis zeigen",
                    id: 2,
                    type: type
                })
                choices.push({
                    img: "mobile.svg",
                    name: "Kontakt senden",
                    id: 6,
                    type: type
                })
            } else {
                if (LocalGroupID >= 10) {
                    if (selectetEnitity.getVariable("GROUP") == 0 || selectetEnitity.getVariable("GROUP") == 3 || selectetEnitity.getVariable("GROUP") == 4) {
                        choices.push({
                            img: "search.svg",
                            name: "Spieler durchsuchen",
                            id: 12,
                            type: type
                        })
                    }
                }
            }

            if (LocalGroupID == 0 || LocalGroupID == 3 || LocalGroupID == 4) {
                if (HQPoliceRadio["Status"] != -1) {
                    choices.push({
                        img: "search.svg",
                        name: "Spieler durchsuchen",
                        id: 3,
                        type: type
                    })
                    if (selectetEnitity.isSwimming() == false && selectetEnitity.isSwimmingUnderWater() == false) {
                        choices.push({
                            img: "gavel.svg",
                            name: "Illegales abnehmen",
                            id: 7,
                            type: type
                        })
                    }
                    if (selectetEnitity.getHealth() == 0) {
                        choices.push({
                            img: "user-secret.svg",
                            name: "Spuren sicherstellen",
                            id: 8,
                            type: type
                        })
                    } else {
                        choices.push({
                            img: "cuff.svg",
                            name: "Handschellen",
                            id: 10,
                            type: type
                        })
                    }
                }
            }
            else if (LocalGroupID == 1) {
                choices.push({
                    name: 'Spieler heilen',
                    img: 'medkit.svg',
                    id: 4,
                    type: type
                })
                choices.push({
                    name: 'Spieler wiederbeleben',
                    img: 'ambulance.svg',
                    id: 5,
                    type: type
                })
            }

            if (Seats.canSitDown()) {
                choices.push({
                    img: "chair-solid.svg",
                    name: "Hinsetzen",
                    id: 13,
                    type: type,
                });
            }
            if (InHouse == true) {
                choices.push({
                    img: "tshirt-solid.svg",
                    name: "Umkleiden",
                    id: 14,
                    type: type,
                });
                if(InteriorEditorHasPermission == true){
                    choices.push({
                        img: "edit-solid.svg",
                        name: "Innenraumeditor",
                        id: 15,
                        type: type,
                    });
                }
            }
        }
        else if (type == "factoryrob") {
            choices = [{
                name: 'Fabrik ausrauben',
                img: 'bolt.svg',
                id: 1,
                type: type
            }, {
                name: 'Fabrik einnehmen',
                img: 'flag.svg',
                id: 2,
                type: type
            }];
        }
        else if (type == "factorycapture") {
            choices = [{
                name: 'Fabrik einnehmen',
                img: 'flag.svg',
                id: 1,
                type: type
            }];
        }
        else if (type == "self") {
            
            let hasHandsUp = AnimationManager.animationPlaying && AnimationManager.animationPlaying.id == 36;
            choices.push({
                name: hasHandsUp ? "Hände runter" : "Hände hoch",
                img: hasHandsUp ? "hands_up_giveup.svg" : "hands_up_normal.svg",
                id: 3,
                type: type,
            });

            if (MaxTimeUnderwater != 30) {
                choices.push({
                    img: "diving.svg",
                    name: "Tauchausrüstung ablegen",
                    id: 4,
                    type: type
                })
            }
            if (Seats.canSitDown()) {
                choices.push({
                    img: "chair-solid.svg",
                    name: "Hinsetzen",
                    id: 6,
                    type: type,
                });
            }
            if (InHouse == true) {
                choices.push({
                    img: "tshirt-solid.svg",
                    name: "Umkleiden",
                    id: 7,
                    type: type,
                });
                if(InteriorEditorHasPermission == true){
                    choices.push({
                        img: "edit-solid.svg",
                        name: "Innenraumeditor",
                        id: 8,
                        type: type,
                    });
                }
            }
            let gas_id = GetNextGasStation(0xB150279A);
            if (gas_id != -1) {
                TempSelectionGasStation = gas_id;
                choices.push({
                    img: "business.svg",
                    name: "Verwaltung",
                    id: 5,
                    type: type
                })
            }

        }
        else if (type == "raiting") {
            choices = [{
                name: 'Verhalten von ' + selectetEnitity + ' als Gut bewerten',
                img: 'smile.svg',
                id: 1,
                type: type
            }, {
                name: 'Verhalten von ' + selectetEnitity + ' als Mittel bewerten',
                img: 'meh.svg',
                id: 2,
                type: type
            }, {
                name: 'Verhalten von ' + selectetEnitity + ' als Schlecht bewerten',
                img: 'frown.svg',
                id: 3,
                type: type
            }];
        }
        else if (type == "farmer") {
            if (InventoryItems["50"] > 0) {
                choices.push({
                    name: 'Dünger',
                    img: 'mulch.svg',
                    id: 8,
                    type: type
                })
            }
            if (farmer_plants["potato"]) {
                choices.push({
                    name: 'Kartoffel',
                    img: 'potato.svg',
                    id: 1,
                    type: type
                })
            }
            if (farmer_plants["onion"]) {
                choices.push({
                    name: 'Zwiebeln',
                    img: 'onion.svg',
                    id: 2,
                    type: type
                })
            }
            if (farmer_plants["carrot"]) {
                choices.push({
                    name: 'Karotten',
                    img: 'carrot.svg',
                    id: 3,
                    type: type
                })
            }
            if (farmer_plants["salat"]) {
                choices.push({
                    name: 'Kopfsalat',
                    img: 'salat.svg',
                    id: 4,
                    type: type
                })
            }
            if (farmer_plants["cucumber"]) {
                choices.push({
                    name: 'Gurke',
                    img: 'cucumber.svg',
                    id: 5,
                    type: type
                })
            }
            if (farmer_plants["wheat"]) {
                choices.push({
                    name: 'Weizen',
                    img: 'wheat.svg',
                    id: 6,
                    type: type
                })
            }
            if (farmer_plants["pumpkin"]) {
                choices.push({
                    name: 'Kürbis',
                    img: 'pumpkin.svg',
                    id: 7,
                    type: type
                })
            }
        }

        if ((LocalGroupID > 10 || LocalGroupID == 3) && (type != "raiting")) {
            let turfData;
            gangturfs.forEach(function (turf, id) {
                if (turf.isInsideArea() == true) {
                    turfData = turf;
                }
            });
            if (turfData) {
                if (turfData.isInsideArea() == true) {
                    if (turfData.isNearGround() == true) {
                        if (turfData.isOwner(LocalGroupID) == false) {
                            choices.push({
                                img: "gangwar.svg",
                                name: "Ganggebiet Angreifen",
                                id: turfData.id,
                                type: "gangarea"
                            })
                        }
                    }
                }
            }
        }
        Selection.mapChoices(choices)
        Selection.toggle();
    }
}

function getAnimationChoices() {
    if (Selection.visible == false) {
        let choices = [];

        let animationWheel = mp.storage.data.animationWheel;

        for (let id in animationWheel) {
            let animation = animationWheel[id];
            choices.push({
                name: animation.name,
                img: animationIcons[animation.iconId],
                id: animation.id,
                flag: animation.flag,
                type: "animation"
            })
        }

        Selection.mapChoices(choices)
        Selection.toggle();
    }
}

var EngineLastTick = 0;
mp.events.add("pickSelection", (item) => {
    item = JSON.parse(item);
    let type = item.type;
    let id = item.id;
    if (Selection.visible == true) {

        Selection.toggle();
        if (type == "none") {
            return;
        }

        if (type == "player") {
            if (selectetEnitity != null) {
                if (mp.players.exists(selectetEnitity) == false) {
                    return;
                }
            }
        }
        if (type == "incar" || type == "outcar") {
            if (selectetEnitity != null) {
                if (mp.vehicles.exists(selectetEnitity) == false) {
                    return;
                }
            }
        }
        if (type == "incar") {
            if(mp.players.local.isInAnyVehicle(false) == false){
                 return;
            }
        }
        if (type == "outcar") {
            if(mp.players.local.isInAnyVehicle(true) == true){
                 return;
            }
        }

        if (type == "incar" || type == "outcar") {
            if (id == 1) {
                var tick = new Date().getTime();
                if (tick - EngineLastTick >= 1000) {
                    if (selectetEnitity.getPedInSeat(-1) == mp.players.local.handle) {
                        if (hasLocalPlayerVehicleAccess(selectetEnitity)) {
                            if (selectetEnitity.getIsEngineRunning() == true) {
                                CommunicationManager.TriggerServer("onClientRequestPrivateVehicleAction", "engine_off");
                            } else {
                                CommunicationManager.TriggerServer("onClientRequestPrivateVehicleAction", "engine_on");
                            }
                        }
                    }
                }
            } else if (id == 4) {
                if (selectetEnitity.getVariable("PRIVATE_VEHICLE_OWNER") != null) {
                    if (StorageOpen == true) {
                        requestCloseStorageWindow();
                    } else if (StorageOpen == false) {
                        CommunicationManager.TriggerServer("onClientRequestPrivateVehicleStorage", selectetEnitity);
                    }
                }
            } else if (id == 6) {
                if (hasPlayerSeatbelt == true) {
                    SetPlayerSeatbelt(false, true);
                } else {
                    SetPlayerSeatbelt(true, true);
                }
            } else if (id == 15) {
                AnimationManager.playAnimation(36, 49);
            } else if (id == 26) {
                if (FishNets.getNearestNet() !== null) {
                    let net = FishNets.getNearestNet();
                    CommunicationManager.TriggerServer("onClientPickupFishnet", net.ID);
                }
            } else if (id == 27) {
                if (FishNets.getNearestNet() !== null) {
                    let net = FishNets.getNearestNet();
                    CommunicationManager.TriggerServer("onClientRepairFishnet", net.ID);
                }
            } else if (id == 28) {
                CommunicationManager.TriggerServer("OnClientRequestOpenRaceWindow");
            } else if (id == 29) {
                HasOpenRaceInvitation = false;
                CommunicationManager.TriggerServer("OnClientRequestStartRace");
            } else if (id == 30) {
                CommunicationManager.TriggerServer("OnClientRequestPutBagOutOfVehicle", selectetEnitity);
            } else if (id == 31) {
                CommunicationManager.TriggerServer("OnClientRequestPutBagIntoVehicle", selectetEnitity);
            } else if (id == 32) {
                CommunicationManager.TriggerServer("OnClientRequestWaterEquipment");
            } else if (id == 33) {
                CommunicationManager.TriggerServer("OnClientRequestOpenGasStation", TempSelectionGasStation);
            } else if (id == 40) {
                CommunicationManager.TriggerServer("OnClientRequestOpenTruckerMissionOverview");
            } else if (id == 80) {
                ///////////////////////// FAHRZEUG RUNTER
            } else if (id == 81) {
                TowTruckPlayerTryToLoad(selectetEnitity);
            } else {
                CommunicationManager.TriggerServer("onClientRequestVehicleAction", id, selectetEnitity);
            }
        }
        else if (type == "player") {
            var target_name = selectetEnitity.name;
            if (id == 1) {
                CommunicationManager.TriggerServer("onClientRequestTrade", target_name);
            } else if (id == 2) {
                CommunicationManager.TriggerServer("onClientRequestIdShow", target_name);
            } else if (id == 3) {
                CommunicationManager.TriggerServer("onClientRequestSearch", target_name);
            } else if (id == 4) {
                CommunicationManager.TriggerServer("onClientRequestHealPlayer", target_name);
            } else if (id == 5) {
                CommunicationManager.TriggerServer("OnClientRequestRevivePlayer", target_name, false);
            } else if (id == 6) {
                CommunicationManager.TriggerServer("onClientRequestSendPhoneContact", target_name);
            } else if (id == 7) {
                CommunicationManager.TriggerServer("onClientRequestTakeIllegal", target_name);
            } else if (id == 8) {
                CommunicationManager.TriggerServer("onClientRequestCheckKiller", target_name);
            } else if (id == 9) {
                selectetEnitity = target_name;
                getSelectionChoices("raiting");
            } else if (id == 10) {
                CommunicationManager.TriggerServer("onClientRequestCuffPlayer", target_name);
            } else if (id == 11) {
                AnimationManager.playAnimation(36, 49);
            } else if (id == 12) {
                CommunicationManager.TriggerServer("onClientRequestSearchFIB", target_name);
            } else if (id == 13) {
                Seats.trySitDown();
            } else if (id == 14) {
                OnClientRequestOpenWardrobe();
            } else if (id == 15) {
                OnPlayerRequestHouseEditorOpen();
            }
        } else if (type == "factoryrob") {
            if (id == 1) {
                CommunicationManager.TriggerServer("onClientRequestFactoryRob");
            } else if (id == 2) {
                CommunicationManager.TriggerServer("onClientRequestFactoryCapture");
            }
        } else if (type == "factorycapture") {
            if (id == 1) {
                CommunicationManager.TriggerServer("onClientRequestFactoryCapture");
            }
        } else if (type == "self") {
            if (id == 2) {
                CommunicationManager.TriggerServer("OnClientOpenSelfOverview");
            } else if (id == 3) {
                AnimationManager.playAnimation(36, 49);
            } else if (id == 4) {
                ResetPlayerMaxTimeUnderwater();
            } else if (id == 5) {
                CommunicationManager.TriggerServer("OnClientRequestOpenGasstationManager", TempSelectionGasStation);
            } else if (id == 6) {
                Seats.trySitDown();
            } else if (id == 7) {
                OnClientRequestOpenWardrobe();
            } else if (id == 8) {
                OnPlayerRequestHouseEditorOpen();
            } else if (id == 9) {
                let bomb_id = GetNextPlantedBomb();
                if(bomb_id != ""){
                    CommunicationManager.TriggerServer("OnClientRequestDefuseBomb", bomb_id);
                }
            }
        } else if (type == "raiting") {
            if (id == 1) {
                CommunicationManager.TriggerServer("onClientRequestUpdatePlayerRaiting", selectetEnitity, 1);
            } else if (id == 2) {
                CommunicationManager.TriggerServer("onClientRequestUpdatePlayerRaiting", selectetEnitity, 0);
            } else if (id == 3) {
                CommunicationManager.TriggerServer("onClientRequestUpdatePlayerRaiting", selectetEnitity, -1);
            }
        } else if (type == "gangarea") {
            CommunicationManager.TriggerServer("OnClientRequestGangAreaAttack", id);
        } else if (type == "farmer") {
            CommunicationManager.TriggerServer("OnClientRequestChangeFarmerPlant", id);
        } else if (type == "animation") {
            AnimationManager.playAnimation(id, item.flag);
        }
    }
});
mp.events.add("playHoverSound", () => {
    mp.game.audio.playSoundFrontend(1, 'Select_Placed_Prop', 'DLC_Dmod_Prop_Editor_Sounds', true);
});
mp.events.add("sentPlayerReferred", (...args) => {

    CEFUtility.CloseAll();

    if (Webwindow["UserWerbenUser"] == null) {
        Webwindow["UserWerbenUser"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/player/recruit/recruit.html", true);
        Webwindow["UserWerbenUser"].start("generateTimeline", JSON.stringify(args));
    }
})

CommunicationManager.AddWebBrowserEvent("OnClientRequestUserBenefits", (eventName, ...args) => {
    switch (eventName) {
        case "close":
            Webwindow["UserWerbenUser"].destroy();
            delete Webwindow["UserWerbenUser"];
            break;
        case "getBonus": {
            const [id] = args;
            CommunicationManager.TriggerServer("onClientGetBonus", id);
        }
            break;
        case "backToMainMenu":
            Webwindow["UserWerbenUser"].destroy();
            delete Webwindow["UserWerbenUser"];
            CommunicationManager.TriggerServer("OnClientOpenSelfOverview");
            break;
    }
}, "UserWerbenUser");

mp.events.add("askPlayerRaiting", (...args) => {
    if (Selection.visible == false) {
        selectetEnitity = args[0];
        getSelectionChoices("raiting");
    }
})
mp.events.add("playerStartEnterVehicle", (vehicle, toSeat) => {
    if (Selection.visible == true) {
        Selection.toggle();
    }
})



var currentCamCarShop = {
    x: 0,
    y: 0,
    z: 0,
    r: 45,
    dist: 6
}
var MainCamCarShop;

let MainCarShopSpawnpointBasic = new mp.Vector3(-336.1386, -134.9311, 38);
let MainCarShopSpawnpointBasicRot = -105;

mp.events.add("ShopOpen", (...args) => {
    if (Webwindow["ShopWindow"] == null) {
        if (mp.gui.cursor.visible) {
            return;
        }
        Webwindow["ShopWindow"] = false;
        var ShopTable = {};

        ShopTable["ShopType"] = args[0];
        ShopTable["PlayerInventory"] = JSON.parse(args[1]);
        ShopTable["OfferItems"] = JSON.parse(args[2]);
        ShopTable["MaxInventorySize"] = InventoryMaxSize;

        Webwindow["ShopWindow"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/shop/shop.html", true);
        Webwindow["ShopWindow"].start('shop:init', lang_de.items, ShopTable);
    }
})
mp.events.add("BonusShopOpenForceNamechange", () => {
    if (Webwindow["BonusShop"] == null) {
        Webwindow["BonusShop"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/bonusshop/bonusshop.html", true);
        Webwindow["BonusShop"].start('bonusshop:init-namechange');

        setInterval(function () {
            disableAllControls = true;
            // mp.players.local.freezePosition(true);
            VioRageManager.FreezePosition(mp.players.local, false);
            VioRageManager.ShowChat(false);
            VioRageManager.ActivateChat(false);
            mp.game.invoke('0xAAB3200ED59016BC', mp.players.local.handle, 0, parseInt(1));
        }, 500);
    }
})
CommunicationManager.AddWebBrowserEvent("requestCloseBonusShop", () => {
    CloseWindow("BonusShop");
}, "BonusShop");
CommunicationManager.AddWebBrowserEvent("requestBuyBonusShop", (orderid, argument) => {
    if (orderid == 1 || orderid == 2 || orderid == 3 || orderid == 4) {
        CloseWindow("BonusShop");
        CommunicationManager.TriggerServer("OnClientRequestBonusShopAction", orderid, argument);
    }
}, "BonusShop");

CommunicationManager.AddWebBrowserEvent("requestCloseDealerShop", () => {
    CloseWindow("ShopWindow");
}, "ShopWindow");

CommunicationManager.AddWebBrowserEvent("requestBuyDealerShop", (window, pCart) => {
    if (Webwindow["ShopWindow"].isAtStartPosition == true) {
        CommunicationManager.TriggerServer("OnClientRequestShopBuy", window, pCart);
        CloseWindow("ShopWindow");
    }
}, "ShopWindow");


var CarHouseTable = []
var CarHouses = 14
var CarHouse = 0
var CarHouseTempVehicle = null;


function CloseWindow(pWindow) {
    if (Webwindow[pWindow] != null) {
        Webwindow[pWindow].destroy();
        Webwindow[pWindow] = null;
    }
}

function sleep(milliseconds) {
    var start = new Date().getTime();
    for (var i = 0; i < 1e7; i++) {
        if ((new Date().getTime() - start) > milliseconds) {
            break;
        }
    }
}

function onGround() {
    CarHouseTempVehicle.setOnGroundProperly();
}

mp.events.add("CarShopOpen", (arg0, arg1, arg2, dim) => {

    CarHouse = Number(arg1);

    if(CarHouse == 9 || CarHouse == 13){
        MainCarShopSpawnpointBasic = new mp.Vector3(-1275.6, -3387.7, 15);
        MainCarShopSpawnpointBasicRot = -32;
    }else{
        MainCarShopSpawnpointBasic = new mp.Vector3(-336.1386, -134.9311, 38);
        MainCarShopSpawnpointBasicRot = -105;
    }

    var temptable = JSON.parse(arg0);
    for (let i = 1; i <= CarHouses; i++) {
        CarHouseTable[i] = {}
        CarHouseTable[i]["items"] = {}
        CarHouseTable[i]["mode"] = "buy"
        CarHouseTable[i]["testDriveAvailable"] = Boolean(i < 9)
        CarHouseTable[i]["money"] = 0
        for (let y in temptable) {
            if (temptable[y]["Shop"] == i) {
                var car = {
                    price: temptable[y]["Price"],
                    name: temptable[y]["Name"],
                    modelName: temptable[y]["ModelName"],
                    storage: temptable[y]["Storage"],
                    MaxFuel: temptable[y]["MaxFuel"],
                    EngineConsumption: temptable[y]["EngineConsumption"],
                    DistanceConsumption: temptable[y]["DistanceConsumption"],
                    FuelName: temptable[y]["FuelName"],
                    drawable: true
                };
                CarHouseTable[i]["items"][y] = car;
            }
        }
    }

    for (let veh_data in CarHouseTable[CarHouse]["items"]) {
        let veh_name = CarHouseTable[CarHouse]["items"][veh_data].modelName;
        CarHouseTable[CarHouse]["items"][veh_data].Class = mp.game.vehicle.getVehicleClassFromName(mp.game.joaat(veh_name));
        CarHouseTable[CarHouse]["items"][veh_data].Acceleration = mp.game.vehicle.getVehicleModelAcceleration(mp.game.joaat(veh_name));
        CarHouseTable[CarHouse]["items"][veh_data].Braking = mp.game.vehicle.getVehicleModelMaxBraking(mp.game.joaat(veh_name));
        CarHouseTable[CarHouse]["items"][veh_data].NumberOfPassengers = mp.game.vehicle.getVehicleModelMaxNumberOfPassengers(mp.game.joaat(veh_name));
        CarHouseTable[CarHouse]["items"][veh_data].Speed = mp.game.vehicle.getVehicleModelMaxSpeed(mp.game.joaat(veh_name));
        CarHouseTable[CarHouse]["items"][veh_data].Traction = mp.game.vehicle.getVehicleModelMaxTraction(mp.game.joaat(veh_name));
    }

    // mp.players.local.freezePosition(true);
    VioRageManager.FreezePosition(mp.players.local, false);
    disableAllControls = true;
    ToogleHudStatus(false, false);

    //let MainCarShopSpawnpointBasic = new mp.Vector3(-336.1386, -134.9311, 38); // CAM : new mp.Vector3(-332, -141.5, 39.4)
    //MainCamCarShop = mp.cameras.new("Carshop", new mp.Vector3(MainCarShopSpawnpointBasic.x + 4, MainCarShopSpawnpointBasic.y - 6.5, MainCarShopSpawnpointBasic.z + 1.4), new mp.Vector3(0, 0, 0), 50);

    // new mp.Vector3(-1275.6, -3387.7, 15); // -1266, -3365

    if(CarHouse == 9|| CarHouse == 13){
        MainCamCarShop = mp.cameras.new("Carshop", new mp.Vector3(MainCarShopSpawnpointBasic.x + 9, MainCarShopSpawnpointBasic.y + 22, MainCarShopSpawnpointBasic.z + 1.4), new mp.Vector3(0, 0, 0), 50);
    }else{
        MainCamCarShop = mp.cameras.new("Carshop", new mp.Vector3(MainCarShopSpawnpointBasic.x + 5, MainCarShopSpawnpointBasic.y - 7.5, MainCarShopSpawnpointBasic.z + 1.4), new mp.Vector3(0, 0, 0), 50);
    }

    MainCamCarShop.pointAtCoord(MainCarShopSpawnpointBasic.x, MainCarShopSpawnpointBasic.y, MainCarShopSpawnpointBasic.z);
    MainCamCarShop.setActive(true);

    mp.game.cam.renderScriptCams(true, false, 0, true, false);
    isPlayerOnTuningPlace = true;

    CarHouseTable[CarHouse]["mode"] = "carshop";
    CarHouseTable[CarHouse]["money"] = InventoryItems["0"];
    if (arg1 != null) {
        CarHouseTable[CarHouse]["money"] = arg2;
    }

    Webwindow["CarShopWindow"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/car_dealer/index.html", true)
    Webwindow["CarShopWindow"].start('init', JSON.stringify(CarHouseTable[CarHouse]));
})

CommunicationManager.AddWebBrowserEvent("moveCarShopCam", (dX, dY, dZ) => {
    if (CarHouseTempVehicle != null) {
        if (dX != "none") {
            if (dX == "right") {
                currentCamCarShop.r += 2;
            } else if (dX == "left") {
                currentCamCarShop.r -= 2;
            }
        }
        if (dY != "none") {
            if (dY == "up") {
                currentCamCarShop.z += 0.05;
            } else if (dY == "down") {
                currentCamCarShop.z -= 0.05;
            }
        }
        if (dZ != "none") {
            if (dZ == "in") {
                currentCamCarShop.dist -= 0.12;
            } else if (dZ == "out") {
                currentCamCarShop.dist += 0.12;
            }
        }

        //let MainCarShopSpawnpointBasic = new mp.Vector3(-336.1386, -134.9311, 38); // CAM : new mp.Vector3(-332, -141.5, 39.4)
        if(CarHouse == 9|| CarHouse == 13){
            if (currentCamCarShop.z > (CarHouseTempVehicle.position.z + 2)) currentCamCarShop.z = (CarHouseTempVehicle.position.z + 2);
            if (currentCamCarShop.z < MainCarShopSpawnpointBasic.z + 0.5) currentCamCarShop.z = MainCarShopSpawnpointBasic.z + 0.5;
            if (currentCamCarShop.r < 0) currentCamCarShop.r = 360;
            if (currentCamCarShop.r > 360) currentCamCarShop.r = 0;
            if (currentCamCarShop.dist < 12) currentCamCarShop.dist = 12; // 3
            if (currentCamCarShop.dist >= 20) currentCamCarShop.dist = 20; // 5
        }else{
            if (currentCamCarShop.z > (CarHouseTempVehicle.position.z + 2)) currentCamCarShop.z = (CarHouseTempVehicle.position.z + 2);
            if (currentCamCarShop.z < MainCarShopSpawnpointBasic.z + 0.5) currentCamCarShop.z = MainCarShopSpawnpointBasic.z + 0.5;
            if (currentCamCarShop.r < 0) currentCamCarShop.r = 360;
            if (currentCamCarShop.r > 360) currentCamCarShop.r = 0;
            if (currentCamCarShop.dist < 4) currentCamCarShop.dist = 4; // 3
            if (currentCamCarShop.dist >= 7) currentCamCarShop.dist = 7; // 5
        }

        let cPos = new mp.Vector3(CarHouseTempVehicle.position.x, CarHouseTempVehicle.position.y, currentCamCarShop.z).findRot(0, currentCamCarShop.dist, currentCamCarShop.r);
        let hit = mp.raycasting.testPointToPoint(CarHouseTempVehicle.position, cPos, mp.players.local, (1 | 16));
        if (hit) {
            cPos = hit.position
        }
        if (MainCamCarShop != null) {
            MainCamCarShop.setCoord(cPos.x, cPos.y, cPos.z)
        }
    }
});

CommunicationManager.AddWebBrowserEvent("requestCloseDealerCarShop", (window) => {
    if (window == "CarShop") {
        if (CarHouseTempVehicle != null) {
            if (Webwindow["CarShopWindow"] != null) {
                Webwindow["CarShopWindow"].destroy();
                Webwindow["CarShopWindow"] = null;
            }
            CommunicationManager.TriggerServer("requestCarShopClose", CarHouse);
            disableAllControls = false;
            ToogleHudStatus(true, true);
            // mp.players.local.freezePosition(false);
            VioRageManager.FreezePosition(mp.players.local, false);
            isPlayerOnTuningPlace = false;
            MainCamCarShop.setActive(false);
            MainCamCarShop.destroy();
            mp.game.cam.renderScriptCams(false, false, 0, true, false);
            CarHouseTempVehicle.destroy();
            CarHouseTempVehicle = null;
        }
    }
}, "CarShopWindow");


mp.events.add("playerLeaveVehicle", () => {
    if (isPlayerOnTuningPlace == true) {
        if (CarHouseTempVehicle != null) {
            CarHouseTempVehicle.destroy();
            CarHouseTempVehicle = null;
        }
        isPlayerOnTuningPlace = false;
        CommunicationManager.TriggerServer("requestCarShopClose", CarHouse);
    }
    SetPlayerSeatbelt(false, false)
})

CommunicationManager.AddWebBrowserEvent("requestCarShopTestDrive", (window, items, item) => {
    if (window == "CarShop") {
        if (CarHouseTempVehicle != null) {
            var VehPosition = null;
            var VehRotation = null;

            if (CarHouse == 1) {
                VehPosition = new mp.Vector3(-1113.211, -1685.809, 4.5);
                VehRotation = 262.977;
            }
            if (CarHouse == 2) {
                VehPosition = new mp.Vector3(266.307, -1159.744, 29.5);
                VehRotation = 90;
            }
            if (CarHouse == 3) {
                VehPosition = new mp.Vector3(-139.040, -1346.902, 30);
                VehRotation = 180.815;
            }
            if (CarHouse == 4) {
                VehPosition = new mp.Vector3(-23.678, -1677.325, 32);
                VehRotation = 117.446;
            }
            if (CarHouse == 5) {
                VehPosition = new mp.Vector3(-219.389, 6252.465, 31.3);
                VehRotation = 73.745;
            }
            if (CarHouse == 6) {
                VehPosition = new mp.Vector3(-56.322, -1116.951, 27);
                VehRotation = 3.365;
            }
            if (CarHouse == 7) {
                VehPosition = new mp.Vector3(-157.896, -1164.734, 24);
                VehRotation = 0.062;
            }
            if (CarHouse == 8) {
                VehPosition = new mp.Vector3(1210.977, 2721.915, 38);
                VehRotation = 176.323;
            }

            if (VehPosition != null) {
                if (Webwindow["CarShopWindow"] != null) {
                    Webwindow["CarShopWindow"].destroy();
                    Webwindow["CarShopWindow"] = null;
                }

                if (CarHouseTempVehicle != null) {

                    ToogleHudStatus(true, true);
                    MainCamCarShop.setActive(false);
                    MainCamCarShop.destroy();
                    mp.game.cam.renderScriptCams(false, false, 0, true, false);

                    mp.game.cam.doScreenFadeOut(100);

                    CarHouseTempVehicle.setDoorsLocked(1);

                    disableAllControls = true;

                    setTimeout(() => {
                        //mp.players.local.freezePosition(false)
                        if (CarHouseTempVehicle != null) {
                            mp.players.local.setIntoVehicle(CarHouseTempVehicle.handle, VioRageManager.GetSeatIdByBone("seat_dside_f"));
                            CarHouseTempVehicle.setEngineOn(true, true, true);
                            CarHouseTempVehicle.position = VehPosition;
                            CarHouseTempVehicle.setRotation(0, 0, VehRotation, 1, true);
                            // CarHouseTempVehicle.freezePosition(false);
                            VioRageManager.FreezePosition(CarHouseTempVehicle, false);
                            // mp.players.local.freezePosition(false)
                            VioRageManager.FreezePosition(mp.players.local, false);
                        }
                    }, 1500)

                    setTimeout(() => {
                        if (CarHouseTempVehicle != null) {
                            mp.players.local.setIntoVehicle(CarHouseTempVehicle.handle, VioRageManager.GetSeatIdByBone("seat_dside_f"));
                            CarHouseTempVehicle.setEngineOn(true, true, true);
                            CarHouseTempVehicle.setRotation(0, 0, VehRotation, 1, true);
                            CarHouseTempVehicle.setDoorsLocked(1);
                        }
                    }, 2000)

                    setTimeout(() => {
                        if (CarHouseTempVehicle != null) {
                            mp.players.local.setIntoVehicle(CarHouseTempVehicle.handle, VioRageManager.GetSeatIdByBone("seat_dside_f"));
                            CarHouseTempVehicle.position = VehPosition;
                            CarHouseTempVehicle.setRotation(0, 0, VehRotation, 1, true);
                            CarHouseTempVehicle.setOnGroundProperly();
                            CarHouseTempVehicle.setDoorsLocked(1);
                            SetPlayerSeatbelt(true, true)
                        }
                        mp.game.cam.doScreenFadeIn(4000);
                        disableAllControls = false;
                    }, 3000)
                }
            }
        }
    }
}, "CarShopWindow");

function CreateLocalPlayerCarShopTestVehicle(item) {

    if (Webwindow["CarShopWindow"] != null) {

        if (CarHouseTempVehicle != null) {
            CarHouseTempVehicle.destroy();
            CarHouseTempVehicle = null;
        }

        let vehModel = CarHouseTable[CarHouse]["items"][item].modelName;
        let vehHash = mp.game.joaat(vehModel);

        //VioRageManager.SendChatMessage("vehModel: " + vehModel);
        //VioRageManager.SendChatMessage("vehHash: " + vehHash);

        if(vehModel == "tailgater2"){
            //vehHash = 0xB5D306A4;
        }

        CarHouseTempVehicle = mp.vehicles.new(vehHash, MainCarShopSpawnpointBasic,
        {
            heading: MainCarShopSpawnpointBasicRot,
            dimension: mp.players.local.dimension,
            numberPlate: "Vio-V"
        });

        // CarHouseTempVehicle.freezePosition(false);
        VioRageManager.FreezePosition(CarHouseTempVehicle, false);
        CarHouseTempVehicle.setRotation(0, 0, MainCarShopSpawnpointBasicRot, 1, true);
        CarHouseTempVehicle.setDoorsLocked(2);
        CarHouseTempVehicle.setDeformationFixed();
        CarHouseTempVehicle.setProofs(true, true, true, true, true, true, true, true);
        CarHouseTempVehicle.setOnGroundProperly();


        if (vehModel == "marquis") {
            // CarHouseTempVehicle.freezePosition(true);
            VioRageManager.FreezePosition(CarHouseTempVehicle, true);
            CarHouseTempVehicle.position = new mp.Vector3(MainCarShopSpawnpointBasic.x, MainCarShopSpawnpointBasic.y, MainCarShopSpawnpointBasic.z - 0.2);
        }
        if (vehModel == "speeder") {
            CarHouseTempVehicle.position = new mp.Vector3(MainCarShopSpawnpointBasic.x, MainCarShopSpawnpointBasic.y, MainCarShopSpawnpointBasic.z + 0.2);
        }
        if (vehModel == "maverick") {
            // CarHouseTempVehicle.freezePosition(true);
            VioRageManager.FreezePosition(CarHouseTempVehicle, true);
            CarHouseTempVehicle.setRotation(0, 0, MainCarShopSpawnpointBasicRot, 1, true);
            CarHouseTempVehicle.position = new mp.Vector3(MainCarShopSpawnpointBasic.x, MainCarShopSpawnpointBasic.y, MainCarShopSpawnpointBasic.z + 0.5);
        }
        if (vehModel == "seashark") {
            CarHouseTempVehicle.position = new mp.Vector3(MainCarShopSpawnpointBasic.x, MainCarShopSpawnpointBasic.y, MainCarShopSpawnpointBasic.z - 0.2);
        }
        if (vehModel == "dinghy") {
            CarHouseTempVehicle.position = new mp.Vector3(MainCarShopSpawnpointBasic.x, MainCarShopSpawnpointBasic.y, MainCarShopSpawnpointBasic.z - 0.4);
        }

        MainCamCarShop.pointAt(CarHouseTempVehicle.handle, 0, 0, 0, true);
        MainCamCarShop.setActive(true);
        mp.game.cam.renderScriptCams(true, false, 0, true, false);
    }
}

var CarShopSpamBlock;

CommunicationManager.AddWebBrowserEvent("requestTryDealerCarShop", (window, items, item) => {
    if (window == "CarShop") {
        if (CarHouseTempVehicle != null) {
            CarHouseTempVehicle.destroy();
            CarHouseTempVehicle = null;
        }

        MainCamCarShop.setActive(true);
        mp.game.cam.renderScriptCams(true, false, 0, true, false);

        clearTimeout(CarShopSpamBlock);
        CarShopSpamBlock = setTimeout(function () {
            CreateLocalPlayerCarShopTestVehicle(item);
        }, 1500);
    }
}, "CarShopWindow");
CommunicationManager.AddWebBrowserEvent("requestBuyDealerCarShop", (window, item_obj, unused) => {
    if (window == "CarShop") {
        if (CarHouseTempVehicle != null) {
            if (Webwindow["CarShopWindow"] != null) {
                Webwindow["CarShopWindow"].destroy();
                Webwindow["CarShopWindow"] = null;
            }
            // mp.players.local.freezePosition(false);
            VioRageManager.FreezePosition(mp.players.local, false);
            disableAllControls = false;
            ToogleHudStatus(true, true);
            isPlayerOnTuningPlace = false;
            MainCamCarShop.setActive(false);
            MainCamCarShop.destroy();
            mp.game.cam.renderScriptCams(false, false, 0, true, false);
            if (CarHouseTempVehicle != null) {
                CarHouseTempVehicle.destroy();
                CarHouseTempVehicle = null;
            }

            let tmp = JSON.parse(item_obj);
            var vehname = tmp["item"];
            CommunicationManager.TriggerServer("requestCarShopBuy", vehname);
        }
    }
}, "CarShopWindow");


// Carflex BEGIN
CommunicationManager.AddServerEvent("OnServerRequestVehicleRentOpen", (data) => {
    if (Webwindow["RentWindow"] == null) {
        if (mp.gui.cursor.visible) {
            return;
        }
        Webwindow["RentWindow"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/carflex/carflex.html", true);
        Webwindow["RentWindow"].start('InitVehicleRent', data, Number(InventoryItems["0"]));
    }
});

CommunicationManager.AddWebBrowserEvent("OnClientRequestVehicleRentClose", () => {
    CloseWindow("RentWindow");
}, "RentWindow");

CommunicationManager.AddWebBrowserEvent("OnClientRequestVehicleRent", (item, duration) => {
    if (Webwindow["RentWindow"].isAtStartPosition == true) {
        CommunicationManager.TriggerServer("OnClientRequestVehicleRent", item, duration);
        CloseWindow("RentWindow");
    }
}, "RentWindow");
// CARFLEX END

// HAYES BEGIN
CommunicationManager.AddServerEvent("HayesAutosOpen", (vehicleJson) => {
    if (Webwindow["HayesAutos"] == null) {
        if (mp.gui.cursor.visible) {
            return;
        }
        Webwindow["HayesAutos"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/hayes/hayes.html", true);
        Webwindow["HayesAutos"].start('InitHayesAutos', vehicleJson, Number(InventoryItems["0"]));
    }
});

CommunicationManager.AddWebBrowserEvent("requestCloseHayesAutos", () => {
    CloseWindow("HayesAutos");
}, "HayesAutos");

CommunicationManager.AddWebBrowserEvent("OnClientRequestHayesAutosRequestBuyVehicle", (id) => {
    if (Webwindow["HayesAutos"].isAtStartPosition == true) {
        CommunicationManager.TriggerServer("requestHayesAutos", id);
    }
    CloseWindow("HayesAutos");
}, "HayesAutos");
// HAYES END

var ClothShopSettings = {
    easeTime: 1000,
    defaultZoom: 1.55,
    isCamActive: false,
    camera: null,
    oldturn: null,
    ShopID: 0,
    olddirection: null,
    InitPosition: null,
    InitRotation: null
};

// Const um Bone ID zu Name zu erhalten
const Bone_To_ID = {
    SKEL_ROOT: 0, FB_R_Brow_Out_000: 1356, SKEL_L_Toe0: 2108, MH_R_Elbow: 2992, SKEL_L_Finger01: 4089,
    SKEL_L_Finger02: 4090, SKEL_L_Finger31: 4137, SKEL_L_Finger32: 4138, SKEL_L_Finger41: 4153,
    SKEL_L_Finger42: 4154, SKEL_L_Finger11: 4169, SKEL_L_Finger12: 4170, SKEL_L_Finger21: 4185,
    SKEL_L_Finger22: 4186, RB_L_ArmRoll: 5232, IK_R_Hand: 6286, RB_R_ThighRoll: 6442,
    SKEL_R_Clavicle: 10706, FB_R_Lip_Corner_000: 11174, SKEL_Pelvis: 11816, IK_Head: 12844,
    SKEL_L_Foot: 14201, MH_R_Knee: 16335, FB_LowerLipRoot_000: 17188, FB_R_Lip_Top_000: 17719,
    SKEL_L_Hand: 18905, FB_R_CheekBone_000: 19336, FB_UpperLipRoot_000: 20178,
    FB_L_Lip_Top_000: 20279, FB_LowerLip_000: 20623, SKEL_R_Toe0: 20781, FB_L_CheekBone_000: 21550,
    MH_L_Elbow: 22711, SKEL_Spine0: 23553, RB_L_ThighRoll: 23639, PH_R_Foot: 24806, SKEL_Spine1: 24816,
    SKEL_Spine2: 24817, SKEL_Spine3: 24818, FB_L_Eye_000: 25260, SKEL_L_Finger00: 26610,
    SKEL_L_Finger10: 26611, SKEL_L_Finger20: 26612, SKEL_L_Finger30: 26613, SKEL_L_Finger40: 26614,
    FB_R_Eye_000: 27474, SKEL_R_Forearm: 28252, PH_R_Hand: 28422, FB_L_Lip_Corner_000: 29868,
    SKEL_Head: 31086, IK_R_Foot: 35502, RB_Neck_1: 35731, IK_L_Hand: 36029, SKEL_R_Calf: 36864,
    RB_R_ArmRoll: 37119, FB_Brow_Centre_000: 37193, SKEL_Neck_1: 39317, SKEL_R_UpperArm: 40269,
    FB_R_Lid_Upper_000: 43536, RB_R_ForeArmRoll: 43810, SKEL_L_UpperArm: 45509,
    FB_L_Lid_Upper_000: 45750, MH_L_Knee: 46078, FB_Jaw_000: 46240, FB_L_Lip_Bot_000: 47419,
    FB_Tongue_000: 47495, FB_R_Lip_Bot_000: 49979, SKEL_R_Thigh: 51826, SKEL_R_Foot: 52301,
    IK_Root: 56604, SKEL_R_Hand: 57005, SKEL_Spine_Root: 57597, PH_L_Foot: 57717, SKEL_L_Thigh: 58271,
    FB_L_Brow_Out_000: 58331, SKEL_R_Finger00: 58866, SKEL_R_Finger10: 58867, SKEL_R_Finger20: 58868,
    SKEL_R_Finger30: 58869, SKEL_R_Finger40: 58870, PH_L_Hand: 60309, RB_L_ForeArmRoll: 61007,
    SKEL_L_Forearm: 61163, FB_UpperLip_000: 61839, SKEL_L_Calf: 63931, SKEL_R_Finger01: 64016,
    SKEL_R_Finger02: 64017, SKEL_R_Finger31: 64064, SKEL_R_Finger32: 64065, SKEL_R_Finger41: 64080,
    SKEL_R_Finger42: 64081, SKEL_R_Finger11: 64096, SKEL_R_Finger12: 64097, SKEL_R_Finger21: 64112,
    SKEL_R_Finger22: 64113, SKEL_L_Clavicle: 64729, FACIAL_facialRoot: 65068, IK_L_Foot: 65245
}

const ClothesToComp = {
    "masks": 1,
    "torsos": 3,
    "legs": 4,
    "shoes": 6,
    "accessories": 7,
    "undershirts": 8,
    "tops": 11
}

const PropToComp = {
    "hats": 0,
    "glasses": 1,
    "ears": 2,
    "watches": 6,
    "bracelets": 7
}

// Focuspoints ohne "Bone" als Ziel
const BodyParts = {
    Torso: {
        HeightBone: "MH_R_Elbow",
        HeightMod: 0.4,
        DistanceMod: -0.2,
        Turn: false
    },
    Back: {
        HeightBone: "MH_R_Elbow",
        HeightMod: 0.4,
        DistanceMod: -0.2,
        Turn: true
    },
    Legs: {
        HeightBone: "MH_R_Knee",
        HeightMod: 0.3,
        DistanceMod: -0.3,
        Turn: false
    },
    Feet: {
        HeightBone: "SKEL_L_Foot",
        HeightMod: 0.3,
        DistanceMod: -0.7,
        Turn: false
    }
};

function SetCamera(pPos, pCamPos, pCamRot) {

    // VioRageManager.SendChatMessage(`Setcam: ${pCamPos.x},${pCamPos.y},${pCamPos.z}`);
    let oldcamera = ClothShopSettings.camera;

    ClothShopSettings.camera = mp.cameras.new('ClothShop',
        new mp.Vector3(pCamPos.x, pCamPos.y, pCamPos.z),
        new mp.Vector3(0, 0, pCamRot),
    50);

    ClothShopSettings.camera.pointAtCoord(pPos.x, pPos.y, pPos.z);

    if (oldcamera !== null && oldcamera !== undefined && oldcamera.isActive()) {
        ClothShopSettings.camera.setActiveWithInterp(oldcamera.handle, ClothShopSettings.easeTime, 0, 0);
        mp.game.cam.renderScriptCams(true, true, ClothShopSettings.easeTime, true, false);
    } else {
        ClothShopSettings.camera.setActive(true);
        mp.game.cam.renderScriptCams(true, true, ClothShopSettings.easeTime, true, false);
    }

    setTimeout(function () {
        ClothShopFunction.DestroyCam(oldcamera);
    }, ClothShopSettings.easeTime);
}

// Focus Bodypart, aufgerufen durch Browser
async function FocusBodyPart(pBodyPart) {
    var target = BodyParts[pBodyPart];
    let pos = mp.players.local.position;
    let rot = mp.players.local.getRotation(0);
    rot.z += 45; // cam offset
    let dist = ClothShopSettings.defaultZoom + target.DistanceMod;
    let campos;
    let camrot;
    if (ClothShopSettings.oldturn === null)
        ClothShopSettings.oldturn = target.Turn;

    // Prüfe Parameter und gibt ggf. Error
    if (target === undefined
        || target === null) {
        // mp.gui.chat.push("Fehler: Fokuspunkt '" + pBodyPart + "' nicht definiert.");
        // Standard: Torso
        target = BodyParts.Torso;
    }

    //Führe Kamera bei Richtungswechsel um den Körper herum!
    if (target.Turn !== ClothShopSettings.oldturn) {
        let modification = 90;
        if (ClothShopSettings.olddirection == 'R')
            modification = 270;
        campos = ClothShopFunction.CalcPos(pos, new mp.Vector3(0, 0, rot.z + modification), 1, 0.25);
        camrot = rot.z + modification + 180; // Kamera weiter auf Spieler gerichtet
        SetCamera(pos, campos, camrot);
        await Sleep(ClothShopSettings.easeTime - 200);
    }

    ClothShopSettings.oldturn = target.Turn;

    // Ermittel Position und Rotation von BodyParts
    pos.z = mp.players.local.getBoneCoords(Bone_To_ID[target.HeightBone], 0, 0, 0).z;
    if (target.Turn) /* Wenn "Turn" dann Punkt hinter den Spieler */
        rot.z = rot.z + 180; // PlayerTurn(ClothShopSettings.InitRotation.z + 180);
    /* else
        PlayerTurn(ClothShopSettings.InitRotation.z); */

    campos = ClothShopFunction.CalcPos(pos, rot, dist, target.HeightMod);
    if (target.Turn)
        camrot = mp.players.local.getRotation(0).z;
    else
        camrot = mp.players.local.getRotation(0).z + 180;

    SetCamera(pos, campos, camrot);
}

// Focus Bone, aufgerufen durch Browser, Ansicht nur von Vorne!!!
async function FocusBone(pBone) {
    if (ClothShopSettings.oldturn === null)
        ClothShopSettings.oldturn = false;
    let BoneID;
    let BoneIndex;
    BoneID = Bone_To_ID[pBone];
    let pos;
    let rot = mp.players.local.getRotation(0);
    rot.z += 45; // cam offset

    let distance;
    let dir = "";

    // Ausgangsposition Bestimmen
    if (BoneID === undefined
        || pBone === undefined
        || BoneID === null
        || pBone === null) {
        pos = mp.players.local.position;
        distance = ClothShopSettings.defaultZoom; // InitWert
        pos.z = pos.z + 0.15; // Height Modification
    } else {
        pos = mp.players.local.getBoneCoords(BoneID, 0, 0, 0);
        let bone_split = pBone.split("_");
        if (bone_split.length >= 2)
            dir = bone_split[1];

        // Rotation um 45° ändern, wenn L / R
        if (dir === 'R')
            rot.z = rot.z - 45;
        else if (dir === 'L')
            rot.z = rot.z + 45;

        // Pauschalwert
        distance = 0.65;

        // Foot = Tiefster Punkt, Ansicht kann bei unebenheit unter dem Boden fallen
        if (pBone.toUpperCase().includes("FOOT"))
            pos.z = pos.z + 0.15;
    }

    let campos;
    let camrot;

    //Führe Kamera bei Richtungswechsel um den Körper herum!
    if (ClothShopSettings.oldturn) {
        let modification = 90;
        if (ClothShopSettings.olddirection == 'R')
            modification = 270;
        campos = ClothShopFunction.CalcPos(pos, new mp.Vector3(0, 0, rot.z + modification), 1, 0.25);
        camrot = rot.z + modification + 180; // Kamera weiter auf Spieler gerichtet
        SetCamera(pos, campos, camrot);
        await Sleep(ClothShopSettings.easeTime - 200);
    }

    ClothShopSettings.oldturn = false;
    ClothShopSettings.olddirection = dir;
    campos = ClothShopFunction.CalcPos(pos, rot, distance, 0.2);
    camrot = rot.z + 180;
    SetCamera(pos, campos, camrot);
}

var ClothShopFunction = {
    InitCamera: () => {
        ClothShopSettings.isCamActive = true;
        // Focus whole body by default
        setTimeout(() => {
            ClothShopSettings.InitPosition = mp.players.local.position;
            ClothShopSettings.InitRotation = mp.players.local.getRotation(0);
            // FocusBone("");
        }, 250);
    },
    DeinitCamera: () => {
        // Cleanup Camera!

        mp.players.local.setCollision(true, true);
        setPlayerFrozen(false, false);

        ClothShopSettings.camera = ClothShopFunction.DestroyCam(ClothShopSettings.camera);
        ClothShopSettings.isCamActive = false;
        mp.game.cam.renderScriptCams(false, true, 0, true, false);

        ClothShopSettings.InitPosition = null;
        ClothShopSettings.InitRotation = null;
    },
    // Berechnung einer Position um einen Spieler herum abhängig vom Winkel
    CalcPos: (pPos, pRot, pDistance, pHeight = 0) => {
        let result = new mp.Vector3(0, 0, 0);
        let offset = new mp.Vector3(0, 0, 0);
        let degrees = Number(pRot.z) * Math.PI / 180 * -1;
        result.x = (Math.sin(degrees) * Number(pDistance)) + Number(pPos.x);
        result.y = (Math.cos(degrees) * Number(pDistance)) + Number(pPos.y);
        result.z = pPos.z + pHeight;

        offset.x = Math.sin(degrees + 90) * Number(.4);
        offset.y = Math.cos(degrees + 90) * Number(.4);

        result.x += offset.x;
        result.y += offset.y;
        result.z += offset.z;
        return result;
    },
    OnRender: () => {
        // Bewegungen durch Kameransicht unterbinden.
        if (ClothShopSettings.isCamActive) {

            switch (ClothShopSettings.ShopID) {
                case 1: // top
                    mp.players.local.setHeading(-58.229286);
                    mp.players.local.setDesiredHeading(-58.229286);
                    break;
                case 2: // mid
                    mp.players.local.setHeading(1118.18441);
                    mp.players.local.setDesiredHeading(1118.18441);
                    break;

                case 3: // low
                    mp.players.local.setHeading(-174.09854);
                    mp.players.local.setDesiredHeading(-174.09854);
                    break;
            }

            mp.game.controls.disableAllControlActions(0);

            mp.game.invoke('0xF4F2C0D4EE209E20'); // INVALIDATE_IDLE_CAM()
            mp.game.cam.renderScriptCams(true, true, ClothShopSettings.easeTime, true, false);
        }
    },
    DestroyCam(pCamera) {
        if (pCamera != null) {
            try {
                pCamera.setActive(false);
                pCamera.destroy(true);
            } catch (e) {
            }
        }
        pCamera = null;
        return pCamera;
    },
    PlayerTurn: (pRot) => {
        mp.players.local.setHeading(pRot);
        mp.players.local.setDesiredHeading(pRot);
    },
    isMale: () => {
        if (mp.players.local.isModel(mp.game.joaat("mp_m_freemode_01")))
            return true;
        return false;
    },
    ChatPush: (pString) => {
        VioRageManager.SendChatMessage("Test Clothshop: " + pString);
    },
    TryClothes: (pType, pSlotId, pDrawableId, pVariantId, pVariantData) => {
        let variantData = JSON.parse(pVariantData);
        const localPlayer = mp.players.local;
        const compId = pSlotId;

        if (pType == "comp") {

            localPlayer.setComponentVariation(parseInt(compId), parseInt(pDrawableId), parseInt(pVariantId), 0);

            if (compId == 11 || compId == 8) {
                if(variantData["BestTorsoDrawable"] != null){
                    localPlayer.setComponentVariation(ClothesToComp["torsos"], parseInt(variantData["BestTorsoDrawable"]), 0, 0)
                }
                //localPlayer.setComponentVariation(8, -1, -1, -1);
            }
        } else {
            localPlayer.setPropIndex(parseInt(compId), parseInt(pDrawableId), parseInt(pVariantId), true);
        }
        //localPlayer.setDefaultComponentVariation();
    }
};

CommunicationManager.AddServerEvent("UpdateClientClothShopMoney", (money) => {
    if (Webwindow["ClothShop"] != null) {
        Webwindow["ClothShop"].call("updatemoney", money);
    }
})

CommunicationManager.AddServerEvent("OpenClientClothShop", (pShopID, components_bought, prop_bought, a_top, a_top_t, a_undershirt, a_undershirt_t) => {
    // VioRageManager.SendChatMessage("Test: Öffne neuen Kleiderladen");

    if (Webwindow["ClothShop"] == null) {

        ToogleHudStatus(false, false);

        disableAllControls = true;
        mp.players.local.clearTasksImmediately();

        let gender = "female";
        if (ClothShopFunction.isMale())
            gender = "male";

        Webwindow["ClothShop"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/clothshop/clothshop.html", true, false);
        Webwindow["ClothShop"].start("init", gender, Number(InventoryItems["0"]), pShopID, components_bought, prop_bought, a_top, a_top_t, a_undershirt, a_undershirt_t);

        ClothShopSettings.ShopID = pShopID;

        //mp.players.local.setCollision(false, false);
        //setPlayerFrozen(true, true);

        switch (pShopID) {
            case 1: // top
                teleportCheck.freezeTimer(8);
                mp.players.local.position = new mp.Vector3(-704.9352, -151.9423, 37.41512);
                //mp.players.local.setRotation(0, 0, -58.229286, 1, true);
                mp.players.local.setHeading(-58.229286);
                mp.players.local.setDesiredHeading(-58.229286);
                break;
            case 2: // mid
                teleportCheck.freezeTimer(8);
                mp.players.local.position = new mp.Vector3(-1188.2914, -768.9021, 17.325298);
                //mp.players.local.setRotation(0, 0, 1118.18441, 1,true);
                mp.players.local.setHeading(1118.18441);
                mp.players.local.setDesiredHeading(1118.18441);
                break;

            case 3: // low
                teleportCheck.freezeTimer(8);
                mp.players.local.position = new mp.Vector3(72.4986, -1398.0304, 29.376152);
                //mp.players.local.setRotation(0, 0, -174.09854, 1, true);
                mp.players.local.setHeading(-174.09854);
                mp.players.local.setDesiredHeading(-174.09854);
                break;
        }

        ClothShopFunction.InitCamera();
    }
});

mp.events.add("OnClothShopEnd", () => {
    if (Webwindow["ClothShop"] != null) {
        Webwindow["ClothShop"].destroy();
        Webwindow["ClothShop"] = null;


        ClothShopFunction.DeinitCamera();
        CommunicationManager.TriggerServer("OnClientRequestCloseClothesShop");

        ToogleHudStatus(true, true);
    }
});

mp.events.add("FocusBodyPart", FocusBodyPart);
mp.events.add("FocusBone", FocusBone);
mp.events.add("TryClothes", ClothShopFunction.TryClothes);
mp.events.add("TryProps", ClothShopFunction.TryProps);
mp.events.add("render", ClothShopFunction.OnRender);
mp.events.add("ChatPush", ClothShopFunction.ChatPush);

CommunicationManager.AddWebBrowserEvent("OnClothShopBuy", (pType, pComponentID, pDrawableID, pTextureID) => {
    if (pType == "comp") {
        CommunicationManager.TriggerServer("OnClientRequestBuyClothesShop", pComponentID, pDrawableID, pTextureID);
        if (pComponentID == 11 || pComponentID == 8) {
            return;
        }
    } else {
        // TODO buy Props
    }
}, "ClothShop")

CommunicationManager.AddWebBrowserEvent("OnClothShopChange", (pType, pComponentID, pDrawableID, pTextureID) => {
    CreateNotify("~g~Kleidung gewechselt", 1);
    if (pType == "comp") {
        CommunicationManager.TriggerServer("OnClientRequestChangeClothesShop", pComponentID, pDrawableID, pTextureID);
        if (pComponentID == 11 || pComponentID == 8) {
            return;
        }
    } else {
        CommunicationManager.TriggerServer("OnClientRequestChangeClothesPropsShop", pComponentID, pDrawableID, pTextureID);
    }
}, "ClothShop");

CommunicationManager.AddWebBrowserEvent("OnBuyTopClothesShop", (TopDrawableID, TopTextureID, UndershirtDrawableID, UndershirtTextureID, BestTorso) => {

    if (Webwindow["ClothShop"] !== null) {
        Webwindow["ClothShop"].destroy();
        Webwindow["ClothShop"] = null;
    }

    CommunicationManager.TriggerServer("OnClientRequestBuyTopClothesShop", TopDrawableID, TopTextureID, UndershirtDrawableID, UndershirtTextureID, BestTorso);

    setTimeout(function(){
        ClothShopFunction.DeinitCamera();
        CommunicationManager.TriggerServer("OnClientRequestCloseClothesShop");

        ToogleHudStatus(true, true);
    }, 3000);
}, "ClothShop");

CommunicationManager.AddWebBrowserEvent("OnClientReportShopClothesError", (pType, pComponentID, pDrawableID, pTextureID) => {
    let genderId;
    if (ClothShopFunction.isMale()) {
        genderId = 1;
    } else {
        genderId = 0;
    }
    if (pComponentID == 1 && pType == "comp") {
        genderId = -1;
    }
    CommunicationManager.TriggerServer("OnClientReportShopClothesError", genderId, pComponentID, pDrawableID, pTextureID);
}, "ClothShop");

VioRageManager.registerConsoleCommand("testCloth", (componentId, drawableId, textureId) => {
    const componentHash = mp.game.invoke(
        "0x0368B3A838070348", // GET_HASH_NAME_FOR_COMPONENT
        mp.players.local.handle,
        componentId,
        drawableId,
        0
    ) >> 0;
    VioRageManager.ConsoleLog("warning", `componentHash = ${componentHash}`);
});

/**
 * Returns best Torso for given Component
 * @param {number} componentId
 * @param {number} drawableId
 * @param {number} textureId
 * @return {{lockHash: number, locate: number, textLabel: *, unk2: number, unk3: number, unk1: number, eCompType: number, drawableIndex: number, textureIndex: number, uniqueNameHash: number}}
 */
function clothShopGetBestTorsoFroCloth(componentId, drawableId, textureId) {
    const componentHash = mp.game.invoke("0x0368B3A838070348", mp.players.local.handle, componentId >> 0, drawableId >> 0, textureId >> 0);
    return mp.game.data.getShopPedComponent(componentHash);
}

mp.events.add("GunShopOpen", (...args) => {
    if (Webwindow["GunWindow"] == null) {
        if (mp.gui.cursor.visible) {
            return;
        }
        disableAllControls = true;
        var BarberTable = {};
        BarberTable["mode"] = "buy";
        BarberTable["money"] = args[0];
        BarberTable["items"] = JSON.parse(args[1]);

        Webwindow["GunWindow"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/dealer/dealer.html", true);
        Webwindow["GunWindow"].start('dealer:init', "GunShop", lang_de.items, JSON.stringify(BarberTable));
    }
})

mp.events.add("requestCloseDealerGunShop", (window) => {
    if (window == "GunShop") {
        Webwindow["GunWindow"].active(false);
        setTimeout(() => {
            if (Webwindow["GunWindow"] != null) {
                Webwindow["GunWindow"].destroy();
                Webwindow["GunWindow"] = null;
                disableAllControls = false;
            }
        }, 10)
    }
})
mp.events.add("requestCloseDealerTownHall", (window) => {
    if (window == "TownHall") {
        Webwindow["TownHallWindow"].active(false);
        setTimeout(() => {
            if (Webwindow["TownHallWindow"] != null) {
                Webwindow["TownHallWindow"].destroy();
                Webwindow["TownHallWindow"] = null;
                disableAllControls = false;
            }
        }, 10)
    }
})
mp.events.add("requestBuyDealerGunShop", (window, items, item) => {
    if (window == "GunShop") {
        Webwindow["GunWindow"].active(false);
        setTimeout(() => {
            CommunicationManager.TriggerServer("requestGunShopBuy", items);
            if (Webwindow["GunWindow"] != null) {
                Webwindow["GunWindow"].destroy();
                Webwindow["GunWindow"] = null;
                disableAllControls = false;
            }
        }, 10);
    }
})

var moneypersecond = 8;  // $50 alle 5 Sekunden
var maxmoney = 800;  // maximum Geld
var showmoneyinterval = 5;  // alle 5 Sekunden Geld anzeigen
var maxmsforpolicerob = 240000;  // wie lange der Polizei-Rob dauern soll
var maxmsforgangshoprob = 480000;  // wie lange der Gangshop dauern soll

var pedrobclasses = [];
var robrunning = [];
var robbingclass = null;
var lasttrigger = 0;
var robcounter = 0;
var lastrobid = -1;
var robstarttick = 0;
var gotproductinfo = [];
var poscheckedattime = [];


var pedRob = function (id, task, rob_Id) {
    /*
            VioRageManager.SendChatMessage("task "+task);
            VioRageManager.SendChatMessage("rob_Id "+rob_Id);*/
    this.ped = vioPeds[id];

    //this.hash = hash;
    this.pos = this.ped._pos;
    this.rot = this.ped._rot;
    this.task = task;
    if (pedrobclasses[task] == null)
        pedrobclasses[task] = [];
    this.id = pedrobclasses[task].length;
    pedrobclasses[task][this.id] = this;
    this.i = robcounter;
    this.robID = rob_Id;
    robcounter++;

}


pedRob.prototype.startRob = function () {
    robrunning[this.i] = true;
    poscheckedattime = [];
}


pedRob.prototype.stopRob = function () {
    robrunning[this.i] = null;
    lastrobid = -1;
}


var getNextPedRobClass = function () {
    for (var task in pedrobclasses) {
        if (pedrobclasses[task][0] != null) {
            for (var i = 0; i < pedrobclasses[task].length; i++) {
                if (mp.game.gameplay.getDistanceBetweenCoords(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, pedrobclasses[task][i].pos.x, pedrobclasses[task][i].pos.y, pedrobclasses[task][i].pos.z, true) <= 3) {
                    lastrobid = pedrobclasses[task][i].i;
                    return pedrobclasses[task][i];
                }
            }
        }
    }
    return null;
}

var getPedClassByTaskAndID = function (id, task) {
    if (pedrobclasses[task] != null)
        return pedrobclasses[task][id];
    return null;
}


function isBlockedWeapon(model) {
    let blockedModels = [0x8BB05FD7, 0xA2719263]
    if (blockedModels.indexOf(model) != -1) {
        return true;
    } else {
        return false;
    }
}

KeybindManager.registerVioKeyFunction("Interaktion", true, () => {
    if (robbingclass == null) {
        var tick = new Date().getTime();
        //Aiming

        if (mp.game.controls.isControlPressed(2, 25) && (lastrobid == -1 || robrunning[lastrobid] == null) && (lasttrigger == 0 || (tick - lasttrigger) > 1000)) {

            if (mp.players.local.isInAnyVehicle(true) == false) {

                if (!isBlockedWeapon(mp.players.local.weapon)) {
                    lasttrigger = tick;
                    var robpedclass = getNextPedRobClass();
                    if (robpedclass != null) {
                        CommunicationManager.TriggerServer("StartPedRobServer", robpedclass.robID, robpedclass.task);
                    }
                }
            }
        }
    }
})

var stopOwnRob = function () {
    robbingclass = null;
    robstarttick = 0;
    CommunicationManager.TriggerServer("StopPedRobServer");
}

mp.events.add("render", () => {
    if (robbingclass != null) {
        var mspassed = new Date().getTime() - robstarttick;
        if (poscheckedattime[Math.floor(mspassed / 400)] == null) {
            var lppos = mp.players.local.position;

            if (mp.game.gameplay.getDistanceBetweenCoords(lppos.x, lppos.y, lppos.z, robbingclass.pos.x, robbingclass.pos.y, robbingclass.pos.z, true) > 8) {
                stopOwnRob();
                return;
            }
            if (mp.players.local.isInAnyVehicle(true) == true) {
                stopOwnRob();
                return;
            }
            if (mp.players.local.getHealth() == 0) {
                stopOwnRob();
                return;
            }

            poscheckedattime[Math.floor(mspassed / 400)] = true;
        }
        switch (robbingclass.task) {

            case "policerob":
                if (mspassed >= maxmsforpolicerob && gotproductinfo[0] == null) {
                    gotproductinfo[0] = true;
                    mp.game.audio.playSoundFrontend(1, "LOCAL_PLYR_CASH_COUNTER_COMPLETE", "DLC_HEISTS_GENERAL_FRONTEND_SOUNDS", true);
                    stopOwnRob();
                }
                break;

            case "ammorob":
                if (mspassed >= maxmsforpolicerob && gotproductinfo[0] == null) {
                    gotproductinfo[0] = true;
                    mp.game.audio.playSoundFrontend(1, "LOCAL_PLYR_CASH_COUNTER_COMPLETE", "DLC_HEISTS_GENERAL_FRONTEND_SOUNDS", true);
                    stopOwnRob();
                }
                break;

            case "gangseller":
                if (mspassed >= maxmsforgangshoprob && gotproductinfo[0] == null) {
                    gotproductinfo[0] = true;
                    mp.game.audio.playSoundFrontend(1, "LOCAL_PLYR_CASH_COUNTER_COMPLETE", "DLC_HEISTS_GENERAL_FRONTEND_SOUNDS", true);
                    stopOwnRob();
                }
                break;
        }
    }
})

mp.events.add("StartPedRobClient", (...args) => {
    var robid = args[0];
    var robtype = args[1];
    var robpedclass = getPedClassByTaskAndID(robid, robtype);
    if (robpedclass != null) {
        robpedclass.startRob();
    }
})

mp.events.add("StartYourPedRobClient", (...args) => {
    robstarttick = new Date().getTime();
    var robid = args[0];
    var robtype = args[1];
    gotproductinfo = [];
    robbingclass = getPedClassByTaskAndID(robid, robtype);
    mp.game.audio.playSoundFrontend(1, "GO_NON_RACE", "HUD_MINI_GAME_SOUNDSET", true);  // Anpassen
})

mp.events.add("StopPedRobClient", (...args) => {
    var robid = args[0];
    var robtype = args[1];
    var robpedclass = getPedClassByTaskAndID(robid, robtype);
    if (robpedclass != null) {
        robpedclass.stopRob();
    }
})

function openTownhallWindow(money, items) {
    if (Webwindow["TownhallWindow"] == null) {
        if (mp.gui.cursor.visible) {
            return;
        }
        Webwindow["TownhallWindow"] = false;
        Webwindow["TownhallWindow"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/townhall/index.html", true);
        Webwindow["TownhallWindow"].start('initTownhallWindow', lang_de.townhall, money, items);
    }
}

mp.events.add("OpenTownhallWindow", openTownhallWindow);

function closeTownhallWindow() {
    if (Webwindow["TownhallWindow"] != null) {
        Webwindow["TownhallWindow"].destroy();
        Webwindow["TownhallWindow"] = null;
    }
}

CommunicationManager.AddWebBrowserEvent("closeTownhallWindow", closeTownhallWindow, "TownhallWindow");

function buyTownhallItem(id) {
    closeTownhallWindow();
    CommunicationManager.TriggerServer("OnClientRequestTownhallItem", id);
}

CommunicationManager.AddWebBrowserEvent("buyTownhallItem", buyTownhallItem, "TownhallWindow");

var currentCamMegaMallShop = {
    x: 0,
    y: 0,
    z: 0,
    r: 45,
    dist: 6
}
var MainCamMegaMallShop;
var MegaMallTempObject = null;

mp.events.add("SetPlayerMegaMallShopOpen", (settingstable) => {

    // mp.players.local.freezePosition(true);
    VioRageManager.FreezePosition(mp.players.local, true);
    disableAllControls = true;
    ToogleHudStatus(false, true);

    MainCamMegaMallShop = mp.cameras.new("MegaMall", new mp.Vector3(202.6134, -1004.453, -98.5), new mp.Vector3(0, 0, 0), 50);
    MainCamMegaMallShop.pointAtCoord(198.3526, -999.6779, -99.5);
    MainCamMegaMallShop.setActive(true);

    mp.game.cam.renderScriptCams(true, false, 0, true, false);

    Webwindow["MegaMallShopWindow"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/megamall/index.html", true)
    Webwindow["MegaMallShopWindow"].start('init', Number(InventoryItems["0"]), settingstable);
})

mp.events.add("moveCarShopCam", (dX, dY, dZ) => {
    if (MegaMallTempObject != null) {
        if (dX != "none") {
            if (dX == "right") {
                currentCamMegaMallShop.r += 2;
            } else if (dX == "left") {
                currentCamMegaMallShop.r -= 2;
            }
        }
        if (dY != "none") {
            if (dY == "up") {
                currentCamMegaMallShop.z += 0.05;
            } else if (dY == "down") {
                currentCamMegaMallShop.z -= 0.05;
            }
        }
        if (dZ != "none") {
            if (dZ == "in") {
                currentCamMegaMallShop.dist -= 0.12;
            } else if (dZ == "out") {
                currentCamMegaMallShop.dist += 0.12;
            }
        }
        if (currentCamMegaMallShop.z > (MegaMallTempObject.position.z + 2)) currentCamMegaMallShop.z = (MegaMallTempObject.position.z + 2);
        if (currentCamMegaMallShop.z < -98.5) currentCamMegaMallShop.z = -98.5;
        if (currentCamMegaMallShop.r < 0) currentCamMegaMallShop.r = 360;
        if (currentCamMegaMallShop.r > 360) currentCamMegaMallShop.r = 0;
        if (currentCamMegaMallShop.dist < 3) currentCamMegaMallShop.dist = 3;
        if (currentCamMegaMallShop.dist >= 5) currentCamMegaMallShop.dist = 5;
        let cPos = new mp.Vector3(MegaMallTempObject.position.x, MegaMallTempObject.position.y, currentCamMegaMallShop.z).findRot(0, currentCamMegaMallShop.dist, currentCamMegaMallShop.r);
        let hit = mp.raycasting.testPointToPoint(MegaMallTempObject.position, cPos, mp.players.local, (1 | 16));
        if (hit) {
            //cPos = hit.position
        }
        if (MainCamMegaMallShop != null) {
            MainCamMegaMallShop.setCoord(cPos.x, cPos.y, cPos.z)
        }
    }
});

mp.events.add("onClientRequestMegaMallClose", () => {
    if (MegaMallTempObject != null) {
        if (Webwindow["MegaMallShopWindow"] != null) {
            Webwindow["MegaMallShopWindow"].destroy();
            Webwindow["MegaMallShopWindow"] = null;
        }
        CommunicationManager.TriggerServer("onClientRequestMegaMallClose");
        disableAllControls = false;
        ToogleHudStatus(true, true);
        // mp.players.local.freezePosition(false);
        VioRageManager.FreezePosition(mp.players.local, false);

        MainCamMegaMallShop.setActive(false);
        MainCamMegaMallShop.destroy();
        mp.game.cam.renderScriptCams(false, false, 0, true, false);
        MegaMallTempObject.destroy();
        MegaMallTempObject = null;
    }
})

var ObjectHighModValue = {};
ObjectHighModValue["xm_prop_x17_avengerchair"] = 1;
ObjectHighModValue["prop_direct_chair_01"] = 1;
ObjectHighModValue["prop_old_deck_chair"] = 1;
ObjectHighModValue["v_ret_gc_chair03"] = 1;
ObjectHighModValue["v_serv_cupboard_01"] = -0.5;
ObjectHighModValue["apa_mp_h_str_shelffloorm_02"] = -0.5;
ObjectHighModValue["apa_mp_h_str_shelffreel_01"] = -0.5;
ObjectHighModValue["apa_mp_h_str_shelfwallm_01"] = 1;
ObjectHighModValue["imp_prop_impexp_sofabed_01a"] = 1;
ObjectHighModValue["v_ret_fh_ironbrd"] = 1;
ObjectHighModValue["prop_arcade_01"] = 1;
ObjectHighModValue["prop_xmas_tree_int"] = 0;
ObjectHighModValue["prop_cash_depot_billbrd"] = 1;
ObjectHighModValue["prop_speaker_01"] = 0;
ObjectHighModValue["prop_hotel_clock_01"] = 1.5;
ObjectHighModValue["prop_sports_clock_01"] = 1;
ObjectHighModValue["prop_v_5_bclock"] = 1;
ObjectHighModValue["prop_egg_clock_01"] = 1;
ObjectHighModValue["prop_id2_20_clock"] = 1;
ObjectHighModValue["apa_mp_h_lit_floorlamp_01"] = -0.5;
ObjectHighModValue["apa_mp_h_lit_floorlamp_05"] = -0.5;
ObjectHighModValue["apa_mp_h_lit_floorlampnight_05"] = 0;
ObjectHighModValue["hei_heist_lit_floorlamp_01"] = -0.5;
ObjectHighModValue["apa_mp_h_lampbulb_multiple_a"] = 1.5;
ObjectHighModValue["apa_mp_h_lit_lightpendant_05"] = 2;
ObjectHighModValue["hei_heist_lit_lightpendant_02"] = 2;
ObjectHighModValue["prop_pot_plant_6a"] = 2;
ObjectHighModValue["prop_pot_plant_6b"] = 1.5;
ObjectHighModValue["p_tv_cam_02_s"] = 1;
ObjectHighModValue["prop_cctv_cam_02a"] = 1;
ObjectHighModValue["prop_cctv_cam_05a"] = 1;
ObjectHighModValue["v_ilev_gangsafe"] = 1;
ObjectHighModValue["prop_fridge_01"] = -0.5;
ObjectHighModValue["prop_el_guitar_01"] = 1;
ObjectHighModValue["prop_el_guitar_02"] = 1;
ObjectHighModValue["prop_el_guitar_03"] = 1;
ObjectHighModValue["prop_dart_bd_01"] = 1;
ObjectHighModValue["prop_dart_bd_cab_01"] = 1;
ObjectHighModValue["prop_ff_sink_01"] = 1;
ObjectHighModValue["prop_sink_02"] = 1;
ObjectHighModValue["prop_towel_shelf_01"] = 1;
ObjectHighModValue["imp_prop_impexp_offchair_01a"] = 1;
ObjectHighModValue["vw_prop_vw_offchair_03"] = 1;


function CreateLocalPlayerMegaMallTestObject(item) {

    if (Webwindow["MegaMallShopWindow"] != null) {

        if (MegaMallTempObject != null) {
            MegaMallTempObject.destroy();
            MegaMallTempObject = null;
        }

        let posz = -99.5


        if (ObjectHighModValue[item] != null) {
            posz = posz + ObjectHighModValue[item];
        }

        MegaMallTempObject = mp.objects.new(mp.game.joaat(item), new mp.Vector3(198.3526, -999.6779, posz), {
            dimension: mp.players.local.dimension
        })

        //MegaMallTempObject.setOnGroundProperly();
        MainCamMegaMallShop.pointAtCoord(198.3526, -999.6779, -99.5);
        //MainCamMegaMallShop.pointAt(MegaMallTempObject.handle, 0, 0, 0, true);
        MainCamMegaMallShop.setActive(true);
        mp.game.cam.renderScriptCams(true, false, 0, true, false);
    }
}

var MegaMallSpamBlock;

mp.events.add("onClientRequestSwitchMegaMallObject", (object_hash) => {
    if (MegaMallTempObject != null) {
        MegaMallTempObject.destroy();
        MegaMallTempObject = null;
    }
    clearTimeout(MegaMallSpamBlock);
    MegaMallSpamBlock = setTimeout(function () {
        CreateLocalPlayerMegaMallTestObject(object_hash);
    }, 500);
})
mp.events.add("onClientRequestBuyMegaMallObject", (object_hash, buytype) => {
    if (MegaMallTempObject != null) {

        if (Webwindow["MegaMallShopWindow"] != null) {
            Webwindow["MegaMallShopWindow"].destroy();
            Webwindow["MegaMallShopWindow"] = null;
        }
        // mp.players.local.freezePosition(false);
        VioRageManager.FreezePosition(mp.players.local, false);
        disableAllControls = false;
        ToogleHudStatus(true, true);
        MainCamMegaMallShop.setActive(false);
        MainCamMegaMallShop.destroy();
        mp.game.cam.renderScriptCams(false, false, 0, true, false);
        if (MegaMallTempObject != null) {
            MegaMallTempObject.destroy();
            MegaMallTempObject = null;
        }

        CommunicationManager.TriggerServer("onClientRequestBuyMegaMallObject", object_hash, buytype);
    }
})

var StorageOpen = false;
var MarkedVehicleSellTo = false;

setInterval(reattachVehicleBlips, 1000);

mp.events.add("requestVehicleListAction", (action, json_obj) => {
    let v_id = JSON.parse(json_obj).vehicle_id;
    if (action == "refresh") {
        CommunicationManager.TriggerServer("onClientRequestPrivateVehicleActionJSON", "respawn", v_id);
    } else if (action == "lock") {
        CommunicationManager.TriggerServer("onClientRequestPrivateVehicleActionJSON", "lock", v_id);
    } else if (action == "unlock") {
        CommunicationManager.TriggerServer("onClientRequestPrivateVehicleActionJSON", "unlock", v_id);
    } else if (action == "road") {
        CommunicationManager.TriggerServer("onClientRequestPrivateVehicleActionJSON", "position", v_id);
    } else if (action == "sell") {
        CommunicationManager.TriggerServer("onClientRequestPrivateVehicleActionJSON", "sell", v_id);
    }
})
mp.events.add("requestGroupAction", (action) => {
    if (action == "road") {
        CommunicationManager.TriggerServer("updateGroup", "get_gang_pos", "1", 0, 0);
    }
})


var VehicleMarker = [];
var isLocalVehicleSirenOn = false

KeybindManager.registerVioKeyFunction("Sirenensound", true, () => {
    if (mp.players.local.vehicle) {
        if (VioRageManager.PlayerIsDriver(mp.players.local.handle, mp.players.local.vehicle)) {
            if (mp.players.local.vehicle.getClass() === 18 || mp.players.local.vehicle.model == 0x21451B54 || mp.players.local.vehicle.model == 0xBBB4E9B0 || mp.players.local.vehicle.model == 0x8D780D37) {
                if (mp.players.local.vehicle.getVariable('VehicleSirenSoundState')) {
                    CommunicationManager.TriggerServer("ToggleVehicleSirenSoundState", false)
                } else {
                    CommunicationManager.TriggerServer("ToggleVehicleSirenSoundState", true)
                }
            }
        }
    }
});

function SetVehicleProofStatus(veh) {
    if (VioRageManager.IsTrailer(veh) == true) {
        veh.setProofs(true, false, true, false, true, false, false, true);
    } else {
        if (VioRageManager.VehicleIsEmpty(veh) == true) {
            veh.setProofs(true, true, true, true, true, true, true, true);
        } else {
            veh.setProofs(true, false, false, false, true, false, false, false);
        }
    }
}

function reattachVehicleBlips() {

    if (mp.players.local.vehicle) {
        if (VioRageManager.PlayerIsDriver(mp.players.local.handle, mp.players.local.vehicle)) {
            if (mp.players.local.vehicle.isSirenOn() != isLocalVehicleSirenOn) {
                isLocalVehicleSirenOn = mp.players.local.vehicle.isSirenOn();
                CommunicationManager.TriggerServer("ToggleVehicleSirenState", isLocalVehicleSirenOn);
            }
        }
    }

    var x;
    if (VehicleMarker.length > 0) {
        for (x = 0; x < VehicleMarker.length; x++) {
            //API.sendNotification(x.toString())
            VehicleMarker[x].destroy();
        }
        VehicleMarker = [];
    }
    if (PoliceMarker.length > 0) {
        for (x = 0; x < PoliceMarker.length; x++) {
            //API.sendNotification(x.toString())
            PoliceMarker[x].destroy();
        }
        PoliceMarker = [];
    }

    if (LocalGroupID >= 0) {
        let local_pos = mp.players.local.position;

        mp.vehicles.forEachInStreamRange(function (veh) {
            if (veh.dimension == mp.players.local.dimension) {

                SetVehicleProofStatus(veh);

                if (veh.getVariable("Marker") != null) {
                    var drawBlip = false;
                    var needDriver = true;

                    if (veh.getVariable("MarkerType") != null) {

                        if (veh.getVariable("MarkerType") == "Journey") {
                            // Nix -> Nur Cops anzeigen!
                            needDriver = false;
                        } else if (veh.getVariable("MarkerType") == "Gang") {
                            if (isLocalPlayerInSquad == false) {
                                drawBlip = true; // Gang nur für Gangs & Cops anzeigen!
                            }
                        } else if (veh.getVariable("MarkerType") == "Squad") {
                            if (isLocalPlayerInSquad == true) {
                                drawBlip = true; // Squads nur für Squads & Cops anzeigen!
                            }
                        } else {
                            drawBlip = true; // Alles was nicht Squad & Gang ist für jeden anzeigen!
                        }
                        if (LocalGroupID == 0 || LocalGroupID == 3 || LocalGroupID == 4) {
                            drawBlip = true;
                        }
                    } else {
                        drawBlip = true;
                    }

                    if (needDriver) {
                        if (VioRageManager.VehicleHasDriver(veh) == false) {
                            drawBlip = false;
                        }
                    }
                    if (LocalGroupID == 1) {
                        drawBlip = false;
                    }

                    if (drawBlip == true) {
                        let pos = veh.position;
                        let dist = mp.game.system.vdist2(local_pos.x, local_pos.y, local_pos.z, pos.x, pos.y, pos.z);

                        let diffz = local_pos.z - pos.z;

                        if (diffz >= -45 && diffz <= 45) {
                            if (dist <= 29500) {
                                var blip = mp.blips.new(1, pos, {
                                    color: 75,
                                    shortRange: true,
                                    scale: 0.7
                                })
                                blip.setFlashes(true);
                                VehicleMarker[VehicleMarker.length] = blip;
                            }
                        }
                    }
                    veh.setMaxSpeed(mp.game.vehicle.getVehicleModelMaxSpeed(veh.model) * (veh.getVariable("Marker") / 100));
                }
            }
        })
    }
}

mp.events.add("playerEnterVehicle", (veh, seat) => {
    //VioRageManager.SendChatMessage("DEBUG: playerEnterVehicle SEAT: " + seat);
    //veh.setProofs(true, false, false, false, true, false, false, false);
    veh.setProofs(true, false, false, false, true, false, false, true);
    veh.setCanBeTargetted(false);
    if (veh.hasOwnProperty("fuelCalc")) {
        delete veh["fuelCalc"];
    }
    SetPlayerSeatbelt(false, false);
    if (mp.storage.data.vehicleradio == "0") {
        mp.game.audio.setVehRadioStation(veh.handle, "OFF")
        //mp.game.invoke("0xdfc63f22b454fff5", veh.handle, "OFF"); //SET_VEH_RADIO_STATION
        mp.game.audio.setUserRadioControlEnabled(false);
    } else {
        mp.game.audio.setUserRadioControlEnabled(true);
    }
    WeedPlantDrug.reset();

    if (mp.players.local.dimension != 0) {
        return;
    }

    if (veh != null) {
        // veh.freezePosition(false);
        VioRageManager.FreezePosition(veh, false);
        if (veh.getVariable("ENGINE_STATUS") == true) {
            veh.setEngineOn(true, true, true);
        } else {
            veh.setEngineOn(false, true, true);
        }
        if (veh.getVariable("Marker") != null) {
            if (veh.getHealth() <= -10) {
                veh.setEngineOn(false, true, true);
            } else {
                veh.setEngineOn(true, true, true);
            }

            if (veh.model != 0x07405E08) {
                veh.setMaxSpeed(0);
                veh.setMaxSpeed(mp.game.vehicle.getVehicleModelMaxSpeed(veh.model) * (veh.getVariable("Marker") / 100));
            }

            /* Wenn WT -> Aufschließen */

            if (veh.getVariable("MarkerType") == "WT") {
                veh.setDoorsLocked(1);
                //veh.setDoorsLockedForPlayer(mp.players.local, 0);
            }


        } else {
            if (GetVehicleLimiterStatus(veh) == false) {
                veh.setMaxSpeed(mp.game.vehicle.getVehicleModelMaxSpeed(veh.model) * 3.6);
            }
        }
    }

});

mp.events.addDataHandler("Marker", (entity, value) => {
    if (entity.type === "vehicle") {
        if (entity) {
            if (entity.handle !== 0) {
                if (mp.players.local.isInAnyVehicle(false)) {
                    if (mp.players.local.vehicle == entity) {
                        if (entity.getVariable("Marker") != null) {
                            if (entity.model != 0x07405E08) {
                                entity.setMaxSpeed(0);
                                entity.setMaxSpeed(mp.game.vehicle.getVehicleModelMaxSpeed(entity.model) * (entity.getVariable("Marker") / 100));
                            }
                        } else {
                            entity.setMaxSpeed(mp.game.vehicle.getVehicleModelMaxSpeed(entity.model) * 3.6);
                        }
                    }
                }
            }
        }
    }
});


function SetVehicleHealthStatus(entity, health) {
    if (health <= -150) {
        entity.setDisablePetrolTankFires(false);
        entity.setDisablePetrolTankDamage(false);
        entity.setBodyHealth(-999);
        entity.setEngineHealth(-999);
        entity.setPetrolTankHealth(-999);
        entity.setHealth(-999);
    } else {
        entity.setDisablePetrolTankFires(true);
        entity.setDisablePetrolTankDamage(true);
        entity.setPetrolTankHealth(1000);

        if (health > 0) {
            if (health / entity.getMaxHealth() >= 0.35)
                entity.setEngineHealth(1500);
            else if (health / entity.getMaxHealth() < 0.4)
                entity.setEngineHealth(650); // <- Motor geht "aus" ab 35 %
        } else {
            entity.setEngineHealth(health);
        }

        if (health <= 250) {
            //entity.setPetrolTankHealth(health);
        } else {
            //entity.setPetrolTankHealth(1000);
        }

        entity.setBodyHealth(health);
        entity.setHealth(health);
        entity.setUndriveable(false);
    }
}


var wheel_cramps = [];

mp.events.addDataHandler("Indicator_warning", (entity, value) => {
    if (entity.type === "vehicle") {
        if (entity.handle !== 0) {
            if (entity.getVariable("Indicator_warning") != null) {
                entity.setIndicatorLights(0, true);
                entity.setIndicatorLights(1, true);
            } else {
                entity.setIndicatorLights(0, false);
                entity.setIndicatorLights(1, false);
            }
        }
    }
});

mp.events.addDataHandler("VehicleSirenState", (entity, value) => {
    if (entity.type === "vehicle") {
        if (entity.handle !== 0) {
            if (entity.getVariable("VehicleSirenState") != null) {
                entity.setSiren(true);
            } else {
                entity.setSiren(false);
            }
        }
    }
});

mp.events.addDataHandler("VehicleSirenSoundState", (entity, value) => {
    if (entity.type === "vehicle") {
        if (entity.handle !== 0) {
            if (entity.getVariable("VehicleSirenSoundState") != null) {
                entity.setSirenSound(true)
            } else {
                entity.setSirenSound(false)
            }
        }
    }
});

CommunicationManager.addSafeServerEvent("SetPlayerVehicleHealth", (vehicle, vhealth) => {
    SetVehicleHealthStatus(vehicle, vhealth);
})

function SetVehicleHealth(vehicle) {
    if (vehicle.getVariable("VEHICLE_HEALTH") != null) {
        let health = vehicle.getVariable("VEHICLE_HEALTH");
        SetVehicleHealthStatus(vehicle, health);
    }
}

function SetVehicleWheelStatus(vehicle) {
    if (vehicle.getVariable("WheelStatus") != null) {
        var WheelStatus = JSON.parse(vehicle.getVariable("WheelStatus"));
        for (var i = 0; i < WheelStatus.length; i++) {
            vehicle.setTyreBurst(WheelStatus[i], false, 1000);
        }
    } else {
        vehicle.setTyreFixed(0);
        vehicle.setTyreFixed(1);
        vehicle.setTyreFixed(4);
        vehicle.setTyreFixed(5);
    }
}

function SetVehicleDirtLevel(vehicle) {
    if (vehicle.getVariable("VEHICLE_DIRT_LEVEL") != null) {
        var VEHICLE_DIRT_LEVEL = vehicle.getVariable("VEHICLE_DIRT_LEVEL");
        vehicle.setDirtLevel(VEHICLE_DIRT_LEVEL);
        if (VEHICLE_DIRT_LEVEL == 0) {
            vehicle.setBodyHealth(1000.0);
        }
    } else {
        vehicle.setDirtLevel(0);
        vehicle.setBodyHealth(1000.0);
    }
}

function SetVehicleHeadlightsColor(vehicle) {
    if (vehicle.getVariable("VEHICLE_HEADLIGHT_COLOR") != null) {
        let VEHICLE_HEADLIGHT_COLOR = parseInt(vehicle.getVariable("VEHICLE_HEADLIGHT_COLOR"));
        vehicle.toggleMod(22, true);
        mp.game.invoke("0xE41033B25D003A07", vehicle.handle, VEHICLE_HEADLIGHT_COLOR);
    } else {
        vehicle.toggleMod(22, false);
        mp.game.invoke("0xE41033B25D003A07", vehicle.handle, 255);
    }
}

function SetVehicleFrozenStatus(vehicle) {
    if (vehicle.getVariable("VEHICLE_FROZEN") != null) {
        var pos = vehicle.getVariable("VEHICLE_FROZEN");
        // vehicle.freezePosition(true);
        VioRageManager.FreezePosition(vehicle, true);
        vehicle.position = pos;
    } else {
        // vehicle.freezePosition(false);
        VioRageManager.FreezePosition(vehicle, false);
    }
}

function SetWheelCramps(entity) {
    let BlockedVehicle = entity.getVariable("BlockedVehicle");
    let wheel_bone = "wheel_lf";
    let index = entity.getBoneIndexByName(wheel_bone);
    if (BlockedVehicle != null) {
        if (index !== null) {
            if (!wheel_cramps[Number(entity)]) {
                let gr_prop_gr_target_03a = mp.objects.new(mp.game.joaat('gr_prop_gr_target_03a'), entity.position);
                IsRageMpObjectReady(gr_prop_gr_target_03a, 1500, function (isready) {
                    if (gr_prop_gr_target_03a != null && isready && entity != null) {
                        gr_prop_gr_target_03a.attachTo(entity.handle, index, 0, 0, -0.25, 0, 0, 0, false, false, false, false, 0, true);
                        gr_prop_gr_target_03a.setCollision(false, true);
                    }
                });
                wheel_cramps[Number(entity)] = gr_prop_gr_target_03a;
            }
        }
    } else {
        if ((wheel_cramps[Number(entity)]) && (wheel_cramps[Number(entity)] != undefined)) {
            wheel_cramps[Number(entity)].destroy();
            delete wheel_cramps[Number(entity)];
        }
    }
}

mp.events.addDataHandler("VEHICLE_FROZEN", (entity, value) => {
    if (entity.type === "vehicle") {
        if (entity.handle !== 0) {
            SetVehicleFrozenStatus(entity);
        }
    }
});

mp.events.addDataHandler("WheelStatus", (entity, value) => {
    if (entity.type === "vehicle") {
        if (entity.handle !== 0) {
            SetVehicleWheelStatus(entity);
        }
    }
});

mp.events.addDataHandler("VEHICLE_DIRT_LEVEL", (entity, value) => {
    if (entity.type === "vehicle") {
        if (entity.handle !== 0) {
            SetVehicleDirtLevel(entity);
        }
    }
});

mp.events.addDataHandler("BlockedVehicle", (entity, value) => {
    if (entity.type === "vehicle") {
        if (entity.handle !== 0) {
            SetWheelCramps(entity);
        }
    }
});

mp.events.addDataHandler("VEHICLE_HEADLIGHT_COLOR", (entity, value) => {
    if (entity.type === "vehicle") {
        if (entity.handle !== 0) {
            SetVehicleHeadlightsColor(entity);
        }
    }
});

mp.events.addDataHandler("VEHICLE_HEALTH", (entity, health) => {
    if (entity.type === "vehicle") {
        if (entity.handle !== 0) {
            if (health != undefined) {
                SetVehicleHealth(entity)
            }
        }
    }
});


mp.events.add('entityStreamOut', (entity) => {
    if (entity.type === "vehicle") {
        if ((wheel_cramps[Number(entity)]) && (wheel_cramps[Number(entity)] != undefined)) {
            wheel_cramps[Number(entity)].destroy();
            delete wheel_cramps[Number(entity)];
        }
    }
});


KeybindManager.registerVioKeyFunction("Limit", true, () => {
    if (Webwindow["TicketsystemBrowser"] != null || Webwindow["Settings"] != null) {
        return;
    }

    if (mp.gui.cursor.visible) {
        return;
    }
    var vehicle = mp.players.local.vehicle
    if (vehicle != null) {
        if (VioRageManager.PlayerIsDriver(mp.players.local.handle, vehicle)) {
            var limit = parseInt(vehicle.getSpeed() * 3.6);
            var model = vehicle.model;
            if (IsModelBlocked(model)) {
                CreateNotify("~r~Bei diesem Fahrzeug kannst du den Limiter nicht verwenden!", 5);
                return;
            }
            if (vehicle.getVariable("Marker") != null) {
                CreateNotify("~r~Bei diesem Fahrzeug kannst du den Limiter nicht verwenden!", 5);
                return;
            }
            if (GetVehicleLimiterStatus(vehicle) != false) {
                SetVehicleLimiterStatus(vehicle, false);
                vehicleMaxSpeedEnabled[model] = undefined;
                vehicleMaxSpeed[model] = undefined;
                CreateNotify("~r~Limit deaktiviert", 5);
            } else {
                if (limit <= mp.game.vehicle.getVehicleModelMaxSpeed(mp.players.local.vehicle.model) * 3.6) {
                    if (limit >= 50) {
                        if (limit == 54) {
                            limit = 55
                        } else if (limit == 72) {
                            limit = 73
                        } else if (limit == 90) {
                            limit = 91
                        } else if (limit == 108) {
                            limit = 109
                        } else if (limit == 126) {
                            limit = 127
                        } else if (limit == 144) {
                            limit = 145
                        } else if (limit == 162) {
                            limit = 163
                        } else if (limit == 180) {
                            limit = 181
                        }
                        vehicleMaxSpeed[model] = limit;
                        vehicleMaxSpeedEnabled[model] = true;
                        vehicle.setMaxSpeed((limit === undefined) ? (mp.game.vehicle.getVehicleModelMaxSpeed(mp.players.local.vehicle.model) * 3.6) : (limit / 3.6));
                        //   API.callNative("SET_ENTITY_MAX_SPEED", vehicle, (limit === undefined) ? (API.getVehicleMaxSpeed(model) * 3.6) : (limit / 3.6));
                        CreateNotify("~g~Limit auf " + limit + " km/h eingestellt", 5);
                        // API.sendNotification("~g~Limit auf " + limit + " km/h eingestellt");
                    } else {
                        CreateNotify("~r~Mindestgeschwindigkeit Limit : 50 km/h", 5)
                        //API.sendNotification("~r~Mindestgeschwindigkeit Limit : 50 km/h");
                    }
                } else {
                    CreateNotify("~r~Maximale Geschwindigkeit Limit : " + Math.round(mp.game.vehicle.getVehicleModelMaxSpeed(mp.players.local.vehicle.model) * 3.6) + " km/h", 5)
                    //API.sendNotification("~r~Maximale Geschwindigkeit Limit : " + Math.round(API.getVehicleMaxSpeed(API.getEntityModel(vehicle)) * 3.6) + " km/h");
                }
            }
        }
    }
});

mp.events.add("WarpPlayerOutOfVehicle", () => {
    let localVeh = mp.players.local.vehicle;
    if (localVeh) {
        mp.players.local.taskLeaveVehicle(localVeh.handle, 0);
    }
})

mp.events.add("setOffRoadWaypoint", (pos, markerpos, marker, id, offsetz, size) => {

    // VioRageManager.setWayPoint(pos);
    PositionManager.setPositionData("ServerMarker", "Server Wegpunkt", pos, 2, 8, 0.01);
    //PositionManager.showBlip("ServerMarker");

    var markerid = 24;
    if (id) {
        markerid = id;
    }
    if (marker) {
        if (temp_marker != false) {
            temp_marker.destroy();
            temp_marker = false;
        }
        if (temp_blip != false) {
            temp_blip.destroy();
            temp_blip = false;
        }
        temp_marker = mp.markers.new(markerid, new mp.Vector3(markerpos.x, markerpos.y, markerpos.z + offsetz), size, {
            color: [200, 70, 63, 200],
            visible: true
        });
        temp_blip = mp.blips.new(8, new mp.Vector3(markerpos.x, markerpos.y, markerpos.z), {
            color: 6,
            scale: 0.6,
            alpha: 230
        });
    }
})

mp.events.add("setWaypoint", (pos, marker, id, offsetz, size) => {

    // VioRageManager.setWayPoint(pos);
    if (HQPoliceRadio["Status"] != -1) {
        PositionManager.setPositionData("EmergencyPosition", "Polizei Ortung", pos, 3, 8);
        PositionManager.showBlip("EmergencyPosition");
    } else {
        PositionManager.setPositionData("ServerMarker", "Server Wegpunkt", pos, 2, 8);
        PositionManager.showBlip("ServerMarker");
    }
    var markerid = 24;
    if (id) {
        markerid = id;
    }
    if (marker) {
        if (temp_marker != false) {
            temp_marker.destroy();
            temp_marker = false;
        }
        if (temp_blip != false) {
            temp_blip.destroy();
            temp_blip = false;
        }
        temp_marker = mp.markers.new(markerid, new mp.Vector3(pos.x, pos.y, pos.z + offsetz), size, {
            color: [200, 70, 63, 200],
            visible: true
        });
        temp_blip = mp.blips.new(8, new mp.Vector3(pos.x, pos.y, pos.z), {
            color: 6,
            scale: 0.6,
            alpha: 230
        });
    }
})
mp.events.add("deleteWaypoint", () => {

    // VioRageManager.clearWayPoint();
    PositionManager.clearAllWaypoints();
    if (temp_marker != false) {
        temp_marker.destroy();
        temp_marker = false;
    }
    if (temp_blip != false) {
        temp_blip.destroy();
        temp_blip = false;
    }
})
mp.events.add("createMarker", (...args) => {
    MarkedVehicleSellTo = mp.markers.new(0, new mp.Vector3(args[0].x, args[0].y, args[0].z), 1, {
        color: [255, 0, 0, 255]
    })
    let bone = MarkedVehicleSellTo.getBoneIndexByName("0");
    MarkedVehicleSellTo.attachTo(args[0].handle, bone, 0, 0, 2, 0, 0, 0, true, false, false, false, 0, false)
})
mp.events.add("StopMarkVehicleSell", () => {
    if (MarkedVehicleSellTo != false) {
        MarkedVehicleSellTo.destroy()
        MarkedVehicleSellTo = false;
    }
})

mp.events.add("playerCreateWaypoint", (player, position) => {
    //CreateNotify("~r~ playerCreateWaypoint")
});
mp.events.add("CheckPlayerVehicleParkCommand", () => {
    if (mp.players.local.isInAnyVehicle(false)) {
        if (mp.players.local.vehicle.isInWater() && mp.players.local.vehicle.getClass() != 14) {
            CreateNotify("~r~Dein Fahrzeug ist kein U-Boot!")
        } else {
            let rot = mp.players.local.vehicle.getRotation(0);
            CommunicationManager.TriggerServer("onClientRequestParkVehicle", mp.players.local.vehicle.getSpeed(), rot.x, rot.y, rot.z)
        }
    }
})

CommunicationManager.addSafeServerEvent("SetEngineTorqueMultiplier", (value) => {
    if (mp.players.local.isInAnyVehicle(false)) {
        let veh = mp.players.local.vehicle;
        if (veh != null) {
            if (veh.handle !== 0) {
                if (mp.vehicles.exists(veh)) {
                    veh.setEngineTorqueMultiplier(value);
                    veh.EngineTorqueMultiplier = value;
                }
            }
        }
    }
});
CommunicationManager.addSafeServerEvent("SetEnginePowerMultiplier", (value) => {
    if (mp.players.local.isInAnyVehicle(false)) {
        let veh = mp.players.local.vehicle;
        if (veh != null) {
            if (veh.handle !== 0) {
                if (mp.vehicles.exists(veh)) {
                    veh.setEnginePowerMultiplier(value);
                    veh.EnginePowerMultiplier = value;
                }
            }
        }
    }
});

mp.events.add("StartScreenEffect", (effect, timeto) => {
    mp.game.graphics.startScreenEffect(effect, timeto, false);
})

mp.events.add("playerStartEnterVehicle", () => {
    AnimationManager.stopAnimation(true);
});

mp.events.add("ClientRadarHit", () => {
    mp.game.graphics.startScreenEffect("CamPushInTrevor", 250, false);
    //setTimeout(mp.game.graphics.stopScreenEffect, 350, "CamPushInTrevor");
})

setInterval(function () {
    if (mp.players.local.isInAnyVehicle(false)) {
        if (mp.players.local.vehicle == null) {
            return;
        }

        mp.game.invoke("0x3882114BDE571AD4", mp.players.local.vehicle.handle, false);

        if (mp.storage.data.vehicleradio == "0") {
            mp.game.audio.setVehRadioStation(mp.players.local.vehicle.handle, "OFF")
            //mp.game.invoke("0xdfc63f22b454fff5", mp.players.local.vehicle.handle, "OFF"); //SET_VEH_RADIO_STATION
            mp.game.audio.setUserRadioControlEnabled(false);
        } else {
            mp.game.audio.setUserRadioControlEnabled(true);
        }
    }
}, 2000);

mp.game.controls.useDefaultVehicleEntering = false;
var enter_marker_timer = Date.now();

var VehicleEntering = null;

KeybindManager.registerVioKeyFunction("Als Beifahrer einsteigen", true, () => {

    if (mp.players.local.adminMode == 2) return;
    if (Seats.usingChair) return;

    if (enter_marker_timer >= Date.now()) {
        return;
    }
    enter_marker_timer = Date.now() + 1000;

    if (isPlayerInDrivingSchool == true) {
        return;
    }
    if (mp.players.local.isBeingStunned(0)) {
        return;
    }

    if (LocalPlayerLastIncomingHit + 2 >= Utility.GetTimestamp()) {
        return;
    }

    if (mp.players.local.getIsTaskActive(160)) {
        mp.players.local.clearTasksImmediately();
    } else if (mp.players.local.vehicle === null) {

        if (mp.gui.cursor.visible) return;
        if (isPlayerCarryingAction) {
            CreateNotify("~r~Du hast keine Hand frei");
            return;
        }
        if (AnimationManager.animationPlaying) {
            CreateNotify("~r~Du stehst nicht still");
            return;
        }

        let pos = mp.players.local.position;
        let targetVeh = {
            veh: null,
            dist: 100
        }
        // get closest veh + police cars
        mp.vehicles.forEachInStreamRange((veh) => {
            let vp = veh.position;
            let dist = mp.game.system.vdist2(pos.x, pos.y, pos.z, vp.x, vp.y, vp.z);
            if (dist < targetVeh.dist) {
                targetVeh.dist = dist;
                targetVeh.veh = veh;
            }
        });

        let veh = targetVeh.veh;
        if (veh !== null) {

            if (isPlayerCuffed == true) {
                if (veh.getVariable("GROUP_VEHICLE_OWNER") != 0 && veh.getVariable("GROUP_VEHICLE_OWNER") != 3 && veh.getVariable("GROUP_VEHICLE_OWNER") != 4) {
                    return;
                }
            }

            if (mp.raycasting.testPointToPoint(mp.players.local.position, veh.position, [mp.players.local, veh], 1)) // Ist Map im weg?
                return;

            // Police Bus, wenn kein Fahrer maximal 4 Beifahrer -> Zu Prüfen ob zutrifft! Bus Coach
            var BusList = [
                String(VioRageManager.joaat("pbus")),
                String(VioRageManager.joaat("bus")),
                String(VioRageManager.joaat("coach"))
            ];

            if (BusList.indexOf(String(veh.model)) > -1) {

                var maxDistance = 16;

                var doorPosition = undefined;

                if (VioRageManager.HasVehicleBone(veh, "handle_dside_f")) {
                    doorPosition = veh.getWorldPositionOfBone(veh.getBoneIndexByName("handle_dside_f"));
                } else if (VioRageManager.HasVehicleBone(veh, "seat_dside_f")) {
                    doorPosition = veh.getWorldPositionOfBone(veh.getBoneIndexByName("seat_dside_f"));
                } else {
                    doorPosition = veh.position;
                    maxDistance = 40;
                }

                var distanceToDoor = mp.game.system.vdist2(pos.x, pos.y, pos.z, doorPosition.x, doorPosition.y, doorPosition.z);

                if (distanceToDoor > maxDistance) // zu weit weg von Türe?
                    return;

                if (!veh.isSeatFree(VioRageManager.GetSeatIdByBone("seat_dside_f"))) {
                    // -2 = nächster feier Sitz, nur wenn Fahrer besetzt ist, da er ansonsten den Fahrersitz nimmt (obwohl Beifahrer!!!)
                    mp.players.local.taskEnterVehicle(veh.handle, 5000, -2, 2.0, 1, 0);
                } else {
                    var seatToEnter = null;
                    var seatCount = mp.game.vehicle.getVehicleSeats(veh);

                    for (var i = VioRageManager.GetSeatIdByBone("seat_pside_f"); i < seatCount; i++) {
                        if (veh.isSeatFree(i)) {
                            seatToEnter = i;
                            break;
                        }
                    }

                    if (seatToEnter !== null)
                        mp.players.local.taskEnterVehicle(veh.handle, 5000, seatToEnter, 2.0, 1, 0);
                }
            } else if (veh.isAnySeatEmpty()) {

                let toEnter = {
                    seat: VioRageManager.GetSeatIdByBone("seat_pside_f"),
                    dist: 99999,
                    veh: null
                }

                if (veh.getSpeed() >= 3) {
                    return;
                }
                if (veh.getClass() == 15) {
                    if (veh.position.z > mp.players.local.position.z + 1.5) {
                        return;
                    }
                }

                let insideSeatsFree = false;
                let seats_count = mp.game.vehicle.getVehicleSeats(veh);

                if (veh.model == 0xA90ED5C) {
                    seats_count = 0; // "phantom3"
                }

                for (var i = VioRageManager.GetSeatIdByBone("seat_pside_f"); i <= seats_count; i++) {

                    if (veh.isSeatFree(i)) {

                        if (i <= VioRageManager.GetSeatIdByBone("seat_pside_r")) {
                            insideSeatsFree = true;
                        }

                        let seatBoneName = VioRageManager.GetSeatBoneById(i);
                        let seat_pos = veh.getWorldPositionOfBone(veh.getBoneIndexByName(seatBoneName));
                        let seat_dist = mp.game.system.vdist2(pos.x, pos.y, pos.z, seat_pos.x, seat_pos.y, seat_pos.z);

                        if ((i > VioRageManager.GetSeatIdByBone("seat_pside_r")) && (insideSeatsFree == true)) {
                        } else {

                            if (veh.model == 1917016601 && i > VioRageManager.GetSeatIdByBone("seat_pside_f")) {
                                if ((toEnter.dist > 30)) {
                                    toEnter.dist = 30;
                                    toEnter.seat = i;
                                }
                            }

                            if ((seat_dist < toEnter.dist)) {
                                toEnter.dist = seat_dist;
                                toEnter.seat = i;
                            }
                        }
                    }
                }

                if ((veh.model == 1475773103) && (toEnter.seat >= VioRageManager.GetSeatIdByBone("seat_pside_f"))) { // if rumpo3
                    mp.players.local.taskEnterVehicle(veh.handle, 5000, toEnter.seat, 2.0, 16, 0);
                } else {
                    mp.players.local.taskEnterVehicle(veh.handle, 5000, toEnter.seat, 2.0, 1, 0);
                    VehicleEntering = veh;
                    setTimeout(() => {
                        if (VehicleEntering == veh) {
                            VehicleEntering = null;
                        }
                    }, 5000);
                }
            }
        }
    }
});

mp.events.add('startPlayerCarWashStation', () => {
    setPlayerFrozen(true, true);
    setTimeout(function () {
        setPlayerFrozen(false, false);
    }, 5000);
});

mp.events.add("playerEnterVehicle", (veh, seat) => {
    SetVehicleProofStatus(veh);
    SetVehicleWheelStatus(veh);
})

mp.events.add('startCarWashStation', (position) => {

    RequestPTFXAsset("scr_carwash", 1000, function () {
        var fx1 = null;
        mp.game.graphics.setPtfxAssetNextCall("scr_carwash");
        var fx2 = mp.game.graphics.startParticleFxLoopedAtCoord("ent_amb_car_wash_jet_soap", position.x, position.y, position.z + 3.5, 0, 0, 0, 25.0, true, true, true, false);

        var fx3 = null;
        mp.game.graphics.setPtfxAssetNextCall("scr_carwash");
        var fx4 = mp.game.graphics.startParticleFxLoopedAtCoord("ent_amb_car_wash_steam", position.x, position.y, position.z, 0, 0, 0, 5.0, true, true, true, false);

        setTimeout(function () {
            mp.game.graphics.stopParticleFxLooped(fx2, false);
        }, 2000);

        setTimeout(function () {
            mp.game.graphics.setPtfxAssetNextCall("scr_carwash");
            fx1 = mp.game.graphics.startParticleFxLoopedAtCoord("ent_amb_car_wash_jet", position.x, position.y, position.z + 3.5, 0, 0, 0, 17.5, true, true, true, false);
            mp.game.graphics.setPtfxAssetNextCall("scr_carwash");
            fx3 = mp.game.graphics.startParticleFxLoopedAtCoord("ent_amb_car_wash", position.x, position.y, position.z + 1.5, 0, 0, 0, 3.0, true, true, true, false);
        }, 3000);

        setTimeout(function () {
            mp.game.graphics.stopParticleFxLooped(fx1, false);
            mp.game.graphics.stopParticleFxLooped(fx3, false);
        }, 4500);

        setTimeout(function () {
            mp.game.graphics.stopParticleFxLooped(fx4, false);
        }, 6000);
    });
});


mp.events.add("render", () => {
    const player = mp.players.local;
    const vehicle = player.vehicle;
    if (vehicle) {
        if (mp.vehicles.exists(vehicle)) {
            if (vehicle.handle !== 0) {
                if (VioRageManager.PlayerIsDriver(mp.players.local.handle, vehicle)) {
                    const model = vehicle.model;
                    if (model === 0x89BA59F5) { // 0x89BA59F5 = havok
                        const rotation = vehicle.getRotation(0);
                        const {x: rx, y: ry, z: rz} = rotation;
                        const height = vehicle.getHeightAboveGround();
                        if (height < 1.25) {
                            if (rx > 90 || rx < -90 || ry > 90 || ry < -90) {
                                vehicle.explode(true, true);
                            }
                        }
                    }
                }
            }
        }
    }

    if (VehicleEntering != null) {
        if (mp.vehicles.exists(VehicleEntering)) {
            if (VehicleEntering.handle !== 0) {
                if (mp.players.local.isInAnyVehicle(false) == false) {
                    if (VehicleEntering.getClass() == 15) {
                        if (VehicleEntering.position.z > mp.players.local.position.z + 1.5) {
                            mp.players.local.clearTasksImmediately();
                            VehicleEntering = null;
                            return;
                        }
                    }
                    if (mp.players.local.isBeingStunned(0)) {
                        //mp.players.local.clearSecondaryTask();
                        //VehicleEntering = null;
                        //return;
                    }
                    if (isPlayerCuffed == true) {
                        if (VehicleEntering.getVariable("GROUP_VEHICLE_OWNER") != 0 && VehicleEntering.getVariable("GROUP_VEHICLE_OWNER") != 3 && VehicleEntering.getVariable("GROUP_VEHICLE_OWNER") != 4) {
                            mp.players.local.clearTasksImmediately();
                            VehicleEntering = null;
                            return;
                        }
                    }
                    if (VehicleEntering.getSpeed() >= 3) {
                        mp.players.local.clearTasksImmediately();
                        VehicleEntering = null;
                        return;
                    }
                } else {
                    VehicleEntering = null;
                }
            } else {
                VehicleEntering = null;
            }
        } else {
            VehicleEntering = null;
        }
    }


});

mp.events.add("entityStreamIn", (entity) => {
    if (entity.type === "vehicle") {
        if (mp.vehicles.exists(entity)) {
            if (entity && entity.handle) {
                if (entity.getVariable("Indicator_warning") != null) {
                    entity.setIndicatorLights(0, true);
                    entity.setIndicatorLights(1, true);
                }
                entity.setCanBeTargetted(false);

                SetVehicleProofStatus(entity);
                //entity.setProofs(true, false, true, false, true, false, false, true);

                SetVehicleWheelStatus(entity);
                SetVehicleDirtLevel(entity);
                SetVehicleFrozenStatus(entity);
                SetWheelCramps(entity);
                SetVehicleHealth(entity);
                SetVehicleHeadlightsColor(entity);

                if (entity.getVariable("VehicleSirenState") != null) {
                    entity.setSiren(true);
                } else {
                    entity.setSiren(false);
                }

                if (entity.getVariable("VehicleSirenSoundState") != null) {
                    entity.setSirenSound(true)
                } else {
                    entity.setSirenSound(false)
                }
            }
        }
    }
});

mp.events.add("playerLeaveVehicle", (vehicle, seat) => {
    LeaveVehicleTimestamp = Date.now();
});

/* "handle_dside_f", "handle_dside_r", "handle_pside_f", "handle_pside_r" <-- Türgriffe Auto */

/* "seat_dside_f", "seat_dside_r", "seat_dside_r1", "seat_dside_r2", "seat_dside_r3", "seat_dside_r4", "seat_dside_r5", "seat_dside_r6",
   "seat_dside_r7", "seat_pside_f", "seat_pside_r", "seat_pside_r1", "seat_pside_r2", "seat_pside_r3", "seat_pside_r4", "seat_pside_r5",
   "seat_pside_r6", "seat_pside_r7" <-- AlleSeats  */

/* "wheel_lf", "wheel_rf", "wheel_lm1", "wheel_rm1", "wheel_lm2", "wheel_rm2", "wheel_lm3", "wheel_rm3", "wheel_lr", "wheel_rr" */
/*
var debugVehicleBones = ["chassis", "chassis_lowlod", "chassis_dummy", "seat_dside_f", "seat_dside_r", "seat_dside_r1", "seat_dside_r2", "seat_dside_r3",
             "seat_dside_r4", "seat_dside_r5", "seat_dside_r6", "seat_dside_r7", "seat_pside_f", "seat_pside_r", "seat_pside_r1", "seat_pside_r2",
             "seat_pside_r3", "seat_pside_r4", "seat_pside_r5", "seat_pside_r6", "seat_pside_r7", "window_lf1", "window_lf2", "window_lf3",
             "window_rf1", "window_rf2", "window_rf3", "window_lr1", "window_lr2", "window_lr3", "window_rr1", "window_rr2", "window_rr3",
             "door_dside_f", "door_dside_r", "door_pside_f", "door_pside_r", "handle_dside_f", "handle_dside_r", "handle_pside_f", "handle_pside_r",
             "wheel_lf", "wheel_rf", "wheel_lm1", "wheel_rm1", "wheel_lm2", "wheel_rm2", "wheel_lm3", "wheel_rm3", "wheel_lr", "wheel_rr", "suspension_lf",
             "suspension_rf", "suspension_lm", "suspension_rm", "suspension_lr", "suspension_rr", "spring_rf", "spring_lf", "spring_rr", "spring_lr",
             "transmission_f", "transmission_m", "transmission_r", "hub_lf", "hub_rf", "hub_lm1", "hub_rm1", "hub_lm2", "hub_rm2", "hub_lm3", "hub_rm3",
             "hub_lr", "hub_rr", "windscreen", "windscreen_r", "window_lf", "window_rf", "window_lr", "window_rr", "window_lm", "window_rm", "bodyshell",
             "bumper_f", "bumper_r", "wing_rf", "wing_lf", "bonnet", "boot", "exhaust", "exhaust_2", "exhaust_3", "exhaust_4", "exhaust_5", "exhaust_6",
             "exhaust_7", "exhaust_8", "exhaust_9", "exhaust_10", "exhaust_11", "exhaust_12", "exhaust_13", "exhaust_14", "exhaust_15", "exhaust_16",
             "engine", "overheat", "overheat_2", "petrolcap", "petroltank", "petroltank_l", "petroltank_r", "steering", "hbgrip_l", "hbgrip_r", "headlight_l",
             "headlight_r", "taillight_l", "taillight_r", "indicator_lf", "indicator_rf", "indicator_lr", "indicator_rr", "brakelight_l", "brakelight_r",
             "brakelight_m", "reversinglight_l", "reversinglight_r", "extralight_1", "extralight_2", "extralight_3", "extralight_4", "numberplate",
             "interiorlight", "siren1", "siren2", "siren3", "siren4", "siren5", "siren6", "siren7", "siren8", "siren9", "siren10", "siren11", "siren12",
             "siren13", "siren14", "siren15", "siren16", "siren17", "siren18", "siren19", "siren20", "siren_glass1", "siren_glass2", "siren_glass3",
             "siren_glass4", "siren_glass5", "siren_glass6", "siren_glass7", "siren_glass8", "siren_glass9", "siren_glass10", "siren_glass11", "siren_glass12",
             "siren_glass13", "siren_glass14", "siren_glass15", "siren_glass16", "siren_glass17", "siren_glass18", "siren_glass19", "siren_glass20", "spoiler",
             "struts", "misc_a", "misc_b", "misc_c", "misc_d", "misc_e", "misc_f", "misc_g", "misc_h", "misc_i", "misc_j", "misc_k", "misc_l", "misc_m", "misc_n",
             "misc_o", "misc_p", "misc_q", "misc_r", "misc_s", "misc_t", "misc_u", "misc_v", "misc_w", "misc_x", "misc_y", "misc_z", "misc_1", "misc_2", "weapon_1a",
             "weapon_1b", "weapon_1c", "weapon_1d", "weapon_1a_rot", "weapon_1b_rot", "weapon_1c_rot", "weapon_1d_rot", "weapon_2a", "weapon_2b", "weapon_2c",
             "weapon_2d", "weapon_2a_rot", "weapon_2b_rot", "weapon_2c_rot", "weapon_2d_rot", "weapon_3a", "weapon_3b", "weapon_3c", "weapon_3d", "weapon_3a_rot",
             "weapon_3b_rot", "weapon_3c_rot", "weapon_3d_rot", "weapon_4a", "weapon_4b", "weapon_4c", "weapon_4d", "weapon_4a_rot", "weapon_4b_rot",
             "weapon_4c_rot", "weapon_4d_rot", "turret_1base", "turret_1barrel", "turret_2base", "turret_2barrel", "turret_3base", "turret_3barrel",
             "ammobelt", "searchlight_base", "searchlight_light", "attach_female", "roof", "roof2", "soft_1", "soft_2", "soft_3", "soft_4", "soft_5",
             "soft_6", "soft_7", "soft_8", "soft_9", "soft_10", "soft_11", "soft_12", "soft_13", "forks", "mast", "carriage", "fork_l", "fork_r",
             "forks_attach", "frame_1", "frame_2", "frame_3", "frame_pickup_1", "frame_pickup_2", "frame_pickup_3", "frame_pickup_4", "freight_cont",
             "freight_bogey", "freightgrain_slidedoor", "door_hatch_r", "door_hatch_l", "tow_arm", "tow_mount_a", "tow_mount_b", "tipper", "combine_reel",
             "combine_auger", "slipstream_l", "slipstream_r", "arm_1", "arm_2", "arm_3", "arm_4", "scoop", "boom", "stick", "bucket", "shovel_2", "shovel_3",
             "Lookat_UpprPiston_head", "Lookat_LowrPiston_boom", "Boom_Driver", "cutter_driver", "vehicle_blocker", "extra_1", "extra_2", "extra_3", "extra_4",
             "extra_5", "extra_6", "extra_7", "extra_8", "extra_9", "extra_ten", "extra_11", "extra_12", "break_extra_1", "break_extra_2", "break_extra_3",
             "break_extra_4", "break_extra_5", "break_extra_6", "break_extra_7", "break_extra_8", "break_extra_9", "break_extra_10", "mod_col_1", "mod_col_2",
             "mod_col_3", "mod_col_4", "mod_col_5", "handlebars", "forks_u", "forks_l", "wheel_f", "swingarm", "wheel_r", "crank", "pedal_r", "pedal_l",
             "static_prop", "moving_prop", "static_prop2", "moving_prop2", "rudder", "rudder2", "wheel_rf1_dummy", "wheel_rf2_dummy", "wheel_rf3_dummy",
             "wheel_rb1_dummy", "wheel_rb2_dummy", "wheel_rb3_dummy", "wheel_lf1_dummy", "wheel_lf2_dummy", "wheel_lf3_dummy", "wheel_lb1_dummy", "wheel_lb2_dummy",
             "wheel_lb3_dummy", "bogie_front", "bogie_rear", "rotor_main", "rotor_rear", "rotor_main_2", "rotor_rear_2", "elevators", "tail", "outriggers_l",
             "outriggers_r", "rope_attach_a", "rope_attach_b", "prop_1", "prop_2", "elevator_l", "elevator_r", "rudder_l", "rudder_r", "prop_3", "prop_4", "prop_5",
             "prop_6", "prop_7", "prop_8", "rudder_2", "aileron_l", "aileron_r", "airbrake_l", "airbrake_r", "wing_l", "wing_r", "wing_lr", "wing_rr", "engine_l",
             "engine_r", "nozzles_f", "nozzles_r", "afterburner", "wingtip_1", "wingtip_2", "gear_door_fl", "gear_door_fr", "gear_door_rl1", "gear_door_rr1",
             "gear_door_rl2", "gear_door_rr2", "gear_door_rml", "gear_door_rmr", "gear_f", "gear_rl", "gear_lm1", "gear_rr", "gear_rm1", "gear_rm", "prop_left",
             "prop_right", "legs", "attach_male", "draft_animal_attach_lr", "draft_animal_attach_rr", "draft_animal_attach_lm", "draft_animal_attach_rm",
             "draft_animal_attach_lf", "draft_animal_attach_rf", "wheelcover_l", "wheelcover_r", "barracks", "pontoon_l", "pontoon_r", "no_ped_col_step_l",
             "no_ped_col_strut_1_l", "no_ped_col_strut_2_l", "no_ped_col_step_r", "no_ped_col_strut_1_r", "no_ped_col_strut_2_r", "light_cover", "emissives",
             "neon_l", "neon_r", "neon_f", "neon_b", "dashglow", "doorlight_lf", "doorlight_rf", "doorlight_lr", "doorlight_rr", "unknown_id", "dials",
             "engineblock", "bobble_head", "bobble_base", "bobble_hand", "chassis_Control"];

var firstDebugRun = false;
var appendDebugRun = "";
mp.events.add('render', () => {

    if(mp.players.local.vehicle !== null) {

        if(firstDebugRun) {
            // Debug, wenn erste Anzeige nirgends nachkommastellen hat, wird der Text abgeschnitten, sobald Nachkommastellen angezeigt werden
            appendDebugRun = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
            firstDebugRun  = true;
        } else {
            appendDebugRun = "";
        }
        let vehicle = mp.players.local.vehicle;
        let vehicleData = "";

        vehicleData += "getIsEngineRunning: "     + Utility.Round(vehicle.getIsEngineRunning(), 2)     + "\n";
        vehicleData += "getEngineHealth: "        + Utility.Round(vehicle.getEngineHealth(), 2)        + "\n";
        vehicleData += "getHeliEngineHealth: "    + Utility.Round(vehicle.getHeliEngineHealth(), 2)    + "\n" + appendDebugRun;


        mp.game.graphics.drawText("Vehicle Data:\n" + vehicleData, [0.05, 0.4], {
            font: 4,
            color: [255, 255, 255, 255],
            scale: [0.4, 0.4],
            outline: true
        });

        vehicleData = "";
        vehicleData += "getMaxHealth: "           + Utility.Round(vehicle.getMaxHealth(), 2)           + "\n";
        vehicleData += "getBodyHealth: "          + Utility.Round(vehicle.getBodyHealth(), 2)          + "\n";
        vehicleData += "getBodyHealth2: "         + Utility.Round(vehicle.getBodyHealth2(), 2)         + "\n";
        vehicleData += "getHeliMainRotorHealth: " + Utility.Round(vehicle.getHeliMainRotorHealth(), 2) + "\n" + appendDebugRun;


        mp.game.graphics.drawText(vehicleData, [0.15, 0.4], {
            font: 4,
            color: [255, 255, 255, 255],
            scale: [0.4, 0.4],
            outline: true
        });

        vehicleData = "";
        vehicleData += "getHeliTailRotorHealth: " + Utility.Round(vehicle.getHeliTailRotorHealth(), 2) + "\n";
        vehicleData += "getHealth: "              + Utility.Round(vehicle.getHealth(), 2)              + "\n";
        vehicleData += "getPetrolTankHealth: "        + Utility.Round(vehicle.getPetrolTankHealth(), 2)    + "\n" + appendDebugRun;

        mp.game.graphics.drawText(vehicleData, [0.25, 0.4], {
            font: 4,
            color: [255, 255, 255, 255],
            scale: [0.4, 0.4],
            outline: true
        });
    }

    // Debug Anzeige von Bones
    mp.vehicles.forEachInStreamRange((veh) => {
        debugVehicleBones.forEach(function(bone) {
            let vpos = veh.getWorldPositionOfBone(veh.getBoneIndexByName(bone));
            if(vpos.x != 0 || vpos.y != 0 || vpos.z != 0) {
                mp.game.graphics.setDrawOrigin(vpos.x, vpos.y, vpos.z, 0);
                mp.game.graphics.drawText(bone, [0, 0], {
                    font: 4,
                    color: [255, 255, 255, 255],
                    scale: [0.4, 0.4],
                    outline: true
                });
                mp.game.graphics.clearDrawOrigin();
            }
        });

        let btwpos = GetPositionBetweenPosition(
            veh.getWorldPositionOfBone(veh.getBoneIndexByName("wheel_lr")),
            veh.getWorldPositionOfBone(veh.getBoneIndexByName("wheel_rr"))
        );

        btwpos.z = veh.position.z + 0.1;

        mp.game.graphics.setDrawOrigin(btwpos.x, btwpos.y, btwpos.z, 0);
        mp.game.graphics.drawText("BetweenWheels!!!", [0, 0], {
            font: 4,
            color: [255, 255, 255, 255],
            scale: [0.4, 0.4],
            outline: true
        });
        mp.game.graphics.clearDrawOrigin();

    });

})
*/
// Test Handling bei versch. Fahrzeugen
/*
setInterval(() => {
    var veh = mp.players.local.vehicle;

    if(veh !== null && mp.vehicles.exists(veh)) {
        veh.setHandling("FDRIVEBIASFRONT", 0.5);    // 0.5 = Allrad, 0 = Heck, 1 = Front
        veh.setHandling("FINITIALDRIVEFORCE", 2.0); // Prüfen: Beschleunigung?
        veh.setHandling("FDRIVEINERTIA", 1.5);      // Prüfen: Beschleunigung?
        veh.setHandling("FBRAKEFORCE", 1.25);       // Bremse
        veh.setHandling("FHANDBRAKEFORCE", 1.25);   // Handbremse


        veh.setHandling("FTRACTIONCURVEMAX", 0.75); // Haftung am Boden allgemein
        veh.setHandling("FTRACTIONBIASFRONT", 0.5); // Gleiche "Haftung" auf allen Rädern
    }
}, 1000);
*/
/*
mp.events.add('render', () => {
    // Debug Bus Trallalalalal
    mp.vehicles.forEachInStreamRange((veh) => {
        if (veh.getVariable("BUS_ROUTE") != null && veh.getVariable("BUS_STOP") != null) {
            mp.game.graphics.setDrawOrigin(veh.position.x, veh.position.y, veh.position.z + 3.5, 0);
            mp.game.graphics.drawText(veh.getVariable("BUS_ROUTE") + " | " + veh.getVariable("BUS_STOP"), [0, 0], {
                font: 4,
                color: [255, 255, 255, 255],
                scale: [0.4, 0.4],
                outline: true
            });
            mp.game.graphics.clearDrawOrigin();
        }
    });
})

const Bone_To_ID_debug = {
    SKEL_ROOT: 0, FB_R_Brow_Out_000: 1356, MH_R_Elbow: 2992, SKEL_L_Finger01: 4089,
    SKEL_L_Finger02: 4090, SKEL_L_Finger31: 4137, SKEL_L_Finger32: 4138, SKEL_L_Finger41: 4153,
    SKEL_L_Finger42: 4154, SKEL_L_Finger11: 4169, SKEL_L_Finger12: 4170, SKEL_L_Finger21: 4185,
    SKEL_L_Finger22: 4186, RB_L_ArmRoll: 5232, IK_R_Hand: 6286, RB_R_ThighRoll: 6442,
    SKEL_R_Clavicle: 10706, FB_R_Lip_Corner_000: 11174, SKEL_Pelvis: 11816, IK_Head: 12844,
    SKEL_L_Foot: 14201, MH_R_Knee: 16335, FB_LowerLipRoot_000: 17188, FB_R_Lip_Top_000: 17719,
    SKEL_L_Hand: 18905, FB_R_CheekBone_000: 19336, FB_UpperLipRoot_000: 20178,
    FB_L_Lip_Top_000: 20279, FB_LowerLip_000: 20623, FB_L_CheekBone_000: 21550,
    MH_L_Elbow: 22711, SKEL_Spine0: 23553, RB_L_ThighRoll: 23639, PH_R_Foot: 24806, SKEL_Spine1: 24816,
    SKEL_Spine2: 24817, SKEL_Spine3: 24818, FB_L_Eye_000: 25260, SKEL_L_Finger00: 26610,
    SKEL_L_Finger10: 26611, SKEL_L_Finger20: 26612, SKEL_L_Finger30: 26613, SKEL_L_Finger40: 26614,
    FB_R_Eye_000: 27474, SKEL_R_Forearm: 28252, PH_R_Hand: 28422, FB_L_Lip_Corner_000: 29868,
    SKEL_Head: 31086, IK_R_Foot: 35502, RB_Neck_1: 35731, IK_L_Hand: 36029, SKEL_R_Calf: 36864,
    RB_R_ArmRoll: 37119, FB_Brow_Centre_000: 37193, SKEL_Neck_1: 39317, SKEL_R_UpperArm: 40269,
    FB_R_Lid_Upper_000: 43536, RB_R_ForeArmRoll: 43810, SKEL_L_UpperArm: 45509,
    FB_L_Lid_Upper_000: 45750, MH_L_Knee: 46078, FB_Jaw_000: 46240, FB_L_Lip_Bot_000: 47419,
    FB_Tongue_000: 47495, FB_R_Lip_Bot_000: 49979, SKEL_R_Thigh: 51826, SKEL_R_Foot: 52301,
    IK_Root: 56604, SKEL_R_Hand: 57005, SKEL_Spine_Root: 57597, PH_L_Foot: 57717, SKEL_L_Thigh: 58271,
    FB_L_Brow_Out_000: 58331, SKEL_R_Finger00: 58866, SKEL_R_Finger10: 58867, SKEL_R_Finger20: 58868,
    SKEL_R_Finger30: 58869, SKEL_R_Finger40: 58870, PH_L_Hand: 60309, RB_L_ForeArmRoll: 61007,
    SKEL_L_Forearm: 61163, FB_UpperLip_000: 61839, SKEL_L_Calf: 63931, SKEL_R_Finger01: 64016,
    SKEL_R_Finger02: 64017, SKEL_R_Finger31: 64064, SKEL_R_Finger32: 64065, SKEL_R_Finger41: 64080,
    SKEL_R_Finger42: 64081, SKEL_R_Finger11: 64096, SKEL_R_Finger12: 64097, SKEL_R_Finger21: 64112,
    SKEL_R_Finger22: 64113, SKEL_L_Clavicle: 64729, FACIAL_facialRoot: 65068, IK_L_Foot: 65245
}

mp.events.add('render', () => {

    mp.players.forEachInStreamRange((target) => {
        if (target != mp.players.local) {
            for (let x in Bone_To_ID_debug) {
                if(x.includes("SKEL_") == true && x.includes("FB") == false && x.includes("Finger") == false && x.includes("Eye") == false && x.includes("Lip") == false && x.includes("000") == false){
                    let vpos = target.getBoneCoords(Bone_To_ID_debug[x], 0, 0, 0);
                    //let vpos = target.getWorldPositionOfBone(target.getBoneIndexByName(bone));
                    if(vpos.x != 0 || vpos.y != 0 || vpos.z != 0) {
                        mp.game.graphics.setDrawOrigin(vpos.x, vpos.y, vpos.z, 0);
                        mp.game.graphics.drawText(x, [0, 0], {
                            font: 4,
                            color: [255, 255, 255, 255],
                            scale: [0.35, 0.35],
                            outline: false
                        });
                        mp.game.graphics.clearDrawOrigin();
                    }
                }
            }
        }
    });
})


/// TESCHTEEEEEE
*/


var bikes = {
    1131912276: true,
    448402357: true,
    3458454463: true,
    4108429845: true,
    1127861609: true,
    3061159916: true,
    3894672200: true
}

Tacho = class {
    constructor() {
        this._setup();
    }

    _setup() {
        var self = this;
        self.speed = 0;
        self.rpm = 0;
        self.fuel = 0;
        self.max_fuel = 0;

        self._temp_fuel = 0;
        self._temp_max_fuel = 0;

        self.engineconsumption = 2;
        self.distanceconsumption = 15;
        self.ConsumptionInvterval = null;

        self.km = 0;
        self.tick = 0;
        self.maxtick = 60;
        self.health = 1005;
        self.pos = null;
        self.browser = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/tacho/index.html", false);
        self.browser.active(false);
        self._ready = false;
        self._static = false;
        self._locked = true;
        self._engine = false;
        self._light = false;
        self.seatbelt = false;
        self._seatbelt = false;
        self._isPlayerDriver = false;
        self._isPlayerDriverVehicle = null;
        self._kmCounter = 0;
        self._dirtLevel = -1;
        self._kmUpdaterThreshold = 6;
        self._vehicleHealthStart = null;
        self.fuelType = "benzin";

        mp.events.add('render', () => {
            if (self.tick <= self.maxtick) {
                self.tick = self.tick + 1;
            } else {
                self.tick = 0;
                self.render();
            }
        });

        mp.events.add('initTacho', () => {
            self.ready();
        });
        mp.events.add("SetVehicleFuelAndDistance", (cdist, cfuel, mfuel, cengine, cdistance) => {
            self.engineconsumption = cengine;
            self.distanceconsumption = cdistance;
            self.fuel = cfuel;
            self.max_fuel = mfuel;
            self.km = cdist;
            self._kmCounter = 0;
        })

        mp.events.add("playerEnterVehicle", (veh, seat) => {
            //VioRageManager.SendChatMessage("playerEnterVehicle");

            self._isPlayerDriver = false;
            self._isPlayerDriverVehicle = null;

            self.maxtick = 5;

            self.setSeatbelt(false);


            const truckHandle = veh.handle;
            const outBuffer = [ new ArrayBuffer(4) ];
            if (mp.game.invoke("0x1CDD6BADC297830D", truckHandle, outBuffer)) {
                veh.trailerMass = 3500;
            } else {
                veh.trailerMass = 0;
            }

            if (self.browser && self._ready) {
                var health = 1000;
                if (veh.getVariable("VEHICLE_HEALTH") != null) {
                    health = veh.getVariable("VEHICLE_HEALTH");
                    SetVehicleHealthStatus(veh, health)
                }
                //VioRageManager.SendChatMessage("playerEnterVehicle Health: " + health);
                self.health = health;
                self.browser.call("drawHealth", self.health);

                let locked = (veh.getDoorLockStatus() == 2) ? true : false;
                let engine = veh.getIsEngineRunning();
                let light = veh.getLightsState(1, 1);
                light = light.lightsOn == 1 ? (light.highbeamsOn == 1 ? 1 : 1) : (light.highbeamsOn == 1 ? 1 : 0);
                self._locked = locked;
                self._engine = engine;
                self._light = light;
                self.browser.call("drawInfo", self._engine, self._light, self._locked, self._seatbelt, self.getSpecialVehicleSettings(veh.model));
            }
        })

        mp.events.add("playerLeaveVehicle", () => {
            if (self._isPlayerDriver) {
                if (self._isPlayerDriverVehicle != null) {
                    if (mp.vehicles.exists(self._isPlayerDriverVehicle)) {
                        if (self._kmCounter > 0 && self._isPlayerDriverVehicle != null && self.max_fuel > 0) {
                            CommunicationManager.TriggerServer("UpdateVehicleTachoData", self._isPlayerDriverVehicle, parseFloat(self._kmCounter), parseFloat(self._dirtLevel), parseFloat(self.fuel));
                        }
                        if (self._isPlayerDriverVehicle != null) {
                            // 1.1 -> Crash if self._isPlayerDriverVehicle -> is a destroyed vehicle
                            CommunicationManager.TriggerServer("OnClientRequestUpdateVehicleHealth", self._isPlayerDriverVehicle, self.health);
                        }
                    }
                }
            }
            self._isPlayerDriver = false;
            self._isPlayerDriverVehicle = null;
            self.maxtick = 120;
            self._kmCounter = 0;
            self._dirtLevel = -1;
            self.speed = 0;
            self.rpm = 0;
            self.fuel = 0;
            self.max_fuel = 0;
            self.km = 0;
            self.health = 1005;
            if (self.browser && self._ready) {
                self.browser.call("drawHealth", 1000);
            }
            if (self.ConsumptionInvterval != null) {
                //VioRageManager.SendChatMessage("ClearTachoFuelInterval");
                clearInterval(self.ConsumptionInvterval);
                self.ConsumptionInvterval = null;
            }
        })

        mp.events.add('ForcePlayerToSaveVehicleData', (callback_func) => {
            if (self._isPlayerDriver) {
                if (self._isPlayerDriverVehicle != null) {
                    if (mp.vehicles.exists(self._isPlayerDriverVehicle)) {
                        if (self._kmCounter > 0 && self._isPlayerDriverVehicle != null && self.max_fuel > 0) {
                            CommunicationManager.TriggerServer("UpdateVehicleTachoData", self._isPlayerDriverVehicle, parseFloat(self._kmCounter), parseFloat(self._dirtLevel), parseFloat(self.fuel));
                        }
                        if (self._isPlayerDriverVehicle != null) {
                            // 1.1 -> Crash if self._isPlayerDriverVehicle -> is a destroyed vehicle
                            CommunicationManager.TriggerServer("OnClientRequestUpdateVehicleHealth", self._isPlayerDriverVehicle, self.health);
                        }
                    }
                }
            }
            CommunicationManager.TriggerServer(callback_func);
        });
    }

    render() {
        if (mp.game.ui.isPauseMenuActive() == false) {
            let localVeh = mp.players.local.vehicle;
            if (localVeh) {
                var self = this;
                var isExitingVehicle = false;

                if (mp.players.local.getIsTaskActive(167) || mp.players.local.getIsTaskActive(2) || mp.players.local.getIsTaskActive(402) || mp.players.local.getIsTaskActive(152)) {
                    mp.game.player.setCanDoDriveBy(false);
                    isExitingVehicle = true;
                }

                if (isExitingVehicle == false) {
                    if (VioRageManager.PlayerIsDriver(mp.players.local.handle, localVeh)) {
                        self._isPlayerDriver = true;
                        self._isPlayerDriverVehicle = localVeh
                    } else {
                        self._isPlayerDriver = false;
                        self._isPlayerDriverVehicle = null;
                    }
                }

                if (isExitingVehicle == false && self._ready && self._isPlayerDriver == true && Webwindow["CarTuneWindow"] == null) {

                    self._isPlayerDriver = true;
                    self._isPlayerDriverVehicle = localVeh
                    if (self._static == false) {
                        self._static = true;
                        self.browser.call("drawCircle", new Date().getHours());
                        self.browser.call("drawInfo", self._engine, self._light, self._locked, self._seatbelt, self.getSpecialVehicleSettings(localVeh.model));
                        self.browser.call("drawFuel", 0, false, false);
                    }
                    if (self.browser && self._ready) {
                        if (self.pos == null) self.pos = mp.players.local.position;
                        let cPos = mp.players.local.position;
                        if (mp.storage.data.drawTacho == "1") {
                            if (self.browser.isActive == false) {
                                self.browser.active(true);
                            }
                        }
                        if (self.ConsumptionInvterval == null) {
                            CreateTachoFuelInterval()
                        }
                        let dist = mp.game.system.vdist2(cPos.x, cPos.y, cPos.z, self.pos.x, self.pos.y, self.pos.z);
                        self.pos = cPos;
                        if (dist < 7500 && dist > 0) { // !! Anpassen damit es nicht mehr so schnell hoch springt !!
                            dist = dist / 1000
                            dist = dist / 4.0; // Vector2D to km
                            self.km += dist;
                            self._kmCounter += dist;
                            if (self._kmCounter >= self._kmUpdaterThreshold) {
                                if (self.max_fuel > 0) {
                                    self._dirtLevel = localVeh.getDirtLevel() + 0.20;
                                    CommunicationManager.TriggerServer("UpdatePlayerTachoData", parseFloat(self._kmCounter), parseFloat(self._dirtLevel), parseFloat(self.fuel));
                                    self._kmCounter = 0;
                                }
                            }
                        }

                        let UpdateVehicleHealth = false;
                        let health = localVeh.getHealth();
                        if (health != null) {
                            if (health != self.health) {
                                if (health < self.health && self.health <= 1000) {
                                    if(mp.storage.data.hitSettings.dmgindicator == 1){
                                        mp.game.graphics.startScreenEffect("CamPushInMichael", 1000, false);
                                        setTimeout(() => {
                                            mp.game.graphics.stopScreenEffect("CamPushInMichael");
                                        }, 200);
                                        SetVehicleHealthStatus(localVeh, health)
                                    }
                                }
                                self.health = health;
                                UpdateVehicleHealth = true;
                            }
                        }

                        if (mp.storage.data.drawTacho == "1") {
                            let speed = localVeh.getSpeed() * 3.6;
                            let diff_speed = Math.abs(speed - self.speed);

                            if (self.maxtick > 6) {
                                self.maxtick = 6;
                            }

                            if (diff_speed > 1.8) {
                                if (self.maxtick > 0) {
                                    self.maxtick = self.maxtick - 1;
                                }
                            } else {
                                if (self.maxtick < 6) {
                                    self.maxtick = self.maxtick + 1;
                                }
                            }

                            if (UpdateVehicleHealth) {
                                this.browser.call("drawHealth", self.health);
                            }

                            if (self._temp_fuel != self.fuel || self._temp_max_fuel != self.max_fuel) {
                                self._temp_fuel = self.fuel;
                                self._temp_max_fuel = self.max_fuel;
                                this.browser.call("drawFuel", self.fuel, self.max_fuel);
                            }

                            this.browser.call("drawNeedle", speed, self.km, localVeh.rpm, localVeh.gear);
                            self.speed = speed;

                            let locked = (localVeh.getDoorLockStatus() == 2) ? true : false;
                            let engine = localVeh.getIsEngineRunning();
                            let light = localVeh.getLightsState(1, 1);
                            light = light.lightsOn == 1 ? (light.highbeamsOn == 1 ? 1 : 1) : (light.highbeamsOn == 1 ? 1 : 0);
                            if ((self._locked != locked) || (self._engine != engine) || (self._light != light) || (self._seatbelt != self.seatbelt)) {
                                self._locked = locked;
                                self._engine = engine;
                                self._light = light;
                                self._seatbelt = self.seatbelt;
                                this.browser.call("drawInfo", self._engine, self._light, self._locked, self._seatbelt, self.getSpecialVehicleSettings(localVeh.model));
                            }

                        } else {
                            self.browser.active(false);
                        }
                    } else {
                        self.browser.active(false);
                    }
                } else {
                    self.browser.active(false);
                    self._static = false;
                }
            } else {
                this.browser.active(false);
                this._static = false;
            }
        }
    }

    ready() {
        this._ready = true;
    }

    UpdateVehicleFuel() {
        let to_reduce = 0;
        if (this.max_fuel > 0 && this.fuel > 0) {
            let localVeh = mp.players.local.vehicle;
            if (localVeh) {
                if (mp.game.vehicle.isThisModelABicycle(localVeh.model) == false) {
                    if (this._engine == true) {
                        to_reduce += (this.engineconsumption / 3600);
                        //VioRageManager.SendChatMessage("engineconsumption "+this.engineconsumption+" : -"+to_reduce)
                    }
                    let speed = localVeh.getSpeed(); // in m/s
                    if (speed > 0) {

                        if (false) {
                            to_reduce += ((this.distanceconsumption / 100) * (speed / 1000));
                        }
                        else {

                            if (
                                (
                                    localVeh.getHeightAboveGround() < 10 // kein freier Fall
                                ) && (
                                    mp.game.vehicle.isThisModelACar(localVeh.model) ||
                                    mp.game.vehicle.isThisModelABike(localVeh.model) ||
                                    mp.game.vehicle.isThisModelAQuadbike(localVeh.model) // nur autos bikes und quads (alles was raeder hat)
                                ) && (
                                    this._engine // Wenn motor nicht läuft, passiert auch nichts
                                ) && (
                                    this.getSpecialVehicleSettings(localVeh.model) !== "aviation" // keine Flugzeuge
                                )
                            ) {
                                if (!localVeh.hasOwnProperty("fuelCalc")) {
                                    localVeh.fuelCalc = {
                                        speed: speed,
                                        time: Date.now(),
                                        position: localVeh.position,
                                    };
                                }

                                const lastSpeed = localVeh.fuelCalc.speed;
                                const lastUpdate = localVeh.fuelCalc.time;
                                const lastPosition = localVeh.fuelCalc.position;
                                localVeh.fuelCalc = {
                                    speed: speed,
                                    time: Date.now(),
                                    position: localVeh.position,
                                };


                                let gesamtEnergie = 0;

                                const mass = Number(localVeh.getHandling("fMass")) + (localVeh.trailerMass || 0); // in kg
                                const dist = VioRageManager.vdist(lastPosition, localVeh.position); // in m (Meters)
                                const acceleration = (speed - lastSpeed) / ((Date.now() / 1000) - (lastUpdate / 1000)); // in m/s^2 (acceleration)

                                const dichte = 0.8; // kg/l
                                const energiedichte = 12.5 * dichte * 3600 * 1000; // 12 kWh/kg * 0.8 kg/l * 3600s * 1000 = Ws/l = J/l

                                const g = 9.81; // = 0.981G oder 9.81 m/s^2

                                // addiere Beschleinigungen
                                if (acceleration > -0.1) {
                                    const force = acceleration * mass; // m/s^2 * kg = N (Newton)
                                    const energieBeschleinigung = force * dist * 0.35; // in J (Joules)
                                    gesamtEnergie += energieBeschleinigung;
                                }

                                // addiere Luftwiederstand
                                if (acceleration >= -0.1) {
                                    /*
                                        roh: Luftdichte = 1.225 kg/m^3
                                        A: Querschnittsfläche = 1.6m * 1.5m = 2,4m^2

                                        cw: Luftwiderstandsbeiwert = 9.3
                                        https://de.wikipedia.org/wiki/Portal:Auto_und_Motorrad/Luftwiderstandsbeiwert

                                        v: geschwidnigkeit
                                        s: strecke

                                        W = roh / 2 * cw * A * v^2 * s
                                     */

                                    let typeKey = "normalCar";
                                    if (mp.game.vehicle.isThisModelABike(localVeh.model) || [0xbbb4e9b0, 0x8d780d37].includes(localVeh.model)) {
                                        typeKey = "bike";
                                    }
                                    else if (localVeh.getClass() == 20) {
                                        typeKey = "truck";
                                        if (localVeh.trailerMass) {
                                            typeKey = "truck_trailer";
                                        }
                                    }
                                    else if (localVeh.getClass() == 2) {
                                        typeKey = "suvCar";
                                    }
                                    else if (localVeh.getClass() == 0) {
                                        typeKey = "aerodynamicCar";
                                    }

                                    const cwTable = {
                                        "suvCar": 0.3,
                                        "normalCar": 0.2,
                                        "aerodynamicCar": 0.1,
                                        "bike": 0.5,
                                        "truck": 1,
                                        "truck_trailer": 1.15,
                                    }

                                    const areaTable = {
                                        "suvCar": 1.5,
                                        "normalCar": 1.25,
                                        "aerodynamicCar": 1,
                                        "bike": 0.125,
                                        "truck": 3,
                                        "truck_trailer": 3.5,
                                    }

                                    const daten = {
                                        A: areaTable[typeKey],
                                        roh: 1.225,
                                        cw: cwTable[typeKey],
                                    }
                                    const energieLuft = daten.roh / 2 * daten.cw * daten.A * (speed * speed) * dist * 0.85;
                                    gesamtEnergie += energieLuft;
                                }

                                // addiere Gravitation
                                if (acceleration > -0.1) {
                                    const aKat = Math.sqrt(Math.pow((localVeh.position.x - lastPosition.x), 2) + Math.pow((localVeh.position.y - lastPosition.y), 2));
                                    const gKat = localVeh.position.z - lastPosition.z;
                                    const alpha = Math.atan2(gKat, aKat);
                                    const force = mass * g * Math.sin(alpha);
                                    const enegiePotentiell = force * dist;
                                    gesamtEnergie += enegiePotentiell * .5;
                                }

                                // addiere rollwiederstand
                                if (acceleration >= -0.1) { // mus reifen haben
                                    let cr; // Rollwiderstandskoeffizient
                                    if ([10, 17, 19, 20].includes(localVeh.getClass())) {
                                        cr = 0.01;
                                    }
                                    else if (mp.game.vehicle.isThisModelABike(localVeh.model)) {
                                        cr = 0.2;
                                    }
                                    else {
                                        cr = 0.015;
                                    }

                                    const force = cr * mass * g;
                                    const egergieRoll = force * dist;
                                    gesamtEnergie += egergieRoll * 0.85;
                                }

                                let verbrauch = 0;
                                // Wirkungsgrad
                                if (this.getSpecialVehicleSettings(localVeh.model)) {
                                    verbrauch = gesamtEnergie * 2.77777 * Math.pow(10, -7);
                                    verbrauch /= 0.70; // elektro motor 65%
                                }
                                else if (this.fuelType === "benzin") {
                                    verbrauch = gesamtEnergie / (12.5 * 0.74 * 3600 * 1000); // J / (12 kWh/kg * 0.74 kg/l * 3600s * 1000 = Ws/l = J/l) = l
                                    verbrauch /= 0.35; // Benziner 32%
                                }
                                else {
                                    verbrauch = gesamtEnergie / (11.5 * 0.83 * 3600 * 1000); // J / (12 kWh/kg * 0.8 kg/l * 3600s * 1000 = Ws/l = J/l) = l
                                    verbrauch /= 0.50; // Diesel 45%
                                }

                                if (verbrauch > 0) {
                                    to_reduce += verbrauch;
                                }
                            }
                            else {
                                to_reduce += ((this.distanceconsumption / 100) * (speed / 1000));
                            }
                        }

                        //VioRageManager.SendChatMessage("distanceconsumption "+this.distanceconsumption+" : -"+to_reduce)
                    }

                    /* TODO Treibstoffverlust
                    if (localVeh.getHealth() <= 250) {
                        to_reduce += 1.259157818 * Math.pow(.9788766491, localVeh.getHealth());
                    }
                     */

                    this.fuel = this.fuel - to_reduce;
                    if (this.fuel < 0) {
                        this.fuel = 0;
                    }

                    if (to_reduce > 0) {
                        if (this.fuel == 0) {
                            CommunicationManager.TriggerServer("UpdatePlayerTachoData", parseFloat(this._kmCounter), parseFloat(this._dirtLevel), parseFloat(this.fuel));
                        }
                    }
                }
            }
        }
    }

    setSeatbelt(state) {
        this.seatbelt = state;
    }

    getSpecialVehicleSettings(vmodel) {
        if (vmodel == 0x206D1B68 || vmodel == 0xA4D99B7D || vmodel == 0x52FF9437 || vmodel == 0x9F4B77BE || vmodel == 0xBC993509 || vmodel == 0x64430650 || vmodel == 0x3D7C6410 || vmodel == 0x91CA96EE || vmodel == 0x8F0E3594) {
            return "electric";
        } else if (mp.game.vehicle.isThisModelAHeli(vmodel) || mp.game.vehicle.isThisModelAPlane(vmodel)) {
            return "aviation";
        } else if (mp.game.vehicle.isThisModelABicycle(vmodel)) {
            return "noEngine";
        } else {
            return "combustion";
        }
    }
}
Tacho = new Tacho();


function CreateTachoFuelInterval() {
    //VioRageManager.SendChatMessage("CreateTachoFuelInterval");

    if (Tacho._isPlayerDriverVehicle != null) {
        CommunicationManager.TriggerServer("OnClientRequestVehicleTachoData", Tacho._isPlayerDriverVehicle);
    }

    clearInterval(Tacho.ConsumptionInvterval);
    Tacho.ConsumptionInvterval = setInterval(function () {
        Tacho.UpdateVehicleFuel();
    }, 1000);
}

function energyTo100KmL(value, dist) {
    value = value / (12.5 * 0.74 * 3600 * 1000); // J / (12 kWh/kg * 0.74 kg/l * 3600s * 1000 = Ws/l = J/l) = l
    value /= 0.32; // Benziner 32%
    value = (value / dist) * 1000 * 100;
    return value;
}

var CarTuneTable = {};
var CarTuneLanguage = {};
var Vehiclemods = {};
var CarDetails = {};
var CarTunes;
var TunePrices;
var CarTuneNumbers = {}
var CarTuneCamera = null;


CarTuneNumbers[0] = true
CarTuneNumbers[1] = true
CarTuneNumbers[2] = true
CarTuneNumbers[3] = true
CarTuneNumbers[4] = true
CarTuneNumbers[5] = true
CarTuneNumbers[6] = true
CarTuneNumbers[7] = true
CarTuneNumbers[8] = true
CarTuneNumbers[9] = true
CarTuneNumbers[10] = true
CarTuneNumbers[11] = true
CarTuneNumbers[12] = true
CarTuneNumbers[13] = true
CarTuneNumbers[14] = true
CarTuneNumbers[15] = true
CarTuneNumbers[18] = true
CarTuneNumbers[22] = true
CarTuneNumbers[23] = true
CarTuneNumbers[24] = true
CarTuneNumbers[25] = true
CarTuneNumbers[27] = true
CarTuneNumbers[28] = true
CarTuneNumbers[30] = true
CarTuneNumbers[33] = true
CarTuneNumbers[34] = true
CarTuneNumbers[35] = true
CarTuneNumbers[38] = true
CarTuneNumbers[46] = true
CarTuneNumbers[48] = true
CarTuneNumbers[55] = true
CarTuneNumbers[62] = true
CarTuneNumbers[69] = true
CarTuneNumbers[200] = true
/// KEYBINDS
mp.events.add("playerActionCloseCarTune", () => {
    if (Webwindow["CarTuneWindow"] != null) {
        if (isPlayerOnTuningPlace) {

            var lp = mp.players.local;
            var vehicle = lp.vehicle;

            for (var i in CarTuneNumbers) {
                if (Number(i) < 200) {
                    vehicle.removeMod(Number(i))
                }
            }
            vehicle.removeMod(18);
            vehicle.setWindowTint(0);
            vehicle.setNumberPlateTextIndex(0);

            Webwindow["CarTuneWindow"].destroy();
            Webwindow["CarTuneWindow"] = null;
            CommunicationManager.TriggerServer("requestBuyCarTuneShopDetail", 9999999, 0, 0, 0, 0)
            mp.gui.cursor.visible = false;

            CarTuneCamera.setActive(false);
            CarTuneCamera.destroy();

            mp.game.cam.renderScriptCams(false, false, 0, true, false);
            mp.game.ui.setMinimapVisible(false)
            mp.game.ui.displayRadar(true);
            vehicle.setNeonLightEnabled(0, false)
            vehicle.setNeonLightEnabled(1, false)
            vehicle.setNeonLightEnabled(2, false)
            vehicle.setNeonLightEnabled(3, false)

            isPlayerOnTuningPlace = false;
            disableAllControls = false;
            CarTuneTable = {};
            ToogleHudStatus(true, true);
        }
    }
});


mp.keys.bind(0x20, false, () => {
    if (isPlayerOnTuningPlace) {
        mp.events.call("playerActionCloseCarTune")
    }
})

////
function CarTuneShopOpen() {

    mp.game.ui.displayRadar(false);
    ToogleHudStatus(false, true);

    CarTuneTable = {};
    CarTuneTable["mode"] = "buy";
    CarTuneTable["money"] = InventoryItems["0"];
    CarTuneTable["items"] = {};
    var lp = mp.players.local;
    var vehicle = lp.vehicle;

    //VioRageManager.ConsoleLog("warning", `CarTuneShopOpen`, true);

    const ModAmounts = {};
    for (var i in CarTuneNumbers) {
        if (CarTuneNumbers[i]) {

            var VEHICLE_MOD_ID = vehicle.getNumMods(Number(i));

            ModAmounts[i] = VEHICLE_MOD_ID;

            if (VEHICLE_MOD_ID > 0) {
                CarTuneTable["items"][i] = {};
                CarTuneTable["items"][i]["name"] = Vehiclemods["item." + i];
                CarTuneTable["items"][i]["native_name"] = vehicle_data.getSlotName(i);
                //VioRageManager.SendChatMessage("ID: " + i.toString() )
                CarTuneTable["items"][i]["price"] = 0;
                CarTuneTable["items"][i]["select"] = true;
            }

            if (Number(i) != 11 && Number(i) != 12 && Number(i) != 55 && Number(i) != 62) {
                if (Number(i) < 200) {
                    if (VEHICLE_MOD_ID > 0) {
                        CarDetails[i] = {}
                        CarDetails[i][-1] = {};
                        CarDetails[i][-1]["name"] = "Standard";
                        CarDetails[i][-1]["price"] = TunePrices[i];
                        CarDetails[i][-1]["drawable"] = i;
                        CarDetails[i][-1]["texture"] = -1;
                        for (let j = 0; j < VEHICLE_MOD_ID; j++) {
                            if (i == 13 && j == 3) {
                                continue;
                            } // Getriebe Nummer 3 ist defekt;

                            CarDetails[i][j] = {};

                            //VioRageManager.ConsoleLog("warning", `Check i = ${i.toString()}`, true);
                            //VioRageManager.ConsoleLog("warning", `Check j = ${j.toString()}`, true);

                            let l_text = mp.game.invoke("0x8935624F8C5592CC", vehicle, Number(i), Number(j)) /// TEST
                            //VioRageManager.ConsoleLog("warning", `0x00BA91AE0048DAC9 = ${l_text}`, true);

                            //let l_text = vehicle.getModTextLabel(Number(i), Number(j)); // worked fine.. but now broken....
                            if(l_text != null){

                                //CarDetails[i][j]["name"] = mp.game.ui.getLabelText(l_text);
                                CarDetails[i][j]["name"] = "NULL" //mp.game.invoke("0x3A2A8DAFDBEC4CFE", l_text) /// TEST
                                //VioRageManager.ConsoleLog("warning", `0x3A2A8DAFDBEC4CFE = ${CarDetails[i][j]["name"]}`, true);

                                if (CarDetails[i][j]["name"] == "NULL") {
                                    let name = vehicle_data.getPartName(i, j);
                                    CarDetails[i][j]["name"] = name;
                                }
                            }else{
                                CarDetails[i][j]["name"] = "NULL";
                            }

                            if (j == -1) {
                                CarDetails[i][j]["price"] = 0;
                            } else {
                                CarDetails[i][j]["price"] = TunePrices[i];
                            }
                            CarDetails[i][j]["drawable"] = i;
                            CarDetails[i][j]["texture"] = j;

                            // Entfernen von Anführungszeichen, da diese nicht durch Stringify escaped werden!!!
                            CarDetails[i][j]["name"] = String(CarDetails[i][j]["name"]).replace(/"/gi, "");
                            CarDetails[i][j]["name"] = String(CarDetails[i][j]["name"]).replace(/'/gi, "");
                        }
                    }
                }
            }
            if (Number(i) == 11) {
                let price = TunePrices[i];
                TunePrices[i] = {}
                CarDetails[i] = {}
                CarDetails[i][-1] = {};
                CarDetails[i][-1]["name"] = "Standard";
                CarDetails[i][-1]["price"] = 0;
                CarDetails[i][-1]["drawable"] = 11;
                CarDetails[i][-1]["texture"] = -1;
                TunePrices[i][-1] = price
                if (VEHICLE_MOD_ID >= 1) {
                    CarDetails[i][0] = {};
                    CarDetails[i][0]["name"] = "EMS I (+4% Beschleunigung)";
                    CarDetails[i][0]["price"] = price;
                    CarDetails[i][0]["drawable"] = 11;
                    CarDetails[i][0]["texture"] = 0;
                    TunePrices[i][0] = price
                }
                if (VEHICLE_MOD_ID >= 2) {
                    CarDetails[i][1] = {};
                    CarDetails[i][1]["name"] = "EMS II (+8% Beschleunigung)";
                    CarDetails[i][1]["price"] = price * 1.5;
                    CarDetails[i][1]["drawable"] = 11;
                    CarDetails[i][1]["texture"] = 1;
                    TunePrices[i][1] = price * 1.5
                }
                if (VEHICLE_MOD_ID >= 3) {
                    CarDetails[i][2] = {};
                    CarDetails[i][2]["name"] = "EMS III (+11% Beschleunigung)";
                    CarDetails[i][2]["price"] = price * 2;
                    CarDetails[i][2]["drawable"] = 11;
                    CarDetails[i][2]["texture"] = 2;
                    TunePrices[i][2] = price * 2
                }
                if (VEHICLE_MOD_ID >= 4) {
                    CarDetails[i][3] = {};
                    CarDetails[i][3]["name"] = "EMS IV (+15% Beschleunigung)";
                    CarDetails[i][3]["price"] = price * 3;
                    CarDetails[i][3]["drawable"] = 11;
                    CarDetails[i][3]["texture"] = 3;
                    TunePrices[i][3] = price * 3
                }
                if (VEHICLE_MOD_ID >= 5) {
                    CarDetails[i][4] = {};
                    CarDetails[i][4]["name"] = "EMS V (+20% Beschleunigung)";
                    CarDetails[i][4]["price"] = price * 4;
                    CarDetails[i][4]["drawable"] = 11;
                    CarDetails[i][4]["texture"] = 4;
                    TunePrices[i][4] = price * 4
                }
            }
            if (Number(i) == 12) {
                if (VEHICLE_MOD_ID == 3) {
                    let price = TunePrices[i];
                    TunePrices[i] = {}
                    CarDetails[i] = {}
                    CarDetails[i][-1] = {};
                    CarDetails[i][-1]["name"] = "Standard";
                    CarDetails[i][-1]["price"] = 0;
                    CarDetails[i][-1]["drawable"] = 12;
                    CarDetails[i][-1]["texture"] = -1;
                    TunePrices[i][-1] = price
                    CarDetails[i][0] = {};
                    CarDetails[i][0]["name"] = "Verbesserte Bremsanlage";
                    CarDetails[i][0]["price"] = price;
                    CarDetails[i][0]["drawable"] = 12;
                    CarDetails[i][0]["texture"] = 0;
                    TunePrices[i][0] = price
                    CarDetails[i][1] = {};
                    CarDetails[i][1]["name"] = "Sport Bremsanlage";
                    CarDetails[i][1]["price"] = price * 1.5;
                    CarDetails[i][1]["drawable"] = 12;
                    CarDetails[i][1]["texture"] = 1;
                    TunePrices[i][1] = price * 1.5;
                    CarDetails[i][2] = {};
                    CarDetails[i][2]["name"] = "Rennsport Bremsanlage";
                    CarDetails[i][2]["price"] = price * 3;
                    CarDetails[i][2]["drawable"] = 12;
                    CarDetails[i][2]["texture"] = 2;
                    TunePrices[i][2] = price * 3;
                }
            }
            if (Number(i) == 18) {
                let price = TunePrices[i];
                CarTuneTable["items"][18] = {};
                CarTuneTable["items"][18]["name"] = Vehiclemods["item.18"];
                CarTuneTable["items"][18]["price"] = price;
                CarTuneTable["items"][18]["native_name"] = vehicle_data.getSlotName(i);
                CarTuneTable["items"][18]["select"] = true;
                TunePrices[i] = {}
                CarDetails[i] = {}
                CarDetails[i][-1] = {};
                CarDetails[i][-1]["name"] = "Standard";
                CarDetails[i][-1]["price"] = 0;
                CarDetails[i][-1]["drawable"] = 18;
                CarDetails[i][-1]["texture"] = -1;
                TunePrices[i][-1] = price
                CarDetails[i][0] = {};
                CarDetails[i][0]["name"] = "Turbolader";
                CarDetails[i][0]["price"] = price;
                CarDetails[i][0]["drawable"] = 18;
                CarDetails[i][0]["texture"] = 0;
                TunePrices[i][0] = price
            }

            if (Number(i) == 62) {
                let price = TunePrices[i];
                CarTuneTable["items"][i] = {};
                CarTuneTable["items"][i]["name"] = Vehiclemods["item.62"];
                CarTuneTable["items"][i]["price"] = price;
                CarTuneTable["items"][i]["native_name"] = vehicle_data.getSlotName(i);
                CarTuneTable["items"][i]["select"] = true;
                TunePrices[i] = {}
                CarDetails[i] = {}

                CarDetails[i][0] = {};
                CarDetails[i][0]["name"] = "Standard";
                CarDetails[i][0]["price"] = price;
                CarDetails[i][0]["drawable"] = i;
                CarDetails[i][0]["texture"] = 0;
                TunePrices[i][0] = price

                CarDetails[i][1] = {};
                CarDetails[i][1]["name"] = "Schwarz";
                CarDetails[i][1]["price"] = price;
                CarDetails[i][1]["drawable"] = i;
                CarDetails[i][1]["texture"] = 1;
                TunePrices[i][1] = price

                CarDetails[i][2] = {};
                CarDetails[i][2]["name"] = "Blau";
                CarDetails[i][2]["price"] = price;
                CarDetails[i][2]["drawable"] = i;
                CarDetails[i][2]["texture"] = 2;
                TunePrices[i][2] = price

                CarDetails[i][3] = {};
                CarDetails[i][3]["name"] = "Weiß 1";
                CarDetails[i][3]["price"] = price;
                CarDetails[i][3]["drawable"] = i;
                CarDetails[i][3]["texture"] = 3;
                TunePrices[i][3] = price

                CarDetails[i][4] = {};
                CarDetails[i][4]["name"] = "Weiß 2";
                CarDetails[i][4]["price"] = price;
                CarDetails[i][4]["drawable"] = i;
                CarDetails[i][4]["texture"] = 4;
                TunePrices[i][4] = price
            }

            if (Number(i) == 55) {
                let price = TunePrices[i];
                CarTuneTable["items"][55] = {};
                CarTuneTable["items"][55]["name"] = Vehiclemods["item.55"];
                CarTuneTable["items"][55]["price"] = price;
                CarTuneTable["items"][55]["native_name"] = vehicle_data.getSlotName(i);
                CarTuneTable["items"][55]["select"] = true;
                TunePrices[i] = {}
                CarDetails[i] = {}

                CarDetails[i][0] = {};
                CarDetails[i][0]["name"] = "Standard";
                CarDetails[i][0]["price"] = price;
                CarDetails[i][0]["drawable"] = 55;
                CarDetails[i][0]["texture"] = 0;
                TunePrices[i][0] = price

                CarDetails[i][1] = {};
                CarDetails[i][1]["name"] = "Limousine";
                CarDetails[i][1]["price"] = price;
                CarDetails[i][1]["drawable"] = 55;
                CarDetails[i][1]["texture"] = 1;
                TunePrices[i][1] = price

                CarDetails[i][2] = {};
                CarDetails[i][2]["name"] = "Dunkles Rauchglas";
                CarDetails[i][2]["price"] = price;
                CarDetails[i][2]["drawable"] = 55;
                CarDetails[i][2]["texture"] = 2;
                TunePrices[i][2] = price

                CarDetails[i][3] = {};
                CarDetails[i][3]["name"] = "Helles Rauchglas";
                CarDetails[i][3]["price"] = price;
                CarDetails[i][3]["drawable"] = 55;
                CarDetails[i][3]["texture"] = 3;
                TunePrices[i][3] = price
            }

            if (Number(i) == 200) {
                CarTuneTable["items"][200] = {};
                CarTuneTable["items"][200]["name"] = Vehiclemods["item.200"];
                CarTuneTable["items"][200]["price"] = 0;
                CarTuneTable["items"][200]["select"] = true;
                CarDetails[i] = {}
                TunePrices[i] = 7500;
                CarDetails[i][-1] = {};
                CarDetails[i][-1]["name"] = "Default";
                CarDetails[i][-1]["price"] = 0;
                CarDetails[i][-1]["drawable"] = 200;
                CarDetails[i][-1]["texture"] = -1;
                CarDetails[i][0] = {};
                CarDetails[i][0]["name"] = "NeonStateLeft";
                CarDetails[i][0]["price"] = 200;
                CarDetails[i][0]["drawable"] = 200;
                CarDetails[i][0]["texture"] = 0;
                CarDetails[i][1] = {};
                CarDetails[i][1]["name"] = "NeonStateRight";
                CarDetails[i][1]["price"] = 200;
                CarDetails[i][1]["drawable"] = 200;
                CarDetails[i][1]["texture"] = 1;
                CarDetails[i][2] = {};
                CarDetails[i][2]["name"] = "NeonStateFront";
                CarDetails[i][2]["price"] = 200;
                CarDetails[i][2]["drawable"] = 200;
                CarDetails[i][2]["texture"] = 2;
                CarDetails[i][3] = {};
                CarDetails[i][3]["name"] = "NeonStateBack";
                CarDetails[i][3]["price"] = 200;
                CarDetails[i][3]["drawable"] = 200;
                CarDetails[i][3]["texture"] = 3;
            }
        }
    }

    CarTuneTable["items"][300] = {};
    CarTuneTable["items"][300]["name"] = Vehiclemods["item.300"];
    CarTuneTable["items"][300]["price"] = 0;
    CarTuneTable["items"][300]["select"] = true;

    if (vehicle.model == 1873600305 || vehicle.model == 788045382 || vehicle.model == 0x9CF21E0F || vehicle.model == 0x2B6DC64A) { // Keine Aussenfarbe | sanchez & ratbike & dune & Speedo2
        CarTuneTable["items"][300] = {};
        CarDetails[300] = {}
    }

    if (vehicle.model == 0x2B6DC64A) { // Speedo2 -> Kein Unterbodenbelechtung
        CarTuneTable["items"][200] = {};
        CarDetails[200] = {}
    }

    if (vehicle.getClass() == 8 || vehicle.getClass() == 13 || vehicle.model == 4174679674 || vehicle.model == 2230595153) {
        CarTuneTable["items"][23] = {};
        CarDetails[23] = {}
        CarTuneTable["items"][200] = {};
        CarDetails[200] = {}
    }

    if (vehicle.model == 4174679674 || vehicle.model == 0x9CF21E0F) { // journey & dune -> Scheibentönung
        CarTuneTable["items"][55] = {};
        CarDetails[55] = {}
    }

    // Fahrrad, Motorrad & Elektro kein Turbo
    if (vehicle.getClass() == 8 || vehicle.getClass() == 13 || vehicle.model == 0x206D1B68 ||  vehicle.model == 1031562256 || vehicle.model == 1392481335 || vehicle.model == 2672523198 || vehicle.model == 2765724541 || vehicle.model == 2445973230 || vehicle.model == 3164157193 || vehicle.model == 544021352 || vehicle.model == 2400073108 || vehicle.model == 1682114128 || vehicle.model == 989294410) {
        CarTuneTable["items"][18] = {};
        CarDetails[18] = {}
    }

    // Fahrrad, Motorrad -> Kein Nummernschild  & dune
    if (vehicle.getClass() == 8 || vehicle.getClass() == 13 || vehicle.model == 0x9CF21E0F) {
        CarTuneTable["items"][62] = {};
        CarDetails[62] = {}
    }

    if (vehicle.getClass() == 8 || vehicle.getClass() == 13 || vehicle.model == 0x9CF21E0F || vehicle.model == 0xC703DB5F) { // Fahrrad und Motorrad keine Unterbodenbeleuchtung & Scheibendunkeln & dune & taxi
        CarTuneTable["items"][200] = {};
        CarDetails[200] = {}
        CarTuneTable["items"][55] = {};
        CarDetails[55] = {}
        CarTuneTable["items"][0] = {};
        CarDetails[0] = {}
    }

    if (vehicle.model == 0x809AA4CB || vehicle.model == 0x21EEE87D || vehicle.model == 0x5A82F9AE) { // phantom, hauler und packer | LKW ohne Coustem - Scheibendunkeln, keine Unterbodenbeleuchtung & Reifen
        CarTuneTable["items"][200] = {};
        CarDetails[200] = {}
        CarTuneTable["items"][55] = {};
        CarDetails[55] = {}
        CarTuneTable["items"][23] = {};
        CarDetails[23] = {}
    }

    if (vehicle.model == 0xA90ED5C) { // phantom3 - keine Unterbodenbeleuchtung & Reifen
        CarTuneTable["items"][200] = {};
        CarDetails[200] = {}
        CarTuneTable["items"][23] = {};
        CarDetails[23] = {}
    }

    /* TODO :: vehicle.getIsSecondaryColourCustom(); -> Prüfen und dann 300 / 2 deaktivieren. VEH : Schwarzer | 300/2???
    switch(vehicle.model) {
        case -1995326987:
        case -746882698:
            CarTuneTable["items"][300] = {};
            CarDetails[300] = {}
            break;
        default:
            break;
    }
    */

    if (vehicle.model == 3903371924 || vehicle.model == 0xE78CC3D9 || vehicle.model == 0x127E90D5) { // Waffenkauf deaktiviert (Reiter Erweiterungen)
        CarTuneTable["items"][10] = {};
        CarDetails[10] = {}
    }

    if (vehicle.model == 6774487 || vehicle.model == 3854198872) { // Kotflügel deaktiviert
        CarTuneTable["items"][8] = {};
        CarDetails[8] = {}
    }

    if (vehicle.model == 3308022675 || vehicle.model == 0x28EAB80F) { // Fahrgestell deaktiviert
        CarTuneTable["items"][5] = {};
        CarDetails[5] = {}
    }

    if (vehicle.model == 2006667053) { // VOODOO
        CarTuneTable["items"][13] = {};
        CarDetails[13] = {}
        CarTuneTable["items"][23] = {};
        CarDetails[23] = {}
        CarTuneTable["items"][24] = {};
        CarDetails[24] = {}
        CarTuneTable["items"][25] = {};
        CarDetails[25] = {}
        CarTuneTable["items"][27] = {};
        CarDetails[27] = {}
        CarTuneTable["items"][28] = {};
        CarDetails[28] = {}
        CarTuneTable["items"][30] = {};
        CarDetails[30] = {}
        CarTuneTable["items"][33] = {};
        CarDetails[33] = {}
        CarTuneTable["items"][34] = {};
        CarDetails[34] = {}
        CarTuneTable["items"][35] = {};
        CarDetails[35] = {}
        CarTuneTable["items"][38] = {};
        CarDetails[38] = {}
        CarTuneTable["items"][48] = {};
        CarDetails[48] = {}
    }

    VioRageManager.ConsoleLog("info", ModAmounts);

    Webwindow["CarTuneWindow"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/cartune/index.html", true);
    Webwindow["CarTuneWindow"].start("init", JSON.stringify(CarTuneTable), JSON.stringify(CarDetails), CarTunes, TunePrices);

    //API.after(1000, "CarTuneShopOpenLoaded");
}

var currentCam = {
    x: 0,
    y: 0,
    z: 0,
    r: 45,
    dist: 6
}
var tuning_Cam;

mp.events.add("CarTuneShopOpenNew", (...args) => {

    if (mp.players.local.vehicle) {

        //CarTuneLanguage = args[0];
        Vehiclemods = lang_de.vehiclemods
        CarTunes = args[0];
        TunePrices = JSON.parse(args[1])
        TunePrices[11] = args[2];
        TunePrices[12] = args[3];
        TunePrices[18] = args[4];

        mp.players.local.vehicle.position = new mp.Vector3(-332.5066, -136.8213, 38.73852)
        mp.players.local.vehicle.setRotation(0, 0, 111, 0, false);
        mp.players.local.vehicle.setOnGroundProperly();

        mp.game.cam.doScreenFadeOut(500);

        tuning_Cam = mp.cameras.new('TuningCamera', new mp.Vector3(-353, -135, 39), new mp.Vector3(0, 0, 0), 70);
        tuning_Cam.setActive(true);
        tuning_Cam.pointAt(mp.players.local.vehicle.handle, 0, 0, 0, true)

        mp.game.cam.renderScriptCams(true, false, 0, true, false);

        disableAllControls = true;

        setTimeout(function(){

            mp.game.cam.doScreenFadeIn(500);

            let cPos = new mp.Vector3(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z + 1).findRot(0, 6, 180);
            currentCam = {
                x: cPos.x,
                y: cPos.y,
                z: cPos.z,
                r: 180,
                dist: 6
            }
            let hit = mp.raycasting.testPointToPoint(mp.players.local.position, cPos, mp.players.local, (1 | 16));
            if (hit) {
                cPos = hit.position
            }
            CarTuneCamera = mp.cameras.new("CarTuneCamera", cPos, new mp.Vector3(), 70);
            CarTuneCamera.setCoord(cPos.x, cPos.y, cPos.z)
            CarTuneCamera.pointAt(mp.players.local.vehicle.handle, 0, 0, 0, true)

            CarTuneCamera.setActiveWithInterp(tuning_Cam.handle, 2000, 0, 0); // 2000ms = 2secs, 0, 0 - idk

            mp.game.cam.renderScriptCams(true, false, 0, true, false);

            isPlayerOnTuningPlace = true;

            CarTuneShopOpen();

        }, 2000);

    }
})
mp.events.add("onInventoryUpdate", (dX, dY, dZ) => {
    if (isPlayerOnTuningPlace && Webwindow["CarTuneWindow"]) {
        Webwindow["CarTuneWindow"].call("updateMoney", InventoryItems["0"]);
    }
});
mp.events.add("moveTuningCam", (dX, dY, dZ) => {
    if (dX != "none") {
        if (dX == "right") {
            currentCam.r += 2;
        } else if (dX == "left") {
            currentCam.r -= 2;
        }
    }
    if (dY != "none") {
        if (dY == "up") {
            currentCam.z += 0.05;
        } else if (dY == "down") {
            currentCam.z -= 0.05;
        }
    }
    if (dZ != "none") {
        if (dZ == "in") {
            currentCam.dist -= 0.12;
        } else if (dZ == "out") {
            currentCam.dist += 0.12;
        }
    }
    if (currentCam.z > (mp.players.local.vehicle.position.z + 2)) currentCam.z = (mp.players.local.vehicle.position.z + 2);
    if (currentCam.z < 38.5) currentCam.z = 38.5;
    if (currentCam.r < 0) currentCam.r = 360;
    if (currentCam.r > 360) currentCam.r = 0;
    if (currentCam.dist < 3) currentCam.dist = 3;
    if (currentCam.dist >= 5) currentCam.dist = 5;
    let cPos = new mp.Vector3(mp.players.local.vehicle.position.x, mp.players.local.vehicle.position.y, currentCam.z).findRot(0, currentCam.dist, currentCam.r);
    let hit = mp.raycasting.testPointToPoint(mp.players.local.vehicle.position, cPos, mp.players.local, (1 | 16));
    if (hit) {
        cPos = hit.position
    }
    if (CarTuneCamera != null) {
        CarTuneCamera.setCoord(cPos.x, cPos.y, cPos.z)
    }
});
mp.events.add("requestTryDealerCarTuneShopDetail", (dict, item, r, g, b) => {
    mp.players.local.vehicle.setModKit(0)
    if (CarDetails[dict]) {

        let drawable = Number(CarDetails[dict][item]["drawable"]);
        if (drawable == 11 || drawable == 12 || drawable == 18) {
            return;
        }

        if (drawable == 200) {
            //API.sendNotification( CarTuneTable["items"][item]["texture"].toString())
            if (Number(CarDetails[dict][item]["texture"]) == -1) {
                mp.players.local.vehicle.setNeonLightEnabled(0, false)
                mp.players.local.vehicle.setNeonLightEnabled(1, false)
                mp.players.local.vehicle.setNeonLightEnabled(2, false)
                mp.players.local.vehicle.setNeonLightEnabled(3, false)
            } else {
                mp.players.local.vehicle.setNeonLightEnabled(Number(CarDetails[dict][item]["texture"]), true)

                if(r != null && g != null && b != null){
                    mp.players.local.vehicle.setNeonLightsColour(Number(r), Number(g), Number(b))
                }
            }
            //Webwindow["CarTuneDetailWindow"].call('dealer:update', false);
        } else if (drawable == 14) {
            if (drawable == -1) {
                mp.players.local.vehicle.removeMod(drawable);
            } else {
                mp.players.local.vehicle.setMod(drawable, Number(CarDetails[dict][item]["texture"]));
                //mp.game.invoke("0xa9ef3f93cbfff6d0",mp.players.local.vehicle,Number(CarTuneTable["items"][item]["drawable"]), Number(CarTuneTable["items"][item]["texture"]), false); //SET_VEHICLE_MOD
            }
            mp.players.local.vehicle.startHorn(10000, mp.game.gameplay.getHashKey("NORMAL"), false)
            //mp.game.invoke("0x2883644e7f3f1871",mp.players.local.vehicle,-1,mp.game.gameplay.getHashKey("HELDOWN"),0); // START_VEHICLE_HORN
            // NEED REWORK
        } else if (drawable == 55) {
            mp.players.local.vehicle.setWindowTint(Number(CarDetails[dict][item]["texture"]))
        } else if (drawable == 62) {
            mp.players.local.vehicle.setNumberPlateTextIndex(Number(CarDetails[dict][item]["texture"]))
        } else {
            if (drawable == -1) {
                mp.players.local.vehicle.removeMod(drawable)
            } else {
                mp.players.local.vehicle.setMod(drawable, Number(CarDetails[dict][item]["texture"]));
            }
            //Webwindow["CarTuneDetailWindow"].call('dealer:update', false);
        }
    }
})
mp.events.add("setVehicleNeon", (...args) => {
    var lp = mp.players.local;
    var vehicle = lp.vehicle
    if (Number(args[0]) == 1) {
        mp.players.local.vehicle.setNeonLightEnabled(0, true)
    }
    if (Number(args[1]) == 1) {
        mp.players.local.vehicle.setNeonLightEnabled(1, true)
    }
    if (Number(args[2]) == 1) {
        mp.players.local.vehicle.setNeonLightEnabled(2, true)
    }
    if (Number(args[3]) == 1) {
        mp.players.local.vehicle.setNeonLightEnabled(3, true)
    }
})
mp.events.add("requestTryColorCarTuneShop", (item, r, g, b) => {
    let veh = mp.players.local.vehicle
    if (Number(item) == 1) {
        veh.setCustomPrimaryColour(r, g, b)
    }
    if (Number(item) == 2) {
        veh.setCustomSecondaryColour(r, g, b)
    }
})
mp.events.add("carTuneCursor", (state) => {
    mp.gui.cursor.visible = state;
})
mp.events.add("requestBuyColorCarTuneShop", (typ, r, g, b) => {
    if (CarTunes.Color1R != r && CarTunes.Color1G != g && CarTunes.Color1B != b && typ == 1) {
        CommunicationManager.TriggerServer("requestBuyCarTuneShopDetail", 300, 1, r, g, b)
    }
    if (CarTunes.Color2R != r && CarTunes.Color2G != g && CarTunes.Color2B != b && typ == 2) {
        CommunicationManager.TriggerServer("requestBuyCarTuneShopDetail", 300, 2, r, g, b)
    }
})
mp.events.add("requestBuyDealerCarTuneShopDetail", (dict, item, r, g, b) => {
    var lp = mp.players.local
    var vehicle = lp.vehicle

    for (var i in CarTuneNumbers) {
        if (Number(i) < 200) {
            vehicle.removeMod(Number(i))
        }
    }
    vehicle.removeMod(18);
    vehicle.setWindowTint(0);
    vehicle.setNumberPlateTextIndex(0);


    let drawable = CarDetails[dict][item]["drawable"]
    let texture = CarDetails[dict][item]["texture"]
    let price = TunePrices[dict]
    if (TunePrices[dict][item]) {
        price = TunePrices[dict][item];
    }
    if (dict == 200) {
        if (item != -1) {
            CommunicationManager.TriggerServer("requestBuyCarTuneShopDetail", drawable, texture, r, g, b)
        } else {
            CommunicationManager.TriggerServer("requestBuyCarTuneShopDetail", drawable, item, 0, 0, 0)
        }
    } else {
        CommunicationManager.TriggerServer("requestBuyCarTuneShopDetail", drawable, texture, price, 0, 0)
    }
    //API.triggerServerEvent("requestBuyCarTuneShopDetail", Number(CarTuneTable["items"][Number(item)]["drawable"]), Number(CarTuneTable["items"][Number(item)]["texture"]), Number(CarTuneTable["items"][Number(item)]["price"]));
})

Webwindow["Garage"] = null;

mp.events.add('OnClientRequestGarageOpen', (pVehicles) => {
    if (Webwindow["Garage"] == null) {
        Webwindow["Garage"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/garage/index.html", true);
        Webwindow["Garage"].start("OnClientSendsStoredVehicles", pVehicles);
    }
});

CommunicationManager.AddWebBrowserEvent('OnGarageClose', () => {
    Webwindow["Garage"].destroy();
    Webwindow["Garage"] = null;
}, "Garage");

CommunicationManager.AddWebBrowserEvent('OnClientRequestVehicleFromGarage', (veh_id) => {
    if (Webwindow["Garage"].isAtStartPosition == true) {
        CommunicationManager.TriggerServer("OnClientRequestVehicleFromGarage", veh_id);
    }
}, "Garage");

mp.events.add("openVideoWindow", (titel, url, fullscreen) => {
    if (Webwindow["VideoWindow"] == null) {
        Webwindow["VideoWindow"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/video/video.html", true);
        Webwindow["VideoWindow"].start('initVideoWindow', titel, url, fullscreen);
    }
})

mp.events.add("closeVideoWindow", () => {
    if (Webwindow["VideoWindow"] != null) {
        Webwindow["VideoWindow"].destroy();
        Webwindow["VideoWindow"] = null;
    }
})
var removeObject = class {
    constructor(x, y, z, radius, model, dist, checkinterval) {
        this._setup(x, y, z, radius, model, dist, checkinterval);
    }
    _setup(x, y, z, radius, model, dist, checkinterval) {
        let self = this;
        self.x = x;
        self.y = y;
        self.y = z;
        self._model = model;
        self._dist = dist;
        self._radius = radius;
        self._checkinterval = checkinterval;
        self._checkTimer = setInterval(function() {
            self.check();
        }, self._checkinterval * 1000)
    }
    check() {
        let pos = mp.players.local.position;
        let dist = mp.game.system.vdist(pos.x, pos.y, pos.z, this.x, this.y, this.z);
        if (dist < this._dist) {
        	mp.gui.chat.push("Remove Object");
            mp.game.entity.createModelHide(this.x, this.y, this.z, this._radius, mp.game.joaat(this._model), true);
        }
    }
}

Webwindow["Slot"] = null;

var casino_slot_positions = [
    //Nähe Diamanten links
    {x: 1105.95, y: 228.78, z: -50.13, rz: 35.98},  //Grün
    {x: 1104.09, y: 228.78, z: -50.13, rz: 328.37}, //Pink
    {x: 1103.56, y: 230.52, z: -50.13, rz: 257.79}, //Gelb
    {x: 1105.08, y: 231.68, z: -50.13, rz: 183.34}, //Angel Knights
    {x: 1106.57, y: 230.52, z: -50.13, rz: 111.54}, //Impotent Rage

    //Nähe Diamanten Mitte links
    {x: 1109.39, y: 233.24, z: -50.13, rz: 40.88},  //Twilight Knife
    {x: 1107.52, y: 233.23, z: -50.13, rz: 324.41}, //Diamond
    {x: 1106.92, y: 235.12, z: -50.13, rz: 249.04}, //Evacuator
    {x: 1108.51, y: 236.15, z: -50.13, rz: 175.86}, //Pink
    {x: 1110.02, y: 235.01, z: -50.13, rz: 112.49}, //Gelb

    //Nähe Diamanten Mitte rechts
    {x: 1113.08, y: 232.99, z: -50.13, rz: 322.08}, //Pink
    {x: 1112.57, y: 234.83, z: -50.13, rz: 246.81}, //Gelb
    {x: 1114.11, y: 235.92, z: -50.13, rz: 178.59}, //Angel Knights
    {x: 1115.66, y: 234.76, z: -50.13, rz: 107.51}, //Impotent Rage
    {x: 1115.04, y: 232.95, z: -50.13, rz: 37.36},  //Grün

    //Nähe Diamanten rechts
    {x: 1116.21, y: 228.21, z: -50.13, rz: 321.45}, //Diamond
    {x: 1115.59, y: 230.06, z: -50.13, rz: 249.09}, //Evacuator
    {x: 1117.17, y: 231.13, z: -50.13, rz: 179.47}, //Pink
    {x: 1118.68, y: 229.99, z: -50.13, rz: 109.13}, //Gelb
    {x: 1118.05, y: 228.19, z: -50.13, rz: 40.58},  //Twilight Knife

    //Links neben "Inside Track"
    {x: 1101.13, y: 229.76, z: -50.13, rz: 47.29},  //Pink
    {x: 1101.66, y: 230.61, z: -50.13, rz: 64.77},  //Gelb
    {x: 1102.05, y: 231.43, z: -50.13, rz: 75.94},  //Twilight Knife
    {x: 1102.19, y: 232.42, z: -50.13, rz: 94.76},  //Diamond
    {x: 1102.05, y: 233.39, z: -50.13, rz: 110.63}, //Evacuator

    //Zwischen "Inside Track" und "Table Games"
    {x: 1108.37, y: 238.89, z: -50.13, rz: 317.32}, //Angel Knights
    {x: 1109.13, y: 238.29, z: -50.13, rz: 335.49}, //Impotent Rage
    {x: 1110.04, y: 237.94, z: -50.13, rz: 345.99}, //Grün
    {x: 1110.97, y: 237.77, z: -50.13, rz: 0},      //Pink
    {x: 1111.91, y: 237.92, z: -50.13, rz: 17.38},  //Gelb
    {x: 1112.84, y: 238.25, z: -50.13, rz: 32.94},  //Twilight Knife
    {x: 1113.62, y: 238.86, z: -50.13, rz: 42.08},  //Diamond

    //Rechts von "Table Games"
    {x: 1120.07, y: 233.38, z: -50.13, rz: 256.16}, //Angel Knights
    {x: 1119.89, y: 232.44, z: -50.13, rz: 269.61}, //Impotent Rage
    {x: 1120.09, y: 231.51, z: -50.13, rz: 282.23}, //Grün
    {x: 1120.43, y: 230.63, z: -50.13, rz: 298.39}, //Pink
    {x: 1121.05, y: 229.88, z: -50.13, rz: 319.03}, //Gelb

    //Hinten Mitte
    {x: 1133.35, y: 247.60, z: -51.33, rz: 91.36},  //Impotent Rage
    {x: 1133.22, y: 248.59, z: -51.33, rz: 107.44}, //Grün
    {x: 1132.81, y: 249.42, z: -51.33, rz: 119.11}, //Pink
    {x: 1132.29, y: 250.27, z: -51.33, rz: 135.82}, //Gelb
    {x: 1131.48, y: 250.81, z: -51.33, rz: 152.88}, //Twilight Knife
    {x: 1130.59, y: 251.19, z: -51.33, rz: 163.09}, //Diamond
    {x: 1129.62, y: 251.33, z: -51.33, rz: 183.22}, //Evacuator

    //Hinten
    {x: 1133.34, y: 255.47, z: -51.33, rz: 319.58}, //Grün
    {x: 1135.11, y: 255.27, z: -51.33, rz: 27.99},  //Impotent Rage
    {x: 1135.92, y: 256.79, z: -51.33, rz: 99.24},  //Angel Knights
    {x: 1134.73, y: 258.14, z: -51.33, rz: 169.29}, //Gelb
    {x: 1133.11, y: 257.28, z: -51.33, rz: 245.34}, //Pink

    //Hinten
    {x: 1137.55, y: 251.23, z: -51.33, rz: 313.41}, //Twilight Knife
    {x: 1139.36, y: 251.01, z: -51.33, rz: 29.13},  //Gelb
    {x: 1140.18, y: 252.57, z: -51.33, rz: 95.49},  //Pink
    {x: 1138.92, y: 253.88, z: -51.33, rz: 175.19}, //Evacuator
    {x: 1137.36, y: 253.02, z: -51.33, rz: 242.36}, //Diamond
]

CommunicationManager.AddWebBrowserEvent("OnSlotClosed", () => {
    if (Webwindow["Slot"] != null) {

        let player_pos = mp.players.local.position;

        let result = new mp.Vector3(0, 0, 0);
        let degrees = (mp.players.local.getRotation(0).z + 180) * Math.PI / 180 * -1;
        result.x = (Math.sin(degrees) * 1) + player_pos.x;
        result.y = (Math.cos(degrees) * 1) + player_pos.y;
        result.z = player_pos.z;

        mp.players.local.position = result;

        mp.players.local.setCollision(true, true);
        Webwindow["Slot"].destroy();
        Webwindow["Slot"] = null;
        mp.gui.cursor.visible = false;
        setPlayerFrozen(false, false);
        CommunicationManager.TriggerServer("OnClientRequestCloseSlotMachine");
    }
}, "Slot");

CommunicationManager.AddServerEvent("OpenPlayerSlotMachine", (stake, slot_id) => {

    mp.players.local.setCollision(false, false);
    setPlayerFrozen(true, true);

    mp.players.local.position = new mp.Vector3(casino_slot_positions[slot_id].x, casino_slot_positions[slot_id].y, casino_slot_positions[slot_id].z);
    mp.players.local.setRotation(0, 0, casino_slot_positions[slot_id].rz, 1, true);

    CommunicationManager.TriggerServer("OnClientRequestOpenSlotMachineAnimation");

    if (Webwindow["Slot"] == null) {
        Webwindow["Slot"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/casino/slot/slot.html", true);
        mp.gui.cursor.visible = true;
    }
});

CommunicationManager.AddWebBrowserEvent("OnSlotMaschineLoaded", () => {
    if (Webwindow["Slot"] != null) {
        Webwindow["Slot"].call('BrowserBanditInit', InventoryItems["41"]);
    }
});

CommunicationManager.AddWebBrowserEvent("startSoundRolling", () => {
    mp.events.call("playSound", "slot_rolling.mp3", false);
});

CommunicationManager.AddWebBrowserEvent("playWinSound", () => {
    mp.events.call("playSound", "slotmachine_win.mp3", false);
});

CommunicationManager.AddServerEvent("SetPlayerSlotMachineResult", (Field_A_String, Field_B_String, Field_C_String, TotalWinning, TotalChips) => {
    if (Webwindow["Slot"] != null) {
        if (TotalWinning === -1) {
            mp.players.local.setCollision(true, true);
            Webwindow["Slot"].destroy();
            Webwindow["Slot"] = null;
            mp.gui.cursor.visible = false;
            setPlayerFrozen(false, false);
        } else {
            //voiceChat.call("ToggleHUD", false);
            Webwindow["Slot"].call('BrowserBanditStartGame', Field_A_String, Field_B_String, Field_C_String, TotalWinning, TotalChips);
        }
    }
});

CommunicationManager.AddWebBrowserEvent('requestStartGame', (price) => {
    CommunicationManager.TriggerServer("OnClientRequestSlotMachineResult", price);
}, "Slot");

KeybindManager.registerVioKeyFunction("Interaktion", true, () => {
    if (mp.gui.cursor.visible == true) {
        return
    }


    if (mp.players.local.dimension == 11) {
        let player_pos = mp.players.local.position;
        let slot_machine = {
            near: false,
            dist: 1.4,
            id: -1
        }

        var BlockedSeats = [];

        mp.players.forEachInStreamRange(
            (target, id) => {
                if (target.getVariable("CASINO_SLOT") != null) {
                    let target_id = target.getVariable("CASINO_SLOT");
                    BlockedSeats.push(target_id);
                }
            }
        );

        for (let i = 0; i < casino_slot_positions.length; i++) {
            let slots = casino_slot_positions[i];
            let dist = mp.game.system.vdist2(player_pos.x, player_pos.y, player_pos.z, slots.x, slots.y, slots.z);
            if (dist <= slot_machine.dist) {
                if (BlockedSeats.includes(i) == false) {
                    slot_machine = {
                        near: true,
                        id: i
                    }
                }
            }
        }

        if (slot_machine.near == true) {
            CommunicationManager.TriggerServer("OnClientRequestOpenSlotMachine", 10, slot_machine.id);
        }
    }
})

mp.events.addDataHandler("CASINO_SLOT", (entity, value) => {
    if (entity.type === "player") {
        if (entity.handle !== 0) {
            if (entity != mp.players.local) {
                if (entity.getVariable("CASINO_SLOT") != null) {
                    let slot_id = entity.getVariable("CASINO_SLOT");
                    if (casino_slot_positions[slot_id]) {
                        // entity.freezePosition(true);
                        VioRageManager.FreezePosition(entity, true);
                        entity.position = new mp.Vector3(casino_slot_positions[slot_id].x, casino_slot_positions[slot_id].y, casino_slot_positions[slot_id].z);
                        entity.setRotation(0, 0, casino_slot_positions[slot_id].rz, 1, true);
                    }
                } else {
                    // entity.freezePosition(false);
                    VioRageManager.FreezePosition(entity, false);
                }
            }
        }
    }
});

mp.events.add("entityStreamIn", (entity) => {
    if (entity.type === "player") {
        if (entity.getVariable("CASINO_SLOT") != null) {
            let slot_id = entity.getVariable("CASINO_SLOT");
            if (casino_slot_positions[slot_id]) {
                // entity.freezePosition(true);
                VioRageManager.FreezePosition(entity, true);
                entity.position = new mp.Vector3(casino_slot_positions[slot_id].x, casino_slot_positions[slot_id].y, casino_slot_positions[slot_id].z);
                entity.setRotation(0, 0, casino_slot_positions[slot_id].rz, 1, true);
            }
        }
    }
});



var ClientBlackJackTable = 0;

var casino_blackjack_positions = [
    {x: 1151.78, y: 266.7124, z: -51.84084, rot: new mp.Vector3(0, 0, 42.70393), table: 0},
    {x: 1146.24, y: 261.2377, z: -51.84084, rot: new mp.Vector3(0, 0, 42.39534), table: 1},
    {x: 1143.365, y: 264.1295, z: -51.84084, rot: new mp.Vector3(0, 0, 223.772), table: 2},
    {x: 1148.871, y: 269.6037, z: -51.84084, rot: new mp.Vector3(0, 0, 219.999), table: 3}
]

KeybindManager.registerVioKeyFunction("Interaktion", true, () => {
    if (mp.gui.cursor.visible == true) {
        return
    }

    if (mp.players.local.dimension == 11) {
        let player_pos = mp.players.local.position;

        let blackjack_table = {
            near: false,
            table: 0,
        }

        casino_blackjack_positions.forEach(function (slots) {
            let dist = mp.game.system.vdist2(player_pos.x, player_pos.y, player_pos.z, slots.x, slots.y, slots.z);
            if (dist <= 4) {
                blackjack_table = {
                    near: true,
                    table: slots.table
                }
            }
        })

        if (blackjack_table.near == true) {
            ClientBlackJackTable = blackjack_table.table;
            CommunicationManager.TriggerServer("OnClientRequestOpenBlackJack", blackjack_table.table);
        }
    }
})


CommunicationManager.AddServerEvent('OnUpdateBlackJackDesk', (data, player) => {
    data = JSON.parse(data);
    if (!Webwindow["BlackJack"]) {
        Webwindow["BlackJack"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/casino/blackjack/blackjack.html", true);
        disableAllControls = true;
        mp.gui.cursor.visible = true;
    }
    if (data.hasOwnProperty(player)) {
        Webwindow["BlackJack"].call('BrowserBlackJackJoinGame', player, data[player]['Seat'], InventoryItems["41"]);
    }
    Webwindow["BlackJack"].call("BrowserGameSync", data);
});

// TRIGGERED BY CLIENT
CommunicationManager.AddWebBrowserEvent('RequestJoinBlackJackGame', (gameid, seat) => {
    if (seat < 1 || seat > 5 || parseInt(InventoryItems["41"]) <= 0) {
        CreateNotify("~r~Du hast keine Chips!");
        return;
    }
    CommunicationManager.TriggerServer("OnClientRequestJoinBlackJackGame", ClientBlackJackTable, seat);
});

CommunicationManager.AddWebBrowserEvent("RequestBlackJackSetMoney", (gameid, bet) => {
    if (bet > 0) {
        CommunicationManager.TriggerServer("OnClientRequestBlackJackSetMoney", ClientBlackJackTable, bet);
    }
}, "BlackJack");

CommunicationManager.AddWebBrowserEvent("RequestBlackJackGameAction", (gameid, action) => {
    CommunicationManager.TriggerServer("OnClientRequestBlackJackGameAction", ClientBlackJackTable, action);
}, "BlackJack");

CommunicationManager.AddWebBrowserEvent("OnBlackJackClosed", () => {
    CommunicationManager.TriggerServer("OnClientRequestBlackJackClose");
    Webwindow["BlackJack"].destroy();
    Webwindow["BlackJack"] = null;
    mp.gui.cursor.visible = false;
    disableAllControls = false;
}, "BlackJack");


// TRIGGERED BY SERVER
CommunicationManager.AddServerEvent("OnUpdateBlackJackDeskPlayerJoin", (name, seat) => {
    if (Webwindow["BlackJack"] != null) {
        Webwindow["BlackJack"].call('BrowserTableJoin', name, seat);
    }
});

CommunicationManager.AddServerEvent("OnUpdateBlackJackDeskPlayerLeft", (name) => {
    if (Webwindow["BlackJack"] != null) {
        Webwindow["BlackJack"].call('BrowserTableLeave', name);
    }
});

CommunicationManager.AddServerEvent("OnUpdateBlackJackDeskPlayerMoney", (name, chips) => {
    if (Webwindow["BlackJack"] != null) {
        Webwindow["BlackJack"].call('BrowserGameBet', name, chips);
    }
});

CommunicationManager.AddServerEvent("OnUpdateBlackJackDeskNextRound", (table) => {
    if (Webwindow["BlackJack"] != null) {
        table = JSON.parse(table);
        Webwindow["BlackJack"].call('BrowserGameNextRound', table);
    }
});

CommunicationManager.AddServerEvent("OnUpdateBlackJackDeskRoundFinish", () => {
    if (Webwindow["BlackJack"] != null) {
        Webwindow["BlackJack"].call('BrowserGameFinish', InventoryItems["41"]);
    }
});

CommunicationManager.AddServerEvent("OnUpdateBlackJackDeskNextAction", (name, action) => {
    if (Webwindow["BlackJack"] != null) {
        Webwindow["BlackJack"].call('BrowserGameAction', name, action);
    }
});

CommunicationManager.AddServerEvent("OnUpdateBlackJackDeskNewStatus", (name, status, winnings) => {
    if (Webwindow["BlackJack"] != null) {
        Webwindow["BlackJack"].call('BrowserGameStatus', name, status, winnings);
    }
});

CommunicationManager.AddServerEvent("OnUpdateBlackJackDeskNewCard", (name, card, total) => {
    if (Webwindow["BlackJack"] != null) {
        card = JSON.parse(card);
        Webwindow["BlackJack"].call('BrowserGameCard', name, card, total, true);
    }
});

CommunicationManager.AddServerEvent("OnUpdateBlackJackDeskNewCards", (name, card, card2, total) => {
    if (Webwindow["BlackJack"] != null) {
        card = JSON.parse(card);
        card2 = JSON.parse(card2);
        Webwindow["BlackJack"].call('BrowserGameCard', name, card, total, true);
        Webwindow["BlackJack"].call('BrowserGameCard', name, card2, total, true);
    }
});

var coin_price = 5;

CommunicationManager.AddWebBrowserEvent("ClientRequestCloseCoinAutomat", function () {
    if (Webwindow["CoinAutomat"] != null) {
        Webwindow["CoinAutomat"].active(false);
        setTimeout(() => {
            Webwindow["CoinAutomat"].destroy();
            Webwindow["CoinAutomat"] = null;
            TempArguments["CoinAutomatData"] = null;
        }, 10);
    }
}, "CoinAutomat");

CommunicationManager.AddWebBrowserEvent("onClientRequestCoinAction", function (type, amount) {
    if ((Webwindow["CoinAutomat"] != null) && TempArguments["CoinAutomatData"]) {
        if (Webwindow["CoinAutomat"].isAtStartPosition == true) {
            let data = TempArguments["CoinAutomatData"];
            if (parseInt(amount) > 0) {
                if (type == "buy") {
                    if (data.cash / coin_price >= amount) {
                        CommunicationManager.TriggerServer("OnClientRequestBuyCoins", parseInt(amount));
                    } else {
                        CreateNotify("~r~Nicht genügend Geld");
                    }
                }
                if (type == "sell") {
                    if (data.coins >= amount) {
                        CommunicationManager.TriggerServer("OnClientRequestSellCoins", parseInt(amount));
                    } else {
                        CreateNotify("~r~Nicht genügend Chips");
                    }
                }
            }
        }
    }
}, "CoinAutomat");

CommunicationManager.AddServerEvent("OnCoinAutomatOpen", function (barmoney, pchips) {
    if(Webwindow["CoinAutomat"] == null){
        Webwindow["CoinAutomat"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/casino/coin_machine/index.html", true);
        Webwindow["CoinAutomat"].start("show", barmoney, pchips)
        TempArguments["CoinAutomatData"] = {
            cash: barmoney,
            coins: pchips
        }
    }
});

var raceTargets = {
    mc: {
        displayName: "Mount Chiliad",
        position: new mp.Vector3(371.73, 5481.088, 703.32)
    },
    humane: {
        displayName: "Humane Labs",
        position: new mp.Vector3(3590, 3765, 29)
    },
    airport: {
        displayName: "Airport",
        position: new mp.Vector3(-1013, -2718, 13)
    },
    airfield: {
        displayName: "Sandy Shores Airfield",
        position: new mp.Vector3(1015, 3013, 41)
    }
}

CommunicationManager.AddServerEvent("OpenPlayerRaceWindow", function () {
    Webwindow["Race"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/race/race.html", true);
    disableAllControls = true;
    mp.gui.cursor.visible = true;
})

CommunicationManager.AddServerEvent("OpenPlayerRaceInvitation", function () {
    HasOpenRaceInvitation = true;
    setTimeout(() => {
        HasOpenRaceInvitation = false;
    }, 30000);
})

CommunicationManager.AddServerEvent("startRaceForPlayer", function () {

    HasOpenRaceInvitation = false;

    setPlayerFrozen(true, true);

    mp.game.ui.messages.showShard("~r~Get ready...", "", 1, 0, 1000)


    setTimeout(() => {
        mp.game.ui.messages.showShard("~r~3", "", 1, 0, 1000)
        mp.game.audio.playSoundFrontend(1, '3_2_1', 'HUD_MINI_GAME_SOUNDSET', true);
    }, 1000);

    setTimeout(() => {
        mp.game.ui.messages.showShard("~r~2", "", 1, 0, 1000)
        mp.game.audio.playSoundFrontend(1, '3_2_1', 'HUD_MINI_GAME_SOUNDSET', true);
    }, 2000);

    setTimeout(() => {
        mp.game.ui.messages.showShard("~r~1", "", 1, 0, 1000)
        mp.game.audio.playSoundFrontend(1, '3_2_1', 'HUD_MINI_GAME_SOUNDSET', true);
    }, 3000);

    setTimeout(() => {
        mp.game.ui.messages.showShard("~r~GO", "", 1, 0, 1000)
        mp.game.audio.playSoundFrontend(1, 'Beep_Green', 'DLC_HEIST_HACKING_SNAKE_SOUNDS', true);
        setPlayerFrozen(false, false);
    }, 4000);

})

CommunicationManager.AddServerEvent("stopRaceForPlayer", (price) => {
    if (price > 0) {
        mp.game.ui.messages.showShard("~g~Du hast gewonnen!", `Preisgeld: ${price}$`, 1, 0, 3000)
        mp.game.audio.playSoundFrontend(1, "WIN", "HUD_AWARDS", true)
    } else {
        mp.game.ui.messages.showShard("~r~Du hast leider verloren", "", 1, 0, 3000)
    }
})

CommunicationManager.AddWebBrowserEvent("OnRaceWindowLoaded", () => {
    mp.players.forEachInStreamRange(function (player) {
        if (player != mp.players.local && player.vehicle && player.vehicle.getPedInSeat(-1) == player.handle) {
            let pPos = player.position;
            let lPos = mp.players.local.position;
            let dist = mp.game.system.vdist2(lPos.x, lPos.y, lPos.z, pPos.x, pPos.y, pPos.z);
            if (dist < 50) {
                Webwindow["Race"].call("addPlayer", player.name);
            }
        }
    })
    let pPos = mp.players.local.position;
    for (let index in raceTargets) {
        let target = raceTargets[index];
        let vdist = Math.round((mp.game.system.vdist(pPos.x, pPos.y, pPos.z, target.position.x, target.position.y, target.position.z) / 1000 / 4.0) * 100) / 100;
        let dist = parseFloat(mp.game.pathfind.calculateTravelDistanceBetweenPoints(pPos.x, pPos.y, pPos.z, target.position.x, target.position.y, target.position.z) / 1000);

        if (Math.abs(vdist - dist) < 10) {
            target.distance = dist;
        } else {
            target.distance = vdist;
        }
    }

    Webwindow["Race"].call("initTargets", JSON.stringify(raceTargets))
}, "Race");

CommunicationManager.AddWebBrowserEvent("OnRaceWindowClosed", () => {
    if (Webwindow["Race"] != null) {
        Webwindow["Race"].destroy();
        Webwindow["Race"] = null;
        mp.gui.cursor.visible = false;
        disableAllControls = false;
    }
}, "Race");

CommunicationManager.AddWebBrowserEvent("OnRaceStart", (...args) => {
    let target = raceTargets[args[2]];
    Webwindow["Race"].destroy();
    Webwindow["Race"] = null;
    mp.gui.cursor.visible = false;
    disableAllControls = false;
    CommunicationManager.TriggerServer("OnClientRequestRace", args[0], args[1], target.position.x, target.position.y, target.position.z, target.displayName);
}, "Race");

var points = {
    pedSpawn: {
        x: 244.3529,
        y: -404.1639,
        z: 47.92436,
        heading: 336.798
    },
    starting: {
        x: 264.2355,
        y: -379.5995,
        z: 44.45,
        heading: 246.606
    },
    situations: [{
        col: {
            x: 14.34,
            y: -754.25,
        },
        information: "An Zebrastreifen besteht immer die Möglichkeit, dass ein Fußgänger die Fahrbahn kreuzt.",
        peds: [{
            spawn: {
                pos: new mp.Vector3(-25, -745, 44.44),
                heading: 341
            }
        }],
        vehicles: []
    },
        {
            driveSlow: true,
            information: "An haltenden Bussen sollte man immer besonders langsam vorbei fahren. Es kann immer sein, dass Personen über die Fahrbahn laufen.",
            col: {
                x: -604.61,
                y: -377.014
            },
            stopCol: {
                x: -533.61,
                y: -342.18
            },
            peds: [
                {
                    spawn: {
                        pos: new mp.Vector3(-545.2278, -352.2695, 35.21603),
                        heading: 358.75
                    },
                    to: {
                        x: -553.0526,
                        y: -389.018,
                        z: 35.09281,
                        time: 10000
                    }
                },
                {
                    spawn: {
                        pos: new mp.Vector3(-543.4116, -388.2815, 35.15261),
                        heading: 0
                    },
                    to: {
                        x: -548.0349,
                        y: -336.1334,
                        z: 35.16411,
                        time: 13000
                    }
                },
                {
                    spawn: {
                        pos: new mp.Vector3(-558.7226, -386.592, 35.08598),
                        heading: 270
                    }
                },
                {
                    spawn: {
                        pos: new mp.Vector3(-555.2153, -388.3935, 35.08733),
                        heading: 0
                    }
                },
                {
                    spawn: {
                        pos: new mp.Vector3(-550.5388, -388.4725, 35.11204),
                        heading: 100
                    }
                },
                {
                    spawn: {
                        pos: new mp.Vector3(-545.6408, -390.5756, 35.12098),
                        heading: 100
                    }
                },
                {
                    spawn: {
                        pos: new mp.Vector3(-542.6398, -350.4131, 35.18272),
                        heading: 150
                    }
                }
            ],
            vehicles: [
                {
                    hash: "tourbus",
                    pos: new mp.Vector3(-555.53, -382.57, 35.262),
                    heading: 270.7,
                    hazard: true
                }
            ]
        },
        {
            information: "Einsatzfahrzeuge haben auf Vio-V immer Vorfahrt! Sollte sich ein Einsatzfahrzeug nähern fahre an die Seite!",
            disableOffroad: true,
            col: {
                x: -532.5119,
                y: -342.8026,
            },
            peds: [
                {
                    spawn: {
                        pos: new mp.Vector3(-485.9113, -290.79868, 35.444885),
                        heading: 270,
                        veh: true
                    }
                }
            ],
            vehicles: [
                {
                    hash: "ambulance",
                    pos: new mp.Vector3(-481.2751, -287.9061, 35.43218),
                    heading: 22.47696,
                    hazard: false,
                    to: {
                        x: -846.2336,
                        y: 457.8775,
                        z: 87.13165,
                        speed: 45.0,
                        ems: true,
                        drivingMode: 1074528293,
                    }
                }
            ]
        },
        {
            col: {
                x: -596.5667,
                y: 256.0708,
            },
            peds: [{
                spawn: {
                    pos: new mp.Vector3(-532.3821, 240.3707, 82.94984),
                    heading: 84
                },
                to: {
                    x: -566.2871,
                    y: 241.2035,
                    z: 83.0197,
                    time: 6000
                }
            }],
            vehicles: []

        },
        {
            col: {
                x: 208.4161,
                y: -353.3073,
            },
            peds: [],
            vehicles: [
                {
                    hash: "dubsta",
                    pos: new mp.Vector3(230.1955, -367.7038, 43.95),
                    heading: 252,
                    hazard: false
                },
                {
                    hash: "cog55",
                    pos: new mp.Vector3(241.5845, -371.4792, 43.95),
                    heading: 252,
                    hazard: false
                },
                {
                    hash: "picador",
                    pos: new mp.Vector3(258.0683, -377.1874, 44.16935),
                    heading: 250,
                    hazard: false
                }
            ]
        }
    ],
    route: {
        0: {
            x: 247,
            y: -590
        },
        1: {
            x: 45.9557495,
            y: -719.0701904
        },
        2: {
            x: -562.11,
            y: -649.62
        },
        3: {
            x: -564.54522,
            y: -376.361
        },
        4: {
            x: -698.872,
            y: -47.15
        },
        5: {
            x: -748.5573,
            y: 164.1875
        },
        6: {
            x: -592.0533,
            y: 252.3973
        },
        7: {
            x: -551.7377,
            y: 63.78975
        },
        8: {
            x: 208.4161,
            y: -353.3073
        }
    }
}

var DrivingSchoolDoNotHitColshapes = [{
    type: "circle",
    coord: {
        x: 221.54,
        y: -618.65
    },
    range: 3
}]

var drivingSchool = class {
    constructor() {
        this._init();
        mp.events.add("render", this.onRender);
        mp.events.add("playerEnterColshape", this.playerEnterColshape);
        mp.events.add("playerLeaveVehicle", this.playerLeaveVehicle);
        mp.events.add("playerEnterVehicle", this.playerEnterVehicle);
        mp.events.add("playerWeaponShot", this.playerWeaponShot);
    }

    _init() {
        var self = this;
        self._player = mp.players.local;
        self._dim = mp.players.local.dimension;
        self._veh = mp.vehicles.new(mp.game.joaat("serrano"), new mp.Vector3(points.starting.x, points.starting.y, points.starting.z), {
            heading: points.starting.heading,
            dimension: self._dim,
            numberPlate: "Vio-V",
            engine: true
        });
        // self._veh.freezePosition(false);
        VioRageManager.FreezePosition(self._veh, false);
        self.render = false;
        self.running = true;
        self.ped = null;
        self._pedInVehicle = false;
        self._maxSpeed = 100;
        self._waypoint = null;
        self._vehicleHealth = 0;
        self._vehicleHealthStart = null;
        self._situations = [];
        self._activeSituation = null;
        self._nextSituation = null;
        self._score = 0; // Count of mistakes
        self._offroadStart = null;
        self._overspeedStart = null;
        self._driveSlow = false;
        self._waitForParking = false;
        self._parkMarker = null;
        self._colshapes = []; // List of mistake colshapes
    }

    StopAll() {
        onDrivingSchoolStop();
    }

    playerLeaveVehicle() {
        var self = DrivingSchool;
        //VioRageManager.SendChatMessage("Leave")
        if (self.running == false) return;
        if (self._score < 8) {
            if (self._pedInVehicle) {
                self.render = false;
                CommunicationManager.TriggerServer("OnClientFailedDrivingTest");
                RemoveInformationsFromInformationWindowByTyp(2);
                mp.game.ui.messages.showShard("~r~Fahrprüfung", "Leider hast du die praktische Prüfung nicht bestanden!", 1, 0, 10000);
                self.StopAll();
            }
        }
    }

    playerEnterVehicle(veh, seat) {
        var self = DrivingSchool;
        if (self.running == false) return;
        if (veh == self._veh) {
            if (self._pedInVehicle) {
                self._veh.setEngineOn(true, true, true);
            }
        }
    }

    playerWeaponShot(targetPosition, targetEntity) {

        if (mp.players.local.weapon == 0x60EC506) {
            return;
        }

        var self = DrivingSchool;
        if (self.running == false) return;
        self.render = false;
        self.addMistakes(8, "Gewaltausübung");
        return;
    };

    playerEnterColshape(colshape) {
        var self = DrivingSchool;
        // If player enters current waypoint colshape, set new Waypoint
        if (self.running == false) return;

        if (self._waypoint == colshape) {
            let waypointIndex = colshape.waypointIndex;
            colshape.destroy();
            if (points.route[(waypointIndex + 1)]) {
                mp.game.ui.setNewWaypoint(points.route[(waypointIndex + 1)].x, points.route[(waypointIndex + 1)].y)
                let col = mp.colshapes.newCircle(points.route[(waypointIndex + 1)].x, points.route[(waypointIndex + 1)].y, 12, self._dim);
                col.waypointIndex = (waypointIndex + 1);
                self._waypoint = col
            } else {
                // Last waypoint, trigger parking situation
                CreateInformationWindow("DSchoolStartPark", 2, "Bitte parke das Fahrschulauto in die angezeigte Parklücke ohne die anderen Fahrzeuge zu beschädigen!", "0")

                self._parkMarker = mp.markers.new(4, new mp.Vector3(235.8855, -369.5002, 44.24361), 1, {
                    dimension: self._dim
                });
                self._waitForParking = true;
            }
            // Check if player enters situation colshape to trigger situation actions
        } else if (self._situations[self._nextSituation] && self._situations[self._nextSituation].colshape == colshape) {
            let i = self._nextSituation;

            if (self._situations[i + 1]) {
                self._activeSituation = self._nextSituation;
                self._nextSituation++;
            }

            if (self._situations[self._activeSituation]) {
                if (self._situations[self._activeSituation].colshape) {
                    self._situations[self._activeSituation].colshape.destroy();
                    self._situations[self._activeSituation].colshape = null;
                }
            }

            // Trigger ped walking (if set for this situation)
            for (let index in self._situations[i].peds) {
                //self._situations[i].peds[index].position = points.situations[i].peds[index].pos

                // self._situations[i].peds[index].freezePosition(false);
                VioRageManager.FreezePosition(self._situations[i].peds[index], false);

                if (points.situations[i].peds[index].to) {
                    self._situations[i].peds[index].taskGoStraightToCoord(points.situations[i].peds[index].to.x, points.situations[i].peds[index].to.y, points.situations[i].peds[index].to.z,
                        2.0, points.situations[i].peds[index].to.time, points.situations[i].peds[index].spawn.heading, 0)

                    setTimeout(() => {
                        if (self._situations[i].peds[index]) {
                            if (self.running == true) {
                                self._situations[i].peds[index].taskWanderStandard(10.0, 10);
                            }
                        }
                    }, points.situations[i].peds[index].to.time);

                } else {
                    self._situations[i].peds[index].taskWanderStandard(10.0, 10);
                }

                if (points.situations[i].peds[index].spawn.veh) {

                    self._situations[i].peds[index].setInvincible(true);
                    self._situations[i].peds[index].setCanBeDamaged(false);
                    self._situations[i].peds[index].setProofs(true, true, true, true, true, true, true, true);

                    let veh = self._situations[i].vehicles[index];
                    veh.setEngineOn(true, true, true)
                    let veh_path = points.situations[i].vehicles[index].to;
                    self._situations[i].peds[index].setIntoVehicle(self._situations[i].vehicles[index].handle, -1);
                    self._situations[i].peds[index].taskVehicleDriveToCoord(veh.handle, veh_path.x, veh_path.y, veh_path.z, veh_path.speed, 1.0, mp.game.joaat(points.situations[i].vehicles[index].hash), veh_path.drivingMode, 2.5, true);
                    if (veh_path.ems) {
                        veh.setSiren(true);
                    }
                } else {
                    self._situations[i].peds[index].setInvincible(false);
                    self._situations[i].peds[index].setCanBeDamaged(true);
                    self._situations[i].peds[index].setProofs(false, false, false, false, false, false, false, false);
                }
            }

            if (self._situations[i].information) {
                let dt = new Date();
                CreateInformationWindow("Notice" + dt.getTime(), 3, self._situations[i].information, "15")
            }

            if (self._situations[i].driveSlow) self._driveSlow = true; // Set driveSlow mode if set for this situation

            self.render = true;
        } else if (colshape.stopDriveSlow) {
            self._driveSlow = false;
            if(self._situations[self._activeSituation] != null){
                if (self._situations[self._activeSituation].stopCol) {
                    self._situations[self._activeSituation].stopCol.destroy();
                    self._situations[self._activeSituation].stopCol = null;
                }
            }
            // Check if colshape is a mistake colshape, then increase score
        } else if (self._colshapes.includes(colshape)) {
            self.addMistakes(1, "Falsche Fahrspur");
        }
    }

    addMistakes(amount, reason) {
        var self = DrivingSchool;
        self._score = self._score + amount;
        let dt = new Date();

        CreateInformationWindow("DSchoolMistakes" + dt.getTime(), 1, "Fehlerpunkte: " + self._score + " von 8   Grund: " + reason, "10")

        if (self._score >= 8) {
            self.render = false;
            self._score = 8;
            CommunicationManager.TriggerServer("OnClientFailedDrivingTest");
            RemoveInformationsFromInformationWindowByTyp(2);
            mp.game.ui.messages.showShard("~r~Fahrprüfung", "Leider hast du die praktische Prüfung nicht bestanden!", 1, 0, 10000)
            self.StopAll();
        }
    }

    onRender() {
        var self = DrivingSchool;
        if (self.render) {
            if (self.running == false) return;
            // Wait till ped is in vehicle to Start Driving Test

            mp.game.controls.disableControlAction(2, 24, true);
            mp.game.controls.disableControlAction(2, 25, true);

            mp.game.controls.disableControlAction(2, 140, true);
            mp.game.controls.disableControlAction(2, 141, true);
            mp.game.controls.disableControlAction(2, 142, true);
            mp.game.controls.disableControlAction(2, 143, true);

            if (self.ped && !self._pedInVehicle) {
                if (self.ped.isInAnyVehicle(false)) {
                    self._pedInVehicle = true;
                    self.startDrivingTest();
                }
            }
            if (self._veh) {
                if (self._veh.getPedInSeat(-1) == self.ped.handle) {
                    self.ped.clearTasksImmediately();
                    self.ped.setIntoVehicle(self._veh.handle, 0);
                }
            }

            let disableOffroad = false;

            if (self._situations[self._activeSituation]) {

                if (points.situations[self._activeSituation].disableOffroad) {
                    disableOffroad = true;
                }

                for (let index in self._situations[self._activeSituation].peds) {
                    let ped = self._situations[self._activeSituation].peds[index];
                    if (ped.isGettingUp() || ped.isFalling() || ped.isRagdoll()) {
                        let pPos = mp.players.local.position;
                        let pedPos = ped.getCoords(true);
                        if (mp.game.system.vdist(pPos.x, pPos.y, pPos.z, pedPos.x, pedPos.y, pedPos.z) < 40) {
                            self.render = false;
                            self.addMistakes(8, "Körperverletzung");
                            return;
                        }
                    }
                }

                // Last situation, wait until player is in correct parking position
                if (self._waitForParking) {
                    for (let index in self._situations[self._activeSituation].vehicles) {
                        let speed = self._situations[self._activeSituation].vehicles[index].getSpeed();
                        if (speed > 0.5) {
                            self.render = false;
                            self.addMistakes(8, "Schaden am fremden Fahrzeug");
                            return;
                        }
                    }

                    let pPos = self._player.position;
                    if (mp.game.system.vdist(pPos.x, pPos.y, pPos.z, 235.8855, -369.5002, 43.82948) < 1) {
                        if (Math.abs(self._player.getHeading() - 252) < 2) {
                            self.render = false;
                            CommunicationManager.TriggerServer("OnClientPassDrivingTest");
                            RemoveInformationsFromInformationWindowByTyp(2);
                            mp.game.ui.messages.showShard("~g~Fahrprüfung", "Herzlichen Glückwunsch du hast die praktische Prüfung bestanden!", 1, 0, 10000)
                            self.StopAll();
                            return;
                        }
                    }
                }

            }

            if (self._veh) {
                if (!disableOffroad) {
                    self.offroadCheck();
                }
                self.speedCheck();
                if (self.ped) {
                    if (self._pedInVehicle) {
                        if (self.ped.isInAnyVehicle(false) == false) {
                            self.ped.setIntoVehicle(self._veh.handle, 0);
                        }
                    }
                }
            }
        }
    }

    offroadCheck() {
        var self = DrivingSchool;
        if (self.running == false) return;
        let onRoad = parseInt(mp.game.pathfind.isPointOnRoad(self._veh.position.x, self._veh.position.y, self._veh.position.z, self._veh.handle))
        if (onRoad == 0) {
            if (self._offroadStart == null) {
                self._offroadStart = new Date();
            }
        } else if (onRoad == 1) {
            if (self._offroadStart != null) {
                let endDate = new Date();
                let seconds = Math.abs((self._offroadStart.getTime() - endDate.getTime()) / 1000);
                if (seconds > 5) {
                    self.addMistakes(2, "Falsche Fahrspur");
                }
                self._offroadStart = null;
            }
        }
    }

    speedCheck() {
        var self = DrivingSchool;
        if (self.running == false) return;
        if (self._veh != null) {
            let speed = self._veh.getSpeed() * 3.6
            let max_speed = self._maxSpeed;

            if (self._driveSlow) {
                max_speed = 50;
            }

            if (self._vehicleHealth > self._veh.getHealth()) {
                if (self._vehicleHealthStart == null) {
                    self._vehicleHealthStart = new Date();
                } else {
                    let end = new Date();
                    let seconds = Math.abs((self._vehicleHealthStart.getTime() - end.getTime()) / 1000);
                    if (seconds > 2) {
                        let diff = (self._vehicleHealth - self._veh.getHealth()) / 10;
                        self.addMistakes(Math.ceil(diff), "Fahrzeugschaden");
                        self._vehicleHealthStart = null;
                        self._vehicleHealth = self._veh.getHealth();
                    }
                }
            } else {
                self._vehicleHealthStart = null;
                self._vehicleHealth = self._veh.getHealth();
            }

            if (speed > max_speed) {
                if (self._overspeedStart == null) {
                    self._overspeedStart = new Date();
                } else {
                    let end = new Date();
                    let seconds = Math.abs((self._overspeedStart.getTime() - end.getTime()) / 1000);
                    if (seconds > 2) {
                        let diff = (speed - max_speed) / 5;
                        self.addMistakes(Math.ceil(diff), "Höchstgeschwindigkeit");
                        self._overspeedStart = null;
                    }
                }
            } else {
                self._overspeedStart = null;
            }
        }
    }

    start() {
        // Init driving school, create vehicle and ped

        CreateInformationWindow("DSchoolStartInit", 2, "Steige in das bereit gestellte Fahrschulauto als Fahrer ein.", "0")

        var self = DrivingSchool;
        if (self.running == false) return;

        //self._veh.setHeading(points.starting.heading);
        self._veh.setOnGroundProperly();

        self.ped = VioRageManager.CreatePed(mp.game.joaat("ig_abigail"), new mp.Vector3(points.pedSpawn.x, points.pedSpawn.y, points.pedSpawn.z + 0.5), points.pedSpawn.heading, self._dim, false);

        IsRageMpVehicleReady(self._veh, 5000, function (isreadyveh) {
            if (self._veh && isreadyveh) {

                self._veh.setOnGroundProperly();

                IsRageMpPedReady(self.ped, 5000, function (isreadyped) {
                    if (self._veh && self.ped && isreadyped) {
                        // self.ped.freezePosition(false);
                        VioRageManager.FreezePosition(self.ped, false);
                        self.ped.taskEnterVehicle(self._veh.handle, 20000, 0, 1, 1, 0);
                    }
                });
            }
        });

        setTimeout(function () {
            if (self._veh && self.ped) {
                if (self._pedInVehicle) {
                    if (self.ped.isInAnyVehicle(false) == false) {
                        self.ped.setIntoVehicle(self._veh.handle, 0);
                    }
                }
            }
        }, 20000);

        self.render = true;
        self.initSituations();
        self.initColshapes();
    }

    // Start the driving test | Happens after ped has entered the vehicle
    startDrivingTest() {

        var self = DrivingSchool;
        if (self.running == false) return;

        CreateInformationWindow("DSchoolStart", 2, "Bitte fahre die in der Navigation eingestellte Route. Achte auf andere Verkehrsteilnehmer und auf deine Geschwindigkeit.", "0")

        self._veh.setEngineOn(true, true, true);
        // self._veh.freezePosition(false)
        VioRageManager.FreezePosition(self._veh, false);

        mp.game.ui.setNewWaypoint(points.route[0].x, points.route[0].y);
        let col = mp.colshapes.newCircle(points.route[0].x, points.route[0].y, 8, self._dim);
        col.waypointIndex = 0;
        self._waypoint = col;
        self.render = true;
    }

    initSituations() {
        var self = DrivingSchool;
        if (self.running == false) return;

        var Skins = ["g_m_y_lost_03", "cs_omega", "u_f_o_prolhost_01", "a_f_m_tramp_01", "a_f_y_tourist_02", "a_f_m_tourist_01", "a_f_y_tourist_01", "a_m_y_sunbathe_01", "a_m_m_skidrow_01", "cs_maryann", "csb_maude", "ig_jimmyboston", "ig_hao", "s_m_m_gaffer_01", "ig_fbisuit_01", "cs_fbisuit_01", "a_m_m_eastsa_01", "s_m_y_dealer_01", "g_m_m_chigoon_02", "csb_car3guy2", "csb_bride"];

        for (let [key, value] of points.situations.entries()) {
            let situation = {};
            situation.index = key;
            situation.peds = [];
            situation.vehicles = [];

            // If vehicles belong to the situation, spawn them
            for (let veh of value.vehicles) {
                situation.vehicles.push(self.spawnVehicle(veh));
            }

            // Spawn peds for situations and store them
            let PedKey = 0;
            for (let ped of value.peds) {
                var Skin = Skins[Math.floor(Math.random() * Skins.length)];
                let newPed = VioRageManager.CreatePed(mp.game.joaat(Skin), ped.spawn.pos, ped.spawn.heading, self._dim, false);
                situation.peds.push(newPed);

                if (ped.spawn.veh) {
                    //newPed.taskWarpIntoVehicle(situation.vehicles[PedKey].handle, -1);
                }
                PedKey = PedKey + 1;
            }

            situation.colshape = mp.colshapes.newCircle(value.col.x, value.col.y, 10, self._dim);
            if (value.driveSlow) situation.driveSlow = 1;
            if (value.information) situation.information = value.information;

            if (value.stopCol) {
                situation.stopCol = mp.colshapes.newCircle(value.stopCol.x, value.stopCol.y, 10, self._dim);
                situation.stopCol.stopDriveSlow = true
            }

            self._situations.push(situation);
        }
        self._activeSituation = -1;
        self._nextSituation = 0;
    }

    spawnVehicle(veh) {
        var self = DrivingSchool;
        if (self.running == false) return;

        let newVeh = mp.vehicles.new(mp.game.joaat(veh.hash), veh.pos, {
            heading: veh.heading,
            engine: true,
            dimension: self._dim
        })

        IsRageMpVehicleReady(newVeh, 1500, function (isready) {
            if (newVeh != null && isready) {
                newVeh.setOnGroundProperly();
                // newVeh.freezePosition(false);
                VioRageManager.FreezePosition(newVeh, false);
                newVeh.setDoorsLocked(2);

                newVeh.setHeading(veh.heading);
            }
        });

        if (veh.hazard) {
            newVeh.setEngineOn(true, true, true)
            newVeh.setIndicatorLights(0, true);
            newVeh.setIndicatorLights(1, true);
        }

        if (veh.ems) {
            newVeh.setSiren(true);
        }

        return newVeh;
    }

    // Init colshapes to detect if the driver is on the wrong side of the road
    initColshapes() {
        var self = DrivingSchool;
        if (self.running == false) return;

        for (let key of DrivingSchoolDoNotHitColshapes) {
            switch (key.type) {
                case "rectangle":
                    self._colshapes.push(mp.colshapes.newRectangle(key.coord.x, key.coord.y, key.width, key.height));
                    break;
                case "circle":
                    self._colshapes.push(mp.colshapes.newCircle(key.coord.x, key.coord.y, key.range, self._dim));
                    break;
            }
        }

    }

    stop() {
        var self = DrivingSchool;
        self.running = false;
        self.render = false;

        mp.events.remove("render", this.onRender)
        mp.events.remove("playerEnterColshape", this.playerEnterColshape)
        mp.events.remove("playerLeaveVehicle", this.playerLeaveVehicle)
        mp.events.remove("playerEnterVehicle", this.playerEnterVehicle)
        mp.events.remove("playerWeaponShot", this.playerWeaponShot)

        VioRageManager.clearGtaWayPoint();

        if (self._veh) {
            mp.players.local.taskLeaveVehicle(self._veh.handle, 0);
        }

        setTimeout(() => {
            if (self._veh) {
                self._veh.destroy();
            }
        }, 3000);

        if (self.ped) {
            self.ped.destroy();
            self._pedInVehicle = false;
        }

        if (self._parkMarker) {
            self._parkMarker.destroy();
        }

        for (let index in self._situations) {
            let situation = self._situations[index];

            for (let pindex in situation.peds) {
                let ped = situation.peds[pindex];
                if (ped) {
                    ped.destroy();
                    self._situations[index].peds[pindex] = null;
                }
            }

            for (let vindex in situation.vehicles) {
                let veh = situation.vehicles[vindex];
                if (veh) {
                    veh.destroy();
                    self._situations[index].vehicles[vindex] = null;
                }
            }

            if (situation.stopCol) {
                if (situation.stopCol) {
                    situation.stopCol.destroy();
                }
            }

            if (situation.colshape) {
                if (situation.colshape) {
                    situation.colshape.destroy();
                }
            }

        }

        for (let cindex in self._colshapes) {
            let colshape = self._colshapes[cindex];
            if (colshape) {
                colshape.destroy();
            }
        }
    }
}
CommunicationManager.AddServerEvent("onDrivingSchoolStart", () => {
    if (DrivingSchool == null) {
        DrivingSchool = new drivingSchool();
        DrivingSchool.start();
        RemoveInformationsFromInformationWindowByTyp(4);
        isPlayerInDrivingSchool = true;
    }
})

function onDrivingSchoolStop() {
    if (DrivingSchool != null) {
        DrivingSchool.stop();
        if (mp.storage.data.drawQuests == "1") {
            CommunicationManager.TriggerServer("requestPlayerQuest");
        }
        setTimeout(() => {
            DrivingSchool = null;
            isPlayerInDrivingSchool = false;
        }, 3000);
    }
}

CommunicationManager.AddServerEvent("onDrivingSchoolTheoryStart", (questions) => {
    if (Webwindow["ExamWindow"] == null) {
        Webwindow["ExamWindow"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/drivingschool/exam/exam.html", true);
        Webwindow["ExamWindow"].start('initExam', JSON.parse(questions), mp.players.local.name);
    }
})

CommunicationManager.AddWebBrowserEvent("closeDrivingSchoolTheory", (success) => {
    if (success) {
        mp.game.ui.messages.showShard("~g~Bestanden", "Herzlichen Glückwunsch du hast die theoretische Prüfung bestanden!", 1, 0, 10000)
    } else {
        mp.game.ui.messages.showShard("~r~Durchgefallen", "Leider hast du die theoretische Prüfung nicht bestanden!", 1, 0, 10000)
    }

    if (Webwindow["ExamWindow"] != null) {
        Webwindow["ExamWindow"].destroy();
        Webwindow["ExamWindow"] = null;
    }
})

CommunicationManager.AddServerEvent("SendPlayerDrivingTestResults", (correctAnswers, failCount, success) => {
    if (Webwindow["ExamWindow"] != null) {
        Webwindow["ExamWindow"].call('BrowserUpdateExam', JSON.parse(correctAnswers), failCount, success);
    }
})

CommunicationManager.AddWebBrowserEvent("onSubmitAnswers", (answers) => {
    CommunicationManager.TriggerServer("OnClientRequestDrivingTestResults", answers);
})

var vioFires = {}

var FIRE = class {
    constructor(data) {
        this._setup(data);
    }

    _setup(data) {
        var self = this;
        self._id = data.id;
        self._object = null;
        self._blip = null;
        self._created = false;
        self._pos = {
            x: data.x,
            y: data.y,
            z: data.z
        };
        self._maxchildren = data.maxchildren;
        self.create();
    }

    create() {
        var self = this;
        if (!self._object) {
            self._object = mp.game.fire.startScriptFire(self._pos.x, self._pos.y, self._pos.z, self._maxchildren, true);

            self._blip = mp.blips.new(436, new mp.Vector3(self._pos.x, self._pos.y, self._pos.z), {
                scale: 0.5,
                name: "Feuer",
                color: 1,
                shortRange: true
            })

            self._created = true;
        }
    }

    streamin() {
        if (this._object == null) {
            //this.create();
        }
    }

    streamout() {
        if (this._object) {
            //this._object.destroy();
            //this._object = null;
        }
    }

    isCreated() {
        return this._object ? true : false;
    }

    getPosition() {
        return this._pos;
    }

    getID() {
        return this._id;
    }

    destroy() {
        
        //VioRageManager.SendChatMessage("[DEBUG] DESTROY FIRE");
        
        if (this._object) {
            mp.game.fire.removeScriptFire(this._object);
            this._object = null;
        }
        if (this._blip) {
            this._blip.destroy();
            this._blip = null;
        }
    }
}

CommunicationManager.AddServerEvent("createSingleFire", (singlefirejson) => {
    let fire = JSON.parse(singlefirejson);
    //VioRageManager.SendChatMessage("singleobject " + JSON.stringify(singleobject))
    if (fire) {
        if (vioFires[fire.ID] != null) {
            vioFires[fire.ID].destroy()
            vioFires[fire.ID] = null;
        }
        vioFires[fire.ID] = new FIRE({
            id: fire.ID,
            x: fire.Pos.x,
            y: fire.Pos.y,
            z: fire.Pos.z,
            maxchildren: fire.MaxChildren
        });
    }
})

CommunicationManager.AddServerEvent("destroyFire", (fireid) => {
    if (vioFires[fireid] != null) {
        vioFires[fireid].destroy()
        vioFires[fireid] = null;
    }
})

CommunicationManager.AddServerEvent("sentNewFireInformation", (pos) => {
    let zoneName = getLocationZoneName(pos.x, pos.y, pos.z);
    CreateNotify("Es wurde ein kleiner Brand in " + zoneName + " gemeldet!", 20)
})

mp.events.add('playerWeaponShot', (targetPosition, targetEntity) => {

    //VioRageManager.SendChatMessage("[DEBUG] REMOVE THIS! " + mp.players.local.weapon);
    
    if (mp.players.local.weapon != 0x60EC506) {
        //VioRageManager.SendChatMessage("[DEBUG] return #1");
        return;
    }

    let local_pos = mp.players.local.position;
    if (local_pos == null) {
        //VioRageManager.SendChatMessage("[DEBUG] return #2");
        return;
    }

    var i;
    for (let i in vioFires) {
        let temp_fire = vioFires[i];
        //VioRageManager.SendChatMessage("[DEBUG] for temp_fire " + i);
        if (temp_fire) {
            //VioRageManager.SendChatMessage("[DEBUG] is temp_fire " + i);
            if (temp_fire.isCreated()) {
                //VioRageManager.SendChatMessage("[DEBUG] check fire " + i);
                let temp_pos = temp_fire.getPosition();
                let distfire = mp.game.system.vdist2(local_pos.x, local_pos.y, local_pos.z, temp_pos.x, temp_pos.y, temp_pos.z);
                //VioRageManager.SendChatMessage("[DEBUG] distfire " + distfire);
                if (distfire <= 40) {
                    //VioRageManager.SendChatMessage("[DEBUG] fire in range " + i);
                    let fireamount = mp.game.fire.getNumberOfFiresInRange(temp_pos.x, temp_pos.y, temp_pos.z, 4);
                    //VioRageManager.SendChatMessage("[DEBUG] fireamount " + fireamount);
                    if (fireamount == 0) {
                        //VioRageManager.SendChatMessage("[DEBUG] kill fire " + i);
                        let fire_id = temp_fire.getID();
                        temp_fire.destroy();
                        CommunicationManager.TriggerServer("OnClientRequestStopFire", fire_id);
                    } else {
                        //VioRageManager.SendChatMessage("Feuer: " + fireamount.toString());
                    }
                }
            }
        }
    }
});


function RequestServerRobAction(sevent, id, pos, tick, maxtick) {
    tick = tick + 1;
  
    var PointToDrop = mp.game.invokeVector3("0x6E16BC2503FF1FF0", pos.x, pos.y, pos.z, 0.25, 1.50)

    CommunicationManager.TriggerServer(sevent, id, PointToDrop.x, PointToDrop.y, PointToDrop.z);
    if (tick < maxtick) {
        setTimeout(function () {
            RequestServerRobAction(sevent, id, pos, tick, maxtick);
        }, 6000);
    }
}

CommunicationManager.AddServerEvent("StartPlayerServerRob", (sevent, id, pos, maxtick) => {
      RequestServerRobAction(sevent, id, pos, 0, maxtick)
});

var WeaponShopCamera = null;
var WeaponShopObject = null;
var WeaponShopMapObject = null;
var WeaponShopObjectHash = "";
var WeaponShopGlobalHigh = 750;
var WeaponShopObjectComponents = [];
var WeaponShopObjectTempComponent = "";
var WeaponShopLuxuryComponents = ["COMPONENT_PISTOL_VARMOD_LUXE", "COMPONENT_COMBATPISTOL_VARMOD_LOWRIDER", "COMPONENT_APPISTOL_VARMOD_LUXE", "COMPONENT_PISTOL50_VARMOD_LUXE", "COMPONENT_SNSPISTOL_VARMOD_LOWRIDER", "COMPONENT_HEAVYPISTOL_VARMOD_LUXE", "COMPONENT_MICROSMG_VARMOD_LUXE", "COMPONENT_SMG_VARMOD_LUXE", "COMPONENT_ASSAULTSMG_VARMOD_LOWRIDER", "COMPONENT_PUMPSHOTGUN_VARMOD_LOWRIDER", "COMPONENT_ASSAULTRIFLE_VARMOD_LUXE", "COMPONENT_CARBINERIFLE_VARMOD_LUXE", "COMPONENT_ADVANCEDRIFLE_VARMOD_LUXE", "COMPONENT_SPECIALCARBINE_VARMOD_LOWRIDER", "COMPONENT_BULLPUPRIFLE_VARMOD_LOW", "COMPONENT_MARKSMANRIFLE_VARMOD_LUXE", "COMPONENT_REVOLVER_VARMOD_BOSS", "COMPONENT_REVOLVER_VARMOD_GOON"]
var WeaponShopSpamBlock;
var WeaponShopObjectComponentsSelected = {};
var WeaponShopObjectTint = 0;
var WeaponShopFinalSelection = false;
var WeaponShopType = "dollar";

function IsLuxury(HashName) {
    if (WeaponShopLuxuryComponents.includes(HashName)) {
        return true;
    } else {
        return false;
    }
}

function DestroyWeaponShopObject() {
    if (WeaponShopObject != null) {
        mp.game.object.deleteObject(WeaponShopObject);
        WeaponShopObject = null;
    }
    if (WeaponShopMapObject != null) {
        //if(WeaponShopMapObject.doesExist()){
        WeaponShopMapObject.destroy()
        //}
        //mp.game.object.deleteObject(WeaponShopMapObject);
        WeaponShopMapObject = null;
    }
}

function OnCefRequestBuyWeaponComponent(weapon, hash) {
    if (Webwindow["WeaponShop"] != null && WeaponShopCamera != null) {
        CommunicationManager.TriggerServer("OnClientRequestUnlockWeaponComponent", weapon, hash, WeaponShopType);
    }
}

mp.events.add("OnCefRequestBuyWeaponComponent", OnCefRequestBuyWeaponComponent);

function DestroyPlayerWeaponCreator() {

    clearTimeout(WeaponShopSpamBlock);

    if (Webwindow["WeaponShop"] != null) {

        Webwindow["WeaponShop"].destroy();
        Webwindow["WeaponShop"] = null;

        WeaponShopFinalSelection = false;

        disableAllControls = false;
        ToogleHudStatus(true, true);
        // mp.players.local.freezePosition(false);
        VioRageManager.FreezePosition(mp.players.local, false);
    }

    DestroyWeaponShopObject();

    if (WeaponShopCamera != null) {
        WeaponShopCamera.setActive(false);
        WeaponShopCamera.destroy();
        WeaponShopCamera = null;
        mp.game.cam.renderScriptCams(false, false, 0, true, false);
    }

}

mp.events.add("DestroyPlayerWeaponCreator", DestroyPlayerWeaponCreator);

function GetItemIdToObjectName(id) {
    let Name = "";
    if (id == "gadget_parachute") {
        Name = "p_parachute_s"
    }
    if (Number(id) == 29) {
        Name = "w_pi_pistol50_mag1"
    }
    if (Number(id) == 34) {
        Name = "w_sg_assaultshotgun_mag1"
    }
    if (Number(id) == 30) {
        Name = "w_sb_pdw_mag1"
    }
    if (Number(id) == 55) {
        Name = "prop_bodyarmour_03"
    }
    return Name;
}


mp.events.add("SendPlayerToWeaponCreatorUpdate", (creditaddons) => {
    if (AntiCheatCEF("WeaponShop", "SendPlayerToWeaponCreatorUpdate")) {
        Webwindow["WeaponShop"].start("SendUpdateCall", creditaddons);
    }
});

mp.events.add("SendPlayerToWeaponCreatorUpdate", (creditaddons) => {
    if (AntiCheatCEF("WeaponShop", "SendPlayerToWeaponCreatorUpdate")) {
        Webwindow["WeaponShop"].start("SendUpdateCall", creditaddons);
    }
});

CommunicationManager.AddWebBrowserEvent("OnPlayerSwitchedToWeaponCraftSystem", () => {
    if (WeaponShopCamera == null) {
        var pos = mp.players.local.position;

        WeaponShopCamera = mp.cameras.new("WeaponShop", new mp.Vector3(pos.x, pos.y - 1.5, pos.z + 1.5 + WeaponShopGlobalHigh), new mp.Vector3(0, 0, 0), 50);
        WeaponShopCamera.setActive(true);
        mp.game.cam.renderScriptCams(true, false, 0, true, false);

        if (WeaponShopCamera != null) {
            WeaponShopCamera.pointAtCoord(pos.x, pos.y, pos.z + 2.0 + WeaponShopGlobalHigh);
        }
    }
}, "WeaponShop");

CommunicationManager.addSafeServerEvent("SendPlayerToWeaponCreator", (weapons, money, mats, type, creditaddons, htime) => {

    DestroyWeaponShopObject();
    if (mp.gui.cursor.visible) {
        return;
    }
    if (Webwindow["WeaponShop"] == null && WeaponShopCamera == null) {
        CEFUtility.CloseAll();

        WeaponShopType = type;

        if (mp.storage.data.weaponcrafting == null) {
            mp.storage.data.weaponcrafting = {};
        }
        if (mp.storage.data.weaponcrafting[WeaponShopType] == null) {
            mp.storage.data.weaponcrafting[WeaponShopType] = {};
        }

        disableAllControls = true;
        ToogleHudStatus(false, true);
        // mp.players.local.freezePosition(true);
        VioRageManager.FreezePosition(mp.players.local, true);

        var json_data_weapon = JSON.stringify(mp.storage.data.weaponcrafting[WeaponShopType]);

        var pos = mp.players.local.position;

        if (json_data_weapon == "{}") {
            if (WeaponShopCamera == null) {
                WeaponShopCamera = mp.cameras.new("WeaponShop", new mp.Vector3(pos.x, pos.y - 1.5, pos.z + 1.5 + WeaponShopGlobalHigh), new mp.Vector3(0, 0, 0), 50);
            }
            WeaponShopCamera.setActive(true);
            mp.game.cam.renderScriptCams(true, false, 0, true, false);

            if (WeaponShopCamera != null) {
                WeaponShopCamera.pointAtCoord(pos.x, pos.y, pos.z + 2.0 + WeaponShopGlobalHigh);
            }
        }

        Webwindow["WeaponShop"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/shop_weapon/shop_weapon.html", true);
        Webwindow["WeaponShop"].start("SendInitCall", weapons, money, mats, creditaddons, htime, json_data_weapon);

        setTimeout(() => {
            if (Webwindow["WeaponShop"] != null) {
                mp.gui.cursor.visible = true;
                VioRageManager.ShowChat(false);
                VioRageManager.ActivateChat(false);
            }
        }, 1500);
    }
});

function SetWeaponTint(Tint) {
    if (WeaponShopObject != null) {
        if (WeaponShopObjectHash.includes("weapon")) {
            WeaponShopObjectTint = Number(Tint)
            mp.game.weapon.setWeaponObjectTintIndex(WeaponShopObject, WeaponShopObjectTint);
        }
    }
}

CommunicationManager.AddWebBrowserEvent("SetWeaponTint", SetWeaponTint, "WeaponShop");

function RequestBuyTempWeapon(weapon, amount) {
    clearTimeout(WeaponShopSpamBlock);

    if (WeaponShopObjectHash.includes("weapon") || WeaponShopObjectHash.includes("parachute")) {

        DestroyWeaponShopObject();

        //mp.gui.chat.push("WeaponShopObjectHash : " + weapon);
        //mp.gui.chat.push("Components : " + JSON.stringify(WeaponShopObjectComponentsSelected));
        //mp.gui.chat.push("Tint : " + WeaponShopObjectTint);
        //mp.gui.chat.push("Amount : " + amount);

        WeaponShopObjectComponents = [];
        WeaponShopObjectTempComponent = "";

        for (var HashName in WeaponShopObjectComponentsSelected) {
            var PriceType = WeaponShopObjectComponentsSelected[HashName];
            if (PriceType == "buy_dollar" || PriceType == "buy_credit") {
                WeaponShopObjectComponents.push(HashName);
            }
        }

        if (WeaponShopFinalSelection == false) {
            //mp.gui.chat.push("Ansicht zum Bestätigen seiner Waffe");
            WeaponShopFinalSelection = true;
            CreateWeaponShopWeapon(WeaponShopObjectHash);
            Webwindow["WeaponShop"].call("SendPlayerFinal", WeaponShopObjectHash, JSON.stringify(WeaponShopObjectComponentsSelected), WeaponShopObjectTint, amount);
            return;
        } else {
            if (WeaponShopObjectHash == "p_parachute_s") {
                WeaponShopObjectHash = "gadget_parachute"
            }
            CommunicationManager.TriggerServer("OnClientRequestWeaponBuy", WeaponShopObjectHash, JSON.stringify(WeaponShopObjectComponentsSelected), WeaponShopObjectTint, amount, WeaponShopType);
        }
    } else {
        CommunicationManager.TriggerServer("OnClientRequestWeaponShopItemBuy", weapon, amount, WeaponShopType);
    }
    DestroyPlayerWeaponCreator();
}

CommunicationManager.AddWebBrowserEvent("RequestBuyTempWeapon", RequestBuyTempWeapon, "WeaponShop");


function RequestAddTempWeaponToFav(name, weapon, amount, cost) {
    if (WeaponShopObjectHash.includes("weapon") || WeaponShopObjectHash.includes("parachute")) {

        name = name.replace(" ", "_");
        name = name.replace(/[^A-Za-z0-9-_]+/ig, '');

        if (name.length < 5) {
            CreateNotify("~r~Minimale Länge der Vorlage (ohne Sonderzeichen): 5 Zeichen!");
            return;
        }
        if (name.length > 20) {
            CreateNotify("~r~Maximale Länge der Vorlage: 20 Zeichen!");
            return;
        }

        if (WeaponShopObjectHash == "p_parachute_s") {
            WeaponShopObjectHash = "gadget_parachute"
        }
        mp.storage.data.weaponcrafting[WeaponShopType][name] = {};
        mp.storage.data.weaponcrafting[WeaponShopType][name].Components = WeaponShopObjectComponentsSelected;
        mp.storage.data.weaponcrafting[WeaponShopType][name].Amount = amount;
        mp.storage.data.weaponcrafting[WeaponShopType][name].Tint = WeaponShopObjectTint;
        mp.storage.data.weaponcrafting[WeaponShopType][name].Hash = WeaponShopObjectHash;
        mp.storage.data.weaponcrafting[WeaponShopType][name].Cost = cost;

        CreateNotify("~g~Vorlage " + name + " gespeichert.");

        mp.storage.flush();
    }
}

CommunicationManager.AddWebBrowserEvent("RequestAddTempWeaponToFav", RequestAddTempWeaponToFav, "WeaponShop");

function RequestRemoveWeaponFromFav(name) {
    //mp.storage.data.weaponcrafting[WeaponShopType][name] = null;
    delete mp.storage.data.weaponcrafting[WeaponShopType][name];
    CreateNotify("~r~Vorlage " + name + " entfernt.");
    mp.storage.flush();
}

CommunicationManager.AddWebBrowserEvent("RequestRemoveWeaponFromFav", RequestRemoveWeaponFromFav, "WeaponShop");


function CraftWeaponFromFavList(FavList) {
    var SelectedWeaponFavList = JSON.parse(FavList);
    for (var favName in SelectedWeaponFavList) {
        if (SelectedWeaponFavList[favName] == true) {
            if (mp.storage.data.weaponcrafting[WeaponShopType][favName] != null) {

                var FavComponents = mp.storage.data.weaponcrafting[WeaponShopType][favName].Components;
                var FavAmount = mp.storage.data.weaponcrafting[WeaponShopType][favName].Amount;
                var FavTint = mp.storage.data.weaponcrafting[WeaponShopType][favName].Tint;
                var FavHash = mp.storage.data.weaponcrafting[WeaponShopType][favName].Hash;

                CommunicationManager.TriggerServer("OnClientRequestWeaponBuy", FavHash, JSON.stringify(FavComponents), FavTint, FavAmount, WeaponShopType);
            }
        }
    }
    DestroyPlayerWeaponCreator();
}

CommunicationManager.AddWebBrowserEvent("CraftWeaponFromFavList", CraftWeaponFromFavList, "WeaponShop");

function CreateWeaponShopWeapon(Hash) {

    DestroyWeaponShopObject();

    var pos = mp.players.local.position;

    if (Hash.includes("weapon")) {

        WeaponShopObjectHash = Hash;
        var WeaponHash = mp.game.joaat(WeaponShopObjectHash);

        RequestWeaponAsset(WeaponHash, 1000, function () {

            var LuxuryComponentModel = 0;

            for (var i = 0; i < WeaponShopObjectComponents.length; i++) {
                if (IsLuxury(WeaponShopObjectComponents[i])) {
                    LuxuryComponentModel = mp.game.weapon.getWeaponComponentTypeModel(mp.game.joaat(WeaponShopObjectComponents[i]));
                }
            }

            RequestModel(LuxuryComponentModel, 1000, function () {

                WeaponShopObject = mp.game.weapon.createWeaponObject(WeaponHash, -1, pos.x, pos.y, pos.z + 2.0 + WeaponShopGlobalHigh, true, 1, LuxuryComponentModel);
                SetWeaponTint(WeaponShopObjectTint);
                mp.game.weapon.requestWeaponHighDetailModel(WeaponShopObject);

                for (var x1 = 0; x1 < WeaponShopObjectComponents.length; x1++) {
                    if (IsLuxury(WeaponShopObjectComponents[x1]) == false) {
                        var componentHash = mp.game.joaat(WeaponShopObjectComponents[x1]);
                        var componentModel = mp.game.weapon.getWeaponComponentTypeModel(componentHash);
                        if (mp.game.weapon.doesWeaponTakeWeaponComponent(mp.game.joaat(WeaponShopObjectHash), componentHash)) {
                            RequestModel(componentModel, 1000, function () {
                                if (WeaponShopObject != null) {
                                    mp.game.weapon.giveWeaponComponentToWeaponObject(WeaponShopObject, componentHash);
                                }
                            });
                        } else {
                            mp.gui.chat.push("ERROR : " + WeaponShopObjectComponents[x1]);
                        }
                    }
                }
            });
        });
    } else {
        if (GetItemIdToObjectName(Hash) != "") {
            WeaponShopObjectHash = GetItemIdToObjectName(Hash)
            WeaponShopMapObject = mp.objects.new(mp.game.joaat(WeaponShopObjectHash), new mp.Vector3(pos.x, pos.y, pos.z + 2.0 + WeaponShopGlobalHigh), {
                dimension: mp.players.local.dimension,
                rotation: new mp.Vector3(0, 0, 0)
            })
        }
    }
}

function CreateWeaponShopWeaponSpamProof() {
    WeaponShopFinalSelection = false;
    clearTimeout(WeaponShopSpamBlock);
    WeaponShopSpamBlock = setTimeout(function () {
        CreateWeaponShopWeapon(WeaponShopObjectHash);
    }, 750);
}

// creates a new weapon without any mods and colors
function RequestWeaponShopWeapon(Hash) {
    DestroyWeaponShopObject();
    WeaponShopObjectHash = Hash;
    WeaponShopObjectTint = 0;
    WeaponShopObjectComponents = [];
    WeaponShopObjectTempComponent = "";
    WeaponShopObjectComponentsSelected = {};
    CreateWeaponShopWeaponSpamProof();
}

CommunicationManager.AddWebBrowserEvent("CreateWeaponShopWeapon", RequestWeaponShopWeapon, "WeaponShop");

function AddWeaponComponent(HashName) {
    if (WeaponShopObject != null) {
        if (WeaponShopObjectHash.includes("weapon")) {
            // Lösche alte Temp Erweiterung und behalte die ausgewählten //
            var TempWeaponShopObjectComponents = WeaponShopObjectComponents;
            WeaponShopObjectComponents = [];
            for (var x1 = 0; x1 < TempWeaponShopObjectComponents.length; x1++) {
                if (TempWeaponShopObjectComponents[x1] != WeaponShopObjectTempComponent) {
                    WeaponShopObjectComponents.push(TempWeaponShopObjectComponents[x1]);
                }
            }

            if (WeaponShopObjectComponents.includes(HashName) == false) {
                WeaponShopObjectComponents.push(HashName);
                WeaponShopObjectTempComponent = HashName;
            }
            CreateWeaponShopWeaponSpamProof();
        }
    }
}

CommunicationManager.AddWebBrowserEvent("AddWeaponComponent", AddWeaponComponent, "WeaponShop");

function AddPermanentWeaponComponent(HashName, buytype) {
    if (WeaponShopObject != null) {
        if (WeaponShopObjectHash.includes("weapon")) {
            WeaponShopObjectTempComponent = "";
            if (WeaponShopObjectComponents.includes(HashName) == false) {
                WeaponShopObjectComponents.push(HashName);
            }
            WeaponShopObjectComponentsSelected[HashName] = buytype;
            CreateWeaponShopWeaponSpamProof();
        }
    }
}

CommunicationManager.AddWebBrowserEvent("AddPermanentWeaponComponent", AddPermanentWeaponComponent, "WeaponShop");

function RemovePermanentWeaponComponent(HashName) {
    if (WeaponShopObject != null) {
        if (WeaponShopObjectHash.includes("weapon")) {
            WeaponShopObjectTempComponent = HashName;
            if (WeaponShopObjectComponents.includes(HashName) == false) {
                WeaponShopObjectComponents.push(HashName);
            }
            WeaponShopObjectComponentsSelected[HashName] = "-";
            CreateWeaponShopWeaponSpamProof();
        }
    }
}

CommunicationManager.AddWebBrowserEvent("RemovePermanentWeaponComponent", RemovePermanentWeaponComponent, "WeaponShop");

// Setup
mp.game.entity.createModelHide(0.0, 0.0, 0.0, 10000.0, mp.game.joaat("prop_till_01"), true);
mp.game.streaming.requestNamedPtfxAsset("scr_ornate_heist");

let CashRobRenderEvent = null;
var CashRobs = {};

var CashJSON = '                [{"ID":0,"Pos":{"x":1696.63,"y":4924.53,"z":42.17},"Rot":325},{"ID":1,"Pos":{"x":-1819.09,"y":792.31,"z":138.2},"Rot":132},{"ID":2,"Pos":{"x":1164.2,"y":-322.89,"z":69.31},"Rot":100},{"ID":3,"Pos":{"x":1164.55,"y":-324.89,"z":69.31},"Rot":100},{"ID":4,"Pos":{"x":-706.63,"y":-913.68,"z":19.32},"Rot":90},{"ID":5,"Pos":{"x":-706.63,"y":-915.72,"z":19.32},"Rot":90},{"ID":6,"Pos":{"x":-47.19,"y":-1757.67,"z":29.53},"Rot":50},{"ID":7,"Pos":{"x":-48.507,"y":-1759.22,"z":29.53},"Rot":50},{"ID":8,"Pos":{"x":1728.29,"y":6415.03,"z":35.15},"Rot":243},{"ID":9,"Pos":{"x":1729.32,"y":6417.12,"z":35.15},"Rot":243},{"ID":10,"Pos":{"x":1960.48,"y":3740.26,"z":32.45},"Rot":300},{"ID":11,"Pos":{"x":1959.32,"y":3742.28,"z":32.45},"Rot":300},{"ID":12,"Pos":{"x":2678.25,"y":3279.83,"z":55.35},"Rot":330},{"ID":13,"Pos":{"x":2676.21,"y":3280.96,"z":55.35},"Rot":330},{"ID":14,"Pos":{"x":548.59,"y":2671.25,"z":42.27},"Rot":97},{"ID":15,"Pos":{"x":548.9,"y":2668.94,"z":42.27},"Rot":97},{"ID":16,"Pos":{"x":-3242.24,"y":1000.45,"z":12.94},"Rot":355},{"ID":17,"Pos":{"x":-3244.57,"y":1000.65,"z":12.94},"Rot":355},{"ID":18,"Pos":{"x":-3039.13,"y":584.97,"z":8.02},"Rot":17},{"ID":19,"Pos":{"x":-3041.35,"y":584.26,"z":8.02},"Rot":17},{"ID":20,"Pos":{"x":2557.2,"y":381.29,"z":108.73},"Rot":357},{"ID":21,"Pos":{"x":2554.87,"y":381.38,"z":108.73},"Rot":357},{"ID":22,"Pos":{"x":373.02,"y":326.32,"z":103.68},"Rot":255},{"ID":23,"Pos":{"x":373.59,"y":328.58,"z":103.68},"Rot":255},{"ID":24,"Pos":{"x":24.94,"y":-1347.28,"z":29.61},"Rot":270},{"ID":25,"Pos":{"x":24.94,"y":-1344.95,"z":29.61},"Rot":270},{"ID":26,"Pos":{"x":1165.95,"y":2710.2,"z":38.26},"Rot":179},{"ID":27,"Pos":{"x":-2967.02,"y":390.9,"z":15.14},"Rot":85},{"ID":28,"Pos":{"x":1134.81,"y":-982.36,"z":46.52},"Rot":276},{"ID":29,"Pos":{"x":-1486.67,"y":-378.46,"z":40.26},"Rot":133},{"ID":30,"Pos":{"x":-1222.33,"y":-907.82,"z":12.43},"Rot":32},{"ID":31,"Pos":{"x":808.86,"y":-2158.5,"z":29.73},"Rot":360},{"ID":32,"Pos":{"x":845.61,"y":-1030.93,"z":28.31},"Rot":90},{"ID":33,"Pos":{"x":841.05,"y":-1034.76,"z":28.31},"Rot":360},{"ID":34,"Pos":{"x":-665.48,"y":-937.93,"z":21.94},"Rot":270},{"ID":35,"Pos":{"x":-660.92,"y":-934.1,"z":21.94},"Rot":180},{"ID":36,"Pos":{"x":-330.8,"y":6079.61,"z":31.57},"Rot":315},{"ID":37,"Pos":{"x":-330.29,"y":6085.54,"z":31.57},"Rot":225},{"ID":38,"Pos":{"x":-3170.8,"y":1083.7,"z":20.95},"Rot":336},{"ID":39,"Pos":{"x":-3172.51,"y":1089.41,"z":20.95},"Rot":246},{"ID":40,"Pos":{"x":1694.87,"y":4822.11,"z":42.12},"Rot":97},{"ID":41,"Pos":{"x":422.9,"y":-810.9,"z":29.55},"Rot":360},{"ID":42,"Pos":{"x":426.05,"y":-810.93,"z":29.55},"Rot":360},{"ID":43,"Pos":{"x":426.43,"y":-807.06,"z":29.55},"Rot":90},{"ID":44,"Pos":{"x":-1096.17,"y":2711.69,"z":19.17},"Rot":131},{"ID":45,"Pos":{"x":-1098.27,"y":2714.04,"z":19.17},"Rot":131},{"ID":46,"Pos":{"x":-1101.41,"y":2711.75,"z":19.17},"Rot":221},{"ID":47,"Pos":{"x":1201.35,"y":2707.55,"z":38.28},"Rot":90},{"ID":48,"Pos":{"x":1201.35,"y":2710.7,"z":38.28},"Rot":90},{"ID":49,"Pos":{"x":1197.49,"y":2711.08,"z":38.28},"Rot":180},{"ID":50,"Pos":{"x":-817.0,"y":-1073.52,"z":11.39},"Rot":120},{"ID":51,"Pos":{"x":-818.58,"y":-1070.79,"z":11.39},"Rot":120},{"ID":52,"Pos":{"x":-822.12,"y":-1072.39,"z":11.39},"Rot":210},{"ID":53,"Pos":{"x":1.71,"y":6508.88,"z":31.94},"Rot":312},{"ID":54,"Pos":{"x":613.62,"y":2761.02,"z":42.15},"Rot":274},{"ID":55,"Pos":{"x":613.5,"y":2762.75,"z":42.15},"Rot":274},{"ID":56,"Pos":{"x":613.37,"y":2764.55,"z":42.15},"Rot":274},{"ID":57,"Pos":{"x":125.83,"y":-225.75,"z":54.62},"Rot":70},{"ID":58,"Pos":{"x":126.45,"y":-224.06,"z":54.62},"Rot":70},{"ID":59,"Pos":{"x":127.04,"y":-222.43,"z":54.62},"Rot":70},{"ID":60,"Pos":{"x":-3169.21,"y":1045.0,"z":20.93},"Rot":66},{"ID":61,"Pos":{"x":-3169.91,"y":1043.41,"z":20.93},"Rot":66},{"ID":62,"Pos":{"x":-3170.63,"y":1041.76,"z":20.93},"Rot":66},{"ID":63,"Pos":{"x":134.05,"y":-1708.19,"z":29.39},"Rot":140},{"ID":64,"Pos":{"x":-1284.74,"y":-1115.08,"z":7.08},"Rot":90},{"ID":65,"Pos":{"x":1930.82,"y":3727.52,"z":32.94},"Rot":210},{"ID":66,"Pos":{"x":1211.05,"y":-470.21,"z":66.3},"Rot":75},{"ID":67,"Pos":{"x":-30.32,"y":-151.3,"z":57.17},"Rot":340},{"ID":68,"Pos":{"x":-278.11,"y":6231.05,"z":31.79},"Rot":45},{"ID":69,"Pos":{"x":320.56,"y":181.45,"z":103.7},"Rot":250},{"ID":70,"Pos":{"x":-1152.2,"y":-1424.76,"z":5.07},"Rot":125},{"ID":71,"Pos":{"x":1324.57,"y":-1651.12,"z":52.39},"Rot":129},{"ID":72,"Pos":{"x":-3170.95,"y":1073.82,"z":20.94},"Rot":336},{"ID":73,"Pos":{"x":1861.44,"y":3748.55,"z":33.15},"Rot":35},{"ID":74,"Pos":{"x":-290.98,"y":6199.91,"z":31.6},"Rot":229},{"ID":75,"Pos":{"x":-1449.9779,"y":-238.51578,"z":49.85081},"Rot":48},{"ID":76,"Pos":{"x":-1450.5079,"y":-239.10576,"z":49.85081},"Rot":48},{"ID":77,"Pos":{"x":-164.18282,"y":-302.15643,"z":39.77175},"Rot":-101},{"ID":78,"Pos":{"x":-163.91675,"y":-301.35638,"z":39.77175},"Rot":-101}]                  '
var CashJSONObject = JSON.parse(CashJSON);

function CreateCash(id, pos, rz) {
    let cash = mp.objects.new(mp.game.joaat("prop_till_01"), pos, {
        dimension: 0,
        rotation: new mp.Vector3(0, 0, rz)
    })
    let robshape = mp.colshapes.newSphere(pos.x, pos.y, pos.z, 1.2, 0);
    robshape.CashRob = cash;
    cash.handle.VioID = id;
    cash.VioID = id;
    CashRobs[id] = cash;
}

for (var x1 = 0; x1 < CashJSONObject.length; x1++) {
    CreateCash(CashJSONObject[x1]["ID"], new mp.Vector3(CashJSONObject[x1]["Pos"]["x"], CashJSONObject[x1]["Pos"]["y"], CashJSONObject[x1]["Pos"]["z"]), CashJSONObject[x1]["Rot"]);
}

function RequestServerMoney(id, tick, maxtick) {
    tick = tick + 1;

    var PointToDrop = mp.game.invokeVector3("0x6E16BC2503FF1FF0", CashRobs[id].position.x, CashRobs[id].position.y, CashRobs[id].position.z, 0.85, 1.35)
    //var PointToDrop = new mp.Vector3(CashRobs[id].position.x, CashRobs[id].position.y, CashRobs[id].position.z + 0.5);

    CommunicationManager.TriggerServer("OnClientRequestRobberAction", id, PointToDrop.x, PointToDrop.y, PointToDrop.z);
    if (tick < maxtick) {
        setTimeout(function () {
            RequestServerMoney(id, tick, maxtick);
        }, 6000);
    }
}

function InitCashRob(id, robtype) {

    let isPlayerAlone = true;
    mp.players.forEachInStreamRange(function (target) {
        if (target != mp.players.local) {
            let lPos = mp.players.local.position;
            let dist = mp.game.system.vdist2(lPos.x, lPos.y, lPos.z, target.position.x, target.position.y, target.position.z);
            if (dist < 500) {
                isPlayerAlone = false;
            }
        }
    })
    CommunicationManager.TriggerServer("OnClientRequestRobberStart", robtype, id, isPlayerAlone);
}

// Functions
function DestroyCashRobRender() {
    if (CashRobRenderEvent) {
        CashRobRenderEvent.destroy();
        CashRobRenderEvent = null;
    }
}

mp.events.add("playerEnterColshape", function (shape) {
    if (shape.CashRob != null) {
        DestroyCashRobRender();
        CommunicationManager.TriggerServer("OnClientRequestCashRobInformation", shape.CashRob.VioID);
        CashRobRenderEvent = new mp.Event("render", () => {
            if (mp.game.controls.isControlJustPressed(0, 51)) {
                DestroyCashRobRender();
                InitCashRob(shape.CashRob.VioID, "hand");
            }
        });
    }
});
mp.events.add("playerExitColshape", function (shape) {
    if (shape.CashRob != null) {
        DestroyCashRobRender();
    }
});

CommunicationManager.AddServerEvent("StartPlayerRobState", (id, maxtick) => {
    if (CashRobs[id] != null) {
        RequestServerMoney(id, 0, maxtick)
        mp.game.graphics.setPtfxAssetNextCall("scr_ornate_heist");
        mp.game.graphics.startParticleFxNonLoopedOnEntity("scr_heist_ornate_banknotes", CashRobs[id].handle, 0.0, -0.25, 0.1, 0.0, 0.0, 0.0, 1.0, false, false, false);
    }
});

mp.events.add("playerWeaponShot", (targetPosition, targetEntity) => {
    if (targetEntity) {
        return;
    }

    if (mp.players.local.isInAnyVehicle(true)) {
        return;
    }

    let hitEntity = null;
    if (mp.game.invoke("0x8D4D46230B2C353A") === 4 && !mp.game.player.isFreeAiming()) {
        const raycast = mp.raycasting.testPointToPoint(mp.game.invoke("0x14D6F5678D8F1B37"), targetPosition, mp.players.local, [1, 16]);
        if (raycast) {
            hitEntity = raycast.entity;
        }
    } else {
        hitEntity = mp.game.player.getEntityIsFreeAimingAt();
    }

    if (!hitEntity || !mp.objects.exists(hitEntity) || hitEntity.model !== mp.game.joaat("prop_till_01")) {
        return;
    }

    InitCashRob(hitEntity.VioID, "shot")
});

var ClientCashRobNPCClothes = {};
var ClientCashRobNPCColshapes = {};

CommunicationManager.AddServerEvent("UpdateCashRobAreaNPCOutfits", (skin_json) => {
    ClientCashRobNPCClothes = JSON.parse(skin_json);
});

CommunicationManager.AddServerEvent("UpdateCashRobAreaNPCOwner", (area_id, owner_id) => {
    if (ClientCashRobNPCColshapes[area_id] != null) {

        //VioRageManager.SendChatMessage("UpdateCashRobAreaNPCOwner : " + area_id + " -> " + owner_id);

        ClientCashRobNPCColshapes[area_id].GangID = owner_id;
    }
});

CommunicationManager.AddServerEvent("CreateCashRobAreaNPCs", (npc_json, skin_json) => {
    var ClientCashRobNPCAreas = JSON.parse(npc_json);
    ClientCashRobNPCClothes = JSON.parse(skin_json);

    //VioRageManager.SendChatMessage("Empfange ShopNPCs");

    for (var key in ClientCashRobNPCAreas) {

        //VioRageManager.SendChatMessage("Erstelle ShopNPC : " + key);

        var streamcolshape = mp.colshapes.newSphere(ClientCashRobNPCAreas[key].Pos.x, ClientCashRobNPCAreas[key].Pos.y, ClientCashRobNPCAreas[key].Pos.z, 35);
        streamcolshape.CashRobPedID = Number(key);
        streamcolshape.GangID = ClientCashRobNPCAreas[key].GroupID;
        streamcolshape.CashRobPed = null;
        streamcolshape.CashRobPosition = ClientCashRobNPCAreas[key].Pos;
        streamcolshape.CashRobRotation = ClientCashRobNPCAreas[key].Rot;
        ClientCashRobNPCColshapes[key] = streamcolshape;
    }
});

mp.events.add("playerEnterColshape", function (shape) {
    if (shape.CashRobPedID != null && shape.CashRobPed == null) {

        //VioRageManager.SendChatMessage("playerEnterColshape");

        var id = shape.CashRobPedID;
        let ped = VioRageManager.CreatePed(mp.game.joaat("mp_m_freemode_01"), new mp.Vector3(shape.CashRobPosition.x, shape.CashRobPosition.y, shape.CashRobPosition.z), shape.CashRobRotation, 0, true);
        shape.CashRobPed = ped;
        IsRageMpPedReady(ped, 5000, function (isreadyped) {
            if (shape.CashRobPed != null && isreadyped) {
                var GroupID = shape.GangID;
                if (ClientCashRobNPCClothes[GroupID] != null) {
                    for (var xi = 0; xi < ClientCashRobNPCClothes[GroupID].Male.Datas.length; xi++) {
                        shape.CashRobPed.setComponentVariation(ClientCashRobNPCClothes[GroupID].Male.Datas[xi].slot, ClientCashRobNPCClothes[GroupID].Male.Datas[xi].drawable, ClientCashRobNPCClothes[GroupID].Male.Datas[xi].texture, 0);
                    }
                }
                shape.CashRobPed.setComponentVariation(2, 2, 1, 0);
                shape.CashRobPed.setHairColor(1, 0);
            }else{
                if (shape.CashRobPed != null) {
                    shape.CashRobPed.destroy();
                    shape.CashRobPed = null;
                }else{
                    if (ped != null) {
                        if (ped.handle !== 0) {
                            ped.destroy();
                        }
                    }
                }
            }
        });
    }
});

mp.events.add("playerExitColshape", function (shape) {
    if (shape.CashRobPedID != null) {
        if (shape.CashRobPed) {
            //VioRageManager.SendChatMessage("playerExitColshape");
            shape.CashRobPed.destroy();
            shape.CashRobPed = null;
        }
    }
});

var MiniGameCallback = "";
var MiniGameDisableToogleHud = false;

///// SERVER /////

CommunicationManager.AddServerEvent("StartPlayerMiniGame", (minigame, callbackfunction, m1) => {
    if (Webwindow["Minigame"] == null) {
        MiniGameCallback = callbackfunction;
        Webwindow["Minigame"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/minigames/" + minigame + "/" + minigame + ".html", true);
        Webwindow["Minigame"].start('StartMinigame', m1);
    }
});
CommunicationManager.AddServerEvent("UpdatePlayerMiniGame", (m1, disablehud) => {
    if (Webwindow["Minigame"] != null) {
        Webwindow["Minigame"].call('UpdateMinigame', m1);
        if(disablehud == true){
            MiniGameDisableToogleHud = true;
            ToogleHudStatus(false, false);
        }
    }
});

CommunicationManager.AddServerEvent("ClosePlayerMinigame", () => {
    if (Webwindow["Minigame"] != null) {
        Webwindow["Minigame"].destroy();
        Webwindow["Minigame"] = null;
        MiniGameCallback = "";
    }
    if(MiniGameDisableToogleHud == true){
        MiniGameDisableToogleHud = false;
        ToogleHudStatus(true, true);
    }
});

///// CEF /////

CommunicationManager.AddWebBrowserEvent("OnClientCloseMinigame", () => {
    if (Webwindow["Minigame"] != null) {
        Webwindow["Minigame"].destroy();
        Webwindow["Minigame"] = null;
        MiniGameCallback = "";
    }
    if(MiniGameDisableToogleHud == true){
        MiniGameDisableToogleHud = false;
        ToogleHudStatus(true, true);
    }
}, "Minigame");

CommunicationManager.AddWebBrowserEvent("OnClientFinishMinigame", () => {
    if (Webwindow["Minigame"] != null) {
        Webwindow["Minigame"].destroy();
        Webwindow["Minigame"] = null;
        if(MiniGameCallback != ""){
            CommunicationManager.TriggerServer(MiniGameCallback);
            MiniGameCallback = "";
        }
    }
    if(MiniGameDisableToogleHud == true){
        MiniGameDisableToogleHud = false;
        ToogleHudStatus(true, true);
    }
}, "Minigame");

CommunicationManager.AddWebBrowserEvent("OnClientToggleMinigame", () => {
    if (Webwindow["Minigame"] != null) {
        if(MiniGameCallback != ""){
            CommunicationManager.TriggerServer(MiniGameCallback);
            MiniGameCallback = "";   
        }
    }
}, "Minigame");

CommunicationManager.AddServerEvent("OnClientCompanyTankerLoadOpen", (c_type, tank_size, prices) => {
    if (Webwindow["CompanyTankerLoad"] == null) {
        Webwindow["CompanyTankerLoad"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/enterprise_truck/enterprise_truck.html", true);
        Webwindow["CompanyTankerLoad"].start('InitCompanyTanker', c_type, tank_size, prices);
    }
})

CommunicationManager.AddWebBrowserEvent("OnClientCompanyTankerLoadClose", () => {
    Webwindow["CompanyTankerLoad"].destroy();
    Webwindow["CompanyTankerLoad"] = null;
}, "CompanyTankerLoad");

CommunicationManager.AddWebBrowserEvent("OnClientRequestLoadCompanyVehicle", (c_type, c_items) => {
    Webwindow["CompanyTankerLoad"].destroy();
    Webwindow["CompanyTankerLoad"] = null;
    CommunicationManager.TriggerServer("OnClientRequestLoadCompanyVehicle", c_type, c_items);
}, "CompanyTankerLoad");


CommunicationManager.AddServerEvent("OpenGasstationManager", (character_id, company_infos, company_members, global_settings, global_extras, company_log) => {
    if (Webwindow["CompanyManager"] == null) {
        Webwindow["CompanyManager"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/enterprises/enterprises.html", true);
        Webwindow["CompanyManager"].start('InitCompanyManager', character_id, company_infos, company_members, global_settings, global_extras, company_log);
    }
});

CommunicationManager.AddWebBrowserEvent("OnClientCompanyManagerClose", () => {
    Webwindow["CompanyManager"].destroy();
    Webwindow["CompanyManager"] = null;
}, "CompanyManager");

CommunicationManager.AddWebBrowserEvent("OnClientRequestChangeCompanyDetails", (company_id, key, arg, arg1, arg2, arg3) => {
    
    if (Webwindow["CompanyManager"].isAtStartPosition == false) {
        return;
    }
    
    if (arg == null) {
        arg = "";
    }
    if (arg1 == null) {
        arg1 = "";
    }
    if (arg2 == null) {
        arg2 = "";
    }
    if (arg3 == null) {
        arg3 = "";
    }
    if (key == "LEAVE" || key == "DELETE" || key == "BUY_EXTRAS" || key == "ORDER_START") {
        Webwindow["CompanyManager"].destroy();
        Webwindow["CompanyManager"] = null;
    }
    CommunicationManager.TriggerServer("OnClientRequestChangeCompanyDetails", company_id, key, arg, arg1, arg2, arg3);
}, "CompanyManager");

CommunicationManager.AddServerEvent("OnClientOpenAdventcalendar", (ad_table, ad_timestamp) => {
    if (Webwindow["Adventcalendar"] != null) {
        Webwindow["Adventcalendar"].destroy();
        Webwindow["Adventcalendar"] = null;
    }
    if (isPlayerCuffed || disableAllControls) {
        return;
    }
    if (mp.gui.cursor.visible == true) {
        return;
    }
    if (mp.players.local.isDead() == true) {
        return;
    }
    Webwindow["Adventcalendar"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/advent_calendar/advent_calendar.html", true);
    Webwindow["Adventcalendar"].start("ClientOpenAdventcalendar", ad_table, ad_timestamp);
});

CommunicationManager.AddWebBrowserEvent('OnClientClosedAdventcalendar', () => {
    if (Webwindow["Adventcalendar"] != null) {
        Webwindow["Adventcalendar"].destroy();
        Webwindow["Adventcalendar"] = null;
    }
});


CommunicationManager.AddWebBrowserEvent('OnClientRequestOpenAdventcalenderDoor', (ch_day) => {
    if (Webwindow["Adventcalendar"] != null) {
        CommunicationManager.TriggerServer("OnClientRequestOpenAdventcalenderDoor", ch_day);
    }
});

CommunicationManager.AddServerEvent("OnClientOpenChristmasLotto", (ch_title, ch_type, ch_index, ch_amount, ch_name, ch_inventory, ch_in, ch_total) => {
    if (Webwindow["ChristmasLotto"] != null) {
        Webwindow["ChristmasLotto"].call("ClientOpenChristmasLotto", ch_title, ch_type, ch_index, ch_amount, ch_name, ch_inventory, ch_in, ch_total);
    } else {
        if (isPlayerCuffed || disableAllControls) {
            return;
        }
        if (mp.gui.cursor.visible == true) {
            return;
        }
        if (mp.players.local.isDead() == true) {
            return;
        }
        Webwindow["ChristmasLotto"] = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/special_tickets/special_tickets.html", true);
        Webwindow["ChristmasLotto"].start("ClientOpenChristmasLotto", ch_title, ch_type, ch_index, ch_amount, ch_name, ch_inventory, ch_in, ch_total);
    }
});

CommunicationManager.AddWebBrowserEvent('OnClientClosedChristmasLotto', () => {
    if (Webwindow["ChristmasLotto"] != null) {
        Webwindow["ChristmasLotto"].destroy();
        Webwindow["ChristmasLotto"] = null;
    }
});

CommunicationManager.AddWebBrowserEvent('OnClientSubmitChristmasLotto', (ch_amount) => {
    if (Webwindow["ChristmasLotto"] != null) {
        CommunicationManager.TriggerServer("OnClientSubmitChristmasLotto", ch_amount);
    }
});

function getRndInteger(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

function StartFireworkNextStep(start_position, total_fire_amount, max_fire_amount) {
    setTimeout(function () {
        total_fire_amount++;
        let lPos = mp.players.local.position;
        let dist = mp.game.system.vdist2(lPos.x, lPos.y, lPos.z, start_position.x, start_position.y, start_position.z);
        if (dist < 100000) {
            mp.game.gameplay.shootSingleBulletBetweenCoords(start_position.x, start_position.y, start_position.z + 0.85, start_position.x + getRndInteger(-4, 4), start_position.y + getRndInteger(-4, 4), start_position.z + 10, 0, false, mp.game.joaat("weapon_firework") >> 0, 0, true, true, 75.0);
            mp.game.gameplay.shootSingleBulletBetweenCoords(start_position.x, start_position.y, start_position.z + 0.85, start_position.x + getRndInteger(-4, 4), start_position.y + getRndInteger(-4, 4), start_position.z + 10, 0, false, mp.game.joaat("weapon_firework") >> 0, 0, true, true, 75.0);
        }
        if(total_fire_amount < max_fire_amount){
            StartFireworkNextStep(start_position, total_fire_amount, max_fire_amount);
        }
    }, getRndInteger(350, 3000));
}

mp.events.add("StartFireworkForClient", (start_position, max_fire_amount) => {
    TotalFireAmounts = 0;
    var WeaponHash = mp.game.joaat("weapon_firework");
    RequestWeaponAsset(WeaponHash, 2000, function () {
        StartFireworkNextStep(start_position, 0, max_fire_amount);
    });
})

var TrashVehicle = null;
var TrashVehicleCoWorker = "";
var TrashBlips = [];

CommunicationManager.AddServerEvent("StartPlayerTrashJob", (tveh, tname) => {
    TrashVehicle = tveh;
    TrashVehicleCoWorker = tname;
})

CommunicationManager.AddServerEvent("StopPlayerTrashJob", () => {
    TrashVehicle = null;
    TrashVehicleCoWorker = "";

    if (TrashBlips["TrashVehicle"] != null) {
        TrashBlips["TrashVehicle"].destroy();
        TrashBlips["TrashVehicle"] = null;
    }
    if (TrashBlips["TrashVehicleCoWorker"] != null) {
        TrashBlips["TrashVehicleCoWorker"].destroy();
        TrashBlips["TrashVehicleCoWorker"] = null;
    }
})

mp.events.add("render", () => {
    if (TrashVehicleCoWorker != "") {
        if (TrashBlips["TrashVehicleCoWorker"] == null) {
            TrashBlips["TrashVehicleCoWorker"] = mp.blips.new(480, mp.players.local.position, {
                color: 47,
                scale: 0.9
            })
        }
        if (TrashBlips["TrashVehicle"] == null) {
            TrashBlips["TrashVehicle"] = mp.blips.new(318, mp.players.local.position, {
                color: 47,
                scale: 0.9
            })
        }
        mp.players.forEachInStreamRange(function (player) {
            if (player != null) {
                if (player.position != null) {
                    if (player.name == TrashVehicleCoWorker && TrashBlips["TrashVehicleCoWorker"] != null) {
                        let t_dist = mp.game.system.vdist2(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, player.position.x, player.position.y, player.position.z);
                        let c_dist = 1 / 50000 * t_dist
                        let alpha = lerp(255, 0, c_dist)
                        if (alpha > 255) {
                            alpha = 255;
                        } else if (alpha < 0) {
                            alpha = 0;
                        }
                        TrashBlips["TrashVehicleCoWorker"].setAlpha(alpha);
                        TrashBlips["TrashVehicleCoWorker"].setCoords(player.position);
                    }
                }
            }
        })
        if (mp.players.local.getVariable("TRASH_CAR") != null) {
            var tempveh = mp.players.local.getVariable("TRASH_CAR")
            if (TrashBlips["TrashVehicle"] != null) {
                let t_dist = mp.game.system.vdist2(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, tempveh.position.x, tempveh.position.y, tempveh.position.z);
                let c_dist = 1 / 8000 * t_dist
                let alpha = lerp(255, 0, c_dist)
                if (alpha > 255) {
                    alpha = 255;
                } else if (alpha < 0) {
                    alpha = 0;
                }
                TrashBlips["TrashVehicle"].setAlpha(alpha);
                TrashBlips["TrashVehicle"].setCoords(tempveh.position);
            }
        }
    }
})

class Compass {
    static camera = mp.cameras.new("gameplay");
    static directionData = {
        0: "N",
        45: "NO",
        90: "O",
        135: "SO",
        180: "S",
        225: "SW",
        270: "W",
        315: "NW",
    };
    static get screenSize() {
        return (parseInt(mp.storage.data.CompassWidth) / 100) || .35;
    }
    static get screenStartX() {
        return .5 - (Compass.screenSize / 2);
    }
    static get screenEndX() {
        return  .5 + (Compass.screenSize / 2);
    }
    static get screenY() {
        if (IsPlayerInFightClub) {
            return .1;
        }
        return .06;
    }
    static get hidden() {
        if (!mp.storage.data.Compass) return true;
        if (!login) return true;
        if (!hudStatus) return true;
        if (helicam) return true;

        return false;
    }
    static get viewSize() {
        return Math.round(parseInt(mp.storage.data.CompassViewRange) / 10) * 10 || 120;
    }

    static init() {
        mp.events.add("render", Compass.render);
    }

    static render() {
        if (Compass.hidden) return;

        const direction = Compass.camera.getDirection();
        const heading = Math.round(((Math.atan2(direction.y, direction.x * -1) * (180 / Math.PI)) - 90));
        const start = heading - (Compass.viewSize / 2);
        const stop = heading + (Compass.viewSize / 2);
        const localPos = mp.players.local.position;
        let counter = 1;
        for (let i = start; i <= stop; i += 1) {
            let degree = i;
            if (i < 0) {
                degree = 360 + i;
            } else if (i >= 360) {
                degree = i - 360;
            }
            const positionX = Compass.screenStartX + (((Compass.screenEndX - Compass.screenStartX) / Compass.viewSize) * counter);

            if (Compass.directionData.hasOwnProperty(degree)) {
                if (Compass.directionData[degree].length === 1) {
                    VioRageManager.drawRect(
                        positionX,
                        Compass.screenY,
                        .001,
                        .015,
                        255, 255, 255, 255
                    );
                } else {
                    VioRageManager.drawRect(
                        positionX,
                        Compass.screenY,
                        .001,
                        .01,
                        255, 255, 255, 255
                    );
                }

                if (Compass.directionData[degree].length === 1) {
                    mp.game.graphics.drawText(Compass.directionData[degree], [positionX, Compass.screenY + .025], {
                        font: 4,
                        color: [255, 255, 255, 255],
                        scale: [.35, .35],
                        outline: false,
                        centre: true
                    });
                    mp.game.graphics.drawText(degree.toString(), [positionX, Compass.screenY + .005], {
                        font: 4,
                        color: [255, 255, 255, 255],
                        scale: [.3, .3],
                        outline: false,
                        centre: true
                    });
                } else {
                    mp.game.graphics.drawText(Compass.directionData[degree], [positionX, Compass.screenY + .025], {
                        font: 4,
                        color: [255, 255, 255, 255],
                        scale: [.3, .3],
                        outline: false,
                        centre: true
                    });
                    mp.game.graphics.drawText(degree.toString(), [positionX, Compass.screenY + .005], {
                        font: 4,
                        color: [255, 255, 255, 255],
                        scale: [.3, .3],
                        outline: false,
                        centre: true
                    });
                }
            } else if (degree % 5 === 0) {
                VioRageManager.drawRect(
                    positionX,
                    Compass.screenY,
                    .001,
                    .005,
                    255, 255, 255, 255
                );
                if (degree % 10 === 0) {
                    mp.game.graphics.drawText(degree.toString(), [positionX, Compass.screenY + .005], {
                        font: 4,
                        color: [255, 255, 255, 255],
                        scale: [.3, .3],
                        outline: false,
                        centre: true
                    });
                }
            }
            counter += 1;
        }


        // wandelt Vector3Mp Positionen in Kompasspositionen um
        function getCompassPosition(position) {
            const pos1 = new VioVector(position.x, position.y, position.z);
            const pos2 = new VioVector(localPos.x, localPos.y, localPos.z);
            const posDirection = pos1.subtract(pos2).normalize();
            const positionHeading = Utility.getRealRotation(Math.round((Math.atan2(posDirection.y, posDirection.x * -1) * (180 / Math.PI)) - 90));
            const positionX1 = Compass.screenStartX + (((Compass.screenEndX - Compass.screenStartX) / Compass.viewSize) * (positionHeading - start));
            const positionX2 = Compass.screenStartX + (((Compass.screenEndX - Compass.screenStartX) / Compass.viewSize) * (positionHeading - Utility.getRealRotation(start)));
            let positionX = 0;
            if (positionX1 >= Compass.screenStartX && positionX1 <= Compass.screenEndX) {
                positionX = positionX1;
            } else {
                positionX = positionX2;
            }
            return {positionX, isVisible: positionX >= Compass.screenStartX && positionX <= Compass.screenEndX};
        }

        // Anzeige für markierte Ziel
        if (PositionsLocatedPosition) {
            const {positionX, isVisible} = getCompassPosition(PositionsLocatedPosition);
            const dist = VioRageManager.vdist(PositionsLocatedPosition, mp.players.local.position);
            if (isVisible) {
                VioRageManager.drawRect(
                    positionX,
                    Compass.screenY,
                    .001,
                    .015,
                    252, 186, 3, 255
                );
                mp.game.graphics.drawText("Ziel", [positionX, Compass.screenY + .005], {
                    font: 4,
                    color: [252, 186, 3, 255],
                    scale: [.35, .35],
                    outline: false,
                    centre: true
                });
                const distString = dist > 1000 ? `${Math.round(dist / 1000)}km` : `${Math.round(dist)}m`;
                mp.game.graphics.drawText(distString, [positionX, Compass.screenY + .023], {
                    font: 4,
                    color: [252, 186, 3, 255],
                    scale: [.3, .3],
                    outline: false,
                    centre: true
                });
            }
        }

        if (SOSAutoFollow && !!temp_sos_blip) {
            const {positionX, isVisible} = getCompassPosition(temp_sos_blip.getCoords());
            const dist = VioRageManager.vdist(temp_sos_blip.getCoords(), mp.players.local.position);
            if (isVisible) {
                VioRageManager.drawRect(
                    positionX,
                    Compass.screenY,
                    .001,
                    .015,
                    235, 70, 52, 255
                );
                mp.game.graphics.drawText("SOS", [positionX, Compass.screenY + .005], {
                    font: 4,
                    color: [235, 70, 52, 255],
                    scale: [.35, .35],
                    outline: false,
                    centre: true
                });
                const distString = dist > 1000 ? `${Math.round(dist / 1000 * 10) / 10}km` : `${Math.round(dist)}m`;
                mp.game.graphics.drawText(distString, [positionX, Compass.screenY + .023], {
                    font: 4,
                    color: [235, 70, 52, 255],
                    scale: [.3, .3],
                    outline: false,
                    centre: true
                });
            }
        }
    }
}
Compass.init();

let OpenCraftingStorageId;

CommunicationManager.AddServerEvent("SentPlayerCraftingStorage", (craftingStorage, inventory, recipes) => {
 
    craftingStorage = JSON.parse(craftingStorage);
    recipes = JSON.parse(recipes);
    InventoryItems = JSON.parse(inventory);
    
    OpenCraftingStorageId = craftingStorage.ID;

    const serverTimestamp = getTimestampFromServer();
 
    if(Webwindow["Crafting"] == null){
        Webwindow["Crafting"] = new CEFBrowser(`https://vio-v.com/gameplay/CEF/${CEF_Master_Link}/html/crafting/crafting.html`, true);
        Webwindow["Crafting"].start("setData", lang_de.items, recipes, craftingStorage.Recipe, serverTimestamp, craftingStorage.LastUpdate, InventoryItems, craftingStorage.Items,  craftingStorage.MaxSize);
    }
    else
    {
        Webwindow["Crafting"].call("setData", lang_de.items, recipes, craftingStorage.Recipe, serverTimestamp, craftingStorage.LastUpdate, InventoryItems, craftingStorage.Items,  craftingStorage.MaxSize);
    }
});

CommunicationManager.AddWebBrowserEvent("OnCraftingWindowRequest", (request, ...args) => {
 
    VioRageManager.ConsoleLog("info", `OnCraftingWindowRequest ID=${OpenCraftingStorageId} : ${request} ${JSON.stringify(args)}`);
 
    switch (request) {
        case "close":
            if(Webwindow["Crafting"] != null){
                Webwindow["Crafting"].destroy();
                Webwindow["Crafting"] = null;
            }
            break;
        case "moveItem":
            // itemId, amount, origin, target
            if (args.length !== 4) return;
            VioRageManager.ConsoleLog("error", `moveItem ${args[0]} x ${args[1]} from ${args[2]} to ${args[3]}`);
            if (args[3] == "inv_own") {
                CommunicationManager.TriggerServer("OnClientRequestCraftingStorageRemove", OpenCraftingStorageId, args[0], args[1]);
            } else {
                CommunicationManager.TriggerServer("OnClientRequestCraftingStorageAdd", OpenCraftingStorageId, args[0], args[1]);
            }
            break;
        case "changeRecipeIndex":
            // index
            if (args.length !== 1) return;
            VioRageManager.ConsoleLog("error", `changeRecipeIndex => ${args[0]}`);
            CommunicationManager.TriggerServer("OnClientRequestCraftingStorageChangeRecipe", OpenCraftingStorageId, args[0]);
            break;
    }
}, "Crafting");

class Seats {
    static chairObject;
    static usingChair = false;
    static lastPosition;

    /**
     * procedure to initialize all values
     */
    static init() {
        SeatData.init();

        mp.events.add("render", Seats.render);

        // KeybindManager.registerVioKeyFunction("Interaktion", false, Seats.trySitDown);
        KeybindManager.registerVioKeyFunction("Animation stoppen", false, Seats.standUp);
    }

    static canSitDown() {
        if (IsPlayerInFightClub) return false;
        if (IsInHalloweenHouse) return false;
        if (HalloweenHouseWaiting) return false;
        if (ObjectAttachedToPlayer) return false;
        if (isPlayerFrozen) return false;
        if (isPlayerCarryingAction) return false;
        if (isPlayerCuffed) return false;
        if (mp.gui.cursor.visible) return false;
        if (TempPlaceableObject != null) return false;
        if (mp.players.local.isBeingStunned(0)) return false;
        if (Webwindow["WeaponShop"] != null) return false;
        if (mp.game.invoke('0xD9D2CFFF49FAB35F') === 1) return false;
        if (disableAllControls) return false;
        if (GangwarScoreboard.isPlayerInGangwar()) return false;
        if (Webwindow["Bank"]) return false;
        if (Seats.usingChair) return false;
        if (LocalPlayerLastIncomingHit + 10 >= Utility.GetTimestamp()) return false;
        if (mp.players.local.vehicle) return false;
        if (!!AnimationManager.animationPlaying) return false;
        if (Seats.blockSittingUntil > Date.now()) return false;

        const playerPos = mp.players.local.position;
        let dist = 999999;
        let objData;

        // check if there is a registered Object which supports sitting on it
        SeatData.propData.forEach((value, key) => {
            const closestObject = mp.game.object.getClosestObjectOfType(playerPos.x, playerPos.y, playerPos.z, 1, mp.game.joaat(key), false, true, true);
            if (closestObject) {

                // extract objectData since worldObjects are not natively supported by RageMP
                const objPos = mp.game.invokeVector3("0x3FEF770D40960D5A", closestObject);
                const objRot = mp.game.invokeVector3("0xAFBD61CC738D9EB9", closestObject, 5);
                const objHeading = mp.game.invokeVector3("0xE83D4F9BA2A38914", closestObject);

                const curDist = mp.game.system.vdist2(playerPos.x, playerPos.y, playerPos.z, objPos.x, objPos.y, objPos.z);

                if (curDist < dist) {

                    if (Math.abs(objRot.x) > .5 || Math.abs(objRot.y) > .5) {
                        return;
                    }

                    // save objectData to variable
                    objData = {
                        name: key,
                        position: objPos,
                        rotation: objRot,
                        heading: objHeading,
                        handle: closestObject,
                    }

                    dist = curDist;
                }
            }
        });

        // check if there was an object
        if (!objData) return false;

        const curDist = mp.game.system.vdist2(playerPos.x, playerPos.y, playerPos.z, objData.position.x, objData.position.y, objData.position.z);

        const rayCast = mp.raycasting.testPointToPoint(playerPos, objData.position, mp.players.local, 1);

        if (rayCast) {
            if (typeof rayCast.entity == "object") {
                if (rayCast.entity.handle != objData.handle) {
                    return false;
                }
            } else if (rayCast.entity != objData.handle) {
                return false;
            }
        }

        return true;
    }

    /**
     * called on ButtonPressed : E
     * looks for seat and sends request to server
     */
    static trySitDown() {
        if (IsPlayerInFightClub) return;
        if (IsInHalloweenHouse) return;
        if (HalloweenHouseWaiting) return;
        if (ObjectAttachedToPlayer) return;
        if (isPlayerFrozen) return;
        if (isPlayerCarryingAction) return;
        if (isPlayerCuffed) return;
        if (mp.gui.cursor.visible) return;
        if (TempPlaceableObject != null) return;
        if (mp.players.local.isBeingStunned(0)) return;
        if (Webwindow["WeaponShop"] != null) return;
        if (mp.game.invoke('0xD9D2CFFF49FAB35F') === 1) return;
        if (disableAllControls) return;
        if (GangwarScoreboard.isPlayerInGangwar()) return;
        if (Webwindow["Bank"]) return;
        if (Seats.usingChair) return;
        if (LocalPlayerLastIncomingHit + 10 >= Utility.GetTimestamp()) return;
        if (mp.players.local.vehicle) return;
        if (!!AnimationManager.animationPlaying) return;
        if (Seats.blockSittingUntil > Date.now()) return;
        const playerPos = mp.players.local.position;
        let dist = 999999;
        let objData;

        // check if there is a registered Object which supports sitting on it
        SeatData.propData.forEach((value, key) => {
            const closestObject = mp.game.object.getClosestObjectOfType(playerPos.x, playerPos.y, playerPos.z, 1, mp.game.joaat(key), false, true, true);
            if (closestObject) {

                // extract objectData since worldObjects are not natively supported by RageMP
                const objPos = mp.game.invokeVector3("0x3FEF770D40960D5A", closestObject);
                const objRot = mp.game.invokeVector3("0xAFBD61CC738D9EB9", closestObject, 5);
                const objHeading = mp.game.invokeVector3("0xE83D4F9BA2A38914", closestObject);

                const curDist = mp.game.system.vdist2(playerPos.x, playerPos.y, playerPos.z, objPos.x, objPos.y, objPos.z);

                if (curDist < dist) {

                    if (Math.abs(objRot.x) > .5 || Math.abs(objRot.y) > .5) {
                        return;
                    }

                    // save objectData to variable
                    objData = {
                        name: key,
                        position: objPos,
                        rotation: objRot,
                        heading: objHeading,
                        handle: closestObject,
                    }

                    dist = curDist;
                }
            }
        });

        // check if there was an object
        if (!objData) return;
        const curDist = mp.game.system.vdist2(playerPos.x, playerPos.y, playerPos.z, objData.position.x, objData.position.y, objData.position.z);

        const rayCast = mp.raycasting.testPointToPoint(playerPos, objData.position, mp.players.local, 1);

        if (rayCast) {
            if (typeof rayCast.entity == "object") {
                if (rayCast.entity.handle != objData.handle) {
                    return;
                }
            } else if (rayCast.entity != objData.handle) {
                return;
            }
        }

        if (mp.storage.data.testServer[mp.game.joaat('BETA_SEATS_DEBUG')]) {
            VioRageManager.SendChatMessage(`Seat: ${objData.name} Dist: ${curDist} Handle: ${objData.handle}`);
            VioRageManager.SendChatMessage(`RayCast: ${JSON.stringify(rayCast)}`);
        }

        const data = SeatData.propData.get(objData.name);

        // check for free seat places
        let freePlaces = [];
        data.offset.forEach((offset) => {
            let isUse = false;
            const position = Seats.calcNewOffset(offset.position, objData.heading.x);
            mp.players.forEachInStreamRange((player) => {
                const dist = mp.game.system.vdist(objData.position.x + position.x, objData.position.y + position.y, objData.position.z - position.z, player.position.x, player.position.y, player.position.z);
                if (dist < .5) {
                    isUse = true;
                }
            });
            if (!isUse) {
                freePlaces.push({offset, position});
            }
        });

        // check if there are freePlaces to sit on
        if (freePlaces.length === 0) return;

        // check for nears seat
        let lastDist = 99999;
        let newOffsetData;
        freePlaces.forEach((data) => {
            const player = mp.players.local;
            const dist = mp.game.system.vdist(
                objData.position.x + data.position.x, objData.position.y + data.position.y, objData.position.z - data.position.z,
                player.position.x, player.position.y, player.position.z);
            if (dist < lastDist) {
                lastDist = dist;
                newOffsetData = data;
            }
        });

        // freeze player and seat Object
        // mp.players.local.freezePosition(true);
        VioRageManager.FreezePosition(mp.players.local, true);
        mp.game.invoke("0x428CA6DBD1094446", objData.handle, true);

        // save lastPosition for standUp and other stuff
        Seats.lastPosition = mp.players.local.position;
        Seats.usingChair = true;
        Seats.chairObject = objData;

        // start sitting animation
        const coords = objData.position;

        AnimationManager.stopAnimation(true);
        mp.players.local.taskStartScenarioAtPosition(
            SeatData.sitAnimation.anim,
            coords.x + newOffsetData.position.x, coords.y + newOffsetData.position.y, coords.z - newOffsetData.position.z,
            objData.heading.x + newOffsetData.offset.heading,
            0, false, true);
    }

    /**
     * called on ButtonPressed: SPACE
     * triggest to server that player has stand up
     */
    static standUp() {
        if (mp.gui.cursor.visible) return;
        if (!Seats.usingChair) return;
        Seats.usingChair = false;
        Seats.chairObject = null;
        mp.players.local.clearTasksImmediately();
        // mp.players.local.freezePosition(false);
        VioRageManager.FreezePosition(mp.players.local, false);
        mp.players.local.position = Seats.lastPosition;
    }

    /**
     * executes onRender
     * checks if chair was moved to stand up
     */
    static render() {
        if (!Seats.usingChair) return;

        if (VioRageManager.vdist2(Seats.chairObject.position, mp.game.invokeVector3("0x3FEF770D40960D5A", Seats.chairObject.handle)) > 1) {
            Seats.standUp();
        }
    }


    /**
     * turn the point by heading
     * @param {Vector3Mp} offset
     * @param {number} headingDegree
     * @return {Vector3Mp}
     */
    static calcNewOffset(offset, headingDegree) {
        const heading = headingDegree * (Math.PI / 180);
        const mag = Math.sqrt((offset.x * offset.x) + (offset.y * offset.y));
        const headingOffset = Math.atan2(offset.y, offset.x);
        return new mp.Vector3(mag * Math.cos(heading + headingOffset), mag * Math.sin(heading + headingOffset), offset.z);
    }
}

/**
 * Config Data for supported Seat objects
 */
class SeatData {
    static sitAnimation = {
        dict: "",
        anim: "PROP_HUMAN_SEAT_CHAIR_MP_PLAYER",
    };
    static bedBackAnimation = {
        dict: "anim@gangops@morgue@table@",
        anim: "ko_front",
    };
    static bedStomachAnimation = {
        dict: "",
        anim: "WORLD_HUMAN_SUNBATHE",
    };
    static bedSitAnimation = {
        dict: "",
        anim: "WORLD_HUMAN_PICNIC",
    };

    static propData = new Map();

    static init() {
        // Table with Bench
        SeatData.propData.set("prop_picnictable_01", new PropData("prop_picnictable_01", [
            new SeatPosition(new mp.Vector3(.45, .7, 0.5), 170),
            new SeatPosition(new mp.Vector3(-.45, .7, 0.5), 190),
            new SeatPosition(new mp.Vector3(-.45, -.7, 0.5), 170 + 180),
            new SeatPosition(new mp.Vector3(.45, -.7, 0.5), 190 + 180),
        ], false));
        SeatData.propData.set("prop_picnictable_01_lod", new PropData("prop_picnictable_01_lod", [
            new SeatPosition(new mp.Vector3(.45, .7, 0.5), 170),
            new SeatPosition(new mp.Vector3(-.45, .7, 0.5), 190),
            new SeatPosition(new mp.Vector3(-.45, -.7, 0.5), 170 + 180),
            new SeatPosition(new mp.Vector3(.45, -.7, 0.5), 190 + 180),
        ], false));
        SeatData.propData.set("prop_picnictable_02", new PropData("prop_picnictable_02", [
            new SeatPosition(new mp.Vector3(.45, .7, 0.5), 170),
            new SeatPosition(new mp.Vector3(-.45, .7, 0.5), 190),
            new SeatPosition(new mp.Vector3(-.45, -.7, 0.5), 170 + 180),
            new SeatPosition(new mp.Vector3(.45, -.7, 0.5), 190 + 180),
        ], false));

        // Benches
        SeatData.propData.set("prop_bench_01a", new PropData("prop_bench_01a", [
            new SeatPosition(new mp.Vector3(.75, 0, 0.5), 180),
            new SeatPosition(new mp.Vector3(0, 0, 0.5), 180),
            new SeatPosition(new mp.Vector3(-.75, 0, 0.5), 180),
        ], false));
        SeatData.propData.set("prop_bench_01b", new PropData("prop_bench_01b", [
            new SeatPosition(new mp.Vector3(.75, 0, 0.5), 180),
            new SeatPosition(new mp.Vector3(0, 0, 0.5), 180),
            new SeatPosition(new mp.Vector3(-.75, 0, 0.5), 180),
        ], false));
        SeatData.propData.set("prop_bench_01c", new PropData("prop_bench_01c", [
            new SeatPosition(new mp.Vector3(.75, 0, 0.5), 180),
            new SeatPosition(new mp.Vector3(0, 0, 0.5), 180),
            new SeatPosition(new mp.Vector3(-.75, 0, 0.5), 180),
        ], false));

        SeatData.propData.set("prop_bench_02", new PropData("prop_bench_02", [
            new SeatPosition(new mp.Vector3(.75, 0, 0.5), 180),
            new SeatPosition(new mp.Vector3(0, 0, 0.5), 180),
            new SeatPosition(new mp.Vector3(-.75, 0, 0.5), 180),
        ], false));

        SeatData.propData.set("prop_bench_03", new PropData("prop_bench_03", [
            new SeatPosition(new mp.Vector3(.75, 0, 0.5), 180),
            new SeatPosition(new mp.Vector3(0, 0, 0.5), 180),
            new SeatPosition(new mp.Vector3(-.75, 0, 0.5), 180),
        ], false));
        SeatData.propData.set("prop_bench_04", new PropData("prop_bench_04", [
            new SeatPosition(new mp.Vector3(.75, 0, 0.5), 180),
            new SeatPosition(new mp.Vector3(0, 0, 0.5), 180),
            new SeatPosition(new mp.Vector3(-.75, 0, 0.5), 180),
        ], false));
        SeatData.propData.set("prop_bench_05", new PropData("prop_bench_05", [
            new SeatPosition(new mp.Vector3(.75, 0, 0.5), 180),
            new SeatPosition(new mp.Vector3(0, 0, 0.5), 180),
            new SeatPosition(new mp.Vector3(-.75, 0, 0.5), 180),
        ], false));
        SeatData.propData.set("prop_bench_06", new PropData("prop_bench_06", [
            new SeatPosition(new mp.Vector3(.75, 0, 0.5), 180),
            new SeatPosition(new mp.Vector3(0, 0, 0.5), 180),
            new SeatPosition(new mp.Vector3(-.75, 0, 0.5), 180),
        ], false));
        SeatData.propData.set("prop_bench_07", new PropData("prop_bench_07", [
            new SeatPosition(new mp.Vector3(.75, 0, 0.5), 180),
            new SeatPosition(new mp.Vector3(0, 0, 0.5), 180),
            new SeatPosition(new mp.Vector3(-.75, 0, 0.5), 180),
        ], false));
        SeatData.propData.set("prop_bench_08", new PropData("prop_bench_08", [
            new SeatPosition(new mp.Vector3(.75, 0, 0.5), 180),
            new SeatPosition(new mp.Vector3(0, 0, 0.5), 180),
            new SeatPosition(new mp.Vector3(-.75, 0, 0.5), 180),
        ], false));
        SeatData.propData.set("prop_bench_09", new PropData("prop_bench_09", [
            new SeatPosition(new mp.Vector3(.75, 0, 0.5), 180),
            new SeatPosition(new mp.Vector3(0, 0, 0.5), 180),
            new SeatPosition(new mp.Vector3(-.75, 0, 0.5), 180),
        ], false));
        SeatData.propData.set("prop_bench_10", new PropData("prop_bench_10", [
            new SeatPosition(new mp.Vector3(.75, 0, 0.5), 180),
            new SeatPosition(new mp.Vector3(0, 0, 0.5), 180),
            new SeatPosition(new mp.Vector3(-.75, 0, 0.5), 180),
        ], false));
        SeatData.propData.set("prop_bench_11", new PropData("prop_bench_11", [
            new SeatPosition(new mp.Vector3(.75, 0, 0.5), 180),
            new SeatPosition(new mp.Vector3(0, 0, 0.5), 180),
            new SeatPosition(new mp.Vector3(-.75, 0, 0.5), 180),
        ], false));

        // Chairs
        SeatData.propData.set("hei_prop_heist_off_chair", new PropData("hei_prop_heist_off_chair", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("hei_prop_hei_skid_chair", new PropData("hei_prop_hei_skid_chair", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_chair_01a", new PropData("prop_chair_01a", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_chair_01b", new PropData("prop_chair_01b", [new SeatPosition(new mp.Vector3(-0.009, 0.043, 0.490), -174.295),], false));
        SeatData.propData.set("prop_chair_02", new PropData("prop_chair_02", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_chair_03", new PropData("prop_chair_03", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_chair_04a", new PropData("prop_chair_04a", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_chair_04b", new PropData("prop_chair_04b", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_chair_05", new PropData("prop_chair_05", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_chair_06", new PropData("prop_chair_06", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_chair_07", new PropData("prop_chair_07", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_chair_08", new PropData("prop_chair_08", [new SeatPosition(new mp.Vector3(-0.009, 0.133, -0.036), -172.203),], false));
        SeatData.propData.set("prop_chair_09", new PropData("prop_chair_09", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_chair_10", new PropData("prop_chair_10", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_chateau_chair_01", new PropData("prop_chateau_chair_01", [new SeatPosition(new mp.Vector3(0, 0, 0), 180)], false));
        SeatData.propData.set("prop_clown_chair", new PropData("prop_clown_chair", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_cs_office_chair", new PropData("prop_cs_office_chair", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_direct_chair_01", new PropData("prop_direct_chair_01", [new SeatPosition(new mp.Vector3(0, 0, 0.2), 180)], false));
        SeatData.propData.set("prop_direct_chair_02", new PropData("prop_direct_chair_02", [new SeatPosition(new mp.Vector3(0, 0, 0.2), 180)], false));
        SeatData.propData.set("prop_gc_chair02", new PropData("prop_gc_chair02", [new SeatPosition(new mp.Vector3(0, 0, 0), 180)], false));
        SeatData.propData.set("prop_off_chair_01", new PropData("prop_off_chair_01", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_off_chair_03", new PropData("prop_off_chair_03", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_off_chair_04", new PropData("prop_off_chair_04", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_off_chair_04b", new PropData("prop_off_chair_04b", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_off_chair_04_s", new PropData("prop_off_chair_04_s", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_off_chair_05", new PropData("prop_off_chair_05", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_old_deck_chair", new PropData("prop_old_deck_chair", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_old_wood_chair", new PropData("prop_old_wood_chair", [new SeatPosition(new mp.Vector3(-0.019, 0.133, 0.103), -175.802),], false));
        SeatData.propData.set("prop_rock_chair_01", new PropData("prop_rock_chair_01", [new SeatPosition(new mp.Vector3(-0.019, 0.133, 0.103), -175.802),], false));
        SeatData.propData.set("prop_skid_chair_01", new PropData("prop_skid_chair_01", [new SeatPosition(new mp.Vector3(0, 0.123, 0.083), -175.802),], false));
        SeatData.propData.set("prop_skid_chair_02", new PropData("prop_skid_chair_02", [new SeatPosition(new mp.Vector3(0, 0.123, 0.083), -175.802),], false));
        SeatData.propData.set("prop_skid_chair_03", new PropData("prop_skid_chair_03", [new SeatPosition(new mp.Vector3(0, 0.123, 0.083), -175.802),], false));
        SeatData.propData.set("prop_sol_chair", new PropData("prop_sol_chair", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_wheelchair_01", new PropData("prop_wheelchair_01", [new SeatPosition(new mp.Vector3(0, 0, 0.05), 180)], false));
        SeatData.propData.set("prop_wheelchair_01_s", new PropData("prop_wheelchair_01_s", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("p_armchair_01_s", new PropData("p_armchair_01_s", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("p_clb_officechair_s", new PropData("p_clb_officechair_s", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("p_dinechair_01_s", new PropData("p_dinechair_01_s", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("p_ilev_p_easychair_s", new PropData("p_ilev_p_easychair_s", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("p_soloffchair_s", new PropData("p_soloffchair_s", [new SeatPosition(new mp.Vector3(-0.009, -0.086, -0.099), -174.295),], false));
        SeatData.propData.set("p_yacht_chair_01_s", new PropData("p_yacht_chair_01_s", [new SeatPosition(new mp.Vector3(0, 0, 0), 180)], false));
        SeatData.propData.set("v_club_officechair", new PropData("v_club_officechair", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("v_corp_bk_chair3", new PropData("v_corp_bk_chair3", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("v_corp_cd_chair", new PropData("v_corp_cd_chair", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("v_corp_offchair", new PropData("v_corp_offchair", [new SeatPosition(new mp.Vector3(0, 0.123, 0.483), -175.802)], false));

        SeatData.propData.set("v_ilev_chair02_ped", new PropData("v_ilev_chair02_ped", [new SeatPosition(new mp.Vector3(0, 0, 0), 180)], false));

        SeatData.propData.set("v_ilev_hd_chair", new PropData("v_ilev_hd_chair", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("v_ilev_p_easychair", new PropData("v_ilev_p_easychair", [new SeatPosition(new mp.Vector3(0, 0.053, 0.543), -175.802)], false));
        SeatData.propData.set("v_ret_gc_chair03", new PropData("v_ret_gc_chair03", [new SeatPosition(new mp.Vector3(0.02, 0.043, -0.166), -175.802)], false));
        // SeatData.propData.set("prop_ld_farm_chair01", new PropData("prop_ld_farm_chair01", [new SeatPosition(new mp.Vector3(0, 0, 0.5), -180)], false)); // buggy
        SeatData.propData.set("prop_table_04_chr", new PropData("prop_table_04_chr", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_table_05_chr", new PropData("prop_table_05_chr", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_table_06_chr", new PropData("prop_table_06_chr", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("v_ilev_leath_chr", new PropData("v_ilev_leath_chr", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_table_01_chr_a", new PropData("prop_table_01_chr_a", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_table_01_chr_b", new PropData("prop_table_01_chr_b", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_table_02_chr", new PropData("prop_table_02_chr", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_table_03b_chr", new PropData("prop_table_03b_chr", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_table_03_chr", new PropData("prop_table_03_chr", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_torture_ch_01", new PropData("prop_torture_ch_01", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("v_ilev_fh_dineeamesa", new PropData("v_ilev_fh_dineeamesa", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));

        SeatData.propData.set("v_ilev_fh_kitchenstool", new PropData("v_ilev_fh_kitchenstool", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("v_ilev_tort_stool", new PropData("v_ilev_tort_stool", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));

        // Seats
        SeatData.propData.set("hei_prop_yah_seat_01", new PropData("hei_prop_yah_seat_01", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("hei_prop_yah_seat_02", new PropData("hei_prop_yah_seat_02", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("hei_prop_yah_seat_03", new PropData("hei_prop_yah_seat_03", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_waiting_seat_01", new PropData("prop_waiting_seat_01", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_yacht_seat_01", new PropData("prop_yacht_seat_01", [new SeatPosition(new mp.Vector3(0, 0, 0), 180)], false));
        SeatData.propData.set("prop_yacht_seat_02", new PropData("prop_yacht_seat_02", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_yacht_seat_03", new PropData("prop_yacht_seat_03", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_hobo_seat_01", new PropData("prop_hobo_seat_01", [new SeatPosition(new mp.Vector3(0, 0, 0.65), 180)], false));

        // Couches
        SeatData.propData.set("prop_rub_couch01", new PropData("prop_rub_couch01", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_rub_couch02", new PropData("prop_rub_couch02", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_rub_couch03", new PropData("prop_rub_couch03", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_rub_couch04", new PropData("prop_rub_couch04", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("miss_rub_couch_01", new PropData("miss_rub_couch_01", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_ld_farm_couch01", new PropData("prop_ld_farm_couch01", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_ld_farm_couch02", new PropData("prop_ld_farm_couch02", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));

        // Sofas
        SeatData.propData.set("p_lev_sofa_s", new PropData("p_lev_sofa_s", [new SeatPosition(new mp.Vector3(1.530, 0.483, 0.503), -175.802),
            new SeatPosition(new mp.Vector3(0.530, 0.483, 0.503), -175.802),
            new SeatPosition(new mp.Vector3(-0.469, 0.483, 0.503), -175.802),
            new SeatPosition(new mp.Vector3(-1.369, -0.716, 0.503), -85.802),
        ], false));
        SeatData.propData.set("p_res_sofa_l_s", new PropData("p_res_sofa_l_s", [
            new SeatPosition(new mp.Vector3(0.530, -0.206, 0.593), -175.802),
            new SeatPosition(new mp.Vector3(-0.469, -0.166, 0.603), -175.802),
        ], false));
        SeatData.propData.set("p_v_med_p_sofa_s", new PropData("p_v_med_p_sofa_s", [
            new SeatPosition(new mp.Vector3(0.860, -0.056, 0.433), -175.802),
            new SeatPosition(new mp.Vector3(0.06, -0.056, 0.433), -175.802),
            new SeatPosition(new mp.Vector3(-0.839, -0.056, 0.433), -175.802),
        ], false));
        SeatData.propData.set("p_yacht_sofa_01_s", new PropData("p_yacht_sofa_01_s", [
            new SeatPosition(new mp.Vector3(0.360, -0.026, 0.003), -175.802),
            new SeatPosition(new mp.Vector3(-0.329, -0.026, 0.003), -175.802),
        ], false));
        SeatData.propData.set("v_ilev_m_sofa", new PropData("v_ilev_m_sofa", [
            new SeatPosition(new mp.Vector3(1.580, 0.503, 0.483), -175.802),
            new SeatPosition(new mp.Vector3(0.530, 0.503, 0.483), -175.802),
            new SeatPosition(new mp.Vector3(-0.369, 0.503, 0.483), -175.802),
            new SeatPosition(new mp.Vector3(-1.359, -0.496, 0.493), -84.801),
        ], false));
        SeatData.propData.set("v_res_tre_sofa_s", new PropData("v_res_tre_sofa_s", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("v_tre_sofa_mess_a_s", new PropData("v_tre_sofa_mess_a_s", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("v_tre_sofa_mess_b_s", new PropData("v_tre_sofa_mess_b_s", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("v_tre_sofa_mess_c_s", new PropData("v_tre_sofa_mess_c_s", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));

        // Miscs
        SeatData.propData.set("prop_roller_car_01", new PropData("prop_roller_car_01", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));
        SeatData.propData.set("prop_roller_car_02", new PropData("prop_roller_car_02", [new SeatPosition(new mp.Vector3(0, 0, 0.5), 180)], false));


        SeatData.propData.set("v_ilev_ph_bench", new PropData("v_ilev_ph_bench", [
            new SeatPosition(new mp.Vector3(1.270, 0.183, 0.55), -175.802),
            new SeatPosition(new mp.Vector3(0.630, 0.183, 0.55), -175.802),
            new SeatPosition(new mp.Vector3(0, 0.183, 0.55), -175.802),
            new SeatPosition(new mp.Vector3(-0.629, 0.183, 0.55), -175.802),
            new SeatPosition(new mp.Vector3(-1.259, 0.183, 0.55), -175.802),
        ], false));
    }
}

/**
 * This Class holds SeatObject Offset Values to sit properly
 */
class PropData {
    constructor(objName, offset, direction, isBed) {
        this.objName = objName;
        this.offset = offset;
        this.direction = direction;
        this.isBed = isBed;
    }
}

/**
 * This Class holds Information about exact Seat Positions and Heading for the Player to sit correctly on that Seat
 */
class SeatPosition {
    constructor(position, heading) {
        this.position = position;
        this.position.z *= -1;
        this.heading = Utility.getRealRotation(heading);
    }
}

/**
 * initialize Seats
 */
Seats.init();

mp.events.add("playerReady", () => {
    BridgeWindow = new CEFBrowser("https://vio-v.com/gameplay/CEF/" + CEF_Master_Link + "/html/launcher_bridge/launcher_bridge.html", false);

    CommunicationManager.AddWebBrowserEvent("OnClientLostLauncher", () => {
        CreateNotify("~r~Die Verbindung zum Launcher wurde getrennt!");
        BridgeConnectionState = false;
        mp.gui.call("setStreamerMode", (mp.storage.data.streamerMode == "1" && BridgeConnectionState));
    });

    CommunicationManager.AddWebBrowserEvent("OnClientConnectLauncher", () => {
        CreateNotify("~g~Die Verbindung zum Launcher wurde hergestellt!");

        if (!login && Webwindow["Login"]) {
            BridgeWindow.call("OnClientRequestLauncherAction", "requestLauncherLogin");
        }

        if (mp.storage.data.streamerMode == "1") {
            if (BridgeWindow) {
                BridgeWindow.call("OnClientRequestLauncherAction", "streamerModeActivate");
                BridgeConnectionState = true;
                mp.gui.call("setStreamerMode", (mp.storage.data.streamerMode == "1" && BridgeConnectionState));
            }
        }
    });
});

}